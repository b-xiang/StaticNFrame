// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: battle2game.proto

#ifndef PROTOBUF_battle2game_2eproto__INCLUDED
#define PROTOBUF_battle2game_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
#include "battle.pb.h"
// @@protoc_insertion_point(includes)

namespace proto {
namespace message {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_battle2game_2eproto();
void protobuf_AssignDesc_battle2game_2eproto();
void protobuf_ShutdownFile_battle2game_2eproto();

class EnterTowerToBat;
class GuildInfoToBat;
class SkillInfoToBat;
class SkillPosChangeToBat;
class PlayerDataToBat;
class SkillValueToGame;
class UpdateDataToGame;
class SecneLoadOK;
class BackToCityBorn;

// ===================================================================

class EnterTowerToBat : public ::google::protobuf::Message {
 public:
  EnterTowerToBat();
  virtual ~EnterTowerToBat();

  EnterTowerToBat(const EnterTowerToBat& from);

  inline EnterTowerToBat& operator=(const EnterTowerToBat& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EnterTowerToBat& default_instance();

  void Swap(EnterTowerToBat* other);

  // implements Message ----------------------------------------------

  EnterTowerToBat* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EnterTowerToBat& from);
  void MergeFrom(const EnterTowerToBat& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 times = 1;
  inline bool has_times() const;
  inline void clear_times();
  static const int kTimesFieldNumber = 1;
  inline ::google::protobuf::int32 times() const;
  inline void set_times(::google::protobuf::int32 value);

  // repeated int32 floor40 = 2;
  inline int floor40_size() const;
  inline void clear_floor40();
  static const int kFloor40FieldNumber = 2;
  inline ::google::protobuf::int32 floor40(int index) const;
  inline void set_floor40(int index, ::google::protobuf::int32 value);
  inline void add_floor40(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      floor40() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_floor40();

  // repeated int32 pastime40 = 3;
  inline int pastime40_size() const;
  inline void clear_pastime40();
  static const int kPastime40FieldNumber = 3;
  inline ::google::protobuf::int32 pastime40(int index) const;
  inline void set_pastime40(int index, ::google::protobuf::int32 value);
  inline void add_pastime40(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      pastime40() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_pastime40();

  // repeated int32 floor60 = 4;
  inline int floor60_size() const;
  inline void clear_floor60();
  static const int kFloor60FieldNumber = 4;
  inline ::google::protobuf::int32 floor60(int index) const;
  inline void set_floor60(int index, ::google::protobuf::int32 value);
  inline void add_floor60(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      floor60() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_floor60();

  // repeated int32 pastime60 = 5;
  inline int pastime60_size() const;
  inline void clear_pastime60();
  static const int kPastime60FieldNumber = 5;
  inline ::google::protobuf::int32 pastime60(int index) const;
  inline void set_pastime60(int index, ::google::protobuf::int32 value);
  inline void add_pastime60(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      pastime60() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_pastime60();

  // optional int32 buffid = 6;
  inline bool has_buffid() const;
  inline void clear_buffid();
  static const int kBuffidFieldNumber = 6;
  inline ::google::protobuf::int32 buffid() const;
  inline void set_buffid(::google::protobuf::int32 value);

  // optional int32 flownum = 7;
  inline bool has_flownum() const;
  inline void clear_flownum();
  static const int kFlownumFieldNumber = 7;
  inline ::google::protobuf::int32 flownum() const;
  inline void set_flownum(::google::protobuf::int32 value);

  // optional int32 levtime = 8;
  inline bool has_levtime() const;
  inline void clear_levtime();
  static const int kLevtimeFieldNumber = 8;
  inline ::google::protobuf::int32 levtime() const;
  inline void set_levtime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.message.EnterTowerToBat)
 private:
  inline void set_has_times();
  inline void clear_has_times();
  inline void set_has_buffid();
  inline void clear_has_buffid();
  inline void set_has_flownum();
  inline void clear_has_flownum();
  inline void set_has_levtime();
  inline void clear_has_levtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > floor40_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > pastime40_;
  ::google::protobuf::int32 times_;
  ::google::protobuf::int32 buffid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > floor60_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > pastime60_;
  ::google::protobuf::int32 flownum_;
  ::google::protobuf::int32 levtime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_battle2game_2eproto();
  friend void protobuf_AssignDesc_battle2game_2eproto();
  friend void protobuf_ShutdownFile_battle2game_2eproto();

  void InitAsDefaultInstance();
  static EnterTowerToBat* default_instance_;
};
// -------------------------------------------------------------------

class GuildInfoToBat : public ::google::protobuf::Message {
 public:
  GuildInfoToBat();
  virtual ~GuildInfoToBat();

  GuildInfoToBat(const GuildInfoToBat& from);

  inline GuildInfoToBat& operator=(const GuildInfoToBat& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildInfoToBat& default_instance();

  void Swap(GuildInfoToBat* other);

  // implements Message ----------------------------------------------

  GuildInfoToBat* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildInfoToBat& from);
  void MergeFrom(const GuildInfoToBat& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 guildid = 1;
  inline bool has_guildid() const;
  inline void clear_guildid();
  static const int kGuildidFieldNumber = 1;
  inline ::google::protobuf::uint64 guildid() const;
  inline void set_guildid(::google::protobuf::uint64 value);

  // optional string guildname = 2;
  inline bool has_guildname() const;
  inline void clear_guildname();
  static const int kGuildnameFieldNumber = 2;
  inline const ::std::string& guildname() const;
  inline void set_guildname(const ::std::string& value);
  inline void set_guildname(const char* value);
  inline void set_guildname(const char* value, size_t size);
  inline ::std::string* mutable_guildname();
  inline ::std::string* release_guildname();
  inline void set_allocated_guildname(::std::string* guildname);

  // @@protoc_insertion_point(class_scope:proto.message.GuildInfoToBat)
 private:
  inline void set_has_guildid();
  inline void clear_has_guildid();
  inline void set_has_guildname();
  inline void clear_has_guildname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 guildid_;
  ::std::string* guildname_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_battle2game_2eproto();
  friend void protobuf_AssignDesc_battle2game_2eproto();
  friend void protobuf_ShutdownFile_battle2game_2eproto();

  void InitAsDefaultInstance();
  static GuildInfoToBat* default_instance_;
};
// -------------------------------------------------------------------

class SkillInfoToBat : public ::google::protobuf::Message {
 public:
  SkillInfoToBat();
  virtual ~SkillInfoToBat();

  SkillInfoToBat(const SkillInfoToBat& from);

  inline SkillInfoToBat& operator=(const SkillInfoToBat& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SkillInfoToBat& default_instance();

  void Swap(SkillInfoToBat* other);

  // implements Message ----------------------------------------------

  SkillInfoToBat* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SkillInfoToBat& from);
  void MergeFrom(const SkillInfoToBat& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 old_skillid = 1;
  inline bool has_old_skillid() const;
  inline void clear_old_skillid();
  static const int kOldSkillidFieldNumber = 1;
  inline ::google::protobuf::int32 old_skillid() const;
  inline void set_old_skillid(::google::protobuf::int32 value);

  // optional .proto.message.BatSkillInfo newskill = 2;
  inline bool has_newskill() const;
  inline void clear_newskill();
  static const int kNewskillFieldNumber = 2;
  inline const ::proto::message::BatSkillInfo& newskill() const;
  inline ::proto::message::BatSkillInfo* mutable_newskill();
  inline ::proto::message::BatSkillInfo* release_newskill();
  inline void set_allocated_newskill(::proto::message::BatSkillInfo* newskill);

  // @@protoc_insertion_point(class_scope:proto.message.SkillInfoToBat)
 private:
  inline void set_has_old_skillid();
  inline void clear_has_old_skillid();
  inline void set_has_newskill();
  inline void clear_has_newskill();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::message::BatSkillInfo* newskill_;
  ::google::protobuf::int32 old_skillid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_battle2game_2eproto();
  friend void protobuf_AssignDesc_battle2game_2eproto();
  friend void protobuf_ShutdownFile_battle2game_2eproto();

  void InitAsDefaultInstance();
  static SkillInfoToBat* default_instance_;
};
// -------------------------------------------------------------------

class SkillPosChangeToBat : public ::google::protobuf::Message {
 public:
  SkillPosChangeToBat();
  virtual ~SkillPosChangeToBat();

  SkillPosChangeToBat(const SkillPosChangeToBat& from);

  inline SkillPosChangeToBat& operator=(const SkillPosChangeToBat& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SkillPosChangeToBat& default_instance();

  void Swap(SkillPosChangeToBat* other);

  // implements Message ----------------------------------------------

  SkillPosChangeToBat* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SkillPosChangeToBat& from);
  void MergeFrom(const SkillPosChangeToBat& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 c1_skillid = 1;
  inline bool has_c1_skillid() const;
  inline void clear_c1_skillid();
  static const int kC1SkillidFieldNumber = 1;
  inline ::google::protobuf::uint32 c1_skillid() const;
  inline void set_c1_skillid(::google::protobuf::uint32 value);

  // optional uint32 c1_pos = 2;
  inline bool has_c1_pos() const;
  inline void clear_c1_pos();
  static const int kC1PosFieldNumber = 2;
  inline ::google::protobuf::uint32 c1_pos() const;
  inline void set_c1_pos(::google::protobuf::uint32 value);

  // optional uint32 c2_skillid = 3;
  inline bool has_c2_skillid() const;
  inline void clear_c2_skillid();
  static const int kC2SkillidFieldNumber = 3;
  inline ::google::protobuf::uint32 c2_skillid() const;
  inline void set_c2_skillid(::google::protobuf::uint32 value);

  // optional uint32 c2_pos = 4;
  inline bool has_c2_pos() const;
  inline void clear_c2_pos();
  static const int kC2PosFieldNumber = 4;
  inline ::google::protobuf::uint32 c2_pos() const;
  inline void set_c2_pos(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.message.SkillPosChangeToBat)
 private:
  inline void set_has_c1_skillid();
  inline void clear_has_c1_skillid();
  inline void set_has_c1_pos();
  inline void clear_has_c1_pos();
  inline void set_has_c2_skillid();
  inline void clear_has_c2_skillid();
  inline void set_has_c2_pos();
  inline void clear_has_c2_pos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 c1_skillid_;
  ::google::protobuf::uint32 c1_pos_;
  ::google::protobuf::uint32 c2_skillid_;
  ::google::protobuf::uint32 c2_pos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_battle2game_2eproto();
  friend void protobuf_AssignDesc_battle2game_2eproto();
  friend void protobuf_ShutdownFile_battle2game_2eproto();

  void InitAsDefaultInstance();
  static SkillPosChangeToBat* default_instance_;
};
// -------------------------------------------------------------------

class PlayerDataToBat : public ::google::protobuf::Message {
 public:
  PlayerDataToBat();
  virtual ~PlayerDataToBat();

  PlayerDataToBat(const PlayerDataToBat& from);

  inline PlayerDataToBat& operator=(const PlayerDataToBat& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerDataToBat& default_instance();

  void Swap(PlayerDataToBat* other);

  // implements Message ----------------------------------------------

  PlayerDataToBat* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerDataToBat& from);
  void MergeFrom(const PlayerDataToBat& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 attvalue = 1;
  inline int attvalue_size() const;
  inline void clear_attvalue();
  static const int kAttvalueFieldNumber = 1;
  inline ::google::protobuf::int32 attvalue(int index) const;
  inline void set_attvalue(int index, ::google::protobuf::int32 value);
  inline void add_attvalue(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      attvalue() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_attvalue();

  // repeated int32 attprecent = 2;
  inline int attprecent_size() const;
  inline void clear_attprecent();
  static const int kAttprecentFieldNumber = 2;
  inline ::google::protobuf::int32 attprecent(int index) const;
  inline void set_attprecent(int index, ::google::protobuf::int32 value);
  inline void add_attprecent(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      attprecent() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_attprecent();

  // optional int32 currlev = 3;
  inline bool has_currlev() const;
  inline void clear_currlev();
  static const int kCurrlevFieldNumber = 3;
  inline ::google::protobuf::int32 currlev() const;
  inline void set_currlev(::google::protobuf::int32 value);

  // optional uint32 dhlev = 4;
  inline bool has_dhlev() const;
  inline void clear_dhlev();
  static const int kDhlevFieldNumber = 4;
  inline ::google::protobuf::uint32 dhlev() const;
  inline void set_dhlev(::google::protobuf::uint32 value);

  // optional uint32 baseequip = 5;
  inline bool has_baseequip() const;
  inline void clear_baseequip();
  static const int kBaseequipFieldNumber = 5;
  inline ::google::protobuf::uint32 baseequip() const;
  inline void set_baseequip(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.message.PlayerDataToBat)
 private:
  inline void set_has_currlev();
  inline void clear_has_currlev();
  inline void set_has_dhlev();
  inline void clear_has_dhlev();
  inline void set_has_baseequip();
  inline void clear_has_baseequip();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > attvalue_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > attprecent_;
  ::google::protobuf::int32 currlev_;
  ::google::protobuf::uint32 dhlev_;
  ::google::protobuf::uint32 baseequip_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_battle2game_2eproto();
  friend void protobuf_AssignDesc_battle2game_2eproto();
  friend void protobuf_ShutdownFile_battle2game_2eproto();

  void InitAsDefaultInstance();
  static PlayerDataToBat* default_instance_;
};
// -------------------------------------------------------------------

class SkillValueToGame : public ::google::protobuf::Message {
 public:
  SkillValueToGame();
  virtual ~SkillValueToGame();

  SkillValueToGame(const SkillValueToGame& from);

  inline SkillValueToGame& operator=(const SkillValueToGame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SkillValueToGame& default_instance();

  void Swap(SkillValueToGame* other);

  // implements Message ----------------------------------------------

  SkillValueToGame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SkillValueToGame& from);
  void MergeFrom(const SkillValueToGame& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 skillid = 1;
  inline bool has_skillid() const;
  inline void clear_skillid();
  static const int kSkillidFieldNumber = 1;
  inline ::google::protobuf::uint32 skillid() const;
  inline void set_skillid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.message.SkillValueToGame)
 private:
  inline void set_has_skillid();
  inline void clear_has_skillid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 skillid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_battle2game_2eproto();
  friend void protobuf_AssignDesc_battle2game_2eproto();
  friend void protobuf_ShutdownFile_battle2game_2eproto();

  void InitAsDefaultInstance();
  static SkillValueToGame* default_instance_;
};
// -------------------------------------------------------------------

class UpdateDataToGame : public ::google::protobuf::Message {
 public:
  UpdateDataToGame();
  virtual ~UpdateDataToGame();

  UpdateDataToGame(const UpdateDataToGame& from);

  inline UpdateDataToGame& operator=(const UpdateDataToGame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateDataToGame& default_instance();

  void Swap(UpdateDataToGame* other);

  // implements Message ----------------------------------------------

  UpdateDataToGame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateDataToGame& from);
  void MergeFrom(const UpdateDataToGame& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 value = 1;
  inline int value_size() const;
  inline void clear_value();
  static const int kValueFieldNumber = 1;
  inline ::google::protobuf::int32 value(int index) const;
  inline void set_value(int index, ::google::protobuf::int32 value);
  inline void add_value(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      value() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_value();

  // repeated int32 type = 2;
  inline int type_size() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type(int index) const;
  inline void set_type(int index, ::google::protobuf::int32 value);
  inline void add_type(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      type() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_type();

  // @@protoc_insertion_point(class_scope:proto.message.UpdateDataToGame)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > value_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_battle2game_2eproto();
  friend void protobuf_AssignDesc_battle2game_2eproto();
  friend void protobuf_ShutdownFile_battle2game_2eproto();

  void InitAsDefaultInstance();
  static UpdateDataToGame* default_instance_;
};
// -------------------------------------------------------------------

class SecneLoadOK : public ::google::protobuf::Message {
 public:
  SecneLoadOK();
  virtual ~SecneLoadOK();

  SecneLoadOK(const SecneLoadOK& from);

  inline SecneLoadOK& operator=(const SecneLoadOK& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SecneLoadOK& default_instance();

  void Swap(SecneLoadOK* other);

  // implements Message ----------------------------------------------

  SecneLoadOK* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SecneLoadOK& from);
  void MergeFrom(const SecneLoadOK& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 mapid = 1;
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapidFieldNumber = 1;
  inline ::google::protobuf::uint32 mapid() const;
  inline void set_mapid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.message.SecneLoadOK)
 private:
  inline void set_has_mapid();
  inline void clear_has_mapid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 mapid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_battle2game_2eproto();
  friend void protobuf_AssignDesc_battle2game_2eproto();
  friend void protobuf_ShutdownFile_battle2game_2eproto();

  void InitAsDefaultInstance();
  static SecneLoadOK* default_instance_;
};
// -------------------------------------------------------------------

class BackToCityBorn : public ::google::protobuf::Message {
 public:
  BackToCityBorn();
  virtual ~BackToCityBorn();

  BackToCityBorn(const BackToCityBorn& from);

  inline BackToCityBorn& operator=(const BackToCityBorn& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BackToCityBorn& default_instance();

  void Swap(BackToCityBorn* other);

  // implements Message ----------------------------------------------

  BackToCityBorn* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BackToCityBorn& from);
  void MergeFrom(const BackToCityBorn& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 mapid = 1;
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapidFieldNumber = 1;
  inline ::google::protobuf::uint32 mapid() const;
  inline void set_mapid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.message.BackToCityBorn)
 private:
  inline void set_has_mapid();
  inline void clear_has_mapid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 mapid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_battle2game_2eproto();
  friend void protobuf_AssignDesc_battle2game_2eproto();
  friend void protobuf_ShutdownFile_battle2game_2eproto();

  void InitAsDefaultInstance();
  static BackToCityBorn* default_instance_;
};
// ===================================================================


// ===================================================================

// EnterTowerToBat

// optional int32 times = 1;
inline bool EnterTowerToBat::has_times() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EnterTowerToBat::set_has_times() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EnterTowerToBat::clear_has_times() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EnterTowerToBat::clear_times() {
  times_ = 0;
  clear_has_times();
}
inline ::google::protobuf::int32 EnterTowerToBat::times() const {
  return times_;
}
inline void EnterTowerToBat::set_times(::google::protobuf::int32 value) {
  set_has_times();
  times_ = value;
}

// repeated int32 floor40 = 2;
inline int EnterTowerToBat::floor40_size() const {
  return floor40_.size();
}
inline void EnterTowerToBat::clear_floor40() {
  floor40_.Clear();
}
inline ::google::protobuf::int32 EnterTowerToBat::floor40(int index) const {
  return floor40_.Get(index);
}
inline void EnterTowerToBat::set_floor40(int index, ::google::protobuf::int32 value) {
  floor40_.Set(index, value);
}
inline void EnterTowerToBat::add_floor40(::google::protobuf::int32 value) {
  floor40_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
EnterTowerToBat::floor40() const {
  return floor40_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
EnterTowerToBat::mutable_floor40() {
  return &floor40_;
}

// repeated int32 pastime40 = 3;
inline int EnterTowerToBat::pastime40_size() const {
  return pastime40_.size();
}
inline void EnterTowerToBat::clear_pastime40() {
  pastime40_.Clear();
}
inline ::google::protobuf::int32 EnterTowerToBat::pastime40(int index) const {
  return pastime40_.Get(index);
}
inline void EnterTowerToBat::set_pastime40(int index, ::google::protobuf::int32 value) {
  pastime40_.Set(index, value);
}
inline void EnterTowerToBat::add_pastime40(::google::protobuf::int32 value) {
  pastime40_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
EnterTowerToBat::pastime40() const {
  return pastime40_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
EnterTowerToBat::mutable_pastime40() {
  return &pastime40_;
}

// repeated int32 floor60 = 4;
inline int EnterTowerToBat::floor60_size() const {
  return floor60_.size();
}
inline void EnterTowerToBat::clear_floor60() {
  floor60_.Clear();
}
inline ::google::protobuf::int32 EnterTowerToBat::floor60(int index) const {
  return floor60_.Get(index);
}
inline void EnterTowerToBat::set_floor60(int index, ::google::protobuf::int32 value) {
  floor60_.Set(index, value);
}
inline void EnterTowerToBat::add_floor60(::google::protobuf::int32 value) {
  floor60_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
EnterTowerToBat::floor60() const {
  return floor60_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
EnterTowerToBat::mutable_floor60() {
  return &floor60_;
}

// repeated int32 pastime60 = 5;
inline int EnterTowerToBat::pastime60_size() const {
  return pastime60_.size();
}
inline void EnterTowerToBat::clear_pastime60() {
  pastime60_.Clear();
}
inline ::google::protobuf::int32 EnterTowerToBat::pastime60(int index) const {
  return pastime60_.Get(index);
}
inline void EnterTowerToBat::set_pastime60(int index, ::google::protobuf::int32 value) {
  pastime60_.Set(index, value);
}
inline void EnterTowerToBat::add_pastime60(::google::protobuf::int32 value) {
  pastime60_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
EnterTowerToBat::pastime60() const {
  return pastime60_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
EnterTowerToBat::mutable_pastime60() {
  return &pastime60_;
}

// optional int32 buffid = 6;
inline bool EnterTowerToBat::has_buffid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void EnterTowerToBat::set_has_buffid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void EnterTowerToBat::clear_has_buffid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void EnterTowerToBat::clear_buffid() {
  buffid_ = 0;
  clear_has_buffid();
}
inline ::google::protobuf::int32 EnterTowerToBat::buffid() const {
  return buffid_;
}
inline void EnterTowerToBat::set_buffid(::google::protobuf::int32 value) {
  set_has_buffid();
  buffid_ = value;
}

// optional int32 flownum = 7;
inline bool EnterTowerToBat::has_flownum() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void EnterTowerToBat::set_has_flownum() {
  _has_bits_[0] |= 0x00000040u;
}
inline void EnterTowerToBat::clear_has_flownum() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void EnterTowerToBat::clear_flownum() {
  flownum_ = 0;
  clear_has_flownum();
}
inline ::google::protobuf::int32 EnterTowerToBat::flownum() const {
  return flownum_;
}
inline void EnterTowerToBat::set_flownum(::google::protobuf::int32 value) {
  set_has_flownum();
  flownum_ = value;
}

// optional int32 levtime = 8;
inline bool EnterTowerToBat::has_levtime() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void EnterTowerToBat::set_has_levtime() {
  _has_bits_[0] |= 0x00000080u;
}
inline void EnterTowerToBat::clear_has_levtime() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void EnterTowerToBat::clear_levtime() {
  levtime_ = 0;
  clear_has_levtime();
}
inline ::google::protobuf::int32 EnterTowerToBat::levtime() const {
  return levtime_;
}
inline void EnterTowerToBat::set_levtime(::google::protobuf::int32 value) {
  set_has_levtime();
  levtime_ = value;
}

// -------------------------------------------------------------------

// GuildInfoToBat

// optional uint64 guildid = 1;
inline bool GuildInfoToBat::has_guildid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildInfoToBat::set_has_guildid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildInfoToBat::clear_has_guildid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildInfoToBat::clear_guildid() {
  guildid_ = GOOGLE_ULONGLONG(0);
  clear_has_guildid();
}
inline ::google::protobuf::uint64 GuildInfoToBat::guildid() const {
  return guildid_;
}
inline void GuildInfoToBat::set_guildid(::google::protobuf::uint64 value) {
  set_has_guildid();
  guildid_ = value;
}

// optional string guildname = 2;
inline bool GuildInfoToBat::has_guildname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuildInfoToBat::set_has_guildname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuildInfoToBat::clear_has_guildname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuildInfoToBat::clear_guildname() {
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    guildname_->clear();
  }
  clear_has_guildname();
}
inline const ::std::string& GuildInfoToBat::guildname() const {
  return *guildname_;
}
inline void GuildInfoToBat::set_guildname(const ::std::string& value) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
}
inline void GuildInfoToBat::set_guildname(const char* value) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
}
inline void GuildInfoToBat::set_guildname(const char* value, size_t size) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GuildInfoToBat::mutable_guildname() {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  return guildname_;
}
inline ::std::string* GuildInfoToBat::release_guildname() {
  clear_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = guildname_;
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GuildInfoToBat::set_allocated_guildname(::std::string* guildname) {
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    delete guildname_;
  }
  if (guildname) {
    set_has_guildname();
    guildname_ = guildname;
  } else {
    clear_has_guildname();
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SkillInfoToBat

// optional int32 old_skillid = 1;
inline bool SkillInfoToBat::has_old_skillid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SkillInfoToBat::set_has_old_skillid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SkillInfoToBat::clear_has_old_skillid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SkillInfoToBat::clear_old_skillid() {
  old_skillid_ = 0;
  clear_has_old_skillid();
}
inline ::google::protobuf::int32 SkillInfoToBat::old_skillid() const {
  return old_skillid_;
}
inline void SkillInfoToBat::set_old_skillid(::google::protobuf::int32 value) {
  set_has_old_skillid();
  old_skillid_ = value;
}

// optional .proto.message.BatSkillInfo newskill = 2;
inline bool SkillInfoToBat::has_newskill() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SkillInfoToBat::set_has_newskill() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SkillInfoToBat::clear_has_newskill() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SkillInfoToBat::clear_newskill() {
  if (newskill_ != NULL) newskill_->::proto::message::BatSkillInfo::Clear();
  clear_has_newskill();
}
inline const ::proto::message::BatSkillInfo& SkillInfoToBat::newskill() const {
  return newskill_ != NULL ? *newskill_ : *default_instance_->newskill_;
}
inline ::proto::message::BatSkillInfo* SkillInfoToBat::mutable_newskill() {
  set_has_newskill();
  if (newskill_ == NULL) newskill_ = new ::proto::message::BatSkillInfo;
  return newskill_;
}
inline ::proto::message::BatSkillInfo* SkillInfoToBat::release_newskill() {
  clear_has_newskill();
  ::proto::message::BatSkillInfo* temp = newskill_;
  newskill_ = NULL;
  return temp;
}
inline void SkillInfoToBat::set_allocated_newskill(::proto::message::BatSkillInfo* newskill) {
  delete newskill_;
  newskill_ = newskill;
  if (newskill) {
    set_has_newskill();
  } else {
    clear_has_newskill();
  }
}

// -------------------------------------------------------------------

// SkillPosChangeToBat

// optional uint32 c1_skillid = 1;
inline bool SkillPosChangeToBat::has_c1_skillid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SkillPosChangeToBat::set_has_c1_skillid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SkillPosChangeToBat::clear_has_c1_skillid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SkillPosChangeToBat::clear_c1_skillid() {
  c1_skillid_ = 0u;
  clear_has_c1_skillid();
}
inline ::google::protobuf::uint32 SkillPosChangeToBat::c1_skillid() const {
  return c1_skillid_;
}
inline void SkillPosChangeToBat::set_c1_skillid(::google::protobuf::uint32 value) {
  set_has_c1_skillid();
  c1_skillid_ = value;
}

// optional uint32 c1_pos = 2;
inline bool SkillPosChangeToBat::has_c1_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SkillPosChangeToBat::set_has_c1_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SkillPosChangeToBat::clear_has_c1_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SkillPosChangeToBat::clear_c1_pos() {
  c1_pos_ = 0u;
  clear_has_c1_pos();
}
inline ::google::protobuf::uint32 SkillPosChangeToBat::c1_pos() const {
  return c1_pos_;
}
inline void SkillPosChangeToBat::set_c1_pos(::google::protobuf::uint32 value) {
  set_has_c1_pos();
  c1_pos_ = value;
}

// optional uint32 c2_skillid = 3;
inline bool SkillPosChangeToBat::has_c2_skillid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SkillPosChangeToBat::set_has_c2_skillid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SkillPosChangeToBat::clear_has_c2_skillid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SkillPosChangeToBat::clear_c2_skillid() {
  c2_skillid_ = 0u;
  clear_has_c2_skillid();
}
inline ::google::protobuf::uint32 SkillPosChangeToBat::c2_skillid() const {
  return c2_skillid_;
}
inline void SkillPosChangeToBat::set_c2_skillid(::google::protobuf::uint32 value) {
  set_has_c2_skillid();
  c2_skillid_ = value;
}

// optional uint32 c2_pos = 4;
inline bool SkillPosChangeToBat::has_c2_pos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SkillPosChangeToBat::set_has_c2_pos() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SkillPosChangeToBat::clear_has_c2_pos() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SkillPosChangeToBat::clear_c2_pos() {
  c2_pos_ = 0u;
  clear_has_c2_pos();
}
inline ::google::protobuf::uint32 SkillPosChangeToBat::c2_pos() const {
  return c2_pos_;
}
inline void SkillPosChangeToBat::set_c2_pos(::google::protobuf::uint32 value) {
  set_has_c2_pos();
  c2_pos_ = value;
}

// -------------------------------------------------------------------

// PlayerDataToBat

// repeated int32 attvalue = 1;
inline int PlayerDataToBat::attvalue_size() const {
  return attvalue_.size();
}
inline void PlayerDataToBat::clear_attvalue() {
  attvalue_.Clear();
}
inline ::google::protobuf::int32 PlayerDataToBat::attvalue(int index) const {
  return attvalue_.Get(index);
}
inline void PlayerDataToBat::set_attvalue(int index, ::google::protobuf::int32 value) {
  attvalue_.Set(index, value);
}
inline void PlayerDataToBat::add_attvalue(::google::protobuf::int32 value) {
  attvalue_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PlayerDataToBat::attvalue() const {
  return attvalue_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PlayerDataToBat::mutable_attvalue() {
  return &attvalue_;
}

// repeated int32 attprecent = 2;
inline int PlayerDataToBat::attprecent_size() const {
  return attprecent_.size();
}
inline void PlayerDataToBat::clear_attprecent() {
  attprecent_.Clear();
}
inline ::google::protobuf::int32 PlayerDataToBat::attprecent(int index) const {
  return attprecent_.Get(index);
}
inline void PlayerDataToBat::set_attprecent(int index, ::google::protobuf::int32 value) {
  attprecent_.Set(index, value);
}
inline void PlayerDataToBat::add_attprecent(::google::protobuf::int32 value) {
  attprecent_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PlayerDataToBat::attprecent() const {
  return attprecent_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PlayerDataToBat::mutable_attprecent() {
  return &attprecent_;
}

// optional int32 currlev = 3;
inline bool PlayerDataToBat::has_currlev() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerDataToBat::set_has_currlev() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayerDataToBat::clear_has_currlev() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayerDataToBat::clear_currlev() {
  currlev_ = 0;
  clear_has_currlev();
}
inline ::google::protobuf::int32 PlayerDataToBat::currlev() const {
  return currlev_;
}
inline void PlayerDataToBat::set_currlev(::google::protobuf::int32 value) {
  set_has_currlev();
  currlev_ = value;
}

// optional uint32 dhlev = 4;
inline bool PlayerDataToBat::has_dhlev() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlayerDataToBat::set_has_dhlev() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlayerDataToBat::clear_has_dhlev() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlayerDataToBat::clear_dhlev() {
  dhlev_ = 0u;
  clear_has_dhlev();
}
inline ::google::protobuf::uint32 PlayerDataToBat::dhlev() const {
  return dhlev_;
}
inline void PlayerDataToBat::set_dhlev(::google::protobuf::uint32 value) {
  set_has_dhlev();
  dhlev_ = value;
}

// optional uint32 baseequip = 5;
inline bool PlayerDataToBat::has_baseequip() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PlayerDataToBat::set_has_baseequip() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PlayerDataToBat::clear_has_baseequip() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PlayerDataToBat::clear_baseequip() {
  baseequip_ = 0u;
  clear_has_baseequip();
}
inline ::google::protobuf::uint32 PlayerDataToBat::baseequip() const {
  return baseequip_;
}
inline void PlayerDataToBat::set_baseequip(::google::protobuf::uint32 value) {
  set_has_baseequip();
  baseequip_ = value;
}

// -------------------------------------------------------------------

// SkillValueToGame

// optional uint32 skillid = 1;
inline bool SkillValueToGame::has_skillid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SkillValueToGame::set_has_skillid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SkillValueToGame::clear_has_skillid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SkillValueToGame::clear_skillid() {
  skillid_ = 0u;
  clear_has_skillid();
}
inline ::google::protobuf::uint32 SkillValueToGame::skillid() const {
  return skillid_;
}
inline void SkillValueToGame::set_skillid(::google::protobuf::uint32 value) {
  set_has_skillid();
  skillid_ = value;
}

// -------------------------------------------------------------------

// UpdateDataToGame

// repeated int32 value = 1;
inline int UpdateDataToGame::value_size() const {
  return value_.size();
}
inline void UpdateDataToGame::clear_value() {
  value_.Clear();
}
inline ::google::protobuf::int32 UpdateDataToGame::value(int index) const {
  return value_.Get(index);
}
inline void UpdateDataToGame::set_value(int index, ::google::protobuf::int32 value) {
  value_.Set(index, value);
}
inline void UpdateDataToGame::add_value(::google::protobuf::int32 value) {
  value_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
UpdateDataToGame::value() const {
  return value_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
UpdateDataToGame::mutable_value() {
  return &value_;
}

// repeated int32 type = 2;
inline int UpdateDataToGame::type_size() const {
  return type_.size();
}
inline void UpdateDataToGame::clear_type() {
  type_.Clear();
}
inline ::google::protobuf::int32 UpdateDataToGame::type(int index) const {
  return type_.Get(index);
}
inline void UpdateDataToGame::set_type(int index, ::google::protobuf::int32 value) {
  type_.Set(index, value);
}
inline void UpdateDataToGame::add_type(::google::protobuf::int32 value) {
  type_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
UpdateDataToGame::type() const {
  return type_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
UpdateDataToGame::mutable_type() {
  return &type_;
}

// -------------------------------------------------------------------

// SecneLoadOK

// optional uint32 mapid = 1;
inline bool SecneLoadOK::has_mapid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SecneLoadOK::set_has_mapid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SecneLoadOK::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SecneLoadOK::clear_mapid() {
  mapid_ = 0u;
  clear_has_mapid();
}
inline ::google::protobuf::uint32 SecneLoadOK::mapid() const {
  return mapid_;
}
inline void SecneLoadOK::set_mapid(::google::protobuf::uint32 value) {
  set_has_mapid();
  mapid_ = value;
}

// -------------------------------------------------------------------

// BackToCityBorn

// optional uint32 mapid = 1;
inline bool BackToCityBorn::has_mapid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BackToCityBorn::set_has_mapid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BackToCityBorn::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BackToCityBorn::clear_mapid() {
  mapid_ = 0u;
  clear_has_mapid();
}
inline ::google::protobuf::uint32 BackToCityBorn::mapid() const {
  return mapid_;
}
inline void BackToCityBorn::set_mapid(::google::protobuf::uint32 value) {
  set_has_mapid();
  mapid_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace proto

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_battle2game_2eproto__INCLUDED
