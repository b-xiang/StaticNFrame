// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: attack.proto

#ifndef PROTOBUF_attack_2eproto__INCLUDED
#define PROTOBUF_attack_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)

namespace proto {
namespace message {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_attack_2eproto();
void protobuf_AssignDesc_attack_2eproto();
void protobuf_ShutdownFile_attack_2eproto();

class Attack_SC_UpdateXP;
class Attack_CS_PlayerExcuteSkill;
class Attack_CS_RequestHurt;
class Attack_CS_AttackSprint;
class Attack_SC_ExcuteSkillSelf;
class Attack_SC_ExcuteSkillOther;
class Attack_SC_UpdateHurtData;
class Attack_SC_AttackBack;
class Attack_SC_AddBuffer;
class Attack_SC_DelBuffer;
class Attack_SC_UpdateBuffer;
class Attack_SC_AttackDie;
class Attack_CS_BlockSkillStart;
class Attack_CS_BlockSkillEnd;
class Attack_SC_BlockSkillStart;
class Attack_SC_BlockSkillEnd;
class Attack_SC_UpdateAttacking;
class Attack_SC_UpdateTP;
class Attack_SC_Strike;
class Attack_SC_Die;
class Attack_SC_Shout;
class Attack_CS_Relive;
class Attack_SC_Relive;
class Attack_SC_ClearSkillCD;
class Attack_SC_UpdateAttackStatus;
class Attack_SC_UpdateMonsterAttackStatus;
class Attack_SC_Block;
class Attack_SC_UpdateFlagCamp;
class Attack_SC_RelivePos;
class Attack_SC_UpdateGroupCD;

// ===================================================================

class Attack_SC_UpdateXP : public ::google::protobuf::Message {
 public:
  Attack_SC_UpdateXP();
  virtual ~Attack_SC_UpdateXP();

  Attack_SC_UpdateXP(const Attack_SC_UpdateXP& from);

  inline Attack_SC_UpdateXP& operator=(const Attack_SC_UpdateXP& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Attack_SC_UpdateXP& default_instance();

  void Swap(Attack_SC_UpdateXP* other);

  // implements Message ----------------------------------------------

  Attack_SC_UpdateXP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Attack_SC_UpdateXP& from);
  void MergeFrom(const Attack_SC_UpdateXP& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 xpenergy = 1;
  inline bool has_xpenergy() const;
  inline void clear_xpenergy();
  static const int kXpenergyFieldNumber = 1;
  inline ::google::protobuf::uint32 xpenergy() const;
  inline void set_xpenergy(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Attack_SC_UpdateXP)
 private:
  inline void set_has_xpenergy();
  inline void clear_has_xpenergy();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 xpenergy_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_attack_2eproto();
  friend void protobuf_AssignDesc_attack_2eproto();
  friend void protobuf_ShutdownFile_attack_2eproto();

  void InitAsDefaultInstance();
  static Attack_SC_UpdateXP* default_instance_;
};
// -------------------------------------------------------------------

class Attack_CS_PlayerExcuteSkill : public ::google::protobuf::Message {
 public:
  Attack_CS_PlayerExcuteSkill();
  virtual ~Attack_CS_PlayerExcuteSkill();

  Attack_CS_PlayerExcuteSkill(const Attack_CS_PlayerExcuteSkill& from);

  inline Attack_CS_PlayerExcuteSkill& operator=(const Attack_CS_PlayerExcuteSkill& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Attack_CS_PlayerExcuteSkill& default_instance();

  void Swap(Attack_CS_PlayerExcuteSkill* other);

  // implements Message ----------------------------------------------

  Attack_CS_PlayerExcuteSkill* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Attack_CS_PlayerExcuteSkill& from);
  void MergeFrom(const Attack_CS_PlayerExcuteSkill& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 PlayerSkillId = 1;
  inline bool has_playerskillid() const;
  inline void clear_playerskillid();
  static const int kPlayerSkillIdFieldNumber = 1;
  inline ::google::protobuf::int32 playerskillid() const;
  inline void set_playerskillid(::google::protobuf::int32 value);

  // optional uint32 SkillId = 2;
  inline bool has_skillid() const;
  inline void clear_skillid();
  static const int kSkillIdFieldNumber = 2;
  inline ::google::protobuf::uint32 skillid() const;
  inline void set_skillid(::google::protobuf::uint32 value);

  // optional float Dir = 3;
  inline bool has_dir() const;
  inline void clear_dir();
  static const int kDirFieldNumber = 3;
  inline float dir() const;
  inline void set_dir(float value);

  // optional .proto.message.Point3D pt = 4;
  inline bool has_pt() const;
  inline void clear_pt();
  static const int kPtFieldNumber = 4;
  inline const ::proto::message::Point3D& pt() const;
  inline ::proto::message::Point3D* mutable_pt();
  inline ::proto::message::Point3D* release_pt();
  inline void set_allocated_pt(::proto::message::Point3D* pt);

  // optional uint32 targetID = 5;
  inline bool has_targetid() const;
  inline void clear_targetid();
  static const int kTargetIDFieldNumber = 5;
  inline ::google::protobuf::uint32 targetid() const;
  inline void set_targetid(::google::protobuf::uint32 value);

  // optional int32 objType = 6;
  inline bool has_objtype() const;
  inline void clear_objtype();
  static const int kObjTypeFieldNumber = 6;
  inline ::google::protobuf::int32 objtype() const;
  inline void set_objtype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Attack_CS_PlayerExcuteSkill)
 private:
  inline void set_has_playerskillid();
  inline void clear_has_playerskillid();
  inline void set_has_skillid();
  inline void clear_has_skillid();
  inline void set_has_dir();
  inline void clear_has_dir();
  inline void set_has_pt();
  inline void clear_has_pt();
  inline void set_has_targetid();
  inline void clear_has_targetid();
  inline void set_has_objtype();
  inline void clear_has_objtype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 playerskillid_;
  ::google::protobuf::uint32 skillid_;
  ::proto::message::Point3D* pt_;
  float dir_;
  ::google::protobuf::uint32 targetid_;
  ::google::protobuf::int32 objtype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_attack_2eproto();
  friend void protobuf_AssignDesc_attack_2eproto();
  friend void protobuf_ShutdownFile_attack_2eproto();

  void InitAsDefaultInstance();
  static Attack_CS_PlayerExcuteSkill* default_instance_;
};
// -------------------------------------------------------------------

class Attack_CS_RequestHurt : public ::google::protobuf::Message {
 public:
  Attack_CS_RequestHurt();
  virtual ~Attack_CS_RequestHurt();

  Attack_CS_RequestHurt(const Attack_CS_RequestHurt& from);

  inline Attack_CS_RequestHurt& operator=(const Attack_CS_RequestHurt& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Attack_CS_RequestHurt& default_instance();

  void Swap(Attack_CS_RequestHurt* other);

  // implements Message ----------------------------------------------

  Attack_CS_RequestHurt* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Attack_CS_RequestHurt& from);
  void MergeFrom(const Attack_CS_RequestHurt& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 PlayerSkillId = 1;
  inline bool has_playerskillid() const;
  inline void clear_playerskillid();
  static const int kPlayerSkillIdFieldNumber = 1;
  inline ::google::protobuf::int32 playerskillid() const;
  inline void set_playerskillid(::google::protobuf::int32 value);

  // optional uint32 SkillId = 2;
  inline bool has_skillid() const;
  inline void clear_skillid();
  static const int kSkillIdFieldNumber = 2;
  inline ::google::protobuf::uint32 skillid() const;
  inline void set_skillid(::google::protobuf::uint32 value);

  // repeated uint32 ListDesId = 3;
  inline int listdesid_size() const;
  inline void clear_listdesid();
  static const int kListDesIdFieldNumber = 3;
  inline ::google::protobuf::uint32 listdesid(int index) const;
  inline void set_listdesid(int index, ::google::protobuf::uint32 value);
  inline void add_listdesid(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      listdesid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_listdesid();

  // optional int32 objType = 4;
  inline bool has_objtype() const;
  inline void clear_objtype();
  static const int kObjTypeFieldNumber = 4;
  inline ::google::protobuf::int32 objtype() const;
  inline void set_objtype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Attack_CS_RequestHurt)
 private:
  inline void set_has_playerskillid();
  inline void clear_has_playerskillid();
  inline void set_has_skillid();
  inline void clear_has_skillid();
  inline void set_has_objtype();
  inline void clear_has_objtype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 playerskillid_;
  ::google::protobuf::uint32 skillid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > listdesid_;
  ::google::protobuf::int32 objtype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_attack_2eproto();
  friend void protobuf_AssignDesc_attack_2eproto();
  friend void protobuf_ShutdownFile_attack_2eproto();

  void InitAsDefaultInstance();
  static Attack_CS_RequestHurt* default_instance_;
};
// -------------------------------------------------------------------

class Attack_CS_AttackSprint : public ::google::protobuf::Message {
 public:
  Attack_CS_AttackSprint();
  virtual ~Attack_CS_AttackSprint();

  Attack_CS_AttackSprint(const Attack_CS_AttackSprint& from);

  inline Attack_CS_AttackSprint& operator=(const Attack_CS_AttackSprint& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Attack_CS_AttackSprint& default_instance();

  void Swap(Attack_CS_AttackSprint* other);

  // implements Message ----------------------------------------------

  Attack_CS_AttackSprint* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Attack_CS_AttackSprint& from);
  void MergeFrom(const Attack_CS_AttackSprint& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 SkillId = 2;
  inline bool has_skillid() const;
  inline void clear_skillid();
  static const int kSkillIdFieldNumber = 2;
  inline ::google::protobuf::uint32 skillid() const;
  inline void set_skillid(::google::protobuf::uint32 value);

  // optional .proto.message.Point3D pt = 3;
  inline bool has_pt() const;
  inline void clear_pt();
  static const int kPtFieldNumber = 3;
  inline const ::proto::message::Point3D& pt() const;
  inline ::proto::message::Point3D* mutable_pt();
  inline ::proto::message::Point3D* release_pt();
  inline void set_allocated_pt(::proto::message::Point3D* pt);

  // @@protoc_insertion_point(class_scope:proto.message.Attack_CS_AttackSprint)
 private:
  inline void set_has_skillid();
  inline void clear_has_skillid();
  inline void set_has_pt();
  inline void clear_has_pt();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::message::Point3D* pt_;
  ::google::protobuf::uint32 skillid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_attack_2eproto();
  friend void protobuf_AssignDesc_attack_2eproto();
  friend void protobuf_ShutdownFile_attack_2eproto();

  void InitAsDefaultInstance();
  static Attack_CS_AttackSprint* default_instance_;
};
// -------------------------------------------------------------------

class Attack_SC_ExcuteSkillSelf : public ::google::protobuf::Message {
 public:
  Attack_SC_ExcuteSkillSelf();
  virtual ~Attack_SC_ExcuteSkillSelf();

  Attack_SC_ExcuteSkillSelf(const Attack_SC_ExcuteSkillSelf& from);

  inline Attack_SC_ExcuteSkillSelf& operator=(const Attack_SC_ExcuteSkillSelf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Attack_SC_ExcuteSkillSelf& default_instance();

  void Swap(Attack_SC_ExcuteSkillSelf* other);

  // implements Message ----------------------------------------------

  Attack_SC_ExcuteSkillSelf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Attack_SC_ExcuteSkillSelf& from);
  void MergeFrom(const Attack_SC_ExcuteSkillSelf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 PlayerSkillId = 1;
  inline bool has_playerskillid() const;
  inline void clear_playerskillid();
  static const int kPlayerSkillIdFieldNumber = 1;
  inline ::google::protobuf::int32 playerskillid() const;
  inline void set_playerskillid(::google::protobuf::int32 value);

  // required int32 SkillId = 2;
  inline bool has_skillid() const;
  inline void clear_skillid();
  static const int kSkillIdFieldNumber = 2;
  inline ::google::protobuf::int32 skillid() const;
  inline void set_skillid(::google::protobuf::int32 value);

  // required int32 error = 3;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 3;
  inline ::google::protobuf::int32 error() const;
  inline void set_error(::google::protobuf::int32 value);

  // optional uint32 charId = 4;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIdFieldNumber = 4;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional float Dir = 5;
  inline bool has_dir() const;
  inline void clear_dir();
  static const int kDirFieldNumber = 5;
  inline float dir() const;
  inline void set_dir(float value);

  // optional .proto.message.Point3D pt = 6;
  inline bool has_pt() const;
  inline void clear_pt();
  static const int kPtFieldNumber = 6;
  inline const ::proto::message::Point3D& pt() const;
  inline ::proto::message::Point3D* mutable_pt();
  inline ::proto::message::Point3D* release_pt();
  inline void set_allocated_pt(::proto::message::Point3D* pt);

  // optional uint32 targetID = 7;
  inline bool has_targetid() const;
  inline void clear_targetid();
  static const int kTargetIDFieldNumber = 7;
  inline ::google::protobuf::uint32 targetid() const;
  inline void set_targetid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Attack_SC_ExcuteSkillSelf)
 private:
  inline void set_has_playerskillid();
  inline void clear_has_playerskillid();
  inline void set_has_skillid();
  inline void clear_has_skillid();
  inline void set_has_error();
  inline void clear_has_error();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_dir();
  inline void clear_has_dir();
  inline void set_has_pt();
  inline void clear_has_pt();
  inline void set_has_targetid();
  inline void clear_has_targetid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 playerskillid_;
  ::google::protobuf::int32 skillid_;
  ::google::protobuf::int32 error_;
  ::google::protobuf::uint32 charid_;
  ::proto::message::Point3D* pt_;
  float dir_;
  ::google::protobuf::uint32 targetid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_attack_2eproto();
  friend void protobuf_AssignDesc_attack_2eproto();
  friend void protobuf_ShutdownFile_attack_2eproto();

  void InitAsDefaultInstance();
  static Attack_SC_ExcuteSkillSelf* default_instance_;
};
// -------------------------------------------------------------------

class Attack_SC_ExcuteSkillOther : public ::google::protobuf::Message {
 public:
  Attack_SC_ExcuteSkillOther();
  virtual ~Attack_SC_ExcuteSkillOther();

  Attack_SC_ExcuteSkillOther(const Attack_SC_ExcuteSkillOther& from);

  inline Attack_SC_ExcuteSkillOther& operator=(const Attack_SC_ExcuteSkillOther& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Attack_SC_ExcuteSkillOther& default_instance();

  void Swap(Attack_SC_ExcuteSkillOther* other);

  // implements Message ----------------------------------------------

  Attack_SC_ExcuteSkillOther* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Attack_SC_ExcuteSkillOther& from);
  void MergeFrom(const Attack_SC_ExcuteSkillOther& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 CharId = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIdFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // required int32 SkillId = 2;
  inline bool has_skillid() const;
  inline void clear_skillid();
  static const int kSkillIdFieldNumber = 2;
  inline ::google::protobuf::int32 skillid() const;
  inline void set_skillid(::google::protobuf::int32 value);

  // optional float dir = 3;
  inline bool has_dir() const;
  inline void clear_dir();
  static const int kDirFieldNumber = 3;
  inline float dir() const;
  inline void set_dir(float value);

  // optional .proto.message.Point3D pt = 4;
  inline bool has_pt() const;
  inline void clear_pt();
  static const int kPtFieldNumber = 4;
  inline const ::proto::message::Point3D& pt() const;
  inline ::proto::message::Point3D* mutable_pt();
  inline ::proto::message::Point3D* release_pt();
  inline void set_allocated_pt(::proto::message::Point3D* pt);

  // optional uint32 targetID = 5;
  inline bool has_targetid() const;
  inline void clear_targetid();
  static const int kTargetIDFieldNumber = 5;
  inline ::google::protobuf::uint32 targetid() const;
  inline void set_targetid(::google::protobuf::uint32 value);

  // optional int32 objType = 6;
  inline bool has_objtype() const;
  inline void clear_objtype();
  static const int kObjTypeFieldNumber = 6;
  inline ::google::protobuf::int32 objtype() const;
  inline void set_objtype(::google::protobuf::int32 value);

  // optional int32 camp = 7;
  inline bool has_camp() const;
  inline void clear_camp();
  static const int kCampFieldNumber = 7;
  inline ::google::protobuf::int32 camp() const;
  inline void set_camp(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Attack_SC_ExcuteSkillOther)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_skillid();
  inline void clear_has_skillid();
  inline void set_has_dir();
  inline void clear_has_dir();
  inline void set_has_pt();
  inline void clear_has_pt();
  inline void set_has_targetid();
  inline void clear_has_targetid();
  inline void set_has_objtype();
  inline void clear_has_objtype();
  inline void set_has_camp();
  inline void clear_has_camp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::int32 skillid_;
  ::proto::message::Point3D* pt_;
  float dir_;
  ::google::protobuf::uint32 targetid_;
  ::google::protobuf::int32 objtype_;
  ::google::protobuf::int32 camp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_attack_2eproto();
  friend void protobuf_AssignDesc_attack_2eproto();
  friend void protobuf_ShutdownFile_attack_2eproto();

  void InitAsDefaultInstance();
  static Attack_SC_ExcuteSkillOther* default_instance_;
};
// -------------------------------------------------------------------

class Attack_SC_UpdateHurtData : public ::google::protobuf::Message {
 public:
  Attack_SC_UpdateHurtData();
  virtual ~Attack_SC_UpdateHurtData();

  Attack_SC_UpdateHurtData(const Attack_SC_UpdateHurtData& from);

  inline Attack_SC_UpdateHurtData& operator=(const Attack_SC_UpdateHurtData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Attack_SC_UpdateHurtData& default_instance();

  void Swap(Attack_SC_UpdateHurtData* other);

  // implements Message ----------------------------------------------

  Attack_SC_UpdateHurtData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Attack_SC_UpdateHurtData& from);
  void MergeFrom(const Attack_SC_UpdateHurtData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 CharId = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIdFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // required int32 nHurt = 2;
  inline bool has_nhurt() const;
  inline void clear_nhurt();
  static const int kNHurtFieldNumber = 2;
  inline ::google::protobuf::int32 nhurt() const;
  inline void set_nhurt(::google::protobuf::int32 value);

  // optional int32 nCurHP = 3;
  inline bool has_ncurhp() const;
  inline void clear_ncurhp();
  static const int kNCurHPFieldNumber = 3;
  inline ::google::protobuf::int32 ncurhp() const;
  inline void set_ncurhp(::google::protobuf::int32 value);

  // optional int32 SkillId = 4;
  inline bool has_skillid() const;
  inline void clear_skillid();
  static const int kSkillIdFieldNumber = 4;
  inline ::google::protobuf::int32 skillid() const;
  inline void set_skillid(::google::protobuf::int32 value);

  // optional int32 nMaxHP = 5;
  inline bool has_nmaxhp() const;
  inline void clear_nmaxhp();
  static const int kNMaxHPFieldNumber = 5;
  inline ::google::protobuf::int32 nmaxhp() const;
  inline void set_nmaxhp(::google::protobuf::int32 value);

  // optional int32 nHurtType = 6;
  inline bool has_nhurttype() const;
  inline void clear_nhurttype();
  static const int kNHurtTypeFieldNumber = 6;
  inline ::google::protobuf::int32 nhurttype() const;
  inline void set_nhurttype(::google::protobuf::int32 value);

  // optional uint64 attacker = 7;
  inline bool has_attacker() const;
  inline void clear_attacker();
  static const int kAttackerFieldNumber = 7;
  inline ::google::protobuf::uint64 attacker() const;
  inline void set_attacker(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.message.Attack_SC_UpdateHurtData)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_nhurt();
  inline void clear_has_nhurt();
  inline void set_has_ncurhp();
  inline void clear_has_ncurhp();
  inline void set_has_skillid();
  inline void clear_has_skillid();
  inline void set_has_nmaxhp();
  inline void clear_has_nmaxhp();
  inline void set_has_nhurttype();
  inline void clear_has_nhurttype();
  inline void set_has_attacker();
  inline void clear_has_attacker();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::int32 nhurt_;
  ::google::protobuf::int32 ncurhp_;
  ::google::protobuf::int32 skillid_;
  ::google::protobuf::int32 nmaxhp_;
  ::google::protobuf::int32 nhurttype_;
  ::google::protobuf::uint64 attacker_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_attack_2eproto();
  friend void protobuf_AssignDesc_attack_2eproto();
  friend void protobuf_ShutdownFile_attack_2eproto();

  void InitAsDefaultInstance();
  static Attack_SC_UpdateHurtData* default_instance_;
};
// -------------------------------------------------------------------

class Attack_SC_AttackBack : public ::google::protobuf::Message {
 public:
  Attack_SC_AttackBack();
  virtual ~Attack_SC_AttackBack();

  Attack_SC_AttackBack(const Attack_SC_AttackBack& from);

  inline Attack_SC_AttackBack& operator=(const Attack_SC_AttackBack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Attack_SC_AttackBack& default_instance();

  void Swap(Attack_SC_AttackBack* other);

  // implements Message ----------------------------------------------

  Attack_SC_AttackBack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Attack_SC_AttackBack& from);
  void MergeFrom(const Attack_SC_AttackBack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 CharId = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIdFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 AttCharId = 2;
  inline bool has_attcharid() const;
  inline void clear_attcharid();
  static const int kAttCharIdFieldNumber = 2;
  inline ::google::protobuf::uint32 attcharid() const;
  inline void set_attcharid(::google::protobuf::uint32 value);

  // optional uint32 SkillId = 3;
  inline bool has_skillid() const;
  inline void clear_skillid();
  static const int kSkillIdFieldNumber = 3;
  inline ::google::protobuf::uint32 skillid() const;
  inline void set_skillid(::google::protobuf::uint32 value);

  // optional .proto.message.Point3D pt = 4;
  inline bool has_pt() const;
  inline void clear_pt();
  static const int kPtFieldNumber = 4;
  inline const ::proto::message::Point3D& pt() const;
  inline ::proto::message::Point3D* mutable_pt();
  inline ::proto::message::Point3D* release_pt();
  inline void set_allocated_pt(::proto::message::Point3D* pt);

  // optional float Dir = 5;
  inline bool has_dir() const;
  inline void clear_dir();
  static const int kDirFieldNumber = 5;
  inline float dir() const;
  inline void set_dir(float value);

  // optional int32 nTime = 6;
  inline bool has_ntime() const;
  inline void clear_ntime();
  static const int kNTimeFieldNumber = 6;
  inline ::google::protobuf::int32 ntime() const;
  inline void set_ntime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Attack_SC_AttackBack)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_attcharid();
  inline void clear_has_attcharid();
  inline void set_has_skillid();
  inline void clear_has_skillid();
  inline void set_has_pt();
  inline void clear_has_pt();
  inline void set_has_dir();
  inline void clear_has_dir();
  inline void set_has_ntime();
  inline void clear_has_ntime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 attcharid_;
  ::proto::message::Point3D* pt_;
  ::google::protobuf::uint32 skillid_;
  float dir_;
  ::google::protobuf::int32 ntime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_attack_2eproto();
  friend void protobuf_AssignDesc_attack_2eproto();
  friend void protobuf_ShutdownFile_attack_2eproto();

  void InitAsDefaultInstance();
  static Attack_SC_AttackBack* default_instance_;
};
// -------------------------------------------------------------------

class Attack_SC_AddBuffer : public ::google::protobuf::Message {
 public:
  Attack_SC_AddBuffer();
  virtual ~Attack_SC_AddBuffer();

  Attack_SC_AddBuffer(const Attack_SC_AddBuffer& from);

  inline Attack_SC_AddBuffer& operator=(const Attack_SC_AddBuffer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Attack_SC_AddBuffer& default_instance();

  void Swap(Attack_SC_AddBuffer* other);

  // implements Message ----------------------------------------------

  Attack_SC_AddBuffer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Attack_SC_AddBuffer& from);
  void MergeFrom(const Attack_SC_AddBuffer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 CharId = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIdFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 BufferId = 2;
  inline bool has_bufferid() const;
  inline void clear_bufferid();
  static const int kBufferIdFieldNumber = 2;
  inline ::google::protobuf::uint32 bufferid() const;
  inline void set_bufferid(::google::protobuf::uint32 value);

  // optional uint64 Status = 3;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 3;
  inline ::google::protobuf::uint64 status() const;
  inline void set_status(::google::protobuf::uint64 value);

  // optional int32 LastTime = 4;
  inline bool has_lasttime() const;
  inline void clear_lasttime();
  static const int kLastTimeFieldNumber = 4;
  inline ::google::protobuf::int32 lasttime() const;
  inline void set_lasttime(::google::protobuf::int32 value);

  // optional int32 isDisPlayInProto = 5;
  inline bool has_isdisplayinproto() const;
  inline void clear_isdisplayinproto();
  static const int kIsDisPlayInProtoFieldNumber = 5;
  inline ::google::protobuf::int32 isdisplayinproto() const;
  inline void set_isdisplayinproto(::google::protobuf::int32 value);

  // optional int32 property = 6;
  inline bool has_property() const;
  inline void clear_property();
  static const int kPropertyFieldNumber = 6;
  inline ::google::protobuf::int32 property() const;
  inline void set_property(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Attack_SC_AddBuffer)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_bufferid();
  inline void clear_has_bufferid();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_lasttime();
  inline void clear_has_lasttime();
  inline void set_has_isdisplayinproto();
  inline void clear_has_isdisplayinproto();
  inline void set_has_property();
  inline void clear_has_property();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 bufferid_;
  ::google::protobuf::uint64 status_;
  ::google::protobuf::int32 lasttime_;
  ::google::protobuf::int32 isdisplayinproto_;
  ::google::protobuf::int32 property_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_attack_2eproto();
  friend void protobuf_AssignDesc_attack_2eproto();
  friend void protobuf_ShutdownFile_attack_2eproto();

  void InitAsDefaultInstance();
  static Attack_SC_AddBuffer* default_instance_;
};
// -------------------------------------------------------------------

class Attack_SC_DelBuffer : public ::google::protobuf::Message {
 public:
  Attack_SC_DelBuffer();
  virtual ~Attack_SC_DelBuffer();

  Attack_SC_DelBuffer(const Attack_SC_DelBuffer& from);

  inline Attack_SC_DelBuffer& operator=(const Attack_SC_DelBuffer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Attack_SC_DelBuffer& default_instance();

  void Swap(Attack_SC_DelBuffer* other);

  // implements Message ----------------------------------------------

  Attack_SC_DelBuffer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Attack_SC_DelBuffer& from);
  void MergeFrom(const Attack_SC_DelBuffer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 CharId = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIdFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 BufferId = 2;
  inline bool has_bufferid() const;
  inline void clear_bufferid();
  static const int kBufferIdFieldNumber = 2;
  inline ::google::protobuf::uint32 bufferid() const;
  inline void set_bufferid(::google::protobuf::uint32 value);

  // optional uint64 Status = 3;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 3;
  inline ::google::protobuf::uint64 status() const;
  inline void set_status(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.message.Attack_SC_DelBuffer)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_bufferid();
  inline void clear_has_bufferid();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 bufferid_;
  ::google::protobuf::uint64 status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_attack_2eproto();
  friend void protobuf_AssignDesc_attack_2eproto();
  friend void protobuf_ShutdownFile_attack_2eproto();

  void InitAsDefaultInstance();
  static Attack_SC_DelBuffer* default_instance_;
};
// -------------------------------------------------------------------

class Attack_SC_UpdateBuffer : public ::google::protobuf::Message {
 public:
  Attack_SC_UpdateBuffer();
  virtual ~Attack_SC_UpdateBuffer();

  Attack_SC_UpdateBuffer(const Attack_SC_UpdateBuffer& from);

  inline Attack_SC_UpdateBuffer& operator=(const Attack_SC_UpdateBuffer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Attack_SC_UpdateBuffer& default_instance();

  void Swap(Attack_SC_UpdateBuffer* other);

  // implements Message ----------------------------------------------

  Attack_SC_UpdateBuffer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Attack_SC_UpdateBuffer& from);
  void MergeFrom(const Attack_SC_UpdateBuffer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 CharId = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIdFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 BufferId = 2;
  inline bool has_bufferid() const;
  inline void clear_bufferid();
  static const int kBufferIdFieldNumber = 2;
  inline ::google::protobuf::uint32 bufferid() const;
  inline void set_bufferid(::google::protobuf::uint32 value);

  // optional int32 LastTime = 3;
  inline bool has_lasttime() const;
  inline void clear_lasttime();
  static const int kLastTimeFieldNumber = 3;
  inline ::google::protobuf::int32 lasttime() const;
  inline void set_lasttime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Attack_SC_UpdateBuffer)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_bufferid();
  inline void clear_has_bufferid();
  inline void set_has_lasttime();
  inline void clear_has_lasttime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 bufferid_;
  ::google::protobuf::int32 lasttime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_attack_2eproto();
  friend void protobuf_AssignDesc_attack_2eproto();
  friend void protobuf_ShutdownFile_attack_2eproto();

  void InitAsDefaultInstance();
  static Attack_SC_UpdateBuffer* default_instance_;
};
// -------------------------------------------------------------------

class Attack_SC_AttackDie : public ::google::protobuf::Message {
 public:
  Attack_SC_AttackDie();
  virtual ~Attack_SC_AttackDie();

  Attack_SC_AttackDie(const Attack_SC_AttackDie& from);

  inline Attack_SC_AttackDie& operator=(const Attack_SC_AttackDie& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Attack_SC_AttackDie& default_instance();

  void Swap(Attack_SC_AttackDie* other);

  // implements Message ----------------------------------------------

  Attack_SC_AttackDie* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Attack_SC_AttackDie& from);
  void MergeFrom(const Attack_SC_AttackDie& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 CharId = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIdFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Attack_SC_AttackDie)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_attack_2eproto();
  friend void protobuf_AssignDesc_attack_2eproto();
  friend void protobuf_ShutdownFile_attack_2eproto();

  void InitAsDefaultInstance();
  static Attack_SC_AttackDie* default_instance_;
};
// -------------------------------------------------------------------

class Attack_CS_BlockSkillStart : public ::google::protobuf::Message {
 public:
  Attack_CS_BlockSkillStart();
  virtual ~Attack_CS_BlockSkillStart();

  Attack_CS_BlockSkillStart(const Attack_CS_BlockSkillStart& from);

  inline Attack_CS_BlockSkillStart& operator=(const Attack_CS_BlockSkillStart& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Attack_CS_BlockSkillStart& default_instance();

  void Swap(Attack_CS_BlockSkillStart* other);

  // implements Message ----------------------------------------------

  Attack_CS_BlockSkillStart* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Attack_CS_BlockSkillStart& from);
  void MergeFrom(const Attack_CS_BlockSkillStart& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float dir = 1;
  inline bool has_dir() const;
  inline void clear_dir();
  static const int kDirFieldNumber = 1;
  inline float dir() const;
  inline void set_dir(float value);

  // optional .proto.message.Point3D pt = 2;
  inline bool has_pt() const;
  inline void clear_pt();
  static const int kPtFieldNumber = 2;
  inline const ::proto::message::Point3D& pt() const;
  inline ::proto::message::Point3D* mutable_pt();
  inline ::proto::message::Point3D* release_pt();
  inline void set_allocated_pt(::proto::message::Point3D* pt);

  // @@protoc_insertion_point(class_scope:proto.message.Attack_CS_BlockSkillStart)
 private:
  inline void set_has_dir();
  inline void clear_has_dir();
  inline void set_has_pt();
  inline void clear_has_pt();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::message::Point3D* pt_;
  float dir_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_attack_2eproto();
  friend void protobuf_AssignDesc_attack_2eproto();
  friend void protobuf_ShutdownFile_attack_2eproto();

  void InitAsDefaultInstance();
  static Attack_CS_BlockSkillStart* default_instance_;
};
// -------------------------------------------------------------------

class Attack_CS_BlockSkillEnd : public ::google::protobuf::Message {
 public:
  Attack_CS_BlockSkillEnd();
  virtual ~Attack_CS_BlockSkillEnd();

  Attack_CS_BlockSkillEnd(const Attack_CS_BlockSkillEnd& from);

  inline Attack_CS_BlockSkillEnd& operator=(const Attack_CS_BlockSkillEnd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Attack_CS_BlockSkillEnd& default_instance();

  void Swap(Attack_CS_BlockSkillEnd* other);

  // implements Message ----------------------------------------------

  Attack_CS_BlockSkillEnd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Attack_CS_BlockSkillEnd& from);
  void MergeFrom(const Attack_CS_BlockSkillEnd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.message.Attack_CS_BlockSkillEnd)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_attack_2eproto();
  friend void protobuf_AssignDesc_attack_2eproto();
  friend void protobuf_ShutdownFile_attack_2eproto();

  void InitAsDefaultInstance();
  static Attack_CS_BlockSkillEnd* default_instance_;
};
// -------------------------------------------------------------------

class Attack_SC_BlockSkillStart : public ::google::protobuf::Message {
 public:
  Attack_SC_BlockSkillStart();
  virtual ~Attack_SC_BlockSkillStart();

  Attack_SC_BlockSkillStart(const Attack_SC_BlockSkillStart& from);

  inline Attack_SC_BlockSkillStart& operator=(const Attack_SC_BlockSkillStart& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Attack_SC_BlockSkillStart& default_instance();

  void Swap(Attack_SC_BlockSkillStart* other);

  // implements Message ----------------------------------------------

  Attack_SC_BlockSkillStart* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Attack_SC_BlockSkillStart& from);
  void MergeFrom(const Attack_SC_BlockSkillStart& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 CharId = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIdFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional float dir = 2;
  inline bool has_dir() const;
  inline void clear_dir();
  static const int kDirFieldNumber = 2;
  inline float dir() const;
  inline void set_dir(float value);

  // optional .proto.message.Point3D pt = 3;
  inline bool has_pt() const;
  inline void clear_pt();
  static const int kPtFieldNumber = 3;
  inline const ::proto::message::Point3D& pt() const;
  inline ::proto::message::Point3D* mutable_pt();
  inline ::proto::message::Point3D* release_pt();
  inline void set_allocated_pt(::proto::message::Point3D* pt);

  // @@protoc_insertion_point(class_scope:proto.message.Attack_SC_BlockSkillStart)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_dir();
  inline void clear_has_dir();
  inline void set_has_pt();
  inline void clear_has_pt();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  float dir_;
  ::proto::message::Point3D* pt_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_attack_2eproto();
  friend void protobuf_AssignDesc_attack_2eproto();
  friend void protobuf_ShutdownFile_attack_2eproto();

  void InitAsDefaultInstance();
  static Attack_SC_BlockSkillStart* default_instance_;
};
// -------------------------------------------------------------------

class Attack_SC_BlockSkillEnd : public ::google::protobuf::Message {
 public:
  Attack_SC_BlockSkillEnd();
  virtual ~Attack_SC_BlockSkillEnd();

  Attack_SC_BlockSkillEnd(const Attack_SC_BlockSkillEnd& from);

  inline Attack_SC_BlockSkillEnd& operator=(const Attack_SC_BlockSkillEnd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Attack_SC_BlockSkillEnd& default_instance();

  void Swap(Attack_SC_BlockSkillEnd* other);

  // implements Message ----------------------------------------------

  Attack_SC_BlockSkillEnd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Attack_SC_BlockSkillEnd& from);
  void MergeFrom(const Attack_SC_BlockSkillEnd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 CharId = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIdFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Attack_SC_BlockSkillEnd)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_attack_2eproto();
  friend void protobuf_AssignDesc_attack_2eproto();
  friend void protobuf_ShutdownFile_attack_2eproto();

  void InitAsDefaultInstance();
  static Attack_SC_BlockSkillEnd* default_instance_;
};
// -------------------------------------------------------------------

class Attack_SC_UpdateAttacking : public ::google::protobuf::Message {
 public:
  Attack_SC_UpdateAttacking();
  virtual ~Attack_SC_UpdateAttacking();

  Attack_SC_UpdateAttacking(const Attack_SC_UpdateAttacking& from);

  inline Attack_SC_UpdateAttacking& operator=(const Attack_SC_UpdateAttacking& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Attack_SC_UpdateAttacking& default_instance();

  void Swap(Attack_SC_UpdateAttacking* other);

  // implements Message ----------------------------------------------

  Attack_SC_UpdateAttacking* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Attack_SC_UpdateAttacking& from);
  void MergeFrom(const Attack_SC_UpdateAttacking& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool attacking = 1;
  inline bool has_attacking() const;
  inline void clear_attacking();
  static const int kAttackingFieldNumber = 1;
  inline bool attacking() const;
  inline void set_attacking(bool value);

  // @@protoc_insertion_point(class_scope:proto.message.Attack_SC_UpdateAttacking)
 private:
  inline void set_has_attacking();
  inline void clear_has_attacking();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool attacking_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_attack_2eproto();
  friend void protobuf_AssignDesc_attack_2eproto();
  friend void protobuf_ShutdownFile_attack_2eproto();

  void InitAsDefaultInstance();
  static Attack_SC_UpdateAttacking* default_instance_;
};
// -------------------------------------------------------------------

class Attack_SC_UpdateTP : public ::google::protobuf::Message {
 public:
  Attack_SC_UpdateTP();
  virtual ~Attack_SC_UpdateTP();

  Attack_SC_UpdateTP(const Attack_SC_UpdateTP& from);

  inline Attack_SC_UpdateTP& operator=(const Attack_SC_UpdateTP& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Attack_SC_UpdateTP& default_instance();

  void Swap(Attack_SC_UpdateTP* other);

  // implements Message ----------------------------------------------

  Attack_SC_UpdateTP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Attack_SC_UpdateTP& from);
  void MergeFrom(const Attack_SC_UpdateTP& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 charid = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 1;
  inline ::google::protobuf::int32 charid() const;
  inline void set_charid(::google::protobuf::int32 value);

  // optional int32 total_num = 2;
  inline bool has_total_num() const;
  inline void clear_total_num();
  static const int kTotalNumFieldNumber = 2;
  inline ::google::protobuf::int32 total_num() const;
  inline void set_total_num(::google::protobuf::int32 value);

  // optional int32 cur_num = 3;
  inline bool has_cur_num() const;
  inline void clear_cur_num();
  static const int kCurNumFieldNumber = 3;
  inline ::google::protobuf::int32 cur_num() const;
  inline void set_cur_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Attack_SC_UpdateTP)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_total_num();
  inline void clear_has_total_num();
  inline void set_has_cur_num();
  inline void clear_has_cur_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 charid_;
  ::google::protobuf::int32 total_num_;
  ::google::protobuf::int32 cur_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_attack_2eproto();
  friend void protobuf_AssignDesc_attack_2eproto();
  friend void protobuf_ShutdownFile_attack_2eproto();

  void InitAsDefaultInstance();
  static Attack_SC_UpdateTP* default_instance_;
};
// -------------------------------------------------------------------

class Attack_SC_Strike : public ::google::protobuf::Message {
 public:
  Attack_SC_Strike();
  virtual ~Attack_SC_Strike();

  Attack_SC_Strike(const Attack_SC_Strike& from);

  inline Attack_SC_Strike& operator=(const Attack_SC_Strike& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Attack_SC_Strike& default_instance();

  void Swap(Attack_SC_Strike* other);

  // implements Message ----------------------------------------------

  Attack_SC_Strike* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Attack_SC_Strike& from);
  void MergeFrom(const Attack_SC_Strike& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.message.Attack_SC_Strike)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_attack_2eproto();
  friend void protobuf_AssignDesc_attack_2eproto();
  friend void protobuf_ShutdownFile_attack_2eproto();

  void InitAsDefaultInstance();
  static Attack_SC_Strike* default_instance_;
};
// -------------------------------------------------------------------

class Attack_SC_Die : public ::google::protobuf::Message {
 public:
  Attack_SC_Die();
  virtual ~Attack_SC_Die();

  Attack_SC_Die(const Attack_SC_Die& from);

  inline Attack_SC_Die& operator=(const Attack_SC_Die& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Attack_SC_Die& default_instance();

  void Swap(Attack_SC_Die* other);

  // implements Message ----------------------------------------------

  Attack_SC_Die* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Attack_SC_Die& from);
  void MergeFrom(const Attack_SC_Die& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 charid = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 1;
  inline ::google::protobuf::int32 charid() const;
  inline void set_charid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Attack_SC_Die)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_attack_2eproto();
  friend void protobuf_AssignDesc_attack_2eproto();
  friend void protobuf_ShutdownFile_attack_2eproto();

  void InitAsDefaultInstance();
  static Attack_SC_Die* default_instance_;
};
// -------------------------------------------------------------------

class Attack_SC_Shout : public ::google::protobuf::Message {
 public:
  Attack_SC_Shout();
  virtual ~Attack_SC_Shout();

  Attack_SC_Shout(const Attack_SC_Shout& from);

  inline Attack_SC_Shout& operator=(const Attack_SC_Shout& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Attack_SC_Shout& default_instance();

  void Swap(Attack_SC_Shout* other);

  // implements Message ----------------------------------------------

  Attack_SC_Shout* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Attack_SC_Shout& from);
  void MergeFrom(const Attack_SC_Shout& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 nID = 1;
  inline bool has_nid() const;
  inline void clear_nid();
  static const int kNIDFieldNumber = 1;
  inline ::google::protobuf::int32 nid() const;
  inline void set_nid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Attack_SC_Shout)
 private:
  inline void set_has_nid();
  inline void clear_has_nid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 nid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_attack_2eproto();
  friend void protobuf_AssignDesc_attack_2eproto();
  friend void protobuf_ShutdownFile_attack_2eproto();

  void InitAsDefaultInstance();
  static Attack_SC_Shout* default_instance_;
};
// -------------------------------------------------------------------

class Attack_CS_Relive : public ::google::protobuf::Message {
 public:
  Attack_CS_Relive();
  virtual ~Attack_CS_Relive();

  Attack_CS_Relive(const Attack_CS_Relive& from);

  inline Attack_CS_Relive& operator=(const Attack_CS_Relive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Attack_CS_Relive& default_instance();

  void Swap(Attack_CS_Relive* other);

  // implements Message ----------------------------------------------

  Attack_CS_Relive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Attack_CS_Relive& from);
  void MergeFrom(const Attack_CS_Relive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Attack_CS_Relive)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_attack_2eproto();
  friend void protobuf_AssignDesc_attack_2eproto();
  friend void protobuf_ShutdownFile_attack_2eproto();

  void InitAsDefaultInstance();
  static Attack_CS_Relive* default_instance_;
};
// -------------------------------------------------------------------

class Attack_SC_Relive : public ::google::protobuf::Message {
 public:
  Attack_SC_Relive();
  virtual ~Attack_SC_Relive();

  Attack_SC_Relive(const Attack_SC_Relive& from);

  inline Attack_SC_Relive& operator=(const Attack_SC_Relive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Attack_SC_Relive& default_instance();

  void Swap(Attack_SC_Relive* other);

  // implements Message ----------------------------------------------

  Attack_SC_Relive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Attack_SC_Relive& from);
  void MergeFrom(const Attack_SC_Relive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional int32 relive_times = 2;
  inline bool has_relive_times() const;
  inline void clear_relive_times();
  static const int kReliveTimesFieldNumber = 2;
  inline ::google::protobuf::int32 relive_times() const;
  inline void set_relive_times(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Attack_SC_Relive)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_relive_times();
  inline void clear_has_relive_times();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 relive_times_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_attack_2eproto();
  friend void protobuf_AssignDesc_attack_2eproto();
  friend void protobuf_ShutdownFile_attack_2eproto();

  void InitAsDefaultInstance();
  static Attack_SC_Relive* default_instance_;
};
// -------------------------------------------------------------------

class Attack_SC_ClearSkillCD : public ::google::protobuf::Message {
 public:
  Attack_SC_ClearSkillCD();
  virtual ~Attack_SC_ClearSkillCD();

  Attack_SC_ClearSkillCD(const Attack_SC_ClearSkillCD& from);

  inline Attack_SC_ClearSkillCD& operator=(const Attack_SC_ClearSkillCD& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Attack_SC_ClearSkillCD& default_instance();

  void Swap(Attack_SC_ClearSkillCD* other);

  // implements Message ----------------------------------------------

  Attack_SC_ClearSkillCD* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Attack_SC_ClearSkillCD& from);
  void MergeFrom(const Attack_SC_ClearSkillCD& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 SkillId = 1;
  inline bool has_skillid() const;
  inline void clear_skillid();
  static const int kSkillIdFieldNumber = 1;
  inline ::google::protobuf::uint32 skillid() const;
  inline void set_skillid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Attack_SC_ClearSkillCD)
 private:
  inline void set_has_skillid();
  inline void clear_has_skillid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 skillid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_attack_2eproto();
  friend void protobuf_AssignDesc_attack_2eproto();
  friend void protobuf_ShutdownFile_attack_2eproto();

  void InitAsDefaultInstance();
  static Attack_SC_ClearSkillCD* default_instance_;
};
// -------------------------------------------------------------------

class Attack_SC_UpdateAttackStatus : public ::google::protobuf::Message {
 public:
  Attack_SC_UpdateAttackStatus();
  virtual ~Attack_SC_UpdateAttackStatus();

  Attack_SC_UpdateAttackStatus(const Attack_SC_UpdateAttackStatus& from);

  inline Attack_SC_UpdateAttackStatus& operator=(const Attack_SC_UpdateAttackStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Attack_SC_UpdateAttackStatus& default_instance();

  void Swap(Attack_SC_UpdateAttackStatus* other);

  // implements Message ----------------------------------------------

  Attack_SC_UpdateAttackStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Attack_SC_UpdateAttackStatus& from);
  void MergeFrom(const Attack_SC_UpdateAttackStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 Status = 1;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 1;
  inline ::google::protobuf::uint64 status() const;
  inline void set_status(::google::protobuf::uint64 value);

  // optional uint32 ID = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIDFieldNumber = 2;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Attack_SC_UpdateAttackStatus)
 private:
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 status_;
  ::google::protobuf::uint32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_attack_2eproto();
  friend void protobuf_AssignDesc_attack_2eproto();
  friend void protobuf_ShutdownFile_attack_2eproto();

  void InitAsDefaultInstance();
  static Attack_SC_UpdateAttackStatus* default_instance_;
};
// -------------------------------------------------------------------

class Attack_SC_UpdateMonsterAttackStatus : public ::google::protobuf::Message {
 public:
  Attack_SC_UpdateMonsterAttackStatus();
  virtual ~Attack_SC_UpdateMonsterAttackStatus();

  Attack_SC_UpdateMonsterAttackStatus(const Attack_SC_UpdateMonsterAttackStatus& from);

  inline Attack_SC_UpdateMonsterAttackStatus& operator=(const Attack_SC_UpdateMonsterAttackStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Attack_SC_UpdateMonsterAttackStatus& default_instance();

  void Swap(Attack_SC_UpdateMonsterAttackStatus* other);

  // implements Message ----------------------------------------------

  Attack_SC_UpdateMonsterAttackStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Attack_SC_UpdateMonsterAttackStatus& from);
  void MergeFrom(const Attack_SC_UpdateMonsterAttackStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 charid = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional bool status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline bool status() const;
  inline void set_status(bool value);

  // @@protoc_insertion_point(class_scope:proto.message.Attack_SC_UpdateMonsterAttackStatus)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  bool status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_attack_2eproto();
  friend void protobuf_AssignDesc_attack_2eproto();
  friend void protobuf_ShutdownFile_attack_2eproto();

  void InitAsDefaultInstance();
  static Attack_SC_UpdateMonsterAttackStatus* default_instance_;
};
// -------------------------------------------------------------------

class Attack_SC_Block : public ::google::protobuf::Message {
 public:
  Attack_SC_Block();
  virtual ~Attack_SC_Block();

  Attack_SC_Block(const Attack_SC_Block& from);

  inline Attack_SC_Block& operator=(const Attack_SC_Block& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Attack_SC_Block& default_instance();

  void Swap(Attack_SC_Block* other);

  // implements Message ----------------------------------------------

  Attack_SC_Block* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Attack_SC_Block& from);
  void MergeFrom(const Attack_SC_Block& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 charid = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Attack_SC_Block)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_attack_2eproto();
  friend void protobuf_AssignDesc_attack_2eproto();
  friend void protobuf_ShutdownFile_attack_2eproto();

  void InitAsDefaultInstance();
  static Attack_SC_Block* default_instance_;
};
// -------------------------------------------------------------------

class Attack_SC_UpdateFlagCamp : public ::google::protobuf::Message {
 public:
  Attack_SC_UpdateFlagCamp();
  virtual ~Attack_SC_UpdateFlagCamp();

  Attack_SC_UpdateFlagCamp(const Attack_SC_UpdateFlagCamp& from);

  inline Attack_SC_UpdateFlagCamp& operator=(const Attack_SC_UpdateFlagCamp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Attack_SC_UpdateFlagCamp& default_instance();

  void Swap(Attack_SC_UpdateFlagCamp* other);

  // implements Message ----------------------------------------------

  Attack_SC_UpdateFlagCamp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Attack_SC_UpdateFlagCamp& from);
  void MergeFrom(const Attack_SC_UpdateFlagCamp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 charid = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 1;
  inline ::google::protobuf::int32 charid() const;
  inline void set_charid(::google::protobuf::int32 value);

  // optional int32 flag_camp = 2;
  inline bool has_flag_camp() const;
  inline void clear_flag_camp();
  static const int kFlagCampFieldNumber = 2;
  inline ::google::protobuf::int32 flag_camp() const;
  inline void set_flag_camp(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Attack_SC_UpdateFlagCamp)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_flag_camp();
  inline void clear_has_flag_camp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 charid_;
  ::google::protobuf::int32 flag_camp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_attack_2eproto();
  friend void protobuf_AssignDesc_attack_2eproto();
  friend void protobuf_ShutdownFile_attack_2eproto();

  void InitAsDefaultInstance();
  static Attack_SC_UpdateFlagCamp* default_instance_;
};
// -------------------------------------------------------------------

class Attack_SC_RelivePos : public ::google::protobuf::Message {
 public:
  Attack_SC_RelivePos();
  virtual ~Attack_SC_RelivePos();

  Attack_SC_RelivePos(const Attack_SC_RelivePos& from);

  inline Attack_SC_RelivePos& operator=(const Attack_SC_RelivePos& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Attack_SC_RelivePos& default_instance();

  void Swap(Attack_SC_RelivePos* other);

  // implements Message ----------------------------------------------

  Attack_SC_RelivePos* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Attack_SC_RelivePos& from);
  void MergeFrom(const Attack_SC_RelivePos& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 PlyId = 1;
  inline bool has_plyid() const;
  inline void clear_plyid();
  static const int kPlyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 plyid() const;
  inline void set_plyid(::google::protobuf::uint32 value);

  // optional int32 CurHP = 2;
  inline bool has_curhp() const;
  inline void clear_curhp();
  static const int kCurHPFieldNumber = 2;
  inline ::google::protobuf::int32 curhp() const;
  inline void set_curhp(::google::protobuf::int32 value);

  // optional uint32 MaxHP = 3;
  inline bool has_maxhp() const;
  inline void clear_maxhp();
  static const int kMaxHPFieldNumber = 3;
  inline ::google::protobuf::uint32 maxhp() const;
  inline void set_maxhp(::google::protobuf::uint32 value);

  // optional .proto.message.Point3D Pt = 4;
  inline bool has_pt() const;
  inline void clear_pt();
  static const int kPtFieldNumber = 4;
  inline const ::proto::message::Point3D& pt() const;
  inline ::proto::message::Point3D* mutable_pt();
  inline ::proto::message::Point3D* release_pt();
  inline void set_allocated_pt(::proto::message::Point3D* pt);

  // optional float Dir = 5;
  inline bool has_dir() const;
  inline void clear_dir();
  static const int kDirFieldNumber = 5;
  inline float dir() const;
  inline void set_dir(float value);

  // @@protoc_insertion_point(class_scope:proto.message.Attack_SC_RelivePos)
 private:
  inline void set_has_plyid();
  inline void clear_has_plyid();
  inline void set_has_curhp();
  inline void clear_has_curhp();
  inline void set_has_maxhp();
  inline void clear_has_maxhp();
  inline void set_has_pt();
  inline void clear_has_pt();
  inline void set_has_dir();
  inline void clear_has_dir();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 plyid_;
  ::google::protobuf::int32 curhp_;
  ::proto::message::Point3D* pt_;
  ::google::protobuf::uint32 maxhp_;
  float dir_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_attack_2eproto();
  friend void protobuf_AssignDesc_attack_2eproto();
  friend void protobuf_ShutdownFile_attack_2eproto();

  void InitAsDefaultInstance();
  static Attack_SC_RelivePos* default_instance_;
};
// -------------------------------------------------------------------

class Attack_SC_UpdateGroupCD : public ::google::protobuf::Message {
 public:
  Attack_SC_UpdateGroupCD();
  virtual ~Attack_SC_UpdateGroupCD();

  Attack_SC_UpdateGroupCD(const Attack_SC_UpdateGroupCD& from);

  inline Attack_SC_UpdateGroupCD& operator=(const Attack_SC_UpdateGroupCD& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Attack_SC_UpdateGroupCD& default_instance();

  void Swap(Attack_SC_UpdateGroupCD* other);

  // implements Message ----------------------------------------------

  Attack_SC_UpdateGroupCD* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Attack_SC_UpdateGroupCD& from);
  void MergeFrom(const Attack_SC_UpdateGroupCD& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 skillid = 1;
  inline bool has_skillid() const;
  inline void clear_skillid();
  static const int kSkillidFieldNumber = 1;
  inline ::google::protobuf::int32 skillid() const;
  inline void set_skillid(::google::protobuf::int32 value);

  // optional int32 groupid = 2;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupidFieldNumber = 2;
  inline ::google::protobuf::int32 groupid() const;
  inline void set_groupid(::google::protobuf::int32 value);

  // optional int64 endtick = 3;
  inline bool has_endtick() const;
  inline void clear_endtick();
  static const int kEndtickFieldNumber = 3;
  inline ::google::protobuf::int64 endtick() const;
  inline void set_endtick(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:proto.message.Attack_SC_UpdateGroupCD)
 private:
  inline void set_has_skillid();
  inline void clear_has_skillid();
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_endtick();
  inline void clear_has_endtick();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 skillid_;
  ::google::protobuf::int32 groupid_;
  ::google::protobuf::int64 endtick_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_attack_2eproto();
  friend void protobuf_AssignDesc_attack_2eproto();
  friend void protobuf_ShutdownFile_attack_2eproto();

  void InitAsDefaultInstance();
  static Attack_SC_UpdateGroupCD* default_instance_;
};
// ===================================================================


// ===================================================================

// Attack_SC_UpdateXP

// optional uint32 xpenergy = 1;
inline bool Attack_SC_UpdateXP::has_xpenergy() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Attack_SC_UpdateXP::set_has_xpenergy() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Attack_SC_UpdateXP::clear_has_xpenergy() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Attack_SC_UpdateXP::clear_xpenergy() {
  xpenergy_ = 0u;
  clear_has_xpenergy();
}
inline ::google::protobuf::uint32 Attack_SC_UpdateXP::xpenergy() const {
  return xpenergy_;
}
inline void Attack_SC_UpdateXP::set_xpenergy(::google::protobuf::uint32 value) {
  set_has_xpenergy();
  xpenergy_ = value;
}

// -------------------------------------------------------------------

// Attack_CS_PlayerExcuteSkill

// required int32 PlayerSkillId = 1;
inline bool Attack_CS_PlayerExcuteSkill::has_playerskillid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Attack_CS_PlayerExcuteSkill::set_has_playerskillid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Attack_CS_PlayerExcuteSkill::clear_has_playerskillid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Attack_CS_PlayerExcuteSkill::clear_playerskillid() {
  playerskillid_ = 0;
  clear_has_playerskillid();
}
inline ::google::protobuf::int32 Attack_CS_PlayerExcuteSkill::playerskillid() const {
  return playerskillid_;
}
inline void Attack_CS_PlayerExcuteSkill::set_playerskillid(::google::protobuf::int32 value) {
  set_has_playerskillid();
  playerskillid_ = value;
}

// optional uint32 SkillId = 2;
inline bool Attack_CS_PlayerExcuteSkill::has_skillid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Attack_CS_PlayerExcuteSkill::set_has_skillid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Attack_CS_PlayerExcuteSkill::clear_has_skillid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Attack_CS_PlayerExcuteSkill::clear_skillid() {
  skillid_ = 0u;
  clear_has_skillid();
}
inline ::google::protobuf::uint32 Attack_CS_PlayerExcuteSkill::skillid() const {
  return skillid_;
}
inline void Attack_CS_PlayerExcuteSkill::set_skillid(::google::protobuf::uint32 value) {
  set_has_skillid();
  skillid_ = value;
}

// optional float Dir = 3;
inline bool Attack_CS_PlayerExcuteSkill::has_dir() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Attack_CS_PlayerExcuteSkill::set_has_dir() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Attack_CS_PlayerExcuteSkill::clear_has_dir() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Attack_CS_PlayerExcuteSkill::clear_dir() {
  dir_ = 0;
  clear_has_dir();
}
inline float Attack_CS_PlayerExcuteSkill::dir() const {
  return dir_;
}
inline void Attack_CS_PlayerExcuteSkill::set_dir(float value) {
  set_has_dir();
  dir_ = value;
}

// optional .proto.message.Point3D pt = 4;
inline bool Attack_CS_PlayerExcuteSkill::has_pt() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Attack_CS_PlayerExcuteSkill::set_has_pt() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Attack_CS_PlayerExcuteSkill::clear_has_pt() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Attack_CS_PlayerExcuteSkill::clear_pt() {
  if (pt_ != NULL) pt_->::proto::message::Point3D::Clear();
  clear_has_pt();
}
inline const ::proto::message::Point3D& Attack_CS_PlayerExcuteSkill::pt() const {
  return pt_ != NULL ? *pt_ : *default_instance_->pt_;
}
inline ::proto::message::Point3D* Attack_CS_PlayerExcuteSkill::mutable_pt() {
  set_has_pt();
  if (pt_ == NULL) pt_ = new ::proto::message::Point3D;
  return pt_;
}
inline ::proto::message::Point3D* Attack_CS_PlayerExcuteSkill::release_pt() {
  clear_has_pt();
  ::proto::message::Point3D* temp = pt_;
  pt_ = NULL;
  return temp;
}
inline void Attack_CS_PlayerExcuteSkill::set_allocated_pt(::proto::message::Point3D* pt) {
  delete pt_;
  pt_ = pt;
  if (pt) {
    set_has_pt();
  } else {
    clear_has_pt();
  }
}

// optional uint32 targetID = 5;
inline bool Attack_CS_PlayerExcuteSkill::has_targetid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Attack_CS_PlayerExcuteSkill::set_has_targetid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Attack_CS_PlayerExcuteSkill::clear_has_targetid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Attack_CS_PlayerExcuteSkill::clear_targetid() {
  targetid_ = 0u;
  clear_has_targetid();
}
inline ::google::protobuf::uint32 Attack_CS_PlayerExcuteSkill::targetid() const {
  return targetid_;
}
inline void Attack_CS_PlayerExcuteSkill::set_targetid(::google::protobuf::uint32 value) {
  set_has_targetid();
  targetid_ = value;
}

// optional int32 objType = 6;
inline bool Attack_CS_PlayerExcuteSkill::has_objtype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Attack_CS_PlayerExcuteSkill::set_has_objtype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Attack_CS_PlayerExcuteSkill::clear_has_objtype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Attack_CS_PlayerExcuteSkill::clear_objtype() {
  objtype_ = 0;
  clear_has_objtype();
}
inline ::google::protobuf::int32 Attack_CS_PlayerExcuteSkill::objtype() const {
  return objtype_;
}
inline void Attack_CS_PlayerExcuteSkill::set_objtype(::google::protobuf::int32 value) {
  set_has_objtype();
  objtype_ = value;
}

// -------------------------------------------------------------------

// Attack_CS_RequestHurt

// required int32 PlayerSkillId = 1;
inline bool Attack_CS_RequestHurt::has_playerskillid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Attack_CS_RequestHurt::set_has_playerskillid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Attack_CS_RequestHurt::clear_has_playerskillid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Attack_CS_RequestHurt::clear_playerskillid() {
  playerskillid_ = 0;
  clear_has_playerskillid();
}
inline ::google::protobuf::int32 Attack_CS_RequestHurt::playerskillid() const {
  return playerskillid_;
}
inline void Attack_CS_RequestHurt::set_playerskillid(::google::protobuf::int32 value) {
  set_has_playerskillid();
  playerskillid_ = value;
}

// optional uint32 SkillId = 2;
inline bool Attack_CS_RequestHurt::has_skillid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Attack_CS_RequestHurt::set_has_skillid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Attack_CS_RequestHurt::clear_has_skillid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Attack_CS_RequestHurt::clear_skillid() {
  skillid_ = 0u;
  clear_has_skillid();
}
inline ::google::protobuf::uint32 Attack_CS_RequestHurt::skillid() const {
  return skillid_;
}
inline void Attack_CS_RequestHurt::set_skillid(::google::protobuf::uint32 value) {
  set_has_skillid();
  skillid_ = value;
}

// repeated uint32 ListDesId = 3;
inline int Attack_CS_RequestHurt::listdesid_size() const {
  return listdesid_.size();
}
inline void Attack_CS_RequestHurt::clear_listdesid() {
  listdesid_.Clear();
}
inline ::google::protobuf::uint32 Attack_CS_RequestHurt::listdesid(int index) const {
  return listdesid_.Get(index);
}
inline void Attack_CS_RequestHurt::set_listdesid(int index, ::google::protobuf::uint32 value) {
  listdesid_.Set(index, value);
}
inline void Attack_CS_RequestHurt::add_listdesid(::google::protobuf::uint32 value) {
  listdesid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Attack_CS_RequestHurt::listdesid() const {
  return listdesid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Attack_CS_RequestHurt::mutable_listdesid() {
  return &listdesid_;
}

// optional int32 objType = 4;
inline bool Attack_CS_RequestHurt::has_objtype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Attack_CS_RequestHurt::set_has_objtype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Attack_CS_RequestHurt::clear_has_objtype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Attack_CS_RequestHurt::clear_objtype() {
  objtype_ = 0;
  clear_has_objtype();
}
inline ::google::protobuf::int32 Attack_CS_RequestHurt::objtype() const {
  return objtype_;
}
inline void Attack_CS_RequestHurt::set_objtype(::google::protobuf::int32 value) {
  set_has_objtype();
  objtype_ = value;
}

// -------------------------------------------------------------------

// Attack_CS_AttackSprint

// optional uint32 SkillId = 2;
inline bool Attack_CS_AttackSprint::has_skillid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Attack_CS_AttackSprint::set_has_skillid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Attack_CS_AttackSprint::clear_has_skillid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Attack_CS_AttackSprint::clear_skillid() {
  skillid_ = 0u;
  clear_has_skillid();
}
inline ::google::protobuf::uint32 Attack_CS_AttackSprint::skillid() const {
  return skillid_;
}
inline void Attack_CS_AttackSprint::set_skillid(::google::protobuf::uint32 value) {
  set_has_skillid();
  skillid_ = value;
}

// optional .proto.message.Point3D pt = 3;
inline bool Attack_CS_AttackSprint::has_pt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Attack_CS_AttackSprint::set_has_pt() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Attack_CS_AttackSprint::clear_has_pt() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Attack_CS_AttackSprint::clear_pt() {
  if (pt_ != NULL) pt_->::proto::message::Point3D::Clear();
  clear_has_pt();
}
inline const ::proto::message::Point3D& Attack_CS_AttackSprint::pt() const {
  return pt_ != NULL ? *pt_ : *default_instance_->pt_;
}
inline ::proto::message::Point3D* Attack_CS_AttackSprint::mutable_pt() {
  set_has_pt();
  if (pt_ == NULL) pt_ = new ::proto::message::Point3D;
  return pt_;
}
inline ::proto::message::Point3D* Attack_CS_AttackSprint::release_pt() {
  clear_has_pt();
  ::proto::message::Point3D* temp = pt_;
  pt_ = NULL;
  return temp;
}
inline void Attack_CS_AttackSprint::set_allocated_pt(::proto::message::Point3D* pt) {
  delete pt_;
  pt_ = pt;
  if (pt) {
    set_has_pt();
  } else {
    clear_has_pt();
  }
}

// -------------------------------------------------------------------

// Attack_SC_ExcuteSkillSelf

// required int32 PlayerSkillId = 1;
inline bool Attack_SC_ExcuteSkillSelf::has_playerskillid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Attack_SC_ExcuteSkillSelf::set_has_playerskillid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Attack_SC_ExcuteSkillSelf::clear_has_playerskillid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Attack_SC_ExcuteSkillSelf::clear_playerskillid() {
  playerskillid_ = 0;
  clear_has_playerskillid();
}
inline ::google::protobuf::int32 Attack_SC_ExcuteSkillSelf::playerskillid() const {
  return playerskillid_;
}
inline void Attack_SC_ExcuteSkillSelf::set_playerskillid(::google::protobuf::int32 value) {
  set_has_playerskillid();
  playerskillid_ = value;
}

// required int32 SkillId = 2;
inline bool Attack_SC_ExcuteSkillSelf::has_skillid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Attack_SC_ExcuteSkillSelf::set_has_skillid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Attack_SC_ExcuteSkillSelf::clear_has_skillid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Attack_SC_ExcuteSkillSelf::clear_skillid() {
  skillid_ = 0;
  clear_has_skillid();
}
inline ::google::protobuf::int32 Attack_SC_ExcuteSkillSelf::skillid() const {
  return skillid_;
}
inline void Attack_SC_ExcuteSkillSelf::set_skillid(::google::protobuf::int32 value) {
  set_has_skillid();
  skillid_ = value;
}

// required int32 error = 3;
inline bool Attack_SC_ExcuteSkillSelf::has_error() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Attack_SC_ExcuteSkillSelf::set_has_error() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Attack_SC_ExcuteSkillSelf::clear_has_error() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Attack_SC_ExcuteSkillSelf::clear_error() {
  error_ = 0;
  clear_has_error();
}
inline ::google::protobuf::int32 Attack_SC_ExcuteSkillSelf::error() const {
  return error_;
}
inline void Attack_SC_ExcuteSkillSelf::set_error(::google::protobuf::int32 value) {
  set_has_error();
  error_ = value;
}

// optional uint32 charId = 4;
inline bool Attack_SC_ExcuteSkillSelf::has_charid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Attack_SC_ExcuteSkillSelf::set_has_charid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Attack_SC_ExcuteSkillSelf::clear_has_charid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Attack_SC_ExcuteSkillSelf::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 Attack_SC_ExcuteSkillSelf::charid() const {
  return charid_;
}
inline void Attack_SC_ExcuteSkillSelf::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional float Dir = 5;
inline bool Attack_SC_ExcuteSkillSelf::has_dir() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Attack_SC_ExcuteSkillSelf::set_has_dir() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Attack_SC_ExcuteSkillSelf::clear_has_dir() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Attack_SC_ExcuteSkillSelf::clear_dir() {
  dir_ = 0;
  clear_has_dir();
}
inline float Attack_SC_ExcuteSkillSelf::dir() const {
  return dir_;
}
inline void Attack_SC_ExcuteSkillSelf::set_dir(float value) {
  set_has_dir();
  dir_ = value;
}

// optional .proto.message.Point3D pt = 6;
inline bool Attack_SC_ExcuteSkillSelf::has_pt() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Attack_SC_ExcuteSkillSelf::set_has_pt() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Attack_SC_ExcuteSkillSelf::clear_has_pt() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Attack_SC_ExcuteSkillSelf::clear_pt() {
  if (pt_ != NULL) pt_->::proto::message::Point3D::Clear();
  clear_has_pt();
}
inline const ::proto::message::Point3D& Attack_SC_ExcuteSkillSelf::pt() const {
  return pt_ != NULL ? *pt_ : *default_instance_->pt_;
}
inline ::proto::message::Point3D* Attack_SC_ExcuteSkillSelf::mutable_pt() {
  set_has_pt();
  if (pt_ == NULL) pt_ = new ::proto::message::Point3D;
  return pt_;
}
inline ::proto::message::Point3D* Attack_SC_ExcuteSkillSelf::release_pt() {
  clear_has_pt();
  ::proto::message::Point3D* temp = pt_;
  pt_ = NULL;
  return temp;
}
inline void Attack_SC_ExcuteSkillSelf::set_allocated_pt(::proto::message::Point3D* pt) {
  delete pt_;
  pt_ = pt;
  if (pt) {
    set_has_pt();
  } else {
    clear_has_pt();
  }
}

// optional uint32 targetID = 7;
inline bool Attack_SC_ExcuteSkillSelf::has_targetid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Attack_SC_ExcuteSkillSelf::set_has_targetid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Attack_SC_ExcuteSkillSelf::clear_has_targetid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Attack_SC_ExcuteSkillSelf::clear_targetid() {
  targetid_ = 0u;
  clear_has_targetid();
}
inline ::google::protobuf::uint32 Attack_SC_ExcuteSkillSelf::targetid() const {
  return targetid_;
}
inline void Attack_SC_ExcuteSkillSelf::set_targetid(::google::protobuf::uint32 value) {
  set_has_targetid();
  targetid_ = value;
}

// -------------------------------------------------------------------

// Attack_SC_ExcuteSkillOther

// required uint32 CharId = 1;
inline bool Attack_SC_ExcuteSkillOther::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Attack_SC_ExcuteSkillOther::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Attack_SC_ExcuteSkillOther::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Attack_SC_ExcuteSkillOther::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 Attack_SC_ExcuteSkillOther::charid() const {
  return charid_;
}
inline void Attack_SC_ExcuteSkillOther::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// required int32 SkillId = 2;
inline bool Attack_SC_ExcuteSkillOther::has_skillid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Attack_SC_ExcuteSkillOther::set_has_skillid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Attack_SC_ExcuteSkillOther::clear_has_skillid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Attack_SC_ExcuteSkillOther::clear_skillid() {
  skillid_ = 0;
  clear_has_skillid();
}
inline ::google::protobuf::int32 Attack_SC_ExcuteSkillOther::skillid() const {
  return skillid_;
}
inline void Attack_SC_ExcuteSkillOther::set_skillid(::google::protobuf::int32 value) {
  set_has_skillid();
  skillid_ = value;
}

// optional float dir = 3;
inline bool Attack_SC_ExcuteSkillOther::has_dir() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Attack_SC_ExcuteSkillOther::set_has_dir() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Attack_SC_ExcuteSkillOther::clear_has_dir() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Attack_SC_ExcuteSkillOther::clear_dir() {
  dir_ = 0;
  clear_has_dir();
}
inline float Attack_SC_ExcuteSkillOther::dir() const {
  return dir_;
}
inline void Attack_SC_ExcuteSkillOther::set_dir(float value) {
  set_has_dir();
  dir_ = value;
}

// optional .proto.message.Point3D pt = 4;
inline bool Attack_SC_ExcuteSkillOther::has_pt() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Attack_SC_ExcuteSkillOther::set_has_pt() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Attack_SC_ExcuteSkillOther::clear_has_pt() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Attack_SC_ExcuteSkillOther::clear_pt() {
  if (pt_ != NULL) pt_->::proto::message::Point3D::Clear();
  clear_has_pt();
}
inline const ::proto::message::Point3D& Attack_SC_ExcuteSkillOther::pt() const {
  return pt_ != NULL ? *pt_ : *default_instance_->pt_;
}
inline ::proto::message::Point3D* Attack_SC_ExcuteSkillOther::mutable_pt() {
  set_has_pt();
  if (pt_ == NULL) pt_ = new ::proto::message::Point3D;
  return pt_;
}
inline ::proto::message::Point3D* Attack_SC_ExcuteSkillOther::release_pt() {
  clear_has_pt();
  ::proto::message::Point3D* temp = pt_;
  pt_ = NULL;
  return temp;
}
inline void Attack_SC_ExcuteSkillOther::set_allocated_pt(::proto::message::Point3D* pt) {
  delete pt_;
  pt_ = pt;
  if (pt) {
    set_has_pt();
  } else {
    clear_has_pt();
  }
}

// optional uint32 targetID = 5;
inline bool Attack_SC_ExcuteSkillOther::has_targetid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Attack_SC_ExcuteSkillOther::set_has_targetid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Attack_SC_ExcuteSkillOther::clear_has_targetid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Attack_SC_ExcuteSkillOther::clear_targetid() {
  targetid_ = 0u;
  clear_has_targetid();
}
inline ::google::protobuf::uint32 Attack_SC_ExcuteSkillOther::targetid() const {
  return targetid_;
}
inline void Attack_SC_ExcuteSkillOther::set_targetid(::google::protobuf::uint32 value) {
  set_has_targetid();
  targetid_ = value;
}

// optional int32 objType = 6;
inline bool Attack_SC_ExcuteSkillOther::has_objtype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Attack_SC_ExcuteSkillOther::set_has_objtype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Attack_SC_ExcuteSkillOther::clear_has_objtype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Attack_SC_ExcuteSkillOther::clear_objtype() {
  objtype_ = 0;
  clear_has_objtype();
}
inline ::google::protobuf::int32 Attack_SC_ExcuteSkillOther::objtype() const {
  return objtype_;
}
inline void Attack_SC_ExcuteSkillOther::set_objtype(::google::protobuf::int32 value) {
  set_has_objtype();
  objtype_ = value;
}

// optional int32 camp = 7;
inline bool Attack_SC_ExcuteSkillOther::has_camp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Attack_SC_ExcuteSkillOther::set_has_camp() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Attack_SC_ExcuteSkillOther::clear_has_camp() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Attack_SC_ExcuteSkillOther::clear_camp() {
  camp_ = 0;
  clear_has_camp();
}
inline ::google::protobuf::int32 Attack_SC_ExcuteSkillOther::camp() const {
  return camp_;
}
inline void Attack_SC_ExcuteSkillOther::set_camp(::google::protobuf::int32 value) {
  set_has_camp();
  camp_ = value;
}

// -------------------------------------------------------------------

// Attack_SC_UpdateHurtData

// required uint32 CharId = 1;
inline bool Attack_SC_UpdateHurtData::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Attack_SC_UpdateHurtData::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Attack_SC_UpdateHurtData::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Attack_SC_UpdateHurtData::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 Attack_SC_UpdateHurtData::charid() const {
  return charid_;
}
inline void Attack_SC_UpdateHurtData::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// required int32 nHurt = 2;
inline bool Attack_SC_UpdateHurtData::has_nhurt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Attack_SC_UpdateHurtData::set_has_nhurt() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Attack_SC_UpdateHurtData::clear_has_nhurt() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Attack_SC_UpdateHurtData::clear_nhurt() {
  nhurt_ = 0;
  clear_has_nhurt();
}
inline ::google::protobuf::int32 Attack_SC_UpdateHurtData::nhurt() const {
  return nhurt_;
}
inline void Attack_SC_UpdateHurtData::set_nhurt(::google::protobuf::int32 value) {
  set_has_nhurt();
  nhurt_ = value;
}

// optional int32 nCurHP = 3;
inline bool Attack_SC_UpdateHurtData::has_ncurhp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Attack_SC_UpdateHurtData::set_has_ncurhp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Attack_SC_UpdateHurtData::clear_has_ncurhp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Attack_SC_UpdateHurtData::clear_ncurhp() {
  ncurhp_ = 0;
  clear_has_ncurhp();
}
inline ::google::protobuf::int32 Attack_SC_UpdateHurtData::ncurhp() const {
  return ncurhp_;
}
inline void Attack_SC_UpdateHurtData::set_ncurhp(::google::protobuf::int32 value) {
  set_has_ncurhp();
  ncurhp_ = value;
}

// optional int32 SkillId = 4;
inline bool Attack_SC_UpdateHurtData::has_skillid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Attack_SC_UpdateHurtData::set_has_skillid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Attack_SC_UpdateHurtData::clear_has_skillid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Attack_SC_UpdateHurtData::clear_skillid() {
  skillid_ = 0;
  clear_has_skillid();
}
inline ::google::protobuf::int32 Attack_SC_UpdateHurtData::skillid() const {
  return skillid_;
}
inline void Attack_SC_UpdateHurtData::set_skillid(::google::protobuf::int32 value) {
  set_has_skillid();
  skillid_ = value;
}

// optional int32 nMaxHP = 5;
inline bool Attack_SC_UpdateHurtData::has_nmaxhp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Attack_SC_UpdateHurtData::set_has_nmaxhp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Attack_SC_UpdateHurtData::clear_has_nmaxhp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Attack_SC_UpdateHurtData::clear_nmaxhp() {
  nmaxhp_ = 0;
  clear_has_nmaxhp();
}
inline ::google::protobuf::int32 Attack_SC_UpdateHurtData::nmaxhp() const {
  return nmaxhp_;
}
inline void Attack_SC_UpdateHurtData::set_nmaxhp(::google::protobuf::int32 value) {
  set_has_nmaxhp();
  nmaxhp_ = value;
}

// optional int32 nHurtType = 6;
inline bool Attack_SC_UpdateHurtData::has_nhurttype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Attack_SC_UpdateHurtData::set_has_nhurttype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Attack_SC_UpdateHurtData::clear_has_nhurttype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Attack_SC_UpdateHurtData::clear_nhurttype() {
  nhurttype_ = 0;
  clear_has_nhurttype();
}
inline ::google::protobuf::int32 Attack_SC_UpdateHurtData::nhurttype() const {
  return nhurttype_;
}
inline void Attack_SC_UpdateHurtData::set_nhurttype(::google::protobuf::int32 value) {
  set_has_nhurttype();
  nhurttype_ = value;
}

// optional uint64 attacker = 7;
inline bool Attack_SC_UpdateHurtData::has_attacker() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Attack_SC_UpdateHurtData::set_has_attacker() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Attack_SC_UpdateHurtData::clear_has_attacker() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Attack_SC_UpdateHurtData::clear_attacker() {
  attacker_ = GOOGLE_ULONGLONG(0);
  clear_has_attacker();
}
inline ::google::protobuf::uint64 Attack_SC_UpdateHurtData::attacker() const {
  return attacker_;
}
inline void Attack_SC_UpdateHurtData::set_attacker(::google::protobuf::uint64 value) {
  set_has_attacker();
  attacker_ = value;
}

// -------------------------------------------------------------------

// Attack_SC_AttackBack

// required uint32 CharId = 1;
inline bool Attack_SC_AttackBack::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Attack_SC_AttackBack::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Attack_SC_AttackBack::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Attack_SC_AttackBack::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 Attack_SC_AttackBack::charid() const {
  return charid_;
}
inline void Attack_SC_AttackBack::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 AttCharId = 2;
inline bool Attack_SC_AttackBack::has_attcharid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Attack_SC_AttackBack::set_has_attcharid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Attack_SC_AttackBack::clear_has_attcharid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Attack_SC_AttackBack::clear_attcharid() {
  attcharid_ = 0u;
  clear_has_attcharid();
}
inline ::google::protobuf::uint32 Attack_SC_AttackBack::attcharid() const {
  return attcharid_;
}
inline void Attack_SC_AttackBack::set_attcharid(::google::protobuf::uint32 value) {
  set_has_attcharid();
  attcharid_ = value;
}

// optional uint32 SkillId = 3;
inline bool Attack_SC_AttackBack::has_skillid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Attack_SC_AttackBack::set_has_skillid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Attack_SC_AttackBack::clear_has_skillid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Attack_SC_AttackBack::clear_skillid() {
  skillid_ = 0u;
  clear_has_skillid();
}
inline ::google::protobuf::uint32 Attack_SC_AttackBack::skillid() const {
  return skillid_;
}
inline void Attack_SC_AttackBack::set_skillid(::google::protobuf::uint32 value) {
  set_has_skillid();
  skillid_ = value;
}

// optional .proto.message.Point3D pt = 4;
inline bool Attack_SC_AttackBack::has_pt() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Attack_SC_AttackBack::set_has_pt() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Attack_SC_AttackBack::clear_has_pt() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Attack_SC_AttackBack::clear_pt() {
  if (pt_ != NULL) pt_->::proto::message::Point3D::Clear();
  clear_has_pt();
}
inline const ::proto::message::Point3D& Attack_SC_AttackBack::pt() const {
  return pt_ != NULL ? *pt_ : *default_instance_->pt_;
}
inline ::proto::message::Point3D* Attack_SC_AttackBack::mutable_pt() {
  set_has_pt();
  if (pt_ == NULL) pt_ = new ::proto::message::Point3D;
  return pt_;
}
inline ::proto::message::Point3D* Attack_SC_AttackBack::release_pt() {
  clear_has_pt();
  ::proto::message::Point3D* temp = pt_;
  pt_ = NULL;
  return temp;
}
inline void Attack_SC_AttackBack::set_allocated_pt(::proto::message::Point3D* pt) {
  delete pt_;
  pt_ = pt;
  if (pt) {
    set_has_pt();
  } else {
    clear_has_pt();
  }
}

// optional float Dir = 5;
inline bool Attack_SC_AttackBack::has_dir() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Attack_SC_AttackBack::set_has_dir() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Attack_SC_AttackBack::clear_has_dir() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Attack_SC_AttackBack::clear_dir() {
  dir_ = 0;
  clear_has_dir();
}
inline float Attack_SC_AttackBack::dir() const {
  return dir_;
}
inline void Attack_SC_AttackBack::set_dir(float value) {
  set_has_dir();
  dir_ = value;
}

// optional int32 nTime = 6;
inline bool Attack_SC_AttackBack::has_ntime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Attack_SC_AttackBack::set_has_ntime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Attack_SC_AttackBack::clear_has_ntime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Attack_SC_AttackBack::clear_ntime() {
  ntime_ = 0;
  clear_has_ntime();
}
inline ::google::protobuf::int32 Attack_SC_AttackBack::ntime() const {
  return ntime_;
}
inline void Attack_SC_AttackBack::set_ntime(::google::protobuf::int32 value) {
  set_has_ntime();
  ntime_ = value;
}

// -------------------------------------------------------------------

// Attack_SC_AddBuffer

// required uint32 CharId = 1;
inline bool Attack_SC_AddBuffer::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Attack_SC_AddBuffer::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Attack_SC_AddBuffer::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Attack_SC_AddBuffer::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 Attack_SC_AddBuffer::charid() const {
  return charid_;
}
inline void Attack_SC_AddBuffer::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 BufferId = 2;
inline bool Attack_SC_AddBuffer::has_bufferid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Attack_SC_AddBuffer::set_has_bufferid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Attack_SC_AddBuffer::clear_has_bufferid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Attack_SC_AddBuffer::clear_bufferid() {
  bufferid_ = 0u;
  clear_has_bufferid();
}
inline ::google::protobuf::uint32 Attack_SC_AddBuffer::bufferid() const {
  return bufferid_;
}
inline void Attack_SC_AddBuffer::set_bufferid(::google::protobuf::uint32 value) {
  set_has_bufferid();
  bufferid_ = value;
}

// optional uint64 Status = 3;
inline bool Attack_SC_AddBuffer::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Attack_SC_AddBuffer::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Attack_SC_AddBuffer::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Attack_SC_AddBuffer::clear_status() {
  status_ = GOOGLE_ULONGLONG(0);
  clear_has_status();
}
inline ::google::protobuf::uint64 Attack_SC_AddBuffer::status() const {
  return status_;
}
inline void Attack_SC_AddBuffer::set_status(::google::protobuf::uint64 value) {
  set_has_status();
  status_ = value;
}

// optional int32 LastTime = 4;
inline bool Attack_SC_AddBuffer::has_lasttime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Attack_SC_AddBuffer::set_has_lasttime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Attack_SC_AddBuffer::clear_has_lasttime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Attack_SC_AddBuffer::clear_lasttime() {
  lasttime_ = 0;
  clear_has_lasttime();
}
inline ::google::protobuf::int32 Attack_SC_AddBuffer::lasttime() const {
  return lasttime_;
}
inline void Attack_SC_AddBuffer::set_lasttime(::google::protobuf::int32 value) {
  set_has_lasttime();
  lasttime_ = value;
}

// optional int32 isDisPlayInProto = 5;
inline bool Attack_SC_AddBuffer::has_isdisplayinproto() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Attack_SC_AddBuffer::set_has_isdisplayinproto() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Attack_SC_AddBuffer::clear_has_isdisplayinproto() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Attack_SC_AddBuffer::clear_isdisplayinproto() {
  isdisplayinproto_ = 0;
  clear_has_isdisplayinproto();
}
inline ::google::protobuf::int32 Attack_SC_AddBuffer::isdisplayinproto() const {
  return isdisplayinproto_;
}
inline void Attack_SC_AddBuffer::set_isdisplayinproto(::google::protobuf::int32 value) {
  set_has_isdisplayinproto();
  isdisplayinproto_ = value;
}

// optional int32 property = 6;
inline bool Attack_SC_AddBuffer::has_property() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Attack_SC_AddBuffer::set_has_property() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Attack_SC_AddBuffer::clear_has_property() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Attack_SC_AddBuffer::clear_property() {
  property_ = 0;
  clear_has_property();
}
inline ::google::protobuf::int32 Attack_SC_AddBuffer::property() const {
  return property_;
}
inline void Attack_SC_AddBuffer::set_property(::google::protobuf::int32 value) {
  set_has_property();
  property_ = value;
}

// -------------------------------------------------------------------

// Attack_SC_DelBuffer

// required uint32 CharId = 1;
inline bool Attack_SC_DelBuffer::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Attack_SC_DelBuffer::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Attack_SC_DelBuffer::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Attack_SC_DelBuffer::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 Attack_SC_DelBuffer::charid() const {
  return charid_;
}
inline void Attack_SC_DelBuffer::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 BufferId = 2;
inline bool Attack_SC_DelBuffer::has_bufferid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Attack_SC_DelBuffer::set_has_bufferid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Attack_SC_DelBuffer::clear_has_bufferid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Attack_SC_DelBuffer::clear_bufferid() {
  bufferid_ = 0u;
  clear_has_bufferid();
}
inline ::google::protobuf::uint32 Attack_SC_DelBuffer::bufferid() const {
  return bufferid_;
}
inline void Attack_SC_DelBuffer::set_bufferid(::google::protobuf::uint32 value) {
  set_has_bufferid();
  bufferid_ = value;
}

// optional uint64 Status = 3;
inline bool Attack_SC_DelBuffer::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Attack_SC_DelBuffer::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Attack_SC_DelBuffer::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Attack_SC_DelBuffer::clear_status() {
  status_ = GOOGLE_ULONGLONG(0);
  clear_has_status();
}
inline ::google::protobuf::uint64 Attack_SC_DelBuffer::status() const {
  return status_;
}
inline void Attack_SC_DelBuffer::set_status(::google::protobuf::uint64 value) {
  set_has_status();
  status_ = value;
}

// -------------------------------------------------------------------

// Attack_SC_UpdateBuffer

// required uint32 CharId = 1;
inline bool Attack_SC_UpdateBuffer::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Attack_SC_UpdateBuffer::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Attack_SC_UpdateBuffer::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Attack_SC_UpdateBuffer::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 Attack_SC_UpdateBuffer::charid() const {
  return charid_;
}
inline void Attack_SC_UpdateBuffer::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 BufferId = 2;
inline bool Attack_SC_UpdateBuffer::has_bufferid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Attack_SC_UpdateBuffer::set_has_bufferid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Attack_SC_UpdateBuffer::clear_has_bufferid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Attack_SC_UpdateBuffer::clear_bufferid() {
  bufferid_ = 0u;
  clear_has_bufferid();
}
inline ::google::protobuf::uint32 Attack_SC_UpdateBuffer::bufferid() const {
  return bufferid_;
}
inline void Attack_SC_UpdateBuffer::set_bufferid(::google::protobuf::uint32 value) {
  set_has_bufferid();
  bufferid_ = value;
}

// optional int32 LastTime = 3;
inline bool Attack_SC_UpdateBuffer::has_lasttime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Attack_SC_UpdateBuffer::set_has_lasttime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Attack_SC_UpdateBuffer::clear_has_lasttime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Attack_SC_UpdateBuffer::clear_lasttime() {
  lasttime_ = 0;
  clear_has_lasttime();
}
inline ::google::protobuf::int32 Attack_SC_UpdateBuffer::lasttime() const {
  return lasttime_;
}
inline void Attack_SC_UpdateBuffer::set_lasttime(::google::protobuf::int32 value) {
  set_has_lasttime();
  lasttime_ = value;
}

// -------------------------------------------------------------------

// Attack_SC_AttackDie

// required uint32 CharId = 1;
inline bool Attack_SC_AttackDie::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Attack_SC_AttackDie::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Attack_SC_AttackDie::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Attack_SC_AttackDie::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 Attack_SC_AttackDie::charid() const {
  return charid_;
}
inline void Attack_SC_AttackDie::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// Attack_CS_BlockSkillStart

// required float dir = 1;
inline bool Attack_CS_BlockSkillStart::has_dir() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Attack_CS_BlockSkillStart::set_has_dir() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Attack_CS_BlockSkillStart::clear_has_dir() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Attack_CS_BlockSkillStart::clear_dir() {
  dir_ = 0;
  clear_has_dir();
}
inline float Attack_CS_BlockSkillStart::dir() const {
  return dir_;
}
inline void Attack_CS_BlockSkillStart::set_dir(float value) {
  set_has_dir();
  dir_ = value;
}

// optional .proto.message.Point3D pt = 2;
inline bool Attack_CS_BlockSkillStart::has_pt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Attack_CS_BlockSkillStart::set_has_pt() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Attack_CS_BlockSkillStart::clear_has_pt() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Attack_CS_BlockSkillStart::clear_pt() {
  if (pt_ != NULL) pt_->::proto::message::Point3D::Clear();
  clear_has_pt();
}
inline const ::proto::message::Point3D& Attack_CS_BlockSkillStart::pt() const {
  return pt_ != NULL ? *pt_ : *default_instance_->pt_;
}
inline ::proto::message::Point3D* Attack_CS_BlockSkillStart::mutable_pt() {
  set_has_pt();
  if (pt_ == NULL) pt_ = new ::proto::message::Point3D;
  return pt_;
}
inline ::proto::message::Point3D* Attack_CS_BlockSkillStart::release_pt() {
  clear_has_pt();
  ::proto::message::Point3D* temp = pt_;
  pt_ = NULL;
  return temp;
}
inline void Attack_CS_BlockSkillStart::set_allocated_pt(::proto::message::Point3D* pt) {
  delete pt_;
  pt_ = pt;
  if (pt) {
    set_has_pt();
  } else {
    clear_has_pt();
  }
}

// -------------------------------------------------------------------

// Attack_CS_BlockSkillEnd

// -------------------------------------------------------------------

// Attack_SC_BlockSkillStart

// required uint32 CharId = 1;
inline bool Attack_SC_BlockSkillStart::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Attack_SC_BlockSkillStart::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Attack_SC_BlockSkillStart::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Attack_SC_BlockSkillStart::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 Attack_SC_BlockSkillStart::charid() const {
  return charid_;
}
inline void Attack_SC_BlockSkillStart::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional float dir = 2;
inline bool Attack_SC_BlockSkillStart::has_dir() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Attack_SC_BlockSkillStart::set_has_dir() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Attack_SC_BlockSkillStart::clear_has_dir() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Attack_SC_BlockSkillStart::clear_dir() {
  dir_ = 0;
  clear_has_dir();
}
inline float Attack_SC_BlockSkillStart::dir() const {
  return dir_;
}
inline void Attack_SC_BlockSkillStart::set_dir(float value) {
  set_has_dir();
  dir_ = value;
}

// optional .proto.message.Point3D pt = 3;
inline bool Attack_SC_BlockSkillStart::has_pt() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Attack_SC_BlockSkillStart::set_has_pt() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Attack_SC_BlockSkillStart::clear_has_pt() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Attack_SC_BlockSkillStart::clear_pt() {
  if (pt_ != NULL) pt_->::proto::message::Point3D::Clear();
  clear_has_pt();
}
inline const ::proto::message::Point3D& Attack_SC_BlockSkillStart::pt() const {
  return pt_ != NULL ? *pt_ : *default_instance_->pt_;
}
inline ::proto::message::Point3D* Attack_SC_BlockSkillStart::mutable_pt() {
  set_has_pt();
  if (pt_ == NULL) pt_ = new ::proto::message::Point3D;
  return pt_;
}
inline ::proto::message::Point3D* Attack_SC_BlockSkillStart::release_pt() {
  clear_has_pt();
  ::proto::message::Point3D* temp = pt_;
  pt_ = NULL;
  return temp;
}
inline void Attack_SC_BlockSkillStart::set_allocated_pt(::proto::message::Point3D* pt) {
  delete pt_;
  pt_ = pt;
  if (pt) {
    set_has_pt();
  } else {
    clear_has_pt();
  }
}

// -------------------------------------------------------------------

// Attack_SC_BlockSkillEnd

// required uint32 CharId = 1;
inline bool Attack_SC_BlockSkillEnd::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Attack_SC_BlockSkillEnd::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Attack_SC_BlockSkillEnd::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Attack_SC_BlockSkillEnd::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 Attack_SC_BlockSkillEnd::charid() const {
  return charid_;
}
inline void Attack_SC_BlockSkillEnd::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// Attack_SC_UpdateAttacking

// required bool attacking = 1;
inline bool Attack_SC_UpdateAttacking::has_attacking() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Attack_SC_UpdateAttacking::set_has_attacking() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Attack_SC_UpdateAttacking::clear_has_attacking() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Attack_SC_UpdateAttacking::clear_attacking() {
  attacking_ = false;
  clear_has_attacking();
}
inline bool Attack_SC_UpdateAttacking::attacking() const {
  return attacking_;
}
inline void Attack_SC_UpdateAttacking::set_attacking(bool value) {
  set_has_attacking();
  attacking_ = value;
}

// -------------------------------------------------------------------

// Attack_SC_UpdateTP

// optional int32 charid = 1;
inline bool Attack_SC_UpdateTP::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Attack_SC_UpdateTP::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Attack_SC_UpdateTP::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Attack_SC_UpdateTP::clear_charid() {
  charid_ = 0;
  clear_has_charid();
}
inline ::google::protobuf::int32 Attack_SC_UpdateTP::charid() const {
  return charid_;
}
inline void Attack_SC_UpdateTP::set_charid(::google::protobuf::int32 value) {
  set_has_charid();
  charid_ = value;
}

// optional int32 total_num = 2;
inline bool Attack_SC_UpdateTP::has_total_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Attack_SC_UpdateTP::set_has_total_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Attack_SC_UpdateTP::clear_has_total_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Attack_SC_UpdateTP::clear_total_num() {
  total_num_ = 0;
  clear_has_total_num();
}
inline ::google::protobuf::int32 Attack_SC_UpdateTP::total_num() const {
  return total_num_;
}
inline void Attack_SC_UpdateTP::set_total_num(::google::protobuf::int32 value) {
  set_has_total_num();
  total_num_ = value;
}

// optional int32 cur_num = 3;
inline bool Attack_SC_UpdateTP::has_cur_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Attack_SC_UpdateTP::set_has_cur_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Attack_SC_UpdateTP::clear_has_cur_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Attack_SC_UpdateTP::clear_cur_num() {
  cur_num_ = 0;
  clear_has_cur_num();
}
inline ::google::protobuf::int32 Attack_SC_UpdateTP::cur_num() const {
  return cur_num_;
}
inline void Attack_SC_UpdateTP::set_cur_num(::google::protobuf::int32 value) {
  set_has_cur_num();
  cur_num_ = value;
}

// -------------------------------------------------------------------

// Attack_SC_Strike

// -------------------------------------------------------------------

// Attack_SC_Die

// optional int32 charid = 1;
inline bool Attack_SC_Die::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Attack_SC_Die::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Attack_SC_Die::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Attack_SC_Die::clear_charid() {
  charid_ = 0;
  clear_has_charid();
}
inline ::google::protobuf::int32 Attack_SC_Die::charid() const {
  return charid_;
}
inline void Attack_SC_Die::set_charid(::google::protobuf::int32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// Attack_SC_Shout

// optional int32 nID = 1;
inline bool Attack_SC_Shout::has_nid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Attack_SC_Shout::set_has_nid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Attack_SC_Shout::clear_has_nid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Attack_SC_Shout::clear_nid() {
  nid_ = 0;
  clear_has_nid();
}
inline ::google::protobuf::int32 Attack_SC_Shout::nid() const {
  return nid_;
}
inline void Attack_SC_Shout::set_nid(::google::protobuf::int32 value) {
  set_has_nid();
  nid_ = value;
}

// -------------------------------------------------------------------

// Attack_CS_Relive

// required uint32 type = 1;
inline bool Attack_CS_Relive::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Attack_CS_Relive::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Attack_CS_Relive::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Attack_CS_Relive::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 Attack_CS_Relive::type() const {
  return type_;
}
inline void Attack_CS_Relive::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// Attack_SC_Relive

// optional int32 result = 1;
inline bool Attack_SC_Relive::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Attack_SC_Relive::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Attack_SC_Relive::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Attack_SC_Relive::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 Attack_SC_Relive::result() const {
  return result_;
}
inline void Attack_SC_Relive::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional int32 relive_times = 2;
inline bool Attack_SC_Relive::has_relive_times() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Attack_SC_Relive::set_has_relive_times() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Attack_SC_Relive::clear_has_relive_times() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Attack_SC_Relive::clear_relive_times() {
  relive_times_ = 0;
  clear_has_relive_times();
}
inline ::google::protobuf::int32 Attack_SC_Relive::relive_times() const {
  return relive_times_;
}
inline void Attack_SC_Relive::set_relive_times(::google::protobuf::int32 value) {
  set_has_relive_times();
  relive_times_ = value;
}

// -------------------------------------------------------------------

// Attack_SC_ClearSkillCD

// required uint32 SkillId = 1;
inline bool Attack_SC_ClearSkillCD::has_skillid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Attack_SC_ClearSkillCD::set_has_skillid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Attack_SC_ClearSkillCD::clear_has_skillid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Attack_SC_ClearSkillCD::clear_skillid() {
  skillid_ = 0u;
  clear_has_skillid();
}
inline ::google::protobuf::uint32 Attack_SC_ClearSkillCD::skillid() const {
  return skillid_;
}
inline void Attack_SC_ClearSkillCD::set_skillid(::google::protobuf::uint32 value) {
  set_has_skillid();
  skillid_ = value;
}

// -------------------------------------------------------------------

// Attack_SC_UpdateAttackStatus

// required uint64 Status = 1;
inline bool Attack_SC_UpdateAttackStatus::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Attack_SC_UpdateAttackStatus::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Attack_SC_UpdateAttackStatus::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Attack_SC_UpdateAttackStatus::clear_status() {
  status_ = GOOGLE_ULONGLONG(0);
  clear_has_status();
}
inline ::google::protobuf::uint64 Attack_SC_UpdateAttackStatus::status() const {
  return status_;
}
inline void Attack_SC_UpdateAttackStatus::set_status(::google::protobuf::uint64 value) {
  set_has_status();
  status_ = value;
}

// optional uint32 ID = 2;
inline bool Attack_SC_UpdateAttackStatus::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Attack_SC_UpdateAttackStatus::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Attack_SC_UpdateAttackStatus::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Attack_SC_UpdateAttackStatus::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 Attack_SC_UpdateAttackStatus::id() const {
  return id_;
}
inline void Attack_SC_UpdateAttackStatus::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// Attack_SC_UpdateMonsterAttackStatus

// required uint32 charid = 1;
inline bool Attack_SC_UpdateMonsterAttackStatus::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Attack_SC_UpdateMonsterAttackStatus::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Attack_SC_UpdateMonsterAttackStatus::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Attack_SC_UpdateMonsterAttackStatus::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 Attack_SC_UpdateMonsterAttackStatus::charid() const {
  return charid_;
}
inline void Attack_SC_UpdateMonsterAttackStatus::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional bool status = 2;
inline bool Attack_SC_UpdateMonsterAttackStatus::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Attack_SC_UpdateMonsterAttackStatus::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Attack_SC_UpdateMonsterAttackStatus::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Attack_SC_UpdateMonsterAttackStatus::clear_status() {
  status_ = false;
  clear_has_status();
}
inline bool Attack_SC_UpdateMonsterAttackStatus::status() const {
  return status_;
}
inline void Attack_SC_UpdateMonsterAttackStatus::set_status(bool value) {
  set_has_status();
  status_ = value;
}

// -------------------------------------------------------------------

// Attack_SC_Block

// required uint32 charid = 1;
inline bool Attack_SC_Block::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Attack_SC_Block::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Attack_SC_Block::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Attack_SC_Block::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 Attack_SC_Block::charid() const {
  return charid_;
}
inline void Attack_SC_Block::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// Attack_SC_UpdateFlagCamp

// optional int32 charid = 1;
inline bool Attack_SC_UpdateFlagCamp::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Attack_SC_UpdateFlagCamp::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Attack_SC_UpdateFlagCamp::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Attack_SC_UpdateFlagCamp::clear_charid() {
  charid_ = 0;
  clear_has_charid();
}
inline ::google::protobuf::int32 Attack_SC_UpdateFlagCamp::charid() const {
  return charid_;
}
inline void Attack_SC_UpdateFlagCamp::set_charid(::google::protobuf::int32 value) {
  set_has_charid();
  charid_ = value;
}

// optional int32 flag_camp = 2;
inline bool Attack_SC_UpdateFlagCamp::has_flag_camp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Attack_SC_UpdateFlagCamp::set_has_flag_camp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Attack_SC_UpdateFlagCamp::clear_has_flag_camp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Attack_SC_UpdateFlagCamp::clear_flag_camp() {
  flag_camp_ = 0;
  clear_has_flag_camp();
}
inline ::google::protobuf::int32 Attack_SC_UpdateFlagCamp::flag_camp() const {
  return flag_camp_;
}
inline void Attack_SC_UpdateFlagCamp::set_flag_camp(::google::protobuf::int32 value) {
  set_has_flag_camp();
  flag_camp_ = value;
}

// -------------------------------------------------------------------

// Attack_SC_RelivePos

// required uint32 PlyId = 1;
inline bool Attack_SC_RelivePos::has_plyid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Attack_SC_RelivePos::set_has_plyid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Attack_SC_RelivePos::clear_has_plyid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Attack_SC_RelivePos::clear_plyid() {
  plyid_ = 0u;
  clear_has_plyid();
}
inline ::google::protobuf::uint32 Attack_SC_RelivePos::plyid() const {
  return plyid_;
}
inline void Attack_SC_RelivePos::set_plyid(::google::protobuf::uint32 value) {
  set_has_plyid();
  plyid_ = value;
}

// optional int32 CurHP = 2;
inline bool Attack_SC_RelivePos::has_curhp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Attack_SC_RelivePos::set_has_curhp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Attack_SC_RelivePos::clear_has_curhp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Attack_SC_RelivePos::clear_curhp() {
  curhp_ = 0;
  clear_has_curhp();
}
inline ::google::protobuf::int32 Attack_SC_RelivePos::curhp() const {
  return curhp_;
}
inline void Attack_SC_RelivePos::set_curhp(::google::protobuf::int32 value) {
  set_has_curhp();
  curhp_ = value;
}

// optional uint32 MaxHP = 3;
inline bool Attack_SC_RelivePos::has_maxhp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Attack_SC_RelivePos::set_has_maxhp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Attack_SC_RelivePos::clear_has_maxhp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Attack_SC_RelivePos::clear_maxhp() {
  maxhp_ = 0u;
  clear_has_maxhp();
}
inline ::google::protobuf::uint32 Attack_SC_RelivePos::maxhp() const {
  return maxhp_;
}
inline void Attack_SC_RelivePos::set_maxhp(::google::protobuf::uint32 value) {
  set_has_maxhp();
  maxhp_ = value;
}

// optional .proto.message.Point3D Pt = 4;
inline bool Attack_SC_RelivePos::has_pt() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Attack_SC_RelivePos::set_has_pt() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Attack_SC_RelivePos::clear_has_pt() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Attack_SC_RelivePos::clear_pt() {
  if (pt_ != NULL) pt_->::proto::message::Point3D::Clear();
  clear_has_pt();
}
inline const ::proto::message::Point3D& Attack_SC_RelivePos::pt() const {
  return pt_ != NULL ? *pt_ : *default_instance_->pt_;
}
inline ::proto::message::Point3D* Attack_SC_RelivePos::mutable_pt() {
  set_has_pt();
  if (pt_ == NULL) pt_ = new ::proto::message::Point3D;
  return pt_;
}
inline ::proto::message::Point3D* Attack_SC_RelivePos::release_pt() {
  clear_has_pt();
  ::proto::message::Point3D* temp = pt_;
  pt_ = NULL;
  return temp;
}
inline void Attack_SC_RelivePos::set_allocated_pt(::proto::message::Point3D* pt) {
  delete pt_;
  pt_ = pt;
  if (pt) {
    set_has_pt();
  } else {
    clear_has_pt();
  }
}

// optional float Dir = 5;
inline bool Attack_SC_RelivePos::has_dir() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Attack_SC_RelivePos::set_has_dir() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Attack_SC_RelivePos::clear_has_dir() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Attack_SC_RelivePos::clear_dir() {
  dir_ = 0;
  clear_has_dir();
}
inline float Attack_SC_RelivePos::dir() const {
  return dir_;
}
inline void Attack_SC_RelivePos::set_dir(float value) {
  set_has_dir();
  dir_ = value;
}

// -------------------------------------------------------------------

// Attack_SC_UpdateGroupCD

// optional int32 skillid = 1;
inline bool Attack_SC_UpdateGroupCD::has_skillid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Attack_SC_UpdateGroupCD::set_has_skillid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Attack_SC_UpdateGroupCD::clear_has_skillid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Attack_SC_UpdateGroupCD::clear_skillid() {
  skillid_ = 0;
  clear_has_skillid();
}
inline ::google::protobuf::int32 Attack_SC_UpdateGroupCD::skillid() const {
  return skillid_;
}
inline void Attack_SC_UpdateGroupCD::set_skillid(::google::protobuf::int32 value) {
  set_has_skillid();
  skillid_ = value;
}

// optional int32 groupid = 2;
inline bool Attack_SC_UpdateGroupCD::has_groupid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Attack_SC_UpdateGroupCD::set_has_groupid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Attack_SC_UpdateGroupCD::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Attack_SC_UpdateGroupCD::clear_groupid() {
  groupid_ = 0;
  clear_has_groupid();
}
inline ::google::protobuf::int32 Attack_SC_UpdateGroupCD::groupid() const {
  return groupid_;
}
inline void Attack_SC_UpdateGroupCD::set_groupid(::google::protobuf::int32 value) {
  set_has_groupid();
  groupid_ = value;
}

// optional int64 endtick = 3;
inline bool Attack_SC_UpdateGroupCD::has_endtick() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Attack_SC_UpdateGroupCD::set_has_endtick() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Attack_SC_UpdateGroupCD::clear_has_endtick() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Attack_SC_UpdateGroupCD::clear_endtick() {
  endtick_ = GOOGLE_LONGLONG(0);
  clear_has_endtick();
}
inline ::google::protobuf::int64 Attack_SC_UpdateGroupCD::endtick() const {
  return endtick_;
}
inline void Attack_SC_UpdateGroupCD::set_endtick(::google::protobuf::int64 value) {
  set_has_endtick();
  endtick_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace proto

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_attack_2eproto__INCLUDED
