// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mysql_db.proto

#include "mysql_db.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_mysql_5fdb_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_mysql_5fdb_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_MixMailData;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_mysql_5fdb_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_message_db_base;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_mysql_5fdb_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_mysql_player;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_mysql_5fdb_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_query_mail_cond;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_mysql_5fdb_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_query_player_cond;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_mysql_5fdb_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_table_mail;
}  // namespace protobuf_mysql_5fdb_2eproto
namespace proto {
namespace message {
class message_db_baseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<message_db_base>
      _instance;
} _message_db_base_default_instance_;
class mysql_playerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mysql_player>
      _instance;
} _mysql_player_default_instance_;
class query_player_condDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<query_player_cond>
      _instance;
} _query_player_cond_default_instance_;
class update_playerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<update_player>
      _instance;
} _update_player_default_instance_;
class query_playerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<query_player>
      _instance;
} _query_player_default_instance_;
class MixMailDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MixMailData>
      _instance;
} _MixMailData_default_instance_;
class table_mailDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<table_mail>
      _instance;
} _table_mail_default_instance_;
class query_mail_condDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<query_mail_cond>
      _instance;
} _query_mail_cond_default_instance_;
class query_mailDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<query_mail>
      _instance;
} _query_mail_default_instance_;
class update_mailDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<update_mail>
      _instance;
} _update_mail_default_instance_;
}  // namespace message
}  // namespace proto
namespace protobuf_mysql_5fdb_2eproto {
static void InitDefaultsmessage_db_base() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::message::_message_db_base_default_instance_;
    new (ptr) ::proto::message::message_db_base();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::message::message_db_base::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_message_db_base =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmessage_db_base}, {}};

static void InitDefaultsmysql_player() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::message::_mysql_player_default_instance_;
    new (ptr) ::proto::message::mysql_player();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::message::mysql_player::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_mysql_player =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmysql_player}, {}};

static void InitDefaultsquery_player_cond() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::message::_query_player_cond_default_instance_;
    new (ptr) ::proto::message::query_player_cond();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::message::query_player_cond::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_query_player_cond =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsquery_player_cond}, {}};

static void InitDefaultsupdate_player() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::message::_update_player_default_instance_;
    new (ptr) ::proto::message::update_player();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::message::update_player::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_update_player =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsupdate_player}, {
      &protobuf_mysql_5fdb_2eproto::scc_info_message_db_base.base,
      &protobuf_mysql_5fdb_2eproto::scc_info_mysql_player.base,}};

static void InitDefaultsquery_player() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::message::_query_player_default_instance_;
    new (ptr) ::proto::message::query_player();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::message::query_player::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_query_player =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsquery_player}, {
      &protobuf_mysql_5fdb_2eproto::scc_info_message_db_base.base,
      &protobuf_mysql_5fdb_2eproto::scc_info_mysql_player.base,
      &protobuf_mysql_5fdb_2eproto::scc_info_query_player_cond.base,}};

static void InitDefaultsMixMailData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::message::_MixMailData_default_instance_;
    new (ptr) ::proto::message::MixMailData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::message::MixMailData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MixMailData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMixMailData}, {}};

static void InitDefaultstable_mail() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::message::_table_mail_default_instance_;
    new (ptr) ::proto::message::table_mail();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::message::table_mail::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_table_mail =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultstable_mail}, {
      &protobuf_mysql_5fdb_2eproto::scc_info_MixMailData.base,}};

static void InitDefaultsquery_mail_cond() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::message::_query_mail_cond_default_instance_;
    new (ptr) ::proto::message::query_mail_cond();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::message::query_mail_cond::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_query_mail_cond =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsquery_mail_cond}, {}};

static void InitDefaultsquery_mail() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::message::_query_mail_default_instance_;
    new (ptr) ::proto::message::query_mail();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::message::query_mail::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_query_mail =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsquery_mail}, {
      &protobuf_mysql_5fdb_2eproto::scc_info_message_db_base.base,
      &protobuf_mysql_5fdb_2eproto::scc_info_table_mail.base,
      &protobuf_mysql_5fdb_2eproto::scc_info_query_mail_cond.base,}};

static void InitDefaultsupdate_mail() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::message::_update_mail_default_instance_;
    new (ptr) ::proto::message::update_mail();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::message::update_mail::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_update_mail =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsupdate_mail}, {
      &protobuf_mysql_5fdb_2eproto::scc_info_message_db_base.base,
      &protobuf_mysql_5fdb_2eproto::scc_info_table_mail.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_message_db_base.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mysql_player.base);
  ::google::protobuf::internal::InitSCC(&scc_info_query_player_cond.base);
  ::google::protobuf::internal::InitSCC(&scc_info_update_player.base);
  ::google::protobuf::internal::InitSCC(&scc_info_query_player.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MixMailData.base);
  ::google::protobuf::internal::InitSCC(&scc_info_table_mail.base);
  ::google::protobuf::internal::InitSCC(&scc_info_query_mail_cond.base);
  ::google::protobuf::internal::InitSCC(&scc_info_query_mail.base);
  ::google::protobuf::internal::InitSCC(&scc_info_update_mail.base);
}

::google::protobuf::Metadata file_level_metadata[10];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::message::message_db_base, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::message::message_db_base, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::message::message_db_base, table_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::message::message_db_base, offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::message::message_db_base, rows_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::message::message_db_base, order_key_),
  0,
  2,
  3,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::message::mysql_player, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::message::mysql_player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::message::mysql_player, charid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::message::mysql_player, account_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::message::mysql_player, charname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::message::mysql_player, serverid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::message::mysql_player, career_),
  2,
  0,
  1,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::message::query_player_cond, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::message::query_player_cond, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::message::query_player_cond, serverid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::message::update_player, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::message::update_player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::message::update_player, db_base_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::message::update_player, db_fields_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::message::query_player, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::message::query_player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::message::query_player, db_base_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::message::query_player, db_fields_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::message::query_player, db_cond_),
  0,
  ~0u,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::message::MixMailData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::message::MixMailData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::message::MixMailData, id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::message::table_mail, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::message::table_mail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::message::table_mail, mailid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::message::table_mail, ownerid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::message::table_mail, mixinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::message::table_mail, mail_type_),
  1,
  2,
  0,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::message::query_mail_cond, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::message::query_mail_cond, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::message::query_mail_cond, mailid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::message::query_mail, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::message::query_mail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::message::query_mail, db_base_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::message::query_mail, db_fields_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::message::query_mail, db_cond_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::message::update_mail, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::message::update_mail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::message::update_mail, db_base_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::message::update_mail, db_fields_),
  0,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::proto::message::message_db_base)},
  { 13, 23, sizeof(::proto::message::mysql_player)},
  { 28, 34, sizeof(::proto::message::query_player_cond)},
  { 35, 42, sizeof(::proto::message::update_player)},
  { 44, 52, sizeof(::proto::message::query_player)},
  { 55, 61, sizeof(::proto::message::MixMailData)},
  { 62, 71, sizeof(::proto::message::table_mail)},
  { 75, 81, sizeof(::proto::message::query_mail_cond)},
  { 82, 90, sizeof(::proto::message::query_mail)},
  { 93, 100, sizeof(::proto::message::update_mail)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::message::_message_db_base_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::message::_mysql_player_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::message::_query_player_cond_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::message::_update_player_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::message::_query_player_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::message::_MixMailData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::message::_table_mail_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::message::_query_mail_cond_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::message::_query_mail_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::message::_update_mail_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "mysql_db.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 10);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\016mysql_db.proto\022\rproto.message\"V\n\017messa"
      "ge_db_base\022\022\n\ntable_name\030\001 \001(\t\022\016\n\006offset"
      "\030\002 \001(\r\022\014\n\004rows\030\003 \001(\r\022\021\n\torder_key\030\004 \001(\t\""
      "c\n\014mysql_player\022\016\n\006charid\030\001 \001(\004\022\017\n\007accou"
      "nt\030\002 \001(\t\022\020\n\010charname\030\003 \001(\t\022\020\n\010serverid\030\004"
      " \001(\r\022\016\n\006career\030\005 \001(\r\"%\n\021query_player_con"
      "d\022\020\n\010serverid\030\001 \001(\r\"p\n\rupdate_player\022/\n\007"
      "db_base\030\001 \001(\0132\036.proto.message.message_db"
      "_base\022.\n\tdb_fields\030\002 \001(\0132\033.proto.message"
      ".mysql_player\"\242\001\n\014query_player\022/\n\007db_bas"
      "e\030\001 \001(\0132\036.proto.message.message_db_base\022"
      ".\n\tdb_fields\030\002 \003(\0132\033.proto.message.mysql"
      "_player\0221\n\007db_cond\030\003 \001(\0132 .proto.message"
      ".query_player_cond\"\031\n\013MixMailData\022\n\n\002id\030"
      "\001 \001(\r\"m\n\ntable_mail\022\016\n\006mailid\030\001 \001(\004\022\017\n\007o"
      "wnerid\030\002 \001(\004\022+\n\007mixinfo\030\003 \001(\0132\032.proto.me"
      "ssage.MixMailData\022\021\n\tmail_type\030\004 \001(\r\"!\n\017"
      "query_mail_cond\022\016\n\006mailid\030\001 \001(\004\"\234\001\n\nquer"
      "y_mail\022/\n\007db_base\030\001 \001(\0132\036.proto.message."
      "message_db_base\022,\n\tdb_fields\030\002 \001(\0132\031.pro"
      "to.message.table_mail\022/\n\007db_cond\030\003 \001(\0132\036"
      ".proto.message.query_mail_cond\"l\n\013update"
      "_mail\022/\n\007db_base\030\001 \001(\0132\036.proto.message.m"
      "essage_db_base\022,\n\tdb_fields\030\002 \001(\0132\031.prot"
      "o.message.table_mail"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 980);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mysql_db.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_mysql_5fdb_2eproto
namespace proto {
namespace message {

// ===================================================================

void message_db_base::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int message_db_base::kTableNameFieldNumber;
const int message_db_base::kOffsetFieldNumber;
const int message_db_base::kRowsFieldNumber;
const int message_db_base::kOrderKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

message_db_base::message_db_base()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mysql_5fdb_2eproto::scc_info_message_db_base.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.message.message_db_base)
}
message_db_base::message_db_base(const message_db_base& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  table_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_table_name()) {
    table_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_name_);
  }
  order_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_order_key()) {
    order_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_key_);
  }
  ::memcpy(&offset_, &from.offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&rows_) -
    reinterpret_cast<char*>(&offset_)) + sizeof(rows_));
  // @@protoc_insertion_point(copy_constructor:proto.message.message_db_base)
}

void message_db_base::SharedCtor() {
  table_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rows_) -
      reinterpret_cast<char*>(&offset_)) + sizeof(rows_));
}

message_db_base::~message_db_base() {
  // @@protoc_insertion_point(destructor:proto.message.message_db_base)
  SharedDtor();
}

void message_db_base::SharedDtor() {
  table_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void message_db_base::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* message_db_base::descriptor() {
  ::protobuf_mysql_5fdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mysql_5fdb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const message_db_base& message_db_base::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mysql_5fdb_2eproto::scc_info_message_db_base.base);
  return *internal_default_instance();
}


void message_db_base::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.message.message_db_base)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      table_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      order_key_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 12u) {
    ::memset(&offset_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rows_) -
        reinterpret_cast<char*>(&offset_)) + sizeof(rows_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool message_db_base::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.message.message_db_base)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string table_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->table_name().data(), static_cast<int>(this->table_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.message.message_db_base.table_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 offset = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_offset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rows = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_rows();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rows_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string order_key = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->order_key().data(), static_cast<int>(this->order_key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.message.message_db_base.order_key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.message.message_db_base)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.message.message_db_base)
  return false;
#undef DO_
}

void message_db_base::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.message.message_db_base)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string table_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->table_name().data(), static_cast<int>(this->table_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.message.message_db_base.table_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->table_name(), output);
  }

  // optional uint32 offset = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->offset(), output);
  }

  // optional uint32 rows = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rows(), output);
  }

  // optional string order_key = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_key().data(), static_cast<int>(this->order_key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.message.message_db_base.order_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->order_key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.message.message_db_base)
}

::google::protobuf::uint8* message_db_base::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.message.message_db_base)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string table_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->table_name().data(), static_cast<int>(this->table_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.message.message_db_base.table_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->table_name(), target);
  }

  // optional uint32 offset = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->offset(), target);
  }

  // optional uint32 rows = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->rows(), target);
  }

  // optional string order_key = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_key().data(), static_cast<int>(this->order_key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.message.message_db_base.order_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->order_key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.message.message_db_base)
  return target;
}

size_t message_db_base::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.message.message_db_base)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string table_name = 1;
    if (has_table_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->table_name());
    }

    // optional string order_key = 4;
    if (has_order_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->order_key());
    }

    // optional uint32 offset = 2;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->offset());
    }

    // optional uint32 rows = 3;
    if (has_rows()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rows());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void message_db_base::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.message.message_db_base)
  GOOGLE_DCHECK_NE(&from, this);
  const message_db_base* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const message_db_base>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.message.message_db_base)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.message.message_db_base)
    MergeFrom(*source);
  }
}

void message_db_base::MergeFrom(const message_db_base& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.message.message_db_base)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_table_name();
      table_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_order_key();
      order_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_key_);
    }
    if (cached_has_bits & 0x00000004u) {
      offset_ = from.offset_;
    }
    if (cached_has_bits & 0x00000008u) {
      rows_ = from.rows_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void message_db_base::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.message.message_db_base)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void message_db_base::CopyFrom(const message_db_base& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.message.message_db_base)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool message_db_base::IsInitialized() const {
  return true;
}

void message_db_base::Swap(message_db_base* other) {
  if (other == this) return;
  InternalSwap(other);
}
void message_db_base::InternalSwap(message_db_base* other) {
  using std::swap;
  table_name_.Swap(&other->table_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  order_key_.Swap(&other->order_key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(offset_, other->offset_);
  swap(rows_, other->rows_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata message_db_base::GetMetadata() const {
  protobuf_mysql_5fdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mysql_5fdb_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void mysql_player::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mysql_player::kCharidFieldNumber;
const int mysql_player::kAccountFieldNumber;
const int mysql_player::kCharnameFieldNumber;
const int mysql_player::kServeridFieldNumber;
const int mysql_player::kCareerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mysql_player::mysql_player()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mysql_5fdb_2eproto::scc_info_mysql_player.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.message.mysql_player)
}
mysql_player::mysql_player(const mysql_player& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_account()) {
    account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  charname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_charname()) {
    charname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.charname_);
  }
  ::memcpy(&charid_, &from.charid_,
    static_cast<size_t>(reinterpret_cast<char*>(&career_) -
    reinterpret_cast<char*>(&charid_)) + sizeof(career_));
  // @@protoc_insertion_point(copy_constructor:proto.message.mysql_player)
}

void mysql_player::SharedCtor() {
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  charname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&charid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&career_) -
      reinterpret_cast<char*>(&charid_)) + sizeof(career_));
}

mysql_player::~mysql_player() {
  // @@protoc_insertion_point(destructor:proto.message.mysql_player)
  SharedDtor();
}

void mysql_player::SharedDtor() {
  account_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  charname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void mysql_player::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* mysql_player::descriptor() {
  ::protobuf_mysql_5fdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mysql_5fdb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const mysql_player& mysql_player::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mysql_5fdb_2eproto::scc_info_mysql_player.base);
  return *internal_default_instance();
}


void mysql_player::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.message.mysql_player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      account_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      charname_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 28u) {
    ::memset(&charid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&career_) -
        reinterpret_cast<char*>(&charid_)) + sizeof(career_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool mysql_player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.message.mysql_player)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 charid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_charid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string account = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account().data(), static_cast<int>(this->account().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.message.mysql_player.account");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string charname = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_charname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->charname().data(), static_cast<int>(this->charname().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.message.mysql_player.charname");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 serverid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_serverid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 career = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_career();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &career_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.message.mysql_player)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.message.mysql_player)
  return false;
#undef DO_
}

void mysql_player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.message.mysql_player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 charid = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  // optional string account = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), static_cast<int>(this->account().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.message.mysql_player.account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->account(), output);
  }

  // optional string charname = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->charname().data(), static_cast<int>(this->charname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.message.mysql_player.charname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->charname(), output);
  }

  // optional uint32 serverid = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->serverid(), output);
  }

  // optional uint32 career = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->career(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.message.mysql_player)
}

::google::protobuf::uint8* mysql_player::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.message.mysql_player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 charid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  // optional string account = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), static_cast<int>(this->account().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.message.mysql_player.account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->account(), target);
  }

  // optional string charname = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->charname().data(), static_cast<int>(this->charname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.message.mysql_player.charname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->charname(), target);
  }

  // optional uint32 serverid = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->serverid(), target);
  }

  // optional uint32 career = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->career(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.message.mysql_player)
  return target;
}

size_t mysql_player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.message.mysql_player)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional string account = 2;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional string charname = 3;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->charname());
    }

    // optional uint64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint32 serverid = 4;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverid());
    }

    // optional uint32 career = 5;
    if (has_career()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->career());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mysql_player::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.message.mysql_player)
  GOOGLE_DCHECK_NE(&from, this);
  const mysql_player* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const mysql_player>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.message.mysql_player)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.message.mysql_player)
    MergeFrom(*source);
  }
}

void mysql_player::MergeFrom(const mysql_player& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.message.mysql_player)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_account();
      account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_charname();
      charname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.charname_);
    }
    if (cached_has_bits & 0x00000004u) {
      charid_ = from.charid_;
    }
    if (cached_has_bits & 0x00000008u) {
      serverid_ = from.serverid_;
    }
    if (cached_has_bits & 0x00000010u) {
      career_ = from.career_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void mysql_player::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.message.mysql_player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mysql_player::CopyFrom(const mysql_player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.message.mysql_player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mysql_player::IsInitialized() const {
  return true;
}

void mysql_player::Swap(mysql_player* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mysql_player::InternalSwap(mysql_player* other) {
  using std::swap;
  account_.Swap(&other->account_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  charname_.Swap(&other->charname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(charid_, other->charid_);
  swap(serverid_, other->serverid_);
  swap(career_, other->career_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata mysql_player::GetMetadata() const {
  protobuf_mysql_5fdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mysql_5fdb_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void query_player_cond::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int query_player_cond::kServeridFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

query_player_cond::query_player_cond()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mysql_5fdb_2eproto::scc_info_query_player_cond.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.message.query_player_cond)
}
query_player_cond::query_player_cond(const query_player_cond& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  serverid_ = from.serverid_;
  // @@protoc_insertion_point(copy_constructor:proto.message.query_player_cond)
}

void query_player_cond::SharedCtor() {
  serverid_ = 0u;
}

query_player_cond::~query_player_cond() {
  // @@protoc_insertion_point(destructor:proto.message.query_player_cond)
  SharedDtor();
}

void query_player_cond::SharedDtor() {
}

void query_player_cond::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* query_player_cond::descriptor() {
  ::protobuf_mysql_5fdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mysql_5fdb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const query_player_cond& query_player_cond::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mysql_5fdb_2eproto::scc_info_query_player_cond.base);
  return *internal_default_instance();
}


void query_player_cond::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.message.query_player_cond)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  serverid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool query_player_cond::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.message.query_player_cond)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 serverid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_serverid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.message.query_player_cond)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.message.query_player_cond)
  return false;
#undef DO_
}

void query_player_cond::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.message.query_player_cond)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 serverid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->serverid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.message.query_player_cond)
}

::google::protobuf::uint8* query_player_cond::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.message.query_player_cond)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 serverid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->serverid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.message.query_player_cond)
  return target;
}

size_t query_player_cond::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.message.query_player_cond)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional uint32 serverid = 1;
  if (has_serverid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->serverid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void query_player_cond::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.message.query_player_cond)
  GOOGLE_DCHECK_NE(&from, this);
  const query_player_cond* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const query_player_cond>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.message.query_player_cond)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.message.query_player_cond)
    MergeFrom(*source);
  }
}

void query_player_cond::MergeFrom(const query_player_cond& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.message.query_player_cond)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_serverid()) {
    set_serverid(from.serverid());
  }
}

void query_player_cond::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.message.query_player_cond)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void query_player_cond::CopyFrom(const query_player_cond& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.message.query_player_cond)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool query_player_cond::IsInitialized() const {
  return true;
}

void query_player_cond::Swap(query_player_cond* other) {
  if (other == this) return;
  InternalSwap(other);
}
void query_player_cond::InternalSwap(query_player_cond* other) {
  using std::swap;
  swap(serverid_, other->serverid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata query_player_cond::GetMetadata() const {
  protobuf_mysql_5fdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mysql_5fdb_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void update_player::InitAsDefaultInstance() {
  ::proto::message::_update_player_default_instance_._instance.get_mutable()->db_base_ = const_cast< ::proto::message::message_db_base*>(
      ::proto::message::message_db_base::internal_default_instance());
  ::proto::message::_update_player_default_instance_._instance.get_mutable()->db_fields_ = const_cast< ::proto::message::mysql_player*>(
      ::proto::message::mysql_player::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int update_player::kDbBaseFieldNumber;
const int update_player::kDbFieldsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

update_player::update_player()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mysql_5fdb_2eproto::scc_info_update_player.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.message.update_player)
}
update_player::update_player(const update_player& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_db_base()) {
    db_base_ = new ::proto::message::message_db_base(*from.db_base_);
  } else {
    db_base_ = NULL;
  }
  if (from.has_db_fields()) {
    db_fields_ = new ::proto::message::mysql_player(*from.db_fields_);
  } else {
    db_fields_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:proto.message.update_player)
}

void update_player::SharedCtor() {
  ::memset(&db_base_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&db_fields_) -
      reinterpret_cast<char*>(&db_base_)) + sizeof(db_fields_));
}

update_player::~update_player() {
  // @@protoc_insertion_point(destructor:proto.message.update_player)
  SharedDtor();
}

void update_player::SharedDtor() {
  if (this != internal_default_instance()) delete db_base_;
  if (this != internal_default_instance()) delete db_fields_;
}

void update_player::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* update_player::descriptor() {
  ::protobuf_mysql_5fdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mysql_5fdb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const update_player& update_player::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mysql_5fdb_2eproto::scc_info_update_player.base);
  return *internal_default_instance();
}


void update_player::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.message.update_player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(db_base_ != NULL);
      db_base_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(db_fields_ != NULL);
      db_fields_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool update_player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.message.update_player)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.message.message_db_base db_base = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_db_base()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.message.mysql_player db_fields = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_db_fields()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.message.update_player)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.message.update_player)
  return false;
#undef DO_
}

void update_player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.message.update_player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.message.message_db_base db_base = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_db_base(), output);
  }

  // optional .proto.message.mysql_player db_fields = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_db_fields(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.message.update_player)
}

::google::protobuf::uint8* update_player::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.message.update_player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.message.message_db_base db_base = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_db_base(), deterministic, target);
  }

  // optional .proto.message.mysql_player db_fields = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_db_fields(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.message.update_player)
  return target;
}

size_t update_player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.message.update_player)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .proto.message.message_db_base db_base = 1;
    if (has_db_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *db_base_);
    }

    // optional .proto.message.mysql_player db_fields = 2;
    if (has_db_fields()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *db_fields_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void update_player::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.message.update_player)
  GOOGLE_DCHECK_NE(&from, this);
  const update_player* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const update_player>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.message.update_player)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.message.update_player)
    MergeFrom(*source);
  }
}

void update_player::MergeFrom(const update_player& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.message.update_player)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_db_base()->::proto::message::message_db_base::MergeFrom(from.db_base());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_db_fields()->::proto::message::mysql_player::MergeFrom(from.db_fields());
    }
  }
}

void update_player::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.message.update_player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void update_player::CopyFrom(const update_player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.message.update_player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool update_player::IsInitialized() const {
  return true;
}

void update_player::Swap(update_player* other) {
  if (other == this) return;
  InternalSwap(other);
}
void update_player::InternalSwap(update_player* other) {
  using std::swap;
  swap(db_base_, other->db_base_);
  swap(db_fields_, other->db_fields_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata update_player::GetMetadata() const {
  protobuf_mysql_5fdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mysql_5fdb_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void query_player::InitAsDefaultInstance() {
  ::proto::message::_query_player_default_instance_._instance.get_mutable()->db_base_ = const_cast< ::proto::message::message_db_base*>(
      ::proto::message::message_db_base::internal_default_instance());
  ::proto::message::_query_player_default_instance_._instance.get_mutable()->db_cond_ = const_cast< ::proto::message::query_player_cond*>(
      ::proto::message::query_player_cond::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int query_player::kDbBaseFieldNumber;
const int query_player::kDbFieldsFieldNumber;
const int query_player::kDbCondFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

query_player::query_player()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mysql_5fdb_2eproto::scc_info_query_player.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.message.query_player)
}
query_player::query_player(const query_player& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      db_fields_(from.db_fields_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_db_base()) {
    db_base_ = new ::proto::message::message_db_base(*from.db_base_);
  } else {
    db_base_ = NULL;
  }
  if (from.has_db_cond()) {
    db_cond_ = new ::proto::message::query_player_cond(*from.db_cond_);
  } else {
    db_cond_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:proto.message.query_player)
}

void query_player::SharedCtor() {
  ::memset(&db_base_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&db_cond_) -
      reinterpret_cast<char*>(&db_base_)) + sizeof(db_cond_));
}

query_player::~query_player() {
  // @@protoc_insertion_point(destructor:proto.message.query_player)
  SharedDtor();
}

void query_player::SharedDtor() {
  if (this != internal_default_instance()) delete db_base_;
  if (this != internal_default_instance()) delete db_cond_;
}

void query_player::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* query_player::descriptor() {
  ::protobuf_mysql_5fdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mysql_5fdb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const query_player& query_player::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mysql_5fdb_2eproto::scc_info_query_player.base);
  return *internal_default_instance();
}


void query_player::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.message.query_player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  db_fields_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(db_base_ != NULL);
      db_base_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(db_cond_ != NULL);
      db_cond_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool query_player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.message.query_player)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.message.message_db_base db_base = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_db_base()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.message.mysql_player db_fields = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_db_fields()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.message.query_player_cond db_cond = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_db_cond()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.message.query_player)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.message.query_player)
  return false;
#undef DO_
}

void query_player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.message.query_player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.message.message_db_base db_base = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_db_base(), output);
  }

  // repeated .proto.message.mysql_player db_fields = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->db_fields_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->db_fields(static_cast<int>(i)),
      output);
  }

  // optional .proto.message.query_player_cond db_cond = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_db_cond(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.message.query_player)
}

::google::protobuf::uint8* query_player::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.message.query_player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.message.message_db_base db_base = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_db_base(), deterministic, target);
  }

  // repeated .proto.message.mysql_player db_fields = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->db_fields_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->db_fields(static_cast<int>(i)), deterministic, target);
  }

  // optional .proto.message.query_player_cond db_cond = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_db_cond(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.message.query_player)
  return target;
}

size_t query_player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.message.query_player)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .proto.message.mysql_player db_fields = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->db_fields_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->db_fields(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional .proto.message.message_db_base db_base = 1;
    if (has_db_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *db_base_);
    }

    // optional .proto.message.query_player_cond db_cond = 3;
    if (has_db_cond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *db_cond_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void query_player::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.message.query_player)
  GOOGLE_DCHECK_NE(&from, this);
  const query_player* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const query_player>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.message.query_player)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.message.query_player)
    MergeFrom(*source);
  }
}

void query_player::MergeFrom(const query_player& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.message.query_player)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  db_fields_.MergeFrom(from.db_fields_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_db_base()->::proto::message::message_db_base::MergeFrom(from.db_base());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_db_cond()->::proto::message::query_player_cond::MergeFrom(from.db_cond());
    }
  }
}

void query_player::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.message.query_player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void query_player::CopyFrom(const query_player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.message.query_player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool query_player::IsInitialized() const {
  return true;
}

void query_player::Swap(query_player* other) {
  if (other == this) return;
  InternalSwap(other);
}
void query_player::InternalSwap(query_player* other) {
  using std::swap;
  CastToBase(&db_fields_)->InternalSwap(CastToBase(&other->db_fields_));
  swap(db_base_, other->db_base_);
  swap(db_cond_, other->db_cond_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata query_player::GetMetadata() const {
  protobuf_mysql_5fdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mysql_5fdb_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MixMailData::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MixMailData::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MixMailData::MixMailData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mysql_5fdb_2eproto::scc_info_MixMailData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.message.MixMailData)
}
MixMailData::MixMailData(const MixMailData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:proto.message.MixMailData)
}

void MixMailData::SharedCtor() {
  id_ = 0u;
}

MixMailData::~MixMailData() {
  // @@protoc_insertion_point(destructor:proto.message.MixMailData)
  SharedDtor();
}

void MixMailData::SharedDtor() {
}

void MixMailData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MixMailData::descriptor() {
  ::protobuf_mysql_5fdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mysql_5fdb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MixMailData& MixMailData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mysql_5fdb_2eproto::scc_info_MixMailData.base);
  return *internal_default_instance();
}


void MixMailData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.message.MixMailData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MixMailData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.message.MixMailData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.message.MixMailData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.message.MixMailData)
  return false;
#undef DO_
}

void MixMailData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.message.MixMailData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.message.MixMailData)
}

::google::protobuf::uint8* MixMailData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.message.MixMailData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.message.MixMailData)
  return target;
}

size_t MixMailData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.message.MixMailData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional uint32 id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MixMailData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.message.MixMailData)
  GOOGLE_DCHECK_NE(&from, this);
  const MixMailData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MixMailData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.message.MixMailData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.message.MixMailData)
    MergeFrom(*source);
  }
}

void MixMailData::MergeFrom(const MixMailData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.message.MixMailData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_id()) {
    set_id(from.id());
  }
}

void MixMailData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.message.MixMailData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MixMailData::CopyFrom(const MixMailData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.message.MixMailData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MixMailData::IsInitialized() const {
  return true;
}

void MixMailData::Swap(MixMailData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MixMailData::InternalSwap(MixMailData* other) {
  using std::swap;
  swap(id_, other->id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MixMailData::GetMetadata() const {
  protobuf_mysql_5fdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mysql_5fdb_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void table_mail::InitAsDefaultInstance() {
  ::proto::message::_table_mail_default_instance_._instance.get_mutable()->mixinfo_ = const_cast< ::proto::message::MixMailData*>(
      ::proto::message::MixMailData::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int table_mail::kMailidFieldNumber;
const int table_mail::kOwneridFieldNumber;
const int table_mail::kMixinfoFieldNumber;
const int table_mail::kMailTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

table_mail::table_mail()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mysql_5fdb_2eproto::scc_info_table_mail.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.message.table_mail)
}
table_mail::table_mail(const table_mail& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_mixinfo()) {
    mixinfo_ = new ::proto::message::MixMailData(*from.mixinfo_);
  } else {
    mixinfo_ = NULL;
  }
  ::memcpy(&mailid_, &from.mailid_,
    static_cast<size_t>(reinterpret_cast<char*>(&mail_type_) -
    reinterpret_cast<char*>(&mailid_)) + sizeof(mail_type_));
  // @@protoc_insertion_point(copy_constructor:proto.message.table_mail)
}

void table_mail::SharedCtor() {
  ::memset(&mixinfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mail_type_) -
      reinterpret_cast<char*>(&mixinfo_)) + sizeof(mail_type_));
}

table_mail::~table_mail() {
  // @@protoc_insertion_point(destructor:proto.message.table_mail)
  SharedDtor();
}

void table_mail::SharedDtor() {
  if (this != internal_default_instance()) delete mixinfo_;
}

void table_mail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* table_mail::descriptor() {
  ::protobuf_mysql_5fdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mysql_5fdb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const table_mail& table_mail::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mysql_5fdb_2eproto::scc_info_table_mail.base);
  return *internal_default_instance();
}


void table_mail::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.message.table_mail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(mixinfo_ != NULL);
    mixinfo_->Clear();
  }
  if (cached_has_bits & 14u) {
    ::memset(&mailid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mail_type_) -
        reinterpret_cast<char*>(&mailid_)) + sizeof(mail_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool table_mail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.message.table_mail)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 mailid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_mailid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mailid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 ownerid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_ownerid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ownerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.message.MixMailData mixinfo = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_mixinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 mail_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_mail_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mail_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.message.table_mail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.message.table_mail)
  return false;
#undef DO_
}

void table_mail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.message.table_mail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 mailid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->mailid(), output);
  }

  // optional uint64 ownerid = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->ownerid(), output);
  }

  // optional .proto.message.MixMailData mixinfo = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_mixinfo(), output);
  }

  // optional uint32 mail_type = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->mail_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.message.table_mail)
}

::google::protobuf::uint8* table_mail::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.message.table_mail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 mailid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->mailid(), target);
  }

  // optional uint64 ownerid = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->ownerid(), target);
  }

  // optional .proto.message.MixMailData mixinfo = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_mixinfo(), deterministic, target);
  }

  // optional uint32 mail_type = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->mail_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.message.table_mail)
  return target;
}

size_t table_mail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.message.table_mail)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional .proto.message.MixMailData mixinfo = 3;
    if (has_mixinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *mixinfo_);
    }

    // optional uint64 mailid = 1;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mailid());
    }

    // optional uint64 ownerid = 2;
    if (has_ownerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ownerid());
    }

    // optional uint32 mail_type = 4;
    if (has_mail_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mail_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void table_mail::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.message.table_mail)
  GOOGLE_DCHECK_NE(&from, this);
  const table_mail* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const table_mail>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.message.table_mail)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.message.table_mail)
    MergeFrom(*source);
  }
}

void table_mail::MergeFrom(const table_mail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.message.table_mail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_mixinfo()->::proto::message::MixMailData::MergeFrom(from.mixinfo());
    }
    if (cached_has_bits & 0x00000002u) {
      mailid_ = from.mailid_;
    }
    if (cached_has_bits & 0x00000004u) {
      ownerid_ = from.ownerid_;
    }
    if (cached_has_bits & 0x00000008u) {
      mail_type_ = from.mail_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void table_mail::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.message.table_mail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void table_mail::CopyFrom(const table_mail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.message.table_mail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool table_mail::IsInitialized() const {
  return true;
}

void table_mail::Swap(table_mail* other) {
  if (other == this) return;
  InternalSwap(other);
}
void table_mail::InternalSwap(table_mail* other) {
  using std::swap;
  swap(mixinfo_, other->mixinfo_);
  swap(mailid_, other->mailid_);
  swap(ownerid_, other->ownerid_);
  swap(mail_type_, other->mail_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata table_mail::GetMetadata() const {
  protobuf_mysql_5fdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mysql_5fdb_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void query_mail_cond::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int query_mail_cond::kMailidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

query_mail_cond::query_mail_cond()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mysql_5fdb_2eproto::scc_info_query_mail_cond.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.message.query_mail_cond)
}
query_mail_cond::query_mail_cond(const query_mail_cond& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  mailid_ = from.mailid_;
  // @@protoc_insertion_point(copy_constructor:proto.message.query_mail_cond)
}

void query_mail_cond::SharedCtor() {
  mailid_ = GOOGLE_ULONGLONG(0);
}

query_mail_cond::~query_mail_cond() {
  // @@protoc_insertion_point(destructor:proto.message.query_mail_cond)
  SharedDtor();
}

void query_mail_cond::SharedDtor() {
}

void query_mail_cond::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* query_mail_cond::descriptor() {
  ::protobuf_mysql_5fdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mysql_5fdb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const query_mail_cond& query_mail_cond::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mysql_5fdb_2eproto::scc_info_query_mail_cond.base);
  return *internal_default_instance();
}


void query_mail_cond::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.message.query_mail_cond)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mailid_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool query_mail_cond::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.message.query_mail_cond)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 mailid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_mailid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mailid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.message.query_mail_cond)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.message.query_mail_cond)
  return false;
#undef DO_
}

void query_mail_cond::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.message.query_mail_cond)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 mailid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->mailid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.message.query_mail_cond)
}

::google::protobuf::uint8* query_mail_cond::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.message.query_mail_cond)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 mailid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->mailid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.message.query_mail_cond)
  return target;
}

size_t query_mail_cond::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.message.query_mail_cond)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional uint64 mailid = 1;
  if (has_mailid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->mailid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void query_mail_cond::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.message.query_mail_cond)
  GOOGLE_DCHECK_NE(&from, this);
  const query_mail_cond* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const query_mail_cond>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.message.query_mail_cond)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.message.query_mail_cond)
    MergeFrom(*source);
  }
}

void query_mail_cond::MergeFrom(const query_mail_cond& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.message.query_mail_cond)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_mailid()) {
    set_mailid(from.mailid());
  }
}

void query_mail_cond::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.message.query_mail_cond)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void query_mail_cond::CopyFrom(const query_mail_cond& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.message.query_mail_cond)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool query_mail_cond::IsInitialized() const {
  return true;
}

void query_mail_cond::Swap(query_mail_cond* other) {
  if (other == this) return;
  InternalSwap(other);
}
void query_mail_cond::InternalSwap(query_mail_cond* other) {
  using std::swap;
  swap(mailid_, other->mailid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata query_mail_cond::GetMetadata() const {
  protobuf_mysql_5fdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mysql_5fdb_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void query_mail::InitAsDefaultInstance() {
  ::proto::message::_query_mail_default_instance_._instance.get_mutable()->db_base_ = const_cast< ::proto::message::message_db_base*>(
      ::proto::message::message_db_base::internal_default_instance());
  ::proto::message::_query_mail_default_instance_._instance.get_mutable()->db_fields_ = const_cast< ::proto::message::table_mail*>(
      ::proto::message::table_mail::internal_default_instance());
  ::proto::message::_query_mail_default_instance_._instance.get_mutable()->db_cond_ = const_cast< ::proto::message::query_mail_cond*>(
      ::proto::message::query_mail_cond::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int query_mail::kDbBaseFieldNumber;
const int query_mail::kDbFieldsFieldNumber;
const int query_mail::kDbCondFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

query_mail::query_mail()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mysql_5fdb_2eproto::scc_info_query_mail.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.message.query_mail)
}
query_mail::query_mail(const query_mail& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_db_base()) {
    db_base_ = new ::proto::message::message_db_base(*from.db_base_);
  } else {
    db_base_ = NULL;
  }
  if (from.has_db_fields()) {
    db_fields_ = new ::proto::message::table_mail(*from.db_fields_);
  } else {
    db_fields_ = NULL;
  }
  if (from.has_db_cond()) {
    db_cond_ = new ::proto::message::query_mail_cond(*from.db_cond_);
  } else {
    db_cond_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:proto.message.query_mail)
}

void query_mail::SharedCtor() {
  ::memset(&db_base_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&db_cond_) -
      reinterpret_cast<char*>(&db_base_)) + sizeof(db_cond_));
}

query_mail::~query_mail() {
  // @@protoc_insertion_point(destructor:proto.message.query_mail)
  SharedDtor();
}

void query_mail::SharedDtor() {
  if (this != internal_default_instance()) delete db_base_;
  if (this != internal_default_instance()) delete db_fields_;
  if (this != internal_default_instance()) delete db_cond_;
}

void query_mail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* query_mail::descriptor() {
  ::protobuf_mysql_5fdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mysql_5fdb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const query_mail& query_mail::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mysql_5fdb_2eproto::scc_info_query_mail.base);
  return *internal_default_instance();
}


void query_mail::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.message.query_mail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(db_base_ != NULL);
      db_base_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(db_fields_ != NULL);
      db_fields_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(db_cond_ != NULL);
      db_cond_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool query_mail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.message.query_mail)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.message.message_db_base db_base = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_db_base()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.message.table_mail db_fields = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_db_fields()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.message.query_mail_cond db_cond = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_db_cond()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.message.query_mail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.message.query_mail)
  return false;
#undef DO_
}

void query_mail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.message.query_mail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.message.message_db_base db_base = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_db_base(), output);
  }

  // optional .proto.message.table_mail db_fields = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_db_fields(), output);
  }

  // optional .proto.message.query_mail_cond db_cond = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_db_cond(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.message.query_mail)
}

::google::protobuf::uint8* query_mail::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.message.query_mail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.message.message_db_base db_base = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_db_base(), deterministic, target);
  }

  // optional .proto.message.table_mail db_fields = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_db_fields(), deterministic, target);
  }

  // optional .proto.message.query_mail_cond db_cond = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_db_cond(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.message.query_mail)
  return target;
}

size_t query_mail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.message.query_mail)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .proto.message.message_db_base db_base = 1;
    if (has_db_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *db_base_);
    }

    // optional .proto.message.table_mail db_fields = 2;
    if (has_db_fields()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *db_fields_);
    }

    // optional .proto.message.query_mail_cond db_cond = 3;
    if (has_db_cond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *db_cond_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void query_mail::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.message.query_mail)
  GOOGLE_DCHECK_NE(&from, this);
  const query_mail* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const query_mail>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.message.query_mail)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.message.query_mail)
    MergeFrom(*source);
  }
}

void query_mail::MergeFrom(const query_mail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.message.query_mail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_db_base()->::proto::message::message_db_base::MergeFrom(from.db_base());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_db_fields()->::proto::message::table_mail::MergeFrom(from.db_fields());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_db_cond()->::proto::message::query_mail_cond::MergeFrom(from.db_cond());
    }
  }
}

void query_mail::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.message.query_mail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void query_mail::CopyFrom(const query_mail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.message.query_mail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool query_mail::IsInitialized() const {
  return true;
}

void query_mail::Swap(query_mail* other) {
  if (other == this) return;
  InternalSwap(other);
}
void query_mail::InternalSwap(query_mail* other) {
  using std::swap;
  swap(db_base_, other->db_base_);
  swap(db_fields_, other->db_fields_);
  swap(db_cond_, other->db_cond_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata query_mail::GetMetadata() const {
  protobuf_mysql_5fdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mysql_5fdb_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void update_mail::InitAsDefaultInstance() {
  ::proto::message::_update_mail_default_instance_._instance.get_mutable()->db_base_ = const_cast< ::proto::message::message_db_base*>(
      ::proto::message::message_db_base::internal_default_instance());
  ::proto::message::_update_mail_default_instance_._instance.get_mutable()->db_fields_ = const_cast< ::proto::message::table_mail*>(
      ::proto::message::table_mail::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int update_mail::kDbBaseFieldNumber;
const int update_mail::kDbFieldsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

update_mail::update_mail()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mysql_5fdb_2eproto::scc_info_update_mail.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.message.update_mail)
}
update_mail::update_mail(const update_mail& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_db_base()) {
    db_base_ = new ::proto::message::message_db_base(*from.db_base_);
  } else {
    db_base_ = NULL;
  }
  if (from.has_db_fields()) {
    db_fields_ = new ::proto::message::table_mail(*from.db_fields_);
  } else {
    db_fields_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:proto.message.update_mail)
}

void update_mail::SharedCtor() {
  ::memset(&db_base_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&db_fields_) -
      reinterpret_cast<char*>(&db_base_)) + sizeof(db_fields_));
}

update_mail::~update_mail() {
  // @@protoc_insertion_point(destructor:proto.message.update_mail)
  SharedDtor();
}

void update_mail::SharedDtor() {
  if (this != internal_default_instance()) delete db_base_;
  if (this != internal_default_instance()) delete db_fields_;
}

void update_mail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* update_mail::descriptor() {
  ::protobuf_mysql_5fdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mysql_5fdb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const update_mail& update_mail::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mysql_5fdb_2eproto::scc_info_update_mail.base);
  return *internal_default_instance();
}


void update_mail::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.message.update_mail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(db_base_ != NULL);
      db_base_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(db_fields_ != NULL);
      db_fields_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool update_mail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.message.update_mail)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.message.message_db_base db_base = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_db_base()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.message.table_mail db_fields = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_db_fields()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.message.update_mail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.message.update_mail)
  return false;
#undef DO_
}

void update_mail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.message.update_mail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.message.message_db_base db_base = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_db_base(), output);
  }

  // optional .proto.message.table_mail db_fields = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_db_fields(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.message.update_mail)
}

::google::protobuf::uint8* update_mail::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.message.update_mail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.message.message_db_base db_base = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_db_base(), deterministic, target);
  }

  // optional .proto.message.table_mail db_fields = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_db_fields(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.message.update_mail)
  return target;
}

size_t update_mail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.message.update_mail)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .proto.message.message_db_base db_base = 1;
    if (has_db_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *db_base_);
    }

    // optional .proto.message.table_mail db_fields = 2;
    if (has_db_fields()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *db_fields_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void update_mail::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.message.update_mail)
  GOOGLE_DCHECK_NE(&from, this);
  const update_mail* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const update_mail>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.message.update_mail)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.message.update_mail)
    MergeFrom(*source);
  }
}

void update_mail::MergeFrom(const update_mail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.message.update_mail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_db_base()->::proto::message::message_db_base::MergeFrom(from.db_base());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_db_fields()->::proto::message::table_mail::MergeFrom(from.db_fields());
    }
  }
}

void update_mail::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.message.update_mail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void update_mail::CopyFrom(const update_mail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.message.update_mail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool update_mail::IsInitialized() const {
  return true;
}

void update_mail::Swap(update_mail* other) {
  if (other == this) return;
  InternalSwap(other);
}
void update_mail::InternalSwap(update_mail* other) {
  using std::swap;
  swap(db_base_, other->db_base_);
  swap(db_fields_, other->db_fields_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata update_mail::GetMetadata() const {
  protobuf_mysql_5fdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mysql_5fdb_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace message
}  // namespace proto
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::proto::message::message_db_base* Arena::CreateMaybeMessage< ::proto::message::message_db_base >(Arena* arena) {
  return Arena::CreateInternal< ::proto::message::message_db_base >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::proto::message::mysql_player* Arena::CreateMaybeMessage< ::proto::message::mysql_player >(Arena* arena) {
  return Arena::CreateInternal< ::proto::message::mysql_player >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::proto::message::query_player_cond* Arena::CreateMaybeMessage< ::proto::message::query_player_cond >(Arena* arena) {
  return Arena::CreateInternal< ::proto::message::query_player_cond >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::proto::message::update_player* Arena::CreateMaybeMessage< ::proto::message::update_player >(Arena* arena) {
  return Arena::CreateInternal< ::proto::message::update_player >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::proto::message::query_player* Arena::CreateMaybeMessage< ::proto::message::query_player >(Arena* arena) {
  return Arena::CreateInternal< ::proto::message::query_player >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::proto::message::MixMailData* Arena::CreateMaybeMessage< ::proto::message::MixMailData >(Arena* arena) {
  return Arena::CreateInternal< ::proto::message::MixMailData >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::proto::message::table_mail* Arena::CreateMaybeMessage< ::proto::message::table_mail >(Arena* arena) {
  return Arena::CreateInternal< ::proto::message::table_mail >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::proto::message::query_mail_cond* Arena::CreateMaybeMessage< ::proto::message::query_mail_cond >(Arena* arena) {
  return Arena::CreateInternal< ::proto::message::query_mail_cond >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::proto::message::query_mail* Arena::CreateMaybeMessage< ::proto::message::query_mail >(Arena* arena) {
  return Arena::CreateInternal< ::proto::message::query_mail >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::proto::message::update_mail* Arena::CreateMaybeMessage< ::proto::message::update_mail >(Arena* arena) {
  return Arena::CreateInternal< ::proto::message::update_mail >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
