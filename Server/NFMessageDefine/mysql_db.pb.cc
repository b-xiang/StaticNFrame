// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mysql_db.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mysql_db.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace message {

namespace {

const ::google::protobuf::Descriptor* message_db_base_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  message_db_base_reflection_ = NULL;
const ::google::protobuf::Descriptor* mysql_player_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mysql_player_reflection_ = NULL;
const ::google::protobuf::Descriptor* query_player_cond_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  query_player_cond_reflection_ = NULL;
const ::google::protobuf::Descriptor* update_player_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  update_player_reflection_ = NULL;
const ::google::protobuf::Descriptor* query_player_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  query_player_reflection_ = NULL;
const ::google::protobuf::Descriptor* MixMailData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MixMailData_reflection_ = NULL;
const ::google::protobuf::Descriptor* table_mail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  table_mail_reflection_ = NULL;
const ::google::protobuf::Descriptor* query_mail_cond_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  query_mail_cond_reflection_ = NULL;
const ::google::protobuf::Descriptor* query_mail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  query_mail_reflection_ = NULL;
const ::google::protobuf::Descriptor* update_mail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  update_mail_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_mysql_5fdb_2eproto() {
  protobuf_AddDesc_mysql_5fdb_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "mysql_db.proto");
  GOOGLE_CHECK(file != NULL);
  message_db_base_descriptor_ = file->message_type(0);
  static const int message_db_base_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(message_db_base, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(message_db_base, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(message_db_base, rows_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(message_db_base, order_key_),
  };
  message_db_base_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      message_db_base_descriptor_,
      message_db_base::default_instance_,
      message_db_base_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(message_db_base, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(message_db_base, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(message_db_base));
  mysql_player_descriptor_ = file->message_type(1);
  static const int mysql_player_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mysql_player, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mysql_player, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mysql_player, charname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mysql_player, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mysql_player, career_),
  };
  mysql_player_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mysql_player_descriptor_,
      mysql_player::default_instance_,
      mysql_player_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mysql_player, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mysql_player, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mysql_player));
  query_player_cond_descriptor_ = file->message_type(2);
  static const int query_player_cond_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_player_cond, serverid_),
  };
  query_player_cond_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      query_player_cond_descriptor_,
      query_player_cond::default_instance_,
      query_player_cond_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_player_cond, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_player_cond, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(query_player_cond));
  update_player_descriptor_ = file->message_type(3);
  static const int update_player_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_player, db_base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_player, db_fields_),
  };
  update_player_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      update_player_descriptor_,
      update_player::default_instance_,
      update_player_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_player, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_player, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(update_player));
  query_player_descriptor_ = file->message_type(4);
  static const int query_player_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_player, db_base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_player, db_fields_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_player, db_cond_),
  };
  query_player_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      query_player_descriptor_,
      query_player::default_instance_,
      query_player_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_player, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_player, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(query_player));
  MixMailData_descriptor_ = file->message_type(5);
  static const int MixMailData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MixMailData, id_),
  };
  MixMailData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MixMailData_descriptor_,
      MixMailData::default_instance_,
      MixMailData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MixMailData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MixMailData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MixMailData));
  table_mail_descriptor_ = file->message_type(6);
  static const int table_mail_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(table_mail, mailid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(table_mail, ownerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(table_mail, mixinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(table_mail, mail_type_),
  };
  table_mail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      table_mail_descriptor_,
      table_mail::default_instance_,
      table_mail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(table_mail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(table_mail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(table_mail));
  query_mail_cond_descriptor_ = file->message_type(7);
  static const int query_mail_cond_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_mail_cond, mailid_),
  };
  query_mail_cond_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      query_mail_cond_descriptor_,
      query_mail_cond::default_instance_,
      query_mail_cond_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_mail_cond, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_mail_cond, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(query_mail_cond));
  query_mail_descriptor_ = file->message_type(8);
  static const int query_mail_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_mail, db_base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_mail, db_fields_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_mail, db_cond_),
  };
  query_mail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      query_mail_descriptor_,
      query_mail::default_instance_,
      query_mail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_mail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_mail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(query_mail));
  update_mail_descriptor_ = file->message_type(9);
  static const int update_mail_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_mail, db_base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_mail, db_fields_),
  };
  update_mail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      update_mail_descriptor_,
      update_mail::default_instance_,
      update_mail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_mail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_mail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(update_mail));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_mysql_5fdb_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    message_db_base_descriptor_, &message_db_base::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mysql_player_descriptor_, &mysql_player::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    query_player_cond_descriptor_, &query_player_cond::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    update_player_descriptor_, &update_player::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    query_player_descriptor_, &query_player::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MixMailData_descriptor_, &MixMailData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    table_mail_descriptor_, &table_mail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    query_mail_cond_descriptor_, &query_mail_cond::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    query_mail_descriptor_, &query_mail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    update_mail_descriptor_, &update_mail::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_mysql_5fdb_2eproto() {
  delete message_db_base::default_instance_;
  delete message_db_base_reflection_;
  delete mysql_player::default_instance_;
  delete mysql_player_reflection_;
  delete query_player_cond::default_instance_;
  delete query_player_cond_reflection_;
  delete update_player::default_instance_;
  delete update_player_reflection_;
  delete query_player::default_instance_;
  delete query_player_reflection_;
  delete MixMailData::default_instance_;
  delete MixMailData_reflection_;
  delete table_mail::default_instance_;
  delete table_mail_reflection_;
  delete query_mail_cond::default_instance_;
  delete query_mail_cond_reflection_;
  delete query_mail::default_instance_;
  delete query_mail_reflection_;
  delete update_mail::default_instance_;
  delete update_mail_reflection_;
}

void protobuf_AddDesc_mysql_5fdb_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016mysql_db.proto\022\rproto.message\"V\n\017messa"
    "ge_db_base\022\022\n\ntable_name\030\001 \001(\t\022\016\n\006offset"
    "\030\002 \001(\r\022\014\n\004rows\030\003 \001(\r\022\021\n\torder_key\030\004 \001(\t\""
    "c\n\014mysql_player\022\016\n\006charid\030\001 \001(\004\022\017\n\007accou"
    "nt\030\002 \001(\t\022\020\n\010charname\030\003 \001(\t\022\020\n\010serverid\030\004"
    " \001(\r\022\016\n\006career\030\005 \001(\r\"%\n\021query_player_con"
    "d\022\020\n\010serverid\030\001 \001(\r\"p\n\rupdate_player\022/\n\007"
    "db_base\030\001 \001(\0132\036.proto.message.message_db"
    "_base\022.\n\tdb_fields\030\002 \001(\0132\033.proto.message"
    ".mysql_player\"\242\001\n\014query_player\022/\n\007db_bas"
    "e\030\001 \001(\0132\036.proto.message.message_db_base\022"
    ".\n\tdb_fields\030\002 \003(\0132\033.proto.message.mysql"
    "_player\0221\n\007db_cond\030\003 \001(\0132 .proto.message"
    ".query_player_cond\"\031\n\013MixMailData\022\n\n\002id\030"
    "\001 \001(\r\"m\n\ntable_mail\022\016\n\006mailid\030\001 \001(\004\022\017\n\007o"
    "wnerid\030\002 \001(\004\022+\n\007mixinfo\030\003 \001(\0132\032.proto.me"
    "ssage.MixMailData\022\021\n\tmail_type\030\004 \001(\r\"!\n\017"
    "query_mail_cond\022\016\n\006mailid\030\001 \001(\004\"\234\001\n\nquer"
    "y_mail\022/\n\007db_base\030\001 \001(\0132\036.proto.message."
    "message_db_base\022,\n\tdb_fields\030\002 \001(\0132\031.pro"
    "to.message.table_mail\022/\n\007db_cond\030\003 \001(\0132\036"
    ".proto.message.query_mail_cond\"l\n\013update"
    "_mail\022/\n\007db_base\030\001 \001(\0132\036.proto.message.m"
    "essage_db_base\022,\n\tdb_fields\030\002 \001(\0132\031.prot"
    "o.message.table_mailB\017\n\rproto.message", 997);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mysql_db.proto", &protobuf_RegisterTypes);
  message_db_base::default_instance_ = new message_db_base();
  mysql_player::default_instance_ = new mysql_player();
  query_player_cond::default_instance_ = new query_player_cond();
  update_player::default_instance_ = new update_player();
  query_player::default_instance_ = new query_player();
  MixMailData::default_instance_ = new MixMailData();
  table_mail::default_instance_ = new table_mail();
  query_mail_cond::default_instance_ = new query_mail_cond();
  query_mail::default_instance_ = new query_mail();
  update_mail::default_instance_ = new update_mail();
  message_db_base::default_instance_->InitAsDefaultInstance();
  mysql_player::default_instance_->InitAsDefaultInstance();
  query_player_cond::default_instance_->InitAsDefaultInstance();
  update_player::default_instance_->InitAsDefaultInstance();
  query_player::default_instance_->InitAsDefaultInstance();
  MixMailData::default_instance_->InitAsDefaultInstance();
  table_mail::default_instance_->InitAsDefaultInstance();
  query_mail_cond::default_instance_->InitAsDefaultInstance();
  query_mail::default_instance_->InitAsDefaultInstance();
  update_mail::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_mysql_5fdb_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_mysql_5fdb_2eproto {
  StaticDescriptorInitializer_mysql_5fdb_2eproto() {
    protobuf_AddDesc_mysql_5fdb_2eproto();
  }
} static_descriptor_initializer_mysql_5fdb_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int message_db_base::kTableNameFieldNumber;
const int message_db_base::kOffsetFieldNumber;
const int message_db_base::kRowsFieldNumber;
const int message_db_base::kOrderKeyFieldNumber;
#endif  // !_MSC_VER

message_db_base::message_db_base()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void message_db_base::InitAsDefaultInstance() {
}

message_db_base::message_db_base(const message_db_base& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void message_db_base::SharedCtor() {
  _cached_size_ = 0;
  table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  offset_ = 0u;
  rows_ = 0u;
  order_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

message_db_base::~message_db_base() {
  SharedDtor();
}

void message_db_base::SharedDtor() {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    delete table_name_;
  }
  if (order_key_ != &::google::protobuf::internal::kEmptyString) {
    delete order_key_;
  }
  if (this != default_instance_) {
  }
}

void message_db_base::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* message_db_base::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return message_db_base_descriptor_;
}

const message_db_base& message_db_base::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mysql_5fdb_2eproto();
  return *default_instance_;
}

message_db_base* message_db_base::default_instance_ = NULL;

message_db_base* message_db_base::New() const {
  return new message_db_base;
}

void message_db_base::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_table_name()) {
      if (table_name_ != &::google::protobuf::internal::kEmptyString) {
        table_name_->clear();
      }
    }
    offset_ = 0u;
    rows_ = 0u;
    if (has_order_key()) {
      if (order_key_ != &::google::protobuf::internal::kEmptyString) {
        order_key_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool message_db_base::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string table_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->table_name().data(), this->table_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_offset;
        break;
      }

      // optional uint32 offset = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rows;
        break;
      }

      // optional uint32 rows = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rows:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rows_)));
          set_has_rows();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_order_key;
        break;
      }

      // optional string order_key = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_order_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->order_key().data(), this->order_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void message_db_base::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string table_name = 1;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->table_name(), output);
  }

  // optional uint32 offset = 2;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->offset(), output);
  }

  // optional uint32 rows = 3;
  if (has_rows()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rows(), output);
  }

  // optional string order_key = 4;
  if (has_order_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->order_key().data(), this->order_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->order_key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* message_db_base::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string table_name = 1;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->table_name(), target);
  }

  // optional uint32 offset = 2;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->offset(), target);
  }

  // optional uint32 rows = 3;
  if (has_rows()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->rows(), target);
  }

  // optional string order_key = 4;
  if (has_order_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->order_key().data(), this->order_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->order_key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int message_db_base::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string table_name = 1;
    if (has_table_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->table_name());
    }

    // optional uint32 offset = 2;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->offset());
    }

    // optional uint32 rows = 3;
    if (has_rows()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rows());
    }

    // optional string order_key = 4;
    if (has_order_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->order_key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void message_db_base::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const message_db_base* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const message_db_base*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void message_db_base::MergeFrom(const message_db_base& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_name()) {
      set_table_name(from.table_name());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_rows()) {
      set_rows(from.rows());
    }
    if (from.has_order_key()) {
      set_order_key(from.order_key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void message_db_base::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void message_db_base::CopyFrom(const message_db_base& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool message_db_base::IsInitialized() const {

  return true;
}

void message_db_base::Swap(message_db_base* other) {
  if (other != this) {
    std::swap(table_name_, other->table_name_);
    std::swap(offset_, other->offset_);
    std::swap(rows_, other->rows_);
    std::swap(order_key_, other->order_key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata message_db_base::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = message_db_base_descriptor_;
  metadata.reflection = message_db_base_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mysql_player::kCharidFieldNumber;
const int mysql_player::kAccountFieldNumber;
const int mysql_player::kCharnameFieldNumber;
const int mysql_player::kServeridFieldNumber;
const int mysql_player::kCareerFieldNumber;
#endif  // !_MSC_VER

mysql_player::mysql_player()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mysql_player::InitAsDefaultInstance() {
}

mysql_player::mysql_player(const mysql_player& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mysql_player::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  serverid_ = 0u;
  career_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mysql_player::~mysql_player() {
  SharedDtor();
}

void mysql_player::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (charname_ != &::google::protobuf::internal::kEmptyString) {
    delete charname_;
  }
  if (this != default_instance_) {
  }
}

void mysql_player::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mysql_player::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mysql_player_descriptor_;
}

const mysql_player& mysql_player::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mysql_5fdb_2eproto();
  return *default_instance_;
}

mysql_player* mysql_player::default_instance_ = NULL;

mysql_player* mysql_player::New() const {
  return new mysql_player;
}

void mysql_player::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_ULONGLONG(0);
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_charname()) {
      if (charname_ != &::google::protobuf::internal::kEmptyString) {
        charname_->clear();
      }
    }
    serverid_ = 0u;
    career_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mysql_player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account;
        break;
      }

      // optional string account = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_charname;
        break;
      }

      // optional string charname = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_charname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_charname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->charname().data(), this->charname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_serverid;
        break;
      }

      // optional uint32 serverid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_career;
        break;
      }

      // optional uint32 career = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_career:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &career_)));
          set_has_career();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mysql_player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->account(), output);
  }

  // optional string charname = 3;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->charname(), output);
  }

  // optional uint32 serverid = 4;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->serverid(), output);
  }

  // optional uint32 career = 5;
  if (has_career()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->career(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mysql_player::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->account(), target);
  }

  // optional string charname = 3;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->charname(), target);
  }

  // optional uint32 serverid = 4;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->serverid(), target);
  }

  // optional uint32 career = 5;
  if (has_career()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->career(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mysql_player::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional string account = 2;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional string charname = 3;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->charname());
    }

    // optional uint32 serverid = 4;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverid());
    }

    // optional uint32 career = 5;
    if (has_career()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->career());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mysql_player::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mysql_player* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mysql_player*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mysql_player::MergeFrom(const mysql_player& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_charname()) {
      set_charname(from.charname());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_career()) {
      set_career(from.career());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mysql_player::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mysql_player::CopyFrom(const mysql_player& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mysql_player::IsInitialized() const {

  return true;
}

void mysql_player::Swap(mysql_player* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(account_, other->account_);
    std::swap(charname_, other->charname_);
    std::swap(serverid_, other->serverid_);
    std::swap(career_, other->career_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mysql_player::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mysql_player_descriptor_;
  metadata.reflection = mysql_player_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int query_player_cond::kServeridFieldNumber;
#endif  // !_MSC_VER

query_player_cond::query_player_cond()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void query_player_cond::InitAsDefaultInstance() {
}

query_player_cond::query_player_cond(const query_player_cond& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void query_player_cond::SharedCtor() {
  _cached_size_ = 0;
  serverid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

query_player_cond::~query_player_cond() {
  SharedDtor();
}

void query_player_cond::SharedDtor() {
  if (this != default_instance_) {
  }
}

void query_player_cond::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* query_player_cond::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return query_player_cond_descriptor_;
}

const query_player_cond& query_player_cond::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mysql_5fdb_2eproto();
  return *default_instance_;
}

query_player_cond* query_player_cond::default_instance_ = NULL;

query_player_cond* query_player_cond::New() const {
  return new query_player_cond;
}

void query_player_cond::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    serverid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool query_player_cond::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 serverid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void query_player_cond::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 serverid = 1;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->serverid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* query_player_cond::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 serverid = 1;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->serverid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int query_player_cond::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 serverid = 1;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void query_player_cond::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const query_player_cond* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const query_player_cond*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void query_player_cond::MergeFrom(const query_player_cond& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void query_player_cond::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void query_player_cond::CopyFrom(const query_player_cond& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool query_player_cond::IsInitialized() const {

  return true;
}

void query_player_cond::Swap(query_player_cond* other) {
  if (other != this) {
    std::swap(serverid_, other->serverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata query_player_cond::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = query_player_cond_descriptor_;
  metadata.reflection = query_player_cond_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int update_player::kDbBaseFieldNumber;
const int update_player::kDbFieldsFieldNumber;
#endif  // !_MSC_VER

update_player::update_player()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void update_player::InitAsDefaultInstance() {
  db_base_ = const_cast< ::proto::message::message_db_base*>(&::proto::message::message_db_base::default_instance());
  db_fields_ = const_cast< ::proto::message::mysql_player*>(&::proto::message::mysql_player::default_instance());
}

update_player::update_player(const update_player& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void update_player::SharedCtor() {
  _cached_size_ = 0;
  db_base_ = NULL;
  db_fields_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

update_player::~update_player() {
  SharedDtor();
}

void update_player::SharedDtor() {
  if (this != default_instance_) {
    delete db_base_;
    delete db_fields_;
  }
}

void update_player::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* update_player::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return update_player_descriptor_;
}

const update_player& update_player::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mysql_5fdb_2eproto();
  return *default_instance_;
}

update_player* update_player::default_instance_ = NULL;

update_player* update_player::New() const {
  return new update_player;
}

void update_player::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_db_base()) {
      if (db_base_ != NULL) db_base_->::proto::message::message_db_base::Clear();
    }
    if (has_db_fields()) {
      if (db_fields_ != NULL) db_fields_->::proto::message::mysql_player::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool update_player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.message.message_db_base db_base = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_db_base()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_db_fields;
        break;
      }

      // optional .proto.message.mysql_player db_fields = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_db_fields:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_db_fields()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void update_player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto.message.message_db_base db_base = 1;
  if (has_db_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->db_base(), output);
  }

  // optional .proto.message.mysql_player db_fields = 2;
  if (has_db_fields()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->db_fields(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* update_player::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto.message.message_db_base db_base = 1;
  if (has_db_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->db_base(), target);
  }

  // optional .proto.message.mysql_player db_fields = 2;
  if (has_db_fields()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->db_fields(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int update_player::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto.message.message_db_base db_base = 1;
    if (has_db_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->db_base());
    }

    // optional .proto.message.mysql_player db_fields = 2;
    if (has_db_fields()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->db_fields());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void update_player::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const update_player* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const update_player*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void update_player::MergeFrom(const update_player& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_db_base()) {
      mutable_db_base()->::proto::message::message_db_base::MergeFrom(from.db_base());
    }
    if (from.has_db_fields()) {
      mutable_db_fields()->::proto::message::mysql_player::MergeFrom(from.db_fields());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void update_player::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void update_player::CopyFrom(const update_player& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool update_player::IsInitialized() const {

  return true;
}

void update_player::Swap(update_player* other) {
  if (other != this) {
    std::swap(db_base_, other->db_base_);
    std::swap(db_fields_, other->db_fields_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata update_player::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = update_player_descriptor_;
  metadata.reflection = update_player_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int query_player::kDbBaseFieldNumber;
const int query_player::kDbFieldsFieldNumber;
const int query_player::kDbCondFieldNumber;
#endif  // !_MSC_VER

query_player::query_player()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void query_player::InitAsDefaultInstance() {
  db_base_ = const_cast< ::proto::message::message_db_base*>(&::proto::message::message_db_base::default_instance());
  db_cond_ = const_cast< ::proto::message::query_player_cond*>(&::proto::message::query_player_cond::default_instance());
}

query_player::query_player(const query_player& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void query_player::SharedCtor() {
  _cached_size_ = 0;
  db_base_ = NULL;
  db_cond_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

query_player::~query_player() {
  SharedDtor();
}

void query_player::SharedDtor() {
  if (this != default_instance_) {
    delete db_base_;
    delete db_cond_;
  }
}

void query_player::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* query_player::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return query_player_descriptor_;
}

const query_player& query_player::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mysql_5fdb_2eproto();
  return *default_instance_;
}

query_player* query_player::default_instance_ = NULL;

query_player* query_player::New() const {
  return new query_player;
}

void query_player::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_db_base()) {
      if (db_base_ != NULL) db_base_->::proto::message::message_db_base::Clear();
    }
    if (has_db_cond()) {
      if (db_cond_ != NULL) db_cond_->::proto::message::query_player_cond::Clear();
    }
  }
  db_fields_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool query_player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.message.message_db_base db_base = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_db_base()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_db_fields;
        break;
      }

      // repeated .proto.message.mysql_player db_fields = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_db_fields:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_db_fields()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_db_fields;
        if (input->ExpectTag(26)) goto parse_db_cond;
        break;
      }

      // optional .proto.message.query_player_cond db_cond = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_db_cond:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_db_cond()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void query_player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto.message.message_db_base db_base = 1;
  if (has_db_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->db_base(), output);
  }

  // repeated .proto.message.mysql_player db_fields = 2;
  for (int i = 0; i < this->db_fields_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->db_fields(i), output);
  }

  // optional .proto.message.query_player_cond db_cond = 3;
  if (has_db_cond()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->db_cond(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* query_player::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto.message.message_db_base db_base = 1;
  if (has_db_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->db_base(), target);
  }

  // repeated .proto.message.mysql_player db_fields = 2;
  for (int i = 0; i < this->db_fields_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->db_fields(i), target);
  }

  // optional .proto.message.query_player_cond db_cond = 3;
  if (has_db_cond()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->db_cond(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int query_player::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto.message.message_db_base db_base = 1;
    if (has_db_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->db_base());
    }

    // optional .proto.message.query_player_cond db_cond = 3;
    if (has_db_cond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->db_cond());
    }

  }
  // repeated .proto.message.mysql_player db_fields = 2;
  total_size += 1 * this->db_fields_size();
  for (int i = 0; i < this->db_fields_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->db_fields(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void query_player::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const query_player* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const query_player*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void query_player::MergeFrom(const query_player& from) {
  GOOGLE_CHECK_NE(&from, this);
  db_fields_.MergeFrom(from.db_fields_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_db_base()) {
      mutable_db_base()->::proto::message::message_db_base::MergeFrom(from.db_base());
    }
    if (from.has_db_cond()) {
      mutable_db_cond()->::proto::message::query_player_cond::MergeFrom(from.db_cond());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void query_player::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void query_player::CopyFrom(const query_player& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool query_player::IsInitialized() const {

  return true;
}

void query_player::Swap(query_player* other) {
  if (other != this) {
    std::swap(db_base_, other->db_base_);
    db_fields_.Swap(&other->db_fields_);
    std::swap(db_cond_, other->db_cond_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata query_player::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = query_player_descriptor_;
  metadata.reflection = query_player_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MixMailData::kIdFieldNumber;
#endif  // !_MSC_VER

MixMailData::MixMailData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MixMailData::InitAsDefaultInstance() {
}

MixMailData::MixMailData(const MixMailData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MixMailData::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MixMailData::~MixMailData() {
  SharedDtor();
}

void MixMailData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MixMailData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MixMailData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MixMailData_descriptor_;
}

const MixMailData& MixMailData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mysql_5fdb_2eproto();
  return *default_instance_;
}

MixMailData* MixMailData::default_instance_ = NULL;

MixMailData* MixMailData::New() const {
  return new MixMailData;
}

void MixMailData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MixMailData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MixMailData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MixMailData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MixMailData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MixMailData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MixMailData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MixMailData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MixMailData::MergeFrom(const MixMailData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MixMailData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MixMailData::CopyFrom(const MixMailData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MixMailData::IsInitialized() const {

  return true;
}

void MixMailData::Swap(MixMailData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MixMailData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MixMailData_descriptor_;
  metadata.reflection = MixMailData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int table_mail::kMailidFieldNumber;
const int table_mail::kOwneridFieldNumber;
const int table_mail::kMixinfoFieldNumber;
const int table_mail::kMailTypeFieldNumber;
#endif  // !_MSC_VER

table_mail::table_mail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void table_mail::InitAsDefaultInstance() {
  mixinfo_ = const_cast< ::proto::message::MixMailData*>(&::proto::message::MixMailData::default_instance());
}

table_mail::table_mail(const table_mail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void table_mail::SharedCtor() {
  _cached_size_ = 0;
  mailid_ = GOOGLE_ULONGLONG(0);
  ownerid_ = GOOGLE_ULONGLONG(0);
  mixinfo_ = NULL;
  mail_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

table_mail::~table_mail() {
  SharedDtor();
}

void table_mail::SharedDtor() {
  if (this != default_instance_) {
    delete mixinfo_;
  }
}

void table_mail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* table_mail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return table_mail_descriptor_;
}

const table_mail& table_mail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mysql_5fdb_2eproto();
  return *default_instance_;
}

table_mail* table_mail::default_instance_ = NULL;

table_mail* table_mail::New() const {
  return new table_mail;
}

void table_mail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mailid_ = GOOGLE_ULONGLONG(0);
    ownerid_ = GOOGLE_ULONGLONG(0);
    if (has_mixinfo()) {
      if (mixinfo_ != NULL) mixinfo_->::proto::message::MixMailData::Clear();
    }
    mail_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool table_mail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 mailid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mailid_)));
          set_has_mailid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ownerid;
        break;
      }

      // optional uint64 ownerid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ownerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ownerid_)));
          set_has_ownerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_mixinfo;
        break;
      }

      // optional .proto.message.MixMailData mixinfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mixinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mixinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_mail_type;
        break;
      }

      // optional uint32 mail_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mail_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mail_type_)));
          set_has_mail_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void table_mail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 mailid = 1;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->mailid(), output);
  }

  // optional uint64 ownerid = 2;
  if (has_ownerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->ownerid(), output);
  }

  // optional .proto.message.MixMailData mixinfo = 3;
  if (has_mixinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->mixinfo(), output);
  }

  // optional uint32 mail_type = 4;
  if (has_mail_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->mail_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* table_mail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 mailid = 1;
  if (has_mailid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->mailid(), target);
  }

  // optional uint64 ownerid = 2;
  if (has_ownerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->ownerid(), target);
  }

  // optional .proto.message.MixMailData mixinfo = 3;
  if (has_mixinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->mixinfo(), target);
  }

  // optional uint32 mail_type = 4;
  if (has_mail_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->mail_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int table_mail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 mailid = 1;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mailid());
    }

    // optional uint64 ownerid = 2;
    if (has_ownerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ownerid());
    }

    // optional .proto.message.MixMailData mixinfo = 3;
    if (has_mixinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mixinfo());
    }

    // optional uint32 mail_type = 4;
    if (has_mail_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mail_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void table_mail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const table_mail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const table_mail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void table_mail::MergeFrom(const table_mail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mailid()) {
      set_mailid(from.mailid());
    }
    if (from.has_ownerid()) {
      set_ownerid(from.ownerid());
    }
    if (from.has_mixinfo()) {
      mutable_mixinfo()->::proto::message::MixMailData::MergeFrom(from.mixinfo());
    }
    if (from.has_mail_type()) {
      set_mail_type(from.mail_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void table_mail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void table_mail::CopyFrom(const table_mail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool table_mail::IsInitialized() const {

  return true;
}

void table_mail::Swap(table_mail* other) {
  if (other != this) {
    std::swap(mailid_, other->mailid_);
    std::swap(ownerid_, other->ownerid_);
    std::swap(mixinfo_, other->mixinfo_);
    std::swap(mail_type_, other->mail_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata table_mail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = table_mail_descriptor_;
  metadata.reflection = table_mail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int query_mail_cond::kMailidFieldNumber;
#endif  // !_MSC_VER

query_mail_cond::query_mail_cond()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void query_mail_cond::InitAsDefaultInstance() {
}

query_mail_cond::query_mail_cond(const query_mail_cond& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void query_mail_cond::SharedCtor() {
  _cached_size_ = 0;
  mailid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

query_mail_cond::~query_mail_cond() {
  SharedDtor();
}

void query_mail_cond::SharedDtor() {
  if (this != default_instance_) {
  }
}

void query_mail_cond::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* query_mail_cond::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return query_mail_cond_descriptor_;
}

const query_mail_cond& query_mail_cond::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mysql_5fdb_2eproto();
  return *default_instance_;
}

query_mail_cond* query_mail_cond::default_instance_ = NULL;

query_mail_cond* query_mail_cond::New() const {
  return new query_mail_cond;
}

void query_mail_cond::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mailid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool query_mail_cond::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 mailid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mailid_)));
          set_has_mailid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void query_mail_cond::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 mailid = 1;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->mailid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* query_mail_cond::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 mailid = 1;
  if (has_mailid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->mailid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int query_mail_cond::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 mailid = 1;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mailid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void query_mail_cond::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const query_mail_cond* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const query_mail_cond*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void query_mail_cond::MergeFrom(const query_mail_cond& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mailid()) {
      set_mailid(from.mailid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void query_mail_cond::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void query_mail_cond::CopyFrom(const query_mail_cond& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool query_mail_cond::IsInitialized() const {

  return true;
}

void query_mail_cond::Swap(query_mail_cond* other) {
  if (other != this) {
    std::swap(mailid_, other->mailid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata query_mail_cond::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = query_mail_cond_descriptor_;
  metadata.reflection = query_mail_cond_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int query_mail::kDbBaseFieldNumber;
const int query_mail::kDbFieldsFieldNumber;
const int query_mail::kDbCondFieldNumber;
#endif  // !_MSC_VER

query_mail::query_mail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void query_mail::InitAsDefaultInstance() {
  db_base_ = const_cast< ::proto::message::message_db_base*>(&::proto::message::message_db_base::default_instance());
  db_fields_ = const_cast< ::proto::message::table_mail*>(&::proto::message::table_mail::default_instance());
  db_cond_ = const_cast< ::proto::message::query_mail_cond*>(&::proto::message::query_mail_cond::default_instance());
}

query_mail::query_mail(const query_mail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void query_mail::SharedCtor() {
  _cached_size_ = 0;
  db_base_ = NULL;
  db_fields_ = NULL;
  db_cond_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

query_mail::~query_mail() {
  SharedDtor();
}

void query_mail::SharedDtor() {
  if (this != default_instance_) {
    delete db_base_;
    delete db_fields_;
    delete db_cond_;
  }
}

void query_mail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* query_mail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return query_mail_descriptor_;
}

const query_mail& query_mail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mysql_5fdb_2eproto();
  return *default_instance_;
}

query_mail* query_mail::default_instance_ = NULL;

query_mail* query_mail::New() const {
  return new query_mail;
}

void query_mail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_db_base()) {
      if (db_base_ != NULL) db_base_->::proto::message::message_db_base::Clear();
    }
    if (has_db_fields()) {
      if (db_fields_ != NULL) db_fields_->::proto::message::table_mail::Clear();
    }
    if (has_db_cond()) {
      if (db_cond_ != NULL) db_cond_->::proto::message::query_mail_cond::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool query_mail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.message.message_db_base db_base = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_db_base()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_db_fields;
        break;
      }

      // optional .proto.message.table_mail db_fields = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_db_fields:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_db_fields()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_db_cond;
        break;
      }

      // optional .proto.message.query_mail_cond db_cond = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_db_cond:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_db_cond()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void query_mail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto.message.message_db_base db_base = 1;
  if (has_db_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->db_base(), output);
  }

  // optional .proto.message.table_mail db_fields = 2;
  if (has_db_fields()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->db_fields(), output);
  }

  // optional .proto.message.query_mail_cond db_cond = 3;
  if (has_db_cond()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->db_cond(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* query_mail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto.message.message_db_base db_base = 1;
  if (has_db_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->db_base(), target);
  }

  // optional .proto.message.table_mail db_fields = 2;
  if (has_db_fields()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->db_fields(), target);
  }

  // optional .proto.message.query_mail_cond db_cond = 3;
  if (has_db_cond()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->db_cond(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int query_mail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto.message.message_db_base db_base = 1;
    if (has_db_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->db_base());
    }

    // optional .proto.message.table_mail db_fields = 2;
    if (has_db_fields()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->db_fields());
    }

    // optional .proto.message.query_mail_cond db_cond = 3;
    if (has_db_cond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->db_cond());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void query_mail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const query_mail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const query_mail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void query_mail::MergeFrom(const query_mail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_db_base()) {
      mutable_db_base()->::proto::message::message_db_base::MergeFrom(from.db_base());
    }
    if (from.has_db_fields()) {
      mutable_db_fields()->::proto::message::table_mail::MergeFrom(from.db_fields());
    }
    if (from.has_db_cond()) {
      mutable_db_cond()->::proto::message::query_mail_cond::MergeFrom(from.db_cond());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void query_mail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void query_mail::CopyFrom(const query_mail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool query_mail::IsInitialized() const {

  return true;
}

void query_mail::Swap(query_mail* other) {
  if (other != this) {
    std::swap(db_base_, other->db_base_);
    std::swap(db_fields_, other->db_fields_);
    std::swap(db_cond_, other->db_cond_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata query_mail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = query_mail_descriptor_;
  metadata.reflection = query_mail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int update_mail::kDbBaseFieldNumber;
const int update_mail::kDbFieldsFieldNumber;
#endif  // !_MSC_VER

update_mail::update_mail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void update_mail::InitAsDefaultInstance() {
  db_base_ = const_cast< ::proto::message::message_db_base*>(&::proto::message::message_db_base::default_instance());
  db_fields_ = const_cast< ::proto::message::table_mail*>(&::proto::message::table_mail::default_instance());
}

update_mail::update_mail(const update_mail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void update_mail::SharedCtor() {
  _cached_size_ = 0;
  db_base_ = NULL;
  db_fields_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

update_mail::~update_mail() {
  SharedDtor();
}

void update_mail::SharedDtor() {
  if (this != default_instance_) {
    delete db_base_;
    delete db_fields_;
  }
}

void update_mail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* update_mail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return update_mail_descriptor_;
}

const update_mail& update_mail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mysql_5fdb_2eproto();
  return *default_instance_;
}

update_mail* update_mail::default_instance_ = NULL;

update_mail* update_mail::New() const {
  return new update_mail;
}

void update_mail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_db_base()) {
      if (db_base_ != NULL) db_base_->::proto::message::message_db_base::Clear();
    }
    if (has_db_fields()) {
      if (db_fields_ != NULL) db_fields_->::proto::message::table_mail::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool update_mail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.message.message_db_base db_base = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_db_base()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_db_fields;
        break;
      }

      // optional .proto.message.table_mail db_fields = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_db_fields:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_db_fields()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void update_mail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto.message.message_db_base db_base = 1;
  if (has_db_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->db_base(), output);
  }

  // optional .proto.message.table_mail db_fields = 2;
  if (has_db_fields()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->db_fields(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* update_mail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto.message.message_db_base db_base = 1;
  if (has_db_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->db_base(), target);
  }

  // optional .proto.message.table_mail db_fields = 2;
  if (has_db_fields()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->db_fields(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int update_mail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto.message.message_db_base db_base = 1;
    if (has_db_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->db_base());
    }

    // optional .proto.message.table_mail db_fields = 2;
    if (has_db_fields()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->db_fields());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void update_mail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const update_mail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const update_mail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void update_mail::MergeFrom(const update_mail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_db_base()) {
      mutable_db_base()->::proto::message::message_db_base::MergeFrom(from.db_base());
    }
    if (from.has_db_fields()) {
      mutable_db_fields()->::proto::message::table_mail::MergeFrom(from.db_fields());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void update_mail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void update_mail::CopyFrom(const update_mail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool update_mail::IsInitialized() const {

  return true;
}

void update_mail::Swap(update_mail* other) {
  if (other != this) {
    std::swap(db_base_, other->db_base_);
    std::swap(db_fields_, other->db_fields_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata update_mail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = update_mail_descriptor_;
  metadata.reflection = update_mail_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace proto

// @@protoc_insertion_point(global_scope)
