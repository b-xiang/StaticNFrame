// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pet.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "pet.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace message {

namespace {

const ::google::protobuf::Descriptor* ProtoPetEquipCell_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoPetEquipCell_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoPetCellInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoPetCellInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoPetAllCellInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoPetAllCellInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Pet_CS_GetPetInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Pet_CS_GetPetInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Pet_SC_GetPetInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Pet_SC_GetPetInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Pet_SC_UpdateSinglePetInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Pet_SC_UpdateSinglePetInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Pet_CS_OperaCell_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Pet_CS_OperaCell_reflection_ = NULL;
const ::google::protobuf::Descriptor* Pet_SC_OperaCell_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Pet_SC_OperaCell_reflection_ = NULL;
const ::google::protobuf::Descriptor* Pet_CS_PutOnPetEquip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Pet_CS_PutOnPetEquip_reflection_ = NULL;
const ::google::protobuf::Descriptor* Pet_SC_PutOnPetEquip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Pet_SC_PutOnPetEquip_reflection_ = NULL;
const ::google::protobuf::Descriptor* Pet_CS_GetOffPetEquip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Pet_CS_GetOffPetEquip_reflection_ = NULL;
const ::google::protobuf::Descriptor* Pet_SC_GetOffPetEquip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Pet_SC_GetOffPetEquip_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_pet_2eproto() {
  protobuf_AddDesc_pet_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "pet.proto");
  GOOGLE_CHECK(file != NULL);
  ProtoPetEquipCell_descriptor_ = file->message_type(0);
  static const int ProtoPetEquipCell_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPetEquipCell, equipid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPetEquipCell, isopen_),
  };
  ProtoPetEquipCell_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoPetEquipCell_descriptor_,
      ProtoPetEquipCell::default_instance_,
      ProtoPetEquipCell_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPetEquipCell, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPetEquipCell, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoPetEquipCell));
  ProtoPetCellInfo_descriptor_ = file->message_type(1);
  static const int ProtoPetCellInfo_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPetCellInfo, cellid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPetCellInfo, isactive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPetCellInfo, isuse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPetCellInfo, petid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPetCellInfo, strlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPetCellInfo, luckyvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPetCellInfo, skills_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPetCellInfo, activetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPetCellInfo, activenowvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPetCellInfo, equips_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPetCellInfo, petequipgird_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPetCellInfo, eatfoodid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPetCellInfo, eatfoodnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPetCellInfo, ranking_),
  };
  ProtoPetCellInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoPetCellInfo_descriptor_,
      ProtoPetCellInfo::default_instance_,
      ProtoPetCellInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPetCellInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPetCellInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoPetCellInfo));
  ProtoPetAllCellInfo_descriptor_ = file->message_type(2);
  static const int ProtoPetAllCellInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPetAllCellInfo, allinfo_),
  };
  ProtoPetAllCellInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoPetAllCellInfo_descriptor_,
      ProtoPetAllCellInfo::default_instance_,
      ProtoPetAllCellInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPetAllCellInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPetAllCellInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoPetAllCellInfo));
  Pet_CS_GetPetInfo_descriptor_ = file->message_type(3);
  static const int Pet_CS_GetPetInfo_offsets_[1] = {
  };
  Pet_CS_GetPetInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Pet_CS_GetPetInfo_descriptor_,
      Pet_CS_GetPetInfo::default_instance_,
      Pet_CS_GetPetInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pet_CS_GetPetInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pet_CS_GetPetInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Pet_CS_GetPetInfo));
  Pet_SC_GetPetInfo_descriptor_ = file->message_type(4);
  static const int Pet_SC_GetPetInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pet_SC_GetPetInfo, infolist_),
  };
  Pet_SC_GetPetInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Pet_SC_GetPetInfo_descriptor_,
      Pet_SC_GetPetInfo::default_instance_,
      Pet_SC_GetPetInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pet_SC_GetPetInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pet_SC_GetPetInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Pet_SC_GetPetInfo));
  Pet_SC_UpdateSinglePetInfo_descriptor_ = file->message_type(5);
  static const int Pet_SC_UpdateSinglePetInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pet_SC_UpdateSinglePetInfo, info_),
  };
  Pet_SC_UpdateSinglePetInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Pet_SC_UpdateSinglePetInfo_descriptor_,
      Pet_SC_UpdateSinglePetInfo::default_instance_,
      Pet_SC_UpdateSinglePetInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pet_SC_UpdateSinglePetInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pet_SC_UpdateSinglePetInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Pet_SC_UpdateSinglePetInfo));
  Pet_CS_OperaCell_descriptor_ = file->message_type(6);
  static const int Pet_CS_OperaCell_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pet_CS_OperaCell, cellid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pet_CS_OperaCell, operatype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pet_CS_OperaCell, param_),
  };
  Pet_CS_OperaCell_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Pet_CS_OperaCell_descriptor_,
      Pet_CS_OperaCell::default_instance_,
      Pet_CS_OperaCell_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pet_CS_OperaCell, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pet_CS_OperaCell, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Pet_CS_OperaCell));
  Pet_SC_OperaCell_descriptor_ = file->message_type(7);
  static const int Pet_SC_OperaCell_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pet_SC_OperaCell, ret_),
  };
  Pet_SC_OperaCell_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Pet_SC_OperaCell_descriptor_,
      Pet_SC_OperaCell::default_instance_,
      Pet_SC_OperaCell_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pet_SC_OperaCell, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pet_SC_OperaCell, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Pet_SC_OperaCell));
  Pet_CS_PutOnPetEquip_descriptor_ = file->message_type(8);
  static const int Pet_CS_PutOnPetEquip_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pet_CS_PutOnPetEquip, cellid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pet_CS_PutOnPetEquip, uuid_),
  };
  Pet_CS_PutOnPetEquip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Pet_CS_PutOnPetEquip_descriptor_,
      Pet_CS_PutOnPetEquip::default_instance_,
      Pet_CS_PutOnPetEquip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pet_CS_PutOnPetEquip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pet_CS_PutOnPetEquip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Pet_CS_PutOnPetEquip));
  Pet_SC_PutOnPetEquip_descriptor_ = file->message_type(9);
  static const int Pet_SC_PutOnPetEquip_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pet_SC_PutOnPetEquip, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pet_SC_PutOnPetEquip, petcellid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pet_SC_PutOnPetEquip, equip_list_),
  };
  Pet_SC_PutOnPetEquip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Pet_SC_PutOnPetEquip_descriptor_,
      Pet_SC_PutOnPetEquip::default_instance_,
      Pet_SC_PutOnPetEquip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pet_SC_PutOnPetEquip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pet_SC_PutOnPetEquip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Pet_SC_PutOnPetEquip));
  Pet_CS_GetOffPetEquip_descriptor_ = file->message_type(10);
  static const int Pet_CS_GetOffPetEquip_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pet_CS_GetOffPetEquip, cellid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pet_CS_GetOffPetEquip, uuid_),
  };
  Pet_CS_GetOffPetEquip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Pet_CS_GetOffPetEquip_descriptor_,
      Pet_CS_GetOffPetEquip::default_instance_,
      Pet_CS_GetOffPetEquip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pet_CS_GetOffPetEquip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pet_CS_GetOffPetEquip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Pet_CS_GetOffPetEquip));
  Pet_SC_GetOffPetEquip_descriptor_ = file->message_type(11);
  static const int Pet_SC_GetOffPetEquip_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pet_SC_GetOffPetEquip, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pet_SC_GetOffPetEquip, petcellid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pet_SC_GetOffPetEquip, equip_list_),
  };
  Pet_SC_GetOffPetEquip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Pet_SC_GetOffPetEquip_descriptor_,
      Pet_SC_GetOffPetEquip::default_instance_,
      Pet_SC_GetOffPetEquip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pet_SC_GetOffPetEquip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pet_SC_GetOffPetEquip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Pet_SC_GetOffPetEquip));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_pet_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoPetEquipCell_descriptor_, &ProtoPetEquipCell::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoPetCellInfo_descriptor_, &ProtoPetCellInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoPetAllCellInfo_descriptor_, &ProtoPetAllCellInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Pet_CS_GetPetInfo_descriptor_, &Pet_CS_GetPetInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Pet_SC_GetPetInfo_descriptor_, &Pet_SC_GetPetInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Pet_SC_UpdateSinglePetInfo_descriptor_, &Pet_SC_UpdateSinglePetInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Pet_CS_OperaCell_descriptor_, &Pet_CS_OperaCell::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Pet_SC_OperaCell_descriptor_, &Pet_SC_OperaCell::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Pet_CS_PutOnPetEquip_descriptor_, &Pet_CS_PutOnPetEquip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Pet_SC_PutOnPetEquip_descriptor_, &Pet_SC_PutOnPetEquip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Pet_CS_GetOffPetEquip_descriptor_, &Pet_CS_GetOffPetEquip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Pet_SC_GetOffPetEquip_descriptor_, &Pet_SC_GetOffPetEquip::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_pet_2eproto() {
  delete ProtoPetEquipCell::default_instance_;
  delete ProtoPetEquipCell_reflection_;
  delete ProtoPetCellInfo::default_instance_;
  delete ProtoPetCellInfo_reflection_;
  delete ProtoPetAllCellInfo::default_instance_;
  delete ProtoPetAllCellInfo_reflection_;
  delete Pet_CS_GetPetInfo::default_instance_;
  delete Pet_CS_GetPetInfo_reflection_;
  delete Pet_SC_GetPetInfo::default_instance_;
  delete Pet_SC_GetPetInfo_reflection_;
  delete Pet_SC_UpdateSinglePetInfo::default_instance_;
  delete Pet_SC_UpdateSinglePetInfo_reflection_;
  delete Pet_CS_OperaCell::default_instance_;
  delete Pet_CS_OperaCell_reflection_;
  delete Pet_SC_OperaCell::default_instance_;
  delete Pet_SC_OperaCell_reflection_;
  delete Pet_CS_PutOnPetEquip::default_instance_;
  delete Pet_CS_PutOnPetEquip_reflection_;
  delete Pet_SC_PutOnPetEquip::default_instance_;
  delete Pet_SC_PutOnPetEquip_reflection_;
  delete Pet_CS_GetOffPetEquip::default_instance_;
  delete Pet_CS_GetOffPetEquip_reflection_;
  delete Pet_SC_GetOffPetEquip::default_instance_;
  delete Pet_SC_GetOffPetEquip_reflection_;
}

void protobuf_AddDesc_pet_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::proto::message::protobuf_AddDesc_common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tpet.proto\022\rproto.message\032\014common.proto"
    "\"4\n\021ProtoPetEquipCell\022\017\n\007equipid\030\001 \002(\r\022\016"
    "\n\006isOpen\030\002 \002(\010\"\314\002\n\020ProtoPetCellInfo\022\016\n\006c"
    "ellId\030\001 \002(\r\022\020\n\010isActive\030\002 \001(\010\022\r\n\005isUse\030\003"
    " \001(\010\022\r\n\005petId\030\004 \001(\r\022\r\n\005strLv\030\005 \001(\r\022\022\n\nlu"
    "ckyValue\030\006 \001(\r\022\016\n\006skills\030\007 \001(\r\022\022\n\nactive"
    "Type\030\010 \001(\r\022\026\n\016activeNowValue\030\t \001(\r\0220\n\006eq"
    "uips\030\n \003(\0132 .proto.message.ProtoPetEquip"
    "Cell\022/\n\021petequipgird_list\030\013 \003(\0132\024.proto."
    "message.Equip\022\021\n\teatFoodId\030\014 \001(\r\022\022\n\neatF"
    "oodNum\030\r \001(\r\022\017\n\007ranking\030\016 \001(\r\"G\n\023ProtoPe"
    "tAllCellInfo\0220\n\007allInfo\030\001 \003(\0132\037.proto.me"
    "ssage.ProtoPetCellInfo\"\023\n\021Pet_CS_GetPetI"
    "nfo\"F\n\021Pet_SC_GetPetInfo\0221\n\010infoList\030\002 \003"
    "(\0132\037.proto.message.ProtoPetCellInfo\"K\n\032P"
    "et_SC_UpdateSinglePetInfo\022-\n\004info\030\001 \001(\0132"
    "\037.proto.message.ProtoPetCellInfo\"D\n\020Pet_"
    "CS_OperaCell\022\016\n\006cellId\030\001 \002(\r\022\021\n\toperaTyp"
    "e\030\002 \002(\r\022\r\n\005param\030\003 \001(\r\"\037\n\020Pet_SC_OperaCe"
    "ll\022\013\n\003ret\030\001 \002(\005\"4\n\024Pet_CS_PutOnPetEquip\022"
    "\016\n\006cellId\030\001 \002(\r\022\014\n\004uuid\030\002 \002(\004\"c\n\024Pet_SC_"
    "PutOnPetEquip\022\016\n\006result\030\001 \001(\005\022\021\n\tpetCell"
    "Id\030\002 \001(\005\022(\n\nequip_list\030\003 \003(\0132\024.proto.mes"
    "sage.Equip\"5\n\025Pet_CS_GetOffPetEquip\022\016\n\006c"
    "ellID\030\001 \001(\r\022\014\n\004uuid\030\002 \002(\004\"d\n\025Pet_SC_GetO"
    "ffPetEquip\022\016\n\006result\030\001 \001(\005\022\021\n\tpetCellId\030"
    "\002 \001(\005\022(\n\nequip_list\030\003 \001(\0132\024.proto.messag"
    "e.EquipB\017\n\rproto.message", 1104);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "pet.proto", &protobuf_RegisterTypes);
  ProtoPetEquipCell::default_instance_ = new ProtoPetEquipCell();
  ProtoPetCellInfo::default_instance_ = new ProtoPetCellInfo();
  ProtoPetAllCellInfo::default_instance_ = new ProtoPetAllCellInfo();
  Pet_CS_GetPetInfo::default_instance_ = new Pet_CS_GetPetInfo();
  Pet_SC_GetPetInfo::default_instance_ = new Pet_SC_GetPetInfo();
  Pet_SC_UpdateSinglePetInfo::default_instance_ = new Pet_SC_UpdateSinglePetInfo();
  Pet_CS_OperaCell::default_instance_ = new Pet_CS_OperaCell();
  Pet_SC_OperaCell::default_instance_ = new Pet_SC_OperaCell();
  Pet_CS_PutOnPetEquip::default_instance_ = new Pet_CS_PutOnPetEquip();
  Pet_SC_PutOnPetEquip::default_instance_ = new Pet_SC_PutOnPetEquip();
  Pet_CS_GetOffPetEquip::default_instance_ = new Pet_CS_GetOffPetEquip();
  Pet_SC_GetOffPetEquip::default_instance_ = new Pet_SC_GetOffPetEquip();
  ProtoPetEquipCell::default_instance_->InitAsDefaultInstance();
  ProtoPetCellInfo::default_instance_->InitAsDefaultInstance();
  ProtoPetAllCellInfo::default_instance_->InitAsDefaultInstance();
  Pet_CS_GetPetInfo::default_instance_->InitAsDefaultInstance();
  Pet_SC_GetPetInfo::default_instance_->InitAsDefaultInstance();
  Pet_SC_UpdateSinglePetInfo::default_instance_->InitAsDefaultInstance();
  Pet_CS_OperaCell::default_instance_->InitAsDefaultInstance();
  Pet_SC_OperaCell::default_instance_->InitAsDefaultInstance();
  Pet_CS_PutOnPetEquip::default_instance_->InitAsDefaultInstance();
  Pet_SC_PutOnPetEquip::default_instance_->InitAsDefaultInstance();
  Pet_CS_GetOffPetEquip::default_instance_->InitAsDefaultInstance();
  Pet_SC_GetOffPetEquip::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_pet_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_pet_2eproto {
  StaticDescriptorInitializer_pet_2eproto() {
    protobuf_AddDesc_pet_2eproto();
  }
} static_descriptor_initializer_pet_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ProtoPetEquipCell::kEquipidFieldNumber;
const int ProtoPetEquipCell::kIsOpenFieldNumber;
#endif  // !_MSC_VER

ProtoPetEquipCell::ProtoPetEquipCell()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoPetEquipCell::InitAsDefaultInstance() {
}

ProtoPetEquipCell::ProtoPetEquipCell(const ProtoPetEquipCell& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoPetEquipCell::SharedCtor() {
  _cached_size_ = 0;
  equipid_ = 0u;
  isopen_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoPetEquipCell::~ProtoPetEquipCell() {
  SharedDtor();
}

void ProtoPetEquipCell::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoPetEquipCell::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoPetEquipCell::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoPetEquipCell_descriptor_;
}

const ProtoPetEquipCell& ProtoPetEquipCell::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pet_2eproto();
  return *default_instance_;
}

ProtoPetEquipCell* ProtoPetEquipCell::default_instance_ = NULL;

ProtoPetEquipCell* ProtoPetEquipCell::New() const {
  return new ProtoPetEquipCell;
}

void ProtoPetEquipCell::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    equipid_ = 0u;
    isopen_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoPetEquipCell::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 equipid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &equipid_)));
          set_has_equipid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isOpen;
        break;
      }

      // required bool isOpen = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isOpen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isopen_)));
          set_has_isopen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoPetEquipCell::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 equipid = 1;
  if (has_equipid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->equipid(), output);
  }

  // required bool isOpen = 2;
  if (has_isopen()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isopen(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoPetEquipCell::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 equipid = 1;
  if (has_equipid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->equipid(), target);
  }

  // required bool isOpen = 2;
  if (has_isopen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isopen(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoPetEquipCell::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 equipid = 1;
    if (has_equipid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->equipid());
    }

    // required bool isOpen = 2;
    if (has_isopen()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoPetEquipCell::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoPetEquipCell* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoPetEquipCell*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoPetEquipCell::MergeFrom(const ProtoPetEquipCell& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equipid()) {
      set_equipid(from.equipid());
    }
    if (from.has_isopen()) {
      set_isopen(from.isopen());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoPetEquipCell::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoPetEquipCell::CopyFrom(const ProtoPetEquipCell& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoPetEquipCell::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ProtoPetEquipCell::Swap(ProtoPetEquipCell* other) {
  if (other != this) {
    std::swap(equipid_, other->equipid_);
    std::swap(isopen_, other->isopen_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoPetEquipCell::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoPetEquipCell_descriptor_;
  metadata.reflection = ProtoPetEquipCell_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoPetCellInfo::kCellIdFieldNumber;
const int ProtoPetCellInfo::kIsActiveFieldNumber;
const int ProtoPetCellInfo::kIsUseFieldNumber;
const int ProtoPetCellInfo::kPetIdFieldNumber;
const int ProtoPetCellInfo::kStrLvFieldNumber;
const int ProtoPetCellInfo::kLuckyValueFieldNumber;
const int ProtoPetCellInfo::kSkillsFieldNumber;
const int ProtoPetCellInfo::kActiveTypeFieldNumber;
const int ProtoPetCellInfo::kActiveNowValueFieldNumber;
const int ProtoPetCellInfo::kEquipsFieldNumber;
const int ProtoPetCellInfo::kPetequipgirdListFieldNumber;
const int ProtoPetCellInfo::kEatFoodIdFieldNumber;
const int ProtoPetCellInfo::kEatFoodNumFieldNumber;
const int ProtoPetCellInfo::kRankingFieldNumber;
#endif  // !_MSC_VER

ProtoPetCellInfo::ProtoPetCellInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoPetCellInfo::InitAsDefaultInstance() {
}

ProtoPetCellInfo::ProtoPetCellInfo(const ProtoPetCellInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoPetCellInfo::SharedCtor() {
  _cached_size_ = 0;
  cellid_ = 0u;
  isactive_ = false;
  isuse_ = false;
  petid_ = 0u;
  strlv_ = 0u;
  luckyvalue_ = 0u;
  skills_ = 0u;
  activetype_ = 0u;
  activenowvalue_ = 0u;
  eatfoodid_ = 0u;
  eatfoodnum_ = 0u;
  ranking_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoPetCellInfo::~ProtoPetCellInfo() {
  SharedDtor();
}

void ProtoPetCellInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoPetCellInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoPetCellInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoPetCellInfo_descriptor_;
}

const ProtoPetCellInfo& ProtoPetCellInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pet_2eproto();
  return *default_instance_;
}

ProtoPetCellInfo* ProtoPetCellInfo::default_instance_ = NULL;

ProtoPetCellInfo* ProtoPetCellInfo::New() const {
  return new ProtoPetCellInfo;
}

void ProtoPetCellInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cellid_ = 0u;
    isactive_ = false;
    isuse_ = false;
    petid_ = 0u;
    strlv_ = 0u;
    luckyvalue_ = 0u;
    skills_ = 0u;
    activetype_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    activenowvalue_ = 0u;
    eatfoodid_ = 0u;
    eatfoodnum_ = 0u;
    ranking_ = 0u;
  }
  equips_.Clear();
  petequipgird_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoPetCellInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cellId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cellid_)));
          set_has_cellid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isActive;
        break;
      }

      // optional bool isActive = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isActive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isactive_)));
          set_has_isactive();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_isUse;
        break;
      }

      // optional bool isUse = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isUse:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isuse_)));
          set_has_isuse();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_petId;
        break;
      }

      // optional uint32 petId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_petId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &petid_)));
          set_has_petid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_strLv;
        break;
      }

      // optional uint32 strLv = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_strLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &strlv_)));
          set_has_strlv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_luckyValue;
        break;
      }

      // optional uint32 luckyValue = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_luckyValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &luckyvalue_)));
          set_has_luckyvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_skills;
        break;
      }

      // optional uint32 skills = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skills:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skills_)));
          set_has_skills();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_activeType;
        break;
      }

      // optional uint32 activeType = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_activeType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &activetype_)));
          set_has_activetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_activeNowValue;
        break;
      }

      // optional uint32 activeNowValue = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_activeNowValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &activenowvalue_)));
          set_has_activenowvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_equips;
        break;
      }

      // repeated .proto.message.ProtoPetEquipCell equips = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equips:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equips()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_equips;
        if (input->ExpectTag(90)) goto parse_petequipgird_list;
        break;
      }

      // repeated .proto.message.Equip petequipgird_list = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_petequipgird_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_petequipgird_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_petequipgird_list;
        if (input->ExpectTag(96)) goto parse_eatFoodId;
        break;
      }

      // optional uint32 eatFoodId = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eatFoodId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eatfoodid_)));
          set_has_eatfoodid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_eatFoodNum;
        break;
      }

      // optional uint32 eatFoodNum = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eatFoodNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eatfoodnum_)));
          set_has_eatfoodnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_ranking;
        break;
      }

      // optional uint32 ranking = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ranking:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ranking_)));
          set_has_ranking();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoPetCellInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 cellId = 1;
  if (has_cellid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cellid(), output);
  }

  // optional bool isActive = 2;
  if (has_isactive()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isactive(), output);
  }

  // optional bool isUse = 3;
  if (has_isuse()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isuse(), output);
  }

  // optional uint32 petId = 4;
  if (has_petid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->petid(), output);
  }

  // optional uint32 strLv = 5;
  if (has_strlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->strlv(), output);
  }

  // optional uint32 luckyValue = 6;
  if (has_luckyvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->luckyvalue(), output);
  }

  // optional uint32 skills = 7;
  if (has_skills()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->skills(), output);
  }

  // optional uint32 activeType = 8;
  if (has_activetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->activetype(), output);
  }

  // optional uint32 activeNowValue = 9;
  if (has_activenowvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->activenowvalue(), output);
  }

  // repeated .proto.message.ProtoPetEquipCell equips = 10;
  for (int i = 0; i < this->equips_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->equips(i), output);
  }

  // repeated .proto.message.Equip petequipgird_list = 11;
  for (int i = 0; i < this->petequipgird_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->petequipgird_list(i), output);
  }

  // optional uint32 eatFoodId = 12;
  if (has_eatfoodid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->eatfoodid(), output);
  }

  // optional uint32 eatFoodNum = 13;
  if (has_eatfoodnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->eatfoodnum(), output);
  }

  // optional uint32 ranking = 14;
  if (has_ranking()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->ranking(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoPetCellInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 cellId = 1;
  if (has_cellid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cellid(), target);
  }

  // optional bool isActive = 2;
  if (has_isactive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isactive(), target);
  }

  // optional bool isUse = 3;
  if (has_isuse()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isuse(), target);
  }

  // optional uint32 petId = 4;
  if (has_petid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->petid(), target);
  }

  // optional uint32 strLv = 5;
  if (has_strlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->strlv(), target);
  }

  // optional uint32 luckyValue = 6;
  if (has_luckyvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->luckyvalue(), target);
  }

  // optional uint32 skills = 7;
  if (has_skills()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->skills(), target);
  }

  // optional uint32 activeType = 8;
  if (has_activetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->activetype(), target);
  }

  // optional uint32 activeNowValue = 9;
  if (has_activenowvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->activenowvalue(), target);
  }

  // repeated .proto.message.ProtoPetEquipCell equips = 10;
  for (int i = 0; i < this->equips_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->equips(i), target);
  }

  // repeated .proto.message.Equip petequipgird_list = 11;
  for (int i = 0; i < this->petequipgird_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->petequipgird_list(i), target);
  }

  // optional uint32 eatFoodId = 12;
  if (has_eatfoodid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->eatfoodid(), target);
  }

  // optional uint32 eatFoodNum = 13;
  if (has_eatfoodnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->eatfoodnum(), target);
  }

  // optional uint32 ranking = 14;
  if (has_ranking()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->ranking(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoPetCellInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cellId = 1;
    if (has_cellid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cellid());
    }

    // optional bool isActive = 2;
    if (has_isactive()) {
      total_size += 1 + 1;
    }

    // optional bool isUse = 3;
    if (has_isuse()) {
      total_size += 1 + 1;
    }

    // optional uint32 petId = 4;
    if (has_petid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->petid());
    }

    // optional uint32 strLv = 5;
    if (has_strlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->strlv());
    }

    // optional uint32 luckyValue = 6;
    if (has_luckyvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->luckyvalue());
    }

    // optional uint32 skills = 7;
    if (has_skills()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skills());
    }

    // optional uint32 activeType = 8;
    if (has_activetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->activetype());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 activeNowValue = 9;
    if (has_activenowvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->activenowvalue());
    }

    // optional uint32 eatFoodId = 12;
    if (has_eatfoodid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eatfoodid());
    }

    // optional uint32 eatFoodNum = 13;
    if (has_eatfoodnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eatfoodnum());
    }

    // optional uint32 ranking = 14;
    if (has_ranking()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ranking());
    }

  }
  // repeated .proto.message.ProtoPetEquipCell equips = 10;
  total_size += 1 * this->equips_size();
  for (int i = 0; i < this->equips_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equips(i));
  }

  // repeated .proto.message.Equip petequipgird_list = 11;
  total_size += 1 * this->petequipgird_list_size();
  for (int i = 0; i < this->petequipgird_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->petequipgird_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoPetCellInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoPetCellInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoPetCellInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoPetCellInfo::MergeFrom(const ProtoPetCellInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  equips_.MergeFrom(from.equips_);
  petequipgird_list_.MergeFrom(from.petequipgird_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cellid()) {
      set_cellid(from.cellid());
    }
    if (from.has_isactive()) {
      set_isactive(from.isactive());
    }
    if (from.has_isuse()) {
      set_isuse(from.isuse());
    }
    if (from.has_petid()) {
      set_petid(from.petid());
    }
    if (from.has_strlv()) {
      set_strlv(from.strlv());
    }
    if (from.has_luckyvalue()) {
      set_luckyvalue(from.luckyvalue());
    }
    if (from.has_skills()) {
      set_skills(from.skills());
    }
    if (from.has_activetype()) {
      set_activetype(from.activetype());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_activenowvalue()) {
      set_activenowvalue(from.activenowvalue());
    }
    if (from.has_eatfoodid()) {
      set_eatfoodid(from.eatfoodid());
    }
    if (from.has_eatfoodnum()) {
      set_eatfoodnum(from.eatfoodnum());
    }
    if (from.has_ranking()) {
      set_ranking(from.ranking());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoPetCellInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoPetCellInfo::CopyFrom(const ProtoPetCellInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoPetCellInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < equips_size(); i++) {
    if (!this->equips(i).IsInitialized()) return false;
  }
  return true;
}

void ProtoPetCellInfo::Swap(ProtoPetCellInfo* other) {
  if (other != this) {
    std::swap(cellid_, other->cellid_);
    std::swap(isactive_, other->isactive_);
    std::swap(isuse_, other->isuse_);
    std::swap(petid_, other->petid_);
    std::swap(strlv_, other->strlv_);
    std::swap(luckyvalue_, other->luckyvalue_);
    std::swap(skills_, other->skills_);
    std::swap(activetype_, other->activetype_);
    std::swap(activenowvalue_, other->activenowvalue_);
    equips_.Swap(&other->equips_);
    petequipgird_list_.Swap(&other->petequipgird_list_);
    std::swap(eatfoodid_, other->eatfoodid_);
    std::swap(eatfoodnum_, other->eatfoodnum_);
    std::swap(ranking_, other->ranking_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoPetCellInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoPetCellInfo_descriptor_;
  metadata.reflection = ProtoPetCellInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoPetAllCellInfo::kAllInfoFieldNumber;
#endif  // !_MSC_VER

ProtoPetAllCellInfo::ProtoPetAllCellInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoPetAllCellInfo::InitAsDefaultInstance() {
}

ProtoPetAllCellInfo::ProtoPetAllCellInfo(const ProtoPetAllCellInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoPetAllCellInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoPetAllCellInfo::~ProtoPetAllCellInfo() {
  SharedDtor();
}

void ProtoPetAllCellInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoPetAllCellInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoPetAllCellInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoPetAllCellInfo_descriptor_;
}

const ProtoPetAllCellInfo& ProtoPetAllCellInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pet_2eproto();
  return *default_instance_;
}

ProtoPetAllCellInfo* ProtoPetAllCellInfo::default_instance_ = NULL;

ProtoPetAllCellInfo* ProtoPetAllCellInfo::New() const {
  return new ProtoPetAllCellInfo;
}

void ProtoPetAllCellInfo::Clear() {
  allinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoPetAllCellInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.message.ProtoPetCellInfo allInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_allInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_allinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_allInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoPetAllCellInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.message.ProtoPetCellInfo allInfo = 1;
  for (int i = 0; i < this->allinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->allinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoPetAllCellInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.message.ProtoPetCellInfo allInfo = 1;
  for (int i = 0; i < this->allinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->allinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoPetAllCellInfo::ByteSize() const {
  int total_size = 0;

  // repeated .proto.message.ProtoPetCellInfo allInfo = 1;
  total_size += 1 * this->allinfo_size();
  for (int i = 0; i < this->allinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->allinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoPetAllCellInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoPetAllCellInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoPetAllCellInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoPetAllCellInfo::MergeFrom(const ProtoPetAllCellInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  allinfo_.MergeFrom(from.allinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoPetAllCellInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoPetAllCellInfo::CopyFrom(const ProtoPetAllCellInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoPetAllCellInfo::IsInitialized() const {

  for (int i = 0; i < allinfo_size(); i++) {
    if (!this->allinfo(i).IsInitialized()) return false;
  }
  return true;
}

void ProtoPetAllCellInfo::Swap(ProtoPetAllCellInfo* other) {
  if (other != this) {
    allinfo_.Swap(&other->allinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoPetAllCellInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoPetAllCellInfo_descriptor_;
  metadata.reflection = ProtoPetAllCellInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Pet_CS_GetPetInfo::Pet_CS_GetPetInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Pet_CS_GetPetInfo::InitAsDefaultInstance() {
}

Pet_CS_GetPetInfo::Pet_CS_GetPetInfo(const Pet_CS_GetPetInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Pet_CS_GetPetInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Pet_CS_GetPetInfo::~Pet_CS_GetPetInfo() {
  SharedDtor();
}

void Pet_CS_GetPetInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Pet_CS_GetPetInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pet_CS_GetPetInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pet_CS_GetPetInfo_descriptor_;
}

const Pet_CS_GetPetInfo& Pet_CS_GetPetInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pet_2eproto();
  return *default_instance_;
}

Pet_CS_GetPetInfo* Pet_CS_GetPetInfo::default_instance_ = NULL;

Pet_CS_GetPetInfo* Pet_CS_GetPetInfo::New() const {
  return new Pet_CS_GetPetInfo;
}

void Pet_CS_GetPetInfo::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Pet_CS_GetPetInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Pet_CS_GetPetInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Pet_CS_GetPetInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Pet_CS_GetPetInfo::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pet_CS_GetPetInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Pet_CS_GetPetInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Pet_CS_GetPetInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Pet_CS_GetPetInfo::MergeFrom(const Pet_CS_GetPetInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Pet_CS_GetPetInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pet_CS_GetPetInfo::CopyFrom(const Pet_CS_GetPetInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pet_CS_GetPetInfo::IsInitialized() const {

  return true;
}

void Pet_CS_GetPetInfo::Swap(Pet_CS_GetPetInfo* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Pet_CS_GetPetInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Pet_CS_GetPetInfo_descriptor_;
  metadata.reflection = Pet_CS_GetPetInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Pet_SC_GetPetInfo::kInfoListFieldNumber;
#endif  // !_MSC_VER

Pet_SC_GetPetInfo::Pet_SC_GetPetInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Pet_SC_GetPetInfo::InitAsDefaultInstance() {
}

Pet_SC_GetPetInfo::Pet_SC_GetPetInfo(const Pet_SC_GetPetInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Pet_SC_GetPetInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Pet_SC_GetPetInfo::~Pet_SC_GetPetInfo() {
  SharedDtor();
}

void Pet_SC_GetPetInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Pet_SC_GetPetInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pet_SC_GetPetInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pet_SC_GetPetInfo_descriptor_;
}

const Pet_SC_GetPetInfo& Pet_SC_GetPetInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pet_2eproto();
  return *default_instance_;
}

Pet_SC_GetPetInfo* Pet_SC_GetPetInfo::default_instance_ = NULL;

Pet_SC_GetPetInfo* Pet_SC_GetPetInfo::New() const {
  return new Pet_SC_GetPetInfo;
}

void Pet_SC_GetPetInfo::Clear() {
  infolist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Pet_SC_GetPetInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.message.ProtoPetCellInfo infoList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infoList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infolist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_infoList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Pet_SC_GetPetInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.message.ProtoPetCellInfo infoList = 2;
  for (int i = 0; i < this->infolist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->infolist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Pet_SC_GetPetInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.message.ProtoPetCellInfo infoList = 2;
  for (int i = 0; i < this->infolist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->infolist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Pet_SC_GetPetInfo::ByteSize() const {
  int total_size = 0;

  // repeated .proto.message.ProtoPetCellInfo infoList = 2;
  total_size += 1 * this->infolist_size();
  for (int i = 0; i < this->infolist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infolist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pet_SC_GetPetInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Pet_SC_GetPetInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Pet_SC_GetPetInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Pet_SC_GetPetInfo::MergeFrom(const Pet_SC_GetPetInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  infolist_.MergeFrom(from.infolist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Pet_SC_GetPetInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pet_SC_GetPetInfo::CopyFrom(const Pet_SC_GetPetInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pet_SC_GetPetInfo::IsInitialized() const {

  for (int i = 0; i < infolist_size(); i++) {
    if (!this->infolist(i).IsInitialized()) return false;
  }
  return true;
}

void Pet_SC_GetPetInfo::Swap(Pet_SC_GetPetInfo* other) {
  if (other != this) {
    infolist_.Swap(&other->infolist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Pet_SC_GetPetInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Pet_SC_GetPetInfo_descriptor_;
  metadata.reflection = Pet_SC_GetPetInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Pet_SC_UpdateSinglePetInfo::kInfoFieldNumber;
#endif  // !_MSC_VER

Pet_SC_UpdateSinglePetInfo::Pet_SC_UpdateSinglePetInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Pet_SC_UpdateSinglePetInfo::InitAsDefaultInstance() {
  info_ = const_cast< ::proto::message::ProtoPetCellInfo*>(&::proto::message::ProtoPetCellInfo::default_instance());
}

Pet_SC_UpdateSinglePetInfo::Pet_SC_UpdateSinglePetInfo(const Pet_SC_UpdateSinglePetInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Pet_SC_UpdateSinglePetInfo::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Pet_SC_UpdateSinglePetInfo::~Pet_SC_UpdateSinglePetInfo() {
  SharedDtor();
}

void Pet_SC_UpdateSinglePetInfo::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void Pet_SC_UpdateSinglePetInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pet_SC_UpdateSinglePetInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pet_SC_UpdateSinglePetInfo_descriptor_;
}

const Pet_SC_UpdateSinglePetInfo& Pet_SC_UpdateSinglePetInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pet_2eproto();
  return *default_instance_;
}

Pet_SC_UpdateSinglePetInfo* Pet_SC_UpdateSinglePetInfo::default_instance_ = NULL;

Pet_SC_UpdateSinglePetInfo* Pet_SC_UpdateSinglePetInfo::New() const {
  return new Pet_SC_UpdateSinglePetInfo;
}

void Pet_SC_UpdateSinglePetInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != NULL) info_->::proto::message::ProtoPetCellInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Pet_SC_UpdateSinglePetInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.message.ProtoPetCellInfo info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Pet_SC_UpdateSinglePetInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto.message.ProtoPetCellInfo info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Pet_SC_UpdateSinglePetInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto.message.ProtoPetCellInfo info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Pet_SC_UpdateSinglePetInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto.message.ProtoPetCellInfo info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pet_SC_UpdateSinglePetInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Pet_SC_UpdateSinglePetInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Pet_SC_UpdateSinglePetInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Pet_SC_UpdateSinglePetInfo::MergeFrom(const Pet_SC_UpdateSinglePetInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::proto::message::ProtoPetCellInfo::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Pet_SC_UpdateSinglePetInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pet_SC_UpdateSinglePetInfo::CopyFrom(const Pet_SC_UpdateSinglePetInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pet_SC_UpdateSinglePetInfo::IsInitialized() const {

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void Pet_SC_UpdateSinglePetInfo::Swap(Pet_SC_UpdateSinglePetInfo* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Pet_SC_UpdateSinglePetInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Pet_SC_UpdateSinglePetInfo_descriptor_;
  metadata.reflection = Pet_SC_UpdateSinglePetInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Pet_CS_OperaCell::kCellIdFieldNumber;
const int Pet_CS_OperaCell::kOperaTypeFieldNumber;
const int Pet_CS_OperaCell::kParamFieldNumber;
#endif  // !_MSC_VER

Pet_CS_OperaCell::Pet_CS_OperaCell()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Pet_CS_OperaCell::InitAsDefaultInstance() {
}

Pet_CS_OperaCell::Pet_CS_OperaCell(const Pet_CS_OperaCell& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Pet_CS_OperaCell::SharedCtor() {
  _cached_size_ = 0;
  cellid_ = 0u;
  operatype_ = 0u;
  param_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Pet_CS_OperaCell::~Pet_CS_OperaCell() {
  SharedDtor();
}

void Pet_CS_OperaCell::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Pet_CS_OperaCell::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pet_CS_OperaCell::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pet_CS_OperaCell_descriptor_;
}

const Pet_CS_OperaCell& Pet_CS_OperaCell::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pet_2eproto();
  return *default_instance_;
}

Pet_CS_OperaCell* Pet_CS_OperaCell::default_instance_ = NULL;

Pet_CS_OperaCell* Pet_CS_OperaCell::New() const {
  return new Pet_CS_OperaCell;
}

void Pet_CS_OperaCell::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cellid_ = 0u;
    operatype_ = 0u;
    param_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Pet_CS_OperaCell::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cellId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cellid_)));
          set_has_cellid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_operaType;
        break;
      }

      // required uint32 operaType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_operaType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &operatype_)));
          set_has_operatype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_param;
        break;
      }

      // optional uint32 param = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &param_)));
          set_has_param();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Pet_CS_OperaCell::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 cellId = 1;
  if (has_cellid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cellid(), output);
  }

  // required uint32 operaType = 2;
  if (has_operatype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->operatype(), output);
  }

  // optional uint32 param = 3;
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Pet_CS_OperaCell::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 cellId = 1;
  if (has_cellid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cellid(), target);
  }

  // required uint32 operaType = 2;
  if (has_operatype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->operatype(), target);
  }

  // optional uint32 param = 3;
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Pet_CS_OperaCell::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cellId = 1;
    if (has_cellid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cellid());
    }

    // required uint32 operaType = 2;
    if (has_operatype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->operatype());
    }

    // optional uint32 param = 3;
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pet_CS_OperaCell::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Pet_CS_OperaCell* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Pet_CS_OperaCell*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Pet_CS_OperaCell::MergeFrom(const Pet_CS_OperaCell& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cellid()) {
      set_cellid(from.cellid());
    }
    if (from.has_operatype()) {
      set_operatype(from.operatype());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Pet_CS_OperaCell::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pet_CS_OperaCell::CopyFrom(const Pet_CS_OperaCell& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pet_CS_OperaCell::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Pet_CS_OperaCell::Swap(Pet_CS_OperaCell* other) {
  if (other != this) {
    std::swap(cellid_, other->cellid_);
    std::swap(operatype_, other->operatype_);
    std::swap(param_, other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Pet_CS_OperaCell::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Pet_CS_OperaCell_descriptor_;
  metadata.reflection = Pet_CS_OperaCell_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Pet_SC_OperaCell::kRetFieldNumber;
#endif  // !_MSC_VER

Pet_SC_OperaCell::Pet_SC_OperaCell()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Pet_SC_OperaCell::InitAsDefaultInstance() {
}

Pet_SC_OperaCell::Pet_SC_OperaCell(const Pet_SC_OperaCell& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Pet_SC_OperaCell::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Pet_SC_OperaCell::~Pet_SC_OperaCell() {
  SharedDtor();
}

void Pet_SC_OperaCell::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Pet_SC_OperaCell::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pet_SC_OperaCell::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pet_SC_OperaCell_descriptor_;
}

const Pet_SC_OperaCell& Pet_SC_OperaCell::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pet_2eproto();
  return *default_instance_;
}

Pet_SC_OperaCell* Pet_SC_OperaCell::default_instance_ = NULL;

Pet_SC_OperaCell* Pet_SC_OperaCell::New() const {
  return new Pet_SC_OperaCell;
}

void Pet_SC_OperaCell::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Pet_SC_OperaCell::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Pet_SC_OperaCell::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Pet_SC_OperaCell::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Pet_SC_OperaCell::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pet_SC_OperaCell::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Pet_SC_OperaCell* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Pet_SC_OperaCell*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Pet_SC_OperaCell::MergeFrom(const Pet_SC_OperaCell& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Pet_SC_OperaCell::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pet_SC_OperaCell::CopyFrom(const Pet_SC_OperaCell& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pet_SC_OperaCell::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Pet_SC_OperaCell::Swap(Pet_SC_OperaCell* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Pet_SC_OperaCell::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Pet_SC_OperaCell_descriptor_;
  metadata.reflection = Pet_SC_OperaCell_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Pet_CS_PutOnPetEquip::kCellIdFieldNumber;
const int Pet_CS_PutOnPetEquip::kUuidFieldNumber;
#endif  // !_MSC_VER

Pet_CS_PutOnPetEquip::Pet_CS_PutOnPetEquip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Pet_CS_PutOnPetEquip::InitAsDefaultInstance() {
}

Pet_CS_PutOnPetEquip::Pet_CS_PutOnPetEquip(const Pet_CS_PutOnPetEquip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Pet_CS_PutOnPetEquip::SharedCtor() {
  _cached_size_ = 0;
  cellid_ = 0u;
  uuid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Pet_CS_PutOnPetEquip::~Pet_CS_PutOnPetEquip() {
  SharedDtor();
}

void Pet_CS_PutOnPetEquip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Pet_CS_PutOnPetEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pet_CS_PutOnPetEquip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pet_CS_PutOnPetEquip_descriptor_;
}

const Pet_CS_PutOnPetEquip& Pet_CS_PutOnPetEquip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pet_2eproto();
  return *default_instance_;
}

Pet_CS_PutOnPetEquip* Pet_CS_PutOnPetEquip::default_instance_ = NULL;

Pet_CS_PutOnPetEquip* Pet_CS_PutOnPetEquip::New() const {
  return new Pet_CS_PutOnPetEquip;
}

void Pet_CS_PutOnPetEquip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cellid_ = 0u;
    uuid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Pet_CS_PutOnPetEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cellId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cellid_)));
          set_has_cellid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uuid;
        break;
      }

      // required uint64 uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Pet_CS_PutOnPetEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 cellId = 1;
  if (has_cellid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cellid(), output);
  }

  // required uint64 uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Pet_CS_PutOnPetEquip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 cellId = 1;
  if (has_cellid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cellid(), target);
  }

  // required uint64 uuid = 2;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Pet_CS_PutOnPetEquip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cellId = 1;
    if (has_cellid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cellid());
    }

    // required uint64 uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pet_CS_PutOnPetEquip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Pet_CS_PutOnPetEquip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Pet_CS_PutOnPetEquip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Pet_CS_PutOnPetEquip::MergeFrom(const Pet_CS_PutOnPetEquip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cellid()) {
      set_cellid(from.cellid());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Pet_CS_PutOnPetEquip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pet_CS_PutOnPetEquip::CopyFrom(const Pet_CS_PutOnPetEquip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pet_CS_PutOnPetEquip::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Pet_CS_PutOnPetEquip::Swap(Pet_CS_PutOnPetEquip* other) {
  if (other != this) {
    std::swap(cellid_, other->cellid_);
    std::swap(uuid_, other->uuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Pet_CS_PutOnPetEquip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Pet_CS_PutOnPetEquip_descriptor_;
  metadata.reflection = Pet_CS_PutOnPetEquip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Pet_SC_PutOnPetEquip::kResultFieldNumber;
const int Pet_SC_PutOnPetEquip::kPetCellIdFieldNumber;
const int Pet_SC_PutOnPetEquip::kEquipListFieldNumber;
#endif  // !_MSC_VER

Pet_SC_PutOnPetEquip::Pet_SC_PutOnPetEquip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Pet_SC_PutOnPetEquip::InitAsDefaultInstance() {
}

Pet_SC_PutOnPetEquip::Pet_SC_PutOnPetEquip(const Pet_SC_PutOnPetEquip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Pet_SC_PutOnPetEquip::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  petcellid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Pet_SC_PutOnPetEquip::~Pet_SC_PutOnPetEquip() {
  SharedDtor();
}

void Pet_SC_PutOnPetEquip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Pet_SC_PutOnPetEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pet_SC_PutOnPetEquip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pet_SC_PutOnPetEquip_descriptor_;
}

const Pet_SC_PutOnPetEquip& Pet_SC_PutOnPetEquip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pet_2eproto();
  return *default_instance_;
}

Pet_SC_PutOnPetEquip* Pet_SC_PutOnPetEquip::default_instance_ = NULL;

Pet_SC_PutOnPetEquip* Pet_SC_PutOnPetEquip::New() const {
  return new Pet_SC_PutOnPetEquip;
}

void Pet_SC_PutOnPetEquip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    petcellid_ = 0;
  }
  equip_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Pet_SC_PutOnPetEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_petCellId;
        break;
      }

      // optional int32 petCellId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_petCellId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &petcellid_)));
          set_has_petcellid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_equip_list;
        break;
      }

      // repeated .proto.message.Equip equip_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equip_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_equip_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Pet_SC_PutOnPetEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 petCellId = 2;
  if (has_petcellid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->petcellid(), output);
  }

  // repeated .proto.message.Equip equip_list = 3;
  for (int i = 0; i < this->equip_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->equip_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Pet_SC_PutOnPetEquip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 petCellId = 2;
  if (has_petcellid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->petcellid(), target);
  }

  // repeated .proto.message.Equip equip_list = 3;
  for (int i = 0; i < this->equip_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->equip_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Pet_SC_PutOnPetEquip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 petCellId = 2;
    if (has_petcellid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->petcellid());
    }

  }
  // repeated .proto.message.Equip equip_list = 3;
  total_size += 1 * this->equip_list_size();
  for (int i = 0; i < this->equip_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equip_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pet_SC_PutOnPetEquip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Pet_SC_PutOnPetEquip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Pet_SC_PutOnPetEquip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Pet_SC_PutOnPetEquip::MergeFrom(const Pet_SC_PutOnPetEquip& from) {
  GOOGLE_CHECK_NE(&from, this);
  equip_list_.MergeFrom(from.equip_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_petcellid()) {
      set_petcellid(from.petcellid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Pet_SC_PutOnPetEquip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pet_SC_PutOnPetEquip::CopyFrom(const Pet_SC_PutOnPetEquip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pet_SC_PutOnPetEquip::IsInitialized() const {

  return true;
}

void Pet_SC_PutOnPetEquip::Swap(Pet_SC_PutOnPetEquip* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(petcellid_, other->petcellid_);
    equip_list_.Swap(&other->equip_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Pet_SC_PutOnPetEquip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Pet_SC_PutOnPetEquip_descriptor_;
  metadata.reflection = Pet_SC_PutOnPetEquip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Pet_CS_GetOffPetEquip::kCellIDFieldNumber;
const int Pet_CS_GetOffPetEquip::kUuidFieldNumber;
#endif  // !_MSC_VER

Pet_CS_GetOffPetEquip::Pet_CS_GetOffPetEquip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Pet_CS_GetOffPetEquip::InitAsDefaultInstance() {
}

Pet_CS_GetOffPetEquip::Pet_CS_GetOffPetEquip(const Pet_CS_GetOffPetEquip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Pet_CS_GetOffPetEquip::SharedCtor() {
  _cached_size_ = 0;
  cellid_ = 0u;
  uuid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Pet_CS_GetOffPetEquip::~Pet_CS_GetOffPetEquip() {
  SharedDtor();
}

void Pet_CS_GetOffPetEquip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Pet_CS_GetOffPetEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pet_CS_GetOffPetEquip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pet_CS_GetOffPetEquip_descriptor_;
}

const Pet_CS_GetOffPetEquip& Pet_CS_GetOffPetEquip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pet_2eproto();
  return *default_instance_;
}

Pet_CS_GetOffPetEquip* Pet_CS_GetOffPetEquip::default_instance_ = NULL;

Pet_CS_GetOffPetEquip* Pet_CS_GetOffPetEquip::New() const {
  return new Pet_CS_GetOffPetEquip;
}

void Pet_CS_GetOffPetEquip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cellid_ = 0u;
    uuid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Pet_CS_GetOffPetEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 cellID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cellid_)));
          set_has_cellid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uuid;
        break;
      }

      // required uint64 uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Pet_CS_GetOffPetEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 cellID = 1;
  if (has_cellid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cellid(), output);
  }

  // required uint64 uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Pet_CS_GetOffPetEquip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 cellID = 1;
  if (has_cellid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cellid(), target);
  }

  // required uint64 uuid = 2;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Pet_CS_GetOffPetEquip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 cellID = 1;
    if (has_cellid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cellid());
    }

    // required uint64 uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pet_CS_GetOffPetEquip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Pet_CS_GetOffPetEquip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Pet_CS_GetOffPetEquip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Pet_CS_GetOffPetEquip::MergeFrom(const Pet_CS_GetOffPetEquip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cellid()) {
      set_cellid(from.cellid());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Pet_CS_GetOffPetEquip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pet_CS_GetOffPetEquip::CopyFrom(const Pet_CS_GetOffPetEquip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pet_CS_GetOffPetEquip::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void Pet_CS_GetOffPetEquip::Swap(Pet_CS_GetOffPetEquip* other) {
  if (other != this) {
    std::swap(cellid_, other->cellid_);
    std::swap(uuid_, other->uuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Pet_CS_GetOffPetEquip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Pet_CS_GetOffPetEquip_descriptor_;
  metadata.reflection = Pet_CS_GetOffPetEquip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Pet_SC_GetOffPetEquip::kResultFieldNumber;
const int Pet_SC_GetOffPetEquip::kPetCellIdFieldNumber;
const int Pet_SC_GetOffPetEquip::kEquipListFieldNumber;
#endif  // !_MSC_VER

Pet_SC_GetOffPetEquip::Pet_SC_GetOffPetEquip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Pet_SC_GetOffPetEquip::InitAsDefaultInstance() {
  equip_list_ = const_cast< ::proto::message::Equip*>(&::proto::message::Equip::default_instance());
}

Pet_SC_GetOffPetEquip::Pet_SC_GetOffPetEquip(const Pet_SC_GetOffPetEquip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Pet_SC_GetOffPetEquip::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  petcellid_ = 0;
  equip_list_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Pet_SC_GetOffPetEquip::~Pet_SC_GetOffPetEquip() {
  SharedDtor();
}

void Pet_SC_GetOffPetEquip::SharedDtor() {
  if (this != default_instance_) {
    delete equip_list_;
  }
}

void Pet_SC_GetOffPetEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pet_SC_GetOffPetEquip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pet_SC_GetOffPetEquip_descriptor_;
}

const Pet_SC_GetOffPetEquip& Pet_SC_GetOffPetEquip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pet_2eproto();
  return *default_instance_;
}

Pet_SC_GetOffPetEquip* Pet_SC_GetOffPetEquip::default_instance_ = NULL;

Pet_SC_GetOffPetEquip* Pet_SC_GetOffPetEquip::New() const {
  return new Pet_SC_GetOffPetEquip;
}

void Pet_SC_GetOffPetEquip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    petcellid_ = 0;
    if (has_equip_list()) {
      if (equip_list_ != NULL) equip_list_->::proto::message::Equip::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Pet_SC_GetOffPetEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_petCellId;
        break;
      }

      // optional int32 petCellId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_petCellId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &petcellid_)));
          set_has_petcellid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_equip_list;
        break;
      }

      // optional .proto.message.Equip equip_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equip_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Pet_SC_GetOffPetEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 petCellId = 2;
  if (has_petcellid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->petcellid(), output);
  }

  // optional .proto.message.Equip equip_list = 3;
  if (has_equip_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->equip_list(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Pet_SC_GetOffPetEquip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 petCellId = 2;
  if (has_petcellid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->petcellid(), target);
  }

  // optional .proto.message.Equip equip_list = 3;
  if (has_equip_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->equip_list(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Pet_SC_GetOffPetEquip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 petCellId = 2;
    if (has_petcellid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->petcellid());
    }

    // optional .proto.message.Equip equip_list = 3;
    if (has_equip_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equip_list());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pet_SC_GetOffPetEquip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Pet_SC_GetOffPetEquip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Pet_SC_GetOffPetEquip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Pet_SC_GetOffPetEquip::MergeFrom(const Pet_SC_GetOffPetEquip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_petcellid()) {
      set_petcellid(from.petcellid());
    }
    if (from.has_equip_list()) {
      mutable_equip_list()->::proto::message::Equip::MergeFrom(from.equip_list());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Pet_SC_GetOffPetEquip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pet_SC_GetOffPetEquip::CopyFrom(const Pet_SC_GetOffPetEquip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pet_SC_GetOffPetEquip::IsInitialized() const {

  return true;
}

void Pet_SC_GetOffPetEquip::Swap(Pet_SC_GetOffPetEquip* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(petcellid_, other->petcellid_);
    std::swap(equip_list_, other->equip_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Pet_SC_GetOffPetEquip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Pet_SC_GetOffPetEquip_descriptor_;
  metadata.reflection = Pet_SC_GetOffPetEquip_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace proto

// @@protoc_insertion_point(global_scope)
