// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: shop.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "shop.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace message {

namespace {

const ::google::protobuf::Descriptor* Shop_CS_GetShopInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Shop_CS_GetShopInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShopItemBuy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShopItemBuy_reflection_ = NULL;
const ::google::protobuf::Descriptor* TimeLimitCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TimeLimitCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* Shop_SC_GetShopInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Shop_SC_GetShopInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Shop_CS_GetShopItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Shop_CS_GetShopItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShopItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShopItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* Shop_SC_GetShopItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Shop_SC_GetShopItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* Shop_CS_GetRechargeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Shop_CS_GetRechargeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Shop_SC_GetRechargeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Shop_SC_GetRechargeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Shop_CS_Recharge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Shop_CS_Recharge_reflection_ = NULL;
const ::google::protobuf::Descriptor* Shop_SC_Recharge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Shop_SC_Recharge_reflection_ = NULL;
const ::google::protobuf::Descriptor* Shop_CS_GetMallItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Shop_CS_GetMallItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuyInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuyInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MallItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MallItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* Shop_SC_GetMallItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Shop_SC_GetMallItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* Shop_CS_BuyMallItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Shop_CS_BuyMallItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* Shop_SC_BuyMallItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Shop_SC_BuyMallItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* Shop_CS_BuyShopItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Shop_CS_BuyShopItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* Shop_SC_BuyShopItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Shop_SC_BuyShopItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* Shop_CS_GetSellPrice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Shop_CS_GetSellPrice_reflection_ = NULL;
const ::google::protobuf::Descriptor* IDPrice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IDPrice_reflection_ = NULL;
const ::google::protobuf::Descriptor* Shop_SC_GetSellPrice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Shop_SC_GetSellPrice_reflection_ = NULL;
const ::google::protobuf::Descriptor* Shop_CS_SellShopItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Shop_CS_SellShopItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* Shop_SC_SellShopItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Shop_SC_SellShopItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* Shop_CS_GetMallInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Shop_CS_GetMallInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MallItemBuy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MallItemBuy_reflection_ = NULL;
const ::google::protobuf::Descriptor* Shop_SC_GetMallInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Shop_SC_GetMallInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Shop_CS_VIPBuyGift_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Shop_CS_VIPBuyGift_reflection_ = NULL;
const ::google::protobuf::Descriptor* Shop_SC_VIPBuyGift_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Shop_SC_VIPBuyGift_reflection_ = NULL;
const ::google::protobuf::Descriptor* Shop_CS_VIPFreeGift_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Shop_CS_VIPFreeGift_reflection_ = NULL;
const ::google::protobuf::Descriptor* Shop_SC_VIPFreeGift_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Shop_SC_VIPFreeGift_reflection_ = NULL;
const ::google::protobuf::Descriptor* VIPInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VIPInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Platform2Game_Recharge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Platform2Game_Recharge_reflection_ = NULL;
const ::google::protobuf::Descriptor* Shop_CS_GetIntegralInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Shop_CS_GetIntegralInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Shop_SC_GetIntegralInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Shop_SC_GetIntegralInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Shop_CS_TakeTimeLimitCardReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Shop_CS_TakeTimeLimitCardReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* Shop_SC_TakeTimeLimitCardReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Shop_SC_TakeTimeLimitCardReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* SecretItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SecretItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* SecretStoreInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SecretStoreInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuySecretStoreItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuySecretStoreItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* Shop_CS_BuyVipLevel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Shop_CS_BuyVipLevel_reflection_ = NULL;
const ::google::protobuf::Descriptor* Shop_SC_BuyVipLevel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Shop_SC_BuyVipLevel_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_shop_2eproto() {
  protobuf_AddDesc_shop_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "shop.proto");
  GOOGLE_CHECK(file != NULL);
  Shop_CS_GetShopInfo_descriptor_ = file->message_type(0);
  static const int Shop_CS_GetShopInfo_offsets_[1] = {
  };
  Shop_CS_GetShopInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Shop_CS_GetShopInfo_descriptor_,
      Shop_CS_GetShopInfo::default_instance_,
      Shop_CS_GetShopInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_CS_GetShopInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_CS_GetShopInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Shop_CS_GetShopInfo));
  ShopItemBuy_descriptor_ = file->message_type(1);
  static const int ShopItemBuy_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopItemBuy, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopItemBuy, buy_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopItemBuy, sell_times_),
  };
  ShopItemBuy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShopItemBuy_descriptor_,
      ShopItemBuy::default_instance_,
      ShopItemBuy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopItemBuy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopItemBuy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShopItemBuy));
  TimeLimitCard_descriptor_ = file->message_type(2);
  static const int TimeLimitCard_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeLimitCard, cardid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeLimitCard, uiexpiretime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeLimitCard, uitakerewardtime_),
  };
  TimeLimitCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TimeLimitCard_descriptor_,
      TimeLimitCard::default_instance_,
      TimeLimitCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeLimitCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeLimitCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TimeLimitCard));
  Shop_SC_GetShopInfo_descriptor_ = file->message_type(3);
  static const int Shop_SC_GetShopInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_SC_GetShopInfo, shop_item_list_),
  };
  Shop_SC_GetShopInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Shop_SC_GetShopInfo_descriptor_,
      Shop_SC_GetShopInfo::default_instance_,
      Shop_SC_GetShopInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_SC_GetShopInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_SC_GetShopInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Shop_SC_GetShopInfo));
  Shop_CS_GetShopItem_descriptor_ = file->message_type(4);
  static const int Shop_CS_GetShopItem_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_CS_GetShopItem, pro_id_list_),
  };
  Shop_CS_GetShopItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Shop_CS_GetShopItem_descriptor_,
      Shop_CS_GetShopItem::default_instance_,
      Shop_CS_GetShopItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_CS_GetShopItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_CS_GetShopItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Shop_CS_GetShopItem));
  ShopItem_descriptor_ = file->message_type(5);
  static const int ShopItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopItem, pro_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopItem, price_yes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopItem, price_now_),
  };
  ShopItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShopItem_descriptor_,
      ShopItem::default_instance_,
      ShopItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShopItem));
  Shop_SC_GetShopItem_descriptor_ = file->message_type(6);
  static const int Shop_SC_GetShopItem_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_SC_GetShopItem, item_list_),
  };
  Shop_SC_GetShopItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Shop_SC_GetShopItem_descriptor_,
      Shop_SC_GetShopItem::default_instance_,
      Shop_SC_GetShopItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_SC_GetShopItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_SC_GetShopItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Shop_SC_GetShopItem));
  Shop_CS_GetRechargeInfo_descriptor_ = file->message_type(7);
  static const int Shop_CS_GetRechargeInfo_offsets_[1] = {
  };
  Shop_CS_GetRechargeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Shop_CS_GetRechargeInfo_descriptor_,
      Shop_CS_GetRechargeInfo::default_instance_,
      Shop_CS_GetRechargeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_CS_GetRechargeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_CS_GetRechargeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Shop_CS_GetRechargeInfo));
  Shop_SC_GetRechargeInfo_descriptor_ = file->message_type(8);
  static const int Shop_SC_GetRechargeInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_SC_GetRechargeInfo, vip_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_SC_GetRechargeInfo, diamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_SC_GetRechargeInfo, id_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_SC_GetRechargeInfo, card_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_SC_GetRechargeInfo, buy_id_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_SC_GetRechargeInfo, free_id_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_SC_GetRechargeInfo, vip_exp_),
  };
  Shop_SC_GetRechargeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Shop_SC_GetRechargeInfo_descriptor_,
      Shop_SC_GetRechargeInfo::default_instance_,
      Shop_SC_GetRechargeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_SC_GetRechargeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_SC_GetRechargeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Shop_SC_GetRechargeInfo));
  Shop_CS_Recharge_descriptor_ = file->message_type(9);
  static const int Shop_CS_Recharge_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_CS_Recharge, id_),
  };
  Shop_CS_Recharge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Shop_CS_Recharge_descriptor_,
      Shop_CS_Recharge::default_instance_,
      Shop_CS_Recharge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_CS_Recharge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_CS_Recharge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Shop_CS_Recharge));
  Shop_SC_Recharge_descriptor_ = file->message_type(10);
  static const int Shop_SC_Recharge_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_SC_Recharge, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_SC_Recharge, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_SC_Recharge, vip_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_SC_Recharge, diamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_SC_Recharge, month_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_SC_Recharge, month_card_time_),
  };
  Shop_SC_Recharge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Shop_SC_Recharge_descriptor_,
      Shop_SC_Recharge::default_instance_,
      Shop_SC_Recharge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_SC_Recharge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_SC_Recharge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Shop_SC_Recharge));
  Shop_CS_GetMallItem_descriptor_ = file->message_type(11);
  static const int Shop_CS_GetMallItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_CS_GetMallItem, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_CS_GetMallItem, mtype_),
  };
  Shop_CS_GetMallItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Shop_CS_GetMallItem_descriptor_,
      Shop_CS_GetMallItem::default_instance_,
      Shop_CS_GetMallItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_CS_GetMallItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_CS_GetMallItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Shop_CS_GetMallItem));
  BuyInfo_descriptor_ = file->message_type(12);
  static const int BuyInfo_offsets_[1] = {
  };
  BuyInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuyInfo_descriptor_,
      BuyInfo::default_instance_,
      BuyInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuyInfo));
  MallItem_descriptor_ = file->message_type(13);
  static const int MallItem_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallItem, mtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallItem, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallItem, item_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallItem, money_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallItem, money_num_bef_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallItem, money_num_now_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallItem, buy_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallItem, buy_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallItem, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallItem, end_time_),
  };
  MallItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MallItem_descriptor_,
      MallItem::default_instance_,
      MallItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MallItem));
  Shop_SC_GetMallItem_descriptor_ = file->message_type(14);
  static const int Shop_SC_GetMallItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_SC_GetMallItem, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_SC_GetMallItem, mtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_SC_GetMallItem, item_list_),
  };
  Shop_SC_GetMallItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Shop_SC_GetMallItem_descriptor_,
      Shop_SC_GetMallItem::default_instance_,
      Shop_SC_GetMallItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_SC_GetMallItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_SC_GetMallItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Shop_SC_GetMallItem));
  Shop_CS_BuyMallItem_descriptor_ = file->message_type(15);
  static const int Shop_CS_BuyMallItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_CS_BuyMallItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_CS_BuyMallItem, num_),
  };
  Shop_CS_BuyMallItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Shop_CS_BuyMallItem_descriptor_,
      Shop_CS_BuyMallItem::default_instance_,
      Shop_CS_BuyMallItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_CS_BuyMallItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_CS_BuyMallItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Shop_CS_BuyMallItem));
  Shop_SC_BuyMallItem_descriptor_ = file->message_type(16);
  static const int Shop_SC_BuyMallItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_SC_BuyMallItem, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_SC_BuyMallItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_SC_BuyMallItem, buy_num_),
  };
  Shop_SC_BuyMallItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Shop_SC_BuyMallItem_descriptor_,
      Shop_SC_BuyMallItem::default_instance_,
      Shop_SC_BuyMallItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_SC_BuyMallItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_SC_BuyMallItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Shop_SC_BuyMallItem));
  Shop_CS_BuyShopItem_descriptor_ = file->message_type(17);
  static const int Shop_CS_BuyShopItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_CS_BuyShopItem, pro_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_CS_BuyShopItem, buy_num_),
  };
  Shop_CS_BuyShopItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Shop_CS_BuyShopItem_descriptor_,
      Shop_CS_BuyShopItem::default_instance_,
      Shop_CS_BuyShopItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_CS_BuyShopItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_CS_BuyShopItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Shop_CS_BuyShopItem));
  Shop_SC_BuyShopItem_descriptor_ = file->message_type(18);
  static const int Shop_SC_BuyShopItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_SC_BuyShopItem, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_SC_BuyShopItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_SC_BuyShopItem, buy_num_),
  };
  Shop_SC_BuyShopItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Shop_SC_BuyShopItem_descriptor_,
      Shop_SC_BuyShopItem::default_instance_,
      Shop_SC_BuyShopItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_SC_BuyShopItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_SC_BuyShopItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Shop_SC_BuyShopItem));
  Shop_CS_GetSellPrice_descriptor_ = file->message_type(19);
  static const int Shop_CS_GetSellPrice_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_CS_GetSellPrice, id_list_),
  };
  Shop_CS_GetSellPrice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Shop_CS_GetSellPrice_descriptor_,
      Shop_CS_GetSellPrice::default_instance_,
      Shop_CS_GetSellPrice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_CS_GetSellPrice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_CS_GetSellPrice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Shop_CS_GetSellPrice));
  IDPrice_descriptor_ = file->message_type(20);
  static const int IDPrice_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IDPrice, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IDPrice, price_yes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IDPrice, price_now_),
  };
  IDPrice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IDPrice_descriptor_,
      IDPrice::default_instance_,
      IDPrice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IDPrice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IDPrice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IDPrice));
  Shop_SC_GetSellPrice_descriptor_ = file->message_type(21);
  static const int Shop_SC_GetSellPrice_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_SC_GetSellPrice, id_price_list_),
  };
  Shop_SC_GetSellPrice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Shop_SC_GetSellPrice_descriptor_,
      Shop_SC_GetSellPrice::default_instance_,
      Shop_SC_GetSellPrice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_SC_GetSellPrice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_SC_GetSellPrice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Shop_SC_GetSellPrice));
  Shop_CS_SellShopItem_descriptor_ = file->message_type(22);
  static const int Shop_CS_SellShopItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_CS_SellShopItem, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_CS_SellShopItem, num_),
  };
  Shop_CS_SellShopItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Shop_CS_SellShopItem_descriptor_,
      Shop_CS_SellShopItem::default_instance_,
      Shop_CS_SellShopItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_CS_SellShopItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_CS_SellShopItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Shop_CS_SellShopItem));
  Shop_SC_SellShopItem_descriptor_ = file->message_type(23);
  static const int Shop_SC_SellShopItem_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_SC_SellShopItem, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_SC_SellShopItem, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_SC_SellShopItem, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_SC_SellShopItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_SC_SellShopItem, sell_num_),
  };
  Shop_SC_SellShopItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Shop_SC_SellShopItem_descriptor_,
      Shop_SC_SellShopItem::default_instance_,
      Shop_SC_SellShopItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_SC_SellShopItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_SC_SellShopItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Shop_SC_SellShopItem));
  Shop_CS_GetMallInfo_descriptor_ = file->message_type(24);
  static const int Shop_CS_GetMallInfo_offsets_[1] = {
  };
  Shop_CS_GetMallInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Shop_CS_GetMallInfo_descriptor_,
      Shop_CS_GetMallInfo::default_instance_,
      Shop_CS_GetMallInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_CS_GetMallInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_CS_GetMallInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Shop_CS_GetMallInfo));
  MallItemBuy_descriptor_ = file->message_type(25);
  static const int MallItemBuy_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallItemBuy, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallItemBuy, buy_times_),
  };
  MallItemBuy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MallItemBuy_descriptor_,
      MallItemBuy::default_instance_,
      MallItemBuy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallItemBuy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallItemBuy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MallItemBuy));
  Shop_SC_GetMallInfo_descriptor_ = file->message_type(26);
  static const int Shop_SC_GetMallInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_SC_GetMallInfo, mall_item_list_),
  };
  Shop_SC_GetMallInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Shop_SC_GetMallInfo_descriptor_,
      Shop_SC_GetMallInfo::default_instance_,
      Shop_SC_GetMallInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_SC_GetMallInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_SC_GetMallInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Shop_SC_GetMallInfo));
  Shop_CS_VIPBuyGift_descriptor_ = file->message_type(27);
  static const int Shop_CS_VIPBuyGift_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_CS_VIPBuyGift, id_),
  };
  Shop_CS_VIPBuyGift_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Shop_CS_VIPBuyGift_descriptor_,
      Shop_CS_VIPBuyGift::default_instance_,
      Shop_CS_VIPBuyGift_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_CS_VIPBuyGift, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_CS_VIPBuyGift, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Shop_CS_VIPBuyGift));
  Shop_SC_VIPBuyGift_descriptor_ = file->message_type(28);
  static const int Shop_SC_VIPBuyGift_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_SC_VIPBuyGift, result_),
  };
  Shop_SC_VIPBuyGift_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Shop_SC_VIPBuyGift_descriptor_,
      Shop_SC_VIPBuyGift::default_instance_,
      Shop_SC_VIPBuyGift_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_SC_VIPBuyGift, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_SC_VIPBuyGift, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Shop_SC_VIPBuyGift));
  Shop_CS_VIPFreeGift_descriptor_ = file->message_type(29);
  static const int Shop_CS_VIPFreeGift_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_CS_VIPFreeGift, id_),
  };
  Shop_CS_VIPFreeGift_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Shop_CS_VIPFreeGift_descriptor_,
      Shop_CS_VIPFreeGift::default_instance_,
      Shop_CS_VIPFreeGift_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_CS_VIPFreeGift, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_CS_VIPFreeGift, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Shop_CS_VIPFreeGift));
  Shop_SC_VIPFreeGift_descriptor_ = file->message_type(30);
  static const int Shop_SC_VIPFreeGift_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_SC_VIPFreeGift, result_),
  };
  Shop_SC_VIPFreeGift_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Shop_SC_VIPFreeGift_descriptor_,
      Shop_SC_VIPFreeGift::default_instance_,
      Shop_SC_VIPFreeGift_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_SC_VIPFreeGift, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_SC_VIPFreeGift, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Shop_SC_VIPFreeGift));
  VIPInfo_descriptor_ = file->message_type(31);
  static const int VIPInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIPInfo, vip_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIPInfo, diamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIPInfo, id_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIPInfo, vip_buy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIPInfo, recharge_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIPInfo, card_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIPInfo, costdiamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIPInfo, vip_exp_),
  };
  VIPInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VIPInfo_descriptor_,
      VIPInfo::default_instance_,
      VIPInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIPInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIPInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VIPInfo));
  Platform2Game_Recharge_descriptor_ = file->message_type(32);
  static const int Platform2Game_Recharge_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Platform2Game_Recharge, orderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Platform2Game_Recharge, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Platform2Game_Recharge, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Platform2Game_Recharge, itemnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Platform2Game_Recharge, amount_),
  };
  Platform2Game_Recharge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Platform2Game_Recharge_descriptor_,
      Platform2Game_Recharge::default_instance_,
      Platform2Game_Recharge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Platform2Game_Recharge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Platform2Game_Recharge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Platform2Game_Recharge));
  Shop_CS_GetIntegralInfo_descriptor_ = file->message_type(33);
  static const int Shop_CS_GetIntegralInfo_offsets_[1] = {
  };
  Shop_CS_GetIntegralInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Shop_CS_GetIntegralInfo_descriptor_,
      Shop_CS_GetIntegralInfo::default_instance_,
      Shop_CS_GetIntegralInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_CS_GetIntegralInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_CS_GetIntegralInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Shop_CS_GetIntegralInfo));
  Shop_SC_GetIntegralInfo_descriptor_ = file->message_type(34);
  static const int Shop_SC_GetIntegralInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_SC_GetIntegralInfo, integralinfo_),
  };
  Shop_SC_GetIntegralInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Shop_SC_GetIntegralInfo_descriptor_,
      Shop_SC_GetIntegralInfo::default_instance_,
      Shop_SC_GetIntegralInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_SC_GetIntegralInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_SC_GetIntegralInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Shop_SC_GetIntegralInfo));
  Shop_CS_TakeTimeLimitCardReward_descriptor_ = file->message_type(35);
  static const int Shop_CS_TakeTimeLimitCardReward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_CS_TakeTimeLimitCardReward, id_),
  };
  Shop_CS_TakeTimeLimitCardReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Shop_CS_TakeTimeLimitCardReward_descriptor_,
      Shop_CS_TakeTimeLimitCardReward::default_instance_,
      Shop_CS_TakeTimeLimitCardReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_CS_TakeTimeLimitCardReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_CS_TakeTimeLimitCardReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Shop_CS_TakeTimeLimitCardReward));
  Shop_SC_TakeTimeLimitCardReward_descriptor_ = file->message_type(36);
  static const int Shop_SC_TakeTimeLimitCardReward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_SC_TakeTimeLimitCardReward, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_SC_TakeTimeLimitCardReward, id_),
  };
  Shop_SC_TakeTimeLimitCardReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Shop_SC_TakeTimeLimitCardReward_descriptor_,
      Shop_SC_TakeTimeLimitCardReward::default_instance_,
      Shop_SC_TakeTimeLimitCardReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_SC_TakeTimeLimitCardReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_SC_TakeTimeLimitCardReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Shop_SC_TakeTimeLimitCardReward));
  SecretItem_descriptor_ = file->message_type(37);
  static const int SecretItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecretItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecretItem, isbuy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecretItem, pos_),
  };
  SecretItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SecretItem_descriptor_,
      SecretItem::default_instance_,
      SecretItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecretItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecretItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SecretItem));
  SecretStoreInfo_descriptor_ = file->message_type(38);
  static const int SecretStoreInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecretStoreInfo, freerefresh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecretStoreInfo, itemlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecretStoreInfo, freshtime_),
  };
  SecretStoreInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SecretStoreInfo_descriptor_,
      SecretStoreInfo::default_instance_,
      SecretStoreInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecretStoreInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecretStoreInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SecretStoreInfo));
  BuySecretStoreItem_descriptor_ = file->message_type(39);
  static const int BuySecretStoreItem_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuySecretStoreItem, pos_),
  };
  BuySecretStoreItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuySecretStoreItem_descriptor_,
      BuySecretStoreItem::default_instance_,
      BuySecretStoreItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuySecretStoreItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuySecretStoreItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuySecretStoreItem));
  Shop_CS_BuyVipLevel_descriptor_ = file->message_type(40);
  static const int Shop_CS_BuyVipLevel_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_CS_BuyVipLevel, id_),
  };
  Shop_CS_BuyVipLevel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Shop_CS_BuyVipLevel_descriptor_,
      Shop_CS_BuyVipLevel::default_instance_,
      Shop_CS_BuyVipLevel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_CS_BuyVipLevel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_CS_BuyVipLevel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Shop_CS_BuyVipLevel));
  Shop_SC_BuyVipLevel_descriptor_ = file->message_type(41);
  static const int Shop_SC_BuyVipLevel_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_SC_BuyVipLevel, result_),
  };
  Shop_SC_BuyVipLevel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Shop_SC_BuyVipLevel_descriptor_,
      Shop_SC_BuyVipLevel::default_instance_,
      Shop_SC_BuyVipLevel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_SC_BuyVipLevel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_SC_BuyVipLevel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Shop_SC_BuyVipLevel));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_shop_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Shop_CS_GetShopInfo_descriptor_, &Shop_CS_GetShopInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShopItemBuy_descriptor_, &ShopItemBuy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TimeLimitCard_descriptor_, &TimeLimitCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Shop_SC_GetShopInfo_descriptor_, &Shop_SC_GetShopInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Shop_CS_GetShopItem_descriptor_, &Shop_CS_GetShopItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShopItem_descriptor_, &ShopItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Shop_SC_GetShopItem_descriptor_, &Shop_SC_GetShopItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Shop_CS_GetRechargeInfo_descriptor_, &Shop_CS_GetRechargeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Shop_SC_GetRechargeInfo_descriptor_, &Shop_SC_GetRechargeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Shop_CS_Recharge_descriptor_, &Shop_CS_Recharge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Shop_SC_Recharge_descriptor_, &Shop_SC_Recharge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Shop_CS_GetMallItem_descriptor_, &Shop_CS_GetMallItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuyInfo_descriptor_, &BuyInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MallItem_descriptor_, &MallItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Shop_SC_GetMallItem_descriptor_, &Shop_SC_GetMallItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Shop_CS_BuyMallItem_descriptor_, &Shop_CS_BuyMallItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Shop_SC_BuyMallItem_descriptor_, &Shop_SC_BuyMallItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Shop_CS_BuyShopItem_descriptor_, &Shop_CS_BuyShopItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Shop_SC_BuyShopItem_descriptor_, &Shop_SC_BuyShopItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Shop_CS_GetSellPrice_descriptor_, &Shop_CS_GetSellPrice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IDPrice_descriptor_, &IDPrice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Shop_SC_GetSellPrice_descriptor_, &Shop_SC_GetSellPrice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Shop_CS_SellShopItem_descriptor_, &Shop_CS_SellShopItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Shop_SC_SellShopItem_descriptor_, &Shop_SC_SellShopItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Shop_CS_GetMallInfo_descriptor_, &Shop_CS_GetMallInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MallItemBuy_descriptor_, &MallItemBuy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Shop_SC_GetMallInfo_descriptor_, &Shop_SC_GetMallInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Shop_CS_VIPBuyGift_descriptor_, &Shop_CS_VIPBuyGift::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Shop_SC_VIPBuyGift_descriptor_, &Shop_SC_VIPBuyGift::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Shop_CS_VIPFreeGift_descriptor_, &Shop_CS_VIPFreeGift::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Shop_SC_VIPFreeGift_descriptor_, &Shop_SC_VIPFreeGift::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VIPInfo_descriptor_, &VIPInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Platform2Game_Recharge_descriptor_, &Platform2Game_Recharge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Shop_CS_GetIntegralInfo_descriptor_, &Shop_CS_GetIntegralInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Shop_SC_GetIntegralInfo_descriptor_, &Shop_SC_GetIntegralInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Shop_CS_TakeTimeLimitCardReward_descriptor_, &Shop_CS_TakeTimeLimitCardReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Shop_SC_TakeTimeLimitCardReward_descriptor_, &Shop_SC_TakeTimeLimitCardReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SecretItem_descriptor_, &SecretItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SecretStoreInfo_descriptor_, &SecretStoreInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuySecretStoreItem_descriptor_, &BuySecretStoreItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Shop_CS_BuyVipLevel_descriptor_, &Shop_CS_BuyVipLevel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Shop_SC_BuyVipLevel_descriptor_, &Shop_SC_BuyVipLevel::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_shop_2eproto() {
  delete Shop_CS_GetShopInfo::default_instance_;
  delete Shop_CS_GetShopInfo_reflection_;
  delete ShopItemBuy::default_instance_;
  delete ShopItemBuy_reflection_;
  delete TimeLimitCard::default_instance_;
  delete TimeLimitCard_reflection_;
  delete Shop_SC_GetShopInfo::default_instance_;
  delete Shop_SC_GetShopInfo_reflection_;
  delete Shop_CS_GetShopItem::default_instance_;
  delete Shop_CS_GetShopItem_reflection_;
  delete ShopItem::default_instance_;
  delete ShopItem_reflection_;
  delete Shop_SC_GetShopItem::default_instance_;
  delete Shop_SC_GetShopItem_reflection_;
  delete Shop_CS_GetRechargeInfo::default_instance_;
  delete Shop_CS_GetRechargeInfo_reflection_;
  delete Shop_SC_GetRechargeInfo::default_instance_;
  delete Shop_SC_GetRechargeInfo_reflection_;
  delete Shop_CS_Recharge::default_instance_;
  delete Shop_CS_Recharge_reflection_;
  delete Shop_SC_Recharge::default_instance_;
  delete Shop_SC_Recharge_reflection_;
  delete Shop_CS_GetMallItem::default_instance_;
  delete Shop_CS_GetMallItem_reflection_;
  delete BuyInfo::default_instance_;
  delete BuyInfo_reflection_;
  delete MallItem::default_instance_;
  delete MallItem_reflection_;
  delete Shop_SC_GetMallItem::default_instance_;
  delete Shop_SC_GetMallItem_reflection_;
  delete Shop_CS_BuyMallItem::default_instance_;
  delete Shop_CS_BuyMallItem_reflection_;
  delete Shop_SC_BuyMallItem::default_instance_;
  delete Shop_SC_BuyMallItem_reflection_;
  delete Shop_CS_BuyShopItem::default_instance_;
  delete Shop_CS_BuyShopItem_reflection_;
  delete Shop_SC_BuyShopItem::default_instance_;
  delete Shop_SC_BuyShopItem_reflection_;
  delete Shop_CS_GetSellPrice::default_instance_;
  delete Shop_CS_GetSellPrice_reflection_;
  delete IDPrice::default_instance_;
  delete IDPrice_reflection_;
  delete Shop_SC_GetSellPrice::default_instance_;
  delete Shop_SC_GetSellPrice_reflection_;
  delete Shop_CS_SellShopItem::default_instance_;
  delete Shop_CS_SellShopItem_reflection_;
  delete Shop_SC_SellShopItem::default_instance_;
  delete Shop_SC_SellShopItem_reflection_;
  delete Shop_CS_GetMallInfo::default_instance_;
  delete Shop_CS_GetMallInfo_reflection_;
  delete MallItemBuy::default_instance_;
  delete MallItemBuy_reflection_;
  delete Shop_SC_GetMallInfo::default_instance_;
  delete Shop_SC_GetMallInfo_reflection_;
  delete Shop_CS_VIPBuyGift::default_instance_;
  delete Shop_CS_VIPBuyGift_reflection_;
  delete Shop_SC_VIPBuyGift::default_instance_;
  delete Shop_SC_VIPBuyGift_reflection_;
  delete Shop_CS_VIPFreeGift::default_instance_;
  delete Shop_CS_VIPFreeGift_reflection_;
  delete Shop_SC_VIPFreeGift::default_instance_;
  delete Shop_SC_VIPFreeGift_reflection_;
  delete VIPInfo::default_instance_;
  delete VIPInfo_reflection_;
  delete Platform2Game_Recharge::default_instance_;
  delete Platform2Game_Recharge_reflection_;
  delete Shop_CS_GetIntegralInfo::default_instance_;
  delete Shop_CS_GetIntegralInfo_reflection_;
  delete Shop_SC_GetIntegralInfo::default_instance_;
  delete Shop_SC_GetIntegralInfo_reflection_;
  delete Shop_CS_TakeTimeLimitCardReward::default_instance_;
  delete Shop_CS_TakeTimeLimitCardReward_reflection_;
  delete Shop_SC_TakeTimeLimitCardReward::default_instance_;
  delete Shop_SC_TakeTimeLimitCardReward_reflection_;
  delete SecretItem::default_instance_;
  delete SecretItem_reflection_;
  delete SecretStoreInfo::default_instance_;
  delete SecretStoreInfo_reflection_;
  delete BuySecretStoreItem::default_instance_;
  delete BuySecretStoreItem_reflection_;
  delete Shop_CS_BuyVipLevel::default_instance_;
  delete Shop_CS_BuyVipLevel_reflection_;
  delete Shop_SC_BuyVipLevel::default_instance_;
  delete Shop_SC_BuyVipLevel_reflection_;
}

void protobuf_AddDesc_shop_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nshop.proto\022\rproto.message\"\025\n\023Shop_CS_G"
    "etShopInfo\"@\n\013ShopItemBuy\022\n\n\002id\030\001 \001(\005\022\021\n"
    "\tbuy_times\030\002 \001(\005\022\022\n\nsell_times\030\003 \001(\005\"O\n\r"
    "TimeLimitCard\022\016\n\006cardid\030\001 \001(\005\022\024\n\014uiExpir"
    "eTime\030\002 \001(\r\022\030\n\020uiTakeRewardTime\030\003 \001(\r\"I\n"
    "\023Shop_SC_GetShopInfo\0222\n\016shop_item_list\030\001"
    " \003(\0132\032.proto.message.ShopItemBuy\"*\n\023Shop"
    "_CS_GetShopItem\022\023\n\013pro_id_list\030\001 \003(\005\"@\n\010"
    "ShopItem\022\016\n\006pro_id\030\001 \001(\005\022\021\n\tprice_yes\030\002 "
    "\001(\005\022\021\n\tprice_now\030\003 \001(\005\"A\n\023Shop_SC_GetSho"
    "pItem\022*\n\titem_list\030\001 \003(\0132\027.proto.message"
    ".ShopItem\"\031\n\027Shop_CS_GetRechargeInfo\"\273\001\n"
    "\027Shop_SC_GetRechargeInfo\022\021\n\tvip_level\030\001 "
    "\001(\005\022\017\n\007diamond\030\002 \001(\005\022\017\n\007id_list\030\003 \003(\005\022/\n"
    "\tcard_list\030\004 \003(\0132\034.proto.message.TimeLim"
    "itCard\022\023\n\013buy_id_list\030\006 \003(\005\022\024\n\014free_id_l"
    "ist\030\007 \003(\005\022\017\n\007vip_exp\030\010 \001(\003\"\036\n\020Shop_CS_Re"
    "charge\022\n\n\002id\030\001 \001(\005\"\177\n\020Shop_SC_Recharge\022\016"
    "\n\006result\030\001 \001(\005\022\n\n\002id\030\002 \001(\005\022\021\n\tvip_level\030"
    "\003 \001(\005\022\017\n\007diamond\030\004 \001(\005\022\022\n\nmonth_card\030\005 \001"
    "(\005\022\027\n\017month_card_time\030\006 \001(\005\"5\n\023Shop_CS_G"
    "etMallItem\022\017\n\007version\030\001 \001(\005\022\r\n\005mtype\030\002 \001"
    "(\005\"\t\n\007BuyInfo\"\321\001\n\010MallItem\022\n\n\002id\030\001 \001(\005\022\r"
    "\n\005mtype\030\002 \001(\005\022\017\n\007item_id\030\003 \001(\005\022\020\n\010item_n"
    "um\030\004 \001(\005\022\020\n\010money_id\030\005 \001(\005\022\025\n\rmoney_num_"
    "bef\030\006 \001(\005\022\025\n\rmoney_num_now\030\007 \001(\005\022\020\n\010buy_"
    "type\030\010 \001(\005\022\017\n\007buy_num\030\t \001(\005\022\022\n\nstart_tim"
    "e\030\n \001(\005\022\020\n\010end_time\030\013 \001(\005\"a\n\023Shop_SC_Get"
    "MallItem\022\017\n\007version\030\001 \001(\005\022\r\n\005mtype\030\002 \001(\005"
    "\022*\n\titem_list\030\003 \003(\0132\027.proto.message.Mall"
    "Item\".\n\023Shop_CS_BuyMallItem\022\n\n\002id\030\001 \001(\005\022"
    "\013\n\003num\030\002 \001(\005\"B\n\023Shop_SC_BuyMallItem\022\016\n\006r"
    "esult\030\001 \001(\005\022\n\n\002id\030\002 \001(\005\022\017\n\007buy_num\030\003 \001(\005"
    "\"6\n\023Shop_CS_BuyShopItem\022\016\n\006pro_id\030\001 \001(\005\022"
    "\017\n\007buy_num\030\002 \001(\005\"B\n\023Shop_SC_BuyShopItem\022"
    "\016\n\006result\030\001 \001(\005\022\n\n\002id\030\002 \001(\005\022\017\n\007buy_num\030\003"
    " \001(\005\"\'\n\024Shop_CS_GetSellPrice\022\017\n\007id_list\030"
    "\001 \003(\005\";\n\007IDPrice\022\n\n\002id\030\001 \001(\005\022\021\n\tprice_ye"
    "s\030\002 \001(\005\022\021\n\tprice_now\030\003 \001(\005\"E\n\024Shop_SC_Ge"
    "tSellPrice\022-\n\rid_price_list\030\001 \003(\0132\026.prot"
    "o.message.IDPrice\"1\n\024Shop_CS_SellShopIte"
    "m\022\014\n\004uuid\030\001 \001(\004\022\013\n\003num\030\002 \001(\005\"_\n\024Shop_SC_"
    "SellShopItem\022\016\n\006result\030\001 \001(\005\022\014\n\004uuid\030\002 \001"
    "(\004\022\013\n\003num\030\003 \001(\005\022\n\n\002id\030\004 \001(\005\022\020\n\010sell_num\030"
    "\005 \001(\005\"\025\n\023Shop_CS_GetMallInfo\",\n\013MallItem"
    "Buy\022\n\n\002id\030\001 \001(\005\022\021\n\tbuy_times\030\002 \001(\005\"I\n\023Sh"
    "op_SC_GetMallInfo\0222\n\016mall_item_list\030\001 \003("
    "\0132\032.proto.message.MallItemBuy\" \n\022Shop_CS"
    "_VIPBuyGift\022\n\n\002id\030\001 \001(\005\"$\n\022Shop_SC_VIPBu"
    "yGift\022\016\n\006result\030\001 \001(\005\"!\n\023Shop_CS_VIPFree"
    "Gift\022\n\n\002id\030\001 \001(\005\"%\n\023Shop_SC_VIPFreeGift\022"
    "\016\n\006result\030\001 \001(\005\"\275\001\n\007VIPInfo\022\021\n\tvip_level"
    "\030\001 \001(\005\022\017\n\007diamond\030\002 \001(\005\022\017\n\007id_list\030\003 \003(\005"
    "\022\017\n\007vip_buy\030\004 \003(\005\022\025\n\rrecharge_time\030\005 \001(\004"
    "\022/\n\tcard_list\030\006 \003(\0132\034.proto.message.Time"
    "LimitCard\022\023\n\013costdiamond\030\007 \001(\003\022\017\n\007vip_ex"
    "p\030\010 \001(\003\"l\n\026Platform2Game_Recharge\022\017\n\007ord"
    "erId\030\001 \001(\t\022\020\n\010playerId\030\002 \001(\004\022\016\n\006itemId\030\003"
    " \001(\r\022\017\n\007itemNum\030\004 \001(\r\022\016\n\006amount\030\005 \001(\r\"\031\n"
    "\027Shop_CS_GetIntegralInfo\"K\n\027Shop_SC_GetI"
    "ntegralInfo\0220\n\014integralinfo\030\001 \003(\0132\032.prot"
    "o.message.ShopItemBuy\"-\n\037Shop_CS_TakeTim"
    "eLimitCardReward\022\n\n\002id\030\001 \001(\005\"=\n\037Shop_SC_"
    "TakeTimeLimitCardReward\022\016\n\006result\030\001 \001(\005\022"
    "\n\n\002id\030\002 \001(\005\"4\n\nSecretItem\022\n\n\002id\030\001 \001(\r\022\r\n"
    "\005isbuy\030\002 \001(\r\022\013\n\003pos\030\003 \001(\r\"f\n\017SecretStore"
    "Info\022\023\n\013freerefresh\030\001 \001(\005\022+\n\010itemlist\030\002 "
    "\003(\0132\031.proto.message.SecretItem\022\021\n\tfresht"
    "ime\030\003 \001(\004\"!\n\022BuySecretStoreItem\022\013\n\003pos\030\001"
    " \001(\r\"!\n\023Shop_CS_BuyVipLevel\022\n\n\002id\030\001 \002(\005\""
    "%\n\023Shop_SC_BuyVipLevel\022\016\n\006result\030\001 \001(\005B\017"
    "\n\rproto.message", 2855);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "shop.proto", &protobuf_RegisterTypes);
  Shop_CS_GetShopInfo::default_instance_ = new Shop_CS_GetShopInfo();
  ShopItemBuy::default_instance_ = new ShopItemBuy();
  TimeLimitCard::default_instance_ = new TimeLimitCard();
  Shop_SC_GetShopInfo::default_instance_ = new Shop_SC_GetShopInfo();
  Shop_CS_GetShopItem::default_instance_ = new Shop_CS_GetShopItem();
  ShopItem::default_instance_ = new ShopItem();
  Shop_SC_GetShopItem::default_instance_ = new Shop_SC_GetShopItem();
  Shop_CS_GetRechargeInfo::default_instance_ = new Shop_CS_GetRechargeInfo();
  Shop_SC_GetRechargeInfo::default_instance_ = new Shop_SC_GetRechargeInfo();
  Shop_CS_Recharge::default_instance_ = new Shop_CS_Recharge();
  Shop_SC_Recharge::default_instance_ = new Shop_SC_Recharge();
  Shop_CS_GetMallItem::default_instance_ = new Shop_CS_GetMallItem();
  BuyInfo::default_instance_ = new BuyInfo();
  MallItem::default_instance_ = new MallItem();
  Shop_SC_GetMallItem::default_instance_ = new Shop_SC_GetMallItem();
  Shop_CS_BuyMallItem::default_instance_ = new Shop_CS_BuyMallItem();
  Shop_SC_BuyMallItem::default_instance_ = new Shop_SC_BuyMallItem();
  Shop_CS_BuyShopItem::default_instance_ = new Shop_CS_BuyShopItem();
  Shop_SC_BuyShopItem::default_instance_ = new Shop_SC_BuyShopItem();
  Shop_CS_GetSellPrice::default_instance_ = new Shop_CS_GetSellPrice();
  IDPrice::default_instance_ = new IDPrice();
  Shop_SC_GetSellPrice::default_instance_ = new Shop_SC_GetSellPrice();
  Shop_CS_SellShopItem::default_instance_ = new Shop_CS_SellShopItem();
  Shop_SC_SellShopItem::default_instance_ = new Shop_SC_SellShopItem();
  Shop_CS_GetMallInfo::default_instance_ = new Shop_CS_GetMallInfo();
  MallItemBuy::default_instance_ = new MallItemBuy();
  Shop_SC_GetMallInfo::default_instance_ = new Shop_SC_GetMallInfo();
  Shop_CS_VIPBuyGift::default_instance_ = new Shop_CS_VIPBuyGift();
  Shop_SC_VIPBuyGift::default_instance_ = new Shop_SC_VIPBuyGift();
  Shop_CS_VIPFreeGift::default_instance_ = new Shop_CS_VIPFreeGift();
  Shop_SC_VIPFreeGift::default_instance_ = new Shop_SC_VIPFreeGift();
  VIPInfo::default_instance_ = new VIPInfo();
  Platform2Game_Recharge::default_instance_ = new Platform2Game_Recharge();
  Shop_CS_GetIntegralInfo::default_instance_ = new Shop_CS_GetIntegralInfo();
  Shop_SC_GetIntegralInfo::default_instance_ = new Shop_SC_GetIntegralInfo();
  Shop_CS_TakeTimeLimitCardReward::default_instance_ = new Shop_CS_TakeTimeLimitCardReward();
  Shop_SC_TakeTimeLimitCardReward::default_instance_ = new Shop_SC_TakeTimeLimitCardReward();
  SecretItem::default_instance_ = new SecretItem();
  SecretStoreInfo::default_instance_ = new SecretStoreInfo();
  BuySecretStoreItem::default_instance_ = new BuySecretStoreItem();
  Shop_CS_BuyVipLevel::default_instance_ = new Shop_CS_BuyVipLevel();
  Shop_SC_BuyVipLevel::default_instance_ = new Shop_SC_BuyVipLevel();
  Shop_CS_GetShopInfo::default_instance_->InitAsDefaultInstance();
  ShopItemBuy::default_instance_->InitAsDefaultInstance();
  TimeLimitCard::default_instance_->InitAsDefaultInstance();
  Shop_SC_GetShopInfo::default_instance_->InitAsDefaultInstance();
  Shop_CS_GetShopItem::default_instance_->InitAsDefaultInstance();
  ShopItem::default_instance_->InitAsDefaultInstance();
  Shop_SC_GetShopItem::default_instance_->InitAsDefaultInstance();
  Shop_CS_GetRechargeInfo::default_instance_->InitAsDefaultInstance();
  Shop_SC_GetRechargeInfo::default_instance_->InitAsDefaultInstance();
  Shop_CS_Recharge::default_instance_->InitAsDefaultInstance();
  Shop_SC_Recharge::default_instance_->InitAsDefaultInstance();
  Shop_CS_GetMallItem::default_instance_->InitAsDefaultInstance();
  BuyInfo::default_instance_->InitAsDefaultInstance();
  MallItem::default_instance_->InitAsDefaultInstance();
  Shop_SC_GetMallItem::default_instance_->InitAsDefaultInstance();
  Shop_CS_BuyMallItem::default_instance_->InitAsDefaultInstance();
  Shop_SC_BuyMallItem::default_instance_->InitAsDefaultInstance();
  Shop_CS_BuyShopItem::default_instance_->InitAsDefaultInstance();
  Shop_SC_BuyShopItem::default_instance_->InitAsDefaultInstance();
  Shop_CS_GetSellPrice::default_instance_->InitAsDefaultInstance();
  IDPrice::default_instance_->InitAsDefaultInstance();
  Shop_SC_GetSellPrice::default_instance_->InitAsDefaultInstance();
  Shop_CS_SellShopItem::default_instance_->InitAsDefaultInstance();
  Shop_SC_SellShopItem::default_instance_->InitAsDefaultInstance();
  Shop_CS_GetMallInfo::default_instance_->InitAsDefaultInstance();
  MallItemBuy::default_instance_->InitAsDefaultInstance();
  Shop_SC_GetMallInfo::default_instance_->InitAsDefaultInstance();
  Shop_CS_VIPBuyGift::default_instance_->InitAsDefaultInstance();
  Shop_SC_VIPBuyGift::default_instance_->InitAsDefaultInstance();
  Shop_CS_VIPFreeGift::default_instance_->InitAsDefaultInstance();
  Shop_SC_VIPFreeGift::default_instance_->InitAsDefaultInstance();
  VIPInfo::default_instance_->InitAsDefaultInstance();
  Platform2Game_Recharge::default_instance_->InitAsDefaultInstance();
  Shop_CS_GetIntegralInfo::default_instance_->InitAsDefaultInstance();
  Shop_SC_GetIntegralInfo::default_instance_->InitAsDefaultInstance();
  Shop_CS_TakeTimeLimitCardReward::default_instance_->InitAsDefaultInstance();
  Shop_SC_TakeTimeLimitCardReward::default_instance_->InitAsDefaultInstance();
  SecretItem::default_instance_->InitAsDefaultInstance();
  SecretStoreInfo::default_instance_->InitAsDefaultInstance();
  BuySecretStoreItem::default_instance_->InitAsDefaultInstance();
  Shop_CS_BuyVipLevel::default_instance_->InitAsDefaultInstance();
  Shop_SC_BuyVipLevel::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_shop_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_shop_2eproto {
  StaticDescriptorInitializer_shop_2eproto() {
    protobuf_AddDesc_shop_2eproto();
  }
} static_descriptor_initializer_shop_2eproto_;

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Shop_CS_GetShopInfo::Shop_CS_GetShopInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Shop_CS_GetShopInfo::InitAsDefaultInstance() {
}

Shop_CS_GetShopInfo::Shop_CS_GetShopInfo(const Shop_CS_GetShopInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Shop_CS_GetShopInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Shop_CS_GetShopInfo::~Shop_CS_GetShopInfo() {
  SharedDtor();
}

void Shop_CS_GetShopInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Shop_CS_GetShopInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Shop_CS_GetShopInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Shop_CS_GetShopInfo_descriptor_;
}

const Shop_CS_GetShopInfo& Shop_CS_GetShopInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_shop_2eproto();
  return *default_instance_;
}

Shop_CS_GetShopInfo* Shop_CS_GetShopInfo::default_instance_ = NULL;

Shop_CS_GetShopInfo* Shop_CS_GetShopInfo::New() const {
  return new Shop_CS_GetShopInfo;
}

void Shop_CS_GetShopInfo::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Shop_CS_GetShopInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Shop_CS_GetShopInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Shop_CS_GetShopInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Shop_CS_GetShopInfo::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Shop_CS_GetShopInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Shop_CS_GetShopInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Shop_CS_GetShopInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Shop_CS_GetShopInfo::MergeFrom(const Shop_CS_GetShopInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Shop_CS_GetShopInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Shop_CS_GetShopInfo::CopyFrom(const Shop_CS_GetShopInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Shop_CS_GetShopInfo::IsInitialized() const {

  return true;
}

void Shop_CS_GetShopInfo::Swap(Shop_CS_GetShopInfo* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Shop_CS_GetShopInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Shop_CS_GetShopInfo_descriptor_;
  metadata.reflection = Shop_CS_GetShopInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShopItemBuy::kIdFieldNumber;
const int ShopItemBuy::kBuyTimesFieldNumber;
const int ShopItemBuy::kSellTimesFieldNumber;
#endif  // !_MSC_VER

ShopItemBuy::ShopItemBuy()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ShopItemBuy::InitAsDefaultInstance() {
}

ShopItemBuy::ShopItemBuy(const ShopItemBuy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ShopItemBuy::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  buy_times_ = 0;
  sell_times_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShopItemBuy::~ShopItemBuy() {
  SharedDtor();
}

void ShopItemBuy::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShopItemBuy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShopItemBuy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShopItemBuy_descriptor_;
}

const ShopItemBuy& ShopItemBuy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_shop_2eproto();
  return *default_instance_;
}

ShopItemBuy* ShopItemBuy::default_instance_ = NULL;

ShopItemBuy* ShopItemBuy::New() const {
  return new ShopItemBuy;
}

void ShopItemBuy::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    buy_times_ = 0;
    sell_times_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShopItemBuy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_buy_times;
        break;
      }

      // optional int32 buy_times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buy_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buy_times_)));
          set_has_buy_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sell_times;
        break;
      }

      // optional int32 sell_times = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sell_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sell_times_)));
          set_has_sell_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShopItemBuy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 buy_times = 2;
  if (has_buy_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->buy_times(), output);
  }

  // optional int32 sell_times = 3;
  if (has_sell_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sell_times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ShopItemBuy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 buy_times = 2;
  if (has_buy_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->buy_times(), target);
  }

  // optional int32 sell_times = 3;
  if (has_sell_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sell_times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ShopItemBuy::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 buy_times = 2;
    if (has_buy_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buy_times());
    }

    // optional int32 sell_times = 3;
    if (has_sell_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sell_times());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShopItemBuy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShopItemBuy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShopItemBuy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShopItemBuy::MergeFrom(const ShopItemBuy& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_buy_times()) {
      set_buy_times(from.buy_times());
    }
    if (from.has_sell_times()) {
      set_sell_times(from.sell_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShopItemBuy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShopItemBuy::CopyFrom(const ShopItemBuy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShopItemBuy::IsInitialized() const {

  return true;
}

void ShopItemBuy::Swap(ShopItemBuy* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(buy_times_, other->buy_times_);
    std::swap(sell_times_, other->sell_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShopItemBuy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShopItemBuy_descriptor_;
  metadata.reflection = ShopItemBuy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TimeLimitCard::kCardidFieldNumber;
const int TimeLimitCard::kUiExpireTimeFieldNumber;
const int TimeLimitCard::kUiTakeRewardTimeFieldNumber;
#endif  // !_MSC_VER

TimeLimitCard::TimeLimitCard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TimeLimitCard::InitAsDefaultInstance() {
}

TimeLimitCard::TimeLimitCard(const TimeLimitCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TimeLimitCard::SharedCtor() {
  _cached_size_ = 0;
  cardid_ = 0;
  uiexpiretime_ = 0u;
  uitakerewardtime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TimeLimitCard::~TimeLimitCard() {
  SharedDtor();
}

void TimeLimitCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TimeLimitCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimeLimitCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TimeLimitCard_descriptor_;
}

const TimeLimitCard& TimeLimitCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_shop_2eproto();
  return *default_instance_;
}

TimeLimitCard* TimeLimitCard::default_instance_ = NULL;

TimeLimitCard* TimeLimitCard::New() const {
  return new TimeLimitCard;
}

void TimeLimitCard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cardid_ = 0;
    uiexpiretime_ = 0u;
    uitakerewardtime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TimeLimitCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cardid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cardid_)));
          set_has_cardid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uiExpireTime;
        break;
      }

      // optional uint32 uiExpireTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiExpireTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiexpiretime_)));
          set_has_uiexpiretime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uiTakeRewardTime;
        break;
      }

      // optional uint32 uiTakeRewardTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiTakeRewardTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uitakerewardtime_)));
          set_has_uitakerewardtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TimeLimitCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 cardid = 1;
  if (has_cardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cardid(), output);
  }

  // optional uint32 uiExpireTime = 2;
  if (has_uiexpiretime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uiexpiretime(), output);
  }

  // optional uint32 uiTakeRewardTime = 3;
  if (has_uitakerewardtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->uitakerewardtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TimeLimitCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 cardid = 1;
  if (has_cardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cardid(), target);
  }

  // optional uint32 uiExpireTime = 2;
  if (has_uiexpiretime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uiexpiretime(), target);
  }

  // optional uint32 uiTakeRewardTime = 3;
  if (has_uitakerewardtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->uitakerewardtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TimeLimitCard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 cardid = 1;
    if (has_cardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cardid());
    }

    // optional uint32 uiExpireTime = 2;
    if (has_uiexpiretime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiexpiretime());
    }

    // optional uint32 uiTakeRewardTime = 3;
    if (has_uitakerewardtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uitakerewardtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimeLimitCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TimeLimitCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TimeLimitCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TimeLimitCard::MergeFrom(const TimeLimitCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cardid()) {
      set_cardid(from.cardid());
    }
    if (from.has_uiexpiretime()) {
      set_uiexpiretime(from.uiexpiretime());
    }
    if (from.has_uitakerewardtime()) {
      set_uitakerewardtime(from.uitakerewardtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TimeLimitCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeLimitCard::CopyFrom(const TimeLimitCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeLimitCard::IsInitialized() const {

  return true;
}

void TimeLimitCard::Swap(TimeLimitCard* other) {
  if (other != this) {
    std::swap(cardid_, other->cardid_);
    std::swap(uiexpiretime_, other->uiexpiretime_);
    std::swap(uitakerewardtime_, other->uitakerewardtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TimeLimitCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TimeLimitCard_descriptor_;
  metadata.reflection = TimeLimitCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Shop_SC_GetShopInfo::kShopItemListFieldNumber;
#endif  // !_MSC_VER

Shop_SC_GetShopInfo::Shop_SC_GetShopInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Shop_SC_GetShopInfo::InitAsDefaultInstance() {
}

Shop_SC_GetShopInfo::Shop_SC_GetShopInfo(const Shop_SC_GetShopInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Shop_SC_GetShopInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Shop_SC_GetShopInfo::~Shop_SC_GetShopInfo() {
  SharedDtor();
}

void Shop_SC_GetShopInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Shop_SC_GetShopInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Shop_SC_GetShopInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Shop_SC_GetShopInfo_descriptor_;
}

const Shop_SC_GetShopInfo& Shop_SC_GetShopInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_shop_2eproto();
  return *default_instance_;
}

Shop_SC_GetShopInfo* Shop_SC_GetShopInfo::default_instance_ = NULL;

Shop_SC_GetShopInfo* Shop_SC_GetShopInfo::New() const {
  return new Shop_SC_GetShopInfo;
}

void Shop_SC_GetShopInfo::Clear() {
  shop_item_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Shop_SC_GetShopInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.message.ShopItemBuy shop_item_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shop_item_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_shop_item_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_shop_item_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Shop_SC_GetShopInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.message.ShopItemBuy shop_item_list = 1;
  for (int i = 0; i < this->shop_item_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->shop_item_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Shop_SC_GetShopInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.message.ShopItemBuy shop_item_list = 1;
  for (int i = 0; i < this->shop_item_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->shop_item_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Shop_SC_GetShopInfo::ByteSize() const {
  int total_size = 0;

  // repeated .proto.message.ShopItemBuy shop_item_list = 1;
  total_size += 1 * this->shop_item_list_size();
  for (int i = 0; i < this->shop_item_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->shop_item_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Shop_SC_GetShopInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Shop_SC_GetShopInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Shop_SC_GetShopInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Shop_SC_GetShopInfo::MergeFrom(const Shop_SC_GetShopInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  shop_item_list_.MergeFrom(from.shop_item_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Shop_SC_GetShopInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Shop_SC_GetShopInfo::CopyFrom(const Shop_SC_GetShopInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Shop_SC_GetShopInfo::IsInitialized() const {

  return true;
}

void Shop_SC_GetShopInfo::Swap(Shop_SC_GetShopInfo* other) {
  if (other != this) {
    shop_item_list_.Swap(&other->shop_item_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Shop_SC_GetShopInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Shop_SC_GetShopInfo_descriptor_;
  metadata.reflection = Shop_SC_GetShopInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Shop_CS_GetShopItem::kProIdListFieldNumber;
#endif  // !_MSC_VER

Shop_CS_GetShopItem::Shop_CS_GetShopItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Shop_CS_GetShopItem::InitAsDefaultInstance() {
}

Shop_CS_GetShopItem::Shop_CS_GetShopItem(const Shop_CS_GetShopItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Shop_CS_GetShopItem::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Shop_CS_GetShopItem::~Shop_CS_GetShopItem() {
  SharedDtor();
}

void Shop_CS_GetShopItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Shop_CS_GetShopItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Shop_CS_GetShopItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Shop_CS_GetShopItem_descriptor_;
}

const Shop_CS_GetShopItem& Shop_CS_GetShopItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_shop_2eproto();
  return *default_instance_;
}

Shop_CS_GetShopItem* Shop_CS_GetShopItem::default_instance_ = NULL;

Shop_CS_GetShopItem* Shop_CS_GetShopItem::New() const {
  return new Shop_CS_GetShopItem;
}

void Shop_CS_GetShopItem::Clear() {
  pro_id_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Shop_CS_GetShopItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 pro_id_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pro_id_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_pro_id_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_pro_id_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_pro_id_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Shop_CS_GetShopItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 pro_id_list = 1;
  for (int i = 0; i < this->pro_id_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->pro_id_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Shop_CS_GetShopItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 pro_id_list = 1;
  for (int i = 0; i < this->pro_id_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->pro_id_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Shop_CS_GetShopItem::ByteSize() const {
  int total_size = 0;

  // repeated int32 pro_id_list = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->pro_id_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->pro_id_list(i));
    }
    total_size += 1 * this->pro_id_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Shop_CS_GetShopItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Shop_CS_GetShopItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Shop_CS_GetShopItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Shop_CS_GetShopItem::MergeFrom(const Shop_CS_GetShopItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  pro_id_list_.MergeFrom(from.pro_id_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Shop_CS_GetShopItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Shop_CS_GetShopItem::CopyFrom(const Shop_CS_GetShopItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Shop_CS_GetShopItem::IsInitialized() const {

  return true;
}

void Shop_CS_GetShopItem::Swap(Shop_CS_GetShopItem* other) {
  if (other != this) {
    pro_id_list_.Swap(&other->pro_id_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Shop_CS_GetShopItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Shop_CS_GetShopItem_descriptor_;
  metadata.reflection = Shop_CS_GetShopItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShopItem::kProIdFieldNumber;
const int ShopItem::kPriceYesFieldNumber;
const int ShopItem::kPriceNowFieldNumber;
#endif  // !_MSC_VER

ShopItem::ShopItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ShopItem::InitAsDefaultInstance() {
}

ShopItem::ShopItem(const ShopItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ShopItem::SharedCtor() {
  _cached_size_ = 0;
  pro_id_ = 0;
  price_yes_ = 0;
  price_now_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShopItem::~ShopItem() {
  SharedDtor();
}

void ShopItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShopItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShopItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShopItem_descriptor_;
}

const ShopItem& ShopItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_shop_2eproto();
  return *default_instance_;
}

ShopItem* ShopItem::default_instance_ = NULL;

ShopItem* ShopItem::New() const {
  return new ShopItem;
}

void ShopItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pro_id_ = 0;
    price_yes_ = 0;
    price_now_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShopItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 pro_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pro_id_)));
          set_has_pro_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_price_yes;
        break;
      }

      // optional int32 price_yes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price_yes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_yes_)));
          set_has_price_yes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_price_now;
        break;
      }

      // optional int32 price_now = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price_now:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_now_)));
          set_has_price_now();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShopItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 pro_id = 1;
  if (has_pro_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pro_id(), output);
  }

  // optional int32 price_yes = 2;
  if (has_price_yes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->price_yes(), output);
  }

  // optional int32 price_now = 3;
  if (has_price_now()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->price_now(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ShopItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 pro_id = 1;
  if (has_pro_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pro_id(), target);
  }

  // optional int32 price_yes = 2;
  if (has_price_yes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->price_yes(), target);
  }

  // optional int32 price_now = 3;
  if (has_price_now()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->price_now(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ShopItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 pro_id = 1;
    if (has_pro_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pro_id());
    }

    // optional int32 price_yes = 2;
    if (has_price_yes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price_yes());
    }

    // optional int32 price_now = 3;
    if (has_price_now()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price_now());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShopItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShopItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShopItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShopItem::MergeFrom(const ShopItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pro_id()) {
      set_pro_id(from.pro_id());
    }
    if (from.has_price_yes()) {
      set_price_yes(from.price_yes());
    }
    if (from.has_price_now()) {
      set_price_now(from.price_now());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShopItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShopItem::CopyFrom(const ShopItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShopItem::IsInitialized() const {

  return true;
}

void ShopItem::Swap(ShopItem* other) {
  if (other != this) {
    std::swap(pro_id_, other->pro_id_);
    std::swap(price_yes_, other->price_yes_);
    std::swap(price_now_, other->price_now_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShopItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShopItem_descriptor_;
  metadata.reflection = ShopItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Shop_SC_GetShopItem::kItemListFieldNumber;
#endif  // !_MSC_VER

Shop_SC_GetShopItem::Shop_SC_GetShopItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Shop_SC_GetShopItem::InitAsDefaultInstance() {
}

Shop_SC_GetShopItem::Shop_SC_GetShopItem(const Shop_SC_GetShopItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Shop_SC_GetShopItem::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Shop_SC_GetShopItem::~Shop_SC_GetShopItem() {
  SharedDtor();
}

void Shop_SC_GetShopItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Shop_SC_GetShopItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Shop_SC_GetShopItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Shop_SC_GetShopItem_descriptor_;
}

const Shop_SC_GetShopItem& Shop_SC_GetShopItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_shop_2eproto();
  return *default_instance_;
}

Shop_SC_GetShopItem* Shop_SC_GetShopItem::default_instance_ = NULL;

Shop_SC_GetShopItem* Shop_SC_GetShopItem::New() const {
  return new Shop_SC_GetShopItem;
}

void Shop_SC_GetShopItem::Clear() {
  item_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Shop_SC_GetShopItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.message.ShopItem item_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_item_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Shop_SC_GetShopItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.message.ShopItem item_list = 1;
  for (int i = 0; i < this->item_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->item_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Shop_SC_GetShopItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.message.ShopItem item_list = 1;
  for (int i = 0; i < this->item_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->item_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Shop_SC_GetShopItem::ByteSize() const {
  int total_size = 0;

  // repeated .proto.message.ShopItem item_list = 1;
  total_size += 1 * this->item_list_size();
  for (int i = 0; i < this->item_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Shop_SC_GetShopItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Shop_SC_GetShopItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Shop_SC_GetShopItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Shop_SC_GetShopItem::MergeFrom(const Shop_SC_GetShopItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_list_.MergeFrom(from.item_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Shop_SC_GetShopItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Shop_SC_GetShopItem::CopyFrom(const Shop_SC_GetShopItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Shop_SC_GetShopItem::IsInitialized() const {

  return true;
}

void Shop_SC_GetShopItem::Swap(Shop_SC_GetShopItem* other) {
  if (other != this) {
    item_list_.Swap(&other->item_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Shop_SC_GetShopItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Shop_SC_GetShopItem_descriptor_;
  metadata.reflection = Shop_SC_GetShopItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Shop_CS_GetRechargeInfo::Shop_CS_GetRechargeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Shop_CS_GetRechargeInfo::InitAsDefaultInstance() {
}

Shop_CS_GetRechargeInfo::Shop_CS_GetRechargeInfo(const Shop_CS_GetRechargeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Shop_CS_GetRechargeInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Shop_CS_GetRechargeInfo::~Shop_CS_GetRechargeInfo() {
  SharedDtor();
}

void Shop_CS_GetRechargeInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Shop_CS_GetRechargeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Shop_CS_GetRechargeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Shop_CS_GetRechargeInfo_descriptor_;
}

const Shop_CS_GetRechargeInfo& Shop_CS_GetRechargeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_shop_2eproto();
  return *default_instance_;
}

Shop_CS_GetRechargeInfo* Shop_CS_GetRechargeInfo::default_instance_ = NULL;

Shop_CS_GetRechargeInfo* Shop_CS_GetRechargeInfo::New() const {
  return new Shop_CS_GetRechargeInfo;
}

void Shop_CS_GetRechargeInfo::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Shop_CS_GetRechargeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Shop_CS_GetRechargeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Shop_CS_GetRechargeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Shop_CS_GetRechargeInfo::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Shop_CS_GetRechargeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Shop_CS_GetRechargeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Shop_CS_GetRechargeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Shop_CS_GetRechargeInfo::MergeFrom(const Shop_CS_GetRechargeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Shop_CS_GetRechargeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Shop_CS_GetRechargeInfo::CopyFrom(const Shop_CS_GetRechargeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Shop_CS_GetRechargeInfo::IsInitialized() const {

  return true;
}

void Shop_CS_GetRechargeInfo::Swap(Shop_CS_GetRechargeInfo* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Shop_CS_GetRechargeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Shop_CS_GetRechargeInfo_descriptor_;
  metadata.reflection = Shop_CS_GetRechargeInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Shop_SC_GetRechargeInfo::kVipLevelFieldNumber;
const int Shop_SC_GetRechargeInfo::kDiamondFieldNumber;
const int Shop_SC_GetRechargeInfo::kIdListFieldNumber;
const int Shop_SC_GetRechargeInfo::kCardListFieldNumber;
const int Shop_SC_GetRechargeInfo::kBuyIdListFieldNumber;
const int Shop_SC_GetRechargeInfo::kFreeIdListFieldNumber;
const int Shop_SC_GetRechargeInfo::kVipExpFieldNumber;
#endif  // !_MSC_VER

Shop_SC_GetRechargeInfo::Shop_SC_GetRechargeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Shop_SC_GetRechargeInfo::InitAsDefaultInstance() {
}

Shop_SC_GetRechargeInfo::Shop_SC_GetRechargeInfo(const Shop_SC_GetRechargeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Shop_SC_GetRechargeInfo::SharedCtor() {
  _cached_size_ = 0;
  vip_level_ = 0;
  diamond_ = 0;
  vip_exp_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Shop_SC_GetRechargeInfo::~Shop_SC_GetRechargeInfo() {
  SharedDtor();
}

void Shop_SC_GetRechargeInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Shop_SC_GetRechargeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Shop_SC_GetRechargeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Shop_SC_GetRechargeInfo_descriptor_;
}

const Shop_SC_GetRechargeInfo& Shop_SC_GetRechargeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_shop_2eproto();
  return *default_instance_;
}

Shop_SC_GetRechargeInfo* Shop_SC_GetRechargeInfo::default_instance_ = NULL;

Shop_SC_GetRechargeInfo* Shop_SC_GetRechargeInfo::New() const {
  return new Shop_SC_GetRechargeInfo;
}

void Shop_SC_GetRechargeInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    vip_level_ = 0;
    diamond_ = 0;
    vip_exp_ = GOOGLE_LONGLONG(0);
  }
  id_list_.Clear();
  card_list_.Clear();
  buy_id_list_.Clear();
  free_id_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Shop_SC_GetRechargeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 vip_level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_level_)));
          set_has_vip_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_diamond;
        break;
      }

      // optional int32 diamond = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_diamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &diamond_)));
          set_has_diamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_id_list;
        break;
      }

      // repeated int32 id_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_id_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_id_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_id_list;
        if (input->ExpectTag(34)) goto parse_card_list;
        break;
      }

      // repeated .proto.message.TimeLimitCard card_list = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_card_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_card_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_card_list;
        if (input->ExpectTag(48)) goto parse_buy_id_list;
        break;
      }

      // repeated int32 buy_id_list = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buy_id_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_buy_id_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_buy_id_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_buy_id_list;
        if (input->ExpectTag(56)) goto parse_free_id_list;
        break;
      }

      // repeated int32 free_id_list = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_free_id_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_free_id_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_free_id_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_free_id_list;
        if (input->ExpectTag(64)) goto parse_vip_exp;
        break;
      }

      // optional int64 vip_exp = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vip_exp_)));
          set_has_vip_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Shop_SC_GetRechargeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 vip_level = 1;
  if (has_vip_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->vip_level(), output);
  }

  // optional int32 diamond = 2;
  if (has_diamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->diamond(), output);
  }

  // repeated int32 id_list = 3;
  for (int i = 0; i < this->id_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->id_list(i), output);
  }

  // repeated .proto.message.TimeLimitCard card_list = 4;
  for (int i = 0; i < this->card_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->card_list(i), output);
  }

  // repeated int32 buy_id_list = 6;
  for (int i = 0; i < this->buy_id_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->buy_id_list(i), output);
  }

  // repeated int32 free_id_list = 7;
  for (int i = 0; i < this->free_id_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->free_id_list(i), output);
  }

  // optional int64 vip_exp = 8;
  if (has_vip_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->vip_exp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Shop_SC_GetRechargeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 vip_level = 1;
  if (has_vip_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->vip_level(), target);
  }

  // optional int32 diamond = 2;
  if (has_diamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->diamond(), target);
  }

  // repeated int32 id_list = 3;
  for (int i = 0; i < this->id_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->id_list(i), target);
  }

  // repeated .proto.message.TimeLimitCard card_list = 4;
  for (int i = 0; i < this->card_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->card_list(i), target);
  }

  // repeated int32 buy_id_list = 6;
  for (int i = 0; i < this->buy_id_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->buy_id_list(i), target);
  }

  // repeated int32 free_id_list = 7;
  for (int i = 0; i < this->free_id_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->free_id_list(i), target);
  }

  // optional int64 vip_exp = 8;
  if (has_vip_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->vip_exp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Shop_SC_GetRechargeInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 vip_level = 1;
    if (has_vip_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip_level());
    }

    // optional int32 diamond = 2;
    if (has_diamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->diamond());
    }

    // optional int64 vip_exp = 8;
    if (has_vip_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vip_exp());
    }

  }
  // repeated int32 id_list = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->id_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->id_list(i));
    }
    total_size += 1 * this->id_list_size() + data_size;
  }

  // repeated .proto.message.TimeLimitCard card_list = 4;
  total_size += 1 * this->card_list_size();
  for (int i = 0; i < this->card_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->card_list(i));
  }

  // repeated int32 buy_id_list = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->buy_id_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->buy_id_list(i));
    }
    total_size += 1 * this->buy_id_list_size() + data_size;
  }

  // repeated int32 free_id_list = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->free_id_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->free_id_list(i));
    }
    total_size += 1 * this->free_id_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Shop_SC_GetRechargeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Shop_SC_GetRechargeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Shop_SC_GetRechargeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Shop_SC_GetRechargeInfo::MergeFrom(const Shop_SC_GetRechargeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  id_list_.MergeFrom(from.id_list_);
  card_list_.MergeFrom(from.card_list_);
  buy_id_list_.MergeFrom(from.buy_id_list_);
  free_id_list_.MergeFrom(from.free_id_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_vip_level()) {
      set_vip_level(from.vip_level());
    }
    if (from.has_diamond()) {
      set_diamond(from.diamond());
    }
    if (from.has_vip_exp()) {
      set_vip_exp(from.vip_exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Shop_SC_GetRechargeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Shop_SC_GetRechargeInfo::CopyFrom(const Shop_SC_GetRechargeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Shop_SC_GetRechargeInfo::IsInitialized() const {

  return true;
}

void Shop_SC_GetRechargeInfo::Swap(Shop_SC_GetRechargeInfo* other) {
  if (other != this) {
    std::swap(vip_level_, other->vip_level_);
    std::swap(diamond_, other->diamond_);
    id_list_.Swap(&other->id_list_);
    card_list_.Swap(&other->card_list_);
    buy_id_list_.Swap(&other->buy_id_list_);
    free_id_list_.Swap(&other->free_id_list_);
    std::swap(vip_exp_, other->vip_exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Shop_SC_GetRechargeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Shop_SC_GetRechargeInfo_descriptor_;
  metadata.reflection = Shop_SC_GetRechargeInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Shop_CS_Recharge::kIdFieldNumber;
#endif  // !_MSC_VER

Shop_CS_Recharge::Shop_CS_Recharge()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Shop_CS_Recharge::InitAsDefaultInstance() {
}

Shop_CS_Recharge::Shop_CS_Recharge(const Shop_CS_Recharge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Shop_CS_Recharge::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Shop_CS_Recharge::~Shop_CS_Recharge() {
  SharedDtor();
}

void Shop_CS_Recharge::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Shop_CS_Recharge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Shop_CS_Recharge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Shop_CS_Recharge_descriptor_;
}

const Shop_CS_Recharge& Shop_CS_Recharge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_shop_2eproto();
  return *default_instance_;
}

Shop_CS_Recharge* Shop_CS_Recharge::default_instance_ = NULL;

Shop_CS_Recharge* Shop_CS_Recharge::New() const {
  return new Shop_CS_Recharge;
}

void Shop_CS_Recharge::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Shop_CS_Recharge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Shop_CS_Recharge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Shop_CS_Recharge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Shop_CS_Recharge::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Shop_CS_Recharge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Shop_CS_Recharge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Shop_CS_Recharge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Shop_CS_Recharge::MergeFrom(const Shop_CS_Recharge& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Shop_CS_Recharge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Shop_CS_Recharge::CopyFrom(const Shop_CS_Recharge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Shop_CS_Recharge::IsInitialized() const {

  return true;
}

void Shop_CS_Recharge::Swap(Shop_CS_Recharge* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Shop_CS_Recharge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Shop_CS_Recharge_descriptor_;
  metadata.reflection = Shop_CS_Recharge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Shop_SC_Recharge::kResultFieldNumber;
const int Shop_SC_Recharge::kIdFieldNumber;
const int Shop_SC_Recharge::kVipLevelFieldNumber;
const int Shop_SC_Recharge::kDiamondFieldNumber;
const int Shop_SC_Recharge::kMonthCardFieldNumber;
const int Shop_SC_Recharge::kMonthCardTimeFieldNumber;
#endif  // !_MSC_VER

Shop_SC_Recharge::Shop_SC_Recharge()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Shop_SC_Recharge::InitAsDefaultInstance() {
}

Shop_SC_Recharge::Shop_SC_Recharge(const Shop_SC_Recharge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Shop_SC_Recharge::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  id_ = 0;
  vip_level_ = 0;
  diamond_ = 0;
  month_card_ = 0;
  month_card_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Shop_SC_Recharge::~Shop_SC_Recharge() {
  SharedDtor();
}

void Shop_SC_Recharge::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Shop_SC_Recharge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Shop_SC_Recharge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Shop_SC_Recharge_descriptor_;
}

const Shop_SC_Recharge& Shop_SC_Recharge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_shop_2eproto();
  return *default_instance_;
}

Shop_SC_Recharge* Shop_SC_Recharge::default_instance_ = NULL;

Shop_SC_Recharge* Shop_SC_Recharge::New() const {
  return new Shop_SC_Recharge;
}

void Shop_SC_Recharge::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    id_ = 0;
    vip_level_ = 0;
    diamond_ = 0;
    month_card_ = 0;
    month_card_time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Shop_SC_Recharge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_vip_level;
        break;
      }

      // optional int32 vip_level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_level_)));
          set_has_vip_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_diamond;
        break;
      }

      // optional int32 diamond = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_diamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &diamond_)));
          set_has_diamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_month_card;
        break;
      }

      // optional int32 month_card = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_month_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &month_card_)));
          set_has_month_card();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_month_card_time;
        break;
      }

      // optional int32 month_card_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_month_card_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &month_card_time_)));
          set_has_month_card_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Shop_SC_Recharge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // optional int32 vip_level = 3;
  if (has_vip_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->vip_level(), output);
  }

  // optional int32 diamond = 4;
  if (has_diamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->diamond(), output);
  }

  // optional int32 month_card = 5;
  if (has_month_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->month_card(), output);
  }

  // optional int32 month_card_time = 6;
  if (has_month_card_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->month_card_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Shop_SC_Recharge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // optional int32 vip_level = 3;
  if (has_vip_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->vip_level(), target);
  }

  // optional int32 diamond = 4;
  if (has_diamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->diamond(), target);
  }

  // optional int32 month_card = 5;
  if (has_month_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->month_card(), target);
  }

  // optional int32 month_card_time = 6;
  if (has_month_card_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->month_card_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Shop_SC_Recharge::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 vip_level = 3;
    if (has_vip_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip_level());
    }

    // optional int32 diamond = 4;
    if (has_diamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->diamond());
    }

    // optional int32 month_card = 5;
    if (has_month_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->month_card());
    }

    // optional int32 month_card_time = 6;
    if (has_month_card_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->month_card_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Shop_SC_Recharge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Shop_SC_Recharge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Shop_SC_Recharge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Shop_SC_Recharge::MergeFrom(const Shop_SC_Recharge& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_vip_level()) {
      set_vip_level(from.vip_level());
    }
    if (from.has_diamond()) {
      set_diamond(from.diamond());
    }
    if (from.has_month_card()) {
      set_month_card(from.month_card());
    }
    if (from.has_month_card_time()) {
      set_month_card_time(from.month_card_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Shop_SC_Recharge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Shop_SC_Recharge::CopyFrom(const Shop_SC_Recharge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Shop_SC_Recharge::IsInitialized() const {

  return true;
}

void Shop_SC_Recharge::Swap(Shop_SC_Recharge* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(id_, other->id_);
    std::swap(vip_level_, other->vip_level_);
    std::swap(diamond_, other->diamond_);
    std::swap(month_card_, other->month_card_);
    std::swap(month_card_time_, other->month_card_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Shop_SC_Recharge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Shop_SC_Recharge_descriptor_;
  metadata.reflection = Shop_SC_Recharge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Shop_CS_GetMallItem::kVersionFieldNumber;
const int Shop_CS_GetMallItem::kMtypeFieldNumber;
#endif  // !_MSC_VER

Shop_CS_GetMallItem::Shop_CS_GetMallItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Shop_CS_GetMallItem::InitAsDefaultInstance() {
}

Shop_CS_GetMallItem::Shop_CS_GetMallItem(const Shop_CS_GetMallItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Shop_CS_GetMallItem::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0;
  mtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Shop_CS_GetMallItem::~Shop_CS_GetMallItem() {
  SharedDtor();
}

void Shop_CS_GetMallItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Shop_CS_GetMallItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Shop_CS_GetMallItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Shop_CS_GetMallItem_descriptor_;
}

const Shop_CS_GetMallItem& Shop_CS_GetMallItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_shop_2eproto();
  return *default_instance_;
}

Shop_CS_GetMallItem* Shop_CS_GetMallItem::default_instance_ = NULL;

Shop_CS_GetMallItem* Shop_CS_GetMallItem::New() const {
  return new Shop_CS_GetMallItem;
}

void Shop_CS_GetMallItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    version_ = 0;
    mtype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Shop_CS_GetMallItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mtype;
        break;
      }

      // optional int32 mtype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mtype_)));
          set_has_mtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Shop_CS_GetMallItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // optional int32 mtype = 2;
  if (has_mtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Shop_CS_GetMallItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->version(), target);
  }

  // optional int32 mtype = 2;
  if (has_mtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Shop_CS_GetMallItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

    // optional int32 mtype = 2;
    if (has_mtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Shop_CS_GetMallItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Shop_CS_GetMallItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Shop_CS_GetMallItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Shop_CS_GetMallItem::MergeFrom(const Shop_CS_GetMallItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_mtype()) {
      set_mtype(from.mtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Shop_CS_GetMallItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Shop_CS_GetMallItem::CopyFrom(const Shop_CS_GetMallItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Shop_CS_GetMallItem::IsInitialized() const {

  return true;
}

void Shop_CS_GetMallItem::Swap(Shop_CS_GetMallItem* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(mtype_, other->mtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Shop_CS_GetMallItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Shop_CS_GetMallItem_descriptor_;
  metadata.reflection = Shop_CS_GetMallItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

BuyInfo::BuyInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuyInfo::InitAsDefaultInstance() {
}

BuyInfo::BuyInfo(const BuyInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuyInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuyInfo::~BuyInfo() {
  SharedDtor();
}

void BuyInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuyInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuyInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuyInfo_descriptor_;
}

const BuyInfo& BuyInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_shop_2eproto();
  return *default_instance_;
}

BuyInfo* BuyInfo::default_instance_ = NULL;

BuyInfo* BuyInfo::New() const {
  return new BuyInfo;
}

void BuyInfo::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuyInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void BuyInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuyInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuyInfo::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuyInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuyInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuyInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuyInfo::MergeFrom(const BuyInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuyInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuyInfo::CopyFrom(const BuyInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuyInfo::IsInitialized() const {

  return true;
}

void BuyInfo::Swap(BuyInfo* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuyInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuyInfo_descriptor_;
  metadata.reflection = BuyInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MallItem::kIdFieldNumber;
const int MallItem::kMtypeFieldNumber;
const int MallItem::kItemIdFieldNumber;
const int MallItem::kItemNumFieldNumber;
const int MallItem::kMoneyIdFieldNumber;
const int MallItem::kMoneyNumBefFieldNumber;
const int MallItem::kMoneyNumNowFieldNumber;
const int MallItem::kBuyTypeFieldNumber;
const int MallItem::kBuyNumFieldNumber;
const int MallItem::kStartTimeFieldNumber;
const int MallItem::kEndTimeFieldNumber;
#endif  // !_MSC_VER

MallItem::MallItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MallItem::InitAsDefaultInstance() {
}

MallItem::MallItem(const MallItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MallItem::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  mtype_ = 0;
  item_id_ = 0;
  item_num_ = 0;
  money_id_ = 0;
  money_num_bef_ = 0;
  money_num_now_ = 0;
  buy_type_ = 0;
  buy_num_ = 0;
  start_time_ = 0;
  end_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MallItem::~MallItem() {
  SharedDtor();
}

void MallItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MallItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MallItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MallItem_descriptor_;
}

const MallItem& MallItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_shop_2eproto();
  return *default_instance_;
}

MallItem* MallItem::default_instance_ = NULL;

MallItem* MallItem::New() const {
  return new MallItem;
}

void MallItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    mtype_ = 0;
    item_id_ = 0;
    item_num_ = 0;
    money_id_ = 0;
    money_num_bef_ = 0;
    money_num_now_ = 0;
    buy_type_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    buy_num_ = 0;
    start_time_ = 0;
    end_time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MallItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mtype;
        break;
      }

      // optional int32 mtype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mtype_)));
          set_has_mtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item_id;
        break;
      }

      // optional int32 item_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_item_num;
        break;
      }

      // optional int32 item_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_num_)));
          set_has_item_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_money_id;
        break;
      }

      // optional int32 money_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_id_)));
          set_has_money_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_money_num_bef;
        break;
      }

      // optional int32 money_num_bef = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money_num_bef:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_num_bef_)));
          set_has_money_num_bef();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_money_num_now;
        break;
      }

      // optional int32 money_num_now = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money_num_now:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_num_now_)));
          set_has_money_num_now();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_buy_type;
        break;
      }

      // optional int32 buy_type = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buy_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buy_type_)));
          set_has_buy_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_buy_num;
        break;
      }

      // optional int32 buy_num = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buy_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buy_num_)));
          set_has_buy_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_start_time;
        break;
      }

      // optional int32 start_time = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_end_time;
        break;
      }

      // optional int32 end_time = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MallItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 mtype = 2;
  if (has_mtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mtype(), output);
  }

  // optional int32 item_id = 3;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->item_id(), output);
  }

  // optional int32 item_num = 4;
  if (has_item_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->item_num(), output);
  }

  // optional int32 money_id = 5;
  if (has_money_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->money_id(), output);
  }

  // optional int32 money_num_bef = 6;
  if (has_money_num_bef()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->money_num_bef(), output);
  }

  // optional int32 money_num_now = 7;
  if (has_money_num_now()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->money_num_now(), output);
  }

  // optional int32 buy_type = 8;
  if (has_buy_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->buy_type(), output);
  }

  // optional int32 buy_num = 9;
  if (has_buy_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->buy_num(), output);
  }

  // optional int32 start_time = 10;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->start_time(), output);
  }

  // optional int32 end_time = 11;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->end_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MallItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 mtype = 2;
  if (has_mtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mtype(), target);
  }

  // optional int32 item_id = 3;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->item_id(), target);
  }

  // optional int32 item_num = 4;
  if (has_item_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->item_num(), target);
  }

  // optional int32 money_id = 5;
  if (has_money_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->money_id(), target);
  }

  // optional int32 money_num_bef = 6;
  if (has_money_num_bef()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->money_num_bef(), target);
  }

  // optional int32 money_num_now = 7;
  if (has_money_num_now()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->money_num_now(), target);
  }

  // optional int32 buy_type = 8;
  if (has_buy_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->buy_type(), target);
  }

  // optional int32 buy_num = 9;
  if (has_buy_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->buy_num(), target);
  }

  // optional int32 start_time = 10;
  if (has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->start_time(), target);
  }

  // optional int32 end_time = 11;
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->end_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MallItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 mtype = 2;
    if (has_mtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mtype());
    }

    // optional int32 item_id = 3;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_id());
    }

    // optional int32 item_num = 4;
    if (has_item_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_num());
    }

    // optional int32 money_id = 5;
    if (has_money_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->money_id());
    }

    // optional int32 money_num_bef = 6;
    if (has_money_num_bef()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->money_num_bef());
    }

    // optional int32 money_num_now = 7;
    if (has_money_num_now()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->money_num_now());
    }

    // optional int32 buy_type = 8;
    if (has_buy_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buy_type());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 buy_num = 9;
    if (has_buy_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buy_num());
    }

    // optional int32 start_time = 10;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->start_time());
    }

    // optional int32 end_time = 11;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->end_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MallItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MallItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MallItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MallItem::MergeFrom(const MallItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_mtype()) {
      set_mtype(from.mtype());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_item_num()) {
      set_item_num(from.item_num());
    }
    if (from.has_money_id()) {
      set_money_id(from.money_id());
    }
    if (from.has_money_num_bef()) {
      set_money_num_bef(from.money_num_bef());
    }
    if (from.has_money_num_now()) {
      set_money_num_now(from.money_num_now());
    }
    if (from.has_buy_type()) {
      set_buy_type(from.buy_type());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_buy_num()) {
      set_buy_num(from.buy_num());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MallItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MallItem::CopyFrom(const MallItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MallItem::IsInitialized() const {

  return true;
}

void MallItem::Swap(MallItem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(mtype_, other->mtype_);
    std::swap(item_id_, other->item_id_);
    std::swap(item_num_, other->item_num_);
    std::swap(money_id_, other->money_id_);
    std::swap(money_num_bef_, other->money_num_bef_);
    std::swap(money_num_now_, other->money_num_now_);
    std::swap(buy_type_, other->buy_type_);
    std::swap(buy_num_, other->buy_num_);
    std::swap(start_time_, other->start_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MallItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MallItem_descriptor_;
  metadata.reflection = MallItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Shop_SC_GetMallItem::kVersionFieldNumber;
const int Shop_SC_GetMallItem::kMtypeFieldNumber;
const int Shop_SC_GetMallItem::kItemListFieldNumber;
#endif  // !_MSC_VER

Shop_SC_GetMallItem::Shop_SC_GetMallItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Shop_SC_GetMallItem::InitAsDefaultInstance() {
}

Shop_SC_GetMallItem::Shop_SC_GetMallItem(const Shop_SC_GetMallItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Shop_SC_GetMallItem::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0;
  mtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Shop_SC_GetMallItem::~Shop_SC_GetMallItem() {
  SharedDtor();
}

void Shop_SC_GetMallItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Shop_SC_GetMallItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Shop_SC_GetMallItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Shop_SC_GetMallItem_descriptor_;
}

const Shop_SC_GetMallItem& Shop_SC_GetMallItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_shop_2eproto();
  return *default_instance_;
}

Shop_SC_GetMallItem* Shop_SC_GetMallItem::default_instance_ = NULL;

Shop_SC_GetMallItem* Shop_SC_GetMallItem::New() const {
  return new Shop_SC_GetMallItem;
}

void Shop_SC_GetMallItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    version_ = 0;
    mtype_ = 0;
  }
  item_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Shop_SC_GetMallItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mtype;
        break;
      }

      // optional int32 mtype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mtype_)));
          set_has_mtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_item_list;
        break;
      }

      // repeated .proto.message.MallItem item_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_item_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Shop_SC_GetMallItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // optional int32 mtype = 2;
  if (has_mtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mtype(), output);
  }

  // repeated .proto.message.MallItem item_list = 3;
  for (int i = 0; i < this->item_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->item_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Shop_SC_GetMallItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->version(), target);
  }

  // optional int32 mtype = 2;
  if (has_mtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mtype(), target);
  }

  // repeated .proto.message.MallItem item_list = 3;
  for (int i = 0; i < this->item_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->item_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Shop_SC_GetMallItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

    // optional int32 mtype = 2;
    if (has_mtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mtype());
    }

  }
  // repeated .proto.message.MallItem item_list = 3;
  total_size += 1 * this->item_list_size();
  for (int i = 0; i < this->item_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Shop_SC_GetMallItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Shop_SC_GetMallItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Shop_SC_GetMallItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Shop_SC_GetMallItem::MergeFrom(const Shop_SC_GetMallItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_list_.MergeFrom(from.item_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_mtype()) {
      set_mtype(from.mtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Shop_SC_GetMallItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Shop_SC_GetMallItem::CopyFrom(const Shop_SC_GetMallItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Shop_SC_GetMallItem::IsInitialized() const {

  return true;
}

void Shop_SC_GetMallItem::Swap(Shop_SC_GetMallItem* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(mtype_, other->mtype_);
    item_list_.Swap(&other->item_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Shop_SC_GetMallItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Shop_SC_GetMallItem_descriptor_;
  metadata.reflection = Shop_SC_GetMallItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Shop_CS_BuyMallItem::kIdFieldNumber;
const int Shop_CS_BuyMallItem::kNumFieldNumber;
#endif  // !_MSC_VER

Shop_CS_BuyMallItem::Shop_CS_BuyMallItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Shop_CS_BuyMallItem::InitAsDefaultInstance() {
}

Shop_CS_BuyMallItem::Shop_CS_BuyMallItem(const Shop_CS_BuyMallItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Shop_CS_BuyMallItem::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Shop_CS_BuyMallItem::~Shop_CS_BuyMallItem() {
  SharedDtor();
}

void Shop_CS_BuyMallItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Shop_CS_BuyMallItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Shop_CS_BuyMallItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Shop_CS_BuyMallItem_descriptor_;
}

const Shop_CS_BuyMallItem& Shop_CS_BuyMallItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_shop_2eproto();
  return *default_instance_;
}

Shop_CS_BuyMallItem* Shop_CS_BuyMallItem::default_instance_ = NULL;

Shop_CS_BuyMallItem* Shop_CS_BuyMallItem::New() const {
  return new Shop_CS_BuyMallItem;
}

void Shop_CS_BuyMallItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Shop_CS_BuyMallItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional int32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Shop_CS_BuyMallItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Shop_CS_BuyMallItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Shop_CS_BuyMallItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Shop_CS_BuyMallItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Shop_CS_BuyMallItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Shop_CS_BuyMallItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Shop_CS_BuyMallItem::MergeFrom(const Shop_CS_BuyMallItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Shop_CS_BuyMallItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Shop_CS_BuyMallItem::CopyFrom(const Shop_CS_BuyMallItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Shop_CS_BuyMallItem::IsInitialized() const {

  return true;
}

void Shop_CS_BuyMallItem::Swap(Shop_CS_BuyMallItem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Shop_CS_BuyMallItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Shop_CS_BuyMallItem_descriptor_;
  metadata.reflection = Shop_CS_BuyMallItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Shop_SC_BuyMallItem::kResultFieldNumber;
const int Shop_SC_BuyMallItem::kIdFieldNumber;
const int Shop_SC_BuyMallItem::kBuyNumFieldNumber;
#endif  // !_MSC_VER

Shop_SC_BuyMallItem::Shop_SC_BuyMallItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Shop_SC_BuyMallItem::InitAsDefaultInstance() {
}

Shop_SC_BuyMallItem::Shop_SC_BuyMallItem(const Shop_SC_BuyMallItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Shop_SC_BuyMallItem::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  id_ = 0;
  buy_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Shop_SC_BuyMallItem::~Shop_SC_BuyMallItem() {
  SharedDtor();
}

void Shop_SC_BuyMallItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Shop_SC_BuyMallItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Shop_SC_BuyMallItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Shop_SC_BuyMallItem_descriptor_;
}

const Shop_SC_BuyMallItem& Shop_SC_BuyMallItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_shop_2eproto();
  return *default_instance_;
}

Shop_SC_BuyMallItem* Shop_SC_BuyMallItem::default_instance_ = NULL;

Shop_SC_BuyMallItem* Shop_SC_BuyMallItem::New() const {
  return new Shop_SC_BuyMallItem;
}

void Shop_SC_BuyMallItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    id_ = 0;
    buy_num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Shop_SC_BuyMallItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_buy_num;
        break;
      }

      // optional int32 buy_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buy_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buy_num_)));
          set_has_buy_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Shop_SC_BuyMallItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // optional int32 buy_num = 3;
  if (has_buy_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->buy_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Shop_SC_BuyMallItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // optional int32 buy_num = 3;
  if (has_buy_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->buy_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Shop_SC_BuyMallItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 buy_num = 3;
    if (has_buy_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buy_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Shop_SC_BuyMallItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Shop_SC_BuyMallItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Shop_SC_BuyMallItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Shop_SC_BuyMallItem::MergeFrom(const Shop_SC_BuyMallItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_buy_num()) {
      set_buy_num(from.buy_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Shop_SC_BuyMallItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Shop_SC_BuyMallItem::CopyFrom(const Shop_SC_BuyMallItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Shop_SC_BuyMallItem::IsInitialized() const {

  return true;
}

void Shop_SC_BuyMallItem::Swap(Shop_SC_BuyMallItem* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(id_, other->id_);
    std::swap(buy_num_, other->buy_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Shop_SC_BuyMallItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Shop_SC_BuyMallItem_descriptor_;
  metadata.reflection = Shop_SC_BuyMallItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Shop_CS_BuyShopItem::kProIdFieldNumber;
const int Shop_CS_BuyShopItem::kBuyNumFieldNumber;
#endif  // !_MSC_VER

Shop_CS_BuyShopItem::Shop_CS_BuyShopItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Shop_CS_BuyShopItem::InitAsDefaultInstance() {
}

Shop_CS_BuyShopItem::Shop_CS_BuyShopItem(const Shop_CS_BuyShopItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Shop_CS_BuyShopItem::SharedCtor() {
  _cached_size_ = 0;
  pro_id_ = 0;
  buy_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Shop_CS_BuyShopItem::~Shop_CS_BuyShopItem() {
  SharedDtor();
}

void Shop_CS_BuyShopItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Shop_CS_BuyShopItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Shop_CS_BuyShopItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Shop_CS_BuyShopItem_descriptor_;
}

const Shop_CS_BuyShopItem& Shop_CS_BuyShopItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_shop_2eproto();
  return *default_instance_;
}

Shop_CS_BuyShopItem* Shop_CS_BuyShopItem::default_instance_ = NULL;

Shop_CS_BuyShopItem* Shop_CS_BuyShopItem::New() const {
  return new Shop_CS_BuyShopItem;
}

void Shop_CS_BuyShopItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pro_id_ = 0;
    buy_num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Shop_CS_BuyShopItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 pro_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pro_id_)));
          set_has_pro_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_buy_num;
        break;
      }

      // optional int32 buy_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buy_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buy_num_)));
          set_has_buy_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Shop_CS_BuyShopItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 pro_id = 1;
  if (has_pro_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pro_id(), output);
  }

  // optional int32 buy_num = 2;
  if (has_buy_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->buy_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Shop_CS_BuyShopItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 pro_id = 1;
  if (has_pro_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pro_id(), target);
  }

  // optional int32 buy_num = 2;
  if (has_buy_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->buy_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Shop_CS_BuyShopItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 pro_id = 1;
    if (has_pro_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pro_id());
    }

    // optional int32 buy_num = 2;
    if (has_buy_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buy_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Shop_CS_BuyShopItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Shop_CS_BuyShopItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Shop_CS_BuyShopItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Shop_CS_BuyShopItem::MergeFrom(const Shop_CS_BuyShopItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pro_id()) {
      set_pro_id(from.pro_id());
    }
    if (from.has_buy_num()) {
      set_buy_num(from.buy_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Shop_CS_BuyShopItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Shop_CS_BuyShopItem::CopyFrom(const Shop_CS_BuyShopItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Shop_CS_BuyShopItem::IsInitialized() const {

  return true;
}

void Shop_CS_BuyShopItem::Swap(Shop_CS_BuyShopItem* other) {
  if (other != this) {
    std::swap(pro_id_, other->pro_id_);
    std::swap(buy_num_, other->buy_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Shop_CS_BuyShopItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Shop_CS_BuyShopItem_descriptor_;
  metadata.reflection = Shop_CS_BuyShopItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Shop_SC_BuyShopItem::kResultFieldNumber;
const int Shop_SC_BuyShopItem::kIdFieldNumber;
const int Shop_SC_BuyShopItem::kBuyNumFieldNumber;
#endif  // !_MSC_VER

Shop_SC_BuyShopItem::Shop_SC_BuyShopItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Shop_SC_BuyShopItem::InitAsDefaultInstance() {
}

Shop_SC_BuyShopItem::Shop_SC_BuyShopItem(const Shop_SC_BuyShopItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Shop_SC_BuyShopItem::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  id_ = 0;
  buy_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Shop_SC_BuyShopItem::~Shop_SC_BuyShopItem() {
  SharedDtor();
}

void Shop_SC_BuyShopItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Shop_SC_BuyShopItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Shop_SC_BuyShopItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Shop_SC_BuyShopItem_descriptor_;
}

const Shop_SC_BuyShopItem& Shop_SC_BuyShopItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_shop_2eproto();
  return *default_instance_;
}

Shop_SC_BuyShopItem* Shop_SC_BuyShopItem::default_instance_ = NULL;

Shop_SC_BuyShopItem* Shop_SC_BuyShopItem::New() const {
  return new Shop_SC_BuyShopItem;
}

void Shop_SC_BuyShopItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    id_ = 0;
    buy_num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Shop_SC_BuyShopItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_buy_num;
        break;
      }

      // optional int32 buy_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buy_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buy_num_)));
          set_has_buy_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Shop_SC_BuyShopItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // optional int32 buy_num = 3;
  if (has_buy_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->buy_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Shop_SC_BuyShopItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // optional int32 buy_num = 3;
  if (has_buy_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->buy_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Shop_SC_BuyShopItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 buy_num = 3;
    if (has_buy_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buy_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Shop_SC_BuyShopItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Shop_SC_BuyShopItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Shop_SC_BuyShopItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Shop_SC_BuyShopItem::MergeFrom(const Shop_SC_BuyShopItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_buy_num()) {
      set_buy_num(from.buy_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Shop_SC_BuyShopItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Shop_SC_BuyShopItem::CopyFrom(const Shop_SC_BuyShopItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Shop_SC_BuyShopItem::IsInitialized() const {

  return true;
}

void Shop_SC_BuyShopItem::Swap(Shop_SC_BuyShopItem* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(id_, other->id_);
    std::swap(buy_num_, other->buy_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Shop_SC_BuyShopItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Shop_SC_BuyShopItem_descriptor_;
  metadata.reflection = Shop_SC_BuyShopItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Shop_CS_GetSellPrice::kIdListFieldNumber;
#endif  // !_MSC_VER

Shop_CS_GetSellPrice::Shop_CS_GetSellPrice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Shop_CS_GetSellPrice::InitAsDefaultInstance() {
}

Shop_CS_GetSellPrice::Shop_CS_GetSellPrice(const Shop_CS_GetSellPrice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Shop_CS_GetSellPrice::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Shop_CS_GetSellPrice::~Shop_CS_GetSellPrice() {
  SharedDtor();
}

void Shop_CS_GetSellPrice::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Shop_CS_GetSellPrice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Shop_CS_GetSellPrice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Shop_CS_GetSellPrice_descriptor_;
}

const Shop_CS_GetSellPrice& Shop_CS_GetSellPrice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_shop_2eproto();
  return *default_instance_;
}

Shop_CS_GetSellPrice* Shop_CS_GetSellPrice::default_instance_ = NULL;

Shop_CS_GetSellPrice* Shop_CS_GetSellPrice::New() const {
  return new Shop_CS_GetSellPrice;
}

void Shop_CS_GetSellPrice::Clear() {
  id_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Shop_CS_GetSellPrice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 id_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_id_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_id_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_id_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Shop_CS_GetSellPrice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 id_list = 1;
  for (int i = 0; i < this->id_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->id_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Shop_CS_GetSellPrice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 id_list = 1;
  for (int i = 0; i < this->id_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->id_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Shop_CS_GetSellPrice::ByteSize() const {
  int total_size = 0;

  // repeated int32 id_list = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->id_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->id_list(i));
    }
    total_size += 1 * this->id_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Shop_CS_GetSellPrice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Shop_CS_GetSellPrice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Shop_CS_GetSellPrice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Shop_CS_GetSellPrice::MergeFrom(const Shop_CS_GetSellPrice& from) {
  GOOGLE_CHECK_NE(&from, this);
  id_list_.MergeFrom(from.id_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Shop_CS_GetSellPrice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Shop_CS_GetSellPrice::CopyFrom(const Shop_CS_GetSellPrice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Shop_CS_GetSellPrice::IsInitialized() const {

  return true;
}

void Shop_CS_GetSellPrice::Swap(Shop_CS_GetSellPrice* other) {
  if (other != this) {
    id_list_.Swap(&other->id_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Shop_CS_GetSellPrice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Shop_CS_GetSellPrice_descriptor_;
  metadata.reflection = Shop_CS_GetSellPrice_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IDPrice::kIdFieldNumber;
const int IDPrice::kPriceYesFieldNumber;
const int IDPrice::kPriceNowFieldNumber;
#endif  // !_MSC_VER

IDPrice::IDPrice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IDPrice::InitAsDefaultInstance() {
}

IDPrice::IDPrice(const IDPrice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IDPrice::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  price_yes_ = 0;
  price_now_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IDPrice::~IDPrice() {
  SharedDtor();
}

void IDPrice::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IDPrice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IDPrice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IDPrice_descriptor_;
}

const IDPrice& IDPrice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_shop_2eproto();
  return *default_instance_;
}

IDPrice* IDPrice::default_instance_ = NULL;

IDPrice* IDPrice::New() const {
  return new IDPrice;
}

void IDPrice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    price_yes_ = 0;
    price_now_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IDPrice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_price_yes;
        break;
      }

      // optional int32 price_yes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price_yes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_yes_)));
          set_has_price_yes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_price_now;
        break;
      }

      // optional int32 price_now = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price_now:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_now_)));
          set_has_price_now();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IDPrice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 price_yes = 2;
  if (has_price_yes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->price_yes(), output);
  }

  // optional int32 price_now = 3;
  if (has_price_now()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->price_now(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IDPrice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 price_yes = 2;
  if (has_price_yes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->price_yes(), target);
  }

  // optional int32 price_now = 3;
  if (has_price_now()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->price_now(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IDPrice::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 price_yes = 2;
    if (has_price_yes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price_yes());
    }

    // optional int32 price_now = 3;
    if (has_price_now()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price_now());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IDPrice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IDPrice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IDPrice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IDPrice::MergeFrom(const IDPrice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_price_yes()) {
      set_price_yes(from.price_yes());
    }
    if (from.has_price_now()) {
      set_price_now(from.price_now());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IDPrice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IDPrice::CopyFrom(const IDPrice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IDPrice::IsInitialized() const {

  return true;
}

void IDPrice::Swap(IDPrice* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(price_yes_, other->price_yes_);
    std::swap(price_now_, other->price_now_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IDPrice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IDPrice_descriptor_;
  metadata.reflection = IDPrice_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Shop_SC_GetSellPrice::kIdPriceListFieldNumber;
#endif  // !_MSC_VER

Shop_SC_GetSellPrice::Shop_SC_GetSellPrice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Shop_SC_GetSellPrice::InitAsDefaultInstance() {
}

Shop_SC_GetSellPrice::Shop_SC_GetSellPrice(const Shop_SC_GetSellPrice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Shop_SC_GetSellPrice::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Shop_SC_GetSellPrice::~Shop_SC_GetSellPrice() {
  SharedDtor();
}

void Shop_SC_GetSellPrice::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Shop_SC_GetSellPrice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Shop_SC_GetSellPrice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Shop_SC_GetSellPrice_descriptor_;
}

const Shop_SC_GetSellPrice& Shop_SC_GetSellPrice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_shop_2eproto();
  return *default_instance_;
}

Shop_SC_GetSellPrice* Shop_SC_GetSellPrice::default_instance_ = NULL;

Shop_SC_GetSellPrice* Shop_SC_GetSellPrice::New() const {
  return new Shop_SC_GetSellPrice;
}

void Shop_SC_GetSellPrice::Clear() {
  id_price_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Shop_SC_GetSellPrice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.message.IDPrice id_price_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_id_price_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_id_price_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_id_price_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Shop_SC_GetSellPrice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.message.IDPrice id_price_list = 1;
  for (int i = 0; i < this->id_price_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->id_price_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Shop_SC_GetSellPrice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.message.IDPrice id_price_list = 1;
  for (int i = 0; i < this->id_price_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->id_price_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Shop_SC_GetSellPrice::ByteSize() const {
  int total_size = 0;

  // repeated .proto.message.IDPrice id_price_list = 1;
  total_size += 1 * this->id_price_list_size();
  for (int i = 0; i < this->id_price_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->id_price_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Shop_SC_GetSellPrice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Shop_SC_GetSellPrice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Shop_SC_GetSellPrice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Shop_SC_GetSellPrice::MergeFrom(const Shop_SC_GetSellPrice& from) {
  GOOGLE_CHECK_NE(&from, this);
  id_price_list_.MergeFrom(from.id_price_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Shop_SC_GetSellPrice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Shop_SC_GetSellPrice::CopyFrom(const Shop_SC_GetSellPrice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Shop_SC_GetSellPrice::IsInitialized() const {

  return true;
}

void Shop_SC_GetSellPrice::Swap(Shop_SC_GetSellPrice* other) {
  if (other != this) {
    id_price_list_.Swap(&other->id_price_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Shop_SC_GetSellPrice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Shop_SC_GetSellPrice_descriptor_;
  metadata.reflection = Shop_SC_GetSellPrice_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Shop_CS_SellShopItem::kUuidFieldNumber;
const int Shop_CS_SellShopItem::kNumFieldNumber;
#endif  // !_MSC_VER

Shop_CS_SellShopItem::Shop_CS_SellShopItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Shop_CS_SellShopItem::InitAsDefaultInstance() {
}

Shop_CS_SellShopItem::Shop_CS_SellShopItem(const Shop_CS_SellShopItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Shop_CS_SellShopItem::SharedCtor() {
  _cached_size_ = 0;
  uuid_ = GOOGLE_ULONGLONG(0);
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Shop_CS_SellShopItem::~Shop_CS_SellShopItem() {
  SharedDtor();
}

void Shop_CS_SellShopItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Shop_CS_SellShopItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Shop_CS_SellShopItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Shop_CS_SellShopItem_descriptor_;
}

const Shop_CS_SellShopItem& Shop_CS_SellShopItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_shop_2eproto();
  return *default_instance_;
}

Shop_CS_SellShopItem* Shop_CS_SellShopItem::default_instance_ = NULL;

Shop_CS_SellShopItem* Shop_CS_SellShopItem::New() const {
  return new Shop_CS_SellShopItem;
}

void Shop_CS_SellShopItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uuid_ = GOOGLE_ULONGLONG(0);
    num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Shop_CS_SellShopItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional int32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Shop_CS_SellShopItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uuid(), output);
  }

  // optional int32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Shop_CS_SellShopItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 uuid = 1;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uuid(), target);
  }

  // optional int32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Shop_CS_SellShopItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 uuid = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

    // optional int32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Shop_CS_SellShopItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Shop_CS_SellShopItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Shop_CS_SellShopItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Shop_CS_SellShopItem::MergeFrom(const Shop_CS_SellShopItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Shop_CS_SellShopItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Shop_CS_SellShopItem::CopyFrom(const Shop_CS_SellShopItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Shop_CS_SellShopItem::IsInitialized() const {

  return true;
}

void Shop_CS_SellShopItem::Swap(Shop_CS_SellShopItem* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Shop_CS_SellShopItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Shop_CS_SellShopItem_descriptor_;
  metadata.reflection = Shop_CS_SellShopItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Shop_SC_SellShopItem::kResultFieldNumber;
const int Shop_SC_SellShopItem::kUuidFieldNumber;
const int Shop_SC_SellShopItem::kNumFieldNumber;
const int Shop_SC_SellShopItem::kIdFieldNumber;
const int Shop_SC_SellShopItem::kSellNumFieldNumber;
#endif  // !_MSC_VER

Shop_SC_SellShopItem::Shop_SC_SellShopItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Shop_SC_SellShopItem::InitAsDefaultInstance() {
}

Shop_SC_SellShopItem::Shop_SC_SellShopItem(const Shop_SC_SellShopItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Shop_SC_SellShopItem::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  uuid_ = GOOGLE_ULONGLONG(0);
  num_ = 0;
  id_ = 0;
  sell_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Shop_SC_SellShopItem::~Shop_SC_SellShopItem() {
  SharedDtor();
}

void Shop_SC_SellShopItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Shop_SC_SellShopItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Shop_SC_SellShopItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Shop_SC_SellShopItem_descriptor_;
}

const Shop_SC_SellShopItem& Shop_SC_SellShopItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_shop_2eproto();
  return *default_instance_;
}

Shop_SC_SellShopItem* Shop_SC_SellShopItem::default_instance_ = NULL;

Shop_SC_SellShopItem* Shop_SC_SellShopItem::New() const {
  return new Shop_SC_SellShopItem;
}

void Shop_SC_SellShopItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    uuid_ = GOOGLE_ULONGLONG(0);
    num_ = 0;
    id_ = 0;
    sell_num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Shop_SC_SellShopItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uuid;
        break;
      }

      // optional uint64 uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // optional int32 num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_id;
        break;
      }

      // optional int32 id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_sell_num;
        break;
      }

      // optional int32 sell_num = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sell_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sell_num_)));
          set_has_sell_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Shop_SC_SellShopItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uuid(), output);
  }

  // optional int32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num(), output);
  }

  // optional int32 id = 4;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->id(), output);
  }

  // optional int32 sell_num = 5;
  if (has_sell_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->sell_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Shop_SC_SellShopItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uuid(), target);
  }

  // optional int32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num(), target);
  }

  // optional int32 id = 4;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->id(), target);
  }

  // optional int32 sell_num = 5;
  if (has_sell_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->sell_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Shop_SC_SellShopItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional uint64 uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

    // optional int32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int32 id = 4;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 sell_num = 5;
    if (has_sell_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sell_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Shop_SC_SellShopItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Shop_SC_SellShopItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Shop_SC_SellShopItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Shop_SC_SellShopItem::MergeFrom(const Shop_SC_SellShopItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_sell_num()) {
      set_sell_num(from.sell_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Shop_SC_SellShopItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Shop_SC_SellShopItem::CopyFrom(const Shop_SC_SellShopItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Shop_SC_SellShopItem::IsInitialized() const {

  return true;
}

void Shop_SC_SellShopItem::Swap(Shop_SC_SellShopItem* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(uuid_, other->uuid_);
    std::swap(num_, other->num_);
    std::swap(id_, other->id_);
    std::swap(sell_num_, other->sell_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Shop_SC_SellShopItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Shop_SC_SellShopItem_descriptor_;
  metadata.reflection = Shop_SC_SellShopItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Shop_CS_GetMallInfo::Shop_CS_GetMallInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Shop_CS_GetMallInfo::InitAsDefaultInstance() {
}

Shop_CS_GetMallInfo::Shop_CS_GetMallInfo(const Shop_CS_GetMallInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Shop_CS_GetMallInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Shop_CS_GetMallInfo::~Shop_CS_GetMallInfo() {
  SharedDtor();
}

void Shop_CS_GetMallInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Shop_CS_GetMallInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Shop_CS_GetMallInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Shop_CS_GetMallInfo_descriptor_;
}

const Shop_CS_GetMallInfo& Shop_CS_GetMallInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_shop_2eproto();
  return *default_instance_;
}

Shop_CS_GetMallInfo* Shop_CS_GetMallInfo::default_instance_ = NULL;

Shop_CS_GetMallInfo* Shop_CS_GetMallInfo::New() const {
  return new Shop_CS_GetMallInfo;
}

void Shop_CS_GetMallInfo::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Shop_CS_GetMallInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Shop_CS_GetMallInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Shop_CS_GetMallInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Shop_CS_GetMallInfo::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Shop_CS_GetMallInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Shop_CS_GetMallInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Shop_CS_GetMallInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Shop_CS_GetMallInfo::MergeFrom(const Shop_CS_GetMallInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Shop_CS_GetMallInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Shop_CS_GetMallInfo::CopyFrom(const Shop_CS_GetMallInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Shop_CS_GetMallInfo::IsInitialized() const {

  return true;
}

void Shop_CS_GetMallInfo::Swap(Shop_CS_GetMallInfo* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Shop_CS_GetMallInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Shop_CS_GetMallInfo_descriptor_;
  metadata.reflection = Shop_CS_GetMallInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MallItemBuy::kIdFieldNumber;
const int MallItemBuy::kBuyTimesFieldNumber;
#endif  // !_MSC_VER

MallItemBuy::MallItemBuy()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MallItemBuy::InitAsDefaultInstance() {
}

MallItemBuy::MallItemBuy(const MallItemBuy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MallItemBuy::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  buy_times_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MallItemBuy::~MallItemBuy() {
  SharedDtor();
}

void MallItemBuy::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MallItemBuy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MallItemBuy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MallItemBuy_descriptor_;
}

const MallItemBuy& MallItemBuy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_shop_2eproto();
  return *default_instance_;
}

MallItemBuy* MallItemBuy::default_instance_ = NULL;

MallItemBuy* MallItemBuy::New() const {
  return new MallItemBuy;
}

void MallItemBuy::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    buy_times_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MallItemBuy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_buy_times;
        break;
      }

      // optional int32 buy_times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buy_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buy_times_)));
          set_has_buy_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MallItemBuy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 buy_times = 2;
  if (has_buy_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->buy_times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MallItemBuy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 buy_times = 2;
  if (has_buy_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->buy_times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MallItemBuy::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 buy_times = 2;
    if (has_buy_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buy_times());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MallItemBuy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MallItemBuy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MallItemBuy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MallItemBuy::MergeFrom(const MallItemBuy& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_buy_times()) {
      set_buy_times(from.buy_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MallItemBuy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MallItemBuy::CopyFrom(const MallItemBuy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MallItemBuy::IsInitialized() const {

  return true;
}

void MallItemBuy::Swap(MallItemBuy* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(buy_times_, other->buy_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MallItemBuy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MallItemBuy_descriptor_;
  metadata.reflection = MallItemBuy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Shop_SC_GetMallInfo::kMallItemListFieldNumber;
#endif  // !_MSC_VER

Shop_SC_GetMallInfo::Shop_SC_GetMallInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Shop_SC_GetMallInfo::InitAsDefaultInstance() {
}

Shop_SC_GetMallInfo::Shop_SC_GetMallInfo(const Shop_SC_GetMallInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Shop_SC_GetMallInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Shop_SC_GetMallInfo::~Shop_SC_GetMallInfo() {
  SharedDtor();
}

void Shop_SC_GetMallInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Shop_SC_GetMallInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Shop_SC_GetMallInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Shop_SC_GetMallInfo_descriptor_;
}

const Shop_SC_GetMallInfo& Shop_SC_GetMallInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_shop_2eproto();
  return *default_instance_;
}

Shop_SC_GetMallInfo* Shop_SC_GetMallInfo::default_instance_ = NULL;

Shop_SC_GetMallInfo* Shop_SC_GetMallInfo::New() const {
  return new Shop_SC_GetMallInfo;
}

void Shop_SC_GetMallInfo::Clear() {
  mall_item_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Shop_SC_GetMallInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.message.MallItemBuy mall_item_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mall_item_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mall_item_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_mall_item_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Shop_SC_GetMallInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.message.MallItemBuy mall_item_list = 1;
  for (int i = 0; i < this->mall_item_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mall_item_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Shop_SC_GetMallInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.message.MallItemBuy mall_item_list = 1;
  for (int i = 0; i < this->mall_item_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mall_item_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Shop_SC_GetMallInfo::ByteSize() const {
  int total_size = 0;

  // repeated .proto.message.MallItemBuy mall_item_list = 1;
  total_size += 1 * this->mall_item_list_size();
  for (int i = 0; i < this->mall_item_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mall_item_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Shop_SC_GetMallInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Shop_SC_GetMallInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Shop_SC_GetMallInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Shop_SC_GetMallInfo::MergeFrom(const Shop_SC_GetMallInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  mall_item_list_.MergeFrom(from.mall_item_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Shop_SC_GetMallInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Shop_SC_GetMallInfo::CopyFrom(const Shop_SC_GetMallInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Shop_SC_GetMallInfo::IsInitialized() const {

  return true;
}

void Shop_SC_GetMallInfo::Swap(Shop_SC_GetMallInfo* other) {
  if (other != this) {
    mall_item_list_.Swap(&other->mall_item_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Shop_SC_GetMallInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Shop_SC_GetMallInfo_descriptor_;
  metadata.reflection = Shop_SC_GetMallInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Shop_CS_VIPBuyGift::kIdFieldNumber;
#endif  // !_MSC_VER

Shop_CS_VIPBuyGift::Shop_CS_VIPBuyGift()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Shop_CS_VIPBuyGift::InitAsDefaultInstance() {
}

Shop_CS_VIPBuyGift::Shop_CS_VIPBuyGift(const Shop_CS_VIPBuyGift& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Shop_CS_VIPBuyGift::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Shop_CS_VIPBuyGift::~Shop_CS_VIPBuyGift() {
  SharedDtor();
}

void Shop_CS_VIPBuyGift::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Shop_CS_VIPBuyGift::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Shop_CS_VIPBuyGift::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Shop_CS_VIPBuyGift_descriptor_;
}

const Shop_CS_VIPBuyGift& Shop_CS_VIPBuyGift::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_shop_2eproto();
  return *default_instance_;
}

Shop_CS_VIPBuyGift* Shop_CS_VIPBuyGift::default_instance_ = NULL;

Shop_CS_VIPBuyGift* Shop_CS_VIPBuyGift::New() const {
  return new Shop_CS_VIPBuyGift;
}

void Shop_CS_VIPBuyGift::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Shop_CS_VIPBuyGift::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Shop_CS_VIPBuyGift::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Shop_CS_VIPBuyGift::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Shop_CS_VIPBuyGift::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Shop_CS_VIPBuyGift::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Shop_CS_VIPBuyGift* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Shop_CS_VIPBuyGift*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Shop_CS_VIPBuyGift::MergeFrom(const Shop_CS_VIPBuyGift& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Shop_CS_VIPBuyGift::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Shop_CS_VIPBuyGift::CopyFrom(const Shop_CS_VIPBuyGift& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Shop_CS_VIPBuyGift::IsInitialized() const {

  return true;
}

void Shop_CS_VIPBuyGift::Swap(Shop_CS_VIPBuyGift* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Shop_CS_VIPBuyGift::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Shop_CS_VIPBuyGift_descriptor_;
  metadata.reflection = Shop_CS_VIPBuyGift_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Shop_SC_VIPBuyGift::kResultFieldNumber;
#endif  // !_MSC_VER

Shop_SC_VIPBuyGift::Shop_SC_VIPBuyGift()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Shop_SC_VIPBuyGift::InitAsDefaultInstance() {
}

Shop_SC_VIPBuyGift::Shop_SC_VIPBuyGift(const Shop_SC_VIPBuyGift& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Shop_SC_VIPBuyGift::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Shop_SC_VIPBuyGift::~Shop_SC_VIPBuyGift() {
  SharedDtor();
}

void Shop_SC_VIPBuyGift::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Shop_SC_VIPBuyGift::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Shop_SC_VIPBuyGift::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Shop_SC_VIPBuyGift_descriptor_;
}

const Shop_SC_VIPBuyGift& Shop_SC_VIPBuyGift::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_shop_2eproto();
  return *default_instance_;
}

Shop_SC_VIPBuyGift* Shop_SC_VIPBuyGift::default_instance_ = NULL;

Shop_SC_VIPBuyGift* Shop_SC_VIPBuyGift::New() const {
  return new Shop_SC_VIPBuyGift;
}

void Shop_SC_VIPBuyGift::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Shop_SC_VIPBuyGift::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Shop_SC_VIPBuyGift::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Shop_SC_VIPBuyGift::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Shop_SC_VIPBuyGift::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Shop_SC_VIPBuyGift::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Shop_SC_VIPBuyGift* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Shop_SC_VIPBuyGift*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Shop_SC_VIPBuyGift::MergeFrom(const Shop_SC_VIPBuyGift& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Shop_SC_VIPBuyGift::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Shop_SC_VIPBuyGift::CopyFrom(const Shop_SC_VIPBuyGift& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Shop_SC_VIPBuyGift::IsInitialized() const {

  return true;
}

void Shop_SC_VIPBuyGift::Swap(Shop_SC_VIPBuyGift* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Shop_SC_VIPBuyGift::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Shop_SC_VIPBuyGift_descriptor_;
  metadata.reflection = Shop_SC_VIPBuyGift_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Shop_CS_VIPFreeGift::kIdFieldNumber;
#endif  // !_MSC_VER

Shop_CS_VIPFreeGift::Shop_CS_VIPFreeGift()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Shop_CS_VIPFreeGift::InitAsDefaultInstance() {
}

Shop_CS_VIPFreeGift::Shop_CS_VIPFreeGift(const Shop_CS_VIPFreeGift& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Shop_CS_VIPFreeGift::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Shop_CS_VIPFreeGift::~Shop_CS_VIPFreeGift() {
  SharedDtor();
}

void Shop_CS_VIPFreeGift::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Shop_CS_VIPFreeGift::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Shop_CS_VIPFreeGift::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Shop_CS_VIPFreeGift_descriptor_;
}

const Shop_CS_VIPFreeGift& Shop_CS_VIPFreeGift::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_shop_2eproto();
  return *default_instance_;
}

Shop_CS_VIPFreeGift* Shop_CS_VIPFreeGift::default_instance_ = NULL;

Shop_CS_VIPFreeGift* Shop_CS_VIPFreeGift::New() const {
  return new Shop_CS_VIPFreeGift;
}

void Shop_CS_VIPFreeGift::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Shop_CS_VIPFreeGift::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Shop_CS_VIPFreeGift::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Shop_CS_VIPFreeGift::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Shop_CS_VIPFreeGift::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Shop_CS_VIPFreeGift::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Shop_CS_VIPFreeGift* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Shop_CS_VIPFreeGift*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Shop_CS_VIPFreeGift::MergeFrom(const Shop_CS_VIPFreeGift& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Shop_CS_VIPFreeGift::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Shop_CS_VIPFreeGift::CopyFrom(const Shop_CS_VIPFreeGift& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Shop_CS_VIPFreeGift::IsInitialized() const {

  return true;
}

void Shop_CS_VIPFreeGift::Swap(Shop_CS_VIPFreeGift* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Shop_CS_VIPFreeGift::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Shop_CS_VIPFreeGift_descriptor_;
  metadata.reflection = Shop_CS_VIPFreeGift_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Shop_SC_VIPFreeGift::kResultFieldNumber;
#endif  // !_MSC_VER

Shop_SC_VIPFreeGift::Shop_SC_VIPFreeGift()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Shop_SC_VIPFreeGift::InitAsDefaultInstance() {
}

Shop_SC_VIPFreeGift::Shop_SC_VIPFreeGift(const Shop_SC_VIPFreeGift& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Shop_SC_VIPFreeGift::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Shop_SC_VIPFreeGift::~Shop_SC_VIPFreeGift() {
  SharedDtor();
}

void Shop_SC_VIPFreeGift::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Shop_SC_VIPFreeGift::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Shop_SC_VIPFreeGift::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Shop_SC_VIPFreeGift_descriptor_;
}

const Shop_SC_VIPFreeGift& Shop_SC_VIPFreeGift::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_shop_2eproto();
  return *default_instance_;
}

Shop_SC_VIPFreeGift* Shop_SC_VIPFreeGift::default_instance_ = NULL;

Shop_SC_VIPFreeGift* Shop_SC_VIPFreeGift::New() const {
  return new Shop_SC_VIPFreeGift;
}

void Shop_SC_VIPFreeGift::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Shop_SC_VIPFreeGift::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Shop_SC_VIPFreeGift::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Shop_SC_VIPFreeGift::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Shop_SC_VIPFreeGift::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Shop_SC_VIPFreeGift::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Shop_SC_VIPFreeGift* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Shop_SC_VIPFreeGift*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Shop_SC_VIPFreeGift::MergeFrom(const Shop_SC_VIPFreeGift& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Shop_SC_VIPFreeGift::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Shop_SC_VIPFreeGift::CopyFrom(const Shop_SC_VIPFreeGift& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Shop_SC_VIPFreeGift::IsInitialized() const {

  return true;
}

void Shop_SC_VIPFreeGift::Swap(Shop_SC_VIPFreeGift* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Shop_SC_VIPFreeGift::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Shop_SC_VIPFreeGift_descriptor_;
  metadata.reflection = Shop_SC_VIPFreeGift_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VIPInfo::kVipLevelFieldNumber;
const int VIPInfo::kDiamondFieldNumber;
const int VIPInfo::kIdListFieldNumber;
const int VIPInfo::kVipBuyFieldNumber;
const int VIPInfo::kRechargeTimeFieldNumber;
const int VIPInfo::kCardListFieldNumber;
const int VIPInfo::kCostdiamondFieldNumber;
const int VIPInfo::kVipExpFieldNumber;
#endif  // !_MSC_VER

VIPInfo::VIPInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VIPInfo::InitAsDefaultInstance() {
}

VIPInfo::VIPInfo(const VIPInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VIPInfo::SharedCtor() {
  _cached_size_ = 0;
  vip_level_ = 0;
  diamond_ = 0;
  recharge_time_ = GOOGLE_ULONGLONG(0);
  costdiamond_ = GOOGLE_LONGLONG(0);
  vip_exp_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VIPInfo::~VIPInfo() {
  SharedDtor();
}

void VIPInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VIPInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VIPInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VIPInfo_descriptor_;
}

const VIPInfo& VIPInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_shop_2eproto();
  return *default_instance_;
}

VIPInfo* VIPInfo::default_instance_ = NULL;

VIPInfo* VIPInfo::New() const {
  return new VIPInfo;
}

void VIPInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    vip_level_ = 0;
    diamond_ = 0;
    recharge_time_ = GOOGLE_ULONGLONG(0);
    costdiamond_ = GOOGLE_LONGLONG(0);
    vip_exp_ = GOOGLE_LONGLONG(0);
  }
  id_list_.Clear();
  vip_buy_.Clear();
  card_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VIPInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 vip_level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_level_)));
          set_has_vip_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_diamond;
        break;
      }

      // optional int32 diamond = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_diamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &diamond_)));
          set_has_diamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_id_list;
        break;
      }

      // repeated int32 id_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_id_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_id_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_id_list;
        if (input->ExpectTag(32)) goto parse_vip_buy;
        break;
      }

      // repeated int32 vip_buy = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_buy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_vip_buy())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_vip_buy())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_vip_buy;
        if (input->ExpectTag(40)) goto parse_recharge_time;
        break;
      }

      // optional uint64 recharge_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recharge_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &recharge_time_)));
          set_has_recharge_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_card_list;
        break;
      }

      // repeated .proto.message.TimeLimitCard card_list = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_card_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_card_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_card_list;
        if (input->ExpectTag(56)) goto parse_costdiamond;
        break;
      }

      // optional int64 costdiamond = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_costdiamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &costdiamond_)));
          set_has_costdiamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_vip_exp;
        break;
      }

      // optional int64 vip_exp = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vip_exp_)));
          set_has_vip_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VIPInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 vip_level = 1;
  if (has_vip_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->vip_level(), output);
  }

  // optional int32 diamond = 2;
  if (has_diamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->diamond(), output);
  }

  // repeated int32 id_list = 3;
  for (int i = 0; i < this->id_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->id_list(i), output);
  }

  // repeated int32 vip_buy = 4;
  for (int i = 0; i < this->vip_buy_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->vip_buy(i), output);
  }

  // optional uint64 recharge_time = 5;
  if (has_recharge_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->recharge_time(), output);
  }

  // repeated .proto.message.TimeLimitCard card_list = 6;
  for (int i = 0; i < this->card_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->card_list(i), output);
  }

  // optional int64 costdiamond = 7;
  if (has_costdiamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->costdiamond(), output);
  }

  // optional int64 vip_exp = 8;
  if (has_vip_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->vip_exp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VIPInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 vip_level = 1;
  if (has_vip_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->vip_level(), target);
  }

  // optional int32 diamond = 2;
  if (has_diamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->diamond(), target);
  }

  // repeated int32 id_list = 3;
  for (int i = 0; i < this->id_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->id_list(i), target);
  }

  // repeated int32 vip_buy = 4;
  for (int i = 0; i < this->vip_buy_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->vip_buy(i), target);
  }

  // optional uint64 recharge_time = 5;
  if (has_recharge_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->recharge_time(), target);
  }

  // repeated .proto.message.TimeLimitCard card_list = 6;
  for (int i = 0; i < this->card_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->card_list(i), target);
  }

  // optional int64 costdiamond = 7;
  if (has_costdiamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->costdiamond(), target);
  }

  // optional int64 vip_exp = 8;
  if (has_vip_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->vip_exp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VIPInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 vip_level = 1;
    if (has_vip_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip_level());
    }

    // optional int32 diamond = 2;
    if (has_diamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->diamond());
    }

    // optional uint64 recharge_time = 5;
    if (has_recharge_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->recharge_time());
    }

    // optional int64 costdiamond = 7;
    if (has_costdiamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->costdiamond());
    }

    // optional int64 vip_exp = 8;
    if (has_vip_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vip_exp());
    }

  }
  // repeated int32 id_list = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->id_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->id_list(i));
    }
    total_size += 1 * this->id_list_size() + data_size;
  }

  // repeated int32 vip_buy = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->vip_buy_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->vip_buy(i));
    }
    total_size += 1 * this->vip_buy_size() + data_size;
  }

  // repeated .proto.message.TimeLimitCard card_list = 6;
  total_size += 1 * this->card_list_size();
  for (int i = 0; i < this->card_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->card_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VIPInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VIPInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VIPInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VIPInfo::MergeFrom(const VIPInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  id_list_.MergeFrom(from.id_list_);
  vip_buy_.MergeFrom(from.vip_buy_);
  card_list_.MergeFrom(from.card_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_vip_level()) {
      set_vip_level(from.vip_level());
    }
    if (from.has_diamond()) {
      set_diamond(from.diamond());
    }
    if (from.has_recharge_time()) {
      set_recharge_time(from.recharge_time());
    }
    if (from.has_costdiamond()) {
      set_costdiamond(from.costdiamond());
    }
    if (from.has_vip_exp()) {
      set_vip_exp(from.vip_exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VIPInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VIPInfo::CopyFrom(const VIPInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VIPInfo::IsInitialized() const {

  return true;
}

void VIPInfo::Swap(VIPInfo* other) {
  if (other != this) {
    std::swap(vip_level_, other->vip_level_);
    std::swap(diamond_, other->diamond_);
    id_list_.Swap(&other->id_list_);
    vip_buy_.Swap(&other->vip_buy_);
    std::swap(recharge_time_, other->recharge_time_);
    card_list_.Swap(&other->card_list_);
    std::swap(costdiamond_, other->costdiamond_);
    std::swap(vip_exp_, other->vip_exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VIPInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VIPInfo_descriptor_;
  metadata.reflection = VIPInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Platform2Game_Recharge::kOrderIdFieldNumber;
const int Platform2Game_Recharge::kPlayerIdFieldNumber;
const int Platform2Game_Recharge::kItemIdFieldNumber;
const int Platform2Game_Recharge::kItemNumFieldNumber;
const int Platform2Game_Recharge::kAmountFieldNumber;
#endif  // !_MSC_VER

Platform2Game_Recharge::Platform2Game_Recharge()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Platform2Game_Recharge::InitAsDefaultInstance() {
}

Platform2Game_Recharge::Platform2Game_Recharge(const Platform2Game_Recharge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Platform2Game_Recharge::SharedCtor() {
  _cached_size_ = 0;
  orderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  playerid_ = GOOGLE_ULONGLONG(0);
  itemid_ = 0u;
  itemnum_ = 0u;
  amount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Platform2Game_Recharge::~Platform2Game_Recharge() {
  SharedDtor();
}

void Platform2Game_Recharge::SharedDtor() {
  if (orderid_ != &::google::protobuf::internal::kEmptyString) {
    delete orderid_;
  }
  if (this != default_instance_) {
  }
}

void Platform2Game_Recharge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Platform2Game_Recharge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Platform2Game_Recharge_descriptor_;
}

const Platform2Game_Recharge& Platform2Game_Recharge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_shop_2eproto();
  return *default_instance_;
}

Platform2Game_Recharge* Platform2Game_Recharge::default_instance_ = NULL;

Platform2Game_Recharge* Platform2Game_Recharge::New() const {
  return new Platform2Game_Recharge;
}

void Platform2Game_Recharge::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_orderid()) {
      if (orderid_ != &::google::protobuf::internal::kEmptyString) {
        orderid_->clear();
      }
    }
    playerid_ = GOOGLE_ULONGLONG(0);
    itemid_ = 0u;
    itemnum_ = 0u;
    amount_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Platform2Game_Recharge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string orderId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orderid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->orderid().data(), this->orderid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerId;
        break;
      }

      // optional uint64 playerId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_itemId;
        break;
      }

      // optional uint32 itemId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_itemNum;
        break;
      }

      // optional uint32 itemNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemnum_)));
          set_has_itemnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_amount;
        break;
      }

      // optional uint32 amount = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Platform2Game_Recharge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string orderId = 1;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orderid().data(), this->orderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->orderid(), output);
  }

  // optional uint64 playerId = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->playerid(), output);
  }

  // optional uint32 itemId = 3;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->itemid(), output);
  }

  // optional uint32 itemNum = 4;
  if (has_itemnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->itemnum(), output);
  }

  // optional uint32 amount = 5;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->amount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Platform2Game_Recharge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string orderId = 1;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orderid().data(), this->orderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->orderid(), target);
  }

  // optional uint64 playerId = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->playerid(), target);
  }

  // optional uint32 itemId = 3;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->itemid(), target);
  }

  // optional uint32 itemNum = 4;
  if (has_itemnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->itemnum(), target);
  }

  // optional uint32 amount = 5;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->amount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Platform2Game_Recharge::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string orderId = 1;
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->orderid());
    }

    // optional uint64 playerId = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerid());
    }

    // optional uint32 itemId = 3;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional uint32 itemNum = 4;
    if (has_itemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemnum());
    }

    // optional uint32 amount = 5;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->amount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Platform2Game_Recharge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Platform2Game_Recharge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Platform2Game_Recharge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Platform2Game_Recharge::MergeFrom(const Platform2Game_Recharge& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_itemnum()) {
      set_itemnum(from.itemnum());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Platform2Game_Recharge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Platform2Game_Recharge::CopyFrom(const Platform2Game_Recharge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Platform2Game_Recharge::IsInitialized() const {

  return true;
}

void Platform2Game_Recharge::Swap(Platform2Game_Recharge* other) {
  if (other != this) {
    std::swap(orderid_, other->orderid_);
    std::swap(playerid_, other->playerid_);
    std::swap(itemid_, other->itemid_);
    std::swap(itemnum_, other->itemnum_);
    std::swap(amount_, other->amount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Platform2Game_Recharge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Platform2Game_Recharge_descriptor_;
  metadata.reflection = Platform2Game_Recharge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Shop_CS_GetIntegralInfo::Shop_CS_GetIntegralInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Shop_CS_GetIntegralInfo::InitAsDefaultInstance() {
}

Shop_CS_GetIntegralInfo::Shop_CS_GetIntegralInfo(const Shop_CS_GetIntegralInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Shop_CS_GetIntegralInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Shop_CS_GetIntegralInfo::~Shop_CS_GetIntegralInfo() {
  SharedDtor();
}

void Shop_CS_GetIntegralInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Shop_CS_GetIntegralInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Shop_CS_GetIntegralInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Shop_CS_GetIntegralInfo_descriptor_;
}

const Shop_CS_GetIntegralInfo& Shop_CS_GetIntegralInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_shop_2eproto();
  return *default_instance_;
}

Shop_CS_GetIntegralInfo* Shop_CS_GetIntegralInfo::default_instance_ = NULL;

Shop_CS_GetIntegralInfo* Shop_CS_GetIntegralInfo::New() const {
  return new Shop_CS_GetIntegralInfo;
}

void Shop_CS_GetIntegralInfo::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Shop_CS_GetIntegralInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Shop_CS_GetIntegralInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Shop_CS_GetIntegralInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Shop_CS_GetIntegralInfo::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Shop_CS_GetIntegralInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Shop_CS_GetIntegralInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Shop_CS_GetIntegralInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Shop_CS_GetIntegralInfo::MergeFrom(const Shop_CS_GetIntegralInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Shop_CS_GetIntegralInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Shop_CS_GetIntegralInfo::CopyFrom(const Shop_CS_GetIntegralInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Shop_CS_GetIntegralInfo::IsInitialized() const {

  return true;
}

void Shop_CS_GetIntegralInfo::Swap(Shop_CS_GetIntegralInfo* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Shop_CS_GetIntegralInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Shop_CS_GetIntegralInfo_descriptor_;
  metadata.reflection = Shop_CS_GetIntegralInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Shop_SC_GetIntegralInfo::kIntegralinfoFieldNumber;
#endif  // !_MSC_VER

Shop_SC_GetIntegralInfo::Shop_SC_GetIntegralInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Shop_SC_GetIntegralInfo::InitAsDefaultInstance() {
}

Shop_SC_GetIntegralInfo::Shop_SC_GetIntegralInfo(const Shop_SC_GetIntegralInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Shop_SC_GetIntegralInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Shop_SC_GetIntegralInfo::~Shop_SC_GetIntegralInfo() {
  SharedDtor();
}

void Shop_SC_GetIntegralInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Shop_SC_GetIntegralInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Shop_SC_GetIntegralInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Shop_SC_GetIntegralInfo_descriptor_;
}

const Shop_SC_GetIntegralInfo& Shop_SC_GetIntegralInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_shop_2eproto();
  return *default_instance_;
}

Shop_SC_GetIntegralInfo* Shop_SC_GetIntegralInfo::default_instance_ = NULL;

Shop_SC_GetIntegralInfo* Shop_SC_GetIntegralInfo::New() const {
  return new Shop_SC_GetIntegralInfo;
}

void Shop_SC_GetIntegralInfo::Clear() {
  integralinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Shop_SC_GetIntegralInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.message.ShopItemBuy integralinfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_integralinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_integralinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_integralinfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Shop_SC_GetIntegralInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.message.ShopItemBuy integralinfo = 1;
  for (int i = 0; i < this->integralinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->integralinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Shop_SC_GetIntegralInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.message.ShopItemBuy integralinfo = 1;
  for (int i = 0; i < this->integralinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->integralinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Shop_SC_GetIntegralInfo::ByteSize() const {
  int total_size = 0;

  // repeated .proto.message.ShopItemBuy integralinfo = 1;
  total_size += 1 * this->integralinfo_size();
  for (int i = 0; i < this->integralinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->integralinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Shop_SC_GetIntegralInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Shop_SC_GetIntegralInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Shop_SC_GetIntegralInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Shop_SC_GetIntegralInfo::MergeFrom(const Shop_SC_GetIntegralInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  integralinfo_.MergeFrom(from.integralinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Shop_SC_GetIntegralInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Shop_SC_GetIntegralInfo::CopyFrom(const Shop_SC_GetIntegralInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Shop_SC_GetIntegralInfo::IsInitialized() const {

  return true;
}

void Shop_SC_GetIntegralInfo::Swap(Shop_SC_GetIntegralInfo* other) {
  if (other != this) {
    integralinfo_.Swap(&other->integralinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Shop_SC_GetIntegralInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Shop_SC_GetIntegralInfo_descriptor_;
  metadata.reflection = Shop_SC_GetIntegralInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Shop_CS_TakeTimeLimitCardReward::kIdFieldNumber;
#endif  // !_MSC_VER

Shop_CS_TakeTimeLimitCardReward::Shop_CS_TakeTimeLimitCardReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Shop_CS_TakeTimeLimitCardReward::InitAsDefaultInstance() {
}

Shop_CS_TakeTimeLimitCardReward::Shop_CS_TakeTimeLimitCardReward(const Shop_CS_TakeTimeLimitCardReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Shop_CS_TakeTimeLimitCardReward::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Shop_CS_TakeTimeLimitCardReward::~Shop_CS_TakeTimeLimitCardReward() {
  SharedDtor();
}

void Shop_CS_TakeTimeLimitCardReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Shop_CS_TakeTimeLimitCardReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Shop_CS_TakeTimeLimitCardReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Shop_CS_TakeTimeLimitCardReward_descriptor_;
}

const Shop_CS_TakeTimeLimitCardReward& Shop_CS_TakeTimeLimitCardReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_shop_2eproto();
  return *default_instance_;
}

Shop_CS_TakeTimeLimitCardReward* Shop_CS_TakeTimeLimitCardReward::default_instance_ = NULL;

Shop_CS_TakeTimeLimitCardReward* Shop_CS_TakeTimeLimitCardReward::New() const {
  return new Shop_CS_TakeTimeLimitCardReward;
}

void Shop_CS_TakeTimeLimitCardReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Shop_CS_TakeTimeLimitCardReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Shop_CS_TakeTimeLimitCardReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Shop_CS_TakeTimeLimitCardReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Shop_CS_TakeTimeLimitCardReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Shop_CS_TakeTimeLimitCardReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Shop_CS_TakeTimeLimitCardReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Shop_CS_TakeTimeLimitCardReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Shop_CS_TakeTimeLimitCardReward::MergeFrom(const Shop_CS_TakeTimeLimitCardReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Shop_CS_TakeTimeLimitCardReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Shop_CS_TakeTimeLimitCardReward::CopyFrom(const Shop_CS_TakeTimeLimitCardReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Shop_CS_TakeTimeLimitCardReward::IsInitialized() const {

  return true;
}

void Shop_CS_TakeTimeLimitCardReward::Swap(Shop_CS_TakeTimeLimitCardReward* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Shop_CS_TakeTimeLimitCardReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Shop_CS_TakeTimeLimitCardReward_descriptor_;
  metadata.reflection = Shop_CS_TakeTimeLimitCardReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Shop_SC_TakeTimeLimitCardReward::kResultFieldNumber;
const int Shop_SC_TakeTimeLimitCardReward::kIdFieldNumber;
#endif  // !_MSC_VER

Shop_SC_TakeTimeLimitCardReward::Shop_SC_TakeTimeLimitCardReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Shop_SC_TakeTimeLimitCardReward::InitAsDefaultInstance() {
}

Shop_SC_TakeTimeLimitCardReward::Shop_SC_TakeTimeLimitCardReward(const Shop_SC_TakeTimeLimitCardReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Shop_SC_TakeTimeLimitCardReward::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Shop_SC_TakeTimeLimitCardReward::~Shop_SC_TakeTimeLimitCardReward() {
  SharedDtor();
}

void Shop_SC_TakeTimeLimitCardReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Shop_SC_TakeTimeLimitCardReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Shop_SC_TakeTimeLimitCardReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Shop_SC_TakeTimeLimitCardReward_descriptor_;
}

const Shop_SC_TakeTimeLimitCardReward& Shop_SC_TakeTimeLimitCardReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_shop_2eproto();
  return *default_instance_;
}

Shop_SC_TakeTimeLimitCardReward* Shop_SC_TakeTimeLimitCardReward::default_instance_ = NULL;

Shop_SC_TakeTimeLimitCardReward* Shop_SC_TakeTimeLimitCardReward::New() const {
  return new Shop_SC_TakeTimeLimitCardReward;
}

void Shop_SC_TakeTimeLimitCardReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Shop_SC_TakeTimeLimitCardReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Shop_SC_TakeTimeLimitCardReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Shop_SC_TakeTimeLimitCardReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Shop_SC_TakeTimeLimitCardReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Shop_SC_TakeTimeLimitCardReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Shop_SC_TakeTimeLimitCardReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Shop_SC_TakeTimeLimitCardReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Shop_SC_TakeTimeLimitCardReward::MergeFrom(const Shop_SC_TakeTimeLimitCardReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Shop_SC_TakeTimeLimitCardReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Shop_SC_TakeTimeLimitCardReward::CopyFrom(const Shop_SC_TakeTimeLimitCardReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Shop_SC_TakeTimeLimitCardReward::IsInitialized() const {

  return true;
}

void Shop_SC_TakeTimeLimitCardReward::Swap(Shop_SC_TakeTimeLimitCardReward* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Shop_SC_TakeTimeLimitCardReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Shop_SC_TakeTimeLimitCardReward_descriptor_;
  metadata.reflection = Shop_SC_TakeTimeLimitCardReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SecretItem::kIdFieldNumber;
const int SecretItem::kIsbuyFieldNumber;
const int SecretItem::kPosFieldNumber;
#endif  // !_MSC_VER

SecretItem::SecretItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SecretItem::InitAsDefaultInstance() {
}

SecretItem::SecretItem(const SecretItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SecretItem::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  isbuy_ = 0u;
  pos_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SecretItem::~SecretItem() {
  SharedDtor();
}

void SecretItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SecretItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SecretItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SecretItem_descriptor_;
}

const SecretItem& SecretItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_shop_2eproto();
  return *default_instance_;
}

SecretItem* SecretItem::default_instance_ = NULL;

SecretItem* SecretItem::New() const {
  return new SecretItem;
}

void SecretItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    isbuy_ = 0u;
    pos_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SecretItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isbuy;
        break;
      }

      // optional uint32 isbuy = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isbuy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isbuy_)));
          set_has_isbuy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pos;
        break;
      }

      // optional uint32 pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SecretItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 isbuy = 2;
  if (has_isbuy()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->isbuy(), output);
  }

  // optional uint32 pos = 3;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SecretItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 isbuy = 2;
  if (has_isbuy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->isbuy(), target);
  }

  // optional uint32 pos = 3;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SecretItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 isbuy = 2;
    if (has_isbuy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isbuy());
    }

    // optional uint32 pos = 3;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SecretItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SecretItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SecretItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SecretItem::MergeFrom(const SecretItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_isbuy()) {
      set_isbuy(from.isbuy());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SecretItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SecretItem::CopyFrom(const SecretItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecretItem::IsInitialized() const {

  return true;
}

void SecretItem::Swap(SecretItem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(isbuy_, other->isbuy_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SecretItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SecretItem_descriptor_;
  metadata.reflection = SecretItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SecretStoreInfo::kFreerefreshFieldNumber;
const int SecretStoreInfo::kItemlistFieldNumber;
const int SecretStoreInfo::kFreshtimeFieldNumber;
#endif  // !_MSC_VER

SecretStoreInfo::SecretStoreInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SecretStoreInfo::InitAsDefaultInstance() {
}

SecretStoreInfo::SecretStoreInfo(const SecretStoreInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SecretStoreInfo::SharedCtor() {
  _cached_size_ = 0;
  freerefresh_ = 0;
  freshtime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SecretStoreInfo::~SecretStoreInfo() {
  SharedDtor();
}

void SecretStoreInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SecretStoreInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SecretStoreInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SecretStoreInfo_descriptor_;
}

const SecretStoreInfo& SecretStoreInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_shop_2eproto();
  return *default_instance_;
}

SecretStoreInfo* SecretStoreInfo::default_instance_ = NULL;

SecretStoreInfo* SecretStoreInfo::New() const {
  return new SecretStoreInfo;
}

void SecretStoreInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    freerefresh_ = 0;
    freshtime_ = GOOGLE_ULONGLONG(0);
  }
  itemlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SecretStoreInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 freerefresh = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &freerefresh_)));
          set_has_freerefresh();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_itemlist;
        break;
      }

      // repeated .proto.message.SecretItem itemlist = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_itemlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_itemlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_itemlist;
        if (input->ExpectTag(24)) goto parse_freshtime;
        break;
      }

      // optional uint64 freshtime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_freshtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &freshtime_)));
          set_has_freshtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SecretStoreInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 freerefresh = 1;
  if (has_freerefresh()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->freerefresh(), output);
  }

  // repeated .proto.message.SecretItem itemlist = 2;
  for (int i = 0; i < this->itemlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->itemlist(i), output);
  }

  // optional uint64 freshtime = 3;
  if (has_freshtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->freshtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SecretStoreInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 freerefresh = 1;
  if (has_freerefresh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->freerefresh(), target);
  }

  // repeated .proto.message.SecretItem itemlist = 2;
  for (int i = 0; i < this->itemlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->itemlist(i), target);
  }

  // optional uint64 freshtime = 3;
  if (has_freshtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->freshtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SecretStoreInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 freerefresh = 1;
    if (has_freerefresh()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->freerefresh());
    }

    // optional uint64 freshtime = 3;
    if (has_freshtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->freshtime());
    }

  }
  // repeated .proto.message.SecretItem itemlist = 2;
  total_size += 1 * this->itemlist_size();
  for (int i = 0; i < this->itemlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->itemlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SecretStoreInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SecretStoreInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SecretStoreInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SecretStoreInfo::MergeFrom(const SecretStoreInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  itemlist_.MergeFrom(from.itemlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_freerefresh()) {
      set_freerefresh(from.freerefresh());
    }
    if (from.has_freshtime()) {
      set_freshtime(from.freshtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SecretStoreInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SecretStoreInfo::CopyFrom(const SecretStoreInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecretStoreInfo::IsInitialized() const {

  return true;
}

void SecretStoreInfo::Swap(SecretStoreInfo* other) {
  if (other != this) {
    std::swap(freerefresh_, other->freerefresh_);
    itemlist_.Swap(&other->itemlist_);
    std::swap(freshtime_, other->freshtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SecretStoreInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SecretStoreInfo_descriptor_;
  metadata.reflection = SecretStoreInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuySecretStoreItem::kPosFieldNumber;
#endif  // !_MSC_VER

BuySecretStoreItem::BuySecretStoreItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuySecretStoreItem::InitAsDefaultInstance() {
}

BuySecretStoreItem::BuySecretStoreItem(const BuySecretStoreItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuySecretStoreItem::SharedCtor() {
  _cached_size_ = 0;
  pos_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuySecretStoreItem::~BuySecretStoreItem() {
  SharedDtor();
}

void BuySecretStoreItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuySecretStoreItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuySecretStoreItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuySecretStoreItem_descriptor_;
}

const BuySecretStoreItem& BuySecretStoreItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_shop_2eproto();
  return *default_instance_;
}

BuySecretStoreItem* BuySecretStoreItem::default_instance_ = NULL;

BuySecretStoreItem* BuySecretStoreItem::New() const {
  return new BuySecretStoreItem;
}

void BuySecretStoreItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pos_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuySecretStoreItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuySecretStoreItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuySecretStoreItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuySecretStoreItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuySecretStoreItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuySecretStoreItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuySecretStoreItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuySecretStoreItem::MergeFrom(const BuySecretStoreItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuySecretStoreItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuySecretStoreItem::CopyFrom(const BuySecretStoreItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuySecretStoreItem::IsInitialized() const {

  return true;
}

void BuySecretStoreItem::Swap(BuySecretStoreItem* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuySecretStoreItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuySecretStoreItem_descriptor_;
  metadata.reflection = BuySecretStoreItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Shop_CS_BuyVipLevel::kIdFieldNumber;
#endif  // !_MSC_VER

Shop_CS_BuyVipLevel::Shop_CS_BuyVipLevel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Shop_CS_BuyVipLevel::InitAsDefaultInstance() {
}

Shop_CS_BuyVipLevel::Shop_CS_BuyVipLevel(const Shop_CS_BuyVipLevel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Shop_CS_BuyVipLevel::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Shop_CS_BuyVipLevel::~Shop_CS_BuyVipLevel() {
  SharedDtor();
}

void Shop_CS_BuyVipLevel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Shop_CS_BuyVipLevel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Shop_CS_BuyVipLevel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Shop_CS_BuyVipLevel_descriptor_;
}

const Shop_CS_BuyVipLevel& Shop_CS_BuyVipLevel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_shop_2eproto();
  return *default_instance_;
}

Shop_CS_BuyVipLevel* Shop_CS_BuyVipLevel::default_instance_ = NULL;

Shop_CS_BuyVipLevel* Shop_CS_BuyVipLevel::New() const {
  return new Shop_CS_BuyVipLevel;
}

void Shop_CS_BuyVipLevel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Shop_CS_BuyVipLevel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Shop_CS_BuyVipLevel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Shop_CS_BuyVipLevel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Shop_CS_BuyVipLevel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Shop_CS_BuyVipLevel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Shop_CS_BuyVipLevel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Shop_CS_BuyVipLevel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Shop_CS_BuyVipLevel::MergeFrom(const Shop_CS_BuyVipLevel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Shop_CS_BuyVipLevel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Shop_CS_BuyVipLevel::CopyFrom(const Shop_CS_BuyVipLevel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Shop_CS_BuyVipLevel::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Shop_CS_BuyVipLevel::Swap(Shop_CS_BuyVipLevel* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Shop_CS_BuyVipLevel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Shop_CS_BuyVipLevel_descriptor_;
  metadata.reflection = Shop_CS_BuyVipLevel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Shop_SC_BuyVipLevel::kResultFieldNumber;
#endif  // !_MSC_VER

Shop_SC_BuyVipLevel::Shop_SC_BuyVipLevel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Shop_SC_BuyVipLevel::InitAsDefaultInstance() {
}

Shop_SC_BuyVipLevel::Shop_SC_BuyVipLevel(const Shop_SC_BuyVipLevel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Shop_SC_BuyVipLevel::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Shop_SC_BuyVipLevel::~Shop_SC_BuyVipLevel() {
  SharedDtor();
}

void Shop_SC_BuyVipLevel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Shop_SC_BuyVipLevel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Shop_SC_BuyVipLevel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Shop_SC_BuyVipLevel_descriptor_;
}

const Shop_SC_BuyVipLevel& Shop_SC_BuyVipLevel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_shop_2eproto();
  return *default_instance_;
}

Shop_SC_BuyVipLevel* Shop_SC_BuyVipLevel::default_instance_ = NULL;

Shop_SC_BuyVipLevel* Shop_SC_BuyVipLevel::New() const {
  return new Shop_SC_BuyVipLevel;
}

void Shop_SC_BuyVipLevel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Shop_SC_BuyVipLevel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Shop_SC_BuyVipLevel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Shop_SC_BuyVipLevel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Shop_SC_BuyVipLevel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Shop_SC_BuyVipLevel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Shop_SC_BuyVipLevel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Shop_SC_BuyVipLevel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Shop_SC_BuyVipLevel::MergeFrom(const Shop_SC_BuyVipLevel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Shop_SC_BuyVipLevel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Shop_SC_BuyVipLevel::CopyFrom(const Shop_SC_BuyVipLevel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Shop_SC_BuyVipLevel::IsInitialized() const {

  return true;
}

void Shop_SC_BuyVipLevel::Swap(Shop_SC_BuyVipLevel* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Shop_SC_BuyVipLevel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Shop_SC_BuyVipLevel_descriptor_;
  metadata.reflection = Shop_SC_BuyVipLevel_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace proto

// @@protoc_insertion_point(global_scope)
