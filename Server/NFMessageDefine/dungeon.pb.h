// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dungeon.proto

#ifndef PROTOBUF_dungeon_2eproto__INCLUDED
#define PROTOBUF_dungeon_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)

namespace proto {
namespace message {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_dungeon_2eproto();
void protobuf_AssignDesc_dungeon_2eproto();
void protobuf_ShutdownFile_dungeon_2eproto();

class Dungeon_SC_EnterDungeon;
class Dungeon_CS_EnterDungeonOK;
class Dungeon_SC_Story;
class Dungeon_SC_Customs;
class Dungeon_CS_RequestEnterDungeon;
class Game2Battle_RequestEnterDungeon;
class Battle2Game_AckEnterDungeon;
class Dungeon_SC_RequestEnterDungeon;
class Dungeon_CS_PassStory;
class Dungeon_CS_LeaveDungeon;
class DungeonGrade;
class RewardItem;
class Dungeon_SC_Result;
class Dungeon_CS_RequestEvent;
class Dungeon_CS_Relive;
class Dungeon_SC_MonsterNum;
class Dungeon_SC_ChangeCamp;
class Dungeon_SC_PretendStart;
class Dungeon_SC_PretendEnd;
class PassDungeon;
class TrialInfo;
class SingleStoryDungeon;
class Dungeon_CS_GetDungeonInfo;
class Dungeon_CS_RequestEnterDungeonAgain;
class Dungeon_SC_GetDungeonInfo;
class Dungeon_SC_ChangeDungeonScene;
class Dungeon_CS_ChangeDungeonSceneOK;
class Dungeon_CS_StarUp;
class Dungeon_SC_StarUp;
class Dungeon_CS_Sweep;
class Dungeon_SC_Sweep;
class Game2Battle_CreateDungeon;
class Battle2Game_CreateDungeon;
class Dungeon_SC_TimerStart;
class Dungeon_CS_TakeGradeSReward;
class Dungeon_SC_TakeGradeSReward;

// ===================================================================

class Dungeon_SC_EnterDungeon : public ::google::protobuf::Message {
 public:
  Dungeon_SC_EnterDungeon();
  virtual ~Dungeon_SC_EnterDungeon();

  Dungeon_SC_EnterDungeon(const Dungeon_SC_EnterDungeon& from);

  inline Dungeon_SC_EnterDungeon& operator=(const Dungeon_SC_EnterDungeon& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Dungeon_SC_EnterDungeon& default_instance();

  void Swap(Dungeon_SC_EnterDungeon* other);

  // implements Message ----------------------------------------------

  Dungeon_SC_EnterDungeon* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Dungeon_SC_EnterDungeon& from);
  void MergeFrom(const Dungeon_SC_EnterDungeon& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 DungeonID = 1;
  inline bool has_dungeonid() const;
  inline void clear_dungeonid();
  static const int kDungeonIDFieldNumber = 1;
  inline ::google::protobuf::uint32 dungeonid() const;
  inline void set_dungeonid(::google::protobuf::uint32 value);

  // optional .proto.message.Point3D Pt = 2;
  inline bool has_pt() const;
  inline void clear_pt();
  static const int kPtFieldNumber = 2;
  inline const ::proto::message::Point3D& pt() const;
  inline ::proto::message::Point3D* mutable_pt();
  inline ::proto::message::Point3D* release_pt();
  inline void set_allocated_pt(::proto::message::Point3D* pt);

  // optional float Dir = 3;
  inline bool has_dir() const;
  inline void clear_dir();
  static const int kDirFieldNumber = 3;
  inline float dir() const;
  inline void set_dir(float value);

  // optional uint32 DungeonProId = 4;
  inline bool has_dungeonproid() const;
  inline void clear_dungeonproid();
  static const int kDungeonProIdFieldNumber = 4;
  inline ::google::protobuf::uint32 dungeonproid() const;
  inline void set_dungeonproid(::google::protobuf::uint32 value);

  // optional uint32 Layer = 5;
  inline bool has_layer() const;
  inline void clear_layer();
  static const int kLayerFieldNumber = 5;
  inline ::google::protobuf::uint32 layer() const;
  inline void set_layer(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Dungeon_SC_EnterDungeon)
 private:
  inline void set_has_dungeonid();
  inline void clear_has_dungeonid();
  inline void set_has_pt();
  inline void clear_has_pt();
  inline void set_has_dir();
  inline void clear_has_dir();
  inline void set_has_dungeonproid();
  inline void clear_has_dungeonproid();
  inline void set_has_layer();
  inline void clear_has_layer();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::message::Point3D* pt_;
  ::google::protobuf::uint32 dungeonid_;
  float dir_;
  ::google::protobuf::uint32 dungeonproid_;
  ::google::protobuf::uint32 layer_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_dungeon_2eproto();
  friend void protobuf_AssignDesc_dungeon_2eproto();
  friend void protobuf_ShutdownFile_dungeon_2eproto();

  void InitAsDefaultInstance();
  static Dungeon_SC_EnterDungeon* default_instance_;
};
// -------------------------------------------------------------------

class Dungeon_CS_EnterDungeonOK : public ::google::protobuf::Message {
 public:
  Dungeon_CS_EnterDungeonOK();
  virtual ~Dungeon_CS_EnterDungeonOK();

  Dungeon_CS_EnterDungeonOK(const Dungeon_CS_EnterDungeonOK& from);

  inline Dungeon_CS_EnterDungeonOK& operator=(const Dungeon_CS_EnterDungeonOK& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Dungeon_CS_EnterDungeonOK& default_instance();

  void Swap(Dungeon_CS_EnterDungeonOK* other);

  // implements Message ----------------------------------------------

  Dungeon_CS_EnterDungeonOK* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Dungeon_CS_EnterDungeonOK& from);
  void MergeFrom(const Dungeon_CS_EnterDungeonOK& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 DungeonID = 1;
  inline bool has_dungeonid() const;
  inline void clear_dungeonid();
  static const int kDungeonIDFieldNumber = 1;
  inline ::google::protobuf::uint32 dungeonid() const;
  inline void set_dungeonid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Dungeon_CS_EnterDungeonOK)
 private:
  inline void set_has_dungeonid();
  inline void clear_has_dungeonid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 dungeonid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_dungeon_2eproto();
  friend void protobuf_AssignDesc_dungeon_2eproto();
  friend void protobuf_ShutdownFile_dungeon_2eproto();

  void InitAsDefaultInstance();
  static Dungeon_CS_EnterDungeonOK* default_instance_;
};
// -------------------------------------------------------------------

class Dungeon_SC_Story : public ::google::protobuf::Message {
 public:
  Dungeon_SC_Story();
  virtual ~Dungeon_SC_Story();

  Dungeon_SC_Story(const Dungeon_SC_Story& from);

  inline Dungeon_SC_Story& operator=(const Dungeon_SC_Story& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Dungeon_SC_Story& default_instance();

  void Swap(Dungeon_SC_Story* other);

  // implements Message ----------------------------------------------

  Dungeon_SC_Story* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Dungeon_SC_Story& from);
  void MergeFrom(const Dungeon_SC_Story& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 StoryID = 1;
  inline bool has_storyid() const;
  inline void clear_storyid();
  static const int kStoryIDFieldNumber = 1;
  inline ::google::protobuf::uint32 storyid() const;
  inline void set_storyid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Dungeon_SC_Story)
 private:
  inline void set_has_storyid();
  inline void clear_has_storyid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 storyid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_dungeon_2eproto();
  friend void protobuf_AssignDesc_dungeon_2eproto();
  friend void protobuf_ShutdownFile_dungeon_2eproto();

  void InitAsDefaultInstance();
  static Dungeon_SC_Story* default_instance_;
};
// -------------------------------------------------------------------

class Dungeon_SC_Customs : public ::google::protobuf::Message {
 public:
  Dungeon_SC_Customs();
  virtual ~Dungeon_SC_Customs();

  Dungeon_SC_Customs(const Dungeon_SC_Customs& from);

  inline Dungeon_SC_Customs& operator=(const Dungeon_SC_Customs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Dungeon_SC_Customs& default_instance();

  void Swap(Dungeon_SC_Customs* other);

  // implements Message ----------------------------------------------

  Dungeon_SC_Customs* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Dungeon_SC_Customs& from);
  void MergeFrom(const Dungeon_SC_Customs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 CustomsID = 1;
  inline bool has_customsid() const;
  inline void clear_customsid();
  static const int kCustomsIDFieldNumber = 1;
  inline ::google::protobuf::uint32 customsid() const;
  inline void set_customsid(::google::protobuf::uint32 value);

  // required int32 Type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Dungeon_SC_Customs)
 private:
  inline void set_has_customsid();
  inline void clear_has_customsid();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 customsid_;
  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_dungeon_2eproto();
  friend void protobuf_AssignDesc_dungeon_2eproto();
  friend void protobuf_ShutdownFile_dungeon_2eproto();

  void InitAsDefaultInstance();
  static Dungeon_SC_Customs* default_instance_;
};
// -------------------------------------------------------------------

class Dungeon_CS_RequestEnterDungeon : public ::google::protobuf::Message {
 public:
  Dungeon_CS_RequestEnterDungeon();
  virtual ~Dungeon_CS_RequestEnterDungeon();

  Dungeon_CS_RequestEnterDungeon(const Dungeon_CS_RequestEnterDungeon& from);

  inline Dungeon_CS_RequestEnterDungeon& operator=(const Dungeon_CS_RequestEnterDungeon& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Dungeon_CS_RequestEnterDungeon& default_instance();

  void Swap(Dungeon_CS_RequestEnterDungeon* other);

  // implements Message ----------------------------------------------

  Dungeon_CS_RequestEnterDungeon* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Dungeon_CS_RequestEnterDungeon& from);
  void MergeFrom(const Dungeon_CS_RequestEnterDungeon& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 DungeonProId = 1;
  inline bool has_dungeonproid() const;
  inline void clear_dungeonproid();
  static const int kDungeonProIdFieldNumber = 1;
  inline ::google::protobuf::uint32 dungeonproid() const;
  inline void set_dungeonproid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Dungeon_CS_RequestEnterDungeon)
 private:
  inline void set_has_dungeonproid();
  inline void clear_has_dungeonproid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 dungeonproid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_dungeon_2eproto();
  friend void protobuf_AssignDesc_dungeon_2eproto();
  friend void protobuf_ShutdownFile_dungeon_2eproto();

  void InitAsDefaultInstance();
  static Dungeon_CS_RequestEnterDungeon* default_instance_;
};
// -------------------------------------------------------------------

class Game2Battle_RequestEnterDungeon : public ::google::protobuf::Message {
 public:
  Game2Battle_RequestEnterDungeon();
  virtual ~Game2Battle_RequestEnterDungeon();

  Game2Battle_RequestEnterDungeon(const Game2Battle_RequestEnterDungeon& from);

  inline Game2Battle_RequestEnterDungeon& operator=(const Game2Battle_RequestEnterDungeon& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Game2Battle_RequestEnterDungeon& default_instance();

  void Swap(Game2Battle_RequestEnterDungeon* other);

  // implements Message ----------------------------------------------

  Game2Battle_RequestEnterDungeon* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Game2Battle_RequestEnterDungeon& from);
  void MergeFrom(const Game2Battle_RequestEnterDungeon& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 DungeonProId = 1;
  inline bool has_dungeonproid() const;
  inline void clear_dungeonproid();
  static const int kDungeonProIdFieldNumber = 1;
  inline ::google::protobuf::uint32 dungeonproid() const;
  inline void set_dungeonproid(::google::protobuf::uint32 value);

  // optional uint32 uiFirst = 2;
  inline bool has_uifirst() const;
  inline void clear_uifirst();
  static const int kUiFirstFieldNumber = 2;
  inline ::google::protobuf::uint32 uifirst() const;
  inline void set_uifirst(::google::protobuf::uint32 value);

  // optional uint32 uiAgain = 3;
  inline bool has_uiagain() const;
  inline void clear_uiagain();
  static const int kUiAgainFieldNumber = 3;
  inline ::google::protobuf::uint32 uiagain() const;
  inline void set_uiagain(::google::protobuf::uint32 value);

  // optional uint32 DungeonAssignId = 4;
  inline bool has_dungeonassignid() const;
  inline void clear_dungeonassignid();
  static const int kDungeonAssignIdFieldNumber = 4;
  inline ::google::protobuf::uint32 dungeonassignid() const;
  inline void set_dungeonassignid(::google::protobuf::uint32 value);

  // required .proto.message.BattlePlayerInfo sPlyInfo = 5;
  inline bool has_splyinfo() const;
  inline void clear_splyinfo();
  static const int kSPlyInfoFieldNumber = 5;
  inline const ::proto::message::BattlePlayerInfo& splyinfo() const;
  inline ::proto::message::BattlePlayerInfo* mutable_splyinfo();
  inline ::proto::message::BattlePlayerInfo* release_splyinfo();
  inline void set_allocated_splyinfo(::proto::message::BattlePlayerInfo* splyinfo);

  // optional .proto.message.BattleBoatInfo sBoatInfo = 6;
  inline bool has_sboatinfo() const;
  inline void clear_sboatinfo();
  static const int kSBoatInfoFieldNumber = 6;
  inline const ::proto::message::BattleBoatInfo& sboatinfo() const;
  inline ::proto::message::BattleBoatInfo* mutable_sboatinfo();
  inline ::proto::message::BattleBoatInfo* release_sboatinfo();
  inline void set_allocated_sboatinfo(::proto::message::BattleBoatInfo* sboatinfo);

  // optional uint32 uiBattleLink = 7;
  inline bool has_uibattlelink() const;
  inline void clear_uibattlelink();
  static const int kUiBattleLinkFieldNumber = 7;
  inline ::google::protobuf::uint32 uibattlelink() const;
  inline void set_uibattlelink(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Game2Battle_RequestEnterDungeon)
 private:
  inline void set_has_dungeonproid();
  inline void clear_has_dungeonproid();
  inline void set_has_uifirst();
  inline void clear_has_uifirst();
  inline void set_has_uiagain();
  inline void clear_has_uiagain();
  inline void set_has_dungeonassignid();
  inline void clear_has_dungeonassignid();
  inline void set_has_splyinfo();
  inline void clear_has_splyinfo();
  inline void set_has_sboatinfo();
  inline void clear_has_sboatinfo();
  inline void set_has_uibattlelink();
  inline void clear_has_uibattlelink();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 dungeonproid_;
  ::google::protobuf::uint32 uifirst_;
  ::google::protobuf::uint32 uiagain_;
  ::google::protobuf::uint32 dungeonassignid_;
  ::proto::message::BattlePlayerInfo* splyinfo_;
  ::proto::message::BattleBoatInfo* sboatinfo_;
  ::google::protobuf::uint32 uibattlelink_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_dungeon_2eproto();
  friend void protobuf_AssignDesc_dungeon_2eproto();
  friend void protobuf_ShutdownFile_dungeon_2eproto();

  void InitAsDefaultInstance();
  static Game2Battle_RequestEnterDungeon* default_instance_;
};
// -------------------------------------------------------------------

class Battle2Game_AckEnterDungeon : public ::google::protobuf::Message {
 public:
  Battle2Game_AckEnterDungeon();
  virtual ~Battle2Game_AckEnterDungeon();

  Battle2Game_AckEnterDungeon(const Battle2Game_AckEnterDungeon& from);

  inline Battle2Game_AckEnterDungeon& operator=(const Battle2Game_AckEnterDungeon& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Battle2Game_AckEnterDungeon& default_instance();

  void Swap(Battle2Game_AckEnterDungeon* other);

  // implements Message ----------------------------------------------

  Battle2Game_AckEnterDungeon* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Battle2Game_AckEnterDungeon& from);
  void MergeFrom(const Battle2Game_AckEnterDungeon& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 DungeonID = 1;
  inline bool has_dungeonid() const;
  inline void clear_dungeonid();
  static const int kDungeonIDFieldNumber = 1;
  inline ::google::protobuf::uint32 dungeonid() const;
  inline void set_dungeonid(::google::protobuf::uint32 value);

  // optional .proto.message.Point3D Pt = 2;
  inline bool has_pt() const;
  inline void clear_pt();
  static const int kPtFieldNumber = 2;
  inline const ::proto::message::Point3D& pt() const;
  inline ::proto::message::Point3D* mutable_pt();
  inline ::proto::message::Point3D* release_pt();
  inline void set_allocated_pt(::proto::message::Point3D* pt);

  // optional float Dir = 3;
  inline bool has_dir() const;
  inline void clear_dir();
  static const int kDirFieldNumber = 3;
  inline float dir() const;
  inline void set_dir(float value);

  // optional uint32 DungeonProId = 4;
  inline bool has_dungeonproid() const;
  inline void clear_dungeonproid();
  static const int kDungeonProIdFieldNumber = 4;
  inline ::google::protobuf::uint32 dungeonproid() const;
  inline void set_dungeonproid(::google::protobuf::uint32 value);

  // optional uint32 Layer = 5;
  inline bool has_layer() const;
  inline void clear_layer();
  static const int kLayerFieldNumber = 5;
  inline ::google::protobuf::uint32 layer() const;
  inline void set_layer(::google::protobuf::uint32 value);

  // optional int32 result = 6;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 6;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Battle2Game_AckEnterDungeon)
 private:
  inline void set_has_dungeonid();
  inline void clear_has_dungeonid();
  inline void set_has_pt();
  inline void clear_has_pt();
  inline void set_has_dir();
  inline void clear_has_dir();
  inline void set_has_dungeonproid();
  inline void clear_has_dungeonproid();
  inline void set_has_layer();
  inline void clear_has_layer();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::message::Point3D* pt_;
  ::google::protobuf::uint32 dungeonid_;
  float dir_;
  ::google::protobuf::uint32 dungeonproid_;
  ::google::protobuf::uint32 layer_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_dungeon_2eproto();
  friend void protobuf_AssignDesc_dungeon_2eproto();
  friend void protobuf_ShutdownFile_dungeon_2eproto();

  void InitAsDefaultInstance();
  static Battle2Game_AckEnterDungeon* default_instance_;
};
// -------------------------------------------------------------------

class Dungeon_SC_RequestEnterDungeon : public ::google::protobuf::Message {
 public:
  Dungeon_SC_RequestEnterDungeon();
  virtual ~Dungeon_SC_RequestEnterDungeon();

  Dungeon_SC_RequestEnterDungeon(const Dungeon_SC_RequestEnterDungeon& from);

  inline Dungeon_SC_RequestEnterDungeon& operator=(const Dungeon_SC_RequestEnterDungeon& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Dungeon_SC_RequestEnterDungeon& default_instance();

  void Swap(Dungeon_SC_RequestEnterDungeon* other);

  // implements Message ----------------------------------------------

  Dungeon_SC_RequestEnterDungeon* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Dungeon_SC_RequestEnterDungeon& from);
  void MergeFrom(const Dungeon_SC_RequestEnterDungeon& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // repeated string charname_list = 2;
  inline int charname_list_size() const;
  inline void clear_charname_list();
  static const int kCharnameListFieldNumber = 2;
  inline const ::std::string& charname_list(int index) const;
  inline ::std::string* mutable_charname_list(int index);
  inline void set_charname_list(int index, const ::std::string& value);
  inline void set_charname_list(int index, const char* value);
  inline void set_charname_list(int index, const char* value, size_t size);
  inline ::std::string* add_charname_list();
  inline void add_charname_list(const ::std::string& value);
  inline void add_charname_list(const char* value);
  inline void add_charname_list(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& charname_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_charname_list();

  // @@protoc_insertion_point(class_scope:proto.message.Dungeon_SC_RequestEnterDungeon)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::std::string> charname_list_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_dungeon_2eproto();
  friend void protobuf_AssignDesc_dungeon_2eproto();
  friend void protobuf_ShutdownFile_dungeon_2eproto();

  void InitAsDefaultInstance();
  static Dungeon_SC_RequestEnterDungeon* default_instance_;
};
// -------------------------------------------------------------------

class Dungeon_CS_PassStory : public ::google::protobuf::Message {
 public:
  Dungeon_CS_PassStory();
  virtual ~Dungeon_CS_PassStory();

  Dungeon_CS_PassStory(const Dungeon_CS_PassStory& from);

  inline Dungeon_CS_PassStory& operator=(const Dungeon_CS_PassStory& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Dungeon_CS_PassStory& default_instance();

  void Swap(Dungeon_CS_PassStory* other);

  // implements Message ----------------------------------------------

  Dungeon_CS_PassStory* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Dungeon_CS_PassStory& from);
  void MergeFrom(const Dungeon_CS_PassStory& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.message.Dungeon_CS_PassStory)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_dungeon_2eproto();
  friend void protobuf_AssignDesc_dungeon_2eproto();
  friend void protobuf_ShutdownFile_dungeon_2eproto();

  void InitAsDefaultInstance();
  static Dungeon_CS_PassStory* default_instance_;
};
// -------------------------------------------------------------------

class Dungeon_CS_LeaveDungeon : public ::google::protobuf::Message {
 public:
  Dungeon_CS_LeaveDungeon();
  virtual ~Dungeon_CS_LeaveDungeon();

  Dungeon_CS_LeaveDungeon(const Dungeon_CS_LeaveDungeon& from);

  inline Dungeon_CS_LeaveDungeon& operator=(const Dungeon_CS_LeaveDungeon& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Dungeon_CS_LeaveDungeon& default_instance();

  void Swap(Dungeon_CS_LeaveDungeon* other);

  // implements Message ----------------------------------------------

  Dungeon_CS_LeaveDungeon* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Dungeon_CS_LeaveDungeon& from);
  void MergeFrom(const Dungeon_CS_LeaveDungeon& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.message.Dungeon_CS_LeaveDungeon)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_dungeon_2eproto();
  friend void protobuf_AssignDesc_dungeon_2eproto();
  friend void protobuf_ShutdownFile_dungeon_2eproto();

  void InitAsDefaultInstance();
  static Dungeon_CS_LeaveDungeon* default_instance_;
};
// -------------------------------------------------------------------

class DungeonGrade : public ::google::protobuf::Message {
 public:
  DungeonGrade();
  virtual ~DungeonGrade();

  DungeonGrade(const DungeonGrade& from);

  inline DungeonGrade& operator=(const DungeonGrade& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DungeonGrade& default_instance();

  void Swap(DungeonGrade* other);

  // implements Message ----------------------------------------------

  DungeonGrade* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DungeonGrade& from);
  void MergeFrom(const DungeonGrade& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 gtype = 1;
  inline bool has_gtype() const;
  inline void clear_gtype();
  static const int kGtypeFieldNumber = 1;
  inline ::google::protobuf::int32 gtype() const;
  inline void set_gtype(::google::protobuf::int32 value);

  // optional int32 value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::int32 value() const;
  inline void set_value(::google::protobuf::int32 value);

  // optional int32 grade = 3;
  inline bool has_grade() const;
  inline void clear_grade();
  static const int kGradeFieldNumber = 3;
  inline ::google::protobuf::int32 grade() const;
  inline void set_grade(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.message.DungeonGrade)
 private:
  inline void set_has_gtype();
  inline void clear_has_gtype();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_grade();
  inline void clear_has_grade();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 gtype_;
  ::google::protobuf::int32 value_;
  ::google::protobuf::int32 grade_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_dungeon_2eproto();
  friend void protobuf_AssignDesc_dungeon_2eproto();
  friend void protobuf_ShutdownFile_dungeon_2eproto();

  void InitAsDefaultInstance();
  static DungeonGrade* default_instance_;
};
// -------------------------------------------------------------------

class RewardItem : public ::google::protobuf::Message {
 public:
  RewardItem();
  virtual ~RewardItem();

  RewardItem(const RewardItem& from);

  inline RewardItem& operator=(const RewardItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RewardItem& default_instance();

  void Swap(RewardItem* other);

  // implements Message ----------------------------------------------

  RewardItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RewardItem& from);
  void MergeFrom(const RewardItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.message.RewardItem)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_dungeon_2eproto();
  friend void protobuf_AssignDesc_dungeon_2eproto();
  friend void protobuf_ShutdownFile_dungeon_2eproto();

  void InitAsDefaultInstance();
  static RewardItem* default_instance_;
};
// -------------------------------------------------------------------

class Dungeon_SC_Result : public ::google::protobuf::Message {
 public:
  Dungeon_SC_Result();
  virtual ~Dungeon_SC_Result();

  Dungeon_SC_Result(const Dungeon_SC_Result& from);

  inline Dungeon_SC_Result& operator=(const Dungeon_SC_Result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Dungeon_SC_Result& default_instance();

  void Swap(Dungeon_SC_Result* other);

  // implements Message ----------------------------------------------

  Dungeon_SC_Result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Dungeon_SC_Result& from);
  void MergeFrom(const Dungeon_SC_Result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 rt = 1;
  inline bool has_rt() const;
  inline void clear_rt();
  static const int kRtFieldNumber = 1;
  inline ::google::protobuf::uint32 rt() const;
  inline void set_rt(::google::protobuf::uint32 value);

  // optional int32 dungeon_id = 2;
  inline bool has_dungeon_id() const;
  inline void clear_dungeon_id();
  static const int kDungeonIdFieldNumber = 2;
  inline ::google::protobuf::int32 dungeon_id() const;
  inline void set_dungeon_id(::google::protobuf::int32 value);

  // required int32 total_grade = 3;
  inline bool has_total_grade() const;
  inline void clear_total_grade();
  static const int kTotalGradeFieldNumber = 3;
  inline ::google::protobuf::int32 total_grade() const;
  inline void set_total_grade(::google::protobuf::int32 value);

  // repeated .proto.message.DungeonGrade grade_list = 4;
  inline int grade_list_size() const;
  inline void clear_grade_list();
  static const int kGradeListFieldNumber = 4;
  inline const ::proto::message::DungeonGrade& grade_list(int index) const;
  inline ::proto::message::DungeonGrade* mutable_grade_list(int index);
  inline ::proto::message::DungeonGrade* add_grade_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::message::DungeonGrade >&
      grade_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::message::DungeonGrade >*
      mutable_grade_list();

  // repeated .proto.message.RewardItem item_list = 5;
  inline int item_list_size() const;
  inline void clear_item_list();
  static const int kItemListFieldNumber = 5;
  inline const ::proto::message::RewardItem& item_list(int index) const;
  inline ::proto::message::RewardItem* mutable_item_list(int index);
  inline ::proto::message::RewardItem* add_item_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::message::RewardItem >&
      item_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::message::RewardItem >*
      mutable_item_list();

  // repeated .proto.message.RewardItem extra_list = 6;
  inline int extra_list_size() const;
  inline void clear_extra_list();
  static const int kExtraListFieldNumber = 6;
  inline const ::proto::message::RewardItem& extra_list(int index) const;
  inline ::proto::message::RewardItem* mutable_extra_list(int index);
  inline ::proto::message::RewardItem* add_extra_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::message::RewardItem >&
      extra_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::message::RewardItem >*
      mutable_extra_list();

  // @@protoc_insertion_point(class_scope:proto.message.Dungeon_SC_Result)
 private:
  inline void set_has_rt();
  inline void clear_has_rt();
  inline void set_has_dungeon_id();
  inline void clear_has_dungeon_id();
  inline void set_has_total_grade();
  inline void clear_has_total_grade();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 rt_;
  ::google::protobuf::int32 dungeon_id_;
  ::google::protobuf::RepeatedPtrField< ::proto::message::DungeonGrade > grade_list_;
  ::google::protobuf::RepeatedPtrField< ::proto::message::RewardItem > item_list_;
  ::google::protobuf::RepeatedPtrField< ::proto::message::RewardItem > extra_list_;
  ::google::protobuf::int32 total_grade_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_dungeon_2eproto();
  friend void protobuf_AssignDesc_dungeon_2eproto();
  friend void protobuf_ShutdownFile_dungeon_2eproto();

  void InitAsDefaultInstance();
  static Dungeon_SC_Result* default_instance_;
};
// -------------------------------------------------------------------

class Dungeon_CS_RequestEvent : public ::google::protobuf::Message {
 public:
  Dungeon_CS_RequestEvent();
  virtual ~Dungeon_CS_RequestEvent();

  Dungeon_CS_RequestEvent(const Dungeon_CS_RequestEvent& from);

  inline Dungeon_CS_RequestEvent& operator=(const Dungeon_CS_RequestEvent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Dungeon_CS_RequestEvent& default_instance();

  void Swap(Dungeon_CS_RequestEvent* other);

  // implements Message ----------------------------------------------

  Dungeon_CS_RequestEvent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Dungeon_CS_RequestEvent& from);
  void MergeFrom(const Dungeon_CS_RequestEvent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 rt = 1;
  inline bool has_rt() const;
  inline void clear_rt();
  static const int kRtFieldNumber = 1;
  inline ::google::protobuf::uint32 rt() const;
  inline void set_rt(::google::protobuf::uint32 value);

  // optional uint32 value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::uint32 value() const;
  inline void set_value(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Dungeon_CS_RequestEvent)
 private:
  inline void set_has_rt();
  inline void clear_has_rt();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 rt_;
  ::google::protobuf::uint32 value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_dungeon_2eproto();
  friend void protobuf_AssignDesc_dungeon_2eproto();
  friend void protobuf_ShutdownFile_dungeon_2eproto();

  void InitAsDefaultInstance();
  static Dungeon_CS_RequestEvent* default_instance_;
};
// -------------------------------------------------------------------

class Dungeon_CS_Relive : public ::google::protobuf::Message {
 public:
  Dungeon_CS_Relive();
  virtual ~Dungeon_CS_Relive();

  Dungeon_CS_Relive(const Dungeon_CS_Relive& from);

  inline Dungeon_CS_Relive& operator=(const Dungeon_CS_Relive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Dungeon_CS_Relive& default_instance();

  void Swap(Dungeon_CS_Relive* other);

  // implements Message ----------------------------------------------

  Dungeon_CS_Relive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Dungeon_CS_Relive& from);
  void MergeFrom(const Dungeon_CS_Relive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Dungeon_CS_Relive)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_dungeon_2eproto();
  friend void protobuf_AssignDesc_dungeon_2eproto();
  friend void protobuf_ShutdownFile_dungeon_2eproto();

  void InitAsDefaultInstance();
  static Dungeon_CS_Relive* default_instance_;
};
// -------------------------------------------------------------------

class Dungeon_SC_MonsterNum : public ::google::protobuf::Message {
 public:
  Dungeon_SC_MonsterNum();
  virtual ~Dungeon_SC_MonsterNum();

  Dungeon_SC_MonsterNum(const Dungeon_SC_MonsterNum& from);

  inline Dungeon_SC_MonsterNum& operator=(const Dungeon_SC_MonsterNum& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Dungeon_SC_MonsterNum& default_instance();

  void Swap(Dungeon_SC_MonsterNum* other);

  // implements Message ----------------------------------------------

  Dungeon_SC_MonsterNum* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Dungeon_SC_MonsterNum& from);
  void MergeFrom(const Dungeon_SC_MonsterNum& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 MonsterNum = 1;
  inline bool has_monsternum() const;
  inline void clear_monsternum();
  static const int kMonsterNumFieldNumber = 1;
  inline ::google::protobuf::int32 monsternum() const;
  inline void set_monsternum(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Dungeon_SC_MonsterNum)
 private:
  inline void set_has_monsternum();
  inline void clear_has_monsternum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 monsternum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_dungeon_2eproto();
  friend void protobuf_AssignDesc_dungeon_2eproto();
  friend void protobuf_ShutdownFile_dungeon_2eproto();

  void InitAsDefaultInstance();
  static Dungeon_SC_MonsterNum* default_instance_;
};
// -------------------------------------------------------------------

class Dungeon_SC_ChangeCamp : public ::google::protobuf::Message {
 public:
  Dungeon_SC_ChangeCamp();
  virtual ~Dungeon_SC_ChangeCamp();

  Dungeon_SC_ChangeCamp(const Dungeon_SC_ChangeCamp& from);

  inline Dungeon_SC_ChangeCamp& operator=(const Dungeon_SC_ChangeCamp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Dungeon_SC_ChangeCamp& default_instance();

  void Swap(Dungeon_SC_ChangeCamp* other);

  // implements Message ----------------------------------------------

  Dungeon_SC_ChangeCamp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Dungeon_SC_ChangeCamp& from);
  void MergeFrom(const Dungeon_SC_ChangeCamp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 ID = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIDFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional int32 camp = 2;
  inline bool has_camp() const;
  inline void clear_camp();
  static const int kCampFieldNumber = 2;
  inline ::google::protobuf::int32 camp() const;
  inline void set_camp(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Dungeon_SC_ChangeCamp)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_camp();
  inline void clear_has_camp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;
  ::google::protobuf::int32 camp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_dungeon_2eproto();
  friend void protobuf_AssignDesc_dungeon_2eproto();
  friend void protobuf_ShutdownFile_dungeon_2eproto();

  void InitAsDefaultInstance();
  static Dungeon_SC_ChangeCamp* default_instance_;
};
// -------------------------------------------------------------------

class Dungeon_SC_PretendStart : public ::google::protobuf::Message {
 public:
  Dungeon_SC_PretendStart();
  virtual ~Dungeon_SC_PretendStart();

  Dungeon_SC_PretendStart(const Dungeon_SC_PretendStart& from);

  inline Dungeon_SC_PretendStart& operator=(const Dungeon_SC_PretendStart& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Dungeon_SC_PretendStart& default_instance();

  void Swap(Dungeon_SC_PretendStart* other);

  // implements Message ----------------------------------------------

  Dungeon_SC_PretendStart* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Dungeon_SC_PretendStart& from);
  void MergeFrom(const Dungeon_SC_PretendStart& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 camp = 1;
  inline bool has_camp() const;
  inline void clear_camp();
  static const int kCampFieldNumber = 1;
  inline ::google::protobuf::int32 camp() const;
  inline void set_camp(::google::protobuf::int32 value);

  // optional uint32 bodyId = 2;
  inline bool has_bodyid() const;
  inline void clear_bodyid();
  static const int kBodyIdFieldNumber = 2;
  inline ::google::protobuf::uint32 bodyid() const;
  inline void set_bodyid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Dungeon_SC_PretendStart)
 private:
  inline void set_has_camp();
  inline void clear_has_camp();
  inline void set_has_bodyid();
  inline void clear_has_bodyid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 camp_;
  ::google::protobuf::uint32 bodyid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_dungeon_2eproto();
  friend void protobuf_AssignDesc_dungeon_2eproto();
  friend void protobuf_ShutdownFile_dungeon_2eproto();

  void InitAsDefaultInstance();
  static Dungeon_SC_PretendStart* default_instance_;
};
// -------------------------------------------------------------------

class Dungeon_SC_PretendEnd : public ::google::protobuf::Message {
 public:
  Dungeon_SC_PretendEnd();
  virtual ~Dungeon_SC_PretendEnd();

  Dungeon_SC_PretendEnd(const Dungeon_SC_PretendEnd& from);

  inline Dungeon_SC_PretendEnd& operator=(const Dungeon_SC_PretendEnd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Dungeon_SC_PretendEnd& default_instance();

  void Swap(Dungeon_SC_PretendEnd* other);

  // implements Message ----------------------------------------------

  Dungeon_SC_PretendEnd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Dungeon_SC_PretendEnd& from);
  void MergeFrom(const Dungeon_SC_PretendEnd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 camp = 1;
  inline bool has_camp() const;
  inline void clear_camp();
  static const int kCampFieldNumber = 1;
  inline ::google::protobuf::int32 camp() const;
  inline void set_camp(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Dungeon_SC_PretendEnd)
 private:
  inline void set_has_camp();
  inline void clear_has_camp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 camp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_dungeon_2eproto();
  friend void protobuf_AssignDesc_dungeon_2eproto();
  friend void protobuf_ShutdownFile_dungeon_2eproto();

  void InitAsDefaultInstance();
  static Dungeon_SC_PretendEnd* default_instance_;
};
// -------------------------------------------------------------------

class PassDungeon : public ::google::protobuf::Message {
 public:
  PassDungeon();
  virtual ~PassDungeon();

  PassDungeon(const PassDungeon& from);

  inline PassDungeon& operator=(const PassDungeon& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PassDungeon& default_instance();

  void Swap(PassDungeon* other);

  // implements Message ----------------------------------------------

  PassDungeon* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PassDungeon& from);
  void MergeFrom(const PassDungeon& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 grade = 2;
  inline bool has_grade() const;
  inline void clear_grade();
  static const int kGradeFieldNumber = 2;
  inline ::google::protobuf::int32 grade() const;
  inline void set_grade(::google::protobuf::int32 value);

  // optional int32 reward_times = 3;
  inline bool has_reward_times() const;
  inline void clear_reward_times();
  static const int kRewardTimesFieldNumber = 3;
  inline ::google::protobuf::int32 reward_times() const;
  inline void set_reward_times(::google::protobuf::int32 value);

  // optional int32 enter_times = 4;
  inline bool has_enter_times() const;
  inline void clear_enter_times();
  static const int kEnterTimesFieldNumber = 4;
  inline ::google::protobuf::int32 enter_times() const;
  inline void set_enter_times(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.message.PassDungeon)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_grade();
  inline void clear_has_grade();
  inline void set_has_reward_times();
  inline void clear_has_reward_times();
  inline void set_has_enter_times();
  inline void clear_has_enter_times();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 grade_;
  ::google::protobuf::int32 reward_times_;
  ::google::protobuf::int32 enter_times_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_dungeon_2eproto();
  friend void protobuf_AssignDesc_dungeon_2eproto();
  friend void protobuf_ShutdownFile_dungeon_2eproto();

  void InitAsDefaultInstance();
  static PassDungeon* default_instance_;
};
// -------------------------------------------------------------------

class TrialInfo : public ::google::protobuf::Message {
 public:
  TrialInfo();
  virtual ~TrialInfo();

  TrialInfo(const TrialInfo& from);

  inline TrialInfo& operator=(const TrialInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrialInfo& default_instance();

  void Swap(TrialInfo* other);

  // implements Message ----------------------------------------------

  TrialInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrialInfo& from);
  void MergeFrom(const TrialInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uiSweep = 1;
  inline bool has_uisweep() const;
  inline void clear_uisweep();
  static const int kUiSweepFieldNumber = 1;
  inline ::google::protobuf::uint32 uisweep() const;
  inline void set_uisweep(::google::protobuf::uint32 value);

  // optional uint32 uiCurFloor = 2;
  inline bool has_uicurfloor() const;
  inline void clear_uicurfloor();
  static const int kUiCurFloorFieldNumber = 2;
  inline ::google::protobuf::uint32 uicurfloor() const;
  inline void set_uicurfloor(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.message.TrialInfo)
 private:
  inline void set_has_uisweep();
  inline void clear_has_uisweep();
  inline void set_has_uicurfloor();
  inline void clear_has_uicurfloor();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 uisweep_;
  ::google::protobuf::uint32 uicurfloor_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_dungeon_2eproto();
  friend void protobuf_AssignDesc_dungeon_2eproto();
  friend void protobuf_ShutdownFile_dungeon_2eproto();

  void InitAsDefaultInstance();
  static TrialInfo* default_instance_;
};
// -------------------------------------------------------------------

class SingleStoryDungeon : public ::google::protobuf::Message {
 public:
  SingleStoryDungeon();
  virtual ~SingleStoryDungeon();

  SingleStoryDungeon(const SingleStoryDungeon& from);

  inline SingleStoryDungeon& operator=(const SingleStoryDungeon& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SingleStoryDungeon& default_instance();

  void Swap(SingleStoryDungeon* other);

  // implements Message ----------------------------------------------

  SingleStoryDungeon* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SingleStoryDungeon& from);
  void MergeFrom(const SingleStoryDungeon& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 open_id = 1;
  inline bool has_open_id() const;
  inline void clear_open_id();
  static const int kOpenIdFieldNumber = 1;
  inline ::google::protobuf::int32 open_id() const;
  inline void set_open_id(::google::protobuf::int32 value);

  // repeated .proto.message.PassDungeon pass_list = 2;
  inline int pass_list_size() const;
  inline void clear_pass_list();
  static const int kPassListFieldNumber = 2;
  inline const ::proto::message::PassDungeon& pass_list(int index) const;
  inline ::proto::message::PassDungeon* mutable_pass_list(int index);
  inline ::proto::message::PassDungeon* add_pass_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::message::PassDungeon >&
      pass_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::message::PassDungeon >*
      mutable_pass_list();

  // @@protoc_insertion_point(class_scope:proto.message.SingleStoryDungeon)
 private:
  inline void set_has_open_id();
  inline void clear_has_open_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto::message::PassDungeon > pass_list_;
  ::google::protobuf::int32 open_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_dungeon_2eproto();
  friend void protobuf_AssignDesc_dungeon_2eproto();
  friend void protobuf_ShutdownFile_dungeon_2eproto();

  void InitAsDefaultInstance();
  static SingleStoryDungeon* default_instance_;
};
// -------------------------------------------------------------------

class Dungeon_CS_GetDungeonInfo : public ::google::protobuf::Message {
 public:
  Dungeon_CS_GetDungeonInfo();
  virtual ~Dungeon_CS_GetDungeonInfo();

  Dungeon_CS_GetDungeonInfo(const Dungeon_CS_GetDungeonInfo& from);

  inline Dungeon_CS_GetDungeonInfo& operator=(const Dungeon_CS_GetDungeonInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Dungeon_CS_GetDungeonInfo& default_instance();

  void Swap(Dungeon_CS_GetDungeonInfo* other);

  // implements Message ----------------------------------------------

  Dungeon_CS_GetDungeonInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Dungeon_CS_GetDungeonInfo& from);
  void MergeFrom(const Dungeon_CS_GetDungeonInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.message.Dungeon_CS_GetDungeonInfo)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_dungeon_2eproto();
  friend void protobuf_AssignDesc_dungeon_2eproto();
  friend void protobuf_ShutdownFile_dungeon_2eproto();

  void InitAsDefaultInstance();
  static Dungeon_CS_GetDungeonInfo* default_instance_;
};
// -------------------------------------------------------------------

class Dungeon_CS_RequestEnterDungeonAgain : public ::google::protobuf::Message {
 public:
  Dungeon_CS_RequestEnterDungeonAgain();
  virtual ~Dungeon_CS_RequestEnterDungeonAgain();

  Dungeon_CS_RequestEnterDungeonAgain(const Dungeon_CS_RequestEnterDungeonAgain& from);

  inline Dungeon_CS_RequestEnterDungeonAgain& operator=(const Dungeon_CS_RequestEnterDungeonAgain& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Dungeon_CS_RequestEnterDungeonAgain& default_instance();

  void Swap(Dungeon_CS_RequestEnterDungeonAgain* other);

  // implements Message ----------------------------------------------

  Dungeon_CS_RequestEnterDungeonAgain* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Dungeon_CS_RequestEnterDungeonAgain& from);
  void MergeFrom(const Dungeon_CS_RequestEnterDungeonAgain& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.message.Dungeon_CS_RequestEnterDungeonAgain)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_dungeon_2eproto();
  friend void protobuf_AssignDesc_dungeon_2eproto();
  friend void protobuf_ShutdownFile_dungeon_2eproto();

  void InitAsDefaultInstance();
  static Dungeon_CS_RequestEnterDungeonAgain* default_instance_;
};
// -------------------------------------------------------------------

class Dungeon_SC_GetDungeonInfo : public ::google::protobuf::Message {
 public:
  Dungeon_SC_GetDungeonInfo();
  virtual ~Dungeon_SC_GetDungeonInfo();

  Dungeon_SC_GetDungeonInfo(const Dungeon_SC_GetDungeonInfo& from);

  inline Dungeon_SC_GetDungeonInfo& operator=(const Dungeon_SC_GetDungeonInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Dungeon_SC_GetDungeonInfo& default_instance();

  void Swap(Dungeon_SC_GetDungeonInfo* other);

  // implements Message ----------------------------------------------

  Dungeon_SC_GetDungeonInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Dungeon_SC_GetDungeonInfo& from);
  void MergeFrom(const Dungeon_SC_GetDungeonInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto.message.SingleStoryDungeon single_ordinary = 1;
  inline bool has_single_ordinary() const;
  inline void clear_single_ordinary();
  static const int kSingleOrdinaryFieldNumber = 1;
  inline const ::proto::message::SingleStoryDungeon& single_ordinary() const;
  inline ::proto::message::SingleStoryDungeon* mutable_single_ordinary();
  inline ::proto::message::SingleStoryDungeon* release_single_ordinary();
  inline void set_allocated_single_ordinary(::proto::message::SingleStoryDungeon* single_ordinary);

  // optional .proto.message.SingleStoryDungeon single_elite = 2;
  inline bool has_single_elite() const;
  inline void clear_single_elite();
  static const int kSingleEliteFieldNumber = 2;
  inline const ::proto::message::SingleStoryDungeon& single_elite() const;
  inline ::proto::message::SingleStoryDungeon* mutable_single_elite();
  inline ::proto::message::SingleStoryDungeon* release_single_elite();
  inline void set_allocated_single_elite(::proto::message::SingleStoryDungeon* single_elite);

  // optional .proto.message.SingleStoryDungeon Trial = 3;
  inline bool has_trial() const;
  inline void clear_trial();
  static const int kTrialFieldNumber = 3;
  inline const ::proto::message::SingleStoryDungeon& trial() const;
  inline ::proto::message::SingleStoryDungeon* mutable_trial();
  inline ::proto::message::SingleStoryDungeon* release_trial();
  inline void set_allocated_trial(::proto::message::SingleStoryDungeon* trial);

  // repeated .proto.message.PassDungeon material_list = 4;
  inline int material_list_size() const;
  inline void clear_material_list();
  static const int kMaterialListFieldNumber = 4;
  inline const ::proto::message::PassDungeon& material_list(int index) const;
  inline ::proto::message::PassDungeon* mutable_material_list(int index);
  inline ::proto::message::PassDungeon* add_material_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::message::PassDungeon >&
      material_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::message::PassDungeon >*
      mutable_material_list();

  // repeated .proto.message.TrialInfo single_trial = 5;
  inline int single_trial_size() const;
  inline void clear_single_trial();
  static const int kSingleTrialFieldNumber = 5;
  inline const ::proto::message::TrialInfo& single_trial(int index) const;
  inline ::proto::message::TrialInfo* mutable_single_trial(int index);
  inline ::proto::message::TrialInfo* add_single_trial();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::message::TrialInfo >&
      single_trial() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::message::TrialInfo >*
      mutable_single_trial();

  // repeated .proto.message.PassDungeon other = 6;
  inline int other_size() const;
  inline void clear_other();
  static const int kOtherFieldNumber = 6;
  inline const ::proto::message::PassDungeon& other(int index) const;
  inline ::proto::message::PassDungeon* mutable_other(int index);
  inline ::proto::message::PassDungeon* add_other();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::message::PassDungeon >&
      other() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::message::PassDungeon >*
      mutable_other();

  // optional uint32 grade_S_count = 7;
  inline bool has_grade_s_count() const;
  inline void clear_grade_s_count();
  static const int kGradeSCountFieldNumber = 7;
  inline ::google::protobuf::uint32 grade_s_count() const;
  inline void set_grade_s_count(::google::protobuf::uint32 value);

  // repeated .proto.message.IDNum grade_S_rewardtimes = 8;
  inline int grade_s_rewardtimes_size() const;
  inline void clear_grade_s_rewardtimes();
  static const int kGradeSRewardtimesFieldNumber = 8;
  inline const ::proto::message::IDNum& grade_s_rewardtimes(int index) const;
  inline ::proto::message::IDNum* mutable_grade_s_rewardtimes(int index);
  inline ::proto::message::IDNum* add_grade_s_rewardtimes();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::message::IDNum >&
      grade_s_rewardtimes() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::message::IDNum >*
      mutable_grade_s_rewardtimes();

  // @@protoc_insertion_point(class_scope:proto.message.Dungeon_SC_GetDungeonInfo)
 private:
  inline void set_has_single_ordinary();
  inline void clear_has_single_ordinary();
  inline void set_has_single_elite();
  inline void clear_has_single_elite();
  inline void set_has_trial();
  inline void clear_has_trial();
  inline void set_has_grade_s_count();
  inline void clear_has_grade_s_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::message::SingleStoryDungeon* single_ordinary_;
  ::proto::message::SingleStoryDungeon* single_elite_;
  ::proto::message::SingleStoryDungeon* trial_;
  ::google::protobuf::RepeatedPtrField< ::proto::message::PassDungeon > material_list_;
  ::google::protobuf::RepeatedPtrField< ::proto::message::TrialInfo > single_trial_;
  ::google::protobuf::RepeatedPtrField< ::proto::message::PassDungeon > other_;
  ::google::protobuf::RepeatedPtrField< ::proto::message::IDNum > grade_s_rewardtimes_;
  ::google::protobuf::uint32 grade_s_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_dungeon_2eproto();
  friend void protobuf_AssignDesc_dungeon_2eproto();
  friend void protobuf_ShutdownFile_dungeon_2eproto();

  void InitAsDefaultInstance();
  static Dungeon_SC_GetDungeonInfo* default_instance_;
};
// -------------------------------------------------------------------

class Dungeon_SC_ChangeDungeonScene : public ::google::protobuf::Message {
 public:
  Dungeon_SC_ChangeDungeonScene();
  virtual ~Dungeon_SC_ChangeDungeonScene();

  Dungeon_SC_ChangeDungeonScene(const Dungeon_SC_ChangeDungeonScene& from);

  inline Dungeon_SC_ChangeDungeonScene& operator=(const Dungeon_SC_ChangeDungeonScene& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Dungeon_SC_ChangeDungeonScene& default_instance();

  void Swap(Dungeon_SC_ChangeDungeonScene* other);

  // implements Message ----------------------------------------------

  Dungeon_SC_ChangeDungeonScene* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Dungeon_SC_ChangeDungeonScene& from);
  void MergeFrom(const Dungeon_SC_ChangeDungeonScene& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 dungeon_scene_id = 1;
  inline bool has_dungeon_scene_id() const;
  inline void clear_dungeon_scene_id();
  static const int kDungeonSceneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 dungeon_scene_id() const;
  inline void set_dungeon_scene_id(::google::protobuf::uint32 value);

  // optional .proto.message.Point3D Pt = 2;
  inline bool has_pt() const;
  inline void clear_pt();
  static const int kPtFieldNumber = 2;
  inline const ::proto::message::Point3D& pt() const;
  inline ::proto::message::Point3D* mutable_pt();
  inline ::proto::message::Point3D* release_pt();
  inline void set_allocated_pt(::proto::message::Point3D* pt);

  // optional float Dir = 3;
  inline bool has_dir() const;
  inline void clear_dir();
  static const int kDirFieldNumber = 3;
  inline float dir() const;
  inline void set_dir(float value);

  // optional uint32 Layer = 4;
  inline bool has_layer() const;
  inline void clear_layer();
  static const int kLayerFieldNumber = 4;
  inline ::google::protobuf::uint32 layer() const;
  inline void set_layer(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Dungeon_SC_ChangeDungeonScene)
 private:
  inline void set_has_dungeon_scene_id();
  inline void clear_has_dungeon_scene_id();
  inline void set_has_pt();
  inline void clear_has_pt();
  inline void set_has_dir();
  inline void clear_has_dir();
  inline void set_has_layer();
  inline void clear_has_layer();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::message::Point3D* pt_;
  ::google::protobuf::uint32 dungeon_scene_id_;
  float dir_;
  ::google::protobuf::uint32 layer_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_dungeon_2eproto();
  friend void protobuf_AssignDesc_dungeon_2eproto();
  friend void protobuf_ShutdownFile_dungeon_2eproto();

  void InitAsDefaultInstance();
  static Dungeon_SC_ChangeDungeonScene* default_instance_;
};
// -------------------------------------------------------------------

class Dungeon_CS_ChangeDungeonSceneOK : public ::google::protobuf::Message {
 public:
  Dungeon_CS_ChangeDungeonSceneOK();
  virtual ~Dungeon_CS_ChangeDungeonSceneOK();

  Dungeon_CS_ChangeDungeonSceneOK(const Dungeon_CS_ChangeDungeonSceneOK& from);

  inline Dungeon_CS_ChangeDungeonSceneOK& operator=(const Dungeon_CS_ChangeDungeonSceneOK& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Dungeon_CS_ChangeDungeonSceneOK& default_instance();

  void Swap(Dungeon_CS_ChangeDungeonSceneOK* other);

  // implements Message ----------------------------------------------

  Dungeon_CS_ChangeDungeonSceneOK* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Dungeon_CS_ChangeDungeonSceneOK& from);
  void MergeFrom(const Dungeon_CS_ChangeDungeonSceneOK& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.message.Dungeon_CS_ChangeDungeonSceneOK)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_dungeon_2eproto();
  friend void protobuf_AssignDesc_dungeon_2eproto();
  friend void protobuf_ShutdownFile_dungeon_2eproto();

  void InitAsDefaultInstance();
  static Dungeon_CS_ChangeDungeonSceneOK* default_instance_;
};
// -------------------------------------------------------------------

class Dungeon_CS_StarUp : public ::google::protobuf::Message {
 public:
  Dungeon_CS_StarUp();
  virtual ~Dungeon_CS_StarUp();

  Dungeon_CS_StarUp(const Dungeon_CS_StarUp& from);

  inline Dungeon_CS_StarUp& operator=(const Dungeon_CS_StarUp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Dungeon_CS_StarUp& default_instance();

  void Swap(Dungeon_CS_StarUp* other);

  // implements Message ----------------------------------------------

  Dungeon_CS_StarUp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Dungeon_CS_StarUp& from);
  void MergeFrom(const Dungeon_CS_StarUp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Dungeon_CS_StarUp)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_dungeon_2eproto();
  friend void protobuf_AssignDesc_dungeon_2eproto();
  friend void protobuf_ShutdownFile_dungeon_2eproto();

  void InitAsDefaultInstance();
  static Dungeon_CS_StarUp* default_instance_;
};
// -------------------------------------------------------------------

class Dungeon_SC_StarUp : public ::google::protobuf::Message {
 public:
  Dungeon_SC_StarUp();
  virtual ~Dungeon_SC_StarUp();

  Dungeon_SC_StarUp(const Dungeon_SC_StarUp& from);

  inline Dungeon_SC_StarUp& operator=(const Dungeon_SC_StarUp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Dungeon_SC_StarUp& default_instance();

  void Swap(Dungeon_SC_StarUp* other);

  // implements Message ----------------------------------------------

  Dungeon_SC_StarUp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Dungeon_SC_StarUp& from);
  void MergeFrom(const Dungeon_SC_StarUp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required int32 grade = 3;
  inline bool has_grade() const;
  inline void clear_grade();
  static const int kGradeFieldNumber = 3;
  inline ::google::protobuf::int32 grade() const;
  inline void set_grade(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Dungeon_SC_StarUp)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_grade();
  inline void clear_has_grade();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 grade_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_dungeon_2eproto();
  friend void protobuf_AssignDesc_dungeon_2eproto();
  friend void protobuf_ShutdownFile_dungeon_2eproto();

  void InitAsDefaultInstance();
  static Dungeon_SC_StarUp* default_instance_;
};
// -------------------------------------------------------------------

class Dungeon_CS_Sweep : public ::google::protobuf::Message {
 public:
  Dungeon_CS_Sweep();
  virtual ~Dungeon_CS_Sweep();

  Dungeon_CS_Sweep(const Dungeon_CS_Sweep& from);

  inline Dungeon_CS_Sweep& operator=(const Dungeon_CS_Sweep& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Dungeon_CS_Sweep& default_instance();

  void Swap(Dungeon_CS_Sweep* other);

  // implements Message ----------------------------------------------

  Dungeon_CS_Sweep* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Dungeon_CS_Sweep& from);
  void MergeFrom(const Dungeon_CS_Sweep& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Dungeon_CS_Sweep)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_dungeon_2eproto();
  friend void protobuf_AssignDesc_dungeon_2eproto();
  friend void protobuf_ShutdownFile_dungeon_2eproto();

  void InitAsDefaultInstance();
  static Dungeon_CS_Sweep* default_instance_;
};
// -------------------------------------------------------------------

class Dungeon_SC_Sweep : public ::google::protobuf::Message {
 public:
  Dungeon_SC_Sweep();
  virtual ~Dungeon_SC_Sweep();

  Dungeon_SC_Sweep(const Dungeon_SC_Sweep& from);

  inline Dungeon_SC_Sweep& operator=(const Dungeon_SC_Sweep& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Dungeon_SC_Sweep& default_instance();

  void Swap(Dungeon_SC_Sweep* other);

  // implements Message ----------------------------------------------

  Dungeon_SC_Sweep* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Dungeon_SC_Sweep& from);
  void MergeFrom(const Dungeon_SC_Sweep& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional int32 dungeon_id = 2;
  inline bool has_dungeon_id() const;
  inline void clear_dungeon_id();
  static const int kDungeonIdFieldNumber = 2;
  inline ::google::protobuf::int32 dungeon_id() const;
  inline void set_dungeon_id(::google::protobuf::int32 value);

  // repeated .proto.message.RewardItem item_list = 3;
  inline int item_list_size() const;
  inline void clear_item_list();
  static const int kItemListFieldNumber = 3;
  inline const ::proto::message::RewardItem& item_list(int index) const;
  inline ::proto::message::RewardItem* mutable_item_list(int index);
  inline ::proto::message::RewardItem* add_item_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::message::RewardItem >&
      item_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::message::RewardItem >*
      mutable_item_list();

  // repeated .proto.message.RewardItem extra_list = 4;
  inline int extra_list_size() const;
  inline void clear_extra_list();
  static const int kExtraListFieldNumber = 4;
  inline const ::proto::message::RewardItem& extra_list(int index) const;
  inline ::proto::message::RewardItem* mutable_extra_list(int index);
  inline ::proto::message::RewardItem* add_extra_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::message::RewardItem >&
      extra_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::message::RewardItem >*
      mutable_extra_list();

  // @@protoc_insertion_point(class_scope:proto.message.Dungeon_SC_Sweep)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_dungeon_id();
  inline void clear_has_dungeon_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 dungeon_id_;
  ::google::protobuf::RepeatedPtrField< ::proto::message::RewardItem > item_list_;
  ::google::protobuf::RepeatedPtrField< ::proto::message::RewardItem > extra_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_dungeon_2eproto();
  friend void protobuf_AssignDesc_dungeon_2eproto();
  friend void protobuf_ShutdownFile_dungeon_2eproto();

  void InitAsDefaultInstance();
  static Dungeon_SC_Sweep* default_instance_;
};
// -------------------------------------------------------------------

class Game2Battle_CreateDungeon : public ::google::protobuf::Message {
 public:
  Game2Battle_CreateDungeon();
  virtual ~Game2Battle_CreateDungeon();

  Game2Battle_CreateDungeon(const Game2Battle_CreateDungeon& from);

  inline Game2Battle_CreateDungeon& operator=(const Game2Battle_CreateDungeon& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Game2Battle_CreateDungeon& default_instance();

  void Swap(Game2Battle_CreateDungeon* other);

  // implements Message ----------------------------------------------

  Game2Battle_CreateDungeon* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Game2Battle_CreateDungeon& from);
  void MergeFrom(const Game2Battle_CreateDungeon& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uiDungeonId = 1;
  inline bool has_uidungeonid() const;
  inline void clear_uidungeonid();
  static const int kUiDungeonIdFieldNumber = 1;
  inline ::google::protobuf::uint32 uidungeonid() const;
  inline void set_uidungeonid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Game2Battle_CreateDungeon)
 private:
  inline void set_has_uidungeonid();
  inline void clear_has_uidungeonid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 uidungeonid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_dungeon_2eproto();
  friend void protobuf_AssignDesc_dungeon_2eproto();
  friend void protobuf_ShutdownFile_dungeon_2eproto();

  void InitAsDefaultInstance();
  static Game2Battle_CreateDungeon* default_instance_;
};
// -------------------------------------------------------------------

class Battle2Game_CreateDungeon : public ::google::protobuf::Message {
 public:
  Battle2Game_CreateDungeon();
  virtual ~Battle2Game_CreateDungeon();

  Battle2Game_CreateDungeon(const Battle2Game_CreateDungeon& from);

  inline Battle2Game_CreateDungeon& operator=(const Battle2Game_CreateDungeon& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Battle2Game_CreateDungeon& default_instance();

  void Swap(Battle2Game_CreateDungeon* other);

  // implements Message ----------------------------------------------

  Battle2Game_CreateDungeon* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Battle2Game_CreateDungeon& from);
  void MergeFrom(const Battle2Game_CreateDungeon& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uiDungeonId = 1;
  inline bool has_uidungeonid() const;
  inline void clear_uidungeonid();
  static const int kUiDungeonIdFieldNumber = 1;
  inline ::google::protobuf::uint32 uidungeonid() const;
  inline void set_uidungeonid(::google::protobuf::uint32 value);

  // optional uint32 uiDungeonAssignId = 2;
  inline bool has_uidungeonassignid() const;
  inline void clear_uidungeonassignid();
  static const int kUiDungeonAssignIdFieldNumber = 2;
  inline ::google::protobuf::uint32 uidungeonassignid() const;
  inline void set_uidungeonassignid(::google::protobuf::uint32 value);

  // optional string ip = 3;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 3;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional int32 port = 4;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 4;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Battle2Game_CreateDungeon)
 private:
  inline void set_has_uidungeonid();
  inline void clear_has_uidungeonid();
  inline void set_has_uidungeonassignid();
  inline void clear_has_uidungeonassignid();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 uidungeonid_;
  ::google::protobuf::uint32 uidungeonassignid_;
  ::std::string* ip_;
  ::google::protobuf::int32 port_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_dungeon_2eproto();
  friend void protobuf_AssignDesc_dungeon_2eproto();
  friend void protobuf_ShutdownFile_dungeon_2eproto();

  void InitAsDefaultInstance();
  static Battle2Game_CreateDungeon* default_instance_;
};
// -------------------------------------------------------------------

class Dungeon_SC_TimerStart : public ::google::protobuf::Message {
 public:
  Dungeon_SC_TimerStart();
  virtual ~Dungeon_SC_TimerStart();

  Dungeon_SC_TimerStart(const Dungeon_SC_TimerStart& from);

  inline Dungeon_SC_TimerStart& operator=(const Dungeon_SC_TimerStart& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Dungeon_SC_TimerStart& default_instance();

  void Swap(Dungeon_SC_TimerStart* other);

  // implements Message ----------------------------------------------

  Dungeon_SC_TimerStart* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Dungeon_SC_TimerStart& from);
  void MergeFrom(const Dungeon_SC_TimerStart& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 dungeon_scene_id = 1;
  inline bool has_dungeon_scene_id() const;
  inline void clear_dungeon_scene_id();
  static const int kDungeonSceneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 dungeon_scene_id() const;
  inline void set_dungeon_scene_id(::google::protobuf::uint32 value);

  // optional string ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional int32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Dungeon_SC_TimerStart)
 private:
  inline void set_has_dungeon_scene_id();
  inline void clear_has_dungeon_scene_id();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* ip_;
  ::google::protobuf::uint32 dungeon_scene_id_;
  ::google::protobuf::int32 port_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_dungeon_2eproto();
  friend void protobuf_AssignDesc_dungeon_2eproto();
  friend void protobuf_ShutdownFile_dungeon_2eproto();

  void InitAsDefaultInstance();
  static Dungeon_SC_TimerStart* default_instance_;
};
// -------------------------------------------------------------------

class Dungeon_CS_TakeGradeSReward : public ::google::protobuf::Message {
 public:
  Dungeon_CS_TakeGradeSReward();
  virtual ~Dungeon_CS_TakeGradeSReward();

  Dungeon_CS_TakeGradeSReward(const Dungeon_CS_TakeGradeSReward& from);

  inline Dungeon_CS_TakeGradeSReward& operator=(const Dungeon_CS_TakeGradeSReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Dungeon_CS_TakeGradeSReward& default_instance();

  void Swap(Dungeon_CS_TakeGradeSReward* other);

  // implements Message ----------------------------------------------

  Dungeon_CS_TakeGradeSReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Dungeon_CS_TakeGradeSReward& from);
  void MergeFrom(const Dungeon_CS_TakeGradeSReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::uint32 index() const;
  inline void set_index(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Dungeon_CS_TakeGradeSReward)
 private:
  inline void set_has_index();
  inline void clear_has_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_dungeon_2eproto();
  friend void protobuf_AssignDesc_dungeon_2eproto();
  friend void protobuf_ShutdownFile_dungeon_2eproto();

  void InitAsDefaultInstance();
  static Dungeon_CS_TakeGradeSReward* default_instance_;
};
// -------------------------------------------------------------------

class Dungeon_SC_TakeGradeSReward : public ::google::protobuf::Message {
 public:
  Dungeon_SC_TakeGradeSReward();
  virtual ~Dungeon_SC_TakeGradeSReward();

  Dungeon_SC_TakeGradeSReward(const Dungeon_SC_TakeGradeSReward& from);

  inline Dungeon_SC_TakeGradeSReward& operator=(const Dungeon_SC_TakeGradeSReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Dungeon_SC_TakeGradeSReward& default_instance();

  void Swap(Dungeon_SC_TakeGradeSReward* other);

  // implements Message ----------------------------------------------

  Dungeon_SC_TakeGradeSReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Dungeon_SC_TakeGradeSReward& from);
  void MergeFrom(const Dungeon_SC_TakeGradeSReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::uint32 index() const;
  inline void set_index(::google::protobuf::uint32 value);

  // optional uint32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Dungeon_SC_TakeGradeSReward)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 index_;
  ::google::protobuf::uint32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_dungeon_2eproto();
  friend void protobuf_AssignDesc_dungeon_2eproto();
  friend void protobuf_ShutdownFile_dungeon_2eproto();

  void InitAsDefaultInstance();
  static Dungeon_SC_TakeGradeSReward* default_instance_;
};
// ===================================================================


// ===================================================================

// Dungeon_SC_EnterDungeon

// required uint32 DungeonID = 1;
inline bool Dungeon_SC_EnterDungeon::has_dungeonid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Dungeon_SC_EnterDungeon::set_has_dungeonid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Dungeon_SC_EnterDungeon::clear_has_dungeonid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Dungeon_SC_EnterDungeon::clear_dungeonid() {
  dungeonid_ = 0u;
  clear_has_dungeonid();
}
inline ::google::protobuf::uint32 Dungeon_SC_EnterDungeon::dungeonid() const {
  return dungeonid_;
}
inline void Dungeon_SC_EnterDungeon::set_dungeonid(::google::protobuf::uint32 value) {
  set_has_dungeonid();
  dungeonid_ = value;
}

// optional .proto.message.Point3D Pt = 2;
inline bool Dungeon_SC_EnterDungeon::has_pt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Dungeon_SC_EnterDungeon::set_has_pt() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Dungeon_SC_EnterDungeon::clear_has_pt() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Dungeon_SC_EnterDungeon::clear_pt() {
  if (pt_ != NULL) pt_->::proto::message::Point3D::Clear();
  clear_has_pt();
}
inline const ::proto::message::Point3D& Dungeon_SC_EnterDungeon::pt() const {
  return pt_ != NULL ? *pt_ : *default_instance_->pt_;
}
inline ::proto::message::Point3D* Dungeon_SC_EnterDungeon::mutable_pt() {
  set_has_pt();
  if (pt_ == NULL) pt_ = new ::proto::message::Point3D;
  return pt_;
}
inline ::proto::message::Point3D* Dungeon_SC_EnterDungeon::release_pt() {
  clear_has_pt();
  ::proto::message::Point3D* temp = pt_;
  pt_ = NULL;
  return temp;
}
inline void Dungeon_SC_EnterDungeon::set_allocated_pt(::proto::message::Point3D* pt) {
  delete pt_;
  pt_ = pt;
  if (pt) {
    set_has_pt();
  } else {
    clear_has_pt();
  }
}

// optional float Dir = 3;
inline bool Dungeon_SC_EnterDungeon::has_dir() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Dungeon_SC_EnterDungeon::set_has_dir() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Dungeon_SC_EnterDungeon::clear_has_dir() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Dungeon_SC_EnterDungeon::clear_dir() {
  dir_ = 0;
  clear_has_dir();
}
inline float Dungeon_SC_EnterDungeon::dir() const {
  return dir_;
}
inline void Dungeon_SC_EnterDungeon::set_dir(float value) {
  set_has_dir();
  dir_ = value;
}

// optional uint32 DungeonProId = 4;
inline bool Dungeon_SC_EnterDungeon::has_dungeonproid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Dungeon_SC_EnterDungeon::set_has_dungeonproid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Dungeon_SC_EnterDungeon::clear_has_dungeonproid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Dungeon_SC_EnterDungeon::clear_dungeonproid() {
  dungeonproid_ = 0u;
  clear_has_dungeonproid();
}
inline ::google::protobuf::uint32 Dungeon_SC_EnterDungeon::dungeonproid() const {
  return dungeonproid_;
}
inline void Dungeon_SC_EnterDungeon::set_dungeonproid(::google::protobuf::uint32 value) {
  set_has_dungeonproid();
  dungeonproid_ = value;
}

// optional uint32 Layer = 5;
inline bool Dungeon_SC_EnterDungeon::has_layer() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Dungeon_SC_EnterDungeon::set_has_layer() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Dungeon_SC_EnterDungeon::clear_has_layer() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Dungeon_SC_EnterDungeon::clear_layer() {
  layer_ = 0u;
  clear_has_layer();
}
inline ::google::protobuf::uint32 Dungeon_SC_EnterDungeon::layer() const {
  return layer_;
}
inline void Dungeon_SC_EnterDungeon::set_layer(::google::protobuf::uint32 value) {
  set_has_layer();
  layer_ = value;
}

// -------------------------------------------------------------------

// Dungeon_CS_EnterDungeonOK

// required uint32 DungeonID = 1;
inline bool Dungeon_CS_EnterDungeonOK::has_dungeonid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Dungeon_CS_EnterDungeonOK::set_has_dungeonid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Dungeon_CS_EnterDungeonOK::clear_has_dungeonid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Dungeon_CS_EnterDungeonOK::clear_dungeonid() {
  dungeonid_ = 0u;
  clear_has_dungeonid();
}
inline ::google::protobuf::uint32 Dungeon_CS_EnterDungeonOK::dungeonid() const {
  return dungeonid_;
}
inline void Dungeon_CS_EnterDungeonOK::set_dungeonid(::google::protobuf::uint32 value) {
  set_has_dungeonid();
  dungeonid_ = value;
}

// -------------------------------------------------------------------

// Dungeon_SC_Story

// required uint32 StoryID = 1;
inline bool Dungeon_SC_Story::has_storyid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Dungeon_SC_Story::set_has_storyid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Dungeon_SC_Story::clear_has_storyid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Dungeon_SC_Story::clear_storyid() {
  storyid_ = 0u;
  clear_has_storyid();
}
inline ::google::protobuf::uint32 Dungeon_SC_Story::storyid() const {
  return storyid_;
}
inline void Dungeon_SC_Story::set_storyid(::google::protobuf::uint32 value) {
  set_has_storyid();
  storyid_ = value;
}

// -------------------------------------------------------------------

// Dungeon_SC_Customs

// required uint32 CustomsID = 1;
inline bool Dungeon_SC_Customs::has_customsid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Dungeon_SC_Customs::set_has_customsid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Dungeon_SC_Customs::clear_has_customsid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Dungeon_SC_Customs::clear_customsid() {
  customsid_ = 0u;
  clear_has_customsid();
}
inline ::google::protobuf::uint32 Dungeon_SC_Customs::customsid() const {
  return customsid_;
}
inline void Dungeon_SC_Customs::set_customsid(::google::protobuf::uint32 value) {
  set_has_customsid();
  customsid_ = value;
}

// required int32 Type = 2;
inline bool Dungeon_SC_Customs::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Dungeon_SC_Customs::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Dungeon_SC_Customs::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Dungeon_SC_Customs::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 Dungeon_SC_Customs::type() const {
  return type_;
}
inline void Dungeon_SC_Customs::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// Dungeon_CS_RequestEnterDungeon

// optional uint32 DungeonProId = 1;
inline bool Dungeon_CS_RequestEnterDungeon::has_dungeonproid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Dungeon_CS_RequestEnterDungeon::set_has_dungeonproid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Dungeon_CS_RequestEnterDungeon::clear_has_dungeonproid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Dungeon_CS_RequestEnterDungeon::clear_dungeonproid() {
  dungeonproid_ = 0u;
  clear_has_dungeonproid();
}
inline ::google::protobuf::uint32 Dungeon_CS_RequestEnterDungeon::dungeonproid() const {
  return dungeonproid_;
}
inline void Dungeon_CS_RequestEnterDungeon::set_dungeonproid(::google::protobuf::uint32 value) {
  set_has_dungeonproid();
  dungeonproid_ = value;
}

// -------------------------------------------------------------------

// Game2Battle_RequestEnterDungeon

// optional uint32 DungeonProId = 1;
inline bool Game2Battle_RequestEnterDungeon::has_dungeonproid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Game2Battle_RequestEnterDungeon::set_has_dungeonproid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Game2Battle_RequestEnterDungeon::clear_has_dungeonproid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Game2Battle_RequestEnterDungeon::clear_dungeonproid() {
  dungeonproid_ = 0u;
  clear_has_dungeonproid();
}
inline ::google::protobuf::uint32 Game2Battle_RequestEnterDungeon::dungeonproid() const {
  return dungeonproid_;
}
inline void Game2Battle_RequestEnterDungeon::set_dungeonproid(::google::protobuf::uint32 value) {
  set_has_dungeonproid();
  dungeonproid_ = value;
}

// optional uint32 uiFirst = 2;
inline bool Game2Battle_RequestEnterDungeon::has_uifirst() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Game2Battle_RequestEnterDungeon::set_has_uifirst() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Game2Battle_RequestEnterDungeon::clear_has_uifirst() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Game2Battle_RequestEnterDungeon::clear_uifirst() {
  uifirst_ = 0u;
  clear_has_uifirst();
}
inline ::google::protobuf::uint32 Game2Battle_RequestEnterDungeon::uifirst() const {
  return uifirst_;
}
inline void Game2Battle_RequestEnterDungeon::set_uifirst(::google::protobuf::uint32 value) {
  set_has_uifirst();
  uifirst_ = value;
}

// optional uint32 uiAgain = 3;
inline bool Game2Battle_RequestEnterDungeon::has_uiagain() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Game2Battle_RequestEnterDungeon::set_has_uiagain() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Game2Battle_RequestEnterDungeon::clear_has_uiagain() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Game2Battle_RequestEnterDungeon::clear_uiagain() {
  uiagain_ = 0u;
  clear_has_uiagain();
}
inline ::google::protobuf::uint32 Game2Battle_RequestEnterDungeon::uiagain() const {
  return uiagain_;
}
inline void Game2Battle_RequestEnterDungeon::set_uiagain(::google::protobuf::uint32 value) {
  set_has_uiagain();
  uiagain_ = value;
}

// optional uint32 DungeonAssignId = 4;
inline bool Game2Battle_RequestEnterDungeon::has_dungeonassignid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Game2Battle_RequestEnterDungeon::set_has_dungeonassignid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Game2Battle_RequestEnterDungeon::clear_has_dungeonassignid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Game2Battle_RequestEnterDungeon::clear_dungeonassignid() {
  dungeonassignid_ = 0u;
  clear_has_dungeonassignid();
}
inline ::google::protobuf::uint32 Game2Battle_RequestEnterDungeon::dungeonassignid() const {
  return dungeonassignid_;
}
inline void Game2Battle_RequestEnterDungeon::set_dungeonassignid(::google::protobuf::uint32 value) {
  set_has_dungeonassignid();
  dungeonassignid_ = value;
}

// required .proto.message.BattlePlayerInfo sPlyInfo = 5;
inline bool Game2Battle_RequestEnterDungeon::has_splyinfo() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Game2Battle_RequestEnterDungeon::set_has_splyinfo() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Game2Battle_RequestEnterDungeon::clear_has_splyinfo() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Game2Battle_RequestEnterDungeon::clear_splyinfo() {
  if (splyinfo_ != NULL) splyinfo_->::proto::message::BattlePlayerInfo::Clear();
  clear_has_splyinfo();
}
inline const ::proto::message::BattlePlayerInfo& Game2Battle_RequestEnterDungeon::splyinfo() const {
  return splyinfo_ != NULL ? *splyinfo_ : *default_instance_->splyinfo_;
}
inline ::proto::message::BattlePlayerInfo* Game2Battle_RequestEnterDungeon::mutable_splyinfo() {
  set_has_splyinfo();
  if (splyinfo_ == NULL) splyinfo_ = new ::proto::message::BattlePlayerInfo;
  return splyinfo_;
}
inline ::proto::message::BattlePlayerInfo* Game2Battle_RequestEnterDungeon::release_splyinfo() {
  clear_has_splyinfo();
  ::proto::message::BattlePlayerInfo* temp = splyinfo_;
  splyinfo_ = NULL;
  return temp;
}
inline void Game2Battle_RequestEnterDungeon::set_allocated_splyinfo(::proto::message::BattlePlayerInfo* splyinfo) {
  delete splyinfo_;
  splyinfo_ = splyinfo;
  if (splyinfo) {
    set_has_splyinfo();
  } else {
    clear_has_splyinfo();
  }
}

// optional .proto.message.BattleBoatInfo sBoatInfo = 6;
inline bool Game2Battle_RequestEnterDungeon::has_sboatinfo() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Game2Battle_RequestEnterDungeon::set_has_sboatinfo() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Game2Battle_RequestEnterDungeon::clear_has_sboatinfo() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Game2Battle_RequestEnterDungeon::clear_sboatinfo() {
  if (sboatinfo_ != NULL) sboatinfo_->::proto::message::BattleBoatInfo::Clear();
  clear_has_sboatinfo();
}
inline const ::proto::message::BattleBoatInfo& Game2Battle_RequestEnterDungeon::sboatinfo() const {
  return sboatinfo_ != NULL ? *sboatinfo_ : *default_instance_->sboatinfo_;
}
inline ::proto::message::BattleBoatInfo* Game2Battle_RequestEnterDungeon::mutable_sboatinfo() {
  set_has_sboatinfo();
  if (sboatinfo_ == NULL) sboatinfo_ = new ::proto::message::BattleBoatInfo;
  return sboatinfo_;
}
inline ::proto::message::BattleBoatInfo* Game2Battle_RequestEnterDungeon::release_sboatinfo() {
  clear_has_sboatinfo();
  ::proto::message::BattleBoatInfo* temp = sboatinfo_;
  sboatinfo_ = NULL;
  return temp;
}
inline void Game2Battle_RequestEnterDungeon::set_allocated_sboatinfo(::proto::message::BattleBoatInfo* sboatinfo) {
  delete sboatinfo_;
  sboatinfo_ = sboatinfo;
  if (sboatinfo) {
    set_has_sboatinfo();
  } else {
    clear_has_sboatinfo();
  }
}

// optional uint32 uiBattleLink = 7;
inline bool Game2Battle_RequestEnterDungeon::has_uibattlelink() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Game2Battle_RequestEnterDungeon::set_has_uibattlelink() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Game2Battle_RequestEnterDungeon::clear_has_uibattlelink() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Game2Battle_RequestEnterDungeon::clear_uibattlelink() {
  uibattlelink_ = 0u;
  clear_has_uibattlelink();
}
inline ::google::protobuf::uint32 Game2Battle_RequestEnterDungeon::uibattlelink() const {
  return uibattlelink_;
}
inline void Game2Battle_RequestEnterDungeon::set_uibattlelink(::google::protobuf::uint32 value) {
  set_has_uibattlelink();
  uibattlelink_ = value;
}

// -------------------------------------------------------------------

// Battle2Game_AckEnterDungeon

// required uint32 DungeonID = 1;
inline bool Battle2Game_AckEnterDungeon::has_dungeonid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Battle2Game_AckEnterDungeon::set_has_dungeonid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Battle2Game_AckEnterDungeon::clear_has_dungeonid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Battle2Game_AckEnterDungeon::clear_dungeonid() {
  dungeonid_ = 0u;
  clear_has_dungeonid();
}
inline ::google::protobuf::uint32 Battle2Game_AckEnterDungeon::dungeonid() const {
  return dungeonid_;
}
inline void Battle2Game_AckEnterDungeon::set_dungeonid(::google::protobuf::uint32 value) {
  set_has_dungeonid();
  dungeonid_ = value;
}

// optional .proto.message.Point3D Pt = 2;
inline bool Battle2Game_AckEnterDungeon::has_pt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Battle2Game_AckEnterDungeon::set_has_pt() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Battle2Game_AckEnterDungeon::clear_has_pt() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Battle2Game_AckEnterDungeon::clear_pt() {
  if (pt_ != NULL) pt_->::proto::message::Point3D::Clear();
  clear_has_pt();
}
inline const ::proto::message::Point3D& Battle2Game_AckEnterDungeon::pt() const {
  return pt_ != NULL ? *pt_ : *default_instance_->pt_;
}
inline ::proto::message::Point3D* Battle2Game_AckEnterDungeon::mutable_pt() {
  set_has_pt();
  if (pt_ == NULL) pt_ = new ::proto::message::Point3D;
  return pt_;
}
inline ::proto::message::Point3D* Battle2Game_AckEnterDungeon::release_pt() {
  clear_has_pt();
  ::proto::message::Point3D* temp = pt_;
  pt_ = NULL;
  return temp;
}
inline void Battle2Game_AckEnterDungeon::set_allocated_pt(::proto::message::Point3D* pt) {
  delete pt_;
  pt_ = pt;
  if (pt) {
    set_has_pt();
  } else {
    clear_has_pt();
  }
}

// optional float Dir = 3;
inline bool Battle2Game_AckEnterDungeon::has_dir() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Battle2Game_AckEnterDungeon::set_has_dir() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Battle2Game_AckEnterDungeon::clear_has_dir() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Battle2Game_AckEnterDungeon::clear_dir() {
  dir_ = 0;
  clear_has_dir();
}
inline float Battle2Game_AckEnterDungeon::dir() const {
  return dir_;
}
inline void Battle2Game_AckEnterDungeon::set_dir(float value) {
  set_has_dir();
  dir_ = value;
}

// optional uint32 DungeonProId = 4;
inline bool Battle2Game_AckEnterDungeon::has_dungeonproid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Battle2Game_AckEnterDungeon::set_has_dungeonproid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Battle2Game_AckEnterDungeon::clear_has_dungeonproid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Battle2Game_AckEnterDungeon::clear_dungeonproid() {
  dungeonproid_ = 0u;
  clear_has_dungeonproid();
}
inline ::google::protobuf::uint32 Battle2Game_AckEnterDungeon::dungeonproid() const {
  return dungeonproid_;
}
inline void Battle2Game_AckEnterDungeon::set_dungeonproid(::google::protobuf::uint32 value) {
  set_has_dungeonproid();
  dungeonproid_ = value;
}

// optional uint32 Layer = 5;
inline bool Battle2Game_AckEnterDungeon::has_layer() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Battle2Game_AckEnterDungeon::set_has_layer() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Battle2Game_AckEnterDungeon::clear_has_layer() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Battle2Game_AckEnterDungeon::clear_layer() {
  layer_ = 0u;
  clear_has_layer();
}
inline ::google::protobuf::uint32 Battle2Game_AckEnterDungeon::layer() const {
  return layer_;
}
inline void Battle2Game_AckEnterDungeon::set_layer(::google::protobuf::uint32 value) {
  set_has_layer();
  layer_ = value;
}

// optional int32 result = 6;
inline bool Battle2Game_AckEnterDungeon::has_result() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Battle2Game_AckEnterDungeon::set_has_result() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Battle2Game_AckEnterDungeon::clear_has_result() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Battle2Game_AckEnterDungeon::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 Battle2Game_AckEnterDungeon::result() const {
  return result_;
}
inline void Battle2Game_AckEnterDungeon::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// Dungeon_SC_RequestEnterDungeon

// optional int32 result = 1;
inline bool Dungeon_SC_RequestEnterDungeon::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Dungeon_SC_RequestEnterDungeon::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Dungeon_SC_RequestEnterDungeon::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Dungeon_SC_RequestEnterDungeon::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 Dungeon_SC_RequestEnterDungeon::result() const {
  return result_;
}
inline void Dungeon_SC_RequestEnterDungeon::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// repeated string charname_list = 2;
inline int Dungeon_SC_RequestEnterDungeon::charname_list_size() const {
  return charname_list_.size();
}
inline void Dungeon_SC_RequestEnterDungeon::clear_charname_list() {
  charname_list_.Clear();
}
inline const ::std::string& Dungeon_SC_RequestEnterDungeon::charname_list(int index) const {
  return charname_list_.Get(index);
}
inline ::std::string* Dungeon_SC_RequestEnterDungeon::mutable_charname_list(int index) {
  return charname_list_.Mutable(index);
}
inline void Dungeon_SC_RequestEnterDungeon::set_charname_list(int index, const ::std::string& value) {
  charname_list_.Mutable(index)->assign(value);
}
inline void Dungeon_SC_RequestEnterDungeon::set_charname_list(int index, const char* value) {
  charname_list_.Mutable(index)->assign(value);
}
inline void Dungeon_SC_RequestEnterDungeon::set_charname_list(int index, const char* value, size_t size) {
  charname_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Dungeon_SC_RequestEnterDungeon::add_charname_list() {
  return charname_list_.Add();
}
inline void Dungeon_SC_RequestEnterDungeon::add_charname_list(const ::std::string& value) {
  charname_list_.Add()->assign(value);
}
inline void Dungeon_SC_RequestEnterDungeon::add_charname_list(const char* value) {
  charname_list_.Add()->assign(value);
}
inline void Dungeon_SC_RequestEnterDungeon::add_charname_list(const char* value, size_t size) {
  charname_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Dungeon_SC_RequestEnterDungeon::charname_list() const {
  return charname_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Dungeon_SC_RequestEnterDungeon::mutable_charname_list() {
  return &charname_list_;
}

// -------------------------------------------------------------------

// Dungeon_CS_PassStory

// -------------------------------------------------------------------

// Dungeon_CS_LeaveDungeon

// -------------------------------------------------------------------

// DungeonGrade

// optional int32 gtype = 1;
inline bool DungeonGrade::has_gtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DungeonGrade::set_has_gtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DungeonGrade::clear_has_gtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DungeonGrade::clear_gtype() {
  gtype_ = 0;
  clear_has_gtype();
}
inline ::google::protobuf::int32 DungeonGrade::gtype() const {
  return gtype_;
}
inline void DungeonGrade::set_gtype(::google::protobuf::int32 value) {
  set_has_gtype();
  gtype_ = value;
}

// optional int32 value = 2;
inline bool DungeonGrade::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DungeonGrade::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DungeonGrade::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DungeonGrade::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 DungeonGrade::value() const {
  return value_;
}
inline void DungeonGrade::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
}

// optional int32 grade = 3;
inline bool DungeonGrade::has_grade() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DungeonGrade::set_has_grade() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DungeonGrade::clear_has_grade() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DungeonGrade::clear_grade() {
  grade_ = 0;
  clear_has_grade();
}
inline ::google::protobuf::int32 DungeonGrade::grade() const {
  return grade_;
}
inline void DungeonGrade::set_grade(::google::protobuf::int32 value) {
  set_has_grade();
  grade_ = value;
}

// -------------------------------------------------------------------

// RewardItem

// optional int32 id = 1;
inline bool RewardItem::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RewardItem::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RewardItem::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RewardItem::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 RewardItem::id() const {
  return id_;
}
inline void RewardItem::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 num = 2;
inline bool RewardItem::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RewardItem::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RewardItem::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RewardItem::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 RewardItem::num() const {
  return num_;
}
inline void RewardItem::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
}

// -------------------------------------------------------------------

// Dungeon_SC_Result

// required uint32 rt = 1;
inline bool Dungeon_SC_Result::has_rt() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Dungeon_SC_Result::set_has_rt() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Dungeon_SC_Result::clear_has_rt() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Dungeon_SC_Result::clear_rt() {
  rt_ = 0u;
  clear_has_rt();
}
inline ::google::protobuf::uint32 Dungeon_SC_Result::rt() const {
  return rt_;
}
inline void Dungeon_SC_Result::set_rt(::google::protobuf::uint32 value) {
  set_has_rt();
  rt_ = value;
}

// optional int32 dungeon_id = 2;
inline bool Dungeon_SC_Result::has_dungeon_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Dungeon_SC_Result::set_has_dungeon_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Dungeon_SC_Result::clear_has_dungeon_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Dungeon_SC_Result::clear_dungeon_id() {
  dungeon_id_ = 0;
  clear_has_dungeon_id();
}
inline ::google::protobuf::int32 Dungeon_SC_Result::dungeon_id() const {
  return dungeon_id_;
}
inline void Dungeon_SC_Result::set_dungeon_id(::google::protobuf::int32 value) {
  set_has_dungeon_id();
  dungeon_id_ = value;
}

// required int32 total_grade = 3;
inline bool Dungeon_SC_Result::has_total_grade() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Dungeon_SC_Result::set_has_total_grade() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Dungeon_SC_Result::clear_has_total_grade() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Dungeon_SC_Result::clear_total_grade() {
  total_grade_ = 0;
  clear_has_total_grade();
}
inline ::google::protobuf::int32 Dungeon_SC_Result::total_grade() const {
  return total_grade_;
}
inline void Dungeon_SC_Result::set_total_grade(::google::protobuf::int32 value) {
  set_has_total_grade();
  total_grade_ = value;
}

// repeated .proto.message.DungeonGrade grade_list = 4;
inline int Dungeon_SC_Result::grade_list_size() const {
  return grade_list_.size();
}
inline void Dungeon_SC_Result::clear_grade_list() {
  grade_list_.Clear();
}
inline const ::proto::message::DungeonGrade& Dungeon_SC_Result::grade_list(int index) const {
  return grade_list_.Get(index);
}
inline ::proto::message::DungeonGrade* Dungeon_SC_Result::mutable_grade_list(int index) {
  return grade_list_.Mutable(index);
}
inline ::proto::message::DungeonGrade* Dungeon_SC_Result::add_grade_list() {
  return grade_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::message::DungeonGrade >&
Dungeon_SC_Result::grade_list() const {
  return grade_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::message::DungeonGrade >*
Dungeon_SC_Result::mutable_grade_list() {
  return &grade_list_;
}

// repeated .proto.message.RewardItem item_list = 5;
inline int Dungeon_SC_Result::item_list_size() const {
  return item_list_.size();
}
inline void Dungeon_SC_Result::clear_item_list() {
  item_list_.Clear();
}
inline const ::proto::message::RewardItem& Dungeon_SC_Result::item_list(int index) const {
  return item_list_.Get(index);
}
inline ::proto::message::RewardItem* Dungeon_SC_Result::mutable_item_list(int index) {
  return item_list_.Mutable(index);
}
inline ::proto::message::RewardItem* Dungeon_SC_Result::add_item_list() {
  return item_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::message::RewardItem >&
Dungeon_SC_Result::item_list() const {
  return item_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::message::RewardItem >*
Dungeon_SC_Result::mutable_item_list() {
  return &item_list_;
}

// repeated .proto.message.RewardItem extra_list = 6;
inline int Dungeon_SC_Result::extra_list_size() const {
  return extra_list_.size();
}
inline void Dungeon_SC_Result::clear_extra_list() {
  extra_list_.Clear();
}
inline const ::proto::message::RewardItem& Dungeon_SC_Result::extra_list(int index) const {
  return extra_list_.Get(index);
}
inline ::proto::message::RewardItem* Dungeon_SC_Result::mutable_extra_list(int index) {
  return extra_list_.Mutable(index);
}
inline ::proto::message::RewardItem* Dungeon_SC_Result::add_extra_list() {
  return extra_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::message::RewardItem >&
Dungeon_SC_Result::extra_list() const {
  return extra_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::message::RewardItem >*
Dungeon_SC_Result::mutable_extra_list() {
  return &extra_list_;
}

// -------------------------------------------------------------------

// Dungeon_CS_RequestEvent

// optional uint32 rt = 1;
inline bool Dungeon_CS_RequestEvent::has_rt() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Dungeon_CS_RequestEvent::set_has_rt() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Dungeon_CS_RequestEvent::clear_has_rt() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Dungeon_CS_RequestEvent::clear_rt() {
  rt_ = 0u;
  clear_has_rt();
}
inline ::google::protobuf::uint32 Dungeon_CS_RequestEvent::rt() const {
  return rt_;
}
inline void Dungeon_CS_RequestEvent::set_rt(::google::protobuf::uint32 value) {
  set_has_rt();
  rt_ = value;
}

// optional uint32 value = 2;
inline bool Dungeon_CS_RequestEvent::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Dungeon_CS_RequestEvent::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Dungeon_CS_RequestEvent::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Dungeon_CS_RequestEvent::clear_value() {
  value_ = 0u;
  clear_has_value();
}
inline ::google::protobuf::uint32 Dungeon_CS_RequestEvent::value() const {
  return value_;
}
inline void Dungeon_CS_RequestEvent::set_value(::google::protobuf::uint32 value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// Dungeon_CS_Relive

// required uint32 type = 1;
inline bool Dungeon_CS_Relive::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Dungeon_CS_Relive::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Dungeon_CS_Relive::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Dungeon_CS_Relive::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 Dungeon_CS_Relive::type() const {
  return type_;
}
inline void Dungeon_CS_Relive::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// Dungeon_SC_MonsterNum

// required int32 MonsterNum = 1;
inline bool Dungeon_SC_MonsterNum::has_monsternum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Dungeon_SC_MonsterNum::set_has_monsternum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Dungeon_SC_MonsterNum::clear_has_monsternum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Dungeon_SC_MonsterNum::clear_monsternum() {
  monsternum_ = 0;
  clear_has_monsternum();
}
inline ::google::protobuf::int32 Dungeon_SC_MonsterNum::monsternum() const {
  return monsternum_;
}
inline void Dungeon_SC_MonsterNum::set_monsternum(::google::protobuf::int32 value) {
  set_has_monsternum();
  monsternum_ = value;
}

// -------------------------------------------------------------------

// Dungeon_SC_ChangeCamp

// required uint32 ID = 1;
inline bool Dungeon_SC_ChangeCamp::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Dungeon_SC_ChangeCamp::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Dungeon_SC_ChangeCamp::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Dungeon_SC_ChangeCamp::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 Dungeon_SC_ChangeCamp::id() const {
  return id_;
}
inline void Dungeon_SC_ChangeCamp::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 camp = 2;
inline bool Dungeon_SC_ChangeCamp::has_camp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Dungeon_SC_ChangeCamp::set_has_camp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Dungeon_SC_ChangeCamp::clear_has_camp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Dungeon_SC_ChangeCamp::clear_camp() {
  camp_ = 0;
  clear_has_camp();
}
inline ::google::protobuf::int32 Dungeon_SC_ChangeCamp::camp() const {
  return camp_;
}
inline void Dungeon_SC_ChangeCamp::set_camp(::google::protobuf::int32 value) {
  set_has_camp();
  camp_ = value;
}

// -------------------------------------------------------------------

// Dungeon_SC_PretendStart

// required int32 camp = 1;
inline bool Dungeon_SC_PretendStart::has_camp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Dungeon_SC_PretendStart::set_has_camp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Dungeon_SC_PretendStart::clear_has_camp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Dungeon_SC_PretendStart::clear_camp() {
  camp_ = 0;
  clear_has_camp();
}
inline ::google::protobuf::int32 Dungeon_SC_PretendStart::camp() const {
  return camp_;
}
inline void Dungeon_SC_PretendStart::set_camp(::google::protobuf::int32 value) {
  set_has_camp();
  camp_ = value;
}

// optional uint32 bodyId = 2;
inline bool Dungeon_SC_PretendStart::has_bodyid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Dungeon_SC_PretendStart::set_has_bodyid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Dungeon_SC_PretendStart::clear_has_bodyid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Dungeon_SC_PretendStart::clear_bodyid() {
  bodyid_ = 0u;
  clear_has_bodyid();
}
inline ::google::protobuf::uint32 Dungeon_SC_PretendStart::bodyid() const {
  return bodyid_;
}
inline void Dungeon_SC_PretendStart::set_bodyid(::google::protobuf::uint32 value) {
  set_has_bodyid();
  bodyid_ = value;
}

// -------------------------------------------------------------------

// Dungeon_SC_PretendEnd

// required int32 camp = 1;
inline bool Dungeon_SC_PretendEnd::has_camp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Dungeon_SC_PretendEnd::set_has_camp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Dungeon_SC_PretendEnd::clear_has_camp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Dungeon_SC_PretendEnd::clear_camp() {
  camp_ = 0;
  clear_has_camp();
}
inline ::google::protobuf::int32 Dungeon_SC_PretendEnd::camp() const {
  return camp_;
}
inline void Dungeon_SC_PretendEnd::set_camp(::google::protobuf::int32 value) {
  set_has_camp();
  camp_ = value;
}

// -------------------------------------------------------------------

// PassDungeon

// optional int32 id = 1;
inline bool PassDungeon::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PassDungeon::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PassDungeon::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PassDungeon::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 PassDungeon::id() const {
  return id_;
}
inline void PassDungeon::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 grade = 2;
inline bool PassDungeon::has_grade() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PassDungeon::set_has_grade() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PassDungeon::clear_has_grade() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PassDungeon::clear_grade() {
  grade_ = 0;
  clear_has_grade();
}
inline ::google::protobuf::int32 PassDungeon::grade() const {
  return grade_;
}
inline void PassDungeon::set_grade(::google::protobuf::int32 value) {
  set_has_grade();
  grade_ = value;
}

// optional int32 reward_times = 3;
inline bool PassDungeon::has_reward_times() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PassDungeon::set_has_reward_times() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PassDungeon::clear_has_reward_times() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PassDungeon::clear_reward_times() {
  reward_times_ = 0;
  clear_has_reward_times();
}
inline ::google::protobuf::int32 PassDungeon::reward_times() const {
  return reward_times_;
}
inline void PassDungeon::set_reward_times(::google::protobuf::int32 value) {
  set_has_reward_times();
  reward_times_ = value;
}

// optional int32 enter_times = 4;
inline bool PassDungeon::has_enter_times() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PassDungeon::set_has_enter_times() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PassDungeon::clear_has_enter_times() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PassDungeon::clear_enter_times() {
  enter_times_ = 0;
  clear_has_enter_times();
}
inline ::google::protobuf::int32 PassDungeon::enter_times() const {
  return enter_times_;
}
inline void PassDungeon::set_enter_times(::google::protobuf::int32 value) {
  set_has_enter_times();
  enter_times_ = value;
}

// -------------------------------------------------------------------

// TrialInfo

// optional uint32 uiSweep = 1;
inline bool TrialInfo::has_uisweep() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrialInfo::set_has_uisweep() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrialInfo::clear_has_uisweep() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrialInfo::clear_uisweep() {
  uisweep_ = 0u;
  clear_has_uisweep();
}
inline ::google::protobuf::uint32 TrialInfo::uisweep() const {
  return uisweep_;
}
inline void TrialInfo::set_uisweep(::google::protobuf::uint32 value) {
  set_has_uisweep();
  uisweep_ = value;
}

// optional uint32 uiCurFloor = 2;
inline bool TrialInfo::has_uicurfloor() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrialInfo::set_has_uicurfloor() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TrialInfo::clear_has_uicurfloor() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TrialInfo::clear_uicurfloor() {
  uicurfloor_ = 0u;
  clear_has_uicurfloor();
}
inline ::google::protobuf::uint32 TrialInfo::uicurfloor() const {
  return uicurfloor_;
}
inline void TrialInfo::set_uicurfloor(::google::protobuf::uint32 value) {
  set_has_uicurfloor();
  uicurfloor_ = value;
}

// -------------------------------------------------------------------

// SingleStoryDungeon

// optional int32 open_id = 1;
inline bool SingleStoryDungeon::has_open_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SingleStoryDungeon::set_has_open_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SingleStoryDungeon::clear_has_open_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SingleStoryDungeon::clear_open_id() {
  open_id_ = 0;
  clear_has_open_id();
}
inline ::google::protobuf::int32 SingleStoryDungeon::open_id() const {
  return open_id_;
}
inline void SingleStoryDungeon::set_open_id(::google::protobuf::int32 value) {
  set_has_open_id();
  open_id_ = value;
}

// repeated .proto.message.PassDungeon pass_list = 2;
inline int SingleStoryDungeon::pass_list_size() const {
  return pass_list_.size();
}
inline void SingleStoryDungeon::clear_pass_list() {
  pass_list_.Clear();
}
inline const ::proto::message::PassDungeon& SingleStoryDungeon::pass_list(int index) const {
  return pass_list_.Get(index);
}
inline ::proto::message::PassDungeon* SingleStoryDungeon::mutable_pass_list(int index) {
  return pass_list_.Mutable(index);
}
inline ::proto::message::PassDungeon* SingleStoryDungeon::add_pass_list() {
  return pass_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::message::PassDungeon >&
SingleStoryDungeon::pass_list() const {
  return pass_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::message::PassDungeon >*
SingleStoryDungeon::mutable_pass_list() {
  return &pass_list_;
}

// -------------------------------------------------------------------

// Dungeon_CS_GetDungeonInfo

// -------------------------------------------------------------------

// Dungeon_CS_RequestEnterDungeonAgain

// -------------------------------------------------------------------

// Dungeon_SC_GetDungeonInfo

// optional .proto.message.SingleStoryDungeon single_ordinary = 1;
inline bool Dungeon_SC_GetDungeonInfo::has_single_ordinary() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Dungeon_SC_GetDungeonInfo::set_has_single_ordinary() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Dungeon_SC_GetDungeonInfo::clear_has_single_ordinary() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Dungeon_SC_GetDungeonInfo::clear_single_ordinary() {
  if (single_ordinary_ != NULL) single_ordinary_->::proto::message::SingleStoryDungeon::Clear();
  clear_has_single_ordinary();
}
inline const ::proto::message::SingleStoryDungeon& Dungeon_SC_GetDungeonInfo::single_ordinary() const {
  return single_ordinary_ != NULL ? *single_ordinary_ : *default_instance_->single_ordinary_;
}
inline ::proto::message::SingleStoryDungeon* Dungeon_SC_GetDungeonInfo::mutable_single_ordinary() {
  set_has_single_ordinary();
  if (single_ordinary_ == NULL) single_ordinary_ = new ::proto::message::SingleStoryDungeon;
  return single_ordinary_;
}
inline ::proto::message::SingleStoryDungeon* Dungeon_SC_GetDungeonInfo::release_single_ordinary() {
  clear_has_single_ordinary();
  ::proto::message::SingleStoryDungeon* temp = single_ordinary_;
  single_ordinary_ = NULL;
  return temp;
}
inline void Dungeon_SC_GetDungeonInfo::set_allocated_single_ordinary(::proto::message::SingleStoryDungeon* single_ordinary) {
  delete single_ordinary_;
  single_ordinary_ = single_ordinary;
  if (single_ordinary) {
    set_has_single_ordinary();
  } else {
    clear_has_single_ordinary();
  }
}

// optional .proto.message.SingleStoryDungeon single_elite = 2;
inline bool Dungeon_SC_GetDungeonInfo::has_single_elite() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Dungeon_SC_GetDungeonInfo::set_has_single_elite() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Dungeon_SC_GetDungeonInfo::clear_has_single_elite() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Dungeon_SC_GetDungeonInfo::clear_single_elite() {
  if (single_elite_ != NULL) single_elite_->::proto::message::SingleStoryDungeon::Clear();
  clear_has_single_elite();
}
inline const ::proto::message::SingleStoryDungeon& Dungeon_SC_GetDungeonInfo::single_elite() const {
  return single_elite_ != NULL ? *single_elite_ : *default_instance_->single_elite_;
}
inline ::proto::message::SingleStoryDungeon* Dungeon_SC_GetDungeonInfo::mutable_single_elite() {
  set_has_single_elite();
  if (single_elite_ == NULL) single_elite_ = new ::proto::message::SingleStoryDungeon;
  return single_elite_;
}
inline ::proto::message::SingleStoryDungeon* Dungeon_SC_GetDungeonInfo::release_single_elite() {
  clear_has_single_elite();
  ::proto::message::SingleStoryDungeon* temp = single_elite_;
  single_elite_ = NULL;
  return temp;
}
inline void Dungeon_SC_GetDungeonInfo::set_allocated_single_elite(::proto::message::SingleStoryDungeon* single_elite) {
  delete single_elite_;
  single_elite_ = single_elite;
  if (single_elite) {
    set_has_single_elite();
  } else {
    clear_has_single_elite();
  }
}

// optional .proto.message.SingleStoryDungeon Trial = 3;
inline bool Dungeon_SC_GetDungeonInfo::has_trial() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Dungeon_SC_GetDungeonInfo::set_has_trial() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Dungeon_SC_GetDungeonInfo::clear_has_trial() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Dungeon_SC_GetDungeonInfo::clear_trial() {
  if (trial_ != NULL) trial_->::proto::message::SingleStoryDungeon::Clear();
  clear_has_trial();
}
inline const ::proto::message::SingleStoryDungeon& Dungeon_SC_GetDungeonInfo::trial() const {
  return trial_ != NULL ? *trial_ : *default_instance_->trial_;
}
inline ::proto::message::SingleStoryDungeon* Dungeon_SC_GetDungeonInfo::mutable_trial() {
  set_has_trial();
  if (trial_ == NULL) trial_ = new ::proto::message::SingleStoryDungeon;
  return trial_;
}
inline ::proto::message::SingleStoryDungeon* Dungeon_SC_GetDungeonInfo::release_trial() {
  clear_has_trial();
  ::proto::message::SingleStoryDungeon* temp = trial_;
  trial_ = NULL;
  return temp;
}
inline void Dungeon_SC_GetDungeonInfo::set_allocated_trial(::proto::message::SingleStoryDungeon* trial) {
  delete trial_;
  trial_ = trial;
  if (trial) {
    set_has_trial();
  } else {
    clear_has_trial();
  }
}

// repeated .proto.message.PassDungeon material_list = 4;
inline int Dungeon_SC_GetDungeonInfo::material_list_size() const {
  return material_list_.size();
}
inline void Dungeon_SC_GetDungeonInfo::clear_material_list() {
  material_list_.Clear();
}
inline const ::proto::message::PassDungeon& Dungeon_SC_GetDungeonInfo::material_list(int index) const {
  return material_list_.Get(index);
}
inline ::proto::message::PassDungeon* Dungeon_SC_GetDungeonInfo::mutable_material_list(int index) {
  return material_list_.Mutable(index);
}
inline ::proto::message::PassDungeon* Dungeon_SC_GetDungeonInfo::add_material_list() {
  return material_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::message::PassDungeon >&
Dungeon_SC_GetDungeonInfo::material_list() const {
  return material_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::message::PassDungeon >*
Dungeon_SC_GetDungeonInfo::mutable_material_list() {
  return &material_list_;
}

// repeated .proto.message.TrialInfo single_trial = 5;
inline int Dungeon_SC_GetDungeonInfo::single_trial_size() const {
  return single_trial_.size();
}
inline void Dungeon_SC_GetDungeonInfo::clear_single_trial() {
  single_trial_.Clear();
}
inline const ::proto::message::TrialInfo& Dungeon_SC_GetDungeonInfo::single_trial(int index) const {
  return single_trial_.Get(index);
}
inline ::proto::message::TrialInfo* Dungeon_SC_GetDungeonInfo::mutable_single_trial(int index) {
  return single_trial_.Mutable(index);
}
inline ::proto::message::TrialInfo* Dungeon_SC_GetDungeonInfo::add_single_trial() {
  return single_trial_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::message::TrialInfo >&
Dungeon_SC_GetDungeonInfo::single_trial() const {
  return single_trial_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::message::TrialInfo >*
Dungeon_SC_GetDungeonInfo::mutable_single_trial() {
  return &single_trial_;
}

// repeated .proto.message.PassDungeon other = 6;
inline int Dungeon_SC_GetDungeonInfo::other_size() const {
  return other_.size();
}
inline void Dungeon_SC_GetDungeonInfo::clear_other() {
  other_.Clear();
}
inline const ::proto::message::PassDungeon& Dungeon_SC_GetDungeonInfo::other(int index) const {
  return other_.Get(index);
}
inline ::proto::message::PassDungeon* Dungeon_SC_GetDungeonInfo::mutable_other(int index) {
  return other_.Mutable(index);
}
inline ::proto::message::PassDungeon* Dungeon_SC_GetDungeonInfo::add_other() {
  return other_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::message::PassDungeon >&
Dungeon_SC_GetDungeonInfo::other() const {
  return other_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::message::PassDungeon >*
Dungeon_SC_GetDungeonInfo::mutable_other() {
  return &other_;
}

// optional uint32 grade_S_count = 7;
inline bool Dungeon_SC_GetDungeonInfo::has_grade_s_count() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Dungeon_SC_GetDungeonInfo::set_has_grade_s_count() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Dungeon_SC_GetDungeonInfo::clear_has_grade_s_count() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Dungeon_SC_GetDungeonInfo::clear_grade_s_count() {
  grade_s_count_ = 0u;
  clear_has_grade_s_count();
}
inline ::google::protobuf::uint32 Dungeon_SC_GetDungeonInfo::grade_s_count() const {
  return grade_s_count_;
}
inline void Dungeon_SC_GetDungeonInfo::set_grade_s_count(::google::protobuf::uint32 value) {
  set_has_grade_s_count();
  grade_s_count_ = value;
}

// repeated .proto.message.IDNum grade_S_rewardtimes = 8;
inline int Dungeon_SC_GetDungeonInfo::grade_s_rewardtimes_size() const {
  return grade_s_rewardtimes_.size();
}
inline void Dungeon_SC_GetDungeonInfo::clear_grade_s_rewardtimes() {
  grade_s_rewardtimes_.Clear();
}
inline const ::proto::message::IDNum& Dungeon_SC_GetDungeonInfo::grade_s_rewardtimes(int index) const {
  return grade_s_rewardtimes_.Get(index);
}
inline ::proto::message::IDNum* Dungeon_SC_GetDungeonInfo::mutable_grade_s_rewardtimes(int index) {
  return grade_s_rewardtimes_.Mutable(index);
}
inline ::proto::message::IDNum* Dungeon_SC_GetDungeonInfo::add_grade_s_rewardtimes() {
  return grade_s_rewardtimes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::message::IDNum >&
Dungeon_SC_GetDungeonInfo::grade_s_rewardtimes() const {
  return grade_s_rewardtimes_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::message::IDNum >*
Dungeon_SC_GetDungeonInfo::mutable_grade_s_rewardtimes() {
  return &grade_s_rewardtimes_;
}

// -------------------------------------------------------------------

// Dungeon_SC_ChangeDungeonScene

// optional uint32 dungeon_scene_id = 1;
inline bool Dungeon_SC_ChangeDungeonScene::has_dungeon_scene_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Dungeon_SC_ChangeDungeonScene::set_has_dungeon_scene_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Dungeon_SC_ChangeDungeonScene::clear_has_dungeon_scene_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Dungeon_SC_ChangeDungeonScene::clear_dungeon_scene_id() {
  dungeon_scene_id_ = 0u;
  clear_has_dungeon_scene_id();
}
inline ::google::protobuf::uint32 Dungeon_SC_ChangeDungeonScene::dungeon_scene_id() const {
  return dungeon_scene_id_;
}
inline void Dungeon_SC_ChangeDungeonScene::set_dungeon_scene_id(::google::protobuf::uint32 value) {
  set_has_dungeon_scene_id();
  dungeon_scene_id_ = value;
}

// optional .proto.message.Point3D Pt = 2;
inline bool Dungeon_SC_ChangeDungeonScene::has_pt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Dungeon_SC_ChangeDungeonScene::set_has_pt() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Dungeon_SC_ChangeDungeonScene::clear_has_pt() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Dungeon_SC_ChangeDungeonScene::clear_pt() {
  if (pt_ != NULL) pt_->::proto::message::Point3D::Clear();
  clear_has_pt();
}
inline const ::proto::message::Point3D& Dungeon_SC_ChangeDungeonScene::pt() const {
  return pt_ != NULL ? *pt_ : *default_instance_->pt_;
}
inline ::proto::message::Point3D* Dungeon_SC_ChangeDungeonScene::mutable_pt() {
  set_has_pt();
  if (pt_ == NULL) pt_ = new ::proto::message::Point3D;
  return pt_;
}
inline ::proto::message::Point3D* Dungeon_SC_ChangeDungeonScene::release_pt() {
  clear_has_pt();
  ::proto::message::Point3D* temp = pt_;
  pt_ = NULL;
  return temp;
}
inline void Dungeon_SC_ChangeDungeonScene::set_allocated_pt(::proto::message::Point3D* pt) {
  delete pt_;
  pt_ = pt;
  if (pt) {
    set_has_pt();
  } else {
    clear_has_pt();
  }
}

// optional float Dir = 3;
inline bool Dungeon_SC_ChangeDungeonScene::has_dir() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Dungeon_SC_ChangeDungeonScene::set_has_dir() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Dungeon_SC_ChangeDungeonScene::clear_has_dir() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Dungeon_SC_ChangeDungeonScene::clear_dir() {
  dir_ = 0;
  clear_has_dir();
}
inline float Dungeon_SC_ChangeDungeonScene::dir() const {
  return dir_;
}
inline void Dungeon_SC_ChangeDungeonScene::set_dir(float value) {
  set_has_dir();
  dir_ = value;
}

// optional uint32 Layer = 4;
inline bool Dungeon_SC_ChangeDungeonScene::has_layer() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Dungeon_SC_ChangeDungeonScene::set_has_layer() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Dungeon_SC_ChangeDungeonScene::clear_has_layer() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Dungeon_SC_ChangeDungeonScene::clear_layer() {
  layer_ = 0u;
  clear_has_layer();
}
inline ::google::protobuf::uint32 Dungeon_SC_ChangeDungeonScene::layer() const {
  return layer_;
}
inline void Dungeon_SC_ChangeDungeonScene::set_layer(::google::protobuf::uint32 value) {
  set_has_layer();
  layer_ = value;
}

// -------------------------------------------------------------------

// Dungeon_CS_ChangeDungeonSceneOK

// -------------------------------------------------------------------

// Dungeon_CS_StarUp

// optional int32 id = 1;
inline bool Dungeon_CS_StarUp::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Dungeon_CS_StarUp::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Dungeon_CS_StarUp::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Dungeon_CS_StarUp::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Dungeon_CS_StarUp::id() const {
  return id_;
}
inline void Dungeon_CS_StarUp::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// Dungeon_SC_StarUp

// optional int32 result = 1;
inline bool Dungeon_SC_StarUp::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Dungeon_SC_StarUp::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Dungeon_SC_StarUp::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Dungeon_SC_StarUp::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 Dungeon_SC_StarUp::result() const {
  return result_;
}
inline void Dungeon_SC_StarUp::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional int32 id = 2;
inline bool Dungeon_SC_StarUp::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Dungeon_SC_StarUp::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Dungeon_SC_StarUp::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Dungeon_SC_StarUp::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Dungeon_SC_StarUp::id() const {
  return id_;
}
inline void Dungeon_SC_StarUp::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required int32 grade = 3;
inline bool Dungeon_SC_StarUp::has_grade() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Dungeon_SC_StarUp::set_has_grade() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Dungeon_SC_StarUp::clear_has_grade() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Dungeon_SC_StarUp::clear_grade() {
  grade_ = 0;
  clear_has_grade();
}
inline ::google::protobuf::int32 Dungeon_SC_StarUp::grade() const {
  return grade_;
}
inline void Dungeon_SC_StarUp::set_grade(::google::protobuf::int32 value) {
  set_has_grade();
  grade_ = value;
}

// -------------------------------------------------------------------

// Dungeon_CS_Sweep

// optional int32 id = 1;
inline bool Dungeon_CS_Sweep::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Dungeon_CS_Sweep::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Dungeon_CS_Sweep::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Dungeon_CS_Sweep::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Dungeon_CS_Sweep::id() const {
  return id_;
}
inline void Dungeon_CS_Sweep::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// Dungeon_SC_Sweep

// optional int32 result = 1;
inline bool Dungeon_SC_Sweep::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Dungeon_SC_Sweep::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Dungeon_SC_Sweep::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Dungeon_SC_Sweep::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 Dungeon_SC_Sweep::result() const {
  return result_;
}
inline void Dungeon_SC_Sweep::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional int32 dungeon_id = 2;
inline bool Dungeon_SC_Sweep::has_dungeon_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Dungeon_SC_Sweep::set_has_dungeon_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Dungeon_SC_Sweep::clear_has_dungeon_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Dungeon_SC_Sweep::clear_dungeon_id() {
  dungeon_id_ = 0;
  clear_has_dungeon_id();
}
inline ::google::protobuf::int32 Dungeon_SC_Sweep::dungeon_id() const {
  return dungeon_id_;
}
inline void Dungeon_SC_Sweep::set_dungeon_id(::google::protobuf::int32 value) {
  set_has_dungeon_id();
  dungeon_id_ = value;
}

// repeated .proto.message.RewardItem item_list = 3;
inline int Dungeon_SC_Sweep::item_list_size() const {
  return item_list_.size();
}
inline void Dungeon_SC_Sweep::clear_item_list() {
  item_list_.Clear();
}
inline const ::proto::message::RewardItem& Dungeon_SC_Sweep::item_list(int index) const {
  return item_list_.Get(index);
}
inline ::proto::message::RewardItem* Dungeon_SC_Sweep::mutable_item_list(int index) {
  return item_list_.Mutable(index);
}
inline ::proto::message::RewardItem* Dungeon_SC_Sweep::add_item_list() {
  return item_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::message::RewardItem >&
Dungeon_SC_Sweep::item_list() const {
  return item_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::message::RewardItem >*
Dungeon_SC_Sweep::mutable_item_list() {
  return &item_list_;
}

// repeated .proto.message.RewardItem extra_list = 4;
inline int Dungeon_SC_Sweep::extra_list_size() const {
  return extra_list_.size();
}
inline void Dungeon_SC_Sweep::clear_extra_list() {
  extra_list_.Clear();
}
inline const ::proto::message::RewardItem& Dungeon_SC_Sweep::extra_list(int index) const {
  return extra_list_.Get(index);
}
inline ::proto::message::RewardItem* Dungeon_SC_Sweep::mutable_extra_list(int index) {
  return extra_list_.Mutable(index);
}
inline ::proto::message::RewardItem* Dungeon_SC_Sweep::add_extra_list() {
  return extra_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::message::RewardItem >&
Dungeon_SC_Sweep::extra_list() const {
  return extra_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::message::RewardItem >*
Dungeon_SC_Sweep::mutable_extra_list() {
  return &extra_list_;
}

// -------------------------------------------------------------------

// Game2Battle_CreateDungeon

// optional uint32 uiDungeonId = 1;
inline bool Game2Battle_CreateDungeon::has_uidungeonid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Game2Battle_CreateDungeon::set_has_uidungeonid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Game2Battle_CreateDungeon::clear_has_uidungeonid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Game2Battle_CreateDungeon::clear_uidungeonid() {
  uidungeonid_ = 0u;
  clear_has_uidungeonid();
}
inline ::google::protobuf::uint32 Game2Battle_CreateDungeon::uidungeonid() const {
  return uidungeonid_;
}
inline void Game2Battle_CreateDungeon::set_uidungeonid(::google::protobuf::uint32 value) {
  set_has_uidungeonid();
  uidungeonid_ = value;
}

// -------------------------------------------------------------------

// Battle2Game_CreateDungeon

// optional uint32 uiDungeonId = 1;
inline bool Battle2Game_CreateDungeon::has_uidungeonid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Battle2Game_CreateDungeon::set_has_uidungeonid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Battle2Game_CreateDungeon::clear_has_uidungeonid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Battle2Game_CreateDungeon::clear_uidungeonid() {
  uidungeonid_ = 0u;
  clear_has_uidungeonid();
}
inline ::google::protobuf::uint32 Battle2Game_CreateDungeon::uidungeonid() const {
  return uidungeonid_;
}
inline void Battle2Game_CreateDungeon::set_uidungeonid(::google::protobuf::uint32 value) {
  set_has_uidungeonid();
  uidungeonid_ = value;
}

// optional uint32 uiDungeonAssignId = 2;
inline bool Battle2Game_CreateDungeon::has_uidungeonassignid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Battle2Game_CreateDungeon::set_has_uidungeonassignid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Battle2Game_CreateDungeon::clear_has_uidungeonassignid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Battle2Game_CreateDungeon::clear_uidungeonassignid() {
  uidungeonassignid_ = 0u;
  clear_has_uidungeonassignid();
}
inline ::google::protobuf::uint32 Battle2Game_CreateDungeon::uidungeonassignid() const {
  return uidungeonassignid_;
}
inline void Battle2Game_CreateDungeon::set_uidungeonassignid(::google::protobuf::uint32 value) {
  set_has_uidungeonassignid();
  uidungeonassignid_ = value;
}

// optional string ip = 3;
inline bool Battle2Game_CreateDungeon::has_ip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Battle2Game_CreateDungeon::set_has_ip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Battle2Game_CreateDungeon::clear_has_ip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Battle2Game_CreateDungeon::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& Battle2Game_CreateDungeon::ip() const {
  return *ip_;
}
inline void Battle2Game_CreateDungeon::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void Battle2Game_CreateDungeon::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void Battle2Game_CreateDungeon::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Battle2Game_CreateDungeon::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* Battle2Game_CreateDungeon::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Battle2Game_CreateDungeon::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 port = 4;
inline bool Battle2Game_CreateDungeon::has_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Battle2Game_CreateDungeon::set_has_port() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Battle2Game_CreateDungeon::clear_has_port() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Battle2Game_CreateDungeon::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 Battle2Game_CreateDungeon::port() const {
  return port_;
}
inline void Battle2Game_CreateDungeon::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
}

// -------------------------------------------------------------------

// Dungeon_SC_TimerStart

// optional uint32 dungeon_scene_id = 1;
inline bool Dungeon_SC_TimerStart::has_dungeon_scene_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Dungeon_SC_TimerStart::set_has_dungeon_scene_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Dungeon_SC_TimerStart::clear_has_dungeon_scene_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Dungeon_SC_TimerStart::clear_dungeon_scene_id() {
  dungeon_scene_id_ = 0u;
  clear_has_dungeon_scene_id();
}
inline ::google::protobuf::uint32 Dungeon_SC_TimerStart::dungeon_scene_id() const {
  return dungeon_scene_id_;
}
inline void Dungeon_SC_TimerStart::set_dungeon_scene_id(::google::protobuf::uint32 value) {
  set_has_dungeon_scene_id();
  dungeon_scene_id_ = value;
}

// optional string ip = 2;
inline bool Dungeon_SC_TimerStart::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Dungeon_SC_TimerStart::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Dungeon_SC_TimerStart::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Dungeon_SC_TimerStart::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& Dungeon_SC_TimerStart::ip() const {
  return *ip_;
}
inline void Dungeon_SC_TimerStart::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void Dungeon_SC_TimerStart::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void Dungeon_SC_TimerStart::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Dungeon_SC_TimerStart::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* Dungeon_SC_TimerStart::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Dungeon_SC_TimerStart::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 port = 3;
inline bool Dungeon_SC_TimerStart::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Dungeon_SC_TimerStart::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Dungeon_SC_TimerStart::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Dungeon_SC_TimerStart::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 Dungeon_SC_TimerStart::port() const {
  return port_;
}
inline void Dungeon_SC_TimerStart::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
}

// -------------------------------------------------------------------

// Dungeon_CS_TakeGradeSReward

// optional uint32 index = 1;
inline bool Dungeon_CS_TakeGradeSReward::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Dungeon_CS_TakeGradeSReward::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Dungeon_CS_TakeGradeSReward::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Dungeon_CS_TakeGradeSReward::clear_index() {
  index_ = 0u;
  clear_has_index();
}
inline ::google::protobuf::uint32 Dungeon_CS_TakeGradeSReward::index() const {
  return index_;
}
inline void Dungeon_CS_TakeGradeSReward::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
}

// -------------------------------------------------------------------

// Dungeon_SC_TakeGradeSReward

// optional uint32 index = 1;
inline bool Dungeon_SC_TakeGradeSReward::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Dungeon_SC_TakeGradeSReward::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Dungeon_SC_TakeGradeSReward::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Dungeon_SC_TakeGradeSReward::clear_index() {
  index_ = 0u;
  clear_has_index();
}
inline ::google::protobuf::uint32 Dungeon_SC_TakeGradeSReward::index() const {
  return index_;
}
inline void Dungeon_SC_TakeGradeSReward::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
}

// optional uint32 result = 2;
inline bool Dungeon_SC_TakeGradeSReward::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Dungeon_SC_TakeGradeSReward::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Dungeon_SC_TakeGradeSReward::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Dungeon_SC_TakeGradeSReward::clear_result() {
  result_ = 0u;
  clear_has_result();
}
inline ::google::protobuf::uint32 Dungeon_SC_TakeGradeSReward::result() const {
  return result_;
}
inline void Dungeon_SC_TakeGradeSReward::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace proto

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_dungeon_2eproto__INCLUDED
