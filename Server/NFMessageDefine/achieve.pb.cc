// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: achieve.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "achieve.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace message {

namespace {

const ::google::protobuf::Descriptor* Achieve_CS_GetAchieveInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Achieve_CS_GetAchieveInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AchieveInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AchieveInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Achieve_SC_GetAchieveInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Achieve_SC_GetAchieveInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Achieve_CS_GetAchieveReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Achieve_CS_GetAchieveReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* Achieve_SC_GetAchieveReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Achieve_SC_GetAchieveReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* Achieve_SC_UpdateAchieve_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Achieve_SC_UpdateAchieve_reflection_ = NULL;
const ::google::protobuf::Descriptor* Achieve_CS_Upgrade_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Achieve_CS_Upgrade_reflection_ = NULL;
const ::google::protobuf::Descriptor* Achieve_SC_Upgrade_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Achieve_SC_Upgrade_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_achieve_2eproto() {
  protobuf_AddDesc_achieve_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "achieve.proto");
  GOOGLE_CHECK(file != NULL);
  Achieve_CS_GetAchieveInfo_descriptor_ = file->message_type(0);
  static const int Achieve_CS_GetAchieveInfo_offsets_[1] = {
  };
  Achieve_CS_GetAchieveInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Achieve_CS_GetAchieveInfo_descriptor_,
      Achieve_CS_GetAchieveInfo::default_instance_,
      Achieve_CS_GetAchieveInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Achieve_CS_GetAchieveInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Achieve_CS_GetAchieveInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Achieve_CS_GetAchieveInfo));
  AchieveInfo_descriptor_ = file->message_type(1);
  static const int AchieveInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AchieveInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AchieveInfo, con_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AchieveInfo, status_),
  };
  AchieveInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AchieveInfo_descriptor_,
      AchieveInfo::default_instance_,
      AchieveInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AchieveInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AchieveInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AchieveInfo));
  Achieve_SC_GetAchieveInfo_descriptor_ = file->message_type(2);
  static const int Achieve_SC_GetAchieveInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Achieve_SC_GetAchieveInfo, points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Achieve_SC_GetAchieveInfo, achieve_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Achieve_SC_GetAchieveInfo, points_id_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Achieve_SC_GetAchieveInfo, cup_id_),
  };
  Achieve_SC_GetAchieveInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Achieve_SC_GetAchieveInfo_descriptor_,
      Achieve_SC_GetAchieveInfo::default_instance_,
      Achieve_SC_GetAchieveInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Achieve_SC_GetAchieveInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Achieve_SC_GetAchieveInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Achieve_SC_GetAchieveInfo));
  Achieve_CS_GetAchieveReward_descriptor_ = file->message_type(3);
  static const int Achieve_CS_GetAchieveReward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Achieve_CS_GetAchieveReward, id_),
  };
  Achieve_CS_GetAchieveReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Achieve_CS_GetAchieveReward_descriptor_,
      Achieve_CS_GetAchieveReward::default_instance_,
      Achieve_CS_GetAchieveReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Achieve_CS_GetAchieveReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Achieve_CS_GetAchieveReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Achieve_CS_GetAchieveReward));
  Achieve_SC_GetAchieveReward_descriptor_ = file->message_type(4);
  static const int Achieve_SC_GetAchieveReward_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Achieve_SC_GetAchieveReward, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Achieve_SC_GetAchieveReward, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Achieve_SC_GetAchieveReward, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Achieve_SC_GetAchieveReward, points_),
  };
  Achieve_SC_GetAchieveReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Achieve_SC_GetAchieveReward_descriptor_,
      Achieve_SC_GetAchieveReward::default_instance_,
      Achieve_SC_GetAchieveReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Achieve_SC_GetAchieveReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Achieve_SC_GetAchieveReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Achieve_SC_GetAchieveReward));
  Achieve_SC_UpdateAchieve_descriptor_ = file->message_type(5);
  static const int Achieve_SC_UpdateAchieve_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Achieve_SC_UpdateAchieve, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Achieve_SC_UpdateAchieve, con_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Achieve_SC_UpdateAchieve, status_),
  };
  Achieve_SC_UpdateAchieve_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Achieve_SC_UpdateAchieve_descriptor_,
      Achieve_SC_UpdateAchieve::default_instance_,
      Achieve_SC_UpdateAchieve_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Achieve_SC_UpdateAchieve, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Achieve_SC_UpdateAchieve, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Achieve_SC_UpdateAchieve));
  Achieve_CS_Upgrade_descriptor_ = file->message_type(6);
  static const int Achieve_CS_Upgrade_offsets_[1] = {
  };
  Achieve_CS_Upgrade_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Achieve_CS_Upgrade_descriptor_,
      Achieve_CS_Upgrade::default_instance_,
      Achieve_CS_Upgrade_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Achieve_CS_Upgrade, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Achieve_CS_Upgrade, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Achieve_CS_Upgrade));
  Achieve_SC_Upgrade_descriptor_ = file->message_type(7);
  static const int Achieve_SC_Upgrade_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Achieve_SC_Upgrade, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Achieve_SC_Upgrade, cup_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Achieve_SC_Upgrade, points_),
  };
  Achieve_SC_Upgrade_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Achieve_SC_Upgrade_descriptor_,
      Achieve_SC_Upgrade::default_instance_,
      Achieve_SC_Upgrade_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Achieve_SC_Upgrade, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Achieve_SC_Upgrade, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Achieve_SC_Upgrade));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_achieve_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Achieve_CS_GetAchieveInfo_descriptor_, &Achieve_CS_GetAchieveInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AchieveInfo_descriptor_, &AchieveInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Achieve_SC_GetAchieveInfo_descriptor_, &Achieve_SC_GetAchieveInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Achieve_CS_GetAchieveReward_descriptor_, &Achieve_CS_GetAchieveReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Achieve_SC_GetAchieveReward_descriptor_, &Achieve_SC_GetAchieveReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Achieve_SC_UpdateAchieve_descriptor_, &Achieve_SC_UpdateAchieve::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Achieve_CS_Upgrade_descriptor_, &Achieve_CS_Upgrade::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Achieve_SC_Upgrade_descriptor_, &Achieve_SC_Upgrade::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_achieve_2eproto() {
  delete Achieve_CS_GetAchieveInfo::default_instance_;
  delete Achieve_CS_GetAchieveInfo_reflection_;
  delete AchieveInfo::default_instance_;
  delete AchieveInfo_reflection_;
  delete Achieve_SC_GetAchieveInfo::default_instance_;
  delete Achieve_SC_GetAchieveInfo_reflection_;
  delete Achieve_CS_GetAchieveReward::default_instance_;
  delete Achieve_CS_GetAchieveReward_reflection_;
  delete Achieve_SC_GetAchieveReward::default_instance_;
  delete Achieve_SC_GetAchieveReward_reflection_;
  delete Achieve_SC_UpdateAchieve::default_instance_;
  delete Achieve_SC_UpdateAchieve_reflection_;
  delete Achieve_CS_Upgrade::default_instance_;
  delete Achieve_CS_Upgrade_reflection_;
  delete Achieve_SC_Upgrade::default_instance_;
  delete Achieve_SC_Upgrade_reflection_;
}

void protobuf_AddDesc_achieve_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rachieve.proto\022\rproto.message\"\033\n\031Achiev"
    "e_CS_GetAchieveInfo\":\n\013AchieveInfo\022\n\n\002id"
    "\030\001 \001(\005\022\017\n\007con_num\030\002 \001(\005\022\016\n\006status\030\003 \001(\005\""
    "\205\001\n\031Achieve_SC_GetAchieveInfo\022\016\n\006points\030"
    "\001 \001(\005\0220\n\014achieve_list\030\002 \003(\0132\032.proto.mess"
    "age.AchieveInfo\022\026\n\016points_id_list\030\003 \003(\005\022"
    "\016\n\006cup_id\030\004 \001(\005\")\n\033Achieve_CS_GetAchieve"
    "Reward\022\n\n\002id\030\001 \001(\005\"Y\n\033Achieve_SC_GetAchi"
    "eveReward\022\016\n\006result\030\001 \001(\005\022\n\n\002id\030\002 \001(\005\022\016\n"
    "\006status\030\003 \001(\005\022\016\n\006points\030\004 \001(\005\"G\n\030Achieve"
    "_SC_UpdateAchieve\022\n\n\002id\030\001 \001(\005\022\017\n\007con_num"
    "\030\002 \001(\005\022\016\n\006status\030\003 \001(\005\"\024\n\022Achieve_CS_Upg"
    "rade\"A\n\022Achieve_SC_Upgrade\022\013\n\003ret\030\001 \002(\005\022"
    "\016\n\006cup_id\030\002 \001(\005\022\016\n\006points\030\003 \001(\005B\017\n\rproto"
    ".message", 568);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "achieve.proto", &protobuf_RegisterTypes);
  Achieve_CS_GetAchieveInfo::default_instance_ = new Achieve_CS_GetAchieveInfo();
  AchieveInfo::default_instance_ = new AchieveInfo();
  Achieve_SC_GetAchieveInfo::default_instance_ = new Achieve_SC_GetAchieveInfo();
  Achieve_CS_GetAchieveReward::default_instance_ = new Achieve_CS_GetAchieveReward();
  Achieve_SC_GetAchieveReward::default_instance_ = new Achieve_SC_GetAchieveReward();
  Achieve_SC_UpdateAchieve::default_instance_ = new Achieve_SC_UpdateAchieve();
  Achieve_CS_Upgrade::default_instance_ = new Achieve_CS_Upgrade();
  Achieve_SC_Upgrade::default_instance_ = new Achieve_SC_Upgrade();
  Achieve_CS_GetAchieveInfo::default_instance_->InitAsDefaultInstance();
  AchieveInfo::default_instance_->InitAsDefaultInstance();
  Achieve_SC_GetAchieveInfo::default_instance_->InitAsDefaultInstance();
  Achieve_CS_GetAchieveReward::default_instance_->InitAsDefaultInstance();
  Achieve_SC_GetAchieveReward::default_instance_->InitAsDefaultInstance();
  Achieve_SC_UpdateAchieve::default_instance_->InitAsDefaultInstance();
  Achieve_CS_Upgrade::default_instance_->InitAsDefaultInstance();
  Achieve_SC_Upgrade::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_achieve_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_achieve_2eproto {
  StaticDescriptorInitializer_achieve_2eproto() {
    protobuf_AddDesc_achieve_2eproto();
  }
} static_descriptor_initializer_achieve_2eproto_;

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Achieve_CS_GetAchieveInfo::Achieve_CS_GetAchieveInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Achieve_CS_GetAchieveInfo::InitAsDefaultInstance() {
}

Achieve_CS_GetAchieveInfo::Achieve_CS_GetAchieveInfo(const Achieve_CS_GetAchieveInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Achieve_CS_GetAchieveInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Achieve_CS_GetAchieveInfo::~Achieve_CS_GetAchieveInfo() {
  SharedDtor();
}

void Achieve_CS_GetAchieveInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Achieve_CS_GetAchieveInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Achieve_CS_GetAchieveInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Achieve_CS_GetAchieveInfo_descriptor_;
}

const Achieve_CS_GetAchieveInfo& Achieve_CS_GetAchieveInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_achieve_2eproto();
  return *default_instance_;
}

Achieve_CS_GetAchieveInfo* Achieve_CS_GetAchieveInfo::default_instance_ = NULL;

Achieve_CS_GetAchieveInfo* Achieve_CS_GetAchieveInfo::New() const {
  return new Achieve_CS_GetAchieveInfo;
}

void Achieve_CS_GetAchieveInfo::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Achieve_CS_GetAchieveInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Achieve_CS_GetAchieveInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Achieve_CS_GetAchieveInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Achieve_CS_GetAchieveInfo::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Achieve_CS_GetAchieveInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Achieve_CS_GetAchieveInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Achieve_CS_GetAchieveInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Achieve_CS_GetAchieveInfo::MergeFrom(const Achieve_CS_GetAchieveInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Achieve_CS_GetAchieveInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Achieve_CS_GetAchieveInfo::CopyFrom(const Achieve_CS_GetAchieveInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Achieve_CS_GetAchieveInfo::IsInitialized() const {

  return true;
}

void Achieve_CS_GetAchieveInfo::Swap(Achieve_CS_GetAchieveInfo* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Achieve_CS_GetAchieveInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Achieve_CS_GetAchieveInfo_descriptor_;
  metadata.reflection = Achieve_CS_GetAchieveInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AchieveInfo::kIdFieldNumber;
const int AchieveInfo::kConNumFieldNumber;
const int AchieveInfo::kStatusFieldNumber;
#endif  // !_MSC_VER

AchieveInfo::AchieveInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AchieveInfo::InitAsDefaultInstance() {
}

AchieveInfo::AchieveInfo(const AchieveInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AchieveInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  con_num_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AchieveInfo::~AchieveInfo() {
  SharedDtor();
}

void AchieveInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AchieveInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AchieveInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AchieveInfo_descriptor_;
}

const AchieveInfo& AchieveInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_achieve_2eproto();
  return *default_instance_;
}

AchieveInfo* AchieveInfo::default_instance_ = NULL;

AchieveInfo* AchieveInfo::New() const {
  return new AchieveInfo;
}

void AchieveInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    con_num_ = 0;
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AchieveInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_con_num;
        break;
      }

      // optional int32 con_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_con_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &con_num_)));
          set_has_con_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // optional int32 status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AchieveInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 con_num = 2;
  if (has_con_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->con_num(), output);
  }

  // optional int32 status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AchieveInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 con_num = 2;
  if (has_con_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->con_num(), target);
  }

  // optional int32 status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AchieveInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 con_num = 2;
    if (has_con_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->con_num());
    }

    // optional int32 status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AchieveInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AchieveInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AchieveInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AchieveInfo::MergeFrom(const AchieveInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_con_num()) {
      set_con_num(from.con_num());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AchieveInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AchieveInfo::CopyFrom(const AchieveInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AchieveInfo::IsInitialized() const {

  return true;
}

void AchieveInfo::Swap(AchieveInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(con_num_, other->con_num_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AchieveInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AchieveInfo_descriptor_;
  metadata.reflection = AchieveInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Achieve_SC_GetAchieveInfo::kPointsFieldNumber;
const int Achieve_SC_GetAchieveInfo::kAchieveListFieldNumber;
const int Achieve_SC_GetAchieveInfo::kPointsIdListFieldNumber;
const int Achieve_SC_GetAchieveInfo::kCupIdFieldNumber;
#endif  // !_MSC_VER

Achieve_SC_GetAchieveInfo::Achieve_SC_GetAchieveInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Achieve_SC_GetAchieveInfo::InitAsDefaultInstance() {
}

Achieve_SC_GetAchieveInfo::Achieve_SC_GetAchieveInfo(const Achieve_SC_GetAchieveInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Achieve_SC_GetAchieveInfo::SharedCtor() {
  _cached_size_ = 0;
  points_ = 0;
  cup_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Achieve_SC_GetAchieveInfo::~Achieve_SC_GetAchieveInfo() {
  SharedDtor();
}

void Achieve_SC_GetAchieveInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Achieve_SC_GetAchieveInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Achieve_SC_GetAchieveInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Achieve_SC_GetAchieveInfo_descriptor_;
}

const Achieve_SC_GetAchieveInfo& Achieve_SC_GetAchieveInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_achieve_2eproto();
  return *default_instance_;
}

Achieve_SC_GetAchieveInfo* Achieve_SC_GetAchieveInfo::default_instance_ = NULL;

Achieve_SC_GetAchieveInfo* Achieve_SC_GetAchieveInfo::New() const {
  return new Achieve_SC_GetAchieveInfo;
}

void Achieve_SC_GetAchieveInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    points_ = 0;
    cup_id_ = 0;
  }
  achieve_list_.Clear();
  points_id_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Achieve_SC_GetAchieveInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 points = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &points_)));
          set_has_points();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_achieve_list;
        break;
      }

      // repeated .proto.message.AchieveInfo achieve_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_achieve_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_achieve_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_achieve_list;
        if (input->ExpectTag(24)) goto parse_points_id_list;
        break;
      }

      // repeated int32 points_id_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_points_id_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_points_id_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_points_id_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_points_id_list;
        if (input->ExpectTag(32)) goto parse_cup_id;
        break;
      }

      // optional int32 cup_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cup_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cup_id_)));
          set_has_cup_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Achieve_SC_GetAchieveInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 points = 1;
  if (has_points()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->points(), output);
  }

  // repeated .proto.message.AchieveInfo achieve_list = 2;
  for (int i = 0; i < this->achieve_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->achieve_list(i), output);
  }

  // repeated int32 points_id_list = 3;
  for (int i = 0; i < this->points_id_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->points_id_list(i), output);
  }

  // optional int32 cup_id = 4;
  if (has_cup_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cup_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Achieve_SC_GetAchieveInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 points = 1;
  if (has_points()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->points(), target);
  }

  // repeated .proto.message.AchieveInfo achieve_list = 2;
  for (int i = 0; i < this->achieve_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->achieve_list(i), target);
  }

  // repeated int32 points_id_list = 3;
  for (int i = 0; i < this->points_id_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->points_id_list(i), target);
  }

  // optional int32 cup_id = 4;
  if (has_cup_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cup_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Achieve_SC_GetAchieveInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 points = 1;
    if (has_points()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->points());
    }

    // optional int32 cup_id = 4;
    if (has_cup_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cup_id());
    }

  }
  // repeated .proto.message.AchieveInfo achieve_list = 2;
  total_size += 1 * this->achieve_list_size();
  for (int i = 0; i < this->achieve_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->achieve_list(i));
  }

  // repeated int32 points_id_list = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->points_id_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->points_id_list(i));
    }
    total_size += 1 * this->points_id_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Achieve_SC_GetAchieveInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Achieve_SC_GetAchieveInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Achieve_SC_GetAchieveInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Achieve_SC_GetAchieveInfo::MergeFrom(const Achieve_SC_GetAchieveInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  achieve_list_.MergeFrom(from.achieve_list_);
  points_id_list_.MergeFrom(from.points_id_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_points()) {
      set_points(from.points());
    }
    if (from.has_cup_id()) {
      set_cup_id(from.cup_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Achieve_SC_GetAchieveInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Achieve_SC_GetAchieveInfo::CopyFrom(const Achieve_SC_GetAchieveInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Achieve_SC_GetAchieveInfo::IsInitialized() const {

  return true;
}

void Achieve_SC_GetAchieveInfo::Swap(Achieve_SC_GetAchieveInfo* other) {
  if (other != this) {
    std::swap(points_, other->points_);
    achieve_list_.Swap(&other->achieve_list_);
    points_id_list_.Swap(&other->points_id_list_);
    std::swap(cup_id_, other->cup_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Achieve_SC_GetAchieveInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Achieve_SC_GetAchieveInfo_descriptor_;
  metadata.reflection = Achieve_SC_GetAchieveInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Achieve_CS_GetAchieveReward::kIdFieldNumber;
#endif  // !_MSC_VER

Achieve_CS_GetAchieveReward::Achieve_CS_GetAchieveReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Achieve_CS_GetAchieveReward::InitAsDefaultInstance() {
}

Achieve_CS_GetAchieveReward::Achieve_CS_GetAchieveReward(const Achieve_CS_GetAchieveReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Achieve_CS_GetAchieveReward::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Achieve_CS_GetAchieveReward::~Achieve_CS_GetAchieveReward() {
  SharedDtor();
}

void Achieve_CS_GetAchieveReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Achieve_CS_GetAchieveReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Achieve_CS_GetAchieveReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Achieve_CS_GetAchieveReward_descriptor_;
}

const Achieve_CS_GetAchieveReward& Achieve_CS_GetAchieveReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_achieve_2eproto();
  return *default_instance_;
}

Achieve_CS_GetAchieveReward* Achieve_CS_GetAchieveReward::default_instance_ = NULL;

Achieve_CS_GetAchieveReward* Achieve_CS_GetAchieveReward::New() const {
  return new Achieve_CS_GetAchieveReward;
}

void Achieve_CS_GetAchieveReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Achieve_CS_GetAchieveReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Achieve_CS_GetAchieveReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Achieve_CS_GetAchieveReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Achieve_CS_GetAchieveReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Achieve_CS_GetAchieveReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Achieve_CS_GetAchieveReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Achieve_CS_GetAchieveReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Achieve_CS_GetAchieveReward::MergeFrom(const Achieve_CS_GetAchieveReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Achieve_CS_GetAchieveReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Achieve_CS_GetAchieveReward::CopyFrom(const Achieve_CS_GetAchieveReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Achieve_CS_GetAchieveReward::IsInitialized() const {

  return true;
}

void Achieve_CS_GetAchieveReward::Swap(Achieve_CS_GetAchieveReward* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Achieve_CS_GetAchieveReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Achieve_CS_GetAchieveReward_descriptor_;
  metadata.reflection = Achieve_CS_GetAchieveReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Achieve_SC_GetAchieveReward::kResultFieldNumber;
const int Achieve_SC_GetAchieveReward::kIdFieldNumber;
const int Achieve_SC_GetAchieveReward::kStatusFieldNumber;
const int Achieve_SC_GetAchieveReward::kPointsFieldNumber;
#endif  // !_MSC_VER

Achieve_SC_GetAchieveReward::Achieve_SC_GetAchieveReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Achieve_SC_GetAchieveReward::InitAsDefaultInstance() {
}

Achieve_SC_GetAchieveReward::Achieve_SC_GetAchieveReward(const Achieve_SC_GetAchieveReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Achieve_SC_GetAchieveReward::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  id_ = 0;
  status_ = 0;
  points_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Achieve_SC_GetAchieveReward::~Achieve_SC_GetAchieveReward() {
  SharedDtor();
}

void Achieve_SC_GetAchieveReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Achieve_SC_GetAchieveReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Achieve_SC_GetAchieveReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Achieve_SC_GetAchieveReward_descriptor_;
}

const Achieve_SC_GetAchieveReward& Achieve_SC_GetAchieveReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_achieve_2eproto();
  return *default_instance_;
}

Achieve_SC_GetAchieveReward* Achieve_SC_GetAchieveReward::default_instance_ = NULL;

Achieve_SC_GetAchieveReward* Achieve_SC_GetAchieveReward::New() const {
  return new Achieve_SC_GetAchieveReward;
}

void Achieve_SC_GetAchieveReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    id_ = 0;
    status_ = 0;
    points_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Achieve_SC_GetAchieveReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // optional int32 status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_points;
        break;
      }

      // optional int32 points = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_points:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &points_)));
          set_has_points();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Achieve_SC_GetAchieveReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // optional int32 status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->status(), output);
  }

  // optional int32 points = 4;
  if (has_points()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->points(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Achieve_SC_GetAchieveReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // optional int32 status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->status(), target);
  }

  // optional int32 points = 4;
  if (has_points()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->points(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Achieve_SC_GetAchieveReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional int32 points = 4;
    if (has_points()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->points());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Achieve_SC_GetAchieveReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Achieve_SC_GetAchieveReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Achieve_SC_GetAchieveReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Achieve_SC_GetAchieveReward::MergeFrom(const Achieve_SC_GetAchieveReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_points()) {
      set_points(from.points());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Achieve_SC_GetAchieveReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Achieve_SC_GetAchieveReward::CopyFrom(const Achieve_SC_GetAchieveReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Achieve_SC_GetAchieveReward::IsInitialized() const {

  return true;
}

void Achieve_SC_GetAchieveReward::Swap(Achieve_SC_GetAchieveReward* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(id_, other->id_);
    std::swap(status_, other->status_);
    std::swap(points_, other->points_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Achieve_SC_GetAchieveReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Achieve_SC_GetAchieveReward_descriptor_;
  metadata.reflection = Achieve_SC_GetAchieveReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Achieve_SC_UpdateAchieve::kIdFieldNumber;
const int Achieve_SC_UpdateAchieve::kConNumFieldNumber;
const int Achieve_SC_UpdateAchieve::kStatusFieldNumber;
#endif  // !_MSC_VER

Achieve_SC_UpdateAchieve::Achieve_SC_UpdateAchieve()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Achieve_SC_UpdateAchieve::InitAsDefaultInstance() {
}

Achieve_SC_UpdateAchieve::Achieve_SC_UpdateAchieve(const Achieve_SC_UpdateAchieve& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Achieve_SC_UpdateAchieve::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  con_num_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Achieve_SC_UpdateAchieve::~Achieve_SC_UpdateAchieve() {
  SharedDtor();
}

void Achieve_SC_UpdateAchieve::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Achieve_SC_UpdateAchieve::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Achieve_SC_UpdateAchieve::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Achieve_SC_UpdateAchieve_descriptor_;
}

const Achieve_SC_UpdateAchieve& Achieve_SC_UpdateAchieve::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_achieve_2eproto();
  return *default_instance_;
}

Achieve_SC_UpdateAchieve* Achieve_SC_UpdateAchieve::default_instance_ = NULL;

Achieve_SC_UpdateAchieve* Achieve_SC_UpdateAchieve::New() const {
  return new Achieve_SC_UpdateAchieve;
}

void Achieve_SC_UpdateAchieve::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    con_num_ = 0;
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Achieve_SC_UpdateAchieve::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_con_num;
        break;
      }

      // optional int32 con_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_con_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &con_num_)));
          set_has_con_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // optional int32 status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Achieve_SC_UpdateAchieve::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 con_num = 2;
  if (has_con_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->con_num(), output);
  }

  // optional int32 status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Achieve_SC_UpdateAchieve::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 con_num = 2;
  if (has_con_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->con_num(), target);
  }

  // optional int32 status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Achieve_SC_UpdateAchieve::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 con_num = 2;
    if (has_con_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->con_num());
    }

    // optional int32 status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Achieve_SC_UpdateAchieve::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Achieve_SC_UpdateAchieve* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Achieve_SC_UpdateAchieve*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Achieve_SC_UpdateAchieve::MergeFrom(const Achieve_SC_UpdateAchieve& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_con_num()) {
      set_con_num(from.con_num());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Achieve_SC_UpdateAchieve::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Achieve_SC_UpdateAchieve::CopyFrom(const Achieve_SC_UpdateAchieve& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Achieve_SC_UpdateAchieve::IsInitialized() const {

  return true;
}

void Achieve_SC_UpdateAchieve::Swap(Achieve_SC_UpdateAchieve* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(con_num_, other->con_num_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Achieve_SC_UpdateAchieve::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Achieve_SC_UpdateAchieve_descriptor_;
  metadata.reflection = Achieve_SC_UpdateAchieve_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Achieve_CS_Upgrade::Achieve_CS_Upgrade()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Achieve_CS_Upgrade::InitAsDefaultInstance() {
}

Achieve_CS_Upgrade::Achieve_CS_Upgrade(const Achieve_CS_Upgrade& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Achieve_CS_Upgrade::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Achieve_CS_Upgrade::~Achieve_CS_Upgrade() {
  SharedDtor();
}

void Achieve_CS_Upgrade::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Achieve_CS_Upgrade::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Achieve_CS_Upgrade::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Achieve_CS_Upgrade_descriptor_;
}

const Achieve_CS_Upgrade& Achieve_CS_Upgrade::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_achieve_2eproto();
  return *default_instance_;
}

Achieve_CS_Upgrade* Achieve_CS_Upgrade::default_instance_ = NULL;

Achieve_CS_Upgrade* Achieve_CS_Upgrade::New() const {
  return new Achieve_CS_Upgrade;
}

void Achieve_CS_Upgrade::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Achieve_CS_Upgrade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Achieve_CS_Upgrade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Achieve_CS_Upgrade::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Achieve_CS_Upgrade::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Achieve_CS_Upgrade::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Achieve_CS_Upgrade* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Achieve_CS_Upgrade*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Achieve_CS_Upgrade::MergeFrom(const Achieve_CS_Upgrade& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Achieve_CS_Upgrade::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Achieve_CS_Upgrade::CopyFrom(const Achieve_CS_Upgrade& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Achieve_CS_Upgrade::IsInitialized() const {

  return true;
}

void Achieve_CS_Upgrade::Swap(Achieve_CS_Upgrade* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Achieve_CS_Upgrade::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Achieve_CS_Upgrade_descriptor_;
  metadata.reflection = Achieve_CS_Upgrade_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Achieve_SC_Upgrade::kRetFieldNumber;
const int Achieve_SC_Upgrade::kCupIdFieldNumber;
const int Achieve_SC_Upgrade::kPointsFieldNumber;
#endif  // !_MSC_VER

Achieve_SC_Upgrade::Achieve_SC_Upgrade()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Achieve_SC_Upgrade::InitAsDefaultInstance() {
}

Achieve_SC_Upgrade::Achieve_SC_Upgrade(const Achieve_SC_Upgrade& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Achieve_SC_Upgrade::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  cup_id_ = 0;
  points_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Achieve_SC_Upgrade::~Achieve_SC_Upgrade() {
  SharedDtor();
}

void Achieve_SC_Upgrade::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Achieve_SC_Upgrade::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Achieve_SC_Upgrade::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Achieve_SC_Upgrade_descriptor_;
}

const Achieve_SC_Upgrade& Achieve_SC_Upgrade::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_achieve_2eproto();
  return *default_instance_;
}

Achieve_SC_Upgrade* Achieve_SC_Upgrade::default_instance_ = NULL;

Achieve_SC_Upgrade* Achieve_SC_Upgrade::New() const {
  return new Achieve_SC_Upgrade;
}

void Achieve_SC_Upgrade::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    cup_id_ = 0;
    points_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Achieve_SC_Upgrade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cup_id;
        break;
      }

      // optional int32 cup_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cup_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cup_id_)));
          set_has_cup_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_points;
        break;
      }

      // optional int32 points = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_points:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &points_)));
          set_has_points();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Achieve_SC_Upgrade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 cup_id = 2;
  if (has_cup_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cup_id(), output);
  }

  // optional int32 points = 3;
  if (has_points()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->points(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Achieve_SC_Upgrade::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 cup_id = 2;
  if (has_cup_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cup_id(), target);
  }

  // optional int32 points = 3;
  if (has_points()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->points(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Achieve_SC_Upgrade::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 cup_id = 2;
    if (has_cup_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cup_id());
    }

    // optional int32 points = 3;
    if (has_points()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->points());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Achieve_SC_Upgrade::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Achieve_SC_Upgrade* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Achieve_SC_Upgrade*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Achieve_SC_Upgrade::MergeFrom(const Achieve_SC_Upgrade& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_cup_id()) {
      set_cup_id(from.cup_id());
    }
    if (from.has_points()) {
      set_points(from.points());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Achieve_SC_Upgrade::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Achieve_SC_Upgrade::CopyFrom(const Achieve_SC_Upgrade& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Achieve_SC_Upgrade::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Achieve_SC_Upgrade::Swap(Achieve_SC_Upgrade* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(cup_id_, other->cup_id_);
    std::swap(points_, other->points_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Achieve_SC_Upgrade::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Achieve_SC_Upgrade_descriptor_;
  metadata.reflection = Achieve_SC_Upgrade_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace proto

// @@protoc_insertion_point(global_scope)
