// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: talent.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "talent.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace message {

namespace {

const ::google::protobuf::Descriptor* ProtoTalentInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoTalentInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Talent_CS_Unlock_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Talent_CS_Unlock_reflection_ = NULL;
const ::google::protobuf::Descriptor* Talent_SC_Unlock_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Talent_SC_Unlock_reflection_ = NULL;
const ::google::protobuf::Descriptor* Talent_CS_Up_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Talent_CS_Up_reflection_ = NULL;
const ::google::protobuf::Descriptor* Talent_SC_Up_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Talent_SC_Up_reflection_ = NULL;
const ::google::protobuf::Descriptor* Talent_CS_Reset_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Talent_CS_Reset_reflection_ = NULL;
const ::google::protobuf::Descriptor* Talent_SC_Reset_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Talent_SC_Reset_reflection_ = NULL;
const ::google::protobuf::Descriptor* Talent_CS_Using_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Talent_CS_Using_reflection_ = NULL;
const ::google::protobuf::Descriptor* Talent_SC_Using_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Talent_SC_Using_reflection_ = NULL;
const ::google::protobuf::Descriptor* Talent_CS_AddTabs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Talent_CS_AddTabs_reflection_ = NULL;
const ::google::protobuf::Descriptor* Talent_SC_AddTabs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Talent_SC_AddTabs_reflection_ = NULL;
const ::google::protobuf::Descriptor* Talent_SC_UpdateTalentInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Talent_SC_UpdateTalentInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Talent_SC_UpdateTalentPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Talent_SC_UpdateTalentPoint_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_talent_2eproto() {
  protobuf_AddDesc_talent_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "talent.proto");
  GOOGLE_CHECK(file != NULL);
  ProtoTalentInfo_descriptor_ = file->message_type(0);
  static const int ProtoTalentInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTalentInfo, tabs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTalentInfo, point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTalentInfo, talentlist_),
  };
  ProtoTalentInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoTalentInfo_descriptor_,
      ProtoTalentInfo::default_instance_,
      ProtoTalentInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTalentInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTalentInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoTalentInfo));
  Talent_CS_Unlock_descriptor_ = file->message_type(1);
  static const int Talent_CS_Unlock_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Talent_CS_Unlock, talentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Talent_CS_Unlock, tabs_),
  };
  Talent_CS_Unlock_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Talent_CS_Unlock_descriptor_,
      Talent_CS_Unlock::default_instance_,
      Talent_CS_Unlock_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Talent_CS_Unlock, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Talent_CS_Unlock, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Talent_CS_Unlock));
  Talent_SC_Unlock_descriptor_ = file->message_type(2);
  static const int Talent_SC_Unlock_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Talent_SC_Unlock, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Talent_SC_Unlock, talentid_),
  };
  Talent_SC_Unlock_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Talent_SC_Unlock_descriptor_,
      Talent_SC_Unlock::default_instance_,
      Talent_SC_Unlock_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Talent_SC_Unlock, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Talent_SC_Unlock, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Talent_SC_Unlock));
  Talent_CS_Up_descriptor_ = file->message_type(3);
  static const int Talent_CS_Up_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Talent_CS_Up, talentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Talent_CS_Up, tabs_),
  };
  Talent_CS_Up_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Talent_CS_Up_descriptor_,
      Talent_CS_Up::default_instance_,
      Talent_CS_Up_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Talent_CS_Up, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Talent_CS_Up, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Talent_CS_Up));
  Talent_SC_Up_descriptor_ = file->message_type(4);
  static const int Talent_SC_Up_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Talent_SC_Up, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Talent_SC_Up, talentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Talent_SC_Up, point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Talent_SC_Up, tabs_),
  };
  Talent_SC_Up_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Talent_SC_Up_descriptor_,
      Talent_SC_Up::default_instance_,
      Talent_SC_Up_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Talent_SC_Up, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Talent_SC_Up, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Talent_SC_Up));
  Talent_CS_Reset_descriptor_ = file->message_type(5);
  static const int Talent_CS_Reset_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Talent_CS_Reset, tabs_),
  };
  Talent_CS_Reset_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Talent_CS_Reset_descriptor_,
      Talent_CS_Reset::default_instance_,
      Talent_CS_Reset_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Talent_CS_Reset, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Talent_CS_Reset, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Talent_CS_Reset));
  Talent_SC_Reset_descriptor_ = file->message_type(6);
  static const int Talent_SC_Reset_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Talent_SC_Reset, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Talent_SC_Reset, tabsinfo_),
  };
  Talent_SC_Reset_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Talent_SC_Reset_descriptor_,
      Talent_SC_Reset::default_instance_,
      Talent_SC_Reset_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Talent_SC_Reset, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Talent_SC_Reset, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Talent_SC_Reset));
  Talent_CS_Using_descriptor_ = file->message_type(7);
  static const int Talent_CS_Using_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Talent_CS_Using, tabs_),
  };
  Talent_CS_Using_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Talent_CS_Using_descriptor_,
      Talent_CS_Using::default_instance_,
      Talent_CS_Using_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Talent_CS_Using, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Talent_CS_Using, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Talent_CS_Using));
  Talent_SC_Using_descriptor_ = file->message_type(8);
  static const int Talent_SC_Using_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Talent_SC_Using, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Talent_SC_Using, tabs_),
  };
  Talent_SC_Using_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Talent_SC_Using_descriptor_,
      Talent_SC_Using::default_instance_,
      Talent_SC_Using_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Talent_SC_Using, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Talent_SC_Using, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Talent_SC_Using));
  Talent_CS_AddTabs_descriptor_ = file->message_type(9);
  static const int Talent_CS_AddTabs_offsets_[1] = {
  };
  Talent_CS_AddTabs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Talent_CS_AddTabs_descriptor_,
      Talent_CS_AddTabs::default_instance_,
      Talent_CS_AddTabs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Talent_CS_AddTabs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Talent_CS_AddTabs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Talent_CS_AddTabs));
  Talent_SC_AddTabs_descriptor_ = file->message_type(10);
  static const int Talent_SC_AddTabs_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Talent_SC_AddTabs, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Talent_SC_AddTabs, tabsinfo_),
  };
  Talent_SC_AddTabs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Talent_SC_AddTabs_descriptor_,
      Talent_SC_AddTabs::default_instance_,
      Talent_SC_AddTabs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Talent_SC_AddTabs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Talent_SC_AddTabs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Talent_SC_AddTabs));
  Talent_SC_UpdateTalentInfo_descriptor_ = file->message_type(11);
  static const int Talent_SC_UpdateTalentInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Talent_SC_UpdateTalentInfo, nowtabe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Talent_SC_UpdateTalentInfo, tabsmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Talent_SC_UpdateTalentInfo, tabslist_),
  };
  Talent_SC_UpdateTalentInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Talent_SC_UpdateTalentInfo_descriptor_,
      Talent_SC_UpdateTalentInfo::default_instance_,
      Talent_SC_UpdateTalentInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Talent_SC_UpdateTalentInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Talent_SC_UpdateTalentInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Talent_SC_UpdateTalentInfo));
  Talent_SC_UpdateTalentPoint_descriptor_ = file->message_type(12);
  static const int Talent_SC_UpdateTalentPoint_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Talent_SC_UpdateTalentPoint, tabspoint_),
  };
  Talent_SC_UpdateTalentPoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Talent_SC_UpdateTalentPoint_descriptor_,
      Talent_SC_UpdateTalentPoint::default_instance_,
      Talent_SC_UpdateTalentPoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Talent_SC_UpdateTalentPoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Talent_SC_UpdateTalentPoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Talent_SC_UpdateTalentPoint));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_talent_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoTalentInfo_descriptor_, &ProtoTalentInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Talent_CS_Unlock_descriptor_, &Talent_CS_Unlock::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Talent_SC_Unlock_descriptor_, &Talent_SC_Unlock::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Talent_CS_Up_descriptor_, &Talent_CS_Up::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Talent_SC_Up_descriptor_, &Talent_SC_Up::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Talent_CS_Reset_descriptor_, &Talent_CS_Reset::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Talent_SC_Reset_descriptor_, &Talent_SC_Reset::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Talent_CS_Using_descriptor_, &Talent_CS_Using::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Talent_SC_Using_descriptor_, &Talent_SC_Using::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Talent_CS_AddTabs_descriptor_, &Talent_CS_AddTabs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Talent_SC_AddTabs_descriptor_, &Talent_SC_AddTabs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Talent_SC_UpdateTalentInfo_descriptor_, &Talent_SC_UpdateTalentInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Talent_SC_UpdateTalentPoint_descriptor_, &Talent_SC_UpdateTalentPoint::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_talent_2eproto() {
  delete ProtoTalentInfo::default_instance_;
  delete ProtoTalentInfo_reflection_;
  delete Talent_CS_Unlock::default_instance_;
  delete Talent_CS_Unlock_reflection_;
  delete Talent_SC_Unlock::default_instance_;
  delete Talent_SC_Unlock_reflection_;
  delete Talent_CS_Up::default_instance_;
  delete Talent_CS_Up_reflection_;
  delete Talent_SC_Up::default_instance_;
  delete Talent_SC_Up_reflection_;
  delete Talent_CS_Reset::default_instance_;
  delete Talent_CS_Reset_reflection_;
  delete Talent_SC_Reset::default_instance_;
  delete Talent_SC_Reset_reflection_;
  delete Talent_CS_Using::default_instance_;
  delete Talent_CS_Using_reflection_;
  delete Talent_SC_Using::default_instance_;
  delete Talent_SC_Using_reflection_;
  delete Talent_CS_AddTabs::default_instance_;
  delete Talent_CS_AddTabs_reflection_;
  delete Talent_SC_AddTabs::default_instance_;
  delete Talent_SC_AddTabs_reflection_;
  delete Talent_SC_UpdateTalentInfo::default_instance_;
  delete Talent_SC_UpdateTalentInfo_reflection_;
  delete Talent_SC_UpdateTalentPoint::default_instance_;
  delete Talent_SC_UpdateTalentPoint_reflection_;
}

void protobuf_AddDesc_talent_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014talent.proto\022\rproto.message\"B\n\017ProtoTa"
    "lentInfo\022\014\n\004tabs\030\001 \002(\005\022\r\n\005point\030\002 \002(\005\022\022\n"
    "\ntalentList\030\003 \003(\005\"2\n\020Talent_CS_Unlock\022\020\n"
    "\010talentId\030\001 \002(\005\022\014\n\004tabs\030\002 \002(\005\"4\n\020Talent_"
    "SC_Unlock\022\016\n\006result\030\001 \002(\005\022\020\n\010talentId\030\002 "
    "\001(\005\".\n\014Talent_CS_Up\022\020\n\010talentId\030\001 \002(\005\022\014\n"
    "\004tabs\030\002 \002(\005\"M\n\014Talent_SC_Up\022\016\n\006result\030\001 "
    "\002(\005\022\020\n\010talentId\030\002 \001(\005\022\r\n\005point\030\003 \001(\005\022\014\n\004"
    "tabs\030\004 \001(\005\"\037\n\017Talent_CS_Reset\022\014\n\004tabs\030\001 "
    "\002(\005\"S\n\017Talent_SC_Reset\022\016\n\006result\030\001 \002(\005\0220"
    "\n\010tabsInfo\030\002 \001(\0132\036.proto.message.ProtoTa"
    "lentInfo\"\037\n\017Talent_CS_Using\022\014\n\004tabs\030\001 \002("
    "\005\"/\n\017Talent_SC_Using\022\016\n\006result\030\001 \002(\005\022\014\n\004"
    "tabs\030\002 \001(\005\"\023\n\021Talent_CS_AddTabs\"U\n\021Talen"
    "t_SC_AddTabs\022\016\n\006result\030\001 \002(\005\0220\n\010tabsInfo"
    "\030\002 \001(\0132\036.proto.message.ProtoTalentInfo\"p"
    "\n\032Talent_SC_UpdateTalentInfo\022\017\n\007nowTabe\030"
    "\001 \002(\005\022\017\n\007tabsMax\030\002 \002(\005\0220\n\010tabsList\030\003 \003(\013"
    "2\036.proto.message.ProtoTalentInfo\"P\n\033Tale"
    "nt_SC_UpdateTalentPoint\0221\n\ttabsPoint\030\001 \003"
    "(\0132\036.proto.message.ProtoTalentInfo", 834);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "talent.proto", &protobuf_RegisterTypes);
  ProtoTalentInfo::default_instance_ = new ProtoTalentInfo();
  Talent_CS_Unlock::default_instance_ = new Talent_CS_Unlock();
  Talent_SC_Unlock::default_instance_ = new Talent_SC_Unlock();
  Talent_CS_Up::default_instance_ = new Talent_CS_Up();
  Talent_SC_Up::default_instance_ = new Talent_SC_Up();
  Talent_CS_Reset::default_instance_ = new Talent_CS_Reset();
  Talent_SC_Reset::default_instance_ = new Talent_SC_Reset();
  Talent_CS_Using::default_instance_ = new Talent_CS_Using();
  Talent_SC_Using::default_instance_ = new Talent_SC_Using();
  Talent_CS_AddTabs::default_instance_ = new Talent_CS_AddTabs();
  Talent_SC_AddTabs::default_instance_ = new Talent_SC_AddTabs();
  Talent_SC_UpdateTalentInfo::default_instance_ = new Talent_SC_UpdateTalentInfo();
  Talent_SC_UpdateTalentPoint::default_instance_ = new Talent_SC_UpdateTalentPoint();
  ProtoTalentInfo::default_instance_->InitAsDefaultInstance();
  Talent_CS_Unlock::default_instance_->InitAsDefaultInstance();
  Talent_SC_Unlock::default_instance_->InitAsDefaultInstance();
  Talent_CS_Up::default_instance_->InitAsDefaultInstance();
  Talent_SC_Up::default_instance_->InitAsDefaultInstance();
  Talent_CS_Reset::default_instance_->InitAsDefaultInstance();
  Talent_SC_Reset::default_instance_->InitAsDefaultInstance();
  Talent_CS_Using::default_instance_->InitAsDefaultInstance();
  Talent_SC_Using::default_instance_->InitAsDefaultInstance();
  Talent_CS_AddTabs::default_instance_->InitAsDefaultInstance();
  Talent_SC_AddTabs::default_instance_->InitAsDefaultInstance();
  Talent_SC_UpdateTalentInfo::default_instance_->InitAsDefaultInstance();
  Talent_SC_UpdateTalentPoint::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_talent_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_talent_2eproto {
  StaticDescriptorInitializer_talent_2eproto() {
    protobuf_AddDesc_talent_2eproto();
  }
} static_descriptor_initializer_talent_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ProtoTalentInfo::kTabsFieldNumber;
const int ProtoTalentInfo::kPointFieldNumber;
const int ProtoTalentInfo::kTalentListFieldNumber;
#endif  // !_MSC_VER

ProtoTalentInfo::ProtoTalentInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoTalentInfo::InitAsDefaultInstance() {
}

ProtoTalentInfo::ProtoTalentInfo(const ProtoTalentInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoTalentInfo::SharedCtor() {
  _cached_size_ = 0;
  tabs_ = 0;
  point_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoTalentInfo::~ProtoTalentInfo() {
  SharedDtor();
}

void ProtoTalentInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoTalentInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoTalentInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoTalentInfo_descriptor_;
}

const ProtoTalentInfo& ProtoTalentInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_talent_2eproto();
  return *default_instance_;
}

ProtoTalentInfo* ProtoTalentInfo::default_instance_ = NULL;

ProtoTalentInfo* ProtoTalentInfo::New() const {
  return new ProtoTalentInfo;
}

void ProtoTalentInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tabs_ = 0;
    point_ = 0;
  }
  talentlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoTalentInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 tabs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tabs_)));
          set_has_tabs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_point;
        break;
      }

      // required int32 point = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &point_)));
          set_has_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_talentList;
        break;
      }

      // repeated int32 talentList = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_talentList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_talentlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_talentlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_talentList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoTalentInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 tabs = 1;
  if (has_tabs()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tabs(), output);
  }

  // required int32 point = 2;
  if (has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->point(), output);
  }

  // repeated int32 talentList = 3;
  for (int i = 0; i < this->talentlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->talentlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoTalentInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 tabs = 1;
  if (has_tabs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tabs(), target);
  }

  // required int32 point = 2;
  if (has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->point(), target);
  }

  // repeated int32 talentList = 3;
  for (int i = 0; i < this->talentlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->talentlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoTalentInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 tabs = 1;
    if (has_tabs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tabs());
    }

    // required int32 point = 2;
    if (has_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->point());
    }

  }
  // repeated int32 talentList = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->talentlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->talentlist(i));
    }
    total_size += 1 * this->talentlist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoTalentInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoTalentInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoTalentInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoTalentInfo::MergeFrom(const ProtoTalentInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  talentlist_.MergeFrom(from.talentlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tabs()) {
      set_tabs(from.tabs());
    }
    if (from.has_point()) {
      set_point(from.point());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoTalentInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoTalentInfo::CopyFrom(const ProtoTalentInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoTalentInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ProtoTalentInfo::Swap(ProtoTalentInfo* other) {
  if (other != this) {
    std::swap(tabs_, other->tabs_);
    std::swap(point_, other->point_);
    talentlist_.Swap(&other->talentlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoTalentInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoTalentInfo_descriptor_;
  metadata.reflection = ProtoTalentInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Talent_CS_Unlock::kTalentIdFieldNumber;
const int Talent_CS_Unlock::kTabsFieldNumber;
#endif  // !_MSC_VER

Talent_CS_Unlock::Talent_CS_Unlock()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Talent_CS_Unlock::InitAsDefaultInstance() {
}

Talent_CS_Unlock::Talent_CS_Unlock(const Talent_CS_Unlock& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Talent_CS_Unlock::SharedCtor() {
  _cached_size_ = 0;
  talentid_ = 0;
  tabs_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Talent_CS_Unlock::~Talent_CS_Unlock() {
  SharedDtor();
}

void Talent_CS_Unlock::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Talent_CS_Unlock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Talent_CS_Unlock::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Talent_CS_Unlock_descriptor_;
}

const Talent_CS_Unlock& Talent_CS_Unlock::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_talent_2eproto();
  return *default_instance_;
}

Talent_CS_Unlock* Talent_CS_Unlock::default_instance_ = NULL;

Talent_CS_Unlock* Talent_CS_Unlock::New() const {
  return new Talent_CS_Unlock;
}

void Talent_CS_Unlock::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    talentid_ = 0;
    tabs_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Talent_CS_Unlock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 talentId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &talentid_)));
          set_has_talentid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tabs;
        break;
      }

      // required int32 tabs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tabs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tabs_)));
          set_has_tabs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Talent_CS_Unlock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 talentId = 1;
  if (has_talentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->talentid(), output);
  }

  // required int32 tabs = 2;
  if (has_tabs()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tabs(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Talent_CS_Unlock::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 talentId = 1;
  if (has_talentid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->talentid(), target);
  }

  // required int32 tabs = 2;
  if (has_tabs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tabs(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Talent_CS_Unlock::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 talentId = 1;
    if (has_talentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->talentid());
    }

    // required int32 tabs = 2;
    if (has_tabs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tabs());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Talent_CS_Unlock::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Talent_CS_Unlock* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Talent_CS_Unlock*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Talent_CS_Unlock::MergeFrom(const Talent_CS_Unlock& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_talentid()) {
      set_talentid(from.talentid());
    }
    if (from.has_tabs()) {
      set_tabs(from.tabs());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Talent_CS_Unlock::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Talent_CS_Unlock::CopyFrom(const Talent_CS_Unlock& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Talent_CS_Unlock::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Talent_CS_Unlock::Swap(Talent_CS_Unlock* other) {
  if (other != this) {
    std::swap(talentid_, other->talentid_);
    std::swap(tabs_, other->tabs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Talent_CS_Unlock::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Talent_CS_Unlock_descriptor_;
  metadata.reflection = Talent_CS_Unlock_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Talent_SC_Unlock::kResultFieldNumber;
const int Talent_SC_Unlock::kTalentIdFieldNumber;
#endif  // !_MSC_VER

Talent_SC_Unlock::Talent_SC_Unlock()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Talent_SC_Unlock::InitAsDefaultInstance() {
}

Talent_SC_Unlock::Talent_SC_Unlock(const Talent_SC_Unlock& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Talent_SC_Unlock::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  talentid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Talent_SC_Unlock::~Talent_SC_Unlock() {
  SharedDtor();
}

void Talent_SC_Unlock::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Talent_SC_Unlock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Talent_SC_Unlock::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Talent_SC_Unlock_descriptor_;
}

const Talent_SC_Unlock& Talent_SC_Unlock::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_talent_2eproto();
  return *default_instance_;
}

Talent_SC_Unlock* Talent_SC_Unlock::default_instance_ = NULL;

Talent_SC_Unlock* Talent_SC_Unlock::New() const {
  return new Talent_SC_Unlock;
}

void Talent_SC_Unlock::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    talentid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Talent_SC_Unlock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_talentId;
        break;
      }

      // optional int32 talentId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_talentId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &talentid_)));
          set_has_talentid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Talent_SC_Unlock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 talentId = 2;
  if (has_talentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->talentid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Talent_SC_Unlock::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 talentId = 2;
  if (has_talentid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->talentid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Talent_SC_Unlock::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 talentId = 2;
    if (has_talentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->talentid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Talent_SC_Unlock::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Talent_SC_Unlock* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Talent_SC_Unlock*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Talent_SC_Unlock::MergeFrom(const Talent_SC_Unlock& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_talentid()) {
      set_talentid(from.talentid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Talent_SC_Unlock::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Talent_SC_Unlock::CopyFrom(const Talent_SC_Unlock& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Talent_SC_Unlock::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Talent_SC_Unlock::Swap(Talent_SC_Unlock* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(talentid_, other->talentid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Talent_SC_Unlock::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Talent_SC_Unlock_descriptor_;
  metadata.reflection = Talent_SC_Unlock_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Talent_CS_Up::kTalentIdFieldNumber;
const int Talent_CS_Up::kTabsFieldNumber;
#endif  // !_MSC_VER

Talent_CS_Up::Talent_CS_Up()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Talent_CS_Up::InitAsDefaultInstance() {
}

Talent_CS_Up::Talent_CS_Up(const Talent_CS_Up& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Talent_CS_Up::SharedCtor() {
  _cached_size_ = 0;
  talentid_ = 0;
  tabs_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Talent_CS_Up::~Talent_CS_Up() {
  SharedDtor();
}

void Talent_CS_Up::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Talent_CS_Up::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Talent_CS_Up::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Talent_CS_Up_descriptor_;
}

const Talent_CS_Up& Talent_CS_Up::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_talent_2eproto();
  return *default_instance_;
}

Talent_CS_Up* Talent_CS_Up::default_instance_ = NULL;

Talent_CS_Up* Talent_CS_Up::New() const {
  return new Talent_CS_Up;
}

void Talent_CS_Up::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    talentid_ = 0;
    tabs_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Talent_CS_Up::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 talentId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &talentid_)));
          set_has_talentid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tabs;
        break;
      }

      // required int32 tabs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tabs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tabs_)));
          set_has_tabs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Talent_CS_Up::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 talentId = 1;
  if (has_talentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->talentid(), output);
  }

  // required int32 tabs = 2;
  if (has_tabs()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tabs(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Talent_CS_Up::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 talentId = 1;
  if (has_talentid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->talentid(), target);
  }

  // required int32 tabs = 2;
  if (has_tabs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tabs(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Talent_CS_Up::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 talentId = 1;
    if (has_talentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->talentid());
    }

    // required int32 tabs = 2;
    if (has_tabs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tabs());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Talent_CS_Up::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Talent_CS_Up* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Talent_CS_Up*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Talent_CS_Up::MergeFrom(const Talent_CS_Up& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_talentid()) {
      set_talentid(from.talentid());
    }
    if (from.has_tabs()) {
      set_tabs(from.tabs());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Talent_CS_Up::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Talent_CS_Up::CopyFrom(const Talent_CS_Up& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Talent_CS_Up::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Talent_CS_Up::Swap(Talent_CS_Up* other) {
  if (other != this) {
    std::swap(talentid_, other->talentid_);
    std::swap(tabs_, other->tabs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Talent_CS_Up::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Talent_CS_Up_descriptor_;
  metadata.reflection = Talent_CS_Up_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Talent_SC_Up::kResultFieldNumber;
const int Talent_SC_Up::kTalentIdFieldNumber;
const int Talent_SC_Up::kPointFieldNumber;
const int Talent_SC_Up::kTabsFieldNumber;
#endif  // !_MSC_VER

Talent_SC_Up::Talent_SC_Up()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Talent_SC_Up::InitAsDefaultInstance() {
}

Talent_SC_Up::Talent_SC_Up(const Talent_SC_Up& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Talent_SC_Up::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  talentid_ = 0;
  point_ = 0;
  tabs_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Talent_SC_Up::~Talent_SC_Up() {
  SharedDtor();
}

void Talent_SC_Up::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Talent_SC_Up::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Talent_SC_Up::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Talent_SC_Up_descriptor_;
}

const Talent_SC_Up& Talent_SC_Up::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_talent_2eproto();
  return *default_instance_;
}

Talent_SC_Up* Talent_SC_Up::default_instance_ = NULL;

Talent_SC_Up* Talent_SC_Up::New() const {
  return new Talent_SC_Up;
}

void Talent_SC_Up::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    talentid_ = 0;
    point_ = 0;
    tabs_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Talent_SC_Up::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_talentId;
        break;
      }

      // optional int32 talentId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_talentId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &talentid_)));
          set_has_talentid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_point;
        break;
      }

      // optional int32 point = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &point_)));
          set_has_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_tabs;
        break;
      }

      // optional int32 tabs = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tabs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tabs_)));
          set_has_tabs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Talent_SC_Up::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 talentId = 2;
  if (has_talentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->talentid(), output);
  }

  // optional int32 point = 3;
  if (has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->point(), output);
  }

  // optional int32 tabs = 4;
  if (has_tabs()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->tabs(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Talent_SC_Up::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 talentId = 2;
  if (has_talentid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->talentid(), target);
  }

  // optional int32 point = 3;
  if (has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->point(), target);
  }

  // optional int32 tabs = 4;
  if (has_tabs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->tabs(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Talent_SC_Up::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 talentId = 2;
    if (has_talentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->talentid());
    }

    // optional int32 point = 3;
    if (has_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->point());
    }

    // optional int32 tabs = 4;
    if (has_tabs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tabs());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Talent_SC_Up::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Talent_SC_Up* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Talent_SC_Up*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Talent_SC_Up::MergeFrom(const Talent_SC_Up& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_talentid()) {
      set_talentid(from.talentid());
    }
    if (from.has_point()) {
      set_point(from.point());
    }
    if (from.has_tabs()) {
      set_tabs(from.tabs());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Talent_SC_Up::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Talent_SC_Up::CopyFrom(const Talent_SC_Up& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Talent_SC_Up::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Talent_SC_Up::Swap(Talent_SC_Up* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(talentid_, other->talentid_);
    std::swap(point_, other->point_);
    std::swap(tabs_, other->tabs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Talent_SC_Up::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Talent_SC_Up_descriptor_;
  metadata.reflection = Talent_SC_Up_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Talent_CS_Reset::kTabsFieldNumber;
#endif  // !_MSC_VER

Talent_CS_Reset::Talent_CS_Reset()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Talent_CS_Reset::InitAsDefaultInstance() {
}

Talent_CS_Reset::Talent_CS_Reset(const Talent_CS_Reset& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Talent_CS_Reset::SharedCtor() {
  _cached_size_ = 0;
  tabs_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Talent_CS_Reset::~Talent_CS_Reset() {
  SharedDtor();
}

void Talent_CS_Reset::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Talent_CS_Reset::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Talent_CS_Reset::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Talent_CS_Reset_descriptor_;
}

const Talent_CS_Reset& Talent_CS_Reset::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_talent_2eproto();
  return *default_instance_;
}

Talent_CS_Reset* Talent_CS_Reset::default_instance_ = NULL;

Talent_CS_Reset* Talent_CS_Reset::New() const {
  return new Talent_CS_Reset;
}

void Talent_CS_Reset::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tabs_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Talent_CS_Reset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 tabs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tabs_)));
          set_has_tabs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Talent_CS_Reset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 tabs = 1;
  if (has_tabs()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tabs(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Talent_CS_Reset::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 tabs = 1;
  if (has_tabs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tabs(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Talent_CS_Reset::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 tabs = 1;
    if (has_tabs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tabs());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Talent_CS_Reset::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Talent_CS_Reset* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Talent_CS_Reset*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Talent_CS_Reset::MergeFrom(const Talent_CS_Reset& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tabs()) {
      set_tabs(from.tabs());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Talent_CS_Reset::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Talent_CS_Reset::CopyFrom(const Talent_CS_Reset& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Talent_CS_Reset::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Talent_CS_Reset::Swap(Talent_CS_Reset* other) {
  if (other != this) {
    std::swap(tabs_, other->tabs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Talent_CS_Reset::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Talent_CS_Reset_descriptor_;
  metadata.reflection = Talent_CS_Reset_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Talent_SC_Reset::kResultFieldNumber;
const int Talent_SC_Reset::kTabsInfoFieldNumber;
#endif  // !_MSC_VER

Talent_SC_Reset::Talent_SC_Reset()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Talent_SC_Reset::InitAsDefaultInstance() {
  tabsinfo_ = const_cast< ::proto::message::ProtoTalentInfo*>(&::proto::message::ProtoTalentInfo::default_instance());
}

Talent_SC_Reset::Talent_SC_Reset(const Talent_SC_Reset& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Talent_SC_Reset::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  tabsinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Talent_SC_Reset::~Talent_SC_Reset() {
  SharedDtor();
}

void Talent_SC_Reset::SharedDtor() {
  if (this != default_instance_) {
    delete tabsinfo_;
  }
}

void Talent_SC_Reset::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Talent_SC_Reset::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Talent_SC_Reset_descriptor_;
}

const Talent_SC_Reset& Talent_SC_Reset::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_talent_2eproto();
  return *default_instance_;
}

Talent_SC_Reset* Talent_SC_Reset::default_instance_ = NULL;

Talent_SC_Reset* Talent_SC_Reset::New() const {
  return new Talent_SC_Reset;
}

void Talent_SC_Reset::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_tabsinfo()) {
      if (tabsinfo_ != NULL) tabsinfo_->::proto::message::ProtoTalentInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Talent_SC_Reset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tabsInfo;
        break;
      }

      // optional .proto.message.ProtoTalentInfo tabsInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tabsInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tabsinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Talent_SC_Reset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .proto.message.ProtoTalentInfo tabsInfo = 2;
  if (has_tabsinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->tabsinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Talent_SC_Reset::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .proto.message.ProtoTalentInfo tabsInfo = 2;
  if (has_tabsinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->tabsinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Talent_SC_Reset::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .proto.message.ProtoTalentInfo tabsInfo = 2;
    if (has_tabsinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tabsinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Talent_SC_Reset::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Talent_SC_Reset* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Talent_SC_Reset*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Talent_SC_Reset::MergeFrom(const Talent_SC_Reset& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_tabsinfo()) {
      mutable_tabsinfo()->::proto::message::ProtoTalentInfo::MergeFrom(from.tabsinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Talent_SC_Reset::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Talent_SC_Reset::CopyFrom(const Talent_SC_Reset& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Talent_SC_Reset::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_tabsinfo()) {
    if (!this->tabsinfo().IsInitialized()) return false;
  }
  return true;
}

void Talent_SC_Reset::Swap(Talent_SC_Reset* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(tabsinfo_, other->tabsinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Talent_SC_Reset::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Talent_SC_Reset_descriptor_;
  metadata.reflection = Talent_SC_Reset_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Talent_CS_Using::kTabsFieldNumber;
#endif  // !_MSC_VER

Talent_CS_Using::Talent_CS_Using()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Talent_CS_Using::InitAsDefaultInstance() {
}

Talent_CS_Using::Talent_CS_Using(const Talent_CS_Using& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Talent_CS_Using::SharedCtor() {
  _cached_size_ = 0;
  tabs_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Talent_CS_Using::~Talent_CS_Using() {
  SharedDtor();
}

void Talent_CS_Using::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Talent_CS_Using::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Talent_CS_Using::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Talent_CS_Using_descriptor_;
}

const Talent_CS_Using& Talent_CS_Using::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_talent_2eproto();
  return *default_instance_;
}

Talent_CS_Using* Talent_CS_Using::default_instance_ = NULL;

Talent_CS_Using* Talent_CS_Using::New() const {
  return new Talent_CS_Using;
}

void Talent_CS_Using::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tabs_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Talent_CS_Using::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 tabs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tabs_)));
          set_has_tabs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Talent_CS_Using::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 tabs = 1;
  if (has_tabs()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tabs(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Talent_CS_Using::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 tabs = 1;
  if (has_tabs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tabs(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Talent_CS_Using::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 tabs = 1;
    if (has_tabs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tabs());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Talent_CS_Using::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Talent_CS_Using* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Talent_CS_Using*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Talent_CS_Using::MergeFrom(const Talent_CS_Using& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tabs()) {
      set_tabs(from.tabs());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Talent_CS_Using::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Talent_CS_Using::CopyFrom(const Talent_CS_Using& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Talent_CS_Using::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Talent_CS_Using::Swap(Talent_CS_Using* other) {
  if (other != this) {
    std::swap(tabs_, other->tabs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Talent_CS_Using::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Talent_CS_Using_descriptor_;
  metadata.reflection = Talent_CS_Using_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Talent_SC_Using::kResultFieldNumber;
const int Talent_SC_Using::kTabsFieldNumber;
#endif  // !_MSC_VER

Talent_SC_Using::Talent_SC_Using()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Talent_SC_Using::InitAsDefaultInstance() {
}

Talent_SC_Using::Talent_SC_Using(const Talent_SC_Using& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Talent_SC_Using::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  tabs_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Talent_SC_Using::~Talent_SC_Using() {
  SharedDtor();
}

void Talent_SC_Using::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Talent_SC_Using::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Talent_SC_Using::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Talent_SC_Using_descriptor_;
}

const Talent_SC_Using& Talent_SC_Using::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_talent_2eproto();
  return *default_instance_;
}

Talent_SC_Using* Talent_SC_Using::default_instance_ = NULL;

Talent_SC_Using* Talent_SC_Using::New() const {
  return new Talent_SC_Using;
}

void Talent_SC_Using::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    tabs_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Talent_SC_Using::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tabs;
        break;
      }

      // optional int32 tabs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tabs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tabs_)));
          set_has_tabs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Talent_SC_Using::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 tabs = 2;
  if (has_tabs()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tabs(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Talent_SC_Using::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 tabs = 2;
  if (has_tabs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tabs(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Talent_SC_Using::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 tabs = 2;
    if (has_tabs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tabs());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Talent_SC_Using::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Talent_SC_Using* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Talent_SC_Using*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Talent_SC_Using::MergeFrom(const Talent_SC_Using& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_tabs()) {
      set_tabs(from.tabs());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Talent_SC_Using::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Talent_SC_Using::CopyFrom(const Talent_SC_Using& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Talent_SC_Using::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Talent_SC_Using::Swap(Talent_SC_Using* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(tabs_, other->tabs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Talent_SC_Using::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Talent_SC_Using_descriptor_;
  metadata.reflection = Talent_SC_Using_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Talent_CS_AddTabs::Talent_CS_AddTabs()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Talent_CS_AddTabs::InitAsDefaultInstance() {
}

Talent_CS_AddTabs::Talent_CS_AddTabs(const Talent_CS_AddTabs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Talent_CS_AddTabs::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Talent_CS_AddTabs::~Talent_CS_AddTabs() {
  SharedDtor();
}

void Talent_CS_AddTabs::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Talent_CS_AddTabs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Talent_CS_AddTabs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Talent_CS_AddTabs_descriptor_;
}

const Talent_CS_AddTabs& Talent_CS_AddTabs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_talent_2eproto();
  return *default_instance_;
}

Talent_CS_AddTabs* Talent_CS_AddTabs::default_instance_ = NULL;

Talent_CS_AddTabs* Talent_CS_AddTabs::New() const {
  return new Talent_CS_AddTabs;
}

void Talent_CS_AddTabs::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Talent_CS_AddTabs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Talent_CS_AddTabs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Talent_CS_AddTabs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Talent_CS_AddTabs::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Talent_CS_AddTabs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Talent_CS_AddTabs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Talent_CS_AddTabs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Talent_CS_AddTabs::MergeFrom(const Talent_CS_AddTabs& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Talent_CS_AddTabs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Talent_CS_AddTabs::CopyFrom(const Talent_CS_AddTabs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Talent_CS_AddTabs::IsInitialized() const {

  return true;
}

void Talent_CS_AddTabs::Swap(Talent_CS_AddTabs* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Talent_CS_AddTabs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Talent_CS_AddTabs_descriptor_;
  metadata.reflection = Talent_CS_AddTabs_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Talent_SC_AddTabs::kResultFieldNumber;
const int Talent_SC_AddTabs::kTabsInfoFieldNumber;
#endif  // !_MSC_VER

Talent_SC_AddTabs::Talent_SC_AddTabs()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Talent_SC_AddTabs::InitAsDefaultInstance() {
  tabsinfo_ = const_cast< ::proto::message::ProtoTalentInfo*>(&::proto::message::ProtoTalentInfo::default_instance());
}

Talent_SC_AddTabs::Talent_SC_AddTabs(const Talent_SC_AddTabs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Talent_SC_AddTabs::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  tabsinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Talent_SC_AddTabs::~Talent_SC_AddTabs() {
  SharedDtor();
}

void Talent_SC_AddTabs::SharedDtor() {
  if (this != default_instance_) {
    delete tabsinfo_;
  }
}

void Talent_SC_AddTabs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Talent_SC_AddTabs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Talent_SC_AddTabs_descriptor_;
}

const Talent_SC_AddTabs& Talent_SC_AddTabs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_talent_2eproto();
  return *default_instance_;
}

Talent_SC_AddTabs* Talent_SC_AddTabs::default_instance_ = NULL;

Talent_SC_AddTabs* Talent_SC_AddTabs::New() const {
  return new Talent_SC_AddTabs;
}

void Talent_SC_AddTabs::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_tabsinfo()) {
      if (tabsinfo_ != NULL) tabsinfo_->::proto::message::ProtoTalentInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Talent_SC_AddTabs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tabsInfo;
        break;
      }

      // optional .proto.message.ProtoTalentInfo tabsInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tabsInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tabsinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Talent_SC_AddTabs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .proto.message.ProtoTalentInfo tabsInfo = 2;
  if (has_tabsinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->tabsinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Talent_SC_AddTabs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .proto.message.ProtoTalentInfo tabsInfo = 2;
  if (has_tabsinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->tabsinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Talent_SC_AddTabs::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .proto.message.ProtoTalentInfo tabsInfo = 2;
    if (has_tabsinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tabsinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Talent_SC_AddTabs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Talent_SC_AddTabs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Talent_SC_AddTabs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Talent_SC_AddTabs::MergeFrom(const Talent_SC_AddTabs& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_tabsinfo()) {
      mutable_tabsinfo()->::proto::message::ProtoTalentInfo::MergeFrom(from.tabsinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Talent_SC_AddTabs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Talent_SC_AddTabs::CopyFrom(const Talent_SC_AddTabs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Talent_SC_AddTabs::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_tabsinfo()) {
    if (!this->tabsinfo().IsInitialized()) return false;
  }
  return true;
}

void Talent_SC_AddTabs::Swap(Talent_SC_AddTabs* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(tabsinfo_, other->tabsinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Talent_SC_AddTabs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Talent_SC_AddTabs_descriptor_;
  metadata.reflection = Talent_SC_AddTabs_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Talent_SC_UpdateTalentInfo::kNowTabeFieldNumber;
const int Talent_SC_UpdateTalentInfo::kTabsMaxFieldNumber;
const int Talent_SC_UpdateTalentInfo::kTabsListFieldNumber;
#endif  // !_MSC_VER

Talent_SC_UpdateTalentInfo::Talent_SC_UpdateTalentInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Talent_SC_UpdateTalentInfo::InitAsDefaultInstance() {
}

Talent_SC_UpdateTalentInfo::Talent_SC_UpdateTalentInfo(const Talent_SC_UpdateTalentInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Talent_SC_UpdateTalentInfo::SharedCtor() {
  _cached_size_ = 0;
  nowtabe_ = 0;
  tabsmax_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Talent_SC_UpdateTalentInfo::~Talent_SC_UpdateTalentInfo() {
  SharedDtor();
}

void Talent_SC_UpdateTalentInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Talent_SC_UpdateTalentInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Talent_SC_UpdateTalentInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Talent_SC_UpdateTalentInfo_descriptor_;
}

const Talent_SC_UpdateTalentInfo& Talent_SC_UpdateTalentInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_talent_2eproto();
  return *default_instance_;
}

Talent_SC_UpdateTalentInfo* Talent_SC_UpdateTalentInfo::default_instance_ = NULL;

Talent_SC_UpdateTalentInfo* Talent_SC_UpdateTalentInfo::New() const {
  return new Talent_SC_UpdateTalentInfo;
}

void Talent_SC_UpdateTalentInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nowtabe_ = 0;
    tabsmax_ = 0;
  }
  tabslist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Talent_SC_UpdateTalentInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 nowTabe = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nowtabe_)));
          set_has_nowtabe();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tabsMax;
        break;
      }

      // required int32 tabsMax = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tabsMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tabsmax_)));
          set_has_tabsmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_tabsList;
        break;
      }

      // repeated .proto.message.ProtoTalentInfo tabsList = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tabsList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tabslist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_tabsList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Talent_SC_UpdateTalentInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 nowTabe = 1;
  if (has_nowtabe()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nowtabe(), output);
  }

  // required int32 tabsMax = 2;
  if (has_tabsmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tabsmax(), output);
  }

  // repeated .proto.message.ProtoTalentInfo tabsList = 3;
  for (int i = 0; i < this->tabslist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->tabslist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Talent_SC_UpdateTalentInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 nowTabe = 1;
  if (has_nowtabe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nowtabe(), target);
  }

  // required int32 tabsMax = 2;
  if (has_tabsmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tabsmax(), target);
  }

  // repeated .proto.message.ProtoTalentInfo tabsList = 3;
  for (int i = 0; i < this->tabslist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->tabslist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Talent_SC_UpdateTalentInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 nowTabe = 1;
    if (has_nowtabe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nowtabe());
    }

    // required int32 tabsMax = 2;
    if (has_tabsmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tabsmax());
    }

  }
  // repeated .proto.message.ProtoTalentInfo tabsList = 3;
  total_size += 1 * this->tabslist_size();
  for (int i = 0; i < this->tabslist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tabslist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Talent_SC_UpdateTalentInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Talent_SC_UpdateTalentInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Talent_SC_UpdateTalentInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Talent_SC_UpdateTalentInfo::MergeFrom(const Talent_SC_UpdateTalentInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  tabslist_.MergeFrom(from.tabslist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nowtabe()) {
      set_nowtabe(from.nowtabe());
    }
    if (from.has_tabsmax()) {
      set_tabsmax(from.tabsmax());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Talent_SC_UpdateTalentInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Talent_SC_UpdateTalentInfo::CopyFrom(const Talent_SC_UpdateTalentInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Talent_SC_UpdateTalentInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < tabslist_size(); i++) {
    if (!this->tabslist(i).IsInitialized()) return false;
  }
  return true;
}

void Talent_SC_UpdateTalentInfo::Swap(Talent_SC_UpdateTalentInfo* other) {
  if (other != this) {
    std::swap(nowtabe_, other->nowtabe_);
    std::swap(tabsmax_, other->tabsmax_);
    tabslist_.Swap(&other->tabslist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Talent_SC_UpdateTalentInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Talent_SC_UpdateTalentInfo_descriptor_;
  metadata.reflection = Talent_SC_UpdateTalentInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Talent_SC_UpdateTalentPoint::kTabsPointFieldNumber;
#endif  // !_MSC_VER

Talent_SC_UpdateTalentPoint::Talent_SC_UpdateTalentPoint()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Talent_SC_UpdateTalentPoint::InitAsDefaultInstance() {
}

Talent_SC_UpdateTalentPoint::Talent_SC_UpdateTalentPoint(const Talent_SC_UpdateTalentPoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Talent_SC_UpdateTalentPoint::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Talent_SC_UpdateTalentPoint::~Talent_SC_UpdateTalentPoint() {
  SharedDtor();
}

void Talent_SC_UpdateTalentPoint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Talent_SC_UpdateTalentPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Talent_SC_UpdateTalentPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Talent_SC_UpdateTalentPoint_descriptor_;
}

const Talent_SC_UpdateTalentPoint& Talent_SC_UpdateTalentPoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_talent_2eproto();
  return *default_instance_;
}

Talent_SC_UpdateTalentPoint* Talent_SC_UpdateTalentPoint::default_instance_ = NULL;

Talent_SC_UpdateTalentPoint* Talent_SC_UpdateTalentPoint::New() const {
  return new Talent_SC_UpdateTalentPoint;
}

void Talent_SC_UpdateTalentPoint::Clear() {
  tabspoint_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Talent_SC_UpdateTalentPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.message.ProtoTalentInfo tabsPoint = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tabsPoint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tabspoint()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_tabsPoint;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Talent_SC_UpdateTalentPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.message.ProtoTalentInfo tabsPoint = 1;
  for (int i = 0; i < this->tabspoint_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tabspoint(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Talent_SC_UpdateTalentPoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.message.ProtoTalentInfo tabsPoint = 1;
  for (int i = 0; i < this->tabspoint_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->tabspoint(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Talent_SC_UpdateTalentPoint::ByteSize() const {
  int total_size = 0;

  // repeated .proto.message.ProtoTalentInfo tabsPoint = 1;
  total_size += 1 * this->tabspoint_size();
  for (int i = 0; i < this->tabspoint_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tabspoint(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Talent_SC_UpdateTalentPoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Talent_SC_UpdateTalentPoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Talent_SC_UpdateTalentPoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Talent_SC_UpdateTalentPoint::MergeFrom(const Talent_SC_UpdateTalentPoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  tabspoint_.MergeFrom(from.tabspoint_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Talent_SC_UpdateTalentPoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Talent_SC_UpdateTalentPoint::CopyFrom(const Talent_SC_UpdateTalentPoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Talent_SC_UpdateTalentPoint::IsInitialized() const {

  for (int i = 0; i < tabspoint_size(); i++) {
    if (!this->tabspoint(i).IsInitialized()) return false;
  }
  return true;
}

void Talent_SC_UpdateTalentPoint::Swap(Talent_SC_UpdateTalentPoint* other) {
  if (other != this) {
    tabspoint_.Swap(&other->tabspoint_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Talent_SC_UpdateTalentPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Talent_SC_UpdateTalentPoint_descriptor_;
  metadata.reflection = Talent_SC_UpdateTalentPoint_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace proto

// @@protoc_insertion_point(global_scope)
