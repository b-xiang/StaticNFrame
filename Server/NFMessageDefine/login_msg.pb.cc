// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: login_msg.proto

#include "login_msg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_login_5fmsg_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_login_5fmsg_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_plat_token_login_request_request_data_request_data_platinfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_login_5fmsg_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_plat_token_login_respone_respone_data_respone_data_platinfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_login_5fmsg_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_reqeust_zone_list_data;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_login_5fmsg_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_reqeust_zone_list_respone_respone_data_reqeust_zone_list_server;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_login_5fmsg_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_respone_select_zone_respone_respone_data;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_login_5fmsg_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_plat_token_login_request_request_data;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_login_5fmsg_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_plat_token_login_respone_respone_data;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_login_5fmsg_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_reqeust_zone_list_respone_respone_data;
}  // namespace protobuf_login_5fmsg_2eproto
namespace NFMsg {
class LoginAccountDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LoginAccount>
      _instance;
} _LoginAccount_default_instance_;
class http_login_cmdDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<http_login_cmd>
      _instance;
} _http_login_cmd_default_instance_;
class reqeust_zone_list_dataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<reqeust_zone_list_data>
      _instance;
} _reqeust_zone_list_data_default_instance_;
class reqeust_zone_listDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<reqeust_zone_list>
      _instance;
} _reqeust_zone_list_default_instance_;
class reqeust_zone_list_respone_respone_data_reqeust_zone_list_serverDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<reqeust_zone_list_respone_respone_data_reqeust_zone_list_server>
      _instance;
} _reqeust_zone_list_respone_respone_data_reqeust_zone_list_server_default_instance_;
class reqeust_zone_list_respone_respone_dataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<reqeust_zone_list_respone_respone_data>
      _instance;
} _reqeust_zone_list_respone_respone_data_default_instance_;
class reqeust_zone_list_responeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<reqeust_zone_list_respone>
      _instance;
} _reqeust_zone_list_respone_default_instance_;
class plat_token_login_request_request_data_request_data_platinfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<plat_token_login_request_request_data_request_data_platinfo>
      _instance;
} _plat_token_login_request_request_data_request_data_platinfo_default_instance_;
class plat_token_login_request_request_dataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<plat_token_login_request_request_data>
      _instance;
} _plat_token_login_request_request_data_default_instance_;
class plat_token_login_requestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<plat_token_login_request>
      _instance;
} _plat_token_login_request_default_instance_;
class plat_token_login_respone_respone_data_respone_data_platinfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<plat_token_login_respone_respone_data_respone_data_platinfo>
      _instance;
} _plat_token_login_respone_respone_data_respone_data_platinfo_default_instance_;
class plat_token_login_respone_respone_dataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<plat_token_login_respone_respone_data>
      _instance;
} _plat_token_login_respone_respone_data_default_instance_;
class plat_token_login_responeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<plat_token_login_respone>
      _instance;
} _plat_token_login_respone_default_instance_;
class reqeust_select_zone_requestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<reqeust_select_zone_request>
      _instance;
} _reqeust_select_zone_request_default_instance_;
class respone_select_zone_respone_respone_dataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<respone_select_zone_respone_respone_data>
      _instance;
} _respone_select_zone_respone_respone_data_default_instance_;
class respone_select_zone_responeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<respone_select_zone_respone>
      _instance;
} _respone_select_zone_respone_default_instance_;
}  // namespace NFMsg
namespace protobuf_login_5fmsg_2eproto {
static void InitDefaultsLoginAccount() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_LoginAccount_default_instance_;
    new (ptr) ::NFMsg::LoginAccount();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::LoginAccount::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LoginAccount =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLoginAccount}, {}};

static void InitDefaultshttp_login_cmd() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_http_login_cmd_default_instance_;
    new (ptr) ::NFMsg::http_login_cmd();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::http_login_cmd::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_http_login_cmd =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultshttp_login_cmd}, {}};

static void InitDefaultsreqeust_zone_list_data() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_reqeust_zone_list_data_default_instance_;
    new (ptr) ::NFMsg::reqeust_zone_list_data();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::reqeust_zone_list_data::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_reqeust_zone_list_data =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsreqeust_zone_list_data}, {}};

static void InitDefaultsreqeust_zone_list() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_reqeust_zone_list_default_instance_;
    new (ptr) ::NFMsg::reqeust_zone_list();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::reqeust_zone_list::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_reqeust_zone_list =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsreqeust_zone_list}, {
      &protobuf_login_5fmsg_2eproto::scc_info_reqeust_zone_list_data.base,}};

static void InitDefaultsreqeust_zone_list_respone_respone_data_reqeust_zone_list_server() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_reqeust_zone_list_respone_respone_data_reqeust_zone_list_server_default_instance_;
    new (ptr) ::NFMsg::reqeust_zone_list_respone_respone_data_reqeust_zone_list_server();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::reqeust_zone_list_respone_respone_data_reqeust_zone_list_server::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_reqeust_zone_list_respone_respone_data_reqeust_zone_list_server =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsreqeust_zone_list_respone_respone_data_reqeust_zone_list_server}, {}};

static void InitDefaultsreqeust_zone_list_respone_respone_data() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_reqeust_zone_list_respone_respone_data_default_instance_;
    new (ptr) ::NFMsg::reqeust_zone_list_respone_respone_data();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::reqeust_zone_list_respone_respone_data::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_reqeust_zone_list_respone_respone_data =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsreqeust_zone_list_respone_respone_data}, {
      &protobuf_login_5fmsg_2eproto::scc_info_reqeust_zone_list_respone_respone_data_reqeust_zone_list_server.base,}};

static void InitDefaultsreqeust_zone_list_respone() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_reqeust_zone_list_respone_default_instance_;
    new (ptr) ::NFMsg::reqeust_zone_list_respone();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::reqeust_zone_list_respone::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_reqeust_zone_list_respone =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsreqeust_zone_list_respone}, {
      &protobuf_login_5fmsg_2eproto::scc_info_reqeust_zone_list_respone_respone_data.base,}};

static void InitDefaultsplat_token_login_request_request_data_request_data_platinfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_plat_token_login_request_request_data_request_data_platinfo_default_instance_;
    new (ptr) ::NFMsg::plat_token_login_request_request_data_request_data_platinfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::plat_token_login_request_request_data_request_data_platinfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_plat_token_login_request_request_data_request_data_platinfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsplat_token_login_request_request_data_request_data_platinfo}, {}};

static void InitDefaultsplat_token_login_request_request_data() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_plat_token_login_request_request_data_default_instance_;
    new (ptr) ::NFMsg::plat_token_login_request_request_data();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::plat_token_login_request_request_data::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_plat_token_login_request_request_data =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsplat_token_login_request_request_data}, {
      &protobuf_login_5fmsg_2eproto::scc_info_plat_token_login_request_request_data_request_data_platinfo.base,}};

static void InitDefaultsplat_token_login_request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_plat_token_login_request_default_instance_;
    new (ptr) ::NFMsg::plat_token_login_request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::plat_token_login_request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_plat_token_login_request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsplat_token_login_request}, {
      &protobuf_login_5fmsg_2eproto::scc_info_plat_token_login_request_request_data.base,}};

static void InitDefaultsplat_token_login_respone_respone_data_respone_data_platinfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_plat_token_login_respone_respone_data_respone_data_platinfo_default_instance_;
    new (ptr) ::NFMsg::plat_token_login_respone_respone_data_respone_data_platinfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::plat_token_login_respone_respone_data_respone_data_platinfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_plat_token_login_respone_respone_data_respone_data_platinfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsplat_token_login_respone_respone_data_respone_data_platinfo}, {}};

static void InitDefaultsplat_token_login_respone_respone_data() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_plat_token_login_respone_respone_data_default_instance_;
    new (ptr) ::NFMsg::plat_token_login_respone_respone_data();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::plat_token_login_respone_respone_data::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_plat_token_login_respone_respone_data =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsplat_token_login_respone_respone_data}, {
      &protobuf_login_5fmsg_2eproto::scc_info_plat_token_login_respone_respone_data_respone_data_platinfo.base,}};

static void InitDefaultsplat_token_login_respone() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_plat_token_login_respone_default_instance_;
    new (ptr) ::NFMsg::plat_token_login_respone();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::plat_token_login_respone::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_plat_token_login_respone =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsplat_token_login_respone}, {
      &protobuf_login_5fmsg_2eproto::scc_info_plat_token_login_respone_respone_data.base,}};

static void InitDefaultsreqeust_select_zone_request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_reqeust_select_zone_request_default_instance_;
    new (ptr) ::NFMsg::reqeust_select_zone_request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::reqeust_select_zone_request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_reqeust_select_zone_request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsreqeust_select_zone_request}, {}};

static void InitDefaultsrespone_select_zone_respone_respone_data() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_respone_select_zone_respone_respone_data_default_instance_;
    new (ptr) ::NFMsg::respone_select_zone_respone_respone_data();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::respone_select_zone_respone_respone_data::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_respone_select_zone_respone_respone_data =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsrespone_select_zone_respone_respone_data}, {}};

static void InitDefaultsrespone_select_zone_respone() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_respone_select_zone_respone_default_instance_;
    new (ptr) ::NFMsg::respone_select_zone_respone();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::respone_select_zone_respone::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_respone_select_zone_respone =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsrespone_select_zone_respone}, {
      &protobuf_login_5fmsg_2eproto::scc_info_respone_select_zone_respone_respone_data.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_LoginAccount.base);
  ::google::protobuf::internal::InitSCC(&scc_info_http_login_cmd.base);
  ::google::protobuf::internal::InitSCC(&scc_info_reqeust_zone_list_data.base);
  ::google::protobuf::internal::InitSCC(&scc_info_reqeust_zone_list.base);
  ::google::protobuf::internal::InitSCC(&scc_info_reqeust_zone_list_respone_respone_data_reqeust_zone_list_server.base);
  ::google::protobuf::internal::InitSCC(&scc_info_reqeust_zone_list_respone_respone_data.base);
  ::google::protobuf::internal::InitSCC(&scc_info_reqeust_zone_list_respone.base);
  ::google::protobuf::internal::InitSCC(&scc_info_plat_token_login_request_request_data_request_data_platinfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_plat_token_login_request_request_data.base);
  ::google::protobuf::internal::InitSCC(&scc_info_plat_token_login_request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_plat_token_login_respone_respone_data_respone_data_platinfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_plat_token_login_respone_respone_data.base);
  ::google::protobuf::internal::InitSCC(&scc_info_plat_token_login_respone.base);
  ::google::protobuf::internal::InitSCC(&scc_info_reqeust_select_zone_request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_respone_select_zone_respone_respone_data.base);
  ::google::protobuf::internal::InitSCC(&scc_info_respone_select_zone_respone.base);
}

::google::protobuf::Metadata file_level_metadata[16];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::LoginAccount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::LoginAccount, account_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::LoginAccount, uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::LoginAccount, openkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::LoginAccount, platid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::LoginAccount, gameid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::LoginAccount, zoneid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::LoginAccount, md5_plat_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::LoginAccount, md5_plat_login_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::http_login_cmd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::http_login_cmd, do__),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::reqeust_zone_list_data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::reqeust_zone_list_data, gameid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::reqeust_zone_list, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::reqeust_zone_list, do__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::reqeust_zone_list, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::reqeust_zone_list_respone_respone_data_reqeust_zone_list_server, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::reqeust_zone_list_respone_respone_data_reqeust_zone_list_server, gameid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::reqeust_zone_list_respone_respone_data_reqeust_zone_list_server, gamename_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::reqeust_zone_list_respone_respone_data_reqeust_zone_list_server, newzoneid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::reqeust_zone_list_respone_respone_data_reqeust_zone_list_server, onlinenum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::reqeust_zone_list_respone_respone_data_reqeust_zone_list_server, opentime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::reqeust_zone_list_respone_respone_data_reqeust_zone_list_server, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::reqeust_zone_list_respone_respone_data_reqeust_zone_list_server, zoneid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::reqeust_zone_list_respone_respone_data_reqeust_zone_list_server, zonename_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::reqeust_zone_list_respone_respone_data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::reqeust_zone_list_respone_respone_data, bestzoneid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::reqeust_zone_list_respone_respone_data, gameid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::reqeust_zone_list_respone_respone_data, gamename_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::reqeust_zone_list_respone_respone_data, zoneid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::reqeust_zone_list_respone_respone_data, zonelist_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::reqeust_zone_list_respone, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::reqeust_zone_list_respone, do__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::reqeust_zone_list_respone, error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::reqeust_zone_list_respone, st_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::reqeust_zone_list_respone, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::plat_token_login_request_request_data_request_data_platinfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::plat_token_login_request_request_data_request_data_platinfo, aaa_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::plat_token_login_request_request_data_request_data_platinfo, sign_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::plat_token_login_request_request_data_request_data_platinfo, account_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::plat_token_login_request_request_data_request_data_platinfo, email_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::plat_token_login_request_request_data_request_data_platinfo, platid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::plat_token_login_request_request_data_request_data_platinfo, gender_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::plat_token_login_request_request_data_request_data_platinfo, nickname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::plat_token_login_request_request_data_request_data_platinfo, uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::plat_token_login_request_request_data_request_data_platinfo, gameid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::plat_token_login_request_request_data_request_data_platinfo, timestamp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::plat_token_login_request_request_data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::plat_token_login_request_request_data, platinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::plat_token_login_request_request_data, gameid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::plat_token_login_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::plat_token_login_request, do__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::plat_token_login_request, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::plat_token_login_request, gameid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::plat_token_login_request, zoneid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::plat_token_login_request, unigame_plat_timestamp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::plat_token_login_respone_respone_data_respone_data_platinfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::plat_token_login_respone_respone_data_respone_data_platinfo, aaa_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::plat_token_login_respone_respone_data_respone_data_platinfo, sign_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::plat_token_login_respone_respone_data_respone_data_platinfo, account_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::plat_token_login_respone_respone_data_respone_data_platinfo, email_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::plat_token_login_respone_respone_data_respone_data_platinfo, platid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::plat_token_login_respone_respone_data_respone_data_platinfo, gender_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::plat_token_login_respone_respone_data_respone_data_platinfo, nickname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::plat_token_login_respone_respone_data_respone_data_platinfo, uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::plat_token_login_respone_respone_data_respone_data_platinfo, gameid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::plat_token_login_respone_respone_data_respone_data_platinfo, timestamp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::plat_token_login_respone_respone_data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::plat_token_login_respone_respone_data, gameid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::plat_token_login_respone_respone_data, sid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::plat_token_login_respone_respone_data, timezone_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::plat_token_login_respone_respone_data, timezone_offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::plat_token_login_respone_respone_data, uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::plat_token_login_respone_respone_data, unigame_plat_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::plat_token_login_respone_respone_data, unigame_plat_login_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::plat_token_login_respone_respone_data, unigame_plat_login_life_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::plat_token_login_respone_respone_data, platinfo_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::plat_token_login_respone, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::plat_token_login_respone, gameid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::plat_token_login_respone, unigame_plat_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::plat_token_login_respone, unigame_plat_login_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::plat_token_login_respone, unigame_plat_login_timeout_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::plat_token_login_respone, unigame_plat_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::plat_token_login_respone, zoneid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::plat_token_login_respone, do__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::plat_token_login_respone, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::reqeust_select_zone_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::reqeust_select_zone_request, do__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::reqeust_select_zone_request, gameid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::reqeust_select_zone_request, zoneid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::reqeust_select_zone_request, uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::reqeust_select_zone_request, unigame_plat_login_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::reqeust_select_zone_request, unigame_plat_timestamp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::respone_select_zone_respone_respone_data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::respone_select_zone_respone_respone_data, accountid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::respone_select_zone_respone_respone_data, gameid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::respone_select_zone_respone_respone_data, gatewayurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::respone_select_zone_respone_respone_data, gatewayurltcp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::respone_select_zone_respone_respone_data, gatewayurlws_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::respone_select_zone_respone_respone_data, logintempid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::respone_select_zone_respone_respone_data, tokenid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::respone_select_zone_respone_respone_data, zoneid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::respone_select_zone_respone_respone_data, zoneuid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::respone_select_zone_respone, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::respone_select_zone_respone, do__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::respone_select_zone_respone, errno__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::respone_select_zone_respone, gameid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::respone_select_zone_respone, st_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::respone_select_zone_respone, unigame_plat_login_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::respone_select_zone_respone, unigame_plat_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::respone_select_zone_respone, zoneid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::respone_select_zone_respone, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::respone_select_zone_respone, uid_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::NFMsg::LoginAccount)},
  { 13, -1, sizeof(::NFMsg::http_login_cmd)},
  { 19, -1, sizeof(::NFMsg::reqeust_zone_list_data)},
  { 25, -1, sizeof(::NFMsg::reqeust_zone_list)},
  { 32, -1, sizeof(::NFMsg::reqeust_zone_list_respone_respone_data_reqeust_zone_list_server)},
  { 45, -1, sizeof(::NFMsg::reqeust_zone_list_respone_respone_data)},
  { 55, -1, sizeof(::NFMsg::reqeust_zone_list_respone)},
  { 64, -1, sizeof(::NFMsg::plat_token_login_request_request_data_request_data_platinfo)},
  { 79, -1, sizeof(::NFMsg::plat_token_login_request_request_data)},
  { 86, -1, sizeof(::NFMsg::plat_token_login_request)},
  { 96, -1, sizeof(::NFMsg::plat_token_login_respone_respone_data_respone_data_platinfo)},
  { 111, -1, sizeof(::NFMsg::plat_token_login_respone_respone_data)},
  { 125, -1, sizeof(::NFMsg::plat_token_login_respone)},
  { 138, -1, sizeof(::NFMsg::reqeust_select_zone_request)},
  { 149, -1, sizeof(::NFMsg::respone_select_zone_respone_respone_data)},
  { 163, -1, sizeof(::NFMsg::respone_select_zone_respone)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_LoginAccount_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_http_login_cmd_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_reqeust_zone_list_data_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_reqeust_zone_list_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_reqeust_zone_list_respone_respone_data_reqeust_zone_list_server_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_reqeust_zone_list_respone_respone_data_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_reqeust_zone_list_respone_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_plat_token_login_request_request_data_request_data_platinfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_plat_token_login_request_request_data_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_plat_token_login_request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_plat_token_login_respone_respone_data_respone_data_platinfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_plat_token_login_respone_respone_data_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_plat_token_login_respone_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_reqeust_select_zone_request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_respone_select_zone_respone_respone_data_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_respone_select_zone_respone_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "login_msg.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 16);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\017login_msg.proto\022\005NFMsg\"\233\001\n\014LoginAccoun"
      "t\022\017\n\007account\030\001 \001(\t\022\013\n\003uid\030\002 \001(\004\022\017\n\007openk"
      "ey\030\003 \001(\t\022\016\n\006platid\030\004 \001(\r\022\016\n\006gameid\030\005 \001(\r"
      "\022\016\n\006zoneid\030\006 \001(\r\022\024\n\014md5_plat_key\030\007 \001(\t\022\026"
      "\n\016md5_plat_login\030\010 \001(\t\"\034\n\016http_login_cmd"
      "\022\n\n\002do\030\001 \001(\t\"(\n\026reqeust_zone_list_data\022\016"
      "\n\006gameid\030\001 \001(\r\"L\n\021reqeust_zone_list\022\n\n\002d"
      "o\030\001 \001(\t\022+\n\004data\030\002 \001(\0132\035.NFMsg.reqeust_zo"
      "ne_list_data\"\330\003\n\031reqeust_zone_list_respo"
      "ne\022\n\n\002do\030\001 \001(\t\022\r\n\005error\030\002 \001(\t\022\n\n\002st\030\003 \001("
      "\004\022;\n\004data\030\004 \001(\0132-.NFMsg.reqeust_zone_lis"
      "t_respone.respone_data\032\326\002\n\014respone_data\022"
      "\022\n\nbestzoneid\030\001 \001(\r\022\016\n\006gameid\030\002 \001(\r\022\020\n\010g"
      "amename\030\003 \001(\t\022\016\n\006zoneid\030\004 \001(\r\022X\n\010zonelis"
      "t\030\005 \003(\0132F.NFMsg.reqeust_zone_list_respon"
      "e.respone_data.reqeust_zone_list_server\032"
      "\245\001\n\030reqeust_zone_list_server\022\016\n\006gameid\030\001"
      " \001(\r\022\020\n\010gamename\030\002 \001(\t\022\021\n\tnewzoneid\030\003 \001("
      "\r\022\021\n\tonlinenum\030\004 \001(\r\022\020\n\010opentime\030\005 \001(\t\022\r"
      "\n\005state\030\006 \001(\r\022\016\n\006zoneid\030\007 \001(\r\022\020\n\010zonenam"
      "e\030\010 \001(\t\"\320\003\n\030plat_token_login_request\022\n\n\002"
      "do\030\001 \001(\t\022:\n\004data\030\002 \001(\0132,.NFMsg.plat_toke"
      "n_login_request.request_data\022\016\n\006gameid\030\003"
      " \001(\r\022\016\n\006zoneid\030\004 \001(\r\022\036\n\026unigame_plat_tim"
      "estamp\030\005 \001(\004\032\253\002\n\014request_data\022T\n\010platinf"
      "o\030\001 \001(\0132B.NFMsg.plat_token_login_request"
      ".request_data.request_data_platinfo\022\016\n\006g"
      "ameid\030\002 \001(\r\032\264\001\n\025request_data_platinfo\022\013\n"
      "\003aaa\030\001 \001(\r\022\014\n\004sign\030\002 \001(\t\022\017\n\007account\030\003 \001("
      "\t\022\r\n\005email\030\004 \001(\t\022\016\n\006platid\030\005 \001(\r\022\016\n\006gend"
      "er\030\006 \001(\t\022\020\n\010nickname\030\007 \001(\t\022\013\n\003uid\030\010 \001(\t\022"
      "\016\n\006gameid\030\t \001(\r\022\021\n\ttimestamp\030\n \001(\t\"\313\005\n\030p"
      "lat_token_login_respone\022\016\n\006gameid\030\001 \001(\r\022"
      "\030\n\020unigame_plat_key\030\002 \001(\t\022\032\n\022unigame_pla"
      "t_login\030\003 \001(\t\022\"\n\032unigame_plat_login_time"
      "out\030\004 \001(\t\022\036\n\026unigame_plat_timestamp\030\005 \001("
      "\004\022\016\n\006zoneid\030\006 \001(\r\022\n\n\002do\030\007 \001(\t\022:\n\004data\030\010 "
      "\001(\0132,.NFMsg.plat_token_login_respone.res"
      "pone_data\032\314\003\n\014respone_data\022\016\n\006gameid\030\001 \001"
      "(\r\022\013\n\003sid\030\002 \001(\t\022\025\n\rtimezone_name\030\003 \001(\t\022\027"
      "\n\017timezone_offset\030\004 \001(\r\022\013\n\003uid\030\005 \001(\t\022\030\n\020"
      "unigame_plat_key\030\006 \001(\t\022\032\n\022unigame_plat_l"
      "ogin\030\007 \001(\t\022\037\n\027unigame_plat_login_life\030\010 "
      "\001(\r\022T\n\010platinfo\030\t \001(\0132B.NFMsg.plat_token"
      "_login_respone.respone_data.respone_data"
      "_platinfo\032\264\001\n\025respone_data_platinfo\022\013\n\003a"
      "aa\030\001 \001(\r\022\014\n\004sign\030\002 \001(\t\022\017\n\007account\030\003 \001(\t\022"
      "\r\n\005email\030\004 \001(\t\022\016\n\006platid\030\005 \001(\r\022\016\n\006gender"
      "\030\006 \001(\t\022\020\n\010nickname\030\007 \001(\t\022\013\n\003uid\030\010 \001(\t\022\016\n"
      "\006gameid\030\t \001(\r\022\021\n\ttimestamp\030\n \001(\t\"\222\001\n\033req"
      "eust_select_zone_request\022\n\n\002do\030\001 \001(\t\022\016\n\006"
      "gameid\030\002 \001(\r\022\016\n\006zoneid\030\003 \001(\r\022\013\n\003uid\030\004 \001("
      "\t\022\032\n\022unigame_plat_login\030\005 \001(\t\022\036\n\026unigame"
      "_plat_timestamp\030\006 \001(\004\"\251\003\n\033respone_select"
      "_zone_respone\022\n\n\002do\030\001 \001(\t\022\016\n\006errno_\030\002 \001("
      "\t\022\016\n\006gameid\030\003 \001(\r\022\n\n\002st\030\004 \001(\004\022\032\n\022unigame"
      "_plat_login\030\005 \001(\t\022\036\n\026unigame_plat_timest"
      "amp\030\006 \001(\004\022\016\n\006zoneid\030\007 \001(\r\022=\n\004data\030\010 \001(\0132"
      "/.NFMsg.respone_select_zone_respone.resp"
      "one_data\022\013\n\003uid\030\t \001(\t\032\271\001\n\014respone_data\022\021"
      "\n\taccountid\030\001 \001(\004\022\016\n\006gameid\030\002 \001(\r\022\022\n\ngat"
      "ewayurl\030\003 \001(\t\022\025\n\rgatewayurltcp\030\004 \001(\t\022\024\n\014"
      "gatewayurlws\030\005 \001(\t\022\023\n\013logintempid\030\006 \001(\r\022"
      "\017\n\007tokenid\030\007 \001(\004\022\016\n\006zoneid\030\010 \001(\r\022\017\n\007zone"
      "uid\030\t \001(\004b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2577);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "login_msg.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_login_5fmsg_2eproto
namespace NFMsg {

// ===================================================================

void LoginAccount::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginAccount::kAccountFieldNumber;
const int LoginAccount::kUidFieldNumber;
const int LoginAccount::kOpenkeyFieldNumber;
const int LoginAccount::kPlatidFieldNumber;
const int LoginAccount::kGameidFieldNumber;
const int LoginAccount::kZoneidFieldNumber;
const int LoginAccount::kMd5PlatKeyFieldNumber;
const int LoginAccount::kMd5PlatLoginFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginAccount::LoginAccount()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_login_5fmsg_2eproto::scc_info_LoginAccount.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.LoginAccount)
}
LoginAccount::LoginAccount(const LoginAccount& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.account().size() > 0) {
    account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  openkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.openkey().size() > 0) {
    openkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.openkey_);
  }
  md5_plat_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.md5_plat_key().size() > 0) {
    md5_plat_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.md5_plat_key_);
  }
  md5_plat_login_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.md5_plat_login().size() > 0) {
    md5_plat_login_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.md5_plat_login_);
  }
  ::memcpy(&uid_, &from.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&zoneid_) -
    reinterpret_cast<char*>(&uid_)) + sizeof(zoneid_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.LoginAccount)
}

void LoginAccount::SharedCtor() {
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  openkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  md5_plat_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  md5_plat_login_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&zoneid_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(zoneid_));
}

LoginAccount::~LoginAccount() {
  // @@protoc_insertion_point(destructor:NFMsg.LoginAccount)
  SharedDtor();
}

void LoginAccount::SharedDtor() {
  account_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  openkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  md5_plat_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  md5_plat_login_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LoginAccount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LoginAccount::descriptor() {
  ::protobuf_login_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_login_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LoginAccount& LoginAccount::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_login_5fmsg_2eproto::scc_info_LoginAccount.base);
  return *internal_default_instance();
}


void LoginAccount::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.LoginAccount)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  openkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  md5_plat_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  md5_plat_login_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&zoneid_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(zoneid_));
  _internal_metadata_.Clear();
}

bool LoginAccount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.LoginAccount)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string account = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->account().data(), static_cast<int>(this->account().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NFMsg.LoginAccount.account"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 uid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string openkey = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_openkey()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->openkey().data(), static_cast<int>(this->openkey().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NFMsg.LoginAccount.openkey"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 platid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &platid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 gameid = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 zoneid = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string md5_plat_key = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_md5_plat_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->md5_plat_key().data(), static_cast<int>(this->md5_plat_key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NFMsg.LoginAccount.md5_plat_key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string md5_plat_login = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_md5_plat_login()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->md5_plat_login().data(), static_cast<int>(this->md5_plat_login().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NFMsg.LoginAccount.md5_plat_login"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.LoginAccount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.LoginAccount)
  return false;
#undef DO_
}

void LoginAccount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.LoginAccount)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string account = 1;
  if (this->account().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account().data(), static_cast<int>(this->account().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.LoginAccount.account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->account(), output);
  }

  // uint64 uid = 2;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uid(), output);
  }

  // string openkey = 3;
  if (this->openkey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->openkey().data(), static_cast<int>(this->openkey().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.LoginAccount.openkey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->openkey(), output);
  }

  // uint32 platid = 4;
  if (this->platid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->platid(), output);
  }

  // uint32 gameid = 5;
  if (this->gameid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->gameid(), output);
  }

  // uint32 zoneid = 6;
  if (this->zoneid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->zoneid(), output);
  }

  // string md5_plat_key = 7;
  if (this->md5_plat_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->md5_plat_key().data(), static_cast<int>(this->md5_plat_key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.LoginAccount.md5_plat_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->md5_plat_key(), output);
  }

  // string md5_plat_login = 8;
  if (this->md5_plat_login().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->md5_plat_login().data(), static_cast<int>(this->md5_plat_login().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.LoginAccount.md5_plat_login");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->md5_plat_login(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.LoginAccount)
}

::google::protobuf::uint8* LoginAccount::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.LoginAccount)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string account = 1;
  if (this->account().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account().data(), static_cast<int>(this->account().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.LoginAccount.account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account(), target);
  }

  // uint64 uid = 2;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uid(), target);
  }

  // string openkey = 3;
  if (this->openkey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->openkey().data(), static_cast<int>(this->openkey().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.LoginAccount.openkey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->openkey(), target);
  }

  // uint32 platid = 4;
  if (this->platid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->platid(), target);
  }

  // uint32 gameid = 5;
  if (this->gameid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->gameid(), target);
  }

  // uint32 zoneid = 6;
  if (this->zoneid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->zoneid(), target);
  }

  // string md5_plat_key = 7;
  if (this->md5_plat_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->md5_plat_key().data(), static_cast<int>(this->md5_plat_key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.LoginAccount.md5_plat_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->md5_plat_key(), target);
  }

  // string md5_plat_login = 8;
  if (this->md5_plat_login().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->md5_plat_login().data(), static_cast<int>(this->md5_plat_login().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.LoginAccount.md5_plat_login");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->md5_plat_login(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.LoginAccount)
  return target;
}

size_t LoginAccount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.LoginAccount)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string account = 1;
  if (this->account().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->account());
  }

  // string openkey = 3;
  if (this->openkey().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->openkey());
  }

  // string md5_plat_key = 7;
  if (this->md5_plat_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->md5_plat_key());
  }

  // string md5_plat_login = 8;
  if (this->md5_plat_login().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->md5_plat_login());
  }

  // uint64 uid = 2;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->uid());
  }

  // uint32 platid = 4;
  if (this->platid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->platid());
  }

  // uint32 gameid = 5;
  if (this->gameid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());
  }

  // uint32 zoneid = 6;
  if (this->zoneid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->zoneid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginAccount::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.LoginAccount)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginAccount* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginAccount>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.LoginAccount)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.LoginAccount)
    MergeFrom(*source);
  }
}

void LoginAccount::MergeFrom(const LoginAccount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.LoginAccount)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.account().size() > 0) {

    account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  if (from.openkey().size() > 0) {

    openkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.openkey_);
  }
  if (from.md5_plat_key().size() > 0) {

    md5_plat_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.md5_plat_key_);
  }
  if (from.md5_plat_login().size() > 0) {

    md5_plat_login_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.md5_plat_login_);
  }
  if (from.uid() != 0) {
    set_uid(from.uid());
  }
  if (from.platid() != 0) {
    set_platid(from.platid());
  }
  if (from.gameid() != 0) {
    set_gameid(from.gameid());
  }
  if (from.zoneid() != 0) {
    set_zoneid(from.zoneid());
  }
}

void LoginAccount::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.LoginAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginAccount::CopyFrom(const LoginAccount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.LoginAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginAccount::IsInitialized() const {
  return true;
}

void LoginAccount::Swap(LoginAccount* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginAccount::InternalSwap(LoginAccount* other) {
  using std::swap;
  account_.Swap(&other->account_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  openkey_.Swap(&other->openkey_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  md5_plat_key_.Swap(&other->md5_plat_key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  md5_plat_login_.Swap(&other->md5_plat_login_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(uid_, other->uid_);
  swap(platid_, other->platid_);
  swap(gameid_, other->gameid_);
  swap(zoneid_, other->zoneid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LoginAccount::GetMetadata() const {
  protobuf_login_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_login_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void http_login_cmd::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int http_login_cmd::kDoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

http_login_cmd::http_login_cmd()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_login_5fmsg_2eproto::scc_info_http_login_cmd.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.http_login_cmd)
}
http_login_cmd::http_login_cmd(const http_login_cmd& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  do__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.do_().size() > 0) {
    do__.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.do__);
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.http_login_cmd)
}

void http_login_cmd::SharedCtor() {
  do__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

http_login_cmd::~http_login_cmd() {
  // @@protoc_insertion_point(destructor:NFMsg.http_login_cmd)
  SharedDtor();
}

void http_login_cmd::SharedDtor() {
  do__.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void http_login_cmd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* http_login_cmd::descriptor() {
  ::protobuf_login_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_login_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const http_login_cmd& http_login_cmd::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_login_5fmsg_2eproto::scc_info_http_login_cmd.base);
  return *internal_default_instance();
}


void http_login_cmd::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.http_login_cmd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  do__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool http_login_cmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.http_login_cmd)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string do = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_do_()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->do_().data(), static_cast<int>(this->do_().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NFMsg.http_login_cmd.do"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.http_login_cmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.http_login_cmd)
  return false;
#undef DO_
}

void http_login_cmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.http_login_cmd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string do = 1;
  if (this->do_().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->do_().data(), static_cast<int>(this->do_().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.http_login_cmd.do");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->do_(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.http_login_cmd)
}

::google::protobuf::uint8* http_login_cmd::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.http_login_cmd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string do = 1;
  if (this->do_().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->do_().data(), static_cast<int>(this->do_().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.http_login_cmd.do");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->do_(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.http_login_cmd)
  return target;
}

size_t http_login_cmd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.http_login_cmd)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string do = 1;
  if (this->do_().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->do_());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void http_login_cmd::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.http_login_cmd)
  GOOGLE_DCHECK_NE(&from, this);
  const http_login_cmd* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const http_login_cmd>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.http_login_cmd)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.http_login_cmd)
    MergeFrom(*source);
  }
}

void http_login_cmd::MergeFrom(const http_login_cmd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.http_login_cmd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.do_().size() > 0) {

    do__.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.do__);
  }
}

void http_login_cmd::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.http_login_cmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void http_login_cmd::CopyFrom(const http_login_cmd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.http_login_cmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool http_login_cmd::IsInitialized() const {
  return true;
}

void http_login_cmd::Swap(http_login_cmd* other) {
  if (other == this) return;
  InternalSwap(other);
}
void http_login_cmd::InternalSwap(http_login_cmd* other) {
  using std::swap;
  do__.Swap(&other->do__, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata http_login_cmd::GetMetadata() const {
  protobuf_login_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_login_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void reqeust_zone_list_data::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int reqeust_zone_list_data::kGameidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

reqeust_zone_list_data::reqeust_zone_list_data()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_login_5fmsg_2eproto::scc_info_reqeust_zone_list_data.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.reqeust_zone_list_data)
}
reqeust_zone_list_data::reqeust_zone_list_data(const reqeust_zone_list_data& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gameid_ = from.gameid_;
  // @@protoc_insertion_point(copy_constructor:NFMsg.reqeust_zone_list_data)
}

void reqeust_zone_list_data::SharedCtor() {
  gameid_ = 0u;
}

reqeust_zone_list_data::~reqeust_zone_list_data() {
  // @@protoc_insertion_point(destructor:NFMsg.reqeust_zone_list_data)
  SharedDtor();
}

void reqeust_zone_list_data::SharedDtor() {
}

void reqeust_zone_list_data::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* reqeust_zone_list_data::descriptor() {
  ::protobuf_login_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_login_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const reqeust_zone_list_data& reqeust_zone_list_data::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_login_5fmsg_2eproto::scc_info_reqeust_zone_list_data.base);
  return *internal_default_instance();
}


void reqeust_zone_list_data::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.reqeust_zone_list_data)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gameid_ = 0u;
  _internal_metadata_.Clear();
}

bool reqeust_zone_list_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.reqeust_zone_list_data)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 gameid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.reqeust_zone_list_data)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.reqeust_zone_list_data)
  return false;
#undef DO_
}

void reqeust_zone_list_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.reqeust_zone_list_data)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 gameid = 1;
  if (this->gameid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.reqeust_zone_list_data)
}

::google::protobuf::uint8* reqeust_zone_list_data::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.reqeust_zone_list_data)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 gameid = 1;
  if (this->gameid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gameid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.reqeust_zone_list_data)
  return target;
}

size_t reqeust_zone_list_data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.reqeust_zone_list_data)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 gameid = 1;
  if (this->gameid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void reqeust_zone_list_data::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.reqeust_zone_list_data)
  GOOGLE_DCHECK_NE(&from, this);
  const reqeust_zone_list_data* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const reqeust_zone_list_data>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.reqeust_zone_list_data)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.reqeust_zone_list_data)
    MergeFrom(*source);
  }
}

void reqeust_zone_list_data::MergeFrom(const reqeust_zone_list_data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.reqeust_zone_list_data)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gameid() != 0) {
    set_gameid(from.gameid());
  }
}

void reqeust_zone_list_data::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.reqeust_zone_list_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void reqeust_zone_list_data::CopyFrom(const reqeust_zone_list_data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.reqeust_zone_list_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool reqeust_zone_list_data::IsInitialized() const {
  return true;
}

void reqeust_zone_list_data::Swap(reqeust_zone_list_data* other) {
  if (other == this) return;
  InternalSwap(other);
}
void reqeust_zone_list_data::InternalSwap(reqeust_zone_list_data* other) {
  using std::swap;
  swap(gameid_, other->gameid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata reqeust_zone_list_data::GetMetadata() const {
  protobuf_login_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_login_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void reqeust_zone_list::InitAsDefaultInstance() {
  ::NFMsg::_reqeust_zone_list_default_instance_._instance.get_mutable()->data_ = const_cast< ::NFMsg::reqeust_zone_list_data*>(
      ::NFMsg::reqeust_zone_list_data::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int reqeust_zone_list::kDoFieldNumber;
const int reqeust_zone_list::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

reqeust_zone_list::reqeust_zone_list()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_login_5fmsg_2eproto::scc_info_reqeust_zone_list.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.reqeust_zone_list)
}
reqeust_zone_list::reqeust_zone_list(const reqeust_zone_list& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  do__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.do_().size() > 0) {
    do__.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.do__);
  }
  if (from.has_data()) {
    data_ = new ::NFMsg::reqeust_zone_list_data(*from.data_);
  } else {
    data_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.reqeust_zone_list)
}

void reqeust_zone_list::SharedCtor() {
  do__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_ = NULL;
}

reqeust_zone_list::~reqeust_zone_list() {
  // @@protoc_insertion_point(destructor:NFMsg.reqeust_zone_list)
  SharedDtor();
}

void reqeust_zone_list::SharedDtor() {
  do__.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete data_;
}

void reqeust_zone_list::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* reqeust_zone_list::descriptor() {
  ::protobuf_login_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_login_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const reqeust_zone_list& reqeust_zone_list::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_login_5fmsg_2eproto::scc_info_reqeust_zone_list.base);
  return *internal_default_instance();
}


void reqeust_zone_list::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.reqeust_zone_list)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  do__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && data_ != NULL) {
    delete data_;
  }
  data_ = NULL;
  _internal_metadata_.Clear();
}

bool reqeust_zone_list::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.reqeust_zone_list)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string do = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_do_()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->do_().data(), static_cast<int>(this->do_().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NFMsg.reqeust_zone_list.do"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .NFMsg.reqeust_zone_list_data data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.reqeust_zone_list)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.reqeust_zone_list)
  return false;
#undef DO_
}

void reqeust_zone_list::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.reqeust_zone_list)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string do = 1;
  if (this->do_().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->do_().data(), static_cast<int>(this->do_().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.reqeust_zone_list.do");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->do_(), output);
  }

  // .NFMsg.reqeust_zone_list_data data = 2;
  if (this->has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_data(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.reqeust_zone_list)
}

::google::protobuf::uint8* reqeust_zone_list::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.reqeust_zone_list)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string do = 1;
  if (this->do_().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->do_().data(), static_cast<int>(this->do_().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.reqeust_zone_list.do");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->do_(), target);
  }

  // .NFMsg.reqeust_zone_list_data data = 2;
  if (this->has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_data(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.reqeust_zone_list)
  return target;
}

size_t reqeust_zone_list::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.reqeust_zone_list)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string do = 1;
  if (this->do_().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->do_());
  }

  // .NFMsg.reqeust_zone_list_data data = 2;
  if (this->has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *data_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void reqeust_zone_list::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.reqeust_zone_list)
  GOOGLE_DCHECK_NE(&from, this);
  const reqeust_zone_list* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const reqeust_zone_list>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.reqeust_zone_list)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.reqeust_zone_list)
    MergeFrom(*source);
  }
}

void reqeust_zone_list::MergeFrom(const reqeust_zone_list& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.reqeust_zone_list)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.do_().size() > 0) {

    do__.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.do__);
  }
  if (from.has_data()) {
    mutable_data()->::NFMsg::reqeust_zone_list_data::MergeFrom(from.data());
  }
}

void reqeust_zone_list::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.reqeust_zone_list)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void reqeust_zone_list::CopyFrom(const reqeust_zone_list& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.reqeust_zone_list)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool reqeust_zone_list::IsInitialized() const {
  return true;
}

void reqeust_zone_list::Swap(reqeust_zone_list* other) {
  if (other == this) return;
  InternalSwap(other);
}
void reqeust_zone_list::InternalSwap(reqeust_zone_list* other) {
  using std::swap;
  do__.Swap(&other->do__, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(data_, other->data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata reqeust_zone_list::GetMetadata() const {
  protobuf_login_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_login_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void reqeust_zone_list_respone_respone_data_reqeust_zone_list_server::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int reqeust_zone_list_respone_respone_data_reqeust_zone_list_server::kGameidFieldNumber;
const int reqeust_zone_list_respone_respone_data_reqeust_zone_list_server::kGamenameFieldNumber;
const int reqeust_zone_list_respone_respone_data_reqeust_zone_list_server::kNewzoneidFieldNumber;
const int reqeust_zone_list_respone_respone_data_reqeust_zone_list_server::kOnlinenumFieldNumber;
const int reqeust_zone_list_respone_respone_data_reqeust_zone_list_server::kOpentimeFieldNumber;
const int reqeust_zone_list_respone_respone_data_reqeust_zone_list_server::kStateFieldNumber;
const int reqeust_zone_list_respone_respone_data_reqeust_zone_list_server::kZoneidFieldNumber;
const int reqeust_zone_list_respone_respone_data_reqeust_zone_list_server::kZonenameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

reqeust_zone_list_respone_respone_data_reqeust_zone_list_server::reqeust_zone_list_respone_respone_data_reqeust_zone_list_server()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_login_5fmsg_2eproto::scc_info_reqeust_zone_list_respone_respone_data_reqeust_zone_list_server.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.reqeust_zone_list_respone.respone_data.reqeust_zone_list_server)
}
reqeust_zone_list_respone_respone_data_reqeust_zone_list_server::reqeust_zone_list_respone_respone_data_reqeust_zone_list_server(const reqeust_zone_list_respone_respone_data_reqeust_zone_list_server& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gamename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.gamename().size() > 0) {
    gamename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gamename_);
  }
  opentime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.opentime().size() > 0) {
    opentime_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.opentime_);
  }
  zonename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.zonename().size() > 0) {
    zonename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.zonename_);
  }
  ::memcpy(&gameid_, &from.gameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&zoneid_) -
    reinterpret_cast<char*>(&gameid_)) + sizeof(zoneid_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.reqeust_zone_list_respone.respone_data.reqeust_zone_list_server)
}

void reqeust_zone_list_respone_respone_data_reqeust_zone_list_server::SharedCtor() {
  gamename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  opentime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zonename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&gameid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&zoneid_) -
      reinterpret_cast<char*>(&gameid_)) + sizeof(zoneid_));
}

reqeust_zone_list_respone_respone_data_reqeust_zone_list_server::~reqeust_zone_list_respone_respone_data_reqeust_zone_list_server() {
  // @@protoc_insertion_point(destructor:NFMsg.reqeust_zone_list_respone.respone_data.reqeust_zone_list_server)
  SharedDtor();
}

void reqeust_zone_list_respone_respone_data_reqeust_zone_list_server::SharedDtor() {
  gamename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  opentime_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zonename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void reqeust_zone_list_respone_respone_data_reqeust_zone_list_server::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* reqeust_zone_list_respone_respone_data_reqeust_zone_list_server::descriptor() {
  ::protobuf_login_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_login_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const reqeust_zone_list_respone_respone_data_reqeust_zone_list_server& reqeust_zone_list_respone_respone_data_reqeust_zone_list_server::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_login_5fmsg_2eproto::scc_info_reqeust_zone_list_respone_respone_data_reqeust_zone_list_server.base);
  return *internal_default_instance();
}


void reqeust_zone_list_respone_respone_data_reqeust_zone_list_server::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.reqeust_zone_list_respone.respone_data.reqeust_zone_list_server)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gamename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  opentime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zonename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&gameid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&zoneid_) -
      reinterpret_cast<char*>(&gameid_)) + sizeof(zoneid_));
  _internal_metadata_.Clear();
}

bool reqeust_zone_list_respone_respone_data_reqeust_zone_list_server::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.reqeust_zone_list_respone.respone_data.reqeust_zone_list_server)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 gameid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string gamename = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gamename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->gamename().data(), static_cast<int>(this->gamename().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NFMsg.reqeust_zone_list_respone.respone_data.reqeust_zone_list_server.gamename"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 newzoneid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &newzoneid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 onlinenum = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &onlinenum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string opentime = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_opentime()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->opentime().data(), static_cast<int>(this->opentime().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NFMsg.reqeust_zone_list_respone.respone_data.reqeust_zone_list_server.opentime"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 state = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 zoneid = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string zonename = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_zonename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->zonename().data(), static_cast<int>(this->zonename().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NFMsg.reqeust_zone_list_respone.respone_data.reqeust_zone_list_server.zonename"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.reqeust_zone_list_respone.respone_data.reqeust_zone_list_server)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.reqeust_zone_list_respone.respone_data.reqeust_zone_list_server)
  return false;
#undef DO_
}

void reqeust_zone_list_respone_respone_data_reqeust_zone_list_server::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.reqeust_zone_list_respone.respone_data.reqeust_zone_list_server)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 gameid = 1;
  if (this->gameid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // string gamename = 2;
  if (this->gamename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gamename().data(), static_cast<int>(this->gamename().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.reqeust_zone_list_respone.respone_data.reqeust_zone_list_server.gamename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->gamename(), output);
  }

  // uint32 newzoneid = 3;
  if (this->newzoneid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->newzoneid(), output);
  }

  // uint32 onlinenum = 4;
  if (this->onlinenum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->onlinenum(), output);
  }

  // string opentime = 5;
  if (this->opentime().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->opentime().data(), static_cast<int>(this->opentime().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.reqeust_zone_list_respone.respone_data.reqeust_zone_list_server.opentime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->opentime(), output);
  }

  // uint32 state = 6;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->state(), output);
  }

  // uint32 zoneid = 7;
  if (this->zoneid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->zoneid(), output);
  }

  // string zonename = 8;
  if (this->zonename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->zonename().data(), static_cast<int>(this->zonename().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.reqeust_zone_list_respone.respone_data.reqeust_zone_list_server.zonename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->zonename(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.reqeust_zone_list_respone.respone_data.reqeust_zone_list_server)
}

::google::protobuf::uint8* reqeust_zone_list_respone_respone_data_reqeust_zone_list_server::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.reqeust_zone_list_respone.respone_data.reqeust_zone_list_server)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 gameid = 1;
  if (this->gameid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gameid(), target);
  }

  // string gamename = 2;
  if (this->gamename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gamename().data(), static_cast<int>(this->gamename().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.reqeust_zone_list_respone.respone_data.reqeust_zone_list_server.gamename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->gamename(), target);
  }

  // uint32 newzoneid = 3;
  if (this->newzoneid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->newzoneid(), target);
  }

  // uint32 onlinenum = 4;
  if (this->onlinenum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->onlinenum(), target);
  }

  // string opentime = 5;
  if (this->opentime().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->opentime().data(), static_cast<int>(this->opentime().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.reqeust_zone_list_respone.respone_data.reqeust_zone_list_server.opentime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->opentime(), target);
  }

  // uint32 state = 6;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->state(), target);
  }

  // uint32 zoneid = 7;
  if (this->zoneid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->zoneid(), target);
  }

  // string zonename = 8;
  if (this->zonename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->zonename().data(), static_cast<int>(this->zonename().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.reqeust_zone_list_respone.respone_data.reqeust_zone_list_server.zonename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->zonename(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.reqeust_zone_list_respone.respone_data.reqeust_zone_list_server)
  return target;
}

size_t reqeust_zone_list_respone_respone_data_reqeust_zone_list_server::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.reqeust_zone_list_respone.respone_data.reqeust_zone_list_server)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string gamename = 2;
  if (this->gamename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gamename());
  }

  // string opentime = 5;
  if (this->opentime().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->opentime());
  }

  // string zonename = 8;
  if (this->zonename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->zonename());
  }

  // uint32 gameid = 1;
  if (this->gameid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());
  }

  // uint32 newzoneid = 3;
  if (this->newzoneid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->newzoneid());
  }

  // uint32 onlinenum = 4;
  if (this->onlinenum() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->onlinenum());
  }

  // uint32 state = 6;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->state());
  }

  // uint32 zoneid = 7;
  if (this->zoneid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->zoneid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void reqeust_zone_list_respone_respone_data_reqeust_zone_list_server::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.reqeust_zone_list_respone.respone_data.reqeust_zone_list_server)
  GOOGLE_DCHECK_NE(&from, this);
  const reqeust_zone_list_respone_respone_data_reqeust_zone_list_server* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const reqeust_zone_list_respone_respone_data_reqeust_zone_list_server>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.reqeust_zone_list_respone.respone_data.reqeust_zone_list_server)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.reqeust_zone_list_respone.respone_data.reqeust_zone_list_server)
    MergeFrom(*source);
  }
}

void reqeust_zone_list_respone_respone_data_reqeust_zone_list_server::MergeFrom(const reqeust_zone_list_respone_respone_data_reqeust_zone_list_server& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.reqeust_zone_list_respone.respone_data.reqeust_zone_list_server)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gamename().size() > 0) {

    gamename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gamename_);
  }
  if (from.opentime().size() > 0) {

    opentime_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.opentime_);
  }
  if (from.zonename().size() > 0) {

    zonename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.zonename_);
  }
  if (from.gameid() != 0) {
    set_gameid(from.gameid());
  }
  if (from.newzoneid() != 0) {
    set_newzoneid(from.newzoneid());
  }
  if (from.onlinenum() != 0) {
    set_onlinenum(from.onlinenum());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
  if (from.zoneid() != 0) {
    set_zoneid(from.zoneid());
  }
}

void reqeust_zone_list_respone_respone_data_reqeust_zone_list_server::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.reqeust_zone_list_respone.respone_data.reqeust_zone_list_server)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void reqeust_zone_list_respone_respone_data_reqeust_zone_list_server::CopyFrom(const reqeust_zone_list_respone_respone_data_reqeust_zone_list_server& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.reqeust_zone_list_respone.respone_data.reqeust_zone_list_server)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool reqeust_zone_list_respone_respone_data_reqeust_zone_list_server::IsInitialized() const {
  return true;
}

void reqeust_zone_list_respone_respone_data_reqeust_zone_list_server::Swap(reqeust_zone_list_respone_respone_data_reqeust_zone_list_server* other) {
  if (other == this) return;
  InternalSwap(other);
}
void reqeust_zone_list_respone_respone_data_reqeust_zone_list_server::InternalSwap(reqeust_zone_list_respone_respone_data_reqeust_zone_list_server* other) {
  using std::swap;
  gamename_.Swap(&other->gamename_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  opentime_.Swap(&other->opentime_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  zonename_.Swap(&other->zonename_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(gameid_, other->gameid_);
  swap(newzoneid_, other->newzoneid_);
  swap(onlinenum_, other->onlinenum_);
  swap(state_, other->state_);
  swap(zoneid_, other->zoneid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata reqeust_zone_list_respone_respone_data_reqeust_zone_list_server::GetMetadata() const {
  protobuf_login_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_login_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void reqeust_zone_list_respone_respone_data::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int reqeust_zone_list_respone_respone_data::kBestzoneidFieldNumber;
const int reqeust_zone_list_respone_respone_data::kGameidFieldNumber;
const int reqeust_zone_list_respone_respone_data::kGamenameFieldNumber;
const int reqeust_zone_list_respone_respone_data::kZoneidFieldNumber;
const int reqeust_zone_list_respone_respone_data::kZonelistFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

reqeust_zone_list_respone_respone_data::reqeust_zone_list_respone_respone_data()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_login_5fmsg_2eproto::scc_info_reqeust_zone_list_respone_respone_data.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.reqeust_zone_list_respone.respone_data)
}
reqeust_zone_list_respone_respone_data::reqeust_zone_list_respone_respone_data(const reqeust_zone_list_respone_respone_data& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      zonelist_(from.zonelist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gamename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.gamename().size() > 0) {
    gamename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gamename_);
  }
  ::memcpy(&bestzoneid_, &from.bestzoneid_,
    static_cast<size_t>(reinterpret_cast<char*>(&zoneid_) -
    reinterpret_cast<char*>(&bestzoneid_)) + sizeof(zoneid_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.reqeust_zone_list_respone.respone_data)
}

void reqeust_zone_list_respone_respone_data::SharedCtor() {
  gamename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&bestzoneid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&zoneid_) -
      reinterpret_cast<char*>(&bestzoneid_)) + sizeof(zoneid_));
}

reqeust_zone_list_respone_respone_data::~reqeust_zone_list_respone_respone_data() {
  // @@protoc_insertion_point(destructor:NFMsg.reqeust_zone_list_respone.respone_data)
  SharedDtor();
}

void reqeust_zone_list_respone_respone_data::SharedDtor() {
  gamename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void reqeust_zone_list_respone_respone_data::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* reqeust_zone_list_respone_respone_data::descriptor() {
  ::protobuf_login_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_login_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const reqeust_zone_list_respone_respone_data& reqeust_zone_list_respone_respone_data::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_login_5fmsg_2eproto::scc_info_reqeust_zone_list_respone_respone_data.base);
  return *internal_default_instance();
}


void reqeust_zone_list_respone_respone_data::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.reqeust_zone_list_respone.respone_data)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  zonelist_.Clear();
  gamename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&bestzoneid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&zoneid_) -
      reinterpret_cast<char*>(&bestzoneid_)) + sizeof(zoneid_));
  _internal_metadata_.Clear();
}

bool reqeust_zone_list_respone_respone_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.reqeust_zone_list_respone.respone_data)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 bestzoneid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bestzoneid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 gameid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string gamename = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gamename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->gamename().data(), static_cast<int>(this->gamename().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NFMsg.reqeust_zone_list_respone.respone_data.gamename"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 zoneid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NFMsg.reqeust_zone_list_respone.respone_data.reqeust_zone_list_server zonelist = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_zonelist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.reqeust_zone_list_respone.respone_data)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.reqeust_zone_list_respone.respone_data)
  return false;
#undef DO_
}

void reqeust_zone_list_respone_respone_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.reqeust_zone_list_respone.respone_data)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 bestzoneid = 1;
  if (this->bestzoneid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bestzoneid(), output);
  }

  // uint32 gameid = 2;
  if (this->gameid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gameid(), output);
  }

  // string gamename = 3;
  if (this->gamename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gamename().data(), static_cast<int>(this->gamename().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.reqeust_zone_list_respone.respone_data.gamename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->gamename(), output);
  }

  // uint32 zoneid = 4;
  if (this->zoneid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->zoneid(), output);
  }

  // repeated .NFMsg.reqeust_zone_list_respone.respone_data.reqeust_zone_list_server zonelist = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->zonelist_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->zonelist(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.reqeust_zone_list_respone.respone_data)
}

::google::protobuf::uint8* reqeust_zone_list_respone_respone_data::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.reqeust_zone_list_respone.respone_data)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 bestzoneid = 1;
  if (this->bestzoneid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bestzoneid(), target);
  }

  // uint32 gameid = 2;
  if (this->gameid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gameid(), target);
  }

  // string gamename = 3;
  if (this->gamename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gamename().data(), static_cast<int>(this->gamename().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.reqeust_zone_list_respone.respone_data.gamename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->gamename(), target);
  }

  // uint32 zoneid = 4;
  if (this->zoneid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->zoneid(), target);
  }

  // repeated .NFMsg.reqeust_zone_list_respone.respone_data.reqeust_zone_list_server zonelist = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->zonelist_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->zonelist(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.reqeust_zone_list_respone.respone_data)
  return target;
}

size_t reqeust_zone_list_respone_respone_data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.reqeust_zone_list_respone.respone_data)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .NFMsg.reqeust_zone_list_respone.respone_data.reqeust_zone_list_server zonelist = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->zonelist_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->zonelist(static_cast<int>(i)));
    }
  }

  // string gamename = 3;
  if (this->gamename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gamename());
  }

  // uint32 bestzoneid = 1;
  if (this->bestzoneid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->bestzoneid());
  }

  // uint32 gameid = 2;
  if (this->gameid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());
  }

  // uint32 zoneid = 4;
  if (this->zoneid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->zoneid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void reqeust_zone_list_respone_respone_data::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.reqeust_zone_list_respone.respone_data)
  GOOGLE_DCHECK_NE(&from, this);
  const reqeust_zone_list_respone_respone_data* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const reqeust_zone_list_respone_respone_data>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.reqeust_zone_list_respone.respone_data)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.reqeust_zone_list_respone.respone_data)
    MergeFrom(*source);
  }
}

void reqeust_zone_list_respone_respone_data::MergeFrom(const reqeust_zone_list_respone_respone_data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.reqeust_zone_list_respone.respone_data)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  zonelist_.MergeFrom(from.zonelist_);
  if (from.gamename().size() > 0) {

    gamename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gamename_);
  }
  if (from.bestzoneid() != 0) {
    set_bestzoneid(from.bestzoneid());
  }
  if (from.gameid() != 0) {
    set_gameid(from.gameid());
  }
  if (from.zoneid() != 0) {
    set_zoneid(from.zoneid());
  }
}

void reqeust_zone_list_respone_respone_data::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.reqeust_zone_list_respone.respone_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void reqeust_zone_list_respone_respone_data::CopyFrom(const reqeust_zone_list_respone_respone_data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.reqeust_zone_list_respone.respone_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool reqeust_zone_list_respone_respone_data::IsInitialized() const {
  return true;
}

void reqeust_zone_list_respone_respone_data::Swap(reqeust_zone_list_respone_respone_data* other) {
  if (other == this) return;
  InternalSwap(other);
}
void reqeust_zone_list_respone_respone_data::InternalSwap(reqeust_zone_list_respone_respone_data* other) {
  using std::swap;
  CastToBase(&zonelist_)->InternalSwap(CastToBase(&other->zonelist_));
  gamename_.Swap(&other->gamename_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(bestzoneid_, other->bestzoneid_);
  swap(gameid_, other->gameid_);
  swap(zoneid_, other->zoneid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata reqeust_zone_list_respone_respone_data::GetMetadata() const {
  protobuf_login_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_login_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void reqeust_zone_list_respone::InitAsDefaultInstance() {
  ::NFMsg::_reqeust_zone_list_respone_default_instance_._instance.get_mutable()->data_ = const_cast< ::NFMsg::reqeust_zone_list_respone_respone_data*>(
      ::NFMsg::reqeust_zone_list_respone_respone_data::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int reqeust_zone_list_respone::kDoFieldNumber;
const int reqeust_zone_list_respone::kErrorFieldNumber;
const int reqeust_zone_list_respone::kStFieldNumber;
const int reqeust_zone_list_respone::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

reqeust_zone_list_respone::reqeust_zone_list_respone()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_login_5fmsg_2eproto::scc_info_reqeust_zone_list_respone.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.reqeust_zone_list_respone)
}
reqeust_zone_list_respone::reqeust_zone_list_respone(const reqeust_zone_list_respone& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  do__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.do_().size() > 0) {
    do__.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.do__);
  }
  error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.error().size() > 0) {
    error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
  if (from.has_data()) {
    data_ = new ::NFMsg::reqeust_zone_list_respone_respone_data(*from.data_);
  } else {
    data_ = NULL;
  }
  st_ = from.st_;
  // @@protoc_insertion_point(copy_constructor:NFMsg.reqeust_zone_list_respone)
}

void reqeust_zone_list_respone::SharedCtor() {
  do__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&st_) -
      reinterpret_cast<char*>(&data_)) + sizeof(st_));
}

reqeust_zone_list_respone::~reqeust_zone_list_respone() {
  // @@protoc_insertion_point(destructor:NFMsg.reqeust_zone_list_respone)
  SharedDtor();
}

void reqeust_zone_list_respone::SharedDtor() {
  do__.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete data_;
}

void reqeust_zone_list_respone::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* reqeust_zone_list_respone::descriptor() {
  ::protobuf_login_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_login_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const reqeust_zone_list_respone& reqeust_zone_list_respone::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_login_5fmsg_2eproto::scc_info_reqeust_zone_list_respone.base);
  return *internal_default_instance();
}


void reqeust_zone_list_respone::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.reqeust_zone_list_respone)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  do__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && data_ != NULL) {
    delete data_;
  }
  data_ = NULL;
  st_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool reqeust_zone_list_respone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.reqeust_zone_list_respone)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string do = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_do_()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->do_().data(), static_cast<int>(this->do_().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NFMsg.reqeust_zone_list_respone.do"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string error = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error().data(), static_cast<int>(this->error().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NFMsg.reqeust_zone_list_respone.error"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 st = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &st_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .NFMsg.reqeust_zone_list_respone.respone_data data = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.reqeust_zone_list_respone)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.reqeust_zone_list_respone)
  return false;
#undef DO_
}

void reqeust_zone_list_respone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.reqeust_zone_list_respone)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string do = 1;
  if (this->do_().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->do_().data(), static_cast<int>(this->do_().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.reqeust_zone_list_respone.do");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->do_(), output);
  }

  // string error = 2;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), static_cast<int>(this->error().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.reqeust_zone_list_respone.error");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error(), output);
  }

  // uint64 st = 3;
  if (this->st() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->st(), output);
  }

  // .NFMsg.reqeust_zone_list_respone.respone_data data = 4;
  if (this->has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_data(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.reqeust_zone_list_respone)
}

::google::protobuf::uint8* reqeust_zone_list_respone::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.reqeust_zone_list_respone)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string do = 1;
  if (this->do_().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->do_().data(), static_cast<int>(this->do_().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.reqeust_zone_list_respone.do");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->do_(), target);
  }

  // string error = 2;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), static_cast<int>(this->error().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.reqeust_zone_list_respone.error");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error(), target);
  }

  // uint64 st = 3;
  if (this->st() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->st(), target);
  }

  // .NFMsg.reqeust_zone_list_respone.respone_data data = 4;
  if (this->has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_data(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.reqeust_zone_list_respone)
  return target;
}

size_t reqeust_zone_list_respone::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.reqeust_zone_list_respone)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string do = 1;
  if (this->do_().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->do_());
  }

  // string error = 2;
  if (this->error().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error());
  }

  // .NFMsg.reqeust_zone_list_respone.respone_data data = 4;
  if (this->has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *data_);
  }

  // uint64 st = 3;
  if (this->st() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->st());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void reqeust_zone_list_respone::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.reqeust_zone_list_respone)
  GOOGLE_DCHECK_NE(&from, this);
  const reqeust_zone_list_respone* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const reqeust_zone_list_respone>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.reqeust_zone_list_respone)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.reqeust_zone_list_respone)
    MergeFrom(*source);
  }
}

void reqeust_zone_list_respone::MergeFrom(const reqeust_zone_list_respone& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.reqeust_zone_list_respone)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.do_().size() > 0) {

    do__.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.do__);
  }
  if (from.error().size() > 0) {

    error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
  if (from.has_data()) {
    mutable_data()->::NFMsg::reqeust_zone_list_respone_respone_data::MergeFrom(from.data());
  }
  if (from.st() != 0) {
    set_st(from.st());
  }
}

void reqeust_zone_list_respone::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.reqeust_zone_list_respone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void reqeust_zone_list_respone::CopyFrom(const reqeust_zone_list_respone& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.reqeust_zone_list_respone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool reqeust_zone_list_respone::IsInitialized() const {
  return true;
}

void reqeust_zone_list_respone::Swap(reqeust_zone_list_respone* other) {
  if (other == this) return;
  InternalSwap(other);
}
void reqeust_zone_list_respone::InternalSwap(reqeust_zone_list_respone* other) {
  using std::swap;
  do__.Swap(&other->do__, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  error_.Swap(&other->error_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(data_, other->data_);
  swap(st_, other->st_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata reqeust_zone_list_respone::GetMetadata() const {
  protobuf_login_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_login_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void plat_token_login_request_request_data_request_data_platinfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int plat_token_login_request_request_data_request_data_platinfo::kAaaFieldNumber;
const int plat_token_login_request_request_data_request_data_platinfo::kSignFieldNumber;
const int plat_token_login_request_request_data_request_data_platinfo::kAccountFieldNumber;
const int plat_token_login_request_request_data_request_data_platinfo::kEmailFieldNumber;
const int plat_token_login_request_request_data_request_data_platinfo::kPlatidFieldNumber;
const int plat_token_login_request_request_data_request_data_platinfo::kGenderFieldNumber;
const int plat_token_login_request_request_data_request_data_platinfo::kNicknameFieldNumber;
const int plat_token_login_request_request_data_request_data_platinfo::kUidFieldNumber;
const int plat_token_login_request_request_data_request_data_platinfo::kGameidFieldNumber;
const int plat_token_login_request_request_data_request_data_platinfo::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

plat_token_login_request_request_data_request_data_platinfo::plat_token_login_request_request_data_request_data_platinfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_login_5fmsg_2eproto::scc_info_plat_token_login_request_request_data_request_data_platinfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.plat_token_login_request.request_data.request_data_platinfo)
}
plat_token_login_request_request_data_request_data_platinfo::plat_token_login_request_request_data_request_data_platinfo(const plat_token_login_request_request_data_request_data_platinfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sign_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sign().size() > 0) {
    sign_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sign_);
  }
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.account().size() > 0) {
    account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.email().size() > 0) {
    email_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.email_);
  }
  gender_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.gender().size() > 0) {
    gender_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gender_);
  }
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.nickname().size() > 0) {
    nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
  }
  uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.uid().size() > 0) {
    uid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uid_);
  }
  timestamp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.timestamp().size() > 0) {
    timestamp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timestamp_);
  }
  ::memcpy(&aaa_, &from.aaa_,
    static_cast<size_t>(reinterpret_cast<char*>(&gameid_) -
    reinterpret_cast<char*>(&aaa_)) + sizeof(gameid_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.plat_token_login_request.request_data.request_data_platinfo)
}

void plat_token_login_request_request_data_request_data_platinfo::SharedCtor() {
  sign_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gender_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&aaa_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gameid_) -
      reinterpret_cast<char*>(&aaa_)) + sizeof(gameid_));
}

plat_token_login_request_request_data_request_data_platinfo::~plat_token_login_request_request_data_request_data_platinfo() {
  // @@protoc_insertion_point(destructor:NFMsg.plat_token_login_request.request_data.request_data_platinfo)
  SharedDtor();
}

void plat_token_login_request_request_data_request_data_platinfo::SharedDtor() {
  sign_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  email_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gender_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void plat_token_login_request_request_data_request_data_platinfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* plat_token_login_request_request_data_request_data_platinfo::descriptor() {
  ::protobuf_login_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_login_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const plat_token_login_request_request_data_request_data_platinfo& plat_token_login_request_request_data_request_data_platinfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_login_5fmsg_2eproto::scc_info_plat_token_login_request_request_data_request_data_platinfo.base);
  return *internal_default_instance();
}


void plat_token_login_request_request_data_request_data_platinfo::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.plat_token_login_request.request_data.request_data_platinfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sign_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gender_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&aaa_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gameid_) -
      reinterpret_cast<char*>(&aaa_)) + sizeof(gameid_));
  _internal_metadata_.Clear();
}

bool plat_token_login_request_request_data_request_data_platinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.plat_token_login_request.request_data.request_data_platinfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 aaa = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &aaa_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sign = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sign()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sign().data(), static_cast<int>(this->sign().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NFMsg.plat_token_login_request.request_data.request_data_platinfo.sign"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string account = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->account().data(), static_cast<int>(this->account().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NFMsg.plat_token_login_request.request_data.request_data_platinfo.account"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string email = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->email().data(), static_cast<int>(this->email().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NFMsg.plat_token_login_request.request_data.request_data_platinfo.email"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 platid = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &platid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string gender = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gender()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->gender().data(), static_cast<int>(this->gender().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NFMsg.plat_token_login_request.request_data.request_data_platinfo.gender"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string nickname = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->nickname().data(), static_cast<int>(this->nickname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NFMsg.plat_token_login_request.request_data.request_data_platinfo.nickname"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string uid = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uid().data(), static_cast<int>(this->uid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NFMsg.plat_token_login_request.request_data.request_data_platinfo.uid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 gameid = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string timestamp = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timestamp()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->timestamp().data(), static_cast<int>(this->timestamp().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NFMsg.plat_token_login_request.request_data.request_data_platinfo.timestamp"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.plat_token_login_request.request_data.request_data_platinfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.plat_token_login_request.request_data.request_data_platinfo)
  return false;
#undef DO_
}

void plat_token_login_request_request_data_request_data_platinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.plat_token_login_request.request_data.request_data_platinfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 aaa = 1;
  if (this->aaa() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->aaa(), output);
  }

  // string sign = 2;
  if (this->sign().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sign().data(), static_cast<int>(this->sign().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.plat_token_login_request.request_data.request_data_platinfo.sign");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->sign(), output);
  }

  // string account = 3;
  if (this->account().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account().data(), static_cast<int>(this->account().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.plat_token_login_request.request_data.request_data_platinfo.account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->account(), output);
  }

  // string email = 4;
  if (this->email().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->email().data(), static_cast<int>(this->email().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.plat_token_login_request.request_data.request_data_platinfo.email");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->email(), output);
  }

  // uint32 platid = 5;
  if (this->platid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->platid(), output);
  }

  // string gender = 6;
  if (this->gender().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gender().data(), static_cast<int>(this->gender().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.plat_token_login_request.request_data.request_data_platinfo.gender");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->gender(), output);
  }

  // string nickname = 7;
  if (this->nickname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nickname().data(), static_cast<int>(this->nickname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.plat_token_login_request.request_data.request_data_platinfo.nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->nickname(), output);
  }

  // string uid = 8;
  if (this->uid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uid().data(), static_cast<int>(this->uid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.plat_token_login_request.request_data.request_data_platinfo.uid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->uid(), output);
  }

  // uint32 gameid = 9;
  if (this->gameid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->gameid(), output);
  }

  // string timestamp = 10;
  if (this->timestamp().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->timestamp().data(), static_cast<int>(this->timestamp().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.plat_token_login_request.request_data.request_data_platinfo.timestamp");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->timestamp(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.plat_token_login_request.request_data.request_data_platinfo)
}

::google::protobuf::uint8* plat_token_login_request_request_data_request_data_platinfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.plat_token_login_request.request_data.request_data_platinfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 aaa = 1;
  if (this->aaa() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->aaa(), target);
  }

  // string sign = 2;
  if (this->sign().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sign().data(), static_cast<int>(this->sign().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.plat_token_login_request.request_data.request_data_platinfo.sign");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sign(), target);
  }

  // string account = 3;
  if (this->account().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account().data(), static_cast<int>(this->account().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.plat_token_login_request.request_data.request_data_platinfo.account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->account(), target);
  }

  // string email = 4;
  if (this->email().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->email().data(), static_cast<int>(this->email().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.plat_token_login_request.request_data.request_data_platinfo.email");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->email(), target);
  }

  // uint32 platid = 5;
  if (this->platid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->platid(), target);
  }

  // string gender = 6;
  if (this->gender().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gender().data(), static_cast<int>(this->gender().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.plat_token_login_request.request_data.request_data_platinfo.gender");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->gender(), target);
  }

  // string nickname = 7;
  if (this->nickname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nickname().data(), static_cast<int>(this->nickname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.plat_token_login_request.request_data.request_data_platinfo.nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->nickname(), target);
  }

  // string uid = 8;
  if (this->uid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uid().data(), static_cast<int>(this->uid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.plat_token_login_request.request_data.request_data_platinfo.uid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->uid(), target);
  }

  // uint32 gameid = 9;
  if (this->gameid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->gameid(), target);
  }

  // string timestamp = 10;
  if (this->timestamp().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->timestamp().data(), static_cast<int>(this->timestamp().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.plat_token_login_request.request_data.request_data_platinfo.timestamp");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->timestamp(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.plat_token_login_request.request_data.request_data_platinfo)
  return target;
}

size_t plat_token_login_request_request_data_request_data_platinfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.plat_token_login_request.request_data.request_data_platinfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string sign = 2;
  if (this->sign().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sign());
  }

  // string account = 3;
  if (this->account().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->account());
  }

  // string email = 4;
  if (this->email().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->email());
  }

  // string gender = 6;
  if (this->gender().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gender());
  }

  // string nickname = 7;
  if (this->nickname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nickname());
  }

  // string uid = 8;
  if (this->uid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uid());
  }

  // string timestamp = 10;
  if (this->timestamp().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->timestamp());
  }

  // uint32 aaa = 1;
  if (this->aaa() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->aaa());
  }

  // uint32 platid = 5;
  if (this->platid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->platid());
  }

  // uint32 gameid = 9;
  if (this->gameid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void plat_token_login_request_request_data_request_data_platinfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.plat_token_login_request.request_data.request_data_platinfo)
  GOOGLE_DCHECK_NE(&from, this);
  const plat_token_login_request_request_data_request_data_platinfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const plat_token_login_request_request_data_request_data_platinfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.plat_token_login_request.request_data.request_data_platinfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.plat_token_login_request.request_data.request_data_platinfo)
    MergeFrom(*source);
  }
}

void plat_token_login_request_request_data_request_data_platinfo::MergeFrom(const plat_token_login_request_request_data_request_data_platinfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.plat_token_login_request.request_data.request_data_platinfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sign().size() > 0) {

    sign_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sign_);
  }
  if (from.account().size() > 0) {

    account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  if (from.email().size() > 0) {

    email_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.email_);
  }
  if (from.gender().size() > 0) {

    gender_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gender_);
  }
  if (from.nickname().size() > 0) {

    nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
  }
  if (from.uid().size() > 0) {

    uid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uid_);
  }
  if (from.timestamp().size() > 0) {

    timestamp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timestamp_);
  }
  if (from.aaa() != 0) {
    set_aaa(from.aaa());
  }
  if (from.platid() != 0) {
    set_platid(from.platid());
  }
  if (from.gameid() != 0) {
    set_gameid(from.gameid());
  }
}

void plat_token_login_request_request_data_request_data_platinfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.plat_token_login_request.request_data.request_data_platinfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void plat_token_login_request_request_data_request_data_platinfo::CopyFrom(const plat_token_login_request_request_data_request_data_platinfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.plat_token_login_request.request_data.request_data_platinfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool plat_token_login_request_request_data_request_data_platinfo::IsInitialized() const {
  return true;
}

void plat_token_login_request_request_data_request_data_platinfo::Swap(plat_token_login_request_request_data_request_data_platinfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void plat_token_login_request_request_data_request_data_platinfo::InternalSwap(plat_token_login_request_request_data_request_data_platinfo* other) {
  using std::swap;
  sign_.Swap(&other->sign_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  account_.Swap(&other->account_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  email_.Swap(&other->email_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  gender_.Swap(&other->gender_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  nickname_.Swap(&other->nickname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  uid_.Swap(&other->uid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  timestamp_.Swap(&other->timestamp_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(aaa_, other->aaa_);
  swap(platid_, other->platid_);
  swap(gameid_, other->gameid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata plat_token_login_request_request_data_request_data_platinfo::GetMetadata() const {
  protobuf_login_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_login_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void plat_token_login_request_request_data::InitAsDefaultInstance() {
  ::NFMsg::_plat_token_login_request_request_data_default_instance_._instance.get_mutable()->platinfo_ = const_cast< ::NFMsg::plat_token_login_request_request_data_request_data_platinfo*>(
      ::NFMsg::plat_token_login_request_request_data_request_data_platinfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int plat_token_login_request_request_data::kPlatinfoFieldNumber;
const int plat_token_login_request_request_data::kGameidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

plat_token_login_request_request_data::plat_token_login_request_request_data()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_login_5fmsg_2eproto::scc_info_plat_token_login_request_request_data.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.plat_token_login_request.request_data)
}
plat_token_login_request_request_data::plat_token_login_request_request_data(const plat_token_login_request_request_data& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_platinfo()) {
    platinfo_ = new ::NFMsg::plat_token_login_request_request_data_request_data_platinfo(*from.platinfo_);
  } else {
    platinfo_ = NULL;
  }
  gameid_ = from.gameid_;
  // @@protoc_insertion_point(copy_constructor:NFMsg.plat_token_login_request.request_data)
}

void plat_token_login_request_request_data::SharedCtor() {
  ::memset(&platinfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gameid_) -
      reinterpret_cast<char*>(&platinfo_)) + sizeof(gameid_));
}

plat_token_login_request_request_data::~plat_token_login_request_request_data() {
  // @@protoc_insertion_point(destructor:NFMsg.plat_token_login_request.request_data)
  SharedDtor();
}

void plat_token_login_request_request_data::SharedDtor() {
  if (this != internal_default_instance()) delete platinfo_;
}

void plat_token_login_request_request_data::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* plat_token_login_request_request_data::descriptor() {
  ::protobuf_login_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_login_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const plat_token_login_request_request_data& plat_token_login_request_request_data::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_login_5fmsg_2eproto::scc_info_plat_token_login_request_request_data.base);
  return *internal_default_instance();
}


void plat_token_login_request_request_data::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.plat_token_login_request.request_data)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && platinfo_ != NULL) {
    delete platinfo_;
  }
  platinfo_ = NULL;
  gameid_ = 0u;
  _internal_metadata_.Clear();
}

bool plat_token_login_request_request_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.plat_token_login_request.request_data)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .NFMsg.plat_token_login_request.request_data.request_data_platinfo platinfo = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_platinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 gameid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.plat_token_login_request.request_data)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.plat_token_login_request.request_data)
  return false;
#undef DO_
}

void plat_token_login_request_request_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.plat_token_login_request.request_data)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.plat_token_login_request.request_data.request_data_platinfo platinfo = 1;
  if (this->has_platinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_platinfo(), output);
  }

  // uint32 gameid = 2;
  if (this->gameid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gameid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.plat_token_login_request.request_data)
}

::google::protobuf::uint8* plat_token_login_request_request_data::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.plat_token_login_request.request_data)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.plat_token_login_request.request_data.request_data_platinfo platinfo = 1;
  if (this->has_platinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_platinfo(), deterministic, target);
  }

  // uint32 gameid = 2;
  if (this->gameid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gameid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.plat_token_login_request.request_data)
  return target;
}

size_t plat_token_login_request_request_data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.plat_token_login_request.request_data)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .NFMsg.plat_token_login_request.request_data.request_data_platinfo platinfo = 1;
  if (this->has_platinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *platinfo_);
  }

  // uint32 gameid = 2;
  if (this->gameid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void plat_token_login_request_request_data::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.plat_token_login_request.request_data)
  GOOGLE_DCHECK_NE(&from, this);
  const plat_token_login_request_request_data* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const plat_token_login_request_request_data>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.plat_token_login_request.request_data)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.plat_token_login_request.request_data)
    MergeFrom(*source);
  }
}

void plat_token_login_request_request_data::MergeFrom(const plat_token_login_request_request_data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.plat_token_login_request.request_data)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_platinfo()) {
    mutable_platinfo()->::NFMsg::plat_token_login_request_request_data_request_data_platinfo::MergeFrom(from.platinfo());
  }
  if (from.gameid() != 0) {
    set_gameid(from.gameid());
  }
}

void plat_token_login_request_request_data::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.plat_token_login_request.request_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void plat_token_login_request_request_data::CopyFrom(const plat_token_login_request_request_data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.plat_token_login_request.request_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool plat_token_login_request_request_data::IsInitialized() const {
  return true;
}

void plat_token_login_request_request_data::Swap(plat_token_login_request_request_data* other) {
  if (other == this) return;
  InternalSwap(other);
}
void plat_token_login_request_request_data::InternalSwap(plat_token_login_request_request_data* other) {
  using std::swap;
  swap(platinfo_, other->platinfo_);
  swap(gameid_, other->gameid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata plat_token_login_request_request_data::GetMetadata() const {
  protobuf_login_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_login_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void plat_token_login_request::InitAsDefaultInstance() {
  ::NFMsg::_plat_token_login_request_default_instance_._instance.get_mutable()->data_ = const_cast< ::NFMsg::plat_token_login_request_request_data*>(
      ::NFMsg::plat_token_login_request_request_data::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int plat_token_login_request::kDoFieldNumber;
const int plat_token_login_request::kDataFieldNumber;
const int plat_token_login_request::kGameidFieldNumber;
const int plat_token_login_request::kZoneidFieldNumber;
const int plat_token_login_request::kUnigamePlatTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

plat_token_login_request::plat_token_login_request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_login_5fmsg_2eproto::scc_info_plat_token_login_request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.plat_token_login_request)
}
plat_token_login_request::plat_token_login_request(const plat_token_login_request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  do__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.do_().size() > 0) {
    do__.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.do__);
  }
  if (from.has_data()) {
    data_ = new ::NFMsg::plat_token_login_request_request_data(*from.data_);
  } else {
    data_ = NULL;
  }
  ::memcpy(&gameid_, &from.gameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&unigame_plat_timestamp_) -
    reinterpret_cast<char*>(&gameid_)) + sizeof(unigame_plat_timestamp_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.plat_token_login_request)
}

void plat_token_login_request::SharedCtor() {
  do__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unigame_plat_timestamp_) -
      reinterpret_cast<char*>(&data_)) + sizeof(unigame_plat_timestamp_));
}

plat_token_login_request::~plat_token_login_request() {
  // @@protoc_insertion_point(destructor:NFMsg.plat_token_login_request)
  SharedDtor();
}

void plat_token_login_request::SharedDtor() {
  do__.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete data_;
}

void plat_token_login_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* plat_token_login_request::descriptor() {
  ::protobuf_login_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_login_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const plat_token_login_request& plat_token_login_request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_login_5fmsg_2eproto::scc_info_plat_token_login_request.base);
  return *internal_default_instance();
}


void plat_token_login_request::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.plat_token_login_request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  do__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && data_ != NULL) {
    delete data_;
  }
  data_ = NULL;
  ::memset(&gameid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unigame_plat_timestamp_) -
      reinterpret_cast<char*>(&gameid_)) + sizeof(unigame_plat_timestamp_));
  _internal_metadata_.Clear();
}

bool plat_token_login_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.plat_token_login_request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string do = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_do_()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->do_().data(), static_cast<int>(this->do_().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NFMsg.plat_token_login_request.do"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .NFMsg.plat_token_login_request.request_data data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 gameid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 zoneid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 unigame_plat_timestamp = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &unigame_plat_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.plat_token_login_request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.plat_token_login_request)
  return false;
#undef DO_
}

void plat_token_login_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.plat_token_login_request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string do = 1;
  if (this->do_().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->do_().data(), static_cast<int>(this->do_().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.plat_token_login_request.do");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->do_(), output);
  }

  // .NFMsg.plat_token_login_request.request_data data = 2;
  if (this->has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_data(), output);
  }

  // uint32 gameid = 3;
  if (this->gameid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->gameid(), output);
  }

  // uint32 zoneid = 4;
  if (this->zoneid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->zoneid(), output);
  }

  // uint64 unigame_plat_timestamp = 5;
  if (this->unigame_plat_timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->unigame_plat_timestamp(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.plat_token_login_request)
}

::google::protobuf::uint8* plat_token_login_request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.plat_token_login_request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string do = 1;
  if (this->do_().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->do_().data(), static_cast<int>(this->do_().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.plat_token_login_request.do");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->do_(), target);
  }

  // .NFMsg.plat_token_login_request.request_data data = 2;
  if (this->has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_data(), deterministic, target);
  }

  // uint32 gameid = 3;
  if (this->gameid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->gameid(), target);
  }

  // uint32 zoneid = 4;
  if (this->zoneid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->zoneid(), target);
  }

  // uint64 unigame_plat_timestamp = 5;
  if (this->unigame_plat_timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->unigame_plat_timestamp(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.plat_token_login_request)
  return target;
}

size_t plat_token_login_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.plat_token_login_request)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string do = 1;
  if (this->do_().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->do_());
  }

  // .NFMsg.plat_token_login_request.request_data data = 2;
  if (this->has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *data_);
  }

  // uint32 gameid = 3;
  if (this->gameid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());
  }

  // uint32 zoneid = 4;
  if (this->zoneid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->zoneid());
  }

  // uint64 unigame_plat_timestamp = 5;
  if (this->unigame_plat_timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->unigame_plat_timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void plat_token_login_request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.plat_token_login_request)
  GOOGLE_DCHECK_NE(&from, this);
  const plat_token_login_request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const plat_token_login_request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.plat_token_login_request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.plat_token_login_request)
    MergeFrom(*source);
  }
}

void plat_token_login_request::MergeFrom(const plat_token_login_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.plat_token_login_request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.do_().size() > 0) {

    do__.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.do__);
  }
  if (from.has_data()) {
    mutable_data()->::NFMsg::plat_token_login_request_request_data::MergeFrom(from.data());
  }
  if (from.gameid() != 0) {
    set_gameid(from.gameid());
  }
  if (from.zoneid() != 0) {
    set_zoneid(from.zoneid());
  }
  if (from.unigame_plat_timestamp() != 0) {
    set_unigame_plat_timestamp(from.unigame_plat_timestamp());
  }
}

void plat_token_login_request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.plat_token_login_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void plat_token_login_request::CopyFrom(const plat_token_login_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.plat_token_login_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool plat_token_login_request::IsInitialized() const {
  return true;
}

void plat_token_login_request::Swap(plat_token_login_request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void plat_token_login_request::InternalSwap(plat_token_login_request* other) {
  using std::swap;
  do__.Swap(&other->do__, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(data_, other->data_);
  swap(gameid_, other->gameid_);
  swap(zoneid_, other->zoneid_);
  swap(unigame_plat_timestamp_, other->unigame_plat_timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata plat_token_login_request::GetMetadata() const {
  protobuf_login_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_login_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void plat_token_login_respone_respone_data_respone_data_platinfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int plat_token_login_respone_respone_data_respone_data_platinfo::kAaaFieldNumber;
const int plat_token_login_respone_respone_data_respone_data_platinfo::kSignFieldNumber;
const int plat_token_login_respone_respone_data_respone_data_platinfo::kAccountFieldNumber;
const int plat_token_login_respone_respone_data_respone_data_platinfo::kEmailFieldNumber;
const int plat_token_login_respone_respone_data_respone_data_platinfo::kPlatidFieldNumber;
const int plat_token_login_respone_respone_data_respone_data_platinfo::kGenderFieldNumber;
const int plat_token_login_respone_respone_data_respone_data_platinfo::kNicknameFieldNumber;
const int plat_token_login_respone_respone_data_respone_data_platinfo::kUidFieldNumber;
const int plat_token_login_respone_respone_data_respone_data_platinfo::kGameidFieldNumber;
const int plat_token_login_respone_respone_data_respone_data_platinfo::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

plat_token_login_respone_respone_data_respone_data_platinfo::plat_token_login_respone_respone_data_respone_data_platinfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_login_5fmsg_2eproto::scc_info_plat_token_login_respone_respone_data_respone_data_platinfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.plat_token_login_respone.respone_data.respone_data_platinfo)
}
plat_token_login_respone_respone_data_respone_data_platinfo::plat_token_login_respone_respone_data_respone_data_platinfo(const plat_token_login_respone_respone_data_respone_data_platinfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sign_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sign().size() > 0) {
    sign_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sign_);
  }
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.account().size() > 0) {
    account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.email().size() > 0) {
    email_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.email_);
  }
  gender_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.gender().size() > 0) {
    gender_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gender_);
  }
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.nickname().size() > 0) {
    nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
  }
  uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.uid().size() > 0) {
    uid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uid_);
  }
  timestamp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.timestamp().size() > 0) {
    timestamp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timestamp_);
  }
  ::memcpy(&aaa_, &from.aaa_,
    static_cast<size_t>(reinterpret_cast<char*>(&gameid_) -
    reinterpret_cast<char*>(&aaa_)) + sizeof(gameid_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.plat_token_login_respone.respone_data.respone_data_platinfo)
}

void plat_token_login_respone_respone_data_respone_data_platinfo::SharedCtor() {
  sign_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gender_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&aaa_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gameid_) -
      reinterpret_cast<char*>(&aaa_)) + sizeof(gameid_));
}

plat_token_login_respone_respone_data_respone_data_platinfo::~plat_token_login_respone_respone_data_respone_data_platinfo() {
  // @@protoc_insertion_point(destructor:NFMsg.plat_token_login_respone.respone_data.respone_data_platinfo)
  SharedDtor();
}

void plat_token_login_respone_respone_data_respone_data_platinfo::SharedDtor() {
  sign_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  email_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gender_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void plat_token_login_respone_respone_data_respone_data_platinfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* plat_token_login_respone_respone_data_respone_data_platinfo::descriptor() {
  ::protobuf_login_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_login_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const plat_token_login_respone_respone_data_respone_data_platinfo& plat_token_login_respone_respone_data_respone_data_platinfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_login_5fmsg_2eproto::scc_info_plat_token_login_respone_respone_data_respone_data_platinfo.base);
  return *internal_default_instance();
}


void plat_token_login_respone_respone_data_respone_data_platinfo::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.plat_token_login_respone.respone_data.respone_data_platinfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sign_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gender_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&aaa_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gameid_) -
      reinterpret_cast<char*>(&aaa_)) + sizeof(gameid_));
  _internal_metadata_.Clear();
}

bool plat_token_login_respone_respone_data_respone_data_platinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.plat_token_login_respone.respone_data.respone_data_platinfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 aaa = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &aaa_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sign = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sign()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sign().data(), static_cast<int>(this->sign().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NFMsg.plat_token_login_respone.respone_data.respone_data_platinfo.sign"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string account = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->account().data(), static_cast<int>(this->account().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NFMsg.plat_token_login_respone.respone_data.respone_data_platinfo.account"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string email = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->email().data(), static_cast<int>(this->email().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NFMsg.plat_token_login_respone.respone_data.respone_data_platinfo.email"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 platid = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &platid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string gender = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gender()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->gender().data(), static_cast<int>(this->gender().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NFMsg.plat_token_login_respone.respone_data.respone_data_platinfo.gender"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string nickname = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->nickname().data(), static_cast<int>(this->nickname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NFMsg.plat_token_login_respone.respone_data.respone_data_platinfo.nickname"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string uid = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uid().data(), static_cast<int>(this->uid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NFMsg.plat_token_login_respone.respone_data.respone_data_platinfo.uid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 gameid = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string timestamp = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timestamp()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->timestamp().data(), static_cast<int>(this->timestamp().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NFMsg.plat_token_login_respone.respone_data.respone_data_platinfo.timestamp"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.plat_token_login_respone.respone_data.respone_data_platinfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.plat_token_login_respone.respone_data.respone_data_platinfo)
  return false;
#undef DO_
}

void plat_token_login_respone_respone_data_respone_data_platinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.plat_token_login_respone.respone_data.respone_data_platinfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 aaa = 1;
  if (this->aaa() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->aaa(), output);
  }

  // string sign = 2;
  if (this->sign().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sign().data(), static_cast<int>(this->sign().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.plat_token_login_respone.respone_data.respone_data_platinfo.sign");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->sign(), output);
  }

  // string account = 3;
  if (this->account().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account().data(), static_cast<int>(this->account().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.plat_token_login_respone.respone_data.respone_data_platinfo.account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->account(), output);
  }

  // string email = 4;
  if (this->email().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->email().data(), static_cast<int>(this->email().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.plat_token_login_respone.respone_data.respone_data_platinfo.email");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->email(), output);
  }

  // uint32 platid = 5;
  if (this->platid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->platid(), output);
  }

  // string gender = 6;
  if (this->gender().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gender().data(), static_cast<int>(this->gender().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.plat_token_login_respone.respone_data.respone_data_platinfo.gender");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->gender(), output);
  }

  // string nickname = 7;
  if (this->nickname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nickname().data(), static_cast<int>(this->nickname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.plat_token_login_respone.respone_data.respone_data_platinfo.nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->nickname(), output);
  }

  // string uid = 8;
  if (this->uid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uid().data(), static_cast<int>(this->uid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.plat_token_login_respone.respone_data.respone_data_platinfo.uid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->uid(), output);
  }

  // uint32 gameid = 9;
  if (this->gameid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->gameid(), output);
  }

  // string timestamp = 10;
  if (this->timestamp().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->timestamp().data(), static_cast<int>(this->timestamp().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.plat_token_login_respone.respone_data.respone_data_platinfo.timestamp");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->timestamp(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.plat_token_login_respone.respone_data.respone_data_platinfo)
}

::google::protobuf::uint8* plat_token_login_respone_respone_data_respone_data_platinfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.plat_token_login_respone.respone_data.respone_data_platinfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 aaa = 1;
  if (this->aaa() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->aaa(), target);
  }

  // string sign = 2;
  if (this->sign().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sign().data(), static_cast<int>(this->sign().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.plat_token_login_respone.respone_data.respone_data_platinfo.sign");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sign(), target);
  }

  // string account = 3;
  if (this->account().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account().data(), static_cast<int>(this->account().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.plat_token_login_respone.respone_data.respone_data_platinfo.account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->account(), target);
  }

  // string email = 4;
  if (this->email().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->email().data(), static_cast<int>(this->email().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.plat_token_login_respone.respone_data.respone_data_platinfo.email");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->email(), target);
  }

  // uint32 platid = 5;
  if (this->platid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->platid(), target);
  }

  // string gender = 6;
  if (this->gender().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gender().data(), static_cast<int>(this->gender().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.plat_token_login_respone.respone_data.respone_data_platinfo.gender");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->gender(), target);
  }

  // string nickname = 7;
  if (this->nickname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nickname().data(), static_cast<int>(this->nickname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.plat_token_login_respone.respone_data.respone_data_platinfo.nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->nickname(), target);
  }

  // string uid = 8;
  if (this->uid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uid().data(), static_cast<int>(this->uid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.plat_token_login_respone.respone_data.respone_data_platinfo.uid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->uid(), target);
  }

  // uint32 gameid = 9;
  if (this->gameid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->gameid(), target);
  }

  // string timestamp = 10;
  if (this->timestamp().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->timestamp().data(), static_cast<int>(this->timestamp().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.plat_token_login_respone.respone_data.respone_data_platinfo.timestamp");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->timestamp(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.plat_token_login_respone.respone_data.respone_data_platinfo)
  return target;
}

size_t plat_token_login_respone_respone_data_respone_data_platinfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.plat_token_login_respone.respone_data.respone_data_platinfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string sign = 2;
  if (this->sign().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sign());
  }

  // string account = 3;
  if (this->account().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->account());
  }

  // string email = 4;
  if (this->email().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->email());
  }

  // string gender = 6;
  if (this->gender().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gender());
  }

  // string nickname = 7;
  if (this->nickname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nickname());
  }

  // string uid = 8;
  if (this->uid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uid());
  }

  // string timestamp = 10;
  if (this->timestamp().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->timestamp());
  }

  // uint32 aaa = 1;
  if (this->aaa() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->aaa());
  }

  // uint32 platid = 5;
  if (this->platid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->platid());
  }

  // uint32 gameid = 9;
  if (this->gameid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void plat_token_login_respone_respone_data_respone_data_platinfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.plat_token_login_respone.respone_data.respone_data_platinfo)
  GOOGLE_DCHECK_NE(&from, this);
  const plat_token_login_respone_respone_data_respone_data_platinfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const plat_token_login_respone_respone_data_respone_data_platinfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.plat_token_login_respone.respone_data.respone_data_platinfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.plat_token_login_respone.respone_data.respone_data_platinfo)
    MergeFrom(*source);
  }
}

void plat_token_login_respone_respone_data_respone_data_platinfo::MergeFrom(const plat_token_login_respone_respone_data_respone_data_platinfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.plat_token_login_respone.respone_data.respone_data_platinfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sign().size() > 0) {

    sign_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sign_);
  }
  if (from.account().size() > 0) {

    account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  if (from.email().size() > 0) {

    email_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.email_);
  }
  if (from.gender().size() > 0) {

    gender_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gender_);
  }
  if (from.nickname().size() > 0) {

    nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
  }
  if (from.uid().size() > 0) {

    uid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uid_);
  }
  if (from.timestamp().size() > 0) {

    timestamp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timestamp_);
  }
  if (from.aaa() != 0) {
    set_aaa(from.aaa());
  }
  if (from.platid() != 0) {
    set_platid(from.platid());
  }
  if (from.gameid() != 0) {
    set_gameid(from.gameid());
  }
}

void plat_token_login_respone_respone_data_respone_data_platinfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.plat_token_login_respone.respone_data.respone_data_platinfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void plat_token_login_respone_respone_data_respone_data_platinfo::CopyFrom(const plat_token_login_respone_respone_data_respone_data_platinfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.plat_token_login_respone.respone_data.respone_data_platinfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool plat_token_login_respone_respone_data_respone_data_platinfo::IsInitialized() const {
  return true;
}

void plat_token_login_respone_respone_data_respone_data_platinfo::Swap(plat_token_login_respone_respone_data_respone_data_platinfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void plat_token_login_respone_respone_data_respone_data_platinfo::InternalSwap(plat_token_login_respone_respone_data_respone_data_platinfo* other) {
  using std::swap;
  sign_.Swap(&other->sign_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  account_.Swap(&other->account_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  email_.Swap(&other->email_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  gender_.Swap(&other->gender_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  nickname_.Swap(&other->nickname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  uid_.Swap(&other->uid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  timestamp_.Swap(&other->timestamp_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(aaa_, other->aaa_);
  swap(platid_, other->platid_);
  swap(gameid_, other->gameid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata plat_token_login_respone_respone_data_respone_data_platinfo::GetMetadata() const {
  protobuf_login_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_login_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void plat_token_login_respone_respone_data::InitAsDefaultInstance() {
  ::NFMsg::_plat_token_login_respone_respone_data_default_instance_._instance.get_mutable()->platinfo_ = const_cast< ::NFMsg::plat_token_login_respone_respone_data_respone_data_platinfo*>(
      ::NFMsg::plat_token_login_respone_respone_data_respone_data_platinfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int plat_token_login_respone_respone_data::kGameidFieldNumber;
const int plat_token_login_respone_respone_data::kSidFieldNumber;
const int plat_token_login_respone_respone_data::kTimezoneNameFieldNumber;
const int plat_token_login_respone_respone_data::kTimezoneOffsetFieldNumber;
const int plat_token_login_respone_respone_data::kUidFieldNumber;
const int plat_token_login_respone_respone_data::kUnigamePlatKeyFieldNumber;
const int plat_token_login_respone_respone_data::kUnigamePlatLoginFieldNumber;
const int plat_token_login_respone_respone_data::kUnigamePlatLoginLifeFieldNumber;
const int plat_token_login_respone_respone_data::kPlatinfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

plat_token_login_respone_respone_data::plat_token_login_respone_respone_data()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_login_5fmsg_2eproto::scc_info_plat_token_login_respone_respone_data.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.plat_token_login_respone.respone_data)
}
plat_token_login_respone_respone_data::plat_token_login_respone_respone_data(const plat_token_login_respone_respone_data& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sid().size() > 0) {
    sid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sid_);
  }
  timezone_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.timezone_name().size() > 0) {
    timezone_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timezone_name_);
  }
  uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.uid().size() > 0) {
    uid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uid_);
  }
  unigame_plat_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.unigame_plat_key().size() > 0) {
    unigame_plat_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.unigame_plat_key_);
  }
  unigame_plat_login_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.unigame_plat_login().size() > 0) {
    unigame_plat_login_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.unigame_plat_login_);
  }
  if (from.has_platinfo()) {
    platinfo_ = new ::NFMsg::plat_token_login_respone_respone_data_respone_data_platinfo(*from.platinfo_);
  } else {
    platinfo_ = NULL;
  }
  ::memcpy(&gameid_, &from.gameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&unigame_plat_login_life_) -
    reinterpret_cast<char*>(&gameid_)) + sizeof(unigame_plat_login_life_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.plat_token_login_respone.respone_data)
}

void plat_token_login_respone_respone_data::SharedCtor() {
  sid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timezone_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unigame_plat_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unigame_plat_login_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&platinfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unigame_plat_login_life_) -
      reinterpret_cast<char*>(&platinfo_)) + sizeof(unigame_plat_login_life_));
}

plat_token_login_respone_respone_data::~plat_token_login_respone_respone_data() {
  // @@protoc_insertion_point(destructor:NFMsg.plat_token_login_respone.respone_data)
  SharedDtor();
}

void plat_token_login_respone_respone_data::SharedDtor() {
  sid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timezone_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unigame_plat_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unigame_plat_login_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete platinfo_;
}

void plat_token_login_respone_respone_data::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* plat_token_login_respone_respone_data::descriptor() {
  ::protobuf_login_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_login_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const plat_token_login_respone_respone_data& plat_token_login_respone_respone_data::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_login_5fmsg_2eproto::scc_info_plat_token_login_respone_respone_data.base);
  return *internal_default_instance();
}


void plat_token_login_respone_respone_data::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.plat_token_login_respone.respone_data)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timezone_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unigame_plat_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unigame_plat_login_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && platinfo_ != NULL) {
    delete platinfo_;
  }
  platinfo_ = NULL;
  ::memset(&gameid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unigame_plat_login_life_) -
      reinterpret_cast<char*>(&gameid_)) + sizeof(unigame_plat_login_life_));
  _internal_metadata_.Clear();
}

bool plat_token_login_respone_respone_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.plat_token_login_respone.respone_data)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 gameid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sid().data(), static_cast<int>(this->sid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NFMsg.plat_token_login_respone.respone_data.sid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string timezone_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timezone_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->timezone_name().data(), static_cast<int>(this->timezone_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NFMsg.plat_token_login_respone.respone_data.timezone_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 timezone_offset = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timezone_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string uid = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uid().data(), static_cast<int>(this->uid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NFMsg.plat_token_login_respone.respone_data.uid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string unigame_plat_key = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unigame_plat_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->unigame_plat_key().data(), static_cast<int>(this->unigame_plat_key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NFMsg.plat_token_login_respone.respone_data.unigame_plat_key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string unigame_plat_login = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unigame_plat_login()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->unigame_plat_login().data(), static_cast<int>(this->unigame_plat_login().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NFMsg.plat_token_login_respone.respone_data.unigame_plat_login"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 unigame_plat_login_life = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unigame_plat_login_life_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .NFMsg.plat_token_login_respone.respone_data.respone_data_platinfo platinfo = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_platinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.plat_token_login_respone.respone_data)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.plat_token_login_respone.respone_data)
  return false;
#undef DO_
}

void plat_token_login_respone_respone_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.plat_token_login_respone.respone_data)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 gameid = 1;
  if (this->gameid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // string sid = 2;
  if (this->sid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sid().data(), static_cast<int>(this->sid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.plat_token_login_respone.respone_data.sid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->sid(), output);
  }

  // string timezone_name = 3;
  if (this->timezone_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->timezone_name().data(), static_cast<int>(this->timezone_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.plat_token_login_respone.respone_data.timezone_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->timezone_name(), output);
  }

  // uint32 timezone_offset = 4;
  if (this->timezone_offset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->timezone_offset(), output);
  }

  // string uid = 5;
  if (this->uid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uid().data(), static_cast<int>(this->uid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.plat_token_login_respone.respone_data.uid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->uid(), output);
  }

  // string unigame_plat_key = 6;
  if (this->unigame_plat_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->unigame_plat_key().data(), static_cast<int>(this->unigame_plat_key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.plat_token_login_respone.respone_data.unigame_plat_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->unigame_plat_key(), output);
  }

  // string unigame_plat_login = 7;
  if (this->unigame_plat_login().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->unigame_plat_login().data(), static_cast<int>(this->unigame_plat_login().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.plat_token_login_respone.respone_data.unigame_plat_login");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->unigame_plat_login(), output);
  }

  // uint32 unigame_plat_login_life = 8;
  if (this->unigame_plat_login_life() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->unigame_plat_login_life(), output);
  }

  // .NFMsg.plat_token_login_respone.respone_data.respone_data_platinfo platinfo = 9;
  if (this->has_platinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->_internal_platinfo(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.plat_token_login_respone.respone_data)
}

::google::protobuf::uint8* plat_token_login_respone_respone_data::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.plat_token_login_respone.respone_data)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 gameid = 1;
  if (this->gameid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gameid(), target);
  }

  // string sid = 2;
  if (this->sid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sid().data(), static_cast<int>(this->sid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.plat_token_login_respone.respone_data.sid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sid(), target);
  }

  // string timezone_name = 3;
  if (this->timezone_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->timezone_name().data(), static_cast<int>(this->timezone_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.plat_token_login_respone.respone_data.timezone_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->timezone_name(), target);
  }

  // uint32 timezone_offset = 4;
  if (this->timezone_offset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->timezone_offset(), target);
  }

  // string uid = 5;
  if (this->uid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uid().data(), static_cast<int>(this->uid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.plat_token_login_respone.respone_data.uid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->uid(), target);
  }

  // string unigame_plat_key = 6;
  if (this->unigame_plat_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->unigame_plat_key().data(), static_cast<int>(this->unigame_plat_key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.plat_token_login_respone.respone_data.unigame_plat_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->unigame_plat_key(), target);
  }

  // string unigame_plat_login = 7;
  if (this->unigame_plat_login().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->unigame_plat_login().data(), static_cast<int>(this->unigame_plat_login().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.plat_token_login_respone.respone_data.unigame_plat_login");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->unigame_plat_login(), target);
  }

  // uint32 unigame_plat_login_life = 8;
  if (this->unigame_plat_login_life() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->unigame_plat_login_life(), target);
  }

  // .NFMsg.plat_token_login_respone.respone_data.respone_data_platinfo platinfo = 9;
  if (this->has_platinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->_internal_platinfo(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.plat_token_login_respone.respone_data)
  return target;
}

size_t plat_token_login_respone_respone_data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.plat_token_login_respone.respone_data)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string sid = 2;
  if (this->sid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sid());
  }

  // string timezone_name = 3;
  if (this->timezone_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->timezone_name());
  }

  // string uid = 5;
  if (this->uid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uid());
  }

  // string unigame_plat_key = 6;
  if (this->unigame_plat_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->unigame_plat_key());
  }

  // string unigame_plat_login = 7;
  if (this->unigame_plat_login().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->unigame_plat_login());
  }

  // .NFMsg.plat_token_login_respone.respone_data.respone_data_platinfo platinfo = 9;
  if (this->has_platinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *platinfo_);
  }

  // uint32 gameid = 1;
  if (this->gameid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());
  }

  // uint32 timezone_offset = 4;
  if (this->timezone_offset() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->timezone_offset());
  }

  // uint32 unigame_plat_login_life = 8;
  if (this->unigame_plat_login_life() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->unigame_plat_login_life());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void plat_token_login_respone_respone_data::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.plat_token_login_respone.respone_data)
  GOOGLE_DCHECK_NE(&from, this);
  const plat_token_login_respone_respone_data* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const plat_token_login_respone_respone_data>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.plat_token_login_respone.respone_data)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.plat_token_login_respone.respone_data)
    MergeFrom(*source);
  }
}

void plat_token_login_respone_respone_data::MergeFrom(const plat_token_login_respone_respone_data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.plat_token_login_respone.respone_data)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sid().size() > 0) {

    sid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sid_);
  }
  if (from.timezone_name().size() > 0) {

    timezone_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timezone_name_);
  }
  if (from.uid().size() > 0) {

    uid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uid_);
  }
  if (from.unigame_plat_key().size() > 0) {

    unigame_plat_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.unigame_plat_key_);
  }
  if (from.unigame_plat_login().size() > 0) {

    unigame_plat_login_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.unigame_plat_login_);
  }
  if (from.has_platinfo()) {
    mutable_platinfo()->::NFMsg::plat_token_login_respone_respone_data_respone_data_platinfo::MergeFrom(from.platinfo());
  }
  if (from.gameid() != 0) {
    set_gameid(from.gameid());
  }
  if (from.timezone_offset() != 0) {
    set_timezone_offset(from.timezone_offset());
  }
  if (from.unigame_plat_login_life() != 0) {
    set_unigame_plat_login_life(from.unigame_plat_login_life());
  }
}

void plat_token_login_respone_respone_data::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.plat_token_login_respone.respone_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void plat_token_login_respone_respone_data::CopyFrom(const plat_token_login_respone_respone_data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.plat_token_login_respone.respone_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool plat_token_login_respone_respone_data::IsInitialized() const {
  return true;
}

void plat_token_login_respone_respone_data::Swap(plat_token_login_respone_respone_data* other) {
  if (other == this) return;
  InternalSwap(other);
}
void plat_token_login_respone_respone_data::InternalSwap(plat_token_login_respone_respone_data* other) {
  using std::swap;
  sid_.Swap(&other->sid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  timezone_name_.Swap(&other->timezone_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  uid_.Swap(&other->uid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  unigame_plat_key_.Swap(&other->unigame_plat_key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  unigame_plat_login_.Swap(&other->unigame_plat_login_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(platinfo_, other->platinfo_);
  swap(gameid_, other->gameid_);
  swap(timezone_offset_, other->timezone_offset_);
  swap(unigame_plat_login_life_, other->unigame_plat_login_life_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata plat_token_login_respone_respone_data::GetMetadata() const {
  protobuf_login_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_login_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void plat_token_login_respone::InitAsDefaultInstance() {
  ::NFMsg::_plat_token_login_respone_default_instance_._instance.get_mutable()->data_ = const_cast< ::NFMsg::plat_token_login_respone_respone_data*>(
      ::NFMsg::plat_token_login_respone_respone_data::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int plat_token_login_respone::kGameidFieldNumber;
const int plat_token_login_respone::kUnigamePlatKeyFieldNumber;
const int plat_token_login_respone::kUnigamePlatLoginFieldNumber;
const int plat_token_login_respone::kUnigamePlatLoginTimeoutFieldNumber;
const int plat_token_login_respone::kUnigamePlatTimestampFieldNumber;
const int plat_token_login_respone::kZoneidFieldNumber;
const int plat_token_login_respone::kDoFieldNumber;
const int plat_token_login_respone::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

plat_token_login_respone::plat_token_login_respone()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_login_5fmsg_2eproto::scc_info_plat_token_login_respone.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.plat_token_login_respone)
}
plat_token_login_respone::plat_token_login_respone(const plat_token_login_respone& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  unigame_plat_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.unigame_plat_key().size() > 0) {
    unigame_plat_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.unigame_plat_key_);
  }
  unigame_plat_login_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.unigame_plat_login().size() > 0) {
    unigame_plat_login_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.unigame_plat_login_);
  }
  unigame_plat_login_timeout_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.unigame_plat_login_timeout().size() > 0) {
    unigame_plat_login_timeout_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.unigame_plat_login_timeout_);
  }
  do__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.do_().size() > 0) {
    do__.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.do__);
  }
  if (from.has_data()) {
    data_ = new ::NFMsg::plat_token_login_respone_respone_data(*from.data_);
  } else {
    data_ = NULL;
  }
  ::memcpy(&gameid_, &from.gameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&unigame_plat_timestamp_) -
    reinterpret_cast<char*>(&gameid_)) + sizeof(unigame_plat_timestamp_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.plat_token_login_respone)
}

void plat_token_login_respone::SharedCtor() {
  unigame_plat_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unigame_plat_login_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unigame_plat_login_timeout_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  do__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unigame_plat_timestamp_) -
      reinterpret_cast<char*>(&data_)) + sizeof(unigame_plat_timestamp_));
}

plat_token_login_respone::~plat_token_login_respone() {
  // @@protoc_insertion_point(destructor:NFMsg.plat_token_login_respone)
  SharedDtor();
}

void plat_token_login_respone::SharedDtor() {
  unigame_plat_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unigame_plat_login_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unigame_plat_login_timeout_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  do__.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete data_;
}

void plat_token_login_respone::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* plat_token_login_respone::descriptor() {
  ::protobuf_login_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_login_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const plat_token_login_respone& plat_token_login_respone::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_login_5fmsg_2eproto::scc_info_plat_token_login_respone.base);
  return *internal_default_instance();
}


void plat_token_login_respone::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.plat_token_login_respone)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  unigame_plat_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unigame_plat_login_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unigame_plat_login_timeout_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  do__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && data_ != NULL) {
    delete data_;
  }
  data_ = NULL;
  ::memset(&gameid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unigame_plat_timestamp_) -
      reinterpret_cast<char*>(&gameid_)) + sizeof(unigame_plat_timestamp_));
  _internal_metadata_.Clear();
}

bool plat_token_login_respone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.plat_token_login_respone)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 gameid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string unigame_plat_key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unigame_plat_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->unigame_plat_key().data(), static_cast<int>(this->unigame_plat_key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NFMsg.plat_token_login_respone.unigame_plat_key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string unigame_plat_login = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unigame_plat_login()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->unigame_plat_login().data(), static_cast<int>(this->unigame_plat_login().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NFMsg.plat_token_login_respone.unigame_plat_login"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string unigame_plat_login_timeout = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unigame_plat_login_timeout()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->unigame_plat_login_timeout().data(), static_cast<int>(this->unigame_plat_login_timeout().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NFMsg.plat_token_login_respone.unigame_plat_login_timeout"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 unigame_plat_timestamp = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &unigame_plat_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 zoneid = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string do = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_do_()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->do_().data(), static_cast<int>(this->do_().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NFMsg.plat_token_login_respone.do"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .NFMsg.plat_token_login_respone.respone_data data = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.plat_token_login_respone)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.plat_token_login_respone)
  return false;
#undef DO_
}

void plat_token_login_respone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.plat_token_login_respone)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 gameid = 1;
  if (this->gameid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // string unigame_plat_key = 2;
  if (this->unigame_plat_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->unigame_plat_key().data(), static_cast<int>(this->unigame_plat_key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.plat_token_login_respone.unigame_plat_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->unigame_plat_key(), output);
  }

  // string unigame_plat_login = 3;
  if (this->unigame_plat_login().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->unigame_plat_login().data(), static_cast<int>(this->unigame_plat_login().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.plat_token_login_respone.unigame_plat_login");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->unigame_plat_login(), output);
  }

  // string unigame_plat_login_timeout = 4;
  if (this->unigame_plat_login_timeout().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->unigame_plat_login_timeout().data(), static_cast<int>(this->unigame_plat_login_timeout().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.plat_token_login_respone.unigame_plat_login_timeout");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->unigame_plat_login_timeout(), output);
  }

  // uint64 unigame_plat_timestamp = 5;
  if (this->unigame_plat_timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->unigame_plat_timestamp(), output);
  }

  // uint32 zoneid = 6;
  if (this->zoneid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->zoneid(), output);
  }

  // string do = 7;
  if (this->do_().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->do_().data(), static_cast<int>(this->do_().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.plat_token_login_respone.do");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->do_(), output);
  }

  // .NFMsg.plat_token_login_respone.respone_data data = 8;
  if (this->has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_data(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.plat_token_login_respone)
}

::google::protobuf::uint8* plat_token_login_respone::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.plat_token_login_respone)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 gameid = 1;
  if (this->gameid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gameid(), target);
  }

  // string unigame_plat_key = 2;
  if (this->unigame_plat_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->unigame_plat_key().data(), static_cast<int>(this->unigame_plat_key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.plat_token_login_respone.unigame_plat_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->unigame_plat_key(), target);
  }

  // string unigame_plat_login = 3;
  if (this->unigame_plat_login().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->unigame_plat_login().data(), static_cast<int>(this->unigame_plat_login().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.plat_token_login_respone.unigame_plat_login");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->unigame_plat_login(), target);
  }

  // string unigame_plat_login_timeout = 4;
  if (this->unigame_plat_login_timeout().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->unigame_plat_login_timeout().data(), static_cast<int>(this->unigame_plat_login_timeout().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.plat_token_login_respone.unigame_plat_login_timeout");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->unigame_plat_login_timeout(), target);
  }

  // uint64 unigame_plat_timestamp = 5;
  if (this->unigame_plat_timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->unigame_plat_timestamp(), target);
  }

  // uint32 zoneid = 6;
  if (this->zoneid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->zoneid(), target);
  }

  // string do = 7;
  if (this->do_().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->do_().data(), static_cast<int>(this->do_().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.plat_token_login_respone.do");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->do_(), target);
  }

  // .NFMsg.plat_token_login_respone.respone_data data = 8;
  if (this->has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_data(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.plat_token_login_respone)
  return target;
}

size_t plat_token_login_respone::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.plat_token_login_respone)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string unigame_plat_key = 2;
  if (this->unigame_plat_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->unigame_plat_key());
  }

  // string unigame_plat_login = 3;
  if (this->unigame_plat_login().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->unigame_plat_login());
  }

  // string unigame_plat_login_timeout = 4;
  if (this->unigame_plat_login_timeout().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->unigame_plat_login_timeout());
  }

  // string do = 7;
  if (this->do_().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->do_());
  }

  // .NFMsg.plat_token_login_respone.respone_data data = 8;
  if (this->has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *data_);
  }

  // uint32 gameid = 1;
  if (this->gameid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());
  }

  // uint32 zoneid = 6;
  if (this->zoneid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->zoneid());
  }

  // uint64 unigame_plat_timestamp = 5;
  if (this->unigame_plat_timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->unigame_plat_timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void plat_token_login_respone::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.plat_token_login_respone)
  GOOGLE_DCHECK_NE(&from, this);
  const plat_token_login_respone* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const plat_token_login_respone>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.plat_token_login_respone)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.plat_token_login_respone)
    MergeFrom(*source);
  }
}

void plat_token_login_respone::MergeFrom(const plat_token_login_respone& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.plat_token_login_respone)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.unigame_plat_key().size() > 0) {

    unigame_plat_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.unigame_plat_key_);
  }
  if (from.unigame_plat_login().size() > 0) {

    unigame_plat_login_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.unigame_plat_login_);
  }
  if (from.unigame_plat_login_timeout().size() > 0) {

    unigame_plat_login_timeout_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.unigame_plat_login_timeout_);
  }
  if (from.do_().size() > 0) {

    do__.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.do__);
  }
  if (from.has_data()) {
    mutable_data()->::NFMsg::plat_token_login_respone_respone_data::MergeFrom(from.data());
  }
  if (from.gameid() != 0) {
    set_gameid(from.gameid());
  }
  if (from.zoneid() != 0) {
    set_zoneid(from.zoneid());
  }
  if (from.unigame_plat_timestamp() != 0) {
    set_unigame_plat_timestamp(from.unigame_plat_timestamp());
  }
}

void plat_token_login_respone::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.plat_token_login_respone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void plat_token_login_respone::CopyFrom(const plat_token_login_respone& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.plat_token_login_respone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool plat_token_login_respone::IsInitialized() const {
  return true;
}

void plat_token_login_respone::Swap(plat_token_login_respone* other) {
  if (other == this) return;
  InternalSwap(other);
}
void plat_token_login_respone::InternalSwap(plat_token_login_respone* other) {
  using std::swap;
  unigame_plat_key_.Swap(&other->unigame_plat_key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  unigame_plat_login_.Swap(&other->unigame_plat_login_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  unigame_plat_login_timeout_.Swap(&other->unigame_plat_login_timeout_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  do__.Swap(&other->do__, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(data_, other->data_);
  swap(gameid_, other->gameid_);
  swap(zoneid_, other->zoneid_);
  swap(unigame_plat_timestamp_, other->unigame_plat_timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata plat_token_login_respone::GetMetadata() const {
  protobuf_login_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_login_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void reqeust_select_zone_request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int reqeust_select_zone_request::kDoFieldNumber;
const int reqeust_select_zone_request::kGameidFieldNumber;
const int reqeust_select_zone_request::kZoneidFieldNumber;
const int reqeust_select_zone_request::kUidFieldNumber;
const int reqeust_select_zone_request::kUnigamePlatLoginFieldNumber;
const int reqeust_select_zone_request::kUnigamePlatTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

reqeust_select_zone_request::reqeust_select_zone_request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_login_5fmsg_2eproto::scc_info_reqeust_select_zone_request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.reqeust_select_zone_request)
}
reqeust_select_zone_request::reqeust_select_zone_request(const reqeust_select_zone_request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  do__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.do_().size() > 0) {
    do__.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.do__);
  }
  uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.uid().size() > 0) {
    uid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uid_);
  }
  unigame_plat_login_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.unigame_plat_login().size() > 0) {
    unigame_plat_login_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.unigame_plat_login_);
  }
  ::memcpy(&gameid_, &from.gameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&unigame_plat_timestamp_) -
    reinterpret_cast<char*>(&gameid_)) + sizeof(unigame_plat_timestamp_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.reqeust_select_zone_request)
}

void reqeust_select_zone_request::SharedCtor() {
  do__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unigame_plat_login_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&gameid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unigame_plat_timestamp_) -
      reinterpret_cast<char*>(&gameid_)) + sizeof(unigame_plat_timestamp_));
}

reqeust_select_zone_request::~reqeust_select_zone_request() {
  // @@protoc_insertion_point(destructor:NFMsg.reqeust_select_zone_request)
  SharedDtor();
}

void reqeust_select_zone_request::SharedDtor() {
  do__.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unigame_plat_login_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void reqeust_select_zone_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* reqeust_select_zone_request::descriptor() {
  ::protobuf_login_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_login_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const reqeust_select_zone_request& reqeust_select_zone_request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_login_5fmsg_2eproto::scc_info_reqeust_select_zone_request.base);
  return *internal_default_instance();
}


void reqeust_select_zone_request::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.reqeust_select_zone_request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  do__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unigame_plat_login_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&gameid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unigame_plat_timestamp_) -
      reinterpret_cast<char*>(&gameid_)) + sizeof(unigame_plat_timestamp_));
  _internal_metadata_.Clear();
}

bool reqeust_select_zone_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.reqeust_select_zone_request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string do = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_do_()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->do_().data(), static_cast<int>(this->do_().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NFMsg.reqeust_select_zone_request.do"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 gameid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 zoneid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string uid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uid().data(), static_cast<int>(this->uid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NFMsg.reqeust_select_zone_request.uid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string unigame_plat_login = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unigame_plat_login()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->unigame_plat_login().data(), static_cast<int>(this->unigame_plat_login().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NFMsg.reqeust_select_zone_request.unigame_plat_login"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 unigame_plat_timestamp = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &unigame_plat_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.reqeust_select_zone_request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.reqeust_select_zone_request)
  return false;
#undef DO_
}

void reqeust_select_zone_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.reqeust_select_zone_request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string do = 1;
  if (this->do_().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->do_().data(), static_cast<int>(this->do_().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.reqeust_select_zone_request.do");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->do_(), output);
  }

  // uint32 gameid = 2;
  if (this->gameid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gameid(), output);
  }

  // uint32 zoneid = 3;
  if (this->zoneid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->zoneid(), output);
  }

  // string uid = 4;
  if (this->uid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uid().data(), static_cast<int>(this->uid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.reqeust_select_zone_request.uid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->uid(), output);
  }

  // string unigame_plat_login = 5;
  if (this->unigame_plat_login().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->unigame_plat_login().data(), static_cast<int>(this->unigame_plat_login().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.reqeust_select_zone_request.unigame_plat_login");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->unigame_plat_login(), output);
  }

  // uint64 unigame_plat_timestamp = 6;
  if (this->unigame_plat_timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->unigame_plat_timestamp(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.reqeust_select_zone_request)
}

::google::protobuf::uint8* reqeust_select_zone_request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.reqeust_select_zone_request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string do = 1;
  if (this->do_().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->do_().data(), static_cast<int>(this->do_().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.reqeust_select_zone_request.do");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->do_(), target);
  }

  // uint32 gameid = 2;
  if (this->gameid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gameid(), target);
  }

  // uint32 zoneid = 3;
  if (this->zoneid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->zoneid(), target);
  }

  // string uid = 4;
  if (this->uid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uid().data(), static_cast<int>(this->uid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.reqeust_select_zone_request.uid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->uid(), target);
  }

  // string unigame_plat_login = 5;
  if (this->unigame_plat_login().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->unigame_plat_login().data(), static_cast<int>(this->unigame_plat_login().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.reqeust_select_zone_request.unigame_plat_login");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->unigame_plat_login(), target);
  }

  // uint64 unigame_plat_timestamp = 6;
  if (this->unigame_plat_timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->unigame_plat_timestamp(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.reqeust_select_zone_request)
  return target;
}

size_t reqeust_select_zone_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.reqeust_select_zone_request)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string do = 1;
  if (this->do_().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->do_());
  }

  // string uid = 4;
  if (this->uid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uid());
  }

  // string unigame_plat_login = 5;
  if (this->unigame_plat_login().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->unigame_plat_login());
  }

  // uint32 gameid = 2;
  if (this->gameid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());
  }

  // uint32 zoneid = 3;
  if (this->zoneid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->zoneid());
  }

  // uint64 unigame_plat_timestamp = 6;
  if (this->unigame_plat_timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->unigame_plat_timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void reqeust_select_zone_request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.reqeust_select_zone_request)
  GOOGLE_DCHECK_NE(&from, this);
  const reqeust_select_zone_request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const reqeust_select_zone_request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.reqeust_select_zone_request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.reqeust_select_zone_request)
    MergeFrom(*source);
  }
}

void reqeust_select_zone_request::MergeFrom(const reqeust_select_zone_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.reqeust_select_zone_request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.do_().size() > 0) {

    do__.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.do__);
  }
  if (from.uid().size() > 0) {

    uid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uid_);
  }
  if (from.unigame_plat_login().size() > 0) {

    unigame_plat_login_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.unigame_plat_login_);
  }
  if (from.gameid() != 0) {
    set_gameid(from.gameid());
  }
  if (from.zoneid() != 0) {
    set_zoneid(from.zoneid());
  }
  if (from.unigame_plat_timestamp() != 0) {
    set_unigame_plat_timestamp(from.unigame_plat_timestamp());
  }
}

void reqeust_select_zone_request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.reqeust_select_zone_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void reqeust_select_zone_request::CopyFrom(const reqeust_select_zone_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.reqeust_select_zone_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool reqeust_select_zone_request::IsInitialized() const {
  return true;
}

void reqeust_select_zone_request::Swap(reqeust_select_zone_request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void reqeust_select_zone_request::InternalSwap(reqeust_select_zone_request* other) {
  using std::swap;
  do__.Swap(&other->do__, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  uid_.Swap(&other->uid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  unigame_plat_login_.Swap(&other->unigame_plat_login_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(gameid_, other->gameid_);
  swap(zoneid_, other->zoneid_);
  swap(unigame_plat_timestamp_, other->unigame_plat_timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata reqeust_select_zone_request::GetMetadata() const {
  protobuf_login_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_login_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void respone_select_zone_respone_respone_data::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int respone_select_zone_respone_respone_data::kAccountidFieldNumber;
const int respone_select_zone_respone_respone_data::kGameidFieldNumber;
const int respone_select_zone_respone_respone_data::kGatewayurlFieldNumber;
const int respone_select_zone_respone_respone_data::kGatewayurltcpFieldNumber;
const int respone_select_zone_respone_respone_data::kGatewayurlwsFieldNumber;
const int respone_select_zone_respone_respone_data::kLogintempidFieldNumber;
const int respone_select_zone_respone_respone_data::kTokenidFieldNumber;
const int respone_select_zone_respone_respone_data::kZoneidFieldNumber;
const int respone_select_zone_respone_respone_data::kZoneuidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

respone_select_zone_respone_respone_data::respone_select_zone_respone_respone_data()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_login_5fmsg_2eproto::scc_info_respone_select_zone_respone_respone_data.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.respone_select_zone_respone.respone_data)
}
respone_select_zone_respone_respone_data::respone_select_zone_respone_respone_data(const respone_select_zone_respone_respone_data& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gatewayurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.gatewayurl().size() > 0) {
    gatewayurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gatewayurl_);
  }
  gatewayurltcp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.gatewayurltcp().size() > 0) {
    gatewayurltcp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gatewayurltcp_);
  }
  gatewayurlws_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.gatewayurlws().size() > 0) {
    gatewayurlws_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gatewayurlws_);
  }
  ::memcpy(&accountid_, &from.accountid_,
    static_cast<size_t>(reinterpret_cast<char*>(&zoneid_) -
    reinterpret_cast<char*>(&accountid_)) + sizeof(zoneid_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.respone_select_zone_respone.respone_data)
}

void respone_select_zone_respone_respone_data::SharedCtor() {
  gatewayurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gatewayurltcp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gatewayurlws_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&accountid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&zoneid_) -
      reinterpret_cast<char*>(&accountid_)) + sizeof(zoneid_));
}

respone_select_zone_respone_respone_data::~respone_select_zone_respone_respone_data() {
  // @@protoc_insertion_point(destructor:NFMsg.respone_select_zone_respone.respone_data)
  SharedDtor();
}

void respone_select_zone_respone_respone_data::SharedDtor() {
  gatewayurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gatewayurltcp_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gatewayurlws_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void respone_select_zone_respone_respone_data::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* respone_select_zone_respone_respone_data::descriptor() {
  ::protobuf_login_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_login_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const respone_select_zone_respone_respone_data& respone_select_zone_respone_respone_data::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_login_5fmsg_2eproto::scc_info_respone_select_zone_respone_respone_data.base);
  return *internal_default_instance();
}


void respone_select_zone_respone_respone_data::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.respone_select_zone_respone.respone_data)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gatewayurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gatewayurltcp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gatewayurlws_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&accountid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&zoneid_) -
      reinterpret_cast<char*>(&accountid_)) + sizeof(zoneid_));
  _internal_metadata_.Clear();
}

bool respone_select_zone_respone_respone_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.respone_select_zone_respone.respone_data)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 accountid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &accountid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 gameid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string gatewayurl = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gatewayurl()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->gatewayurl().data(), static_cast<int>(this->gatewayurl().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NFMsg.respone_select_zone_respone.respone_data.gatewayurl"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string gatewayurltcp = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gatewayurltcp()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->gatewayurltcp().data(), static_cast<int>(this->gatewayurltcp().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NFMsg.respone_select_zone_respone.respone_data.gatewayurltcp"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string gatewayurlws = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gatewayurlws()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->gatewayurlws().data(), static_cast<int>(this->gatewayurlws().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NFMsg.respone_select_zone_respone.respone_data.gatewayurlws"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 logintempid = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &logintempid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 tokenid = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tokenid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 zoneid = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 zoneuid = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &zoneuid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.respone_select_zone_respone.respone_data)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.respone_select_zone_respone.respone_data)
  return false;
#undef DO_
}

void respone_select_zone_respone_respone_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.respone_select_zone_respone.respone_data)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 accountid = 1;
  if (this->accountid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->accountid(), output);
  }

  // uint32 gameid = 2;
  if (this->gameid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gameid(), output);
  }

  // string gatewayurl = 3;
  if (this->gatewayurl().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gatewayurl().data(), static_cast<int>(this->gatewayurl().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.respone_select_zone_respone.respone_data.gatewayurl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->gatewayurl(), output);
  }

  // string gatewayurltcp = 4;
  if (this->gatewayurltcp().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gatewayurltcp().data(), static_cast<int>(this->gatewayurltcp().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.respone_select_zone_respone.respone_data.gatewayurltcp");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->gatewayurltcp(), output);
  }

  // string gatewayurlws = 5;
  if (this->gatewayurlws().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gatewayurlws().data(), static_cast<int>(this->gatewayurlws().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.respone_select_zone_respone.respone_data.gatewayurlws");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->gatewayurlws(), output);
  }

  // uint32 logintempid = 6;
  if (this->logintempid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->logintempid(), output);
  }

  // uint64 tokenid = 7;
  if (this->tokenid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->tokenid(), output);
  }

  // uint32 zoneid = 8;
  if (this->zoneid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->zoneid(), output);
  }

  // uint64 zoneuid = 9;
  if (this->zoneuid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->zoneuid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.respone_select_zone_respone.respone_data)
}

::google::protobuf::uint8* respone_select_zone_respone_respone_data::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.respone_select_zone_respone.respone_data)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 accountid = 1;
  if (this->accountid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->accountid(), target);
  }

  // uint32 gameid = 2;
  if (this->gameid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gameid(), target);
  }

  // string gatewayurl = 3;
  if (this->gatewayurl().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gatewayurl().data(), static_cast<int>(this->gatewayurl().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.respone_select_zone_respone.respone_data.gatewayurl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->gatewayurl(), target);
  }

  // string gatewayurltcp = 4;
  if (this->gatewayurltcp().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gatewayurltcp().data(), static_cast<int>(this->gatewayurltcp().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.respone_select_zone_respone.respone_data.gatewayurltcp");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->gatewayurltcp(), target);
  }

  // string gatewayurlws = 5;
  if (this->gatewayurlws().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gatewayurlws().data(), static_cast<int>(this->gatewayurlws().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.respone_select_zone_respone.respone_data.gatewayurlws");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->gatewayurlws(), target);
  }

  // uint32 logintempid = 6;
  if (this->logintempid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->logintempid(), target);
  }

  // uint64 tokenid = 7;
  if (this->tokenid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->tokenid(), target);
  }

  // uint32 zoneid = 8;
  if (this->zoneid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->zoneid(), target);
  }

  // uint64 zoneuid = 9;
  if (this->zoneuid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->zoneuid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.respone_select_zone_respone.respone_data)
  return target;
}

size_t respone_select_zone_respone_respone_data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.respone_select_zone_respone.respone_data)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string gatewayurl = 3;
  if (this->gatewayurl().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gatewayurl());
  }

  // string gatewayurltcp = 4;
  if (this->gatewayurltcp().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gatewayurltcp());
  }

  // string gatewayurlws = 5;
  if (this->gatewayurlws().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gatewayurlws());
  }

  // uint64 accountid = 1;
  if (this->accountid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->accountid());
  }

  // uint32 gameid = 2;
  if (this->gameid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());
  }

  // uint32 logintempid = 6;
  if (this->logintempid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->logintempid());
  }

  // uint64 tokenid = 7;
  if (this->tokenid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->tokenid());
  }

  // uint64 zoneuid = 9;
  if (this->zoneuid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->zoneuid());
  }

  // uint32 zoneid = 8;
  if (this->zoneid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->zoneid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void respone_select_zone_respone_respone_data::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.respone_select_zone_respone.respone_data)
  GOOGLE_DCHECK_NE(&from, this);
  const respone_select_zone_respone_respone_data* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const respone_select_zone_respone_respone_data>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.respone_select_zone_respone.respone_data)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.respone_select_zone_respone.respone_data)
    MergeFrom(*source);
  }
}

void respone_select_zone_respone_respone_data::MergeFrom(const respone_select_zone_respone_respone_data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.respone_select_zone_respone.respone_data)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gatewayurl().size() > 0) {

    gatewayurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gatewayurl_);
  }
  if (from.gatewayurltcp().size() > 0) {

    gatewayurltcp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gatewayurltcp_);
  }
  if (from.gatewayurlws().size() > 0) {

    gatewayurlws_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gatewayurlws_);
  }
  if (from.accountid() != 0) {
    set_accountid(from.accountid());
  }
  if (from.gameid() != 0) {
    set_gameid(from.gameid());
  }
  if (from.logintempid() != 0) {
    set_logintempid(from.logintempid());
  }
  if (from.tokenid() != 0) {
    set_tokenid(from.tokenid());
  }
  if (from.zoneuid() != 0) {
    set_zoneuid(from.zoneuid());
  }
  if (from.zoneid() != 0) {
    set_zoneid(from.zoneid());
  }
}

void respone_select_zone_respone_respone_data::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.respone_select_zone_respone.respone_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void respone_select_zone_respone_respone_data::CopyFrom(const respone_select_zone_respone_respone_data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.respone_select_zone_respone.respone_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool respone_select_zone_respone_respone_data::IsInitialized() const {
  return true;
}

void respone_select_zone_respone_respone_data::Swap(respone_select_zone_respone_respone_data* other) {
  if (other == this) return;
  InternalSwap(other);
}
void respone_select_zone_respone_respone_data::InternalSwap(respone_select_zone_respone_respone_data* other) {
  using std::swap;
  gatewayurl_.Swap(&other->gatewayurl_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  gatewayurltcp_.Swap(&other->gatewayurltcp_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  gatewayurlws_.Swap(&other->gatewayurlws_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(accountid_, other->accountid_);
  swap(gameid_, other->gameid_);
  swap(logintempid_, other->logintempid_);
  swap(tokenid_, other->tokenid_);
  swap(zoneuid_, other->zoneuid_);
  swap(zoneid_, other->zoneid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata respone_select_zone_respone_respone_data::GetMetadata() const {
  protobuf_login_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_login_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void respone_select_zone_respone::InitAsDefaultInstance() {
  ::NFMsg::_respone_select_zone_respone_default_instance_._instance.get_mutable()->data_ = const_cast< ::NFMsg::respone_select_zone_respone_respone_data*>(
      ::NFMsg::respone_select_zone_respone_respone_data::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int respone_select_zone_respone::kDoFieldNumber;
const int respone_select_zone_respone::kErrnoFieldNumber;
const int respone_select_zone_respone::kGameidFieldNumber;
const int respone_select_zone_respone::kStFieldNumber;
const int respone_select_zone_respone::kUnigamePlatLoginFieldNumber;
const int respone_select_zone_respone::kUnigamePlatTimestampFieldNumber;
const int respone_select_zone_respone::kZoneidFieldNumber;
const int respone_select_zone_respone::kDataFieldNumber;
const int respone_select_zone_respone::kUidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

respone_select_zone_respone::respone_select_zone_respone()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_login_5fmsg_2eproto::scc_info_respone_select_zone_respone.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.respone_select_zone_respone)
}
respone_select_zone_respone::respone_select_zone_respone(const respone_select_zone_respone& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  do__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.do_().size() > 0) {
    do__.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.do__);
  }
  errno__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.errno_().size() > 0) {
    errno__.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errno__);
  }
  unigame_plat_login_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.unigame_plat_login().size() > 0) {
    unigame_plat_login_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.unigame_plat_login_);
  }
  uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.uid().size() > 0) {
    uid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uid_);
  }
  if (from.has_data()) {
    data_ = new ::NFMsg::respone_select_zone_respone_respone_data(*from.data_);
  } else {
    data_ = NULL;
  }
  ::memcpy(&st_, &from.st_,
    static_cast<size_t>(reinterpret_cast<char*>(&unigame_plat_timestamp_) -
    reinterpret_cast<char*>(&st_)) + sizeof(unigame_plat_timestamp_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.respone_select_zone_respone)
}

void respone_select_zone_respone::SharedCtor() {
  do__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errno__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unigame_plat_login_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unigame_plat_timestamp_) -
      reinterpret_cast<char*>(&data_)) + sizeof(unigame_plat_timestamp_));
}

respone_select_zone_respone::~respone_select_zone_respone() {
  // @@protoc_insertion_point(destructor:NFMsg.respone_select_zone_respone)
  SharedDtor();
}

void respone_select_zone_respone::SharedDtor() {
  do__.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errno__.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unigame_plat_login_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete data_;
}

void respone_select_zone_respone::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* respone_select_zone_respone::descriptor() {
  ::protobuf_login_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_login_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const respone_select_zone_respone& respone_select_zone_respone::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_login_5fmsg_2eproto::scc_info_respone_select_zone_respone.base);
  return *internal_default_instance();
}


void respone_select_zone_respone::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.respone_select_zone_respone)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  do__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errno__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unigame_plat_login_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && data_ != NULL) {
    delete data_;
  }
  data_ = NULL;
  ::memset(&st_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unigame_plat_timestamp_) -
      reinterpret_cast<char*>(&st_)) + sizeof(unigame_plat_timestamp_));
  _internal_metadata_.Clear();
}

bool respone_select_zone_respone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.respone_select_zone_respone)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string do = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_do_()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->do_().data(), static_cast<int>(this->do_().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NFMsg.respone_select_zone_respone.do"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string errno_ = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errno_()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->errno_().data(), static_cast<int>(this->errno_().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NFMsg.respone_select_zone_respone.errno_"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 gameid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 st = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &st_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string unigame_plat_login = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unigame_plat_login()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->unigame_plat_login().data(), static_cast<int>(this->unigame_plat_login().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NFMsg.respone_select_zone_respone.unigame_plat_login"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 unigame_plat_timestamp = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &unigame_plat_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 zoneid = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .NFMsg.respone_select_zone_respone.respone_data data = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string uid = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uid().data(), static_cast<int>(this->uid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NFMsg.respone_select_zone_respone.uid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.respone_select_zone_respone)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.respone_select_zone_respone)
  return false;
#undef DO_
}

void respone_select_zone_respone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.respone_select_zone_respone)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string do = 1;
  if (this->do_().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->do_().data(), static_cast<int>(this->do_().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.respone_select_zone_respone.do");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->do_(), output);
  }

  // string errno_ = 2;
  if (this->errno_().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->errno_().data(), static_cast<int>(this->errno_().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.respone_select_zone_respone.errno_");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->errno_(), output);
  }

  // uint32 gameid = 3;
  if (this->gameid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->gameid(), output);
  }

  // uint64 st = 4;
  if (this->st() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->st(), output);
  }

  // string unigame_plat_login = 5;
  if (this->unigame_plat_login().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->unigame_plat_login().data(), static_cast<int>(this->unigame_plat_login().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.respone_select_zone_respone.unigame_plat_login");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->unigame_plat_login(), output);
  }

  // uint64 unigame_plat_timestamp = 6;
  if (this->unigame_plat_timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->unigame_plat_timestamp(), output);
  }

  // uint32 zoneid = 7;
  if (this->zoneid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->zoneid(), output);
  }

  // .NFMsg.respone_select_zone_respone.respone_data data = 8;
  if (this->has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_data(), output);
  }

  // string uid = 9;
  if (this->uid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uid().data(), static_cast<int>(this->uid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.respone_select_zone_respone.uid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->uid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.respone_select_zone_respone)
}

::google::protobuf::uint8* respone_select_zone_respone::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.respone_select_zone_respone)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string do = 1;
  if (this->do_().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->do_().data(), static_cast<int>(this->do_().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.respone_select_zone_respone.do");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->do_(), target);
  }

  // string errno_ = 2;
  if (this->errno_().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->errno_().data(), static_cast<int>(this->errno_().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.respone_select_zone_respone.errno_");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->errno_(), target);
  }

  // uint32 gameid = 3;
  if (this->gameid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->gameid(), target);
  }

  // uint64 st = 4;
  if (this->st() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->st(), target);
  }

  // string unigame_plat_login = 5;
  if (this->unigame_plat_login().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->unigame_plat_login().data(), static_cast<int>(this->unigame_plat_login().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.respone_select_zone_respone.unigame_plat_login");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->unigame_plat_login(), target);
  }

  // uint64 unigame_plat_timestamp = 6;
  if (this->unigame_plat_timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->unigame_plat_timestamp(), target);
  }

  // uint32 zoneid = 7;
  if (this->zoneid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->zoneid(), target);
  }

  // .NFMsg.respone_select_zone_respone.respone_data data = 8;
  if (this->has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_data(), deterministic, target);
  }

  // string uid = 9;
  if (this->uid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uid().data(), static_cast<int>(this->uid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.respone_select_zone_respone.uid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->uid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.respone_select_zone_respone)
  return target;
}

size_t respone_select_zone_respone::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.respone_select_zone_respone)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string do = 1;
  if (this->do_().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->do_());
  }

  // string errno_ = 2;
  if (this->errno_().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->errno_());
  }

  // string unigame_plat_login = 5;
  if (this->unigame_plat_login().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->unigame_plat_login());
  }

  // string uid = 9;
  if (this->uid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uid());
  }

  // .NFMsg.respone_select_zone_respone.respone_data data = 8;
  if (this->has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *data_);
  }

  // uint64 st = 4;
  if (this->st() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->st());
  }

  // uint32 gameid = 3;
  if (this->gameid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());
  }

  // uint32 zoneid = 7;
  if (this->zoneid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->zoneid());
  }

  // uint64 unigame_plat_timestamp = 6;
  if (this->unigame_plat_timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->unigame_plat_timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void respone_select_zone_respone::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.respone_select_zone_respone)
  GOOGLE_DCHECK_NE(&from, this);
  const respone_select_zone_respone* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const respone_select_zone_respone>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.respone_select_zone_respone)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.respone_select_zone_respone)
    MergeFrom(*source);
  }
}

void respone_select_zone_respone::MergeFrom(const respone_select_zone_respone& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.respone_select_zone_respone)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.do_().size() > 0) {

    do__.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.do__);
  }
  if (from.errno_().size() > 0) {

    errno__.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errno__);
  }
  if (from.unigame_plat_login().size() > 0) {

    unigame_plat_login_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.unigame_plat_login_);
  }
  if (from.uid().size() > 0) {

    uid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uid_);
  }
  if (from.has_data()) {
    mutable_data()->::NFMsg::respone_select_zone_respone_respone_data::MergeFrom(from.data());
  }
  if (from.st() != 0) {
    set_st(from.st());
  }
  if (from.gameid() != 0) {
    set_gameid(from.gameid());
  }
  if (from.zoneid() != 0) {
    set_zoneid(from.zoneid());
  }
  if (from.unigame_plat_timestamp() != 0) {
    set_unigame_plat_timestamp(from.unigame_plat_timestamp());
  }
}

void respone_select_zone_respone::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.respone_select_zone_respone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void respone_select_zone_respone::CopyFrom(const respone_select_zone_respone& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.respone_select_zone_respone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool respone_select_zone_respone::IsInitialized() const {
  return true;
}

void respone_select_zone_respone::Swap(respone_select_zone_respone* other) {
  if (other == this) return;
  InternalSwap(other);
}
void respone_select_zone_respone::InternalSwap(respone_select_zone_respone* other) {
  using std::swap;
  do__.Swap(&other->do__, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  errno__.Swap(&other->errno__, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  unigame_plat_login_.Swap(&other->unigame_plat_login_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  uid_.Swap(&other->uid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(data_, other->data_);
  swap(st_, other->st_);
  swap(gameid_, other->gameid_);
  swap(zoneid_, other->zoneid_);
  swap(unigame_plat_timestamp_, other->unigame_plat_timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata respone_select_zone_respone::GetMetadata() const {
  protobuf_login_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_login_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace NFMsg
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::LoginAccount* Arena::CreateMaybeMessage< ::NFMsg::LoginAccount >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::LoginAccount >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::http_login_cmd* Arena::CreateMaybeMessage< ::NFMsg::http_login_cmd >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::http_login_cmd >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::reqeust_zone_list_data* Arena::CreateMaybeMessage< ::NFMsg::reqeust_zone_list_data >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::reqeust_zone_list_data >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::reqeust_zone_list* Arena::CreateMaybeMessage< ::NFMsg::reqeust_zone_list >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::reqeust_zone_list >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::reqeust_zone_list_respone_respone_data_reqeust_zone_list_server* Arena::CreateMaybeMessage< ::NFMsg::reqeust_zone_list_respone_respone_data_reqeust_zone_list_server >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::reqeust_zone_list_respone_respone_data_reqeust_zone_list_server >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::reqeust_zone_list_respone_respone_data* Arena::CreateMaybeMessage< ::NFMsg::reqeust_zone_list_respone_respone_data >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::reqeust_zone_list_respone_respone_data >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::reqeust_zone_list_respone* Arena::CreateMaybeMessage< ::NFMsg::reqeust_zone_list_respone >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::reqeust_zone_list_respone >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::plat_token_login_request_request_data_request_data_platinfo* Arena::CreateMaybeMessage< ::NFMsg::plat_token_login_request_request_data_request_data_platinfo >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::plat_token_login_request_request_data_request_data_platinfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::plat_token_login_request_request_data* Arena::CreateMaybeMessage< ::NFMsg::plat_token_login_request_request_data >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::plat_token_login_request_request_data >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::plat_token_login_request* Arena::CreateMaybeMessage< ::NFMsg::plat_token_login_request >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::plat_token_login_request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::plat_token_login_respone_respone_data_respone_data_platinfo* Arena::CreateMaybeMessage< ::NFMsg::plat_token_login_respone_respone_data_respone_data_platinfo >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::plat_token_login_respone_respone_data_respone_data_platinfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::plat_token_login_respone_respone_data* Arena::CreateMaybeMessage< ::NFMsg::plat_token_login_respone_respone_data >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::plat_token_login_respone_respone_data >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::plat_token_login_respone* Arena::CreateMaybeMessage< ::NFMsg::plat_token_login_respone >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::plat_token_login_respone >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::reqeust_select_zone_request* Arena::CreateMaybeMessage< ::NFMsg::reqeust_select_zone_request >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::reqeust_select_zone_request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::respone_select_zone_respone_respone_data* Arena::CreateMaybeMessage< ::NFMsg::respone_select_zone_respone_respone_data >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::respone_select_zone_respone_respone_data >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::respone_select_zone_respone* Arena::CreateMaybeMessage< ::NFMsg::respone_select_zone_respone >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::respone_select_zone_respone >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
