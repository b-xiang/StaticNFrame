// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: auction.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "auction.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace message {

namespace {

const ::google::protobuf::Descriptor* AuctionItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuctionItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* Auction_CS_GetAuctionInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Auction_CS_GetAuctionInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Auction_SC_GetAuctionInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Auction_SC_GetAuctionInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Auction_CS_AuctionItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Auction_CS_AuctionItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* Auction_SC_AuctionItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Auction_SC_AuctionItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* Auction_CS_AuctionItemAgain_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Auction_CS_AuctionItemAgain_reflection_ = NULL;
const ::google::protobuf::Descriptor* Auction_SC_AuctionItemAgain_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Auction_SC_AuctionItemAgain_reflection_ = NULL;
const ::google::protobuf::Descriptor* Auction_CS_RemoveItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Auction_CS_RemoveItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* Auction_SC_RemoveItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Auction_SC_RemoveItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* Auction_CS_SearchItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Auction_CS_SearchItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* Auction_SC_SearchItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Auction_SC_SearchItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* Auction_CS_BrowseItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Auction_CS_BrowseItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* Auction_SC_BrowseItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Auction_SC_BrowseItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* Auction_CS_BuyItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Auction_CS_BuyItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* Auction_SC_BuyItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Auction_SC_BuyItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* Auction_CS_GetAttentionInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Auction_CS_GetAttentionInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Auction_SC_GetAttentionInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Auction_SC_GetAttentionInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Auction_CS_AttentionItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Auction_CS_AttentionItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* Auction_SC_AttentionItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Auction_SC_AttentionItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* Auction_CS_CancelAttentionItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Auction_CS_CancelAttentionItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* Auction_SC_CancelAttentionItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Auction_SC_CancelAttentionItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* Auction_CS_GetCaseInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Auction_CS_GetCaseInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Auction_SC_GetCaseInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Auction_SC_GetCaseInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Auction_CS_GetAuctionItemNum_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Auction_CS_GetAuctionItemNum_reflection_ = NULL;
const ::google::protobuf::Descriptor* Auction_SC_GetAuctionItemNum_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Auction_SC_GetAuctionItemNum_reflection_ = NULL;
const ::google::protobuf::Descriptor* Auction_CS_GetAuctionItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Auction_CS_GetAuctionItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* Auction_SC_GetAuctionItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Auction_SC_GetAuctionItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* Auction_SC_OtherBuy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Auction_SC_OtherBuy_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_auction_2eproto() {
  protobuf_AddDesc_auction_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "auction.proto");
  GOOGLE_CHECK(file != NULL);
  AuctionItem_descriptor_ = file->message_type(0);
  static const int AuctionItem_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionItem, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionItem, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionItem, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionItem, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionItem, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionItem, att_persons_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionItem, item_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionItem, equip_info_),
  };
  AuctionItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AuctionItem_descriptor_,
      AuctionItem::default_instance_,
      AuctionItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AuctionItem));
  Auction_CS_GetAuctionInfo_descriptor_ = file->message_type(1);
  static const int Auction_CS_GetAuctionInfo_offsets_[1] = {
  };
  Auction_CS_GetAuctionInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Auction_CS_GetAuctionInfo_descriptor_,
      Auction_CS_GetAuctionInfo::default_instance_,
      Auction_CS_GetAuctionInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_CS_GetAuctionInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_CS_GetAuctionInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Auction_CS_GetAuctionInfo));
  Auction_SC_GetAuctionInfo_descriptor_ = file->message_type(2);
  static const int Auction_SC_GetAuctionInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_SC_GetAuctionInfo, rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_SC_GetAuctionInfo, item_list_),
  };
  Auction_SC_GetAuctionInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Auction_SC_GetAuctionInfo_descriptor_,
      Auction_SC_GetAuctionInfo::default_instance_,
      Auction_SC_GetAuctionInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_SC_GetAuctionInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_SC_GetAuctionInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Auction_SC_GetAuctionInfo));
  Auction_CS_AuctionItem_descriptor_ = file->message_type(3);
  static const int Auction_CS_AuctionItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_CS_AuctionItem, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_CS_AuctionItem, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_CS_AuctionItem, gold_),
  };
  Auction_CS_AuctionItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Auction_CS_AuctionItem_descriptor_,
      Auction_CS_AuctionItem::default_instance_,
      Auction_CS_AuctionItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_CS_AuctionItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_CS_AuctionItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Auction_CS_AuctionItem));
  Auction_SC_AuctionItem_descriptor_ = file->message_type(4);
  static const int Auction_SC_AuctionItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_SC_AuctionItem, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_SC_AuctionItem, item_info_),
  };
  Auction_SC_AuctionItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Auction_SC_AuctionItem_descriptor_,
      Auction_SC_AuctionItem::default_instance_,
      Auction_SC_AuctionItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_SC_AuctionItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_SC_AuctionItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Auction_SC_AuctionItem));
  Auction_CS_AuctionItemAgain_descriptor_ = file->message_type(5);
  static const int Auction_CS_AuctionItemAgain_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_CS_AuctionItemAgain, uuid_),
  };
  Auction_CS_AuctionItemAgain_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Auction_CS_AuctionItemAgain_descriptor_,
      Auction_CS_AuctionItemAgain::default_instance_,
      Auction_CS_AuctionItemAgain_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_CS_AuctionItemAgain, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_CS_AuctionItemAgain, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Auction_CS_AuctionItemAgain));
  Auction_SC_AuctionItemAgain_descriptor_ = file->message_type(6);
  static const int Auction_SC_AuctionItemAgain_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_SC_AuctionItemAgain, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_SC_AuctionItemAgain, item_info_),
  };
  Auction_SC_AuctionItemAgain_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Auction_SC_AuctionItemAgain_descriptor_,
      Auction_SC_AuctionItemAgain::default_instance_,
      Auction_SC_AuctionItemAgain_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_SC_AuctionItemAgain, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_SC_AuctionItemAgain, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Auction_SC_AuctionItemAgain));
  Auction_CS_RemoveItem_descriptor_ = file->message_type(7);
  static const int Auction_CS_RemoveItem_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_CS_RemoveItem, uuid_),
  };
  Auction_CS_RemoveItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Auction_CS_RemoveItem_descriptor_,
      Auction_CS_RemoveItem::default_instance_,
      Auction_CS_RemoveItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_CS_RemoveItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_CS_RemoveItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Auction_CS_RemoveItem));
  Auction_SC_RemoveItem_descriptor_ = file->message_type(8);
  static const int Auction_SC_RemoveItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_SC_RemoveItem, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_SC_RemoveItem, uuid_),
  };
  Auction_SC_RemoveItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Auction_SC_RemoveItem_descriptor_,
      Auction_SC_RemoveItem::default_instance_,
      Auction_SC_RemoveItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_SC_RemoveItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_SC_RemoveItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Auction_SC_RemoveItem));
  Auction_CS_SearchItem_descriptor_ = file->message_type(9);
  static const int Auction_CS_SearchItem_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_CS_SearchItem, is_again_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_CS_SearchItem, is_auction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_CS_SearchItem, pro_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_CS_SearchItem, item_id_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_CS_SearchItem, combat_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_CS_SearchItem, sort_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_CS_SearchItem, price_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_CS_SearchItem, price_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_CS_SearchItem, quality_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_CS_SearchItem, quality_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_CS_SearchItem, start_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_CS_SearchItem, end_index_),
  };
  Auction_CS_SearchItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Auction_CS_SearchItem_descriptor_,
      Auction_CS_SearchItem::default_instance_,
      Auction_CS_SearchItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_CS_SearchItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_CS_SearchItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Auction_CS_SearchItem));
  Auction_SC_SearchItem_descriptor_ = file->message_type(10);
  static const int Auction_SC_SearchItem_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_SC_SearchItem, total_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_SC_SearchItem, start_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_SC_SearchItem, end_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_SC_SearchItem, item_list_),
  };
  Auction_SC_SearchItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Auction_SC_SearchItem_descriptor_,
      Auction_SC_SearchItem::default_instance_,
      Auction_SC_SearchItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_SC_SearchItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_SC_SearchItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Auction_SC_SearchItem));
  Auction_CS_BrowseItem_descriptor_ = file->message_type(11);
  static const int Auction_CS_BrowseItem_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_CS_BrowseItem, is_again_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_CS_BrowseItem, is_auction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_CS_BrowseItem, pro_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_CS_BrowseItem, item_id_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_CS_BrowseItem, stren_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_CS_BrowseItem, sort_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_CS_BrowseItem, quality_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_CS_BrowseItem, quality_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_CS_BrowseItem, start_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_CS_BrowseItem, end_index_),
  };
  Auction_CS_BrowseItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Auction_CS_BrowseItem_descriptor_,
      Auction_CS_BrowseItem::default_instance_,
      Auction_CS_BrowseItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_CS_BrowseItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_CS_BrowseItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Auction_CS_BrowseItem));
  Auction_SC_BrowseItem_descriptor_ = file->message_type(12);
  static const int Auction_SC_BrowseItem_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_SC_BrowseItem, total_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_SC_BrowseItem, start_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_SC_BrowseItem, end_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_SC_BrowseItem, item_list_),
  };
  Auction_SC_BrowseItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Auction_SC_BrowseItem_descriptor_,
      Auction_SC_BrowseItem::default_instance_,
      Auction_SC_BrowseItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_SC_BrowseItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_SC_BrowseItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Auction_SC_BrowseItem));
  Auction_CS_BuyItem_descriptor_ = file->message_type(13);
  static const int Auction_CS_BuyItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_CS_BuyItem, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_CS_BuyItem, buy_num_),
  };
  Auction_CS_BuyItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Auction_CS_BuyItem_descriptor_,
      Auction_CS_BuyItem::default_instance_,
      Auction_CS_BuyItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_CS_BuyItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_CS_BuyItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Auction_CS_BuyItem));
  Auction_SC_BuyItem_descriptor_ = file->message_type(14);
  static const int Auction_SC_BuyItem_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_SC_BuyItem, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_SC_BuyItem, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_SC_BuyItem, buy_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_SC_BuyItem, remain_num_),
  };
  Auction_SC_BuyItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Auction_SC_BuyItem_descriptor_,
      Auction_SC_BuyItem::default_instance_,
      Auction_SC_BuyItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_SC_BuyItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_SC_BuyItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Auction_SC_BuyItem));
  Auction_CS_GetAttentionInfo_descriptor_ = file->message_type(15);
  static const int Auction_CS_GetAttentionInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_CS_GetAttentionInfo, is_auction_),
  };
  Auction_CS_GetAttentionInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Auction_CS_GetAttentionInfo_descriptor_,
      Auction_CS_GetAttentionInfo::default_instance_,
      Auction_CS_GetAttentionInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_CS_GetAttentionInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_CS_GetAttentionInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Auction_CS_GetAttentionInfo));
  Auction_SC_GetAttentionInfo_descriptor_ = file->message_type(16);
  static const int Auction_SC_GetAttentionInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_SC_GetAttentionInfo, is_auction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_SC_GetAttentionInfo, item_list_),
  };
  Auction_SC_GetAttentionInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Auction_SC_GetAttentionInfo_descriptor_,
      Auction_SC_GetAttentionInfo::default_instance_,
      Auction_SC_GetAttentionInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_SC_GetAttentionInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_SC_GetAttentionInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Auction_SC_GetAttentionInfo));
  Auction_CS_AttentionItem_descriptor_ = file->message_type(17);
  static const int Auction_CS_AttentionItem_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_CS_AttentionItem, uuid_),
  };
  Auction_CS_AttentionItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Auction_CS_AttentionItem_descriptor_,
      Auction_CS_AttentionItem::default_instance_,
      Auction_CS_AttentionItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_CS_AttentionItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_CS_AttentionItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Auction_CS_AttentionItem));
  Auction_SC_AttentionItem_descriptor_ = file->message_type(18);
  static const int Auction_SC_AttentionItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_SC_AttentionItem, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_SC_AttentionItem, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_SC_AttentionItem, att_persons_),
  };
  Auction_SC_AttentionItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Auction_SC_AttentionItem_descriptor_,
      Auction_SC_AttentionItem::default_instance_,
      Auction_SC_AttentionItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_SC_AttentionItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_SC_AttentionItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Auction_SC_AttentionItem));
  Auction_CS_CancelAttentionItem_descriptor_ = file->message_type(19);
  static const int Auction_CS_CancelAttentionItem_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_CS_CancelAttentionItem, uuid_),
  };
  Auction_CS_CancelAttentionItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Auction_CS_CancelAttentionItem_descriptor_,
      Auction_CS_CancelAttentionItem::default_instance_,
      Auction_CS_CancelAttentionItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_CS_CancelAttentionItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_CS_CancelAttentionItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Auction_CS_CancelAttentionItem));
  Auction_SC_CancelAttentionItem_descriptor_ = file->message_type(20);
  static const int Auction_SC_CancelAttentionItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_SC_CancelAttentionItem, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_SC_CancelAttentionItem, uuid_),
  };
  Auction_SC_CancelAttentionItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Auction_SC_CancelAttentionItem_descriptor_,
      Auction_SC_CancelAttentionItem::default_instance_,
      Auction_SC_CancelAttentionItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_SC_CancelAttentionItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_SC_CancelAttentionItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Auction_SC_CancelAttentionItem));
  Auction_CS_GetCaseInfo_descriptor_ = file->message_type(21);
  static const int Auction_CS_GetCaseInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_CS_GetCaseInfo, id_),
  };
  Auction_CS_GetCaseInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Auction_CS_GetCaseInfo_descriptor_,
      Auction_CS_GetCaseInfo::default_instance_,
      Auction_CS_GetCaseInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_CS_GetCaseInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_CS_GetCaseInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Auction_CS_GetCaseInfo));
  Auction_SC_GetCaseInfo_descriptor_ = file->message_type(22);
  static const int Auction_SC_GetCaseInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_SC_GetCaseInfo, recommend_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_SC_GetCaseInfo, item_list_),
  };
  Auction_SC_GetCaseInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Auction_SC_GetCaseInfo_descriptor_,
      Auction_SC_GetCaseInfo::default_instance_,
      Auction_SC_GetCaseInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_SC_GetCaseInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_SC_GetCaseInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Auction_SC_GetCaseInfo));
  Auction_CS_GetAuctionItemNum_descriptor_ = file->message_type(23);
  static const int Auction_CS_GetAuctionItemNum_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_CS_GetAuctionItemNum, is_auction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_CS_GetAuctionItemNum, pro_id_list_),
  };
  Auction_CS_GetAuctionItemNum_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Auction_CS_GetAuctionItemNum_descriptor_,
      Auction_CS_GetAuctionItemNum::default_instance_,
      Auction_CS_GetAuctionItemNum_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_CS_GetAuctionItemNum, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_CS_GetAuctionItemNum, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Auction_CS_GetAuctionItemNum));
  Auction_SC_GetAuctionItemNum_descriptor_ = file->message_type(24);
  static const int Auction_SC_GetAuctionItemNum_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_SC_GetAuctionItemNum, is_auction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_SC_GetAuctionItemNum, id_num_list_),
  };
  Auction_SC_GetAuctionItemNum_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Auction_SC_GetAuctionItemNum_descriptor_,
      Auction_SC_GetAuctionItemNum::default_instance_,
      Auction_SC_GetAuctionItemNum_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_SC_GetAuctionItemNum, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_SC_GetAuctionItemNum, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Auction_SC_GetAuctionItemNum));
  Auction_CS_GetAuctionItem_descriptor_ = file->message_type(25);
  static const int Auction_CS_GetAuctionItem_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_CS_GetAuctionItem, item_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_CS_GetAuctionItem, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_CS_GetAuctionItem, start_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_CS_GetAuctionItem, end_index_),
  };
  Auction_CS_GetAuctionItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Auction_CS_GetAuctionItem_descriptor_,
      Auction_CS_GetAuctionItem::default_instance_,
      Auction_CS_GetAuctionItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_CS_GetAuctionItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_CS_GetAuctionItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Auction_CS_GetAuctionItem));
  Auction_SC_GetAuctionItem_descriptor_ = file->message_type(26);
  static const int Auction_SC_GetAuctionItem_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_SC_GetAuctionItem, total_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_SC_GetAuctionItem, start_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_SC_GetAuctionItem, end_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_SC_GetAuctionItem, item_list_),
  };
  Auction_SC_GetAuctionItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Auction_SC_GetAuctionItem_descriptor_,
      Auction_SC_GetAuctionItem::default_instance_,
      Auction_SC_GetAuctionItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_SC_GetAuctionItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_SC_GetAuctionItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Auction_SC_GetAuctionItem));
  Auction_SC_OtherBuy_descriptor_ = file->message_type(27);
  static const int Auction_SC_OtherBuy_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_SC_OtherBuy, item_),
  };
  Auction_SC_OtherBuy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Auction_SC_OtherBuy_descriptor_,
      Auction_SC_OtherBuy::default_instance_,
      Auction_SC_OtherBuy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_SC_OtherBuy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auction_SC_OtherBuy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Auction_SC_OtherBuy));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_auction_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AuctionItem_descriptor_, &AuctionItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Auction_CS_GetAuctionInfo_descriptor_, &Auction_CS_GetAuctionInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Auction_SC_GetAuctionInfo_descriptor_, &Auction_SC_GetAuctionInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Auction_CS_AuctionItem_descriptor_, &Auction_CS_AuctionItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Auction_SC_AuctionItem_descriptor_, &Auction_SC_AuctionItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Auction_CS_AuctionItemAgain_descriptor_, &Auction_CS_AuctionItemAgain::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Auction_SC_AuctionItemAgain_descriptor_, &Auction_SC_AuctionItemAgain::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Auction_CS_RemoveItem_descriptor_, &Auction_CS_RemoveItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Auction_SC_RemoveItem_descriptor_, &Auction_SC_RemoveItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Auction_CS_SearchItem_descriptor_, &Auction_CS_SearchItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Auction_SC_SearchItem_descriptor_, &Auction_SC_SearchItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Auction_CS_BrowseItem_descriptor_, &Auction_CS_BrowseItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Auction_SC_BrowseItem_descriptor_, &Auction_SC_BrowseItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Auction_CS_BuyItem_descriptor_, &Auction_CS_BuyItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Auction_SC_BuyItem_descriptor_, &Auction_SC_BuyItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Auction_CS_GetAttentionInfo_descriptor_, &Auction_CS_GetAttentionInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Auction_SC_GetAttentionInfo_descriptor_, &Auction_SC_GetAttentionInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Auction_CS_AttentionItem_descriptor_, &Auction_CS_AttentionItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Auction_SC_AttentionItem_descriptor_, &Auction_SC_AttentionItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Auction_CS_CancelAttentionItem_descriptor_, &Auction_CS_CancelAttentionItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Auction_SC_CancelAttentionItem_descriptor_, &Auction_SC_CancelAttentionItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Auction_CS_GetCaseInfo_descriptor_, &Auction_CS_GetCaseInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Auction_SC_GetCaseInfo_descriptor_, &Auction_SC_GetCaseInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Auction_CS_GetAuctionItemNum_descriptor_, &Auction_CS_GetAuctionItemNum::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Auction_SC_GetAuctionItemNum_descriptor_, &Auction_SC_GetAuctionItemNum::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Auction_CS_GetAuctionItem_descriptor_, &Auction_CS_GetAuctionItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Auction_SC_GetAuctionItem_descriptor_, &Auction_SC_GetAuctionItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Auction_SC_OtherBuy_descriptor_, &Auction_SC_OtherBuy::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_auction_2eproto() {
  delete AuctionItem::default_instance_;
  delete AuctionItem_reflection_;
  delete Auction_CS_GetAuctionInfo::default_instance_;
  delete Auction_CS_GetAuctionInfo_reflection_;
  delete Auction_SC_GetAuctionInfo::default_instance_;
  delete Auction_SC_GetAuctionInfo_reflection_;
  delete Auction_CS_AuctionItem::default_instance_;
  delete Auction_CS_AuctionItem_reflection_;
  delete Auction_SC_AuctionItem::default_instance_;
  delete Auction_SC_AuctionItem_reflection_;
  delete Auction_CS_AuctionItemAgain::default_instance_;
  delete Auction_CS_AuctionItemAgain_reflection_;
  delete Auction_SC_AuctionItemAgain::default_instance_;
  delete Auction_SC_AuctionItemAgain_reflection_;
  delete Auction_CS_RemoveItem::default_instance_;
  delete Auction_CS_RemoveItem_reflection_;
  delete Auction_SC_RemoveItem::default_instance_;
  delete Auction_SC_RemoveItem_reflection_;
  delete Auction_CS_SearchItem::default_instance_;
  delete Auction_CS_SearchItem_reflection_;
  delete Auction_SC_SearchItem::default_instance_;
  delete Auction_SC_SearchItem_reflection_;
  delete Auction_CS_BrowseItem::default_instance_;
  delete Auction_CS_BrowseItem_reflection_;
  delete Auction_SC_BrowseItem::default_instance_;
  delete Auction_SC_BrowseItem_reflection_;
  delete Auction_CS_BuyItem::default_instance_;
  delete Auction_CS_BuyItem_reflection_;
  delete Auction_SC_BuyItem::default_instance_;
  delete Auction_SC_BuyItem_reflection_;
  delete Auction_CS_GetAttentionInfo::default_instance_;
  delete Auction_CS_GetAttentionInfo_reflection_;
  delete Auction_SC_GetAttentionInfo::default_instance_;
  delete Auction_SC_GetAttentionInfo_reflection_;
  delete Auction_CS_AttentionItem::default_instance_;
  delete Auction_CS_AttentionItem_reflection_;
  delete Auction_SC_AttentionItem::default_instance_;
  delete Auction_SC_AttentionItem_reflection_;
  delete Auction_CS_CancelAttentionItem::default_instance_;
  delete Auction_CS_CancelAttentionItem_reflection_;
  delete Auction_SC_CancelAttentionItem::default_instance_;
  delete Auction_SC_CancelAttentionItem_reflection_;
  delete Auction_CS_GetCaseInfo::default_instance_;
  delete Auction_CS_GetCaseInfo_reflection_;
  delete Auction_SC_GetCaseInfo::default_instance_;
  delete Auction_SC_GetCaseInfo_reflection_;
  delete Auction_CS_GetAuctionItemNum::default_instance_;
  delete Auction_CS_GetAuctionItemNum_reflection_;
  delete Auction_SC_GetAuctionItemNum::default_instance_;
  delete Auction_SC_GetAuctionItemNum_reflection_;
  delete Auction_CS_GetAuctionItem::default_instance_;
  delete Auction_CS_GetAuctionItem_reflection_;
  delete Auction_SC_GetAuctionItem::default_instance_;
  delete Auction_SC_GetAuctionItem_reflection_;
  delete Auction_SC_OtherBuy::default_instance_;
  delete Auction_SC_OtherBuy_reflection_;
}

void protobuf_AddDesc_auction_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::proto::message::protobuf_AddDesc_common_2eproto();
  ::proto::message::protobuf_AddDesc_item_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rauction.proto\022\rproto.message\032\014common.p"
    "roto\032\nitem.proto\"\312\001\n\013AuctionItem\022\014\n\004uuid"
    "\030\001 \001(\004\022\n\n\002id\030\002 \001(\005\022\016\n\006charid\030\003 \001(\004\022\016\n\006st"
    "atus\030\004 \001(\005\022\014\n\004gold\030\005 \001(\005\022\014\n\004time\030\006 \001(\005\022\023"
    "\n\013att_persons\030\007 \001(\005\022&\n\titem_info\030\010 \001(\0132\023"
    ".proto.message.Item\022(\n\nequip_info\030\t \001(\0132"
    "\024.proto.message.Equip\"\033\n\031Auction_CS_GetA"
    "uctionInfo\"X\n\031Auction_SC_GetAuctionInfo\022"
    "\014\n\004rate\030\001 \001(\005\022-\n\titem_list\030\002 \003(\0132\032.proto"
    ".message.AuctionItem\"A\n\026Auction_CS_Aucti"
    "onItem\022\014\n\004uuid\030\001 \001(\004\022\013\n\003num\030\002 \001(\005\022\014\n\004gol"
    "d\030\003 \001(\005\"W\n\026Auction_SC_AuctionItem\022\016\n\006res"
    "ult\030\001 \001(\005\022-\n\titem_info\030\002 \001(\0132\032.proto.mes"
    "sage.AuctionItem\"+\n\033Auction_CS_AuctionIt"
    "emAgain\022\014\n\004uuid\030\001 \001(\004\"\\\n\033Auction_SC_Auct"
    "ionItemAgain\022\016\n\006result\030\001 \001(\005\022-\n\titem_inf"
    "o\030\002 \001(\0132\032.proto.message.AuctionItem\"%\n\025A"
    "uction_CS_RemoveItem\022\014\n\004uuid\030\001 \001(\004\"5\n\025Au"
    "ction_SC_RemoveItem\022\016\n\006result\030\001 \001(\005\022\014\n\004u"
    "uid\030\002 \001(\004\"\202\002\n\025Auction_CS_SearchItem\022\020\n\010i"
    "s_again\030\001 \001(\005\022\022\n\nis_auction\030\002 \001(\005\022\016\n\006pro"
    "_id\030\003 \001(\005\022\024\n\014item_id_list\030\004 \003(\005\022\022\n\ncomba"
    "t_min\030\005 \001(\005\022\021\n\tsort_type\030\006 \001(\005\022\021\n\tprice_"
    "min\030\007 \001(\005\022\021\n\tprice_max\030\010 \001(\005\022\023\n\013quality_"
    "min\030\t \001(\005\022\023\n\013quality_max\030\n \001(\005\022\023\n\013start_"
    "index\030\013 \001(\005\022\021\n\tend_index\030\014 \001(\005\"\201\001\n\025Aucti"
    "on_SC_SearchItem\022\021\n\ttotal_num\030\001 \001(\005\022\023\n\013s"
    "tart_index\030\002 \001(\005\022\021\n\tend_index\030\003 \001(\005\022-\n\ti"
    "tem_list\030\004 \003(\0132\032.proto.message.AuctionIt"
    "em\"\332\001\n\025Auction_CS_BrowseItem\022\020\n\010is_again"
    "\030\001 \001(\005\022\022\n\nis_auction\030\002 \001(\005\022\016\n\006pro_id\030\003 \001"
    "(\005\022\024\n\014item_id_list\030\004 \003(\005\022\020\n\010stren_lv\030\005 \001"
    "(\005\022\021\n\tsort_type\030\006 \001(\005\022\023\n\013quality_min\030\007 \001"
    "(\005\022\023\n\013quality_max\030\010 \001(\005\022\023\n\013start_index\030\t"
    " \001(\005\022\021\n\tend_index\030\n \001(\005\"\201\001\n\025Auction_SC_B"
    "rowseItem\022\021\n\ttotal_num\030\001 \001(\005\022\023\n\013start_in"
    "dex\030\002 \001(\005\022\021\n\tend_index\030\003 \001(\005\022-\n\titem_lis"
    "t\030\004 \003(\0132\032.proto.message.AuctionItem\"3\n\022A"
    "uction_CS_BuyItem\022\014\n\004uuid\030\001 \001(\004\022\017\n\007buy_n"
    "um\030\002 \001(\005\"W\n\022Auction_SC_BuyItem\022\016\n\006result"
    "\030\001 \001(\005\022\014\n\004uuid\030\002 \001(\004\022\017\n\007buy_num\030\003 \001(\005\022\022\n"
    "\nremain_num\030\004 \001(\005\"1\n\033Auction_CS_GetAtten"
    "tionInfo\022\022\n\nis_auction\030\001 \001(\005\"`\n\033Auction_"
    "SC_GetAttentionInfo\022\022\n\nis_auction\030\001 \001(\005\022"
    "-\n\titem_list\030\002 \003(\0132\032.proto.message.Aucti"
    "onItem\"(\n\030Auction_CS_AttentionItem\022\014\n\004uu"
    "id\030\001 \001(\004\"M\n\030Auction_SC_AttentionItem\022\016\n\006"
    "result\030\001 \001(\005\022\014\n\004uuid\030\002 \001(\004\022\023\n\013att_person"
    "s\030\003 \001(\005\".\n\036Auction_CS_CancelAttentionIte"
    "m\022\014\n\004uuid\030\001 \001(\004\">\n\036Auction_SC_CancelAtte"
    "ntionItem\022\016\n\006result\030\001 \001(\005\022\014\n\004uuid\030\002 \001(\004\""
    "$\n\026Auction_CS_GetCaseInfo\022\n\n\002id\030\001 \001(\005\"`\n"
    "\026Auction_SC_GetCaseInfo\022\027\n\017recommend_pri"
    "ce\030\001 \001(\005\022-\n\titem_list\030\002 \003(\0132\032.proto.mess"
    "age.AuctionItem\"G\n\034Auction_CS_GetAuction"
    "ItemNum\022\022\n\nis_auction\030\001 \001(\005\022\023\n\013pro_id_li"
    "st\030\002 \003(\005\"]\n\034Auction_SC_GetAuctionItemNum"
    "\022\022\n\nis_auction\030\001 \001(\005\022)\n\013id_num_list\030\002 \003("
    "\0132\024.proto.message.IDNum\"g\n\031Auction_CS_Ge"
    "tAuctionItem\022\021\n\titem_uuid\030\001 \001(\004\022\017\n\007item_"
    "id\030\002 \001(\005\022\023\n\013start_index\030\003 \001(\005\022\021\n\tend_ind"
    "ex\030\004 \001(\005\"\205\001\n\031Auction_SC_GetAuctionItem\022\021"
    "\n\ttotal_num\030\001 \001(\005\022\023\n\013start_index\030\002 \001(\005\022\021"
    "\n\tend_index\030\003 \001(\005\022-\n\titem_list\030\004 \003(\0132\032.p"
    "roto.message.AuctionItem\"\?\n\023Auction_SC_O"
    "therBuy\022(\n\004item\030\001 \001(\0132\032.proto.message.Au"
    "ctionItemB\017\n\rproto.message", 2666);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "auction.proto", &protobuf_RegisterTypes);
  AuctionItem::default_instance_ = new AuctionItem();
  Auction_CS_GetAuctionInfo::default_instance_ = new Auction_CS_GetAuctionInfo();
  Auction_SC_GetAuctionInfo::default_instance_ = new Auction_SC_GetAuctionInfo();
  Auction_CS_AuctionItem::default_instance_ = new Auction_CS_AuctionItem();
  Auction_SC_AuctionItem::default_instance_ = new Auction_SC_AuctionItem();
  Auction_CS_AuctionItemAgain::default_instance_ = new Auction_CS_AuctionItemAgain();
  Auction_SC_AuctionItemAgain::default_instance_ = new Auction_SC_AuctionItemAgain();
  Auction_CS_RemoveItem::default_instance_ = new Auction_CS_RemoveItem();
  Auction_SC_RemoveItem::default_instance_ = new Auction_SC_RemoveItem();
  Auction_CS_SearchItem::default_instance_ = new Auction_CS_SearchItem();
  Auction_SC_SearchItem::default_instance_ = new Auction_SC_SearchItem();
  Auction_CS_BrowseItem::default_instance_ = new Auction_CS_BrowseItem();
  Auction_SC_BrowseItem::default_instance_ = new Auction_SC_BrowseItem();
  Auction_CS_BuyItem::default_instance_ = new Auction_CS_BuyItem();
  Auction_SC_BuyItem::default_instance_ = new Auction_SC_BuyItem();
  Auction_CS_GetAttentionInfo::default_instance_ = new Auction_CS_GetAttentionInfo();
  Auction_SC_GetAttentionInfo::default_instance_ = new Auction_SC_GetAttentionInfo();
  Auction_CS_AttentionItem::default_instance_ = new Auction_CS_AttentionItem();
  Auction_SC_AttentionItem::default_instance_ = new Auction_SC_AttentionItem();
  Auction_CS_CancelAttentionItem::default_instance_ = new Auction_CS_CancelAttentionItem();
  Auction_SC_CancelAttentionItem::default_instance_ = new Auction_SC_CancelAttentionItem();
  Auction_CS_GetCaseInfo::default_instance_ = new Auction_CS_GetCaseInfo();
  Auction_SC_GetCaseInfo::default_instance_ = new Auction_SC_GetCaseInfo();
  Auction_CS_GetAuctionItemNum::default_instance_ = new Auction_CS_GetAuctionItemNum();
  Auction_SC_GetAuctionItemNum::default_instance_ = new Auction_SC_GetAuctionItemNum();
  Auction_CS_GetAuctionItem::default_instance_ = new Auction_CS_GetAuctionItem();
  Auction_SC_GetAuctionItem::default_instance_ = new Auction_SC_GetAuctionItem();
  Auction_SC_OtherBuy::default_instance_ = new Auction_SC_OtherBuy();
  AuctionItem::default_instance_->InitAsDefaultInstance();
  Auction_CS_GetAuctionInfo::default_instance_->InitAsDefaultInstance();
  Auction_SC_GetAuctionInfo::default_instance_->InitAsDefaultInstance();
  Auction_CS_AuctionItem::default_instance_->InitAsDefaultInstance();
  Auction_SC_AuctionItem::default_instance_->InitAsDefaultInstance();
  Auction_CS_AuctionItemAgain::default_instance_->InitAsDefaultInstance();
  Auction_SC_AuctionItemAgain::default_instance_->InitAsDefaultInstance();
  Auction_CS_RemoveItem::default_instance_->InitAsDefaultInstance();
  Auction_SC_RemoveItem::default_instance_->InitAsDefaultInstance();
  Auction_CS_SearchItem::default_instance_->InitAsDefaultInstance();
  Auction_SC_SearchItem::default_instance_->InitAsDefaultInstance();
  Auction_CS_BrowseItem::default_instance_->InitAsDefaultInstance();
  Auction_SC_BrowseItem::default_instance_->InitAsDefaultInstance();
  Auction_CS_BuyItem::default_instance_->InitAsDefaultInstance();
  Auction_SC_BuyItem::default_instance_->InitAsDefaultInstance();
  Auction_CS_GetAttentionInfo::default_instance_->InitAsDefaultInstance();
  Auction_SC_GetAttentionInfo::default_instance_->InitAsDefaultInstance();
  Auction_CS_AttentionItem::default_instance_->InitAsDefaultInstance();
  Auction_SC_AttentionItem::default_instance_->InitAsDefaultInstance();
  Auction_CS_CancelAttentionItem::default_instance_->InitAsDefaultInstance();
  Auction_SC_CancelAttentionItem::default_instance_->InitAsDefaultInstance();
  Auction_CS_GetCaseInfo::default_instance_->InitAsDefaultInstance();
  Auction_SC_GetCaseInfo::default_instance_->InitAsDefaultInstance();
  Auction_CS_GetAuctionItemNum::default_instance_->InitAsDefaultInstance();
  Auction_SC_GetAuctionItemNum::default_instance_->InitAsDefaultInstance();
  Auction_CS_GetAuctionItem::default_instance_->InitAsDefaultInstance();
  Auction_SC_GetAuctionItem::default_instance_->InitAsDefaultInstance();
  Auction_SC_OtherBuy::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_auction_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_auction_2eproto {
  StaticDescriptorInitializer_auction_2eproto() {
    protobuf_AddDesc_auction_2eproto();
  }
} static_descriptor_initializer_auction_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int AuctionItem::kUuidFieldNumber;
const int AuctionItem::kIdFieldNumber;
const int AuctionItem::kCharidFieldNumber;
const int AuctionItem::kStatusFieldNumber;
const int AuctionItem::kGoldFieldNumber;
const int AuctionItem::kTimeFieldNumber;
const int AuctionItem::kAttPersonsFieldNumber;
const int AuctionItem::kItemInfoFieldNumber;
const int AuctionItem::kEquipInfoFieldNumber;
#endif  // !_MSC_VER

AuctionItem::AuctionItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AuctionItem::InitAsDefaultInstance() {
  item_info_ = const_cast< ::proto::message::Item*>(&::proto::message::Item::default_instance());
  equip_info_ = const_cast< ::proto::message::Equip*>(&::proto::message::Equip::default_instance());
}

AuctionItem::AuctionItem(const AuctionItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AuctionItem::SharedCtor() {
  _cached_size_ = 0;
  uuid_ = GOOGLE_ULONGLONG(0);
  id_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  status_ = 0;
  gold_ = 0;
  time_ = 0;
  att_persons_ = 0;
  item_info_ = NULL;
  equip_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuctionItem::~AuctionItem() {
  SharedDtor();
}

void AuctionItem::SharedDtor() {
  if (this != default_instance_) {
    delete item_info_;
    delete equip_info_;
  }
}

void AuctionItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuctionItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuctionItem_descriptor_;
}

const AuctionItem& AuctionItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_auction_2eproto();
  return *default_instance_;
}

AuctionItem* AuctionItem::default_instance_ = NULL;

AuctionItem* AuctionItem::New() const {
  return new AuctionItem;
}

void AuctionItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uuid_ = GOOGLE_ULONGLONG(0);
    id_ = 0;
    charid_ = GOOGLE_ULONGLONG(0);
    status_ = 0;
    gold_ = 0;
    time_ = 0;
    att_persons_ = 0;
    if (has_item_info()) {
      if (item_info_ != NULL) item_info_->::proto::message::Item::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_equip_info()) {
      if (equip_info_ != NULL) equip_info_->::proto::message::Equip::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AuctionItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_status;
        break;
      }

      // optional int32 status = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_gold;
        break;
      }

      // optional int32 gold = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_time;
        break;
      }

      // optional int32 time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_att_persons;
        break;
      }

      // optional int32 att_persons = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_att_persons:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &att_persons_)));
          set_has_att_persons();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_item_info;
        break;
      }

      // optional .proto.message.Item item_info = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_equip_info;
        break;
      }

      // optional .proto.message.Equip equip_info = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equip_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AuctionItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uuid(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional int32 status = 4;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->status(), output);
  }

  // optional int32 gold = 5;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->gold(), output);
  }

  // optional int32 time = 6;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->time(), output);
  }

  // optional int32 att_persons = 7;
  if (has_att_persons()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->att_persons(), output);
  }

  // optional .proto.message.Item item_info = 8;
  if (has_item_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->item_info(), output);
  }

  // optional .proto.message.Equip equip_info = 9;
  if (has_equip_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->equip_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AuctionItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 uuid = 1;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uuid(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional int32 status = 4;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->status(), target);
  }

  // optional int32 gold = 5;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->gold(), target);
  }

  // optional int32 time = 6;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->time(), target);
  }

  // optional int32 att_persons = 7;
  if (has_att_persons()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->att_persons(), target);
  }

  // optional .proto.message.Item item_info = 8;
  if (has_item_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->item_info(), target);
  }

  // optional .proto.message.Equip equip_info = 9;
  if (has_equip_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->equip_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AuctionItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 uuid = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional uint64 charid = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional int32 status = 4;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional int32 gold = 5;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold());
    }

    // optional int32 time = 6;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

    // optional int32 att_persons = 7;
    if (has_att_persons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->att_persons());
    }

    // optional .proto.message.Item item_info = 8;
    if (has_item_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item_info());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .proto.message.Equip equip_info = 9;
    if (has_equip_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equip_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuctionItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AuctionItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AuctionItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AuctionItem::MergeFrom(const AuctionItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_att_persons()) {
      set_att_persons(from.att_persons());
    }
    if (from.has_item_info()) {
      mutable_item_info()->::proto::message::Item::MergeFrom(from.item_info());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_equip_info()) {
      mutable_equip_info()->::proto::message::Equip::MergeFrom(from.equip_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AuctionItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuctionItem::CopyFrom(const AuctionItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuctionItem::IsInitialized() const {

  return true;
}

void AuctionItem::Swap(AuctionItem* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(id_, other->id_);
    std::swap(charid_, other->charid_);
    std::swap(status_, other->status_);
    std::swap(gold_, other->gold_);
    std::swap(time_, other->time_);
    std::swap(att_persons_, other->att_persons_);
    std::swap(item_info_, other->item_info_);
    std::swap(equip_info_, other->equip_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AuctionItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuctionItem_descriptor_;
  metadata.reflection = AuctionItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Auction_CS_GetAuctionInfo::Auction_CS_GetAuctionInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Auction_CS_GetAuctionInfo::InitAsDefaultInstance() {
}

Auction_CS_GetAuctionInfo::Auction_CS_GetAuctionInfo(const Auction_CS_GetAuctionInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Auction_CS_GetAuctionInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Auction_CS_GetAuctionInfo::~Auction_CS_GetAuctionInfo() {
  SharedDtor();
}

void Auction_CS_GetAuctionInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Auction_CS_GetAuctionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Auction_CS_GetAuctionInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Auction_CS_GetAuctionInfo_descriptor_;
}

const Auction_CS_GetAuctionInfo& Auction_CS_GetAuctionInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_auction_2eproto();
  return *default_instance_;
}

Auction_CS_GetAuctionInfo* Auction_CS_GetAuctionInfo::default_instance_ = NULL;

Auction_CS_GetAuctionInfo* Auction_CS_GetAuctionInfo::New() const {
  return new Auction_CS_GetAuctionInfo;
}

void Auction_CS_GetAuctionInfo::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Auction_CS_GetAuctionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Auction_CS_GetAuctionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Auction_CS_GetAuctionInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Auction_CS_GetAuctionInfo::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Auction_CS_GetAuctionInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Auction_CS_GetAuctionInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Auction_CS_GetAuctionInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Auction_CS_GetAuctionInfo::MergeFrom(const Auction_CS_GetAuctionInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Auction_CS_GetAuctionInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Auction_CS_GetAuctionInfo::CopyFrom(const Auction_CS_GetAuctionInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Auction_CS_GetAuctionInfo::IsInitialized() const {

  return true;
}

void Auction_CS_GetAuctionInfo::Swap(Auction_CS_GetAuctionInfo* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Auction_CS_GetAuctionInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Auction_CS_GetAuctionInfo_descriptor_;
  metadata.reflection = Auction_CS_GetAuctionInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Auction_SC_GetAuctionInfo::kRateFieldNumber;
const int Auction_SC_GetAuctionInfo::kItemListFieldNumber;
#endif  // !_MSC_VER

Auction_SC_GetAuctionInfo::Auction_SC_GetAuctionInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Auction_SC_GetAuctionInfo::InitAsDefaultInstance() {
}

Auction_SC_GetAuctionInfo::Auction_SC_GetAuctionInfo(const Auction_SC_GetAuctionInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Auction_SC_GetAuctionInfo::SharedCtor() {
  _cached_size_ = 0;
  rate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Auction_SC_GetAuctionInfo::~Auction_SC_GetAuctionInfo() {
  SharedDtor();
}

void Auction_SC_GetAuctionInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Auction_SC_GetAuctionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Auction_SC_GetAuctionInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Auction_SC_GetAuctionInfo_descriptor_;
}

const Auction_SC_GetAuctionInfo& Auction_SC_GetAuctionInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_auction_2eproto();
  return *default_instance_;
}

Auction_SC_GetAuctionInfo* Auction_SC_GetAuctionInfo::default_instance_ = NULL;

Auction_SC_GetAuctionInfo* Auction_SC_GetAuctionInfo::New() const {
  return new Auction_SC_GetAuctionInfo;
}

void Auction_SC_GetAuctionInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rate_ = 0;
  }
  item_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Auction_SC_GetAuctionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 rate = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rate_)));
          set_has_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item_list;
        break;
      }

      // repeated .proto.message.AuctionItem item_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Auction_SC_GetAuctionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 rate = 1;
  if (has_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rate(), output);
  }

  // repeated .proto.message.AuctionItem item_list = 2;
  for (int i = 0; i < this->item_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Auction_SC_GetAuctionInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 rate = 1;
  if (has_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rate(), target);
  }

  // repeated .proto.message.AuctionItem item_list = 2;
  for (int i = 0; i < this->item_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Auction_SC_GetAuctionInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 rate = 1;
    if (has_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rate());
    }

  }
  // repeated .proto.message.AuctionItem item_list = 2;
  total_size += 1 * this->item_list_size();
  for (int i = 0; i < this->item_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Auction_SC_GetAuctionInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Auction_SC_GetAuctionInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Auction_SC_GetAuctionInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Auction_SC_GetAuctionInfo::MergeFrom(const Auction_SC_GetAuctionInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_list_.MergeFrom(from.item_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rate()) {
      set_rate(from.rate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Auction_SC_GetAuctionInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Auction_SC_GetAuctionInfo::CopyFrom(const Auction_SC_GetAuctionInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Auction_SC_GetAuctionInfo::IsInitialized() const {

  return true;
}

void Auction_SC_GetAuctionInfo::Swap(Auction_SC_GetAuctionInfo* other) {
  if (other != this) {
    std::swap(rate_, other->rate_);
    item_list_.Swap(&other->item_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Auction_SC_GetAuctionInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Auction_SC_GetAuctionInfo_descriptor_;
  metadata.reflection = Auction_SC_GetAuctionInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Auction_CS_AuctionItem::kUuidFieldNumber;
const int Auction_CS_AuctionItem::kNumFieldNumber;
const int Auction_CS_AuctionItem::kGoldFieldNumber;
#endif  // !_MSC_VER

Auction_CS_AuctionItem::Auction_CS_AuctionItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Auction_CS_AuctionItem::InitAsDefaultInstance() {
}

Auction_CS_AuctionItem::Auction_CS_AuctionItem(const Auction_CS_AuctionItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Auction_CS_AuctionItem::SharedCtor() {
  _cached_size_ = 0;
  uuid_ = GOOGLE_ULONGLONG(0);
  num_ = 0;
  gold_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Auction_CS_AuctionItem::~Auction_CS_AuctionItem() {
  SharedDtor();
}

void Auction_CS_AuctionItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Auction_CS_AuctionItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Auction_CS_AuctionItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Auction_CS_AuctionItem_descriptor_;
}

const Auction_CS_AuctionItem& Auction_CS_AuctionItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_auction_2eproto();
  return *default_instance_;
}

Auction_CS_AuctionItem* Auction_CS_AuctionItem::default_instance_ = NULL;

Auction_CS_AuctionItem* Auction_CS_AuctionItem::New() const {
  return new Auction_CS_AuctionItem;
}

void Auction_CS_AuctionItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uuid_ = GOOGLE_ULONGLONG(0);
    num_ = 0;
    gold_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Auction_CS_AuctionItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional int32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gold;
        break;
      }

      // optional int32 gold = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Auction_CS_AuctionItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uuid(), output);
  }

  // optional int32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  // optional int32 gold = 3;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gold(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Auction_CS_AuctionItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 uuid = 1;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uuid(), target);
  }

  // optional int32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  // optional int32 gold = 3;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gold(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Auction_CS_AuctionItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 uuid = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

    // optional int32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int32 gold = 3;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Auction_CS_AuctionItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Auction_CS_AuctionItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Auction_CS_AuctionItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Auction_CS_AuctionItem::MergeFrom(const Auction_CS_AuctionItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Auction_CS_AuctionItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Auction_CS_AuctionItem::CopyFrom(const Auction_CS_AuctionItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Auction_CS_AuctionItem::IsInitialized() const {

  return true;
}

void Auction_CS_AuctionItem::Swap(Auction_CS_AuctionItem* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(num_, other->num_);
    std::swap(gold_, other->gold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Auction_CS_AuctionItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Auction_CS_AuctionItem_descriptor_;
  metadata.reflection = Auction_CS_AuctionItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Auction_SC_AuctionItem::kResultFieldNumber;
const int Auction_SC_AuctionItem::kItemInfoFieldNumber;
#endif  // !_MSC_VER

Auction_SC_AuctionItem::Auction_SC_AuctionItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Auction_SC_AuctionItem::InitAsDefaultInstance() {
  item_info_ = const_cast< ::proto::message::AuctionItem*>(&::proto::message::AuctionItem::default_instance());
}

Auction_SC_AuctionItem::Auction_SC_AuctionItem(const Auction_SC_AuctionItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Auction_SC_AuctionItem::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  item_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Auction_SC_AuctionItem::~Auction_SC_AuctionItem() {
  SharedDtor();
}

void Auction_SC_AuctionItem::SharedDtor() {
  if (this != default_instance_) {
    delete item_info_;
  }
}

void Auction_SC_AuctionItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Auction_SC_AuctionItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Auction_SC_AuctionItem_descriptor_;
}

const Auction_SC_AuctionItem& Auction_SC_AuctionItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_auction_2eproto();
  return *default_instance_;
}

Auction_SC_AuctionItem* Auction_SC_AuctionItem::default_instance_ = NULL;

Auction_SC_AuctionItem* Auction_SC_AuctionItem::New() const {
  return new Auction_SC_AuctionItem;
}

void Auction_SC_AuctionItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_item_info()) {
      if (item_info_ != NULL) item_info_->::proto::message::AuctionItem::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Auction_SC_AuctionItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item_info;
        break;
      }

      // optional .proto.message.AuctionItem item_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Auction_SC_AuctionItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .proto.message.AuctionItem item_info = 2;
  if (has_item_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Auction_SC_AuctionItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .proto.message.AuctionItem item_info = 2;
  if (has_item_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Auction_SC_AuctionItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .proto.message.AuctionItem item_info = 2;
    if (has_item_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Auction_SC_AuctionItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Auction_SC_AuctionItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Auction_SC_AuctionItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Auction_SC_AuctionItem::MergeFrom(const Auction_SC_AuctionItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_item_info()) {
      mutable_item_info()->::proto::message::AuctionItem::MergeFrom(from.item_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Auction_SC_AuctionItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Auction_SC_AuctionItem::CopyFrom(const Auction_SC_AuctionItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Auction_SC_AuctionItem::IsInitialized() const {

  return true;
}

void Auction_SC_AuctionItem::Swap(Auction_SC_AuctionItem* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(item_info_, other->item_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Auction_SC_AuctionItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Auction_SC_AuctionItem_descriptor_;
  metadata.reflection = Auction_SC_AuctionItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Auction_CS_AuctionItemAgain::kUuidFieldNumber;
#endif  // !_MSC_VER

Auction_CS_AuctionItemAgain::Auction_CS_AuctionItemAgain()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Auction_CS_AuctionItemAgain::InitAsDefaultInstance() {
}

Auction_CS_AuctionItemAgain::Auction_CS_AuctionItemAgain(const Auction_CS_AuctionItemAgain& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Auction_CS_AuctionItemAgain::SharedCtor() {
  _cached_size_ = 0;
  uuid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Auction_CS_AuctionItemAgain::~Auction_CS_AuctionItemAgain() {
  SharedDtor();
}

void Auction_CS_AuctionItemAgain::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Auction_CS_AuctionItemAgain::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Auction_CS_AuctionItemAgain::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Auction_CS_AuctionItemAgain_descriptor_;
}

const Auction_CS_AuctionItemAgain& Auction_CS_AuctionItemAgain::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_auction_2eproto();
  return *default_instance_;
}

Auction_CS_AuctionItemAgain* Auction_CS_AuctionItemAgain::default_instance_ = NULL;

Auction_CS_AuctionItemAgain* Auction_CS_AuctionItemAgain::New() const {
  return new Auction_CS_AuctionItemAgain;
}

void Auction_CS_AuctionItemAgain::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uuid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Auction_CS_AuctionItemAgain::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Auction_CS_AuctionItemAgain::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Auction_CS_AuctionItemAgain::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 uuid = 1;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Auction_CS_AuctionItemAgain::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 uuid = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Auction_CS_AuctionItemAgain::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Auction_CS_AuctionItemAgain* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Auction_CS_AuctionItemAgain*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Auction_CS_AuctionItemAgain::MergeFrom(const Auction_CS_AuctionItemAgain& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Auction_CS_AuctionItemAgain::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Auction_CS_AuctionItemAgain::CopyFrom(const Auction_CS_AuctionItemAgain& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Auction_CS_AuctionItemAgain::IsInitialized() const {

  return true;
}

void Auction_CS_AuctionItemAgain::Swap(Auction_CS_AuctionItemAgain* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Auction_CS_AuctionItemAgain::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Auction_CS_AuctionItemAgain_descriptor_;
  metadata.reflection = Auction_CS_AuctionItemAgain_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Auction_SC_AuctionItemAgain::kResultFieldNumber;
const int Auction_SC_AuctionItemAgain::kItemInfoFieldNumber;
#endif  // !_MSC_VER

Auction_SC_AuctionItemAgain::Auction_SC_AuctionItemAgain()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Auction_SC_AuctionItemAgain::InitAsDefaultInstance() {
  item_info_ = const_cast< ::proto::message::AuctionItem*>(&::proto::message::AuctionItem::default_instance());
}

Auction_SC_AuctionItemAgain::Auction_SC_AuctionItemAgain(const Auction_SC_AuctionItemAgain& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Auction_SC_AuctionItemAgain::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  item_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Auction_SC_AuctionItemAgain::~Auction_SC_AuctionItemAgain() {
  SharedDtor();
}

void Auction_SC_AuctionItemAgain::SharedDtor() {
  if (this != default_instance_) {
    delete item_info_;
  }
}

void Auction_SC_AuctionItemAgain::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Auction_SC_AuctionItemAgain::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Auction_SC_AuctionItemAgain_descriptor_;
}

const Auction_SC_AuctionItemAgain& Auction_SC_AuctionItemAgain::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_auction_2eproto();
  return *default_instance_;
}

Auction_SC_AuctionItemAgain* Auction_SC_AuctionItemAgain::default_instance_ = NULL;

Auction_SC_AuctionItemAgain* Auction_SC_AuctionItemAgain::New() const {
  return new Auction_SC_AuctionItemAgain;
}

void Auction_SC_AuctionItemAgain::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_item_info()) {
      if (item_info_ != NULL) item_info_->::proto::message::AuctionItem::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Auction_SC_AuctionItemAgain::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item_info;
        break;
      }

      // optional .proto.message.AuctionItem item_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Auction_SC_AuctionItemAgain::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .proto.message.AuctionItem item_info = 2;
  if (has_item_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Auction_SC_AuctionItemAgain::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .proto.message.AuctionItem item_info = 2;
  if (has_item_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Auction_SC_AuctionItemAgain::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .proto.message.AuctionItem item_info = 2;
    if (has_item_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Auction_SC_AuctionItemAgain::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Auction_SC_AuctionItemAgain* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Auction_SC_AuctionItemAgain*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Auction_SC_AuctionItemAgain::MergeFrom(const Auction_SC_AuctionItemAgain& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_item_info()) {
      mutable_item_info()->::proto::message::AuctionItem::MergeFrom(from.item_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Auction_SC_AuctionItemAgain::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Auction_SC_AuctionItemAgain::CopyFrom(const Auction_SC_AuctionItemAgain& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Auction_SC_AuctionItemAgain::IsInitialized() const {

  return true;
}

void Auction_SC_AuctionItemAgain::Swap(Auction_SC_AuctionItemAgain* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(item_info_, other->item_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Auction_SC_AuctionItemAgain::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Auction_SC_AuctionItemAgain_descriptor_;
  metadata.reflection = Auction_SC_AuctionItemAgain_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Auction_CS_RemoveItem::kUuidFieldNumber;
#endif  // !_MSC_VER

Auction_CS_RemoveItem::Auction_CS_RemoveItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Auction_CS_RemoveItem::InitAsDefaultInstance() {
}

Auction_CS_RemoveItem::Auction_CS_RemoveItem(const Auction_CS_RemoveItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Auction_CS_RemoveItem::SharedCtor() {
  _cached_size_ = 0;
  uuid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Auction_CS_RemoveItem::~Auction_CS_RemoveItem() {
  SharedDtor();
}

void Auction_CS_RemoveItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Auction_CS_RemoveItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Auction_CS_RemoveItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Auction_CS_RemoveItem_descriptor_;
}

const Auction_CS_RemoveItem& Auction_CS_RemoveItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_auction_2eproto();
  return *default_instance_;
}

Auction_CS_RemoveItem* Auction_CS_RemoveItem::default_instance_ = NULL;

Auction_CS_RemoveItem* Auction_CS_RemoveItem::New() const {
  return new Auction_CS_RemoveItem;
}

void Auction_CS_RemoveItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uuid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Auction_CS_RemoveItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Auction_CS_RemoveItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Auction_CS_RemoveItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 uuid = 1;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Auction_CS_RemoveItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 uuid = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Auction_CS_RemoveItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Auction_CS_RemoveItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Auction_CS_RemoveItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Auction_CS_RemoveItem::MergeFrom(const Auction_CS_RemoveItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Auction_CS_RemoveItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Auction_CS_RemoveItem::CopyFrom(const Auction_CS_RemoveItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Auction_CS_RemoveItem::IsInitialized() const {

  return true;
}

void Auction_CS_RemoveItem::Swap(Auction_CS_RemoveItem* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Auction_CS_RemoveItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Auction_CS_RemoveItem_descriptor_;
  metadata.reflection = Auction_CS_RemoveItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Auction_SC_RemoveItem::kResultFieldNumber;
const int Auction_SC_RemoveItem::kUuidFieldNumber;
#endif  // !_MSC_VER

Auction_SC_RemoveItem::Auction_SC_RemoveItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Auction_SC_RemoveItem::InitAsDefaultInstance() {
}

Auction_SC_RemoveItem::Auction_SC_RemoveItem(const Auction_SC_RemoveItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Auction_SC_RemoveItem::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  uuid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Auction_SC_RemoveItem::~Auction_SC_RemoveItem() {
  SharedDtor();
}

void Auction_SC_RemoveItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Auction_SC_RemoveItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Auction_SC_RemoveItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Auction_SC_RemoveItem_descriptor_;
}

const Auction_SC_RemoveItem& Auction_SC_RemoveItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_auction_2eproto();
  return *default_instance_;
}

Auction_SC_RemoveItem* Auction_SC_RemoveItem::default_instance_ = NULL;

Auction_SC_RemoveItem* Auction_SC_RemoveItem::New() const {
  return new Auction_SC_RemoveItem;
}

void Auction_SC_RemoveItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    uuid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Auction_SC_RemoveItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uuid;
        break;
      }

      // optional uint64 uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Auction_SC_RemoveItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Auction_SC_RemoveItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Auction_SC_RemoveItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional uint64 uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Auction_SC_RemoveItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Auction_SC_RemoveItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Auction_SC_RemoveItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Auction_SC_RemoveItem::MergeFrom(const Auction_SC_RemoveItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Auction_SC_RemoveItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Auction_SC_RemoveItem::CopyFrom(const Auction_SC_RemoveItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Auction_SC_RemoveItem::IsInitialized() const {

  return true;
}

void Auction_SC_RemoveItem::Swap(Auction_SC_RemoveItem* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(uuid_, other->uuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Auction_SC_RemoveItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Auction_SC_RemoveItem_descriptor_;
  metadata.reflection = Auction_SC_RemoveItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Auction_CS_SearchItem::kIsAgainFieldNumber;
const int Auction_CS_SearchItem::kIsAuctionFieldNumber;
const int Auction_CS_SearchItem::kProIdFieldNumber;
const int Auction_CS_SearchItem::kItemIdListFieldNumber;
const int Auction_CS_SearchItem::kCombatMinFieldNumber;
const int Auction_CS_SearchItem::kSortTypeFieldNumber;
const int Auction_CS_SearchItem::kPriceMinFieldNumber;
const int Auction_CS_SearchItem::kPriceMaxFieldNumber;
const int Auction_CS_SearchItem::kQualityMinFieldNumber;
const int Auction_CS_SearchItem::kQualityMaxFieldNumber;
const int Auction_CS_SearchItem::kStartIndexFieldNumber;
const int Auction_CS_SearchItem::kEndIndexFieldNumber;
#endif  // !_MSC_VER

Auction_CS_SearchItem::Auction_CS_SearchItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Auction_CS_SearchItem::InitAsDefaultInstance() {
}

Auction_CS_SearchItem::Auction_CS_SearchItem(const Auction_CS_SearchItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Auction_CS_SearchItem::SharedCtor() {
  _cached_size_ = 0;
  is_again_ = 0;
  is_auction_ = 0;
  pro_id_ = 0;
  combat_min_ = 0;
  sort_type_ = 0;
  price_min_ = 0;
  price_max_ = 0;
  quality_min_ = 0;
  quality_max_ = 0;
  start_index_ = 0;
  end_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Auction_CS_SearchItem::~Auction_CS_SearchItem() {
  SharedDtor();
}

void Auction_CS_SearchItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Auction_CS_SearchItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Auction_CS_SearchItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Auction_CS_SearchItem_descriptor_;
}

const Auction_CS_SearchItem& Auction_CS_SearchItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_auction_2eproto();
  return *default_instance_;
}

Auction_CS_SearchItem* Auction_CS_SearchItem::default_instance_ = NULL;

Auction_CS_SearchItem* Auction_CS_SearchItem::New() const {
  return new Auction_CS_SearchItem;
}

void Auction_CS_SearchItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_again_ = 0;
    is_auction_ = 0;
    pro_id_ = 0;
    combat_min_ = 0;
    sort_type_ = 0;
    price_min_ = 0;
    price_max_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    quality_min_ = 0;
    quality_max_ = 0;
    start_index_ = 0;
    end_index_ = 0;
  }
  item_id_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Auction_CS_SearchItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 is_again = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_again_)));
          set_has_is_again();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_auction;
        break;
      }

      // optional int32 is_auction = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_auction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_auction_)));
          set_has_is_auction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pro_id;
        break;
      }

      // optional int32 pro_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pro_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pro_id_)));
          set_has_pro_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_item_id_list;
        break;
      }

      // repeated int32 item_id_list = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_item_id_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_item_id_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_item_id_list;
        if (input->ExpectTag(40)) goto parse_combat_min;
        break;
      }

      // optional int32 combat_min = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_combat_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &combat_min_)));
          set_has_combat_min();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_sort_type;
        break;
      }

      // optional int32 sort_type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sort_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sort_type_)));
          set_has_sort_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_price_min;
        break;
      }

      // optional int32 price_min = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_min_)));
          set_has_price_min();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_price_max;
        break;
      }

      // optional int32 price_max = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_max_)));
          set_has_price_max();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_quality_min;
        break;
      }

      // optional int32 quality_min = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_min_)));
          set_has_quality_min();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_quality_max;
        break;
      }

      // optional int32 quality_max = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_max_)));
          set_has_quality_max();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_start_index;
        break;
      }

      // optional int32 start_index = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_index_)));
          set_has_start_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_end_index;
        break;
      }

      // optional int32 end_index = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_index_)));
          set_has_end_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Auction_CS_SearchItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 is_again = 1;
  if (has_is_again()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->is_again(), output);
  }

  // optional int32 is_auction = 2;
  if (has_is_auction()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->is_auction(), output);
  }

  // optional int32 pro_id = 3;
  if (has_pro_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pro_id(), output);
  }

  // repeated int32 item_id_list = 4;
  for (int i = 0; i < this->item_id_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->item_id_list(i), output);
  }

  // optional int32 combat_min = 5;
  if (has_combat_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->combat_min(), output);
  }

  // optional int32 sort_type = 6;
  if (has_sort_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->sort_type(), output);
  }

  // optional int32 price_min = 7;
  if (has_price_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->price_min(), output);
  }

  // optional int32 price_max = 8;
  if (has_price_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->price_max(), output);
  }

  // optional int32 quality_min = 9;
  if (has_quality_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->quality_min(), output);
  }

  // optional int32 quality_max = 10;
  if (has_quality_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->quality_max(), output);
  }

  // optional int32 start_index = 11;
  if (has_start_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->start_index(), output);
  }

  // optional int32 end_index = 12;
  if (has_end_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->end_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Auction_CS_SearchItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 is_again = 1;
  if (has_is_again()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->is_again(), target);
  }

  // optional int32 is_auction = 2;
  if (has_is_auction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->is_auction(), target);
  }

  // optional int32 pro_id = 3;
  if (has_pro_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pro_id(), target);
  }

  // repeated int32 item_id_list = 4;
  for (int i = 0; i < this->item_id_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->item_id_list(i), target);
  }

  // optional int32 combat_min = 5;
  if (has_combat_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->combat_min(), target);
  }

  // optional int32 sort_type = 6;
  if (has_sort_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->sort_type(), target);
  }

  // optional int32 price_min = 7;
  if (has_price_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->price_min(), target);
  }

  // optional int32 price_max = 8;
  if (has_price_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->price_max(), target);
  }

  // optional int32 quality_min = 9;
  if (has_quality_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->quality_min(), target);
  }

  // optional int32 quality_max = 10;
  if (has_quality_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->quality_max(), target);
  }

  // optional int32 start_index = 11;
  if (has_start_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->start_index(), target);
  }

  // optional int32 end_index = 12;
  if (has_end_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->end_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Auction_CS_SearchItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 is_again = 1;
    if (has_is_again()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_again());
    }

    // optional int32 is_auction = 2;
    if (has_is_auction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_auction());
    }

    // optional int32 pro_id = 3;
    if (has_pro_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pro_id());
    }

    // optional int32 combat_min = 5;
    if (has_combat_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->combat_min());
    }

    // optional int32 sort_type = 6;
    if (has_sort_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sort_type());
    }

    // optional int32 price_min = 7;
    if (has_price_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price_min());
    }

    // optional int32 price_max = 8;
    if (has_price_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price_max());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 quality_min = 9;
    if (has_quality_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality_min());
    }

    // optional int32 quality_max = 10;
    if (has_quality_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality_max());
    }

    // optional int32 start_index = 11;
    if (has_start_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->start_index());
    }

    // optional int32 end_index = 12;
    if (has_end_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->end_index());
    }

  }
  // repeated int32 item_id_list = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->item_id_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->item_id_list(i));
    }
    total_size += 1 * this->item_id_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Auction_CS_SearchItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Auction_CS_SearchItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Auction_CS_SearchItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Auction_CS_SearchItem::MergeFrom(const Auction_CS_SearchItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_id_list_.MergeFrom(from.item_id_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_again()) {
      set_is_again(from.is_again());
    }
    if (from.has_is_auction()) {
      set_is_auction(from.is_auction());
    }
    if (from.has_pro_id()) {
      set_pro_id(from.pro_id());
    }
    if (from.has_combat_min()) {
      set_combat_min(from.combat_min());
    }
    if (from.has_sort_type()) {
      set_sort_type(from.sort_type());
    }
    if (from.has_price_min()) {
      set_price_min(from.price_min());
    }
    if (from.has_price_max()) {
      set_price_max(from.price_max());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_quality_min()) {
      set_quality_min(from.quality_min());
    }
    if (from.has_quality_max()) {
      set_quality_max(from.quality_max());
    }
    if (from.has_start_index()) {
      set_start_index(from.start_index());
    }
    if (from.has_end_index()) {
      set_end_index(from.end_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Auction_CS_SearchItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Auction_CS_SearchItem::CopyFrom(const Auction_CS_SearchItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Auction_CS_SearchItem::IsInitialized() const {

  return true;
}

void Auction_CS_SearchItem::Swap(Auction_CS_SearchItem* other) {
  if (other != this) {
    std::swap(is_again_, other->is_again_);
    std::swap(is_auction_, other->is_auction_);
    std::swap(pro_id_, other->pro_id_);
    item_id_list_.Swap(&other->item_id_list_);
    std::swap(combat_min_, other->combat_min_);
    std::swap(sort_type_, other->sort_type_);
    std::swap(price_min_, other->price_min_);
    std::swap(price_max_, other->price_max_);
    std::swap(quality_min_, other->quality_min_);
    std::swap(quality_max_, other->quality_max_);
    std::swap(start_index_, other->start_index_);
    std::swap(end_index_, other->end_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Auction_CS_SearchItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Auction_CS_SearchItem_descriptor_;
  metadata.reflection = Auction_CS_SearchItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Auction_SC_SearchItem::kTotalNumFieldNumber;
const int Auction_SC_SearchItem::kStartIndexFieldNumber;
const int Auction_SC_SearchItem::kEndIndexFieldNumber;
const int Auction_SC_SearchItem::kItemListFieldNumber;
#endif  // !_MSC_VER

Auction_SC_SearchItem::Auction_SC_SearchItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Auction_SC_SearchItem::InitAsDefaultInstance() {
}

Auction_SC_SearchItem::Auction_SC_SearchItem(const Auction_SC_SearchItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Auction_SC_SearchItem::SharedCtor() {
  _cached_size_ = 0;
  total_num_ = 0;
  start_index_ = 0;
  end_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Auction_SC_SearchItem::~Auction_SC_SearchItem() {
  SharedDtor();
}

void Auction_SC_SearchItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Auction_SC_SearchItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Auction_SC_SearchItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Auction_SC_SearchItem_descriptor_;
}

const Auction_SC_SearchItem& Auction_SC_SearchItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_auction_2eproto();
  return *default_instance_;
}

Auction_SC_SearchItem* Auction_SC_SearchItem::default_instance_ = NULL;

Auction_SC_SearchItem* Auction_SC_SearchItem::New() const {
  return new Auction_SC_SearchItem;
}

void Auction_SC_SearchItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    total_num_ = 0;
    start_index_ = 0;
    end_index_ = 0;
  }
  item_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Auction_SC_SearchItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 total_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_num_)));
          set_has_total_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_start_index;
        break;
      }

      // optional int32 start_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_index_)));
          set_has_start_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_end_index;
        break;
      }

      // optional int32 end_index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_index_)));
          set_has_end_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_item_list;
        break;
      }

      // repeated .proto.message.AuctionItem item_list = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_item_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Auction_SC_SearchItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 total_num = 1;
  if (has_total_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->total_num(), output);
  }

  // optional int32 start_index = 2;
  if (has_start_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->start_index(), output);
  }

  // optional int32 end_index = 3;
  if (has_end_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->end_index(), output);
  }

  // repeated .proto.message.AuctionItem item_list = 4;
  for (int i = 0; i < this->item_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->item_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Auction_SC_SearchItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 total_num = 1;
  if (has_total_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->total_num(), target);
  }

  // optional int32 start_index = 2;
  if (has_start_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->start_index(), target);
  }

  // optional int32 end_index = 3;
  if (has_end_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->end_index(), target);
  }

  // repeated .proto.message.AuctionItem item_list = 4;
  for (int i = 0; i < this->item_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->item_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Auction_SC_SearchItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 total_num = 1;
    if (has_total_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_num());
    }

    // optional int32 start_index = 2;
    if (has_start_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->start_index());
    }

    // optional int32 end_index = 3;
    if (has_end_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->end_index());
    }

  }
  // repeated .proto.message.AuctionItem item_list = 4;
  total_size += 1 * this->item_list_size();
  for (int i = 0; i < this->item_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Auction_SC_SearchItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Auction_SC_SearchItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Auction_SC_SearchItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Auction_SC_SearchItem::MergeFrom(const Auction_SC_SearchItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_list_.MergeFrom(from.item_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_total_num()) {
      set_total_num(from.total_num());
    }
    if (from.has_start_index()) {
      set_start_index(from.start_index());
    }
    if (from.has_end_index()) {
      set_end_index(from.end_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Auction_SC_SearchItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Auction_SC_SearchItem::CopyFrom(const Auction_SC_SearchItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Auction_SC_SearchItem::IsInitialized() const {

  return true;
}

void Auction_SC_SearchItem::Swap(Auction_SC_SearchItem* other) {
  if (other != this) {
    std::swap(total_num_, other->total_num_);
    std::swap(start_index_, other->start_index_);
    std::swap(end_index_, other->end_index_);
    item_list_.Swap(&other->item_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Auction_SC_SearchItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Auction_SC_SearchItem_descriptor_;
  metadata.reflection = Auction_SC_SearchItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Auction_CS_BrowseItem::kIsAgainFieldNumber;
const int Auction_CS_BrowseItem::kIsAuctionFieldNumber;
const int Auction_CS_BrowseItem::kProIdFieldNumber;
const int Auction_CS_BrowseItem::kItemIdListFieldNumber;
const int Auction_CS_BrowseItem::kStrenLvFieldNumber;
const int Auction_CS_BrowseItem::kSortTypeFieldNumber;
const int Auction_CS_BrowseItem::kQualityMinFieldNumber;
const int Auction_CS_BrowseItem::kQualityMaxFieldNumber;
const int Auction_CS_BrowseItem::kStartIndexFieldNumber;
const int Auction_CS_BrowseItem::kEndIndexFieldNumber;
#endif  // !_MSC_VER

Auction_CS_BrowseItem::Auction_CS_BrowseItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Auction_CS_BrowseItem::InitAsDefaultInstance() {
}

Auction_CS_BrowseItem::Auction_CS_BrowseItem(const Auction_CS_BrowseItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Auction_CS_BrowseItem::SharedCtor() {
  _cached_size_ = 0;
  is_again_ = 0;
  is_auction_ = 0;
  pro_id_ = 0;
  stren_lv_ = 0;
  sort_type_ = 0;
  quality_min_ = 0;
  quality_max_ = 0;
  start_index_ = 0;
  end_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Auction_CS_BrowseItem::~Auction_CS_BrowseItem() {
  SharedDtor();
}

void Auction_CS_BrowseItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Auction_CS_BrowseItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Auction_CS_BrowseItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Auction_CS_BrowseItem_descriptor_;
}

const Auction_CS_BrowseItem& Auction_CS_BrowseItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_auction_2eproto();
  return *default_instance_;
}

Auction_CS_BrowseItem* Auction_CS_BrowseItem::default_instance_ = NULL;

Auction_CS_BrowseItem* Auction_CS_BrowseItem::New() const {
  return new Auction_CS_BrowseItem;
}

void Auction_CS_BrowseItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_again_ = 0;
    is_auction_ = 0;
    pro_id_ = 0;
    stren_lv_ = 0;
    sort_type_ = 0;
    quality_min_ = 0;
    quality_max_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    start_index_ = 0;
    end_index_ = 0;
  }
  item_id_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Auction_CS_BrowseItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 is_again = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_again_)));
          set_has_is_again();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_auction;
        break;
      }

      // optional int32 is_auction = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_auction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_auction_)));
          set_has_is_auction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pro_id;
        break;
      }

      // optional int32 pro_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pro_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pro_id_)));
          set_has_pro_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_item_id_list;
        break;
      }

      // repeated int32 item_id_list = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_item_id_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_item_id_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_item_id_list;
        if (input->ExpectTag(40)) goto parse_stren_lv;
        break;
      }

      // optional int32 stren_lv = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stren_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stren_lv_)));
          set_has_stren_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_sort_type;
        break;
      }

      // optional int32 sort_type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sort_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sort_type_)));
          set_has_sort_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_quality_min;
        break;
      }

      // optional int32 quality_min = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_min_)));
          set_has_quality_min();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_quality_max;
        break;
      }

      // optional int32 quality_max = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_max_)));
          set_has_quality_max();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_start_index;
        break;
      }

      // optional int32 start_index = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_index_)));
          set_has_start_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_end_index;
        break;
      }

      // optional int32 end_index = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_index_)));
          set_has_end_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Auction_CS_BrowseItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 is_again = 1;
  if (has_is_again()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->is_again(), output);
  }

  // optional int32 is_auction = 2;
  if (has_is_auction()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->is_auction(), output);
  }

  // optional int32 pro_id = 3;
  if (has_pro_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pro_id(), output);
  }

  // repeated int32 item_id_list = 4;
  for (int i = 0; i < this->item_id_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->item_id_list(i), output);
  }

  // optional int32 stren_lv = 5;
  if (has_stren_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->stren_lv(), output);
  }

  // optional int32 sort_type = 6;
  if (has_sort_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->sort_type(), output);
  }

  // optional int32 quality_min = 7;
  if (has_quality_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->quality_min(), output);
  }

  // optional int32 quality_max = 8;
  if (has_quality_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->quality_max(), output);
  }

  // optional int32 start_index = 9;
  if (has_start_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->start_index(), output);
  }

  // optional int32 end_index = 10;
  if (has_end_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->end_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Auction_CS_BrowseItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 is_again = 1;
  if (has_is_again()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->is_again(), target);
  }

  // optional int32 is_auction = 2;
  if (has_is_auction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->is_auction(), target);
  }

  // optional int32 pro_id = 3;
  if (has_pro_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pro_id(), target);
  }

  // repeated int32 item_id_list = 4;
  for (int i = 0; i < this->item_id_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->item_id_list(i), target);
  }

  // optional int32 stren_lv = 5;
  if (has_stren_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->stren_lv(), target);
  }

  // optional int32 sort_type = 6;
  if (has_sort_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->sort_type(), target);
  }

  // optional int32 quality_min = 7;
  if (has_quality_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->quality_min(), target);
  }

  // optional int32 quality_max = 8;
  if (has_quality_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->quality_max(), target);
  }

  // optional int32 start_index = 9;
  if (has_start_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->start_index(), target);
  }

  // optional int32 end_index = 10;
  if (has_end_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->end_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Auction_CS_BrowseItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 is_again = 1;
    if (has_is_again()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_again());
    }

    // optional int32 is_auction = 2;
    if (has_is_auction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_auction());
    }

    // optional int32 pro_id = 3;
    if (has_pro_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pro_id());
    }

    // optional int32 stren_lv = 5;
    if (has_stren_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stren_lv());
    }

    // optional int32 sort_type = 6;
    if (has_sort_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sort_type());
    }

    // optional int32 quality_min = 7;
    if (has_quality_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality_min());
    }

    // optional int32 quality_max = 8;
    if (has_quality_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality_max());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 start_index = 9;
    if (has_start_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->start_index());
    }

    // optional int32 end_index = 10;
    if (has_end_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->end_index());
    }

  }
  // repeated int32 item_id_list = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->item_id_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->item_id_list(i));
    }
    total_size += 1 * this->item_id_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Auction_CS_BrowseItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Auction_CS_BrowseItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Auction_CS_BrowseItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Auction_CS_BrowseItem::MergeFrom(const Auction_CS_BrowseItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_id_list_.MergeFrom(from.item_id_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_again()) {
      set_is_again(from.is_again());
    }
    if (from.has_is_auction()) {
      set_is_auction(from.is_auction());
    }
    if (from.has_pro_id()) {
      set_pro_id(from.pro_id());
    }
    if (from.has_stren_lv()) {
      set_stren_lv(from.stren_lv());
    }
    if (from.has_sort_type()) {
      set_sort_type(from.sort_type());
    }
    if (from.has_quality_min()) {
      set_quality_min(from.quality_min());
    }
    if (from.has_quality_max()) {
      set_quality_max(from.quality_max());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_start_index()) {
      set_start_index(from.start_index());
    }
    if (from.has_end_index()) {
      set_end_index(from.end_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Auction_CS_BrowseItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Auction_CS_BrowseItem::CopyFrom(const Auction_CS_BrowseItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Auction_CS_BrowseItem::IsInitialized() const {

  return true;
}

void Auction_CS_BrowseItem::Swap(Auction_CS_BrowseItem* other) {
  if (other != this) {
    std::swap(is_again_, other->is_again_);
    std::swap(is_auction_, other->is_auction_);
    std::swap(pro_id_, other->pro_id_);
    item_id_list_.Swap(&other->item_id_list_);
    std::swap(stren_lv_, other->stren_lv_);
    std::swap(sort_type_, other->sort_type_);
    std::swap(quality_min_, other->quality_min_);
    std::swap(quality_max_, other->quality_max_);
    std::swap(start_index_, other->start_index_);
    std::swap(end_index_, other->end_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Auction_CS_BrowseItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Auction_CS_BrowseItem_descriptor_;
  metadata.reflection = Auction_CS_BrowseItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Auction_SC_BrowseItem::kTotalNumFieldNumber;
const int Auction_SC_BrowseItem::kStartIndexFieldNumber;
const int Auction_SC_BrowseItem::kEndIndexFieldNumber;
const int Auction_SC_BrowseItem::kItemListFieldNumber;
#endif  // !_MSC_VER

Auction_SC_BrowseItem::Auction_SC_BrowseItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Auction_SC_BrowseItem::InitAsDefaultInstance() {
}

Auction_SC_BrowseItem::Auction_SC_BrowseItem(const Auction_SC_BrowseItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Auction_SC_BrowseItem::SharedCtor() {
  _cached_size_ = 0;
  total_num_ = 0;
  start_index_ = 0;
  end_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Auction_SC_BrowseItem::~Auction_SC_BrowseItem() {
  SharedDtor();
}

void Auction_SC_BrowseItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Auction_SC_BrowseItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Auction_SC_BrowseItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Auction_SC_BrowseItem_descriptor_;
}

const Auction_SC_BrowseItem& Auction_SC_BrowseItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_auction_2eproto();
  return *default_instance_;
}

Auction_SC_BrowseItem* Auction_SC_BrowseItem::default_instance_ = NULL;

Auction_SC_BrowseItem* Auction_SC_BrowseItem::New() const {
  return new Auction_SC_BrowseItem;
}

void Auction_SC_BrowseItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    total_num_ = 0;
    start_index_ = 0;
    end_index_ = 0;
  }
  item_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Auction_SC_BrowseItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 total_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_num_)));
          set_has_total_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_start_index;
        break;
      }

      // optional int32 start_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_index_)));
          set_has_start_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_end_index;
        break;
      }

      // optional int32 end_index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_index_)));
          set_has_end_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_item_list;
        break;
      }

      // repeated .proto.message.AuctionItem item_list = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_item_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Auction_SC_BrowseItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 total_num = 1;
  if (has_total_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->total_num(), output);
  }

  // optional int32 start_index = 2;
  if (has_start_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->start_index(), output);
  }

  // optional int32 end_index = 3;
  if (has_end_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->end_index(), output);
  }

  // repeated .proto.message.AuctionItem item_list = 4;
  for (int i = 0; i < this->item_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->item_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Auction_SC_BrowseItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 total_num = 1;
  if (has_total_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->total_num(), target);
  }

  // optional int32 start_index = 2;
  if (has_start_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->start_index(), target);
  }

  // optional int32 end_index = 3;
  if (has_end_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->end_index(), target);
  }

  // repeated .proto.message.AuctionItem item_list = 4;
  for (int i = 0; i < this->item_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->item_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Auction_SC_BrowseItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 total_num = 1;
    if (has_total_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_num());
    }

    // optional int32 start_index = 2;
    if (has_start_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->start_index());
    }

    // optional int32 end_index = 3;
    if (has_end_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->end_index());
    }

  }
  // repeated .proto.message.AuctionItem item_list = 4;
  total_size += 1 * this->item_list_size();
  for (int i = 0; i < this->item_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Auction_SC_BrowseItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Auction_SC_BrowseItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Auction_SC_BrowseItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Auction_SC_BrowseItem::MergeFrom(const Auction_SC_BrowseItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_list_.MergeFrom(from.item_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_total_num()) {
      set_total_num(from.total_num());
    }
    if (from.has_start_index()) {
      set_start_index(from.start_index());
    }
    if (from.has_end_index()) {
      set_end_index(from.end_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Auction_SC_BrowseItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Auction_SC_BrowseItem::CopyFrom(const Auction_SC_BrowseItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Auction_SC_BrowseItem::IsInitialized() const {

  return true;
}

void Auction_SC_BrowseItem::Swap(Auction_SC_BrowseItem* other) {
  if (other != this) {
    std::swap(total_num_, other->total_num_);
    std::swap(start_index_, other->start_index_);
    std::swap(end_index_, other->end_index_);
    item_list_.Swap(&other->item_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Auction_SC_BrowseItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Auction_SC_BrowseItem_descriptor_;
  metadata.reflection = Auction_SC_BrowseItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Auction_CS_BuyItem::kUuidFieldNumber;
const int Auction_CS_BuyItem::kBuyNumFieldNumber;
#endif  // !_MSC_VER

Auction_CS_BuyItem::Auction_CS_BuyItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Auction_CS_BuyItem::InitAsDefaultInstance() {
}

Auction_CS_BuyItem::Auction_CS_BuyItem(const Auction_CS_BuyItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Auction_CS_BuyItem::SharedCtor() {
  _cached_size_ = 0;
  uuid_ = GOOGLE_ULONGLONG(0);
  buy_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Auction_CS_BuyItem::~Auction_CS_BuyItem() {
  SharedDtor();
}

void Auction_CS_BuyItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Auction_CS_BuyItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Auction_CS_BuyItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Auction_CS_BuyItem_descriptor_;
}

const Auction_CS_BuyItem& Auction_CS_BuyItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_auction_2eproto();
  return *default_instance_;
}

Auction_CS_BuyItem* Auction_CS_BuyItem::default_instance_ = NULL;

Auction_CS_BuyItem* Auction_CS_BuyItem::New() const {
  return new Auction_CS_BuyItem;
}

void Auction_CS_BuyItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uuid_ = GOOGLE_ULONGLONG(0);
    buy_num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Auction_CS_BuyItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_buy_num;
        break;
      }

      // optional int32 buy_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buy_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buy_num_)));
          set_has_buy_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Auction_CS_BuyItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uuid(), output);
  }

  // optional int32 buy_num = 2;
  if (has_buy_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->buy_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Auction_CS_BuyItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 uuid = 1;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uuid(), target);
  }

  // optional int32 buy_num = 2;
  if (has_buy_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->buy_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Auction_CS_BuyItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 uuid = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

    // optional int32 buy_num = 2;
    if (has_buy_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buy_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Auction_CS_BuyItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Auction_CS_BuyItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Auction_CS_BuyItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Auction_CS_BuyItem::MergeFrom(const Auction_CS_BuyItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_buy_num()) {
      set_buy_num(from.buy_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Auction_CS_BuyItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Auction_CS_BuyItem::CopyFrom(const Auction_CS_BuyItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Auction_CS_BuyItem::IsInitialized() const {

  return true;
}

void Auction_CS_BuyItem::Swap(Auction_CS_BuyItem* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(buy_num_, other->buy_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Auction_CS_BuyItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Auction_CS_BuyItem_descriptor_;
  metadata.reflection = Auction_CS_BuyItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Auction_SC_BuyItem::kResultFieldNumber;
const int Auction_SC_BuyItem::kUuidFieldNumber;
const int Auction_SC_BuyItem::kBuyNumFieldNumber;
const int Auction_SC_BuyItem::kRemainNumFieldNumber;
#endif  // !_MSC_VER

Auction_SC_BuyItem::Auction_SC_BuyItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Auction_SC_BuyItem::InitAsDefaultInstance() {
}

Auction_SC_BuyItem::Auction_SC_BuyItem(const Auction_SC_BuyItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Auction_SC_BuyItem::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  uuid_ = GOOGLE_ULONGLONG(0);
  buy_num_ = 0;
  remain_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Auction_SC_BuyItem::~Auction_SC_BuyItem() {
  SharedDtor();
}

void Auction_SC_BuyItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Auction_SC_BuyItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Auction_SC_BuyItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Auction_SC_BuyItem_descriptor_;
}

const Auction_SC_BuyItem& Auction_SC_BuyItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_auction_2eproto();
  return *default_instance_;
}

Auction_SC_BuyItem* Auction_SC_BuyItem::default_instance_ = NULL;

Auction_SC_BuyItem* Auction_SC_BuyItem::New() const {
  return new Auction_SC_BuyItem;
}

void Auction_SC_BuyItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    uuid_ = GOOGLE_ULONGLONG(0);
    buy_num_ = 0;
    remain_num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Auction_SC_BuyItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uuid;
        break;
      }

      // optional uint64 uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_buy_num;
        break;
      }

      // optional int32 buy_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buy_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buy_num_)));
          set_has_buy_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_remain_num;
        break;
      }

      // optional int32 remain_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remain_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remain_num_)));
          set_has_remain_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Auction_SC_BuyItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uuid(), output);
  }

  // optional int32 buy_num = 3;
  if (has_buy_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->buy_num(), output);
  }

  // optional int32 remain_num = 4;
  if (has_remain_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->remain_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Auction_SC_BuyItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uuid(), target);
  }

  // optional int32 buy_num = 3;
  if (has_buy_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->buy_num(), target);
  }

  // optional int32 remain_num = 4;
  if (has_remain_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->remain_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Auction_SC_BuyItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional uint64 uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

    // optional int32 buy_num = 3;
    if (has_buy_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buy_num());
    }

    // optional int32 remain_num = 4;
    if (has_remain_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->remain_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Auction_SC_BuyItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Auction_SC_BuyItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Auction_SC_BuyItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Auction_SC_BuyItem::MergeFrom(const Auction_SC_BuyItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_buy_num()) {
      set_buy_num(from.buy_num());
    }
    if (from.has_remain_num()) {
      set_remain_num(from.remain_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Auction_SC_BuyItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Auction_SC_BuyItem::CopyFrom(const Auction_SC_BuyItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Auction_SC_BuyItem::IsInitialized() const {

  return true;
}

void Auction_SC_BuyItem::Swap(Auction_SC_BuyItem* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(uuid_, other->uuid_);
    std::swap(buy_num_, other->buy_num_);
    std::swap(remain_num_, other->remain_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Auction_SC_BuyItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Auction_SC_BuyItem_descriptor_;
  metadata.reflection = Auction_SC_BuyItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Auction_CS_GetAttentionInfo::kIsAuctionFieldNumber;
#endif  // !_MSC_VER

Auction_CS_GetAttentionInfo::Auction_CS_GetAttentionInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Auction_CS_GetAttentionInfo::InitAsDefaultInstance() {
}

Auction_CS_GetAttentionInfo::Auction_CS_GetAttentionInfo(const Auction_CS_GetAttentionInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Auction_CS_GetAttentionInfo::SharedCtor() {
  _cached_size_ = 0;
  is_auction_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Auction_CS_GetAttentionInfo::~Auction_CS_GetAttentionInfo() {
  SharedDtor();
}

void Auction_CS_GetAttentionInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Auction_CS_GetAttentionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Auction_CS_GetAttentionInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Auction_CS_GetAttentionInfo_descriptor_;
}

const Auction_CS_GetAttentionInfo& Auction_CS_GetAttentionInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_auction_2eproto();
  return *default_instance_;
}

Auction_CS_GetAttentionInfo* Auction_CS_GetAttentionInfo::default_instance_ = NULL;

Auction_CS_GetAttentionInfo* Auction_CS_GetAttentionInfo::New() const {
  return new Auction_CS_GetAttentionInfo;
}

void Auction_CS_GetAttentionInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_auction_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Auction_CS_GetAttentionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 is_auction = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_auction_)));
          set_has_is_auction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Auction_CS_GetAttentionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 is_auction = 1;
  if (has_is_auction()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->is_auction(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Auction_CS_GetAttentionInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 is_auction = 1;
  if (has_is_auction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->is_auction(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Auction_CS_GetAttentionInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 is_auction = 1;
    if (has_is_auction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_auction());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Auction_CS_GetAttentionInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Auction_CS_GetAttentionInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Auction_CS_GetAttentionInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Auction_CS_GetAttentionInfo::MergeFrom(const Auction_CS_GetAttentionInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_auction()) {
      set_is_auction(from.is_auction());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Auction_CS_GetAttentionInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Auction_CS_GetAttentionInfo::CopyFrom(const Auction_CS_GetAttentionInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Auction_CS_GetAttentionInfo::IsInitialized() const {

  return true;
}

void Auction_CS_GetAttentionInfo::Swap(Auction_CS_GetAttentionInfo* other) {
  if (other != this) {
    std::swap(is_auction_, other->is_auction_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Auction_CS_GetAttentionInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Auction_CS_GetAttentionInfo_descriptor_;
  metadata.reflection = Auction_CS_GetAttentionInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Auction_SC_GetAttentionInfo::kIsAuctionFieldNumber;
const int Auction_SC_GetAttentionInfo::kItemListFieldNumber;
#endif  // !_MSC_VER

Auction_SC_GetAttentionInfo::Auction_SC_GetAttentionInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Auction_SC_GetAttentionInfo::InitAsDefaultInstance() {
}

Auction_SC_GetAttentionInfo::Auction_SC_GetAttentionInfo(const Auction_SC_GetAttentionInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Auction_SC_GetAttentionInfo::SharedCtor() {
  _cached_size_ = 0;
  is_auction_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Auction_SC_GetAttentionInfo::~Auction_SC_GetAttentionInfo() {
  SharedDtor();
}

void Auction_SC_GetAttentionInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Auction_SC_GetAttentionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Auction_SC_GetAttentionInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Auction_SC_GetAttentionInfo_descriptor_;
}

const Auction_SC_GetAttentionInfo& Auction_SC_GetAttentionInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_auction_2eproto();
  return *default_instance_;
}

Auction_SC_GetAttentionInfo* Auction_SC_GetAttentionInfo::default_instance_ = NULL;

Auction_SC_GetAttentionInfo* Auction_SC_GetAttentionInfo::New() const {
  return new Auction_SC_GetAttentionInfo;
}

void Auction_SC_GetAttentionInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_auction_ = 0;
  }
  item_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Auction_SC_GetAttentionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 is_auction = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_auction_)));
          set_has_is_auction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item_list;
        break;
      }

      // repeated .proto.message.AuctionItem item_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Auction_SC_GetAttentionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 is_auction = 1;
  if (has_is_auction()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->is_auction(), output);
  }

  // repeated .proto.message.AuctionItem item_list = 2;
  for (int i = 0; i < this->item_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Auction_SC_GetAttentionInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 is_auction = 1;
  if (has_is_auction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->is_auction(), target);
  }

  // repeated .proto.message.AuctionItem item_list = 2;
  for (int i = 0; i < this->item_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Auction_SC_GetAttentionInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 is_auction = 1;
    if (has_is_auction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_auction());
    }

  }
  // repeated .proto.message.AuctionItem item_list = 2;
  total_size += 1 * this->item_list_size();
  for (int i = 0; i < this->item_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Auction_SC_GetAttentionInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Auction_SC_GetAttentionInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Auction_SC_GetAttentionInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Auction_SC_GetAttentionInfo::MergeFrom(const Auction_SC_GetAttentionInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_list_.MergeFrom(from.item_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_auction()) {
      set_is_auction(from.is_auction());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Auction_SC_GetAttentionInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Auction_SC_GetAttentionInfo::CopyFrom(const Auction_SC_GetAttentionInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Auction_SC_GetAttentionInfo::IsInitialized() const {

  return true;
}

void Auction_SC_GetAttentionInfo::Swap(Auction_SC_GetAttentionInfo* other) {
  if (other != this) {
    std::swap(is_auction_, other->is_auction_);
    item_list_.Swap(&other->item_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Auction_SC_GetAttentionInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Auction_SC_GetAttentionInfo_descriptor_;
  metadata.reflection = Auction_SC_GetAttentionInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Auction_CS_AttentionItem::kUuidFieldNumber;
#endif  // !_MSC_VER

Auction_CS_AttentionItem::Auction_CS_AttentionItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Auction_CS_AttentionItem::InitAsDefaultInstance() {
}

Auction_CS_AttentionItem::Auction_CS_AttentionItem(const Auction_CS_AttentionItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Auction_CS_AttentionItem::SharedCtor() {
  _cached_size_ = 0;
  uuid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Auction_CS_AttentionItem::~Auction_CS_AttentionItem() {
  SharedDtor();
}

void Auction_CS_AttentionItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Auction_CS_AttentionItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Auction_CS_AttentionItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Auction_CS_AttentionItem_descriptor_;
}

const Auction_CS_AttentionItem& Auction_CS_AttentionItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_auction_2eproto();
  return *default_instance_;
}

Auction_CS_AttentionItem* Auction_CS_AttentionItem::default_instance_ = NULL;

Auction_CS_AttentionItem* Auction_CS_AttentionItem::New() const {
  return new Auction_CS_AttentionItem;
}

void Auction_CS_AttentionItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uuid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Auction_CS_AttentionItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Auction_CS_AttentionItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Auction_CS_AttentionItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 uuid = 1;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Auction_CS_AttentionItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 uuid = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Auction_CS_AttentionItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Auction_CS_AttentionItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Auction_CS_AttentionItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Auction_CS_AttentionItem::MergeFrom(const Auction_CS_AttentionItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Auction_CS_AttentionItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Auction_CS_AttentionItem::CopyFrom(const Auction_CS_AttentionItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Auction_CS_AttentionItem::IsInitialized() const {

  return true;
}

void Auction_CS_AttentionItem::Swap(Auction_CS_AttentionItem* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Auction_CS_AttentionItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Auction_CS_AttentionItem_descriptor_;
  metadata.reflection = Auction_CS_AttentionItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Auction_SC_AttentionItem::kResultFieldNumber;
const int Auction_SC_AttentionItem::kUuidFieldNumber;
const int Auction_SC_AttentionItem::kAttPersonsFieldNumber;
#endif  // !_MSC_VER

Auction_SC_AttentionItem::Auction_SC_AttentionItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Auction_SC_AttentionItem::InitAsDefaultInstance() {
}

Auction_SC_AttentionItem::Auction_SC_AttentionItem(const Auction_SC_AttentionItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Auction_SC_AttentionItem::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  uuid_ = GOOGLE_ULONGLONG(0);
  att_persons_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Auction_SC_AttentionItem::~Auction_SC_AttentionItem() {
  SharedDtor();
}

void Auction_SC_AttentionItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Auction_SC_AttentionItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Auction_SC_AttentionItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Auction_SC_AttentionItem_descriptor_;
}

const Auction_SC_AttentionItem& Auction_SC_AttentionItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_auction_2eproto();
  return *default_instance_;
}

Auction_SC_AttentionItem* Auction_SC_AttentionItem::default_instance_ = NULL;

Auction_SC_AttentionItem* Auction_SC_AttentionItem::New() const {
  return new Auction_SC_AttentionItem;
}

void Auction_SC_AttentionItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    uuid_ = GOOGLE_ULONGLONG(0);
    att_persons_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Auction_SC_AttentionItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uuid;
        break;
      }

      // optional uint64 uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_att_persons;
        break;
      }

      // optional int32 att_persons = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_att_persons:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &att_persons_)));
          set_has_att_persons();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Auction_SC_AttentionItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uuid(), output);
  }

  // optional int32 att_persons = 3;
  if (has_att_persons()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->att_persons(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Auction_SC_AttentionItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uuid(), target);
  }

  // optional int32 att_persons = 3;
  if (has_att_persons()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->att_persons(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Auction_SC_AttentionItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional uint64 uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

    // optional int32 att_persons = 3;
    if (has_att_persons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->att_persons());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Auction_SC_AttentionItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Auction_SC_AttentionItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Auction_SC_AttentionItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Auction_SC_AttentionItem::MergeFrom(const Auction_SC_AttentionItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_att_persons()) {
      set_att_persons(from.att_persons());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Auction_SC_AttentionItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Auction_SC_AttentionItem::CopyFrom(const Auction_SC_AttentionItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Auction_SC_AttentionItem::IsInitialized() const {

  return true;
}

void Auction_SC_AttentionItem::Swap(Auction_SC_AttentionItem* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(uuid_, other->uuid_);
    std::swap(att_persons_, other->att_persons_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Auction_SC_AttentionItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Auction_SC_AttentionItem_descriptor_;
  metadata.reflection = Auction_SC_AttentionItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Auction_CS_CancelAttentionItem::kUuidFieldNumber;
#endif  // !_MSC_VER

Auction_CS_CancelAttentionItem::Auction_CS_CancelAttentionItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Auction_CS_CancelAttentionItem::InitAsDefaultInstance() {
}

Auction_CS_CancelAttentionItem::Auction_CS_CancelAttentionItem(const Auction_CS_CancelAttentionItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Auction_CS_CancelAttentionItem::SharedCtor() {
  _cached_size_ = 0;
  uuid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Auction_CS_CancelAttentionItem::~Auction_CS_CancelAttentionItem() {
  SharedDtor();
}

void Auction_CS_CancelAttentionItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Auction_CS_CancelAttentionItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Auction_CS_CancelAttentionItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Auction_CS_CancelAttentionItem_descriptor_;
}

const Auction_CS_CancelAttentionItem& Auction_CS_CancelAttentionItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_auction_2eproto();
  return *default_instance_;
}

Auction_CS_CancelAttentionItem* Auction_CS_CancelAttentionItem::default_instance_ = NULL;

Auction_CS_CancelAttentionItem* Auction_CS_CancelAttentionItem::New() const {
  return new Auction_CS_CancelAttentionItem;
}

void Auction_CS_CancelAttentionItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uuid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Auction_CS_CancelAttentionItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Auction_CS_CancelAttentionItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Auction_CS_CancelAttentionItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 uuid = 1;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Auction_CS_CancelAttentionItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 uuid = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Auction_CS_CancelAttentionItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Auction_CS_CancelAttentionItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Auction_CS_CancelAttentionItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Auction_CS_CancelAttentionItem::MergeFrom(const Auction_CS_CancelAttentionItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Auction_CS_CancelAttentionItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Auction_CS_CancelAttentionItem::CopyFrom(const Auction_CS_CancelAttentionItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Auction_CS_CancelAttentionItem::IsInitialized() const {

  return true;
}

void Auction_CS_CancelAttentionItem::Swap(Auction_CS_CancelAttentionItem* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Auction_CS_CancelAttentionItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Auction_CS_CancelAttentionItem_descriptor_;
  metadata.reflection = Auction_CS_CancelAttentionItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Auction_SC_CancelAttentionItem::kResultFieldNumber;
const int Auction_SC_CancelAttentionItem::kUuidFieldNumber;
#endif  // !_MSC_VER

Auction_SC_CancelAttentionItem::Auction_SC_CancelAttentionItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Auction_SC_CancelAttentionItem::InitAsDefaultInstance() {
}

Auction_SC_CancelAttentionItem::Auction_SC_CancelAttentionItem(const Auction_SC_CancelAttentionItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Auction_SC_CancelAttentionItem::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  uuid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Auction_SC_CancelAttentionItem::~Auction_SC_CancelAttentionItem() {
  SharedDtor();
}

void Auction_SC_CancelAttentionItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Auction_SC_CancelAttentionItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Auction_SC_CancelAttentionItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Auction_SC_CancelAttentionItem_descriptor_;
}

const Auction_SC_CancelAttentionItem& Auction_SC_CancelAttentionItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_auction_2eproto();
  return *default_instance_;
}

Auction_SC_CancelAttentionItem* Auction_SC_CancelAttentionItem::default_instance_ = NULL;

Auction_SC_CancelAttentionItem* Auction_SC_CancelAttentionItem::New() const {
  return new Auction_SC_CancelAttentionItem;
}

void Auction_SC_CancelAttentionItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    uuid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Auction_SC_CancelAttentionItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uuid;
        break;
      }

      // optional uint64 uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Auction_SC_CancelAttentionItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Auction_SC_CancelAttentionItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Auction_SC_CancelAttentionItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional uint64 uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Auction_SC_CancelAttentionItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Auction_SC_CancelAttentionItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Auction_SC_CancelAttentionItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Auction_SC_CancelAttentionItem::MergeFrom(const Auction_SC_CancelAttentionItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Auction_SC_CancelAttentionItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Auction_SC_CancelAttentionItem::CopyFrom(const Auction_SC_CancelAttentionItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Auction_SC_CancelAttentionItem::IsInitialized() const {

  return true;
}

void Auction_SC_CancelAttentionItem::Swap(Auction_SC_CancelAttentionItem* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(uuid_, other->uuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Auction_SC_CancelAttentionItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Auction_SC_CancelAttentionItem_descriptor_;
  metadata.reflection = Auction_SC_CancelAttentionItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Auction_CS_GetCaseInfo::kIdFieldNumber;
#endif  // !_MSC_VER

Auction_CS_GetCaseInfo::Auction_CS_GetCaseInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Auction_CS_GetCaseInfo::InitAsDefaultInstance() {
}

Auction_CS_GetCaseInfo::Auction_CS_GetCaseInfo(const Auction_CS_GetCaseInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Auction_CS_GetCaseInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Auction_CS_GetCaseInfo::~Auction_CS_GetCaseInfo() {
  SharedDtor();
}

void Auction_CS_GetCaseInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Auction_CS_GetCaseInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Auction_CS_GetCaseInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Auction_CS_GetCaseInfo_descriptor_;
}

const Auction_CS_GetCaseInfo& Auction_CS_GetCaseInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_auction_2eproto();
  return *default_instance_;
}

Auction_CS_GetCaseInfo* Auction_CS_GetCaseInfo::default_instance_ = NULL;

Auction_CS_GetCaseInfo* Auction_CS_GetCaseInfo::New() const {
  return new Auction_CS_GetCaseInfo;
}

void Auction_CS_GetCaseInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Auction_CS_GetCaseInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Auction_CS_GetCaseInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Auction_CS_GetCaseInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Auction_CS_GetCaseInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Auction_CS_GetCaseInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Auction_CS_GetCaseInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Auction_CS_GetCaseInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Auction_CS_GetCaseInfo::MergeFrom(const Auction_CS_GetCaseInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Auction_CS_GetCaseInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Auction_CS_GetCaseInfo::CopyFrom(const Auction_CS_GetCaseInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Auction_CS_GetCaseInfo::IsInitialized() const {

  return true;
}

void Auction_CS_GetCaseInfo::Swap(Auction_CS_GetCaseInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Auction_CS_GetCaseInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Auction_CS_GetCaseInfo_descriptor_;
  metadata.reflection = Auction_CS_GetCaseInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Auction_SC_GetCaseInfo::kRecommendPriceFieldNumber;
const int Auction_SC_GetCaseInfo::kItemListFieldNumber;
#endif  // !_MSC_VER

Auction_SC_GetCaseInfo::Auction_SC_GetCaseInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Auction_SC_GetCaseInfo::InitAsDefaultInstance() {
}

Auction_SC_GetCaseInfo::Auction_SC_GetCaseInfo(const Auction_SC_GetCaseInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Auction_SC_GetCaseInfo::SharedCtor() {
  _cached_size_ = 0;
  recommend_price_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Auction_SC_GetCaseInfo::~Auction_SC_GetCaseInfo() {
  SharedDtor();
}

void Auction_SC_GetCaseInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Auction_SC_GetCaseInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Auction_SC_GetCaseInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Auction_SC_GetCaseInfo_descriptor_;
}

const Auction_SC_GetCaseInfo& Auction_SC_GetCaseInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_auction_2eproto();
  return *default_instance_;
}

Auction_SC_GetCaseInfo* Auction_SC_GetCaseInfo::default_instance_ = NULL;

Auction_SC_GetCaseInfo* Auction_SC_GetCaseInfo::New() const {
  return new Auction_SC_GetCaseInfo;
}

void Auction_SC_GetCaseInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    recommend_price_ = 0;
  }
  item_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Auction_SC_GetCaseInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 recommend_price = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &recommend_price_)));
          set_has_recommend_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item_list;
        break;
      }

      // repeated .proto.message.AuctionItem item_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Auction_SC_GetCaseInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 recommend_price = 1;
  if (has_recommend_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->recommend_price(), output);
  }

  // repeated .proto.message.AuctionItem item_list = 2;
  for (int i = 0; i < this->item_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Auction_SC_GetCaseInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 recommend_price = 1;
  if (has_recommend_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->recommend_price(), target);
  }

  // repeated .proto.message.AuctionItem item_list = 2;
  for (int i = 0; i < this->item_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Auction_SC_GetCaseInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 recommend_price = 1;
    if (has_recommend_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->recommend_price());
    }

  }
  // repeated .proto.message.AuctionItem item_list = 2;
  total_size += 1 * this->item_list_size();
  for (int i = 0; i < this->item_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Auction_SC_GetCaseInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Auction_SC_GetCaseInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Auction_SC_GetCaseInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Auction_SC_GetCaseInfo::MergeFrom(const Auction_SC_GetCaseInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_list_.MergeFrom(from.item_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_recommend_price()) {
      set_recommend_price(from.recommend_price());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Auction_SC_GetCaseInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Auction_SC_GetCaseInfo::CopyFrom(const Auction_SC_GetCaseInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Auction_SC_GetCaseInfo::IsInitialized() const {

  return true;
}

void Auction_SC_GetCaseInfo::Swap(Auction_SC_GetCaseInfo* other) {
  if (other != this) {
    std::swap(recommend_price_, other->recommend_price_);
    item_list_.Swap(&other->item_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Auction_SC_GetCaseInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Auction_SC_GetCaseInfo_descriptor_;
  metadata.reflection = Auction_SC_GetCaseInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Auction_CS_GetAuctionItemNum::kIsAuctionFieldNumber;
const int Auction_CS_GetAuctionItemNum::kProIdListFieldNumber;
#endif  // !_MSC_VER

Auction_CS_GetAuctionItemNum::Auction_CS_GetAuctionItemNum()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Auction_CS_GetAuctionItemNum::InitAsDefaultInstance() {
}

Auction_CS_GetAuctionItemNum::Auction_CS_GetAuctionItemNum(const Auction_CS_GetAuctionItemNum& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Auction_CS_GetAuctionItemNum::SharedCtor() {
  _cached_size_ = 0;
  is_auction_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Auction_CS_GetAuctionItemNum::~Auction_CS_GetAuctionItemNum() {
  SharedDtor();
}

void Auction_CS_GetAuctionItemNum::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Auction_CS_GetAuctionItemNum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Auction_CS_GetAuctionItemNum::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Auction_CS_GetAuctionItemNum_descriptor_;
}

const Auction_CS_GetAuctionItemNum& Auction_CS_GetAuctionItemNum::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_auction_2eproto();
  return *default_instance_;
}

Auction_CS_GetAuctionItemNum* Auction_CS_GetAuctionItemNum::default_instance_ = NULL;

Auction_CS_GetAuctionItemNum* Auction_CS_GetAuctionItemNum::New() const {
  return new Auction_CS_GetAuctionItemNum;
}

void Auction_CS_GetAuctionItemNum::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_auction_ = 0;
  }
  pro_id_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Auction_CS_GetAuctionItemNum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 is_auction = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_auction_)));
          set_has_is_auction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pro_id_list;
        break;
      }

      // repeated int32 pro_id_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pro_id_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_pro_id_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_pro_id_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pro_id_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Auction_CS_GetAuctionItemNum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 is_auction = 1;
  if (has_is_auction()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->is_auction(), output);
  }

  // repeated int32 pro_id_list = 2;
  for (int i = 0; i < this->pro_id_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->pro_id_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Auction_CS_GetAuctionItemNum::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 is_auction = 1;
  if (has_is_auction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->is_auction(), target);
  }

  // repeated int32 pro_id_list = 2;
  for (int i = 0; i < this->pro_id_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->pro_id_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Auction_CS_GetAuctionItemNum::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 is_auction = 1;
    if (has_is_auction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_auction());
    }

  }
  // repeated int32 pro_id_list = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->pro_id_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->pro_id_list(i));
    }
    total_size += 1 * this->pro_id_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Auction_CS_GetAuctionItemNum::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Auction_CS_GetAuctionItemNum* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Auction_CS_GetAuctionItemNum*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Auction_CS_GetAuctionItemNum::MergeFrom(const Auction_CS_GetAuctionItemNum& from) {
  GOOGLE_CHECK_NE(&from, this);
  pro_id_list_.MergeFrom(from.pro_id_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_auction()) {
      set_is_auction(from.is_auction());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Auction_CS_GetAuctionItemNum::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Auction_CS_GetAuctionItemNum::CopyFrom(const Auction_CS_GetAuctionItemNum& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Auction_CS_GetAuctionItemNum::IsInitialized() const {

  return true;
}

void Auction_CS_GetAuctionItemNum::Swap(Auction_CS_GetAuctionItemNum* other) {
  if (other != this) {
    std::swap(is_auction_, other->is_auction_);
    pro_id_list_.Swap(&other->pro_id_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Auction_CS_GetAuctionItemNum::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Auction_CS_GetAuctionItemNum_descriptor_;
  metadata.reflection = Auction_CS_GetAuctionItemNum_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Auction_SC_GetAuctionItemNum::kIsAuctionFieldNumber;
const int Auction_SC_GetAuctionItemNum::kIdNumListFieldNumber;
#endif  // !_MSC_VER

Auction_SC_GetAuctionItemNum::Auction_SC_GetAuctionItemNum()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Auction_SC_GetAuctionItemNum::InitAsDefaultInstance() {
}

Auction_SC_GetAuctionItemNum::Auction_SC_GetAuctionItemNum(const Auction_SC_GetAuctionItemNum& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Auction_SC_GetAuctionItemNum::SharedCtor() {
  _cached_size_ = 0;
  is_auction_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Auction_SC_GetAuctionItemNum::~Auction_SC_GetAuctionItemNum() {
  SharedDtor();
}

void Auction_SC_GetAuctionItemNum::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Auction_SC_GetAuctionItemNum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Auction_SC_GetAuctionItemNum::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Auction_SC_GetAuctionItemNum_descriptor_;
}

const Auction_SC_GetAuctionItemNum& Auction_SC_GetAuctionItemNum::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_auction_2eproto();
  return *default_instance_;
}

Auction_SC_GetAuctionItemNum* Auction_SC_GetAuctionItemNum::default_instance_ = NULL;

Auction_SC_GetAuctionItemNum* Auction_SC_GetAuctionItemNum::New() const {
  return new Auction_SC_GetAuctionItemNum;
}

void Auction_SC_GetAuctionItemNum::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_auction_ = 0;
  }
  id_num_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Auction_SC_GetAuctionItemNum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 is_auction = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_auction_)));
          set_has_is_auction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_id_num_list;
        break;
      }

      // repeated .proto.message.IDNum id_num_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_id_num_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_id_num_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_id_num_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Auction_SC_GetAuctionItemNum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 is_auction = 1;
  if (has_is_auction()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->is_auction(), output);
  }

  // repeated .proto.message.IDNum id_num_list = 2;
  for (int i = 0; i < this->id_num_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->id_num_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Auction_SC_GetAuctionItemNum::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 is_auction = 1;
  if (has_is_auction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->is_auction(), target);
  }

  // repeated .proto.message.IDNum id_num_list = 2;
  for (int i = 0; i < this->id_num_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->id_num_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Auction_SC_GetAuctionItemNum::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 is_auction = 1;
    if (has_is_auction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_auction());
    }

  }
  // repeated .proto.message.IDNum id_num_list = 2;
  total_size += 1 * this->id_num_list_size();
  for (int i = 0; i < this->id_num_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->id_num_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Auction_SC_GetAuctionItemNum::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Auction_SC_GetAuctionItemNum* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Auction_SC_GetAuctionItemNum*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Auction_SC_GetAuctionItemNum::MergeFrom(const Auction_SC_GetAuctionItemNum& from) {
  GOOGLE_CHECK_NE(&from, this);
  id_num_list_.MergeFrom(from.id_num_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_auction()) {
      set_is_auction(from.is_auction());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Auction_SC_GetAuctionItemNum::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Auction_SC_GetAuctionItemNum::CopyFrom(const Auction_SC_GetAuctionItemNum& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Auction_SC_GetAuctionItemNum::IsInitialized() const {

  return true;
}

void Auction_SC_GetAuctionItemNum::Swap(Auction_SC_GetAuctionItemNum* other) {
  if (other != this) {
    std::swap(is_auction_, other->is_auction_);
    id_num_list_.Swap(&other->id_num_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Auction_SC_GetAuctionItemNum::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Auction_SC_GetAuctionItemNum_descriptor_;
  metadata.reflection = Auction_SC_GetAuctionItemNum_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Auction_CS_GetAuctionItem::kItemUuidFieldNumber;
const int Auction_CS_GetAuctionItem::kItemIdFieldNumber;
const int Auction_CS_GetAuctionItem::kStartIndexFieldNumber;
const int Auction_CS_GetAuctionItem::kEndIndexFieldNumber;
#endif  // !_MSC_VER

Auction_CS_GetAuctionItem::Auction_CS_GetAuctionItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Auction_CS_GetAuctionItem::InitAsDefaultInstance() {
}

Auction_CS_GetAuctionItem::Auction_CS_GetAuctionItem(const Auction_CS_GetAuctionItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Auction_CS_GetAuctionItem::SharedCtor() {
  _cached_size_ = 0;
  item_uuid_ = GOOGLE_ULONGLONG(0);
  item_id_ = 0;
  start_index_ = 0;
  end_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Auction_CS_GetAuctionItem::~Auction_CS_GetAuctionItem() {
  SharedDtor();
}

void Auction_CS_GetAuctionItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Auction_CS_GetAuctionItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Auction_CS_GetAuctionItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Auction_CS_GetAuctionItem_descriptor_;
}

const Auction_CS_GetAuctionItem& Auction_CS_GetAuctionItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_auction_2eproto();
  return *default_instance_;
}

Auction_CS_GetAuctionItem* Auction_CS_GetAuctionItem::default_instance_ = NULL;

Auction_CS_GetAuctionItem* Auction_CS_GetAuctionItem::New() const {
  return new Auction_CS_GetAuctionItem;
}

void Auction_CS_GetAuctionItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_uuid_ = GOOGLE_ULONGLONG(0);
    item_id_ = 0;
    start_index_ = 0;
    end_index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Auction_CS_GetAuctionItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 item_uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_uuid_)));
          set_has_item_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_id;
        break;
      }

      // optional int32 item_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_start_index;
        break;
      }

      // optional int32 start_index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_index_)));
          set_has_start_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_end_index;
        break;
      }

      // optional int32 end_index = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_index_)));
          set_has_end_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Auction_CS_GetAuctionItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 item_uuid = 1;
  if (has_item_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->item_uuid(), output);
  }

  // optional int32 item_id = 2;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->item_id(), output);
  }

  // optional int32 start_index = 3;
  if (has_start_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->start_index(), output);
  }

  // optional int32 end_index = 4;
  if (has_end_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->end_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Auction_CS_GetAuctionItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 item_uuid = 1;
  if (has_item_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->item_uuid(), target);
  }

  // optional int32 item_id = 2;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->item_id(), target);
  }

  // optional int32 start_index = 3;
  if (has_start_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->start_index(), target);
  }

  // optional int32 end_index = 4;
  if (has_end_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->end_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Auction_CS_GetAuctionItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 item_uuid = 1;
    if (has_item_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_uuid());
    }

    // optional int32 item_id = 2;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_id());
    }

    // optional int32 start_index = 3;
    if (has_start_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->start_index());
    }

    // optional int32 end_index = 4;
    if (has_end_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->end_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Auction_CS_GetAuctionItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Auction_CS_GetAuctionItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Auction_CS_GetAuctionItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Auction_CS_GetAuctionItem::MergeFrom(const Auction_CS_GetAuctionItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_uuid()) {
      set_item_uuid(from.item_uuid());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_start_index()) {
      set_start_index(from.start_index());
    }
    if (from.has_end_index()) {
      set_end_index(from.end_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Auction_CS_GetAuctionItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Auction_CS_GetAuctionItem::CopyFrom(const Auction_CS_GetAuctionItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Auction_CS_GetAuctionItem::IsInitialized() const {

  return true;
}

void Auction_CS_GetAuctionItem::Swap(Auction_CS_GetAuctionItem* other) {
  if (other != this) {
    std::swap(item_uuid_, other->item_uuid_);
    std::swap(item_id_, other->item_id_);
    std::swap(start_index_, other->start_index_);
    std::swap(end_index_, other->end_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Auction_CS_GetAuctionItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Auction_CS_GetAuctionItem_descriptor_;
  metadata.reflection = Auction_CS_GetAuctionItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Auction_SC_GetAuctionItem::kTotalNumFieldNumber;
const int Auction_SC_GetAuctionItem::kStartIndexFieldNumber;
const int Auction_SC_GetAuctionItem::kEndIndexFieldNumber;
const int Auction_SC_GetAuctionItem::kItemListFieldNumber;
#endif  // !_MSC_VER

Auction_SC_GetAuctionItem::Auction_SC_GetAuctionItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Auction_SC_GetAuctionItem::InitAsDefaultInstance() {
}

Auction_SC_GetAuctionItem::Auction_SC_GetAuctionItem(const Auction_SC_GetAuctionItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Auction_SC_GetAuctionItem::SharedCtor() {
  _cached_size_ = 0;
  total_num_ = 0;
  start_index_ = 0;
  end_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Auction_SC_GetAuctionItem::~Auction_SC_GetAuctionItem() {
  SharedDtor();
}

void Auction_SC_GetAuctionItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Auction_SC_GetAuctionItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Auction_SC_GetAuctionItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Auction_SC_GetAuctionItem_descriptor_;
}

const Auction_SC_GetAuctionItem& Auction_SC_GetAuctionItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_auction_2eproto();
  return *default_instance_;
}

Auction_SC_GetAuctionItem* Auction_SC_GetAuctionItem::default_instance_ = NULL;

Auction_SC_GetAuctionItem* Auction_SC_GetAuctionItem::New() const {
  return new Auction_SC_GetAuctionItem;
}

void Auction_SC_GetAuctionItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    total_num_ = 0;
    start_index_ = 0;
    end_index_ = 0;
  }
  item_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Auction_SC_GetAuctionItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 total_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_num_)));
          set_has_total_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_start_index;
        break;
      }

      // optional int32 start_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_index_)));
          set_has_start_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_end_index;
        break;
      }

      // optional int32 end_index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_index_)));
          set_has_end_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_item_list;
        break;
      }

      // repeated .proto.message.AuctionItem item_list = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_item_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Auction_SC_GetAuctionItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 total_num = 1;
  if (has_total_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->total_num(), output);
  }

  // optional int32 start_index = 2;
  if (has_start_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->start_index(), output);
  }

  // optional int32 end_index = 3;
  if (has_end_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->end_index(), output);
  }

  // repeated .proto.message.AuctionItem item_list = 4;
  for (int i = 0; i < this->item_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->item_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Auction_SC_GetAuctionItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 total_num = 1;
  if (has_total_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->total_num(), target);
  }

  // optional int32 start_index = 2;
  if (has_start_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->start_index(), target);
  }

  // optional int32 end_index = 3;
  if (has_end_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->end_index(), target);
  }

  // repeated .proto.message.AuctionItem item_list = 4;
  for (int i = 0; i < this->item_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->item_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Auction_SC_GetAuctionItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 total_num = 1;
    if (has_total_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_num());
    }

    // optional int32 start_index = 2;
    if (has_start_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->start_index());
    }

    // optional int32 end_index = 3;
    if (has_end_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->end_index());
    }

  }
  // repeated .proto.message.AuctionItem item_list = 4;
  total_size += 1 * this->item_list_size();
  for (int i = 0; i < this->item_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Auction_SC_GetAuctionItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Auction_SC_GetAuctionItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Auction_SC_GetAuctionItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Auction_SC_GetAuctionItem::MergeFrom(const Auction_SC_GetAuctionItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_list_.MergeFrom(from.item_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_total_num()) {
      set_total_num(from.total_num());
    }
    if (from.has_start_index()) {
      set_start_index(from.start_index());
    }
    if (from.has_end_index()) {
      set_end_index(from.end_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Auction_SC_GetAuctionItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Auction_SC_GetAuctionItem::CopyFrom(const Auction_SC_GetAuctionItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Auction_SC_GetAuctionItem::IsInitialized() const {

  return true;
}

void Auction_SC_GetAuctionItem::Swap(Auction_SC_GetAuctionItem* other) {
  if (other != this) {
    std::swap(total_num_, other->total_num_);
    std::swap(start_index_, other->start_index_);
    std::swap(end_index_, other->end_index_);
    item_list_.Swap(&other->item_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Auction_SC_GetAuctionItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Auction_SC_GetAuctionItem_descriptor_;
  metadata.reflection = Auction_SC_GetAuctionItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Auction_SC_OtherBuy::kItemFieldNumber;
#endif  // !_MSC_VER

Auction_SC_OtherBuy::Auction_SC_OtherBuy()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Auction_SC_OtherBuy::InitAsDefaultInstance() {
  item_ = const_cast< ::proto::message::AuctionItem*>(&::proto::message::AuctionItem::default_instance());
}

Auction_SC_OtherBuy::Auction_SC_OtherBuy(const Auction_SC_OtherBuy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Auction_SC_OtherBuy::SharedCtor() {
  _cached_size_ = 0;
  item_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Auction_SC_OtherBuy::~Auction_SC_OtherBuy() {
  SharedDtor();
}

void Auction_SC_OtherBuy::SharedDtor() {
  if (this != default_instance_) {
    delete item_;
  }
}

void Auction_SC_OtherBuy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Auction_SC_OtherBuy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Auction_SC_OtherBuy_descriptor_;
}

const Auction_SC_OtherBuy& Auction_SC_OtherBuy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_auction_2eproto();
  return *default_instance_;
}

Auction_SC_OtherBuy* Auction_SC_OtherBuy::default_instance_ = NULL;

Auction_SC_OtherBuy* Auction_SC_OtherBuy::New() const {
  return new Auction_SC_OtherBuy;
}

void Auction_SC_OtherBuy::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_item()) {
      if (item_ != NULL) item_->::proto::message::AuctionItem::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Auction_SC_OtherBuy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.message.AuctionItem item = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Auction_SC_OtherBuy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto.message.AuctionItem item = 1;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->item(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Auction_SC_OtherBuy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto.message.AuctionItem item = 1;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->item(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Auction_SC_OtherBuy::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto.message.AuctionItem item = 1;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Auction_SC_OtherBuy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Auction_SC_OtherBuy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Auction_SC_OtherBuy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Auction_SC_OtherBuy::MergeFrom(const Auction_SC_OtherBuy& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item()) {
      mutable_item()->::proto::message::AuctionItem::MergeFrom(from.item());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Auction_SC_OtherBuy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Auction_SC_OtherBuy::CopyFrom(const Auction_SC_OtherBuy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Auction_SC_OtherBuy::IsInitialized() const {

  return true;
}

void Auction_SC_OtherBuy::Swap(Auction_SC_OtherBuy* other) {
  if (other != this) {
    std::swap(item_, other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Auction_SC_OtherBuy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Auction_SC_OtherBuy_descriptor_;
  metadata.reflection = Auction_SC_OtherBuy_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace proto

// @@protoc_insertion_point(global_scope)
