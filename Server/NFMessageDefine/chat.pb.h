// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chat.proto

#ifndef PROTOBUF_chat_2eproto__INCLUDED
#define PROTOBUF_chat_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace message {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_chat_2eproto();
void protobuf_AssignDesc_chat_2eproto();
void protobuf_ShutdownFile_chat_2eproto();

class ChatPlayerData;
class Chat_CTS_PrivateChat;
class Chat_CTS_Chat;
class Chat_STC_Chat;
class Chat_STC_UpdateChatMsg;
class GuildMessage;
class Chat_STC_GuildPublic;

// ===================================================================

class ChatPlayerData : public ::google::protobuf::Message {
 public:
  ChatPlayerData();
  virtual ~ChatPlayerData();

  ChatPlayerData(const ChatPlayerData& from);

  inline ChatPlayerData& operator=(const ChatPlayerData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatPlayerData& default_instance();

  void Swap(ChatPlayerData* other);

  // implements Message ----------------------------------------------

  ChatPlayerData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChatPlayerData& from);
  void MergeFrom(const ChatPlayerData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 playerid = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  inline ::google::protobuf::uint64 playerid() const;
  inline void set_playerid(::google::protobuf::uint64 value);

  // required uint32 link = 2;
  inline bool has_link() const;
  inline void clear_link();
  static const int kLinkFieldNumber = 2;
  inline ::google::protobuf::uint32 link() const;
  inline void set_link(::google::protobuf::uint32 value);

  // required uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // required uint32 weapon = 4;
  inline bool has_weapon() const;
  inline void clear_weapon();
  static const int kWeaponFieldNumber = 4;
  inline ::google::protobuf::uint32 weapon() const;
  inline void set_weapon(::google::protobuf::uint32 value);

  // required uint32 mapid = 5;
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapidFieldNumber = 5;
  inline ::google::protobuf::uint32 mapid() const;
  inline void set_mapid(::google::protobuf::uint32 value);

  // required uint64 charid = 6;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 6;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // required string name = 7;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 7;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required uint64 guildid = 8;
  inline bool has_guildid() const;
  inline void clear_guildid();
  static const int kGuildidFieldNumber = 8;
  inline ::google::protobuf::uint64 guildid() const;
  inline void set_guildid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.message.ChatPlayerData)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_link();
  inline void clear_has_link();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_weapon();
  inline void clear_has_weapon();
  inline void set_has_mapid();
  inline void clear_has_mapid();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_guildid();
  inline void clear_has_guildid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 playerid_;
  ::google::protobuf::uint32 link_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 weapon_;
  ::google::protobuf::uint32 mapid_;
  ::google::protobuf::uint64 charid_;
  ::std::string* name_;
  ::google::protobuf::uint64 guildid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_chat_2eproto();
  friend void protobuf_AssignDesc_chat_2eproto();
  friend void protobuf_ShutdownFile_chat_2eproto();

  void InitAsDefaultInstance();
  static ChatPlayerData* default_instance_;
};
// -------------------------------------------------------------------

class Chat_CTS_PrivateChat : public ::google::protobuf::Message {
 public:
  Chat_CTS_PrivateChat();
  virtual ~Chat_CTS_PrivateChat();

  Chat_CTS_PrivateChat(const Chat_CTS_PrivateChat& from);

  inline Chat_CTS_PrivateChat& operator=(const Chat_CTS_PrivateChat& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Chat_CTS_PrivateChat& default_instance();

  void Swap(Chat_CTS_PrivateChat* other);

  // implements Message ----------------------------------------------

  Chat_CTS_PrivateChat* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Chat_CTS_PrivateChat& from);
  void MergeFrom(const Chat_CTS_PrivateChat& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 toCharId = 1;
  inline bool has_tocharid() const;
  inline void clear_tocharid();
  static const int kToCharIdFieldNumber = 1;
  inline ::google::protobuf::uint64 tocharid() const;
  inline void set_tocharid(::google::protobuf::uint64 value);

  // required int32 contentType = 2;
  inline bool has_contenttype() const;
  inline void clear_contenttype();
  static const int kContentTypeFieldNumber = 2;
  inline ::google::protobuf::int32 contenttype() const;
  inline void set_contenttype(::google::protobuf::int32 value);

  // required string content = 3;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 3;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional string appendContent = 4;
  inline bool has_appendcontent() const;
  inline void clear_appendcontent();
  static const int kAppendContentFieldNumber = 4;
  inline const ::std::string& appendcontent() const;
  inline void set_appendcontent(const ::std::string& value);
  inline void set_appendcontent(const char* value);
  inline void set_appendcontent(const char* value, size_t size);
  inline ::std::string* mutable_appendcontent();
  inline ::std::string* release_appendcontent();
  inline void set_allocated_appendcontent(::std::string* appendcontent);

  // @@protoc_insertion_point(class_scope:proto.message.Chat_CTS_PrivateChat)
 private:
  inline void set_has_tocharid();
  inline void clear_has_tocharid();
  inline void set_has_contenttype();
  inline void clear_has_contenttype();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_appendcontent();
  inline void clear_has_appendcontent();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 tocharid_;
  ::std::string* content_;
  ::std::string* appendcontent_;
  ::google::protobuf::int32 contenttype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_chat_2eproto();
  friend void protobuf_AssignDesc_chat_2eproto();
  friend void protobuf_ShutdownFile_chat_2eproto();

  void InitAsDefaultInstance();
  static Chat_CTS_PrivateChat* default_instance_;
};
// -------------------------------------------------------------------

class Chat_CTS_Chat : public ::google::protobuf::Message {
 public:
  Chat_CTS_Chat();
  virtual ~Chat_CTS_Chat();

  Chat_CTS_Chat(const Chat_CTS_Chat& from);

  inline Chat_CTS_Chat& operator=(const Chat_CTS_Chat& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Chat_CTS_Chat& default_instance();

  void Swap(Chat_CTS_Chat* other);

  // implements Message ----------------------------------------------

  Chat_CTS_Chat* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Chat_CTS_Chat& from);
  void MergeFrom(const Chat_CTS_Chat& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 channel = 1;
  inline bool has_channel() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 1;
  inline ::google::protobuf::int32 channel() const;
  inline void set_channel(::google::protobuf::int32 value);

  // required int32 contentType = 2;
  inline bool has_contenttype() const;
  inline void clear_contenttype();
  static const int kContentTypeFieldNumber = 2;
  inline ::google::protobuf::int32 contenttype() const;
  inline void set_contenttype(::google::protobuf::int32 value);

  // required string content = 3;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 3;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional string appendContent = 4;
  inline bool has_appendcontent() const;
  inline void clear_appendcontent();
  static const int kAppendContentFieldNumber = 4;
  inline const ::std::string& appendcontent() const;
  inline void set_appendcontent(const ::std::string& value);
  inline void set_appendcontent(const char* value);
  inline void set_appendcontent(const char* value, size_t size);
  inline ::std::string* mutable_appendcontent();
  inline ::std::string* release_appendcontent();
  inline void set_allocated_appendcontent(::std::string* appendcontent);

  // optional int32 voiceTime = 5;
  inline bool has_voicetime() const;
  inline void clear_voicetime();
  static const int kVoiceTimeFieldNumber = 5;
  inline ::google::protobuf::int32 voicetime() const;
  inline void set_voicetime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Chat_CTS_Chat)
 private:
  inline void set_has_channel();
  inline void clear_has_channel();
  inline void set_has_contenttype();
  inline void clear_has_contenttype();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_appendcontent();
  inline void clear_has_appendcontent();
  inline void set_has_voicetime();
  inline void clear_has_voicetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 channel_;
  ::google::protobuf::int32 contenttype_;
  ::std::string* content_;
  ::std::string* appendcontent_;
  ::google::protobuf::int32 voicetime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_chat_2eproto();
  friend void protobuf_AssignDesc_chat_2eproto();
  friend void protobuf_ShutdownFile_chat_2eproto();

  void InitAsDefaultInstance();
  static Chat_CTS_Chat* default_instance_;
};
// -------------------------------------------------------------------

class Chat_STC_Chat : public ::google::protobuf::Message {
 public:
  Chat_STC_Chat();
  virtual ~Chat_STC_Chat();

  Chat_STC_Chat(const Chat_STC_Chat& from);

  inline Chat_STC_Chat& operator=(const Chat_STC_Chat& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Chat_STC_Chat& default_instance();

  void Swap(Chat_STC_Chat* other);

  // implements Message ----------------------------------------------

  Chat_STC_Chat* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Chat_STC_Chat& from);
  void MergeFrom(const Chat_STC_Chat& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Chat_STC_Chat)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_chat_2eproto();
  friend void protobuf_AssignDesc_chat_2eproto();
  friend void protobuf_ShutdownFile_chat_2eproto();

  void InitAsDefaultInstance();
  static Chat_STC_Chat* default_instance_;
};
// -------------------------------------------------------------------

class Chat_STC_UpdateChatMsg : public ::google::protobuf::Message {
 public:
  Chat_STC_UpdateChatMsg();
  virtual ~Chat_STC_UpdateChatMsg();

  Chat_STC_UpdateChatMsg(const Chat_STC_UpdateChatMsg& from);

  inline Chat_STC_UpdateChatMsg& operator=(const Chat_STC_UpdateChatMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Chat_STC_UpdateChatMsg& default_instance();

  void Swap(Chat_STC_UpdateChatMsg* other);

  // implements Message ----------------------------------------------

  Chat_STC_UpdateChatMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Chat_STC_UpdateChatMsg& from);
  void MergeFrom(const Chat_STC_UpdateChatMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 channel = 1;
  inline bool has_channel() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 1;
  inline ::google::protobuf::int32 channel() const;
  inline void set_channel(::google::protobuf::int32 value);

  // required uint64 fromCharId = 2;
  inline bool has_fromcharid() const;
  inline void clear_fromcharid();
  static const int kFromCharIdFieldNumber = 2;
  inline ::google::protobuf::uint64 fromcharid() const;
  inline void set_fromcharid(::google::protobuf::uint64 value);

  // required int32 weapon = 3;
  inline bool has_weapon() const;
  inline void clear_weapon();
  static const int kWeaponFieldNumber = 3;
  inline ::google::protobuf::int32 weapon() const;
  inline void set_weapon(::google::protobuf::int32 value);

  // required int32 vipLevel = 4;
  inline bool has_viplevel() const;
  inline void clear_viplevel();
  static const int kVipLevelFieldNumber = 4;
  inline ::google::protobuf::int32 viplevel() const;
  inline void set_viplevel(::google::protobuf::int32 value);

  // required string charName = 5;
  inline bool has_charname() const;
  inline void clear_charname();
  static const int kCharNameFieldNumber = 5;
  inline const ::std::string& charname() const;
  inline void set_charname(const ::std::string& value);
  inline void set_charname(const char* value);
  inline void set_charname(const char* value, size_t size);
  inline ::std::string* mutable_charname();
  inline ::std::string* release_charname();
  inline void set_allocated_charname(::std::string* charname);

  // required int32 contentType = 6;
  inline bool has_contenttype() const;
  inline void clear_contenttype();
  static const int kContentTypeFieldNumber = 6;
  inline ::google::protobuf::int32 contenttype() const;
  inline void set_contenttype(::google::protobuf::int32 value);

  // required string content = 7;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 7;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional int32 voiceTime = 8;
  inline bool has_voicetime() const;
  inline void clear_voicetime();
  static const int kVoiceTimeFieldNumber = 8;
  inline ::google::protobuf::int32 voicetime() const;
  inline void set_voicetime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Chat_STC_UpdateChatMsg)
 private:
  inline void set_has_channel();
  inline void clear_has_channel();
  inline void set_has_fromcharid();
  inline void clear_has_fromcharid();
  inline void set_has_weapon();
  inline void clear_has_weapon();
  inline void set_has_viplevel();
  inline void clear_has_viplevel();
  inline void set_has_charname();
  inline void clear_has_charname();
  inline void set_has_contenttype();
  inline void clear_has_contenttype();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_voicetime();
  inline void clear_has_voicetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 fromcharid_;
  ::google::protobuf::int32 channel_;
  ::google::protobuf::int32 weapon_;
  ::std::string* charname_;
  ::google::protobuf::int32 viplevel_;
  ::google::protobuf::int32 contenttype_;
  ::std::string* content_;
  ::google::protobuf::int32 voicetime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_chat_2eproto();
  friend void protobuf_AssignDesc_chat_2eproto();
  friend void protobuf_ShutdownFile_chat_2eproto();

  void InitAsDefaultInstance();
  static Chat_STC_UpdateChatMsg* default_instance_;
};
// -------------------------------------------------------------------

class GuildMessage : public ::google::protobuf::Message {
 public:
  GuildMessage();
  virtual ~GuildMessage();

  GuildMessage(const GuildMessage& from);

  inline GuildMessage& operator=(const GuildMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildMessage& default_instance();

  void Swap(GuildMessage* other);

  // implements Message ----------------------------------------------

  GuildMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildMessage& from);
  void MergeFrom(const GuildMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 guildid = 1;
  inline bool has_guildid() const;
  inline void clear_guildid();
  static const int kGuildidFieldNumber = 1;
  inline ::google::protobuf::uint64 guildid() const;
  inline void set_guildid(::google::protobuf::uint64 value);

  // required uint32 contextid = 2;
  inline bool has_contextid() const;
  inline void clear_contextid();
  static const int kContextidFieldNumber = 2;
  inline ::google::protobuf::uint32 contextid() const;
  inline void set_contextid(::google::protobuf::uint32 value);

  // required string contextpar = 3;
  inline bool has_contextpar() const;
  inline void clear_contextpar();
  static const int kContextparFieldNumber = 3;
  inline const ::std::string& contextpar() const;
  inline void set_contextpar(const ::std::string& value);
  inline void set_contextpar(const char* value);
  inline void set_contextpar(const char* value, size_t size);
  inline ::std::string* mutable_contextpar();
  inline ::std::string* release_contextpar();
  inline void set_allocated_contextpar(::std::string* contextpar);

  // required bool isall = 4;
  inline bool has_isall() const;
  inline void clear_isall();
  static const int kIsallFieldNumber = 4;
  inline bool isall() const;
  inline void set_isall(bool value);

  // repeated uint64 playeridlist = 5;
  inline int playeridlist_size() const;
  inline void clear_playeridlist();
  static const int kPlayeridlistFieldNumber = 5;
  inline ::google::protobuf::uint64 playeridlist(int index) const;
  inline void set_playeridlist(int index, ::google::protobuf::uint64 value);
  inline void add_playeridlist(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      playeridlist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_playeridlist();

  // @@protoc_insertion_point(class_scope:proto.message.GuildMessage)
 private:
  inline void set_has_guildid();
  inline void clear_has_guildid();
  inline void set_has_contextid();
  inline void clear_has_contextid();
  inline void set_has_contextpar();
  inline void clear_has_contextpar();
  inline void set_has_isall();
  inline void clear_has_isall();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 guildid_;
  ::std::string* contextpar_;
  ::google::protobuf::uint32 contextid_;
  bool isall_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > playeridlist_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_chat_2eproto();
  friend void protobuf_AssignDesc_chat_2eproto();
  friend void protobuf_ShutdownFile_chat_2eproto();

  void InitAsDefaultInstance();
  static GuildMessage* default_instance_;
};
// -------------------------------------------------------------------

class Chat_STC_GuildPublic : public ::google::protobuf::Message {
 public:
  Chat_STC_GuildPublic();
  virtual ~Chat_STC_GuildPublic();

  Chat_STC_GuildPublic(const Chat_STC_GuildPublic& from);

  inline Chat_STC_GuildPublic& operator=(const Chat_STC_GuildPublic& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Chat_STC_GuildPublic& default_instance();

  void Swap(Chat_STC_GuildPublic* other);

  // implements Message ----------------------------------------------

  Chat_STC_GuildPublic* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Chat_STC_GuildPublic& from);
  void MergeFrom(const Chat_STC_GuildPublic& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 contextid = 1;
  inline bool has_contextid() const;
  inline void clear_contextid();
  static const int kContextidFieldNumber = 1;
  inline ::google::protobuf::uint32 contextid() const;
  inline void set_contextid(::google::protobuf::uint32 value);

  // required string contextpar = 2;
  inline bool has_contextpar() const;
  inline void clear_contextpar();
  static const int kContextparFieldNumber = 2;
  inline const ::std::string& contextpar() const;
  inline void set_contextpar(const ::std::string& value);
  inline void set_contextpar(const char* value);
  inline void set_contextpar(const char* value, size_t size);
  inline ::std::string* mutable_contextpar();
  inline ::std::string* release_contextpar();
  inline void set_allocated_contextpar(::std::string* contextpar);

  // @@protoc_insertion_point(class_scope:proto.message.Chat_STC_GuildPublic)
 private:
  inline void set_has_contextid();
  inline void clear_has_contextid();
  inline void set_has_contextpar();
  inline void clear_has_contextpar();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* contextpar_;
  ::google::protobuf::uint32 contextid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_chat_2eproto();
  friend void protobuf_AssignDesc_chat_2eproto();
  friend void protobuf_ShutdownFile_chat_2eproto();

  void InitAsDefaultInstance();
  static Chat_STC_GuildPublic* default_instance_;
};
// ===================================================================


// ===================================================================

// ChatPlayerData

// required uint64 playerid = 1;
inline bool ChatPlayerData::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChatPlayerData::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChatPlayerData::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChatPlayerData::clear_playerid() {
  playerid_ = GOOGLE_ULONGLONG(0);
  clear_has_playerid();
}
inline ::google::protobuf::uint64 ChatPlayerData::playerid() const {
  return playerid_;
}
inline void ChatPlayerData::set_playerid(::google::protobuf::uint64 value) {
  set_has_playerid();
  playerid_ = value;
}

// required uint32 link = 2;
inline bool ChatPlayerData::has_link() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChatPlayerData::set_has_link() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChatPlayerData::clear_has_link() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChatPlayerData::clear_link() {
  link_ = 0u;
  clear_has_link();
}
inline ::google::protobuf::uint32 ChatPlayerData::link() const {
  return link_;
}
inline void ChatPlayerData::set_link(::google::protobuf::uint32 value) {
  set_has_link();
  link_ = value;
}

// required uint32 level = 3;
inline bool ChatPlayerData::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChatPlayerData::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChatPlayerData::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChatPlayerData::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 ChatPlayerData::level() const {
  return level_;
}
inline void ChatPlayerData::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// required uint32 weapon = 4;
inline bool ChatPlayerData::has_weapon() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChatPlayerData::set_has_weapon() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChatPlayerData::clear_has_weapon() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChatPlayerData::clear_weapon() {
  weapon_ = 0u;
  clear_has_weapon();
}
inline ::google::protobuf::uint32 ChatPlayerData::weapon() const {
  return weapon_;
}
inline void ChatPlayerData::set_weapon(::google::protobuf::uint32 value) {
  set_has_weapon();
  weapon_ = value;
}

// required uint32 mapid = 5;
inline bool ChatPlayerData::has_mapid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ChatPlayerData::set_has_mapid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ChatPlayerData::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ChatPlayerData::clear_mapid() {
  mapid_ = 0u;
  clear_has_mapid();
}
inline ::google::protobuf::uint32 ChatPlayerData::mapid() const {
  return mapid_;
}
inline void ChatPlayerData::set_mapid(::google::protobuf::uint32 value) {
  set_has_mapid();
  mapid_ = value;
}

// required uint64 charid = 6;
inline bool ChatPlayerData::has_charid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ChatPlayerData::set_has_charid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ChatPlayerData::clear_has_charid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ChatPlayerData::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 ChatPlayerData::charid() const {
  return charid_;
}
inline void ChatPlayerData::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
}

// required string name = 7;
inline bool ChatPlayerData::has_name() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ChatPlayerData::set_has_name() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ChatPlayerData::clear_has_name() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ChatPlayerData::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ChatPlayerData::name() const {
  return *name_;
}
inline void ChatPlayerData::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ChatPlayerData::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ChatPlayerData::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChatPlayerData::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* ChatPlayerData::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ChatPlayerData::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint64 guildid = 8;
inline bool ChatPlayerData::has_guildid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ChatPlayerData::set_has_guildid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ChatPlayerData::clear_has_guildid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ChatPlayerData::clear_guildid() {
  guildid_ = GOOGLE_ULONGLONG(0);
  clear_has_guildid();
}
inline ::google::protobuf::uint64 ChatPlayerData::guildid() const {
  return guildid_;
}
inline void ChatPlayerData::set_guildid(::google::protobuf::uint64 value) {
  set_has_guildid();
  guildid_ = value;
}

// -------------------------------------------------------------------

// Chat_CTS_PrivateChat

// required uint64 toCharId = 1;
inline bool Chat_CTS_PrivateChat::has_tocharid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Chat_CTS_PrivateChat::set_has_tocharid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Chat_CTS_PrivateChat::clear_has_tocharid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Chat_CTS_PrivateChat::clear_tocharid() {
  tocharid_ = GOOGLE_ULONGLONG(0);
  clear_has_tocharid();
}
inline ::google::protobuf::uint64 Chat_CTS_PrivateChat::tocharid() const {
  return tocharid_;
}
inline void Chat_CTS_PrivateChat::set_tocharid(::google::protobuf::uint64 value) {
  set_has_tocharid();
  tocharid_ = value;
}

// required int32 contentType = 2;
inline bool Chat_CTS_PrivateChat::has_contenttype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Chat_CTS_PrivateChat::set_has_contenttype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Chat_CTS_PrivateChat::clear_has_contenttype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Chat_CTS_PrivateChat::clear_contenttype() {
  contenttype_ = 0;
  clear_has_contenttype();
}
inline ::google::protobuf::int32 Chat_CTS_PrivateChat::contenttype() const {
  return contenttype_;
}
inline void Chat_CTS_PrivateChat::set_contenttype(::google::protobuf::int32 value) {
  set_has_contenttype();
  contenttype_ = value;
}

// required string content = 3;
inline bool Chat_CTS_PrivateChat::has_content() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Chat_CTS_PrivateChat::set_has_content() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Chat_CTS_PrivateChat::clear_has_content() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Chat_CTS_PrivateChat::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& Chat_CTS_PrivateChat::content() const {
  return *content_;
}
inline void Chat_CTS_PrivateChat::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void Chat_CTS_PrivateChat::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void Chat_CTS_PrivateChat::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Chat_CTS_PrivateChat::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* Chat_CTS_PrivateChat::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Chat_CTS_PrivateChat::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string appendContent = 4;
inline bool Chat_CTS_PrivateChat::has_appendcontent() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Chat_CTS_PrivateChat::set_has_appendcontent() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Chat_CTS_PrivateChat::clear_has_appendcontent() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Chat_CTS_PrivateChat::clear_appendcontent() {
  if (appendcontent_ != &::google::protobuf::internal::kEmptyString) {
    appendcontent_->clear();
  }
  clear_has_appendcontent();
}
inline const ::std::string& Chat_CTS_PrivateChat::appendcontent() const {
  return *appendcontent_;
}
inline void Chat_CTS_PrivateChat::set_appendcontent(const ::std::string& value) {
  set_has_appendcontent();
  if (appendcontent_ == &::google::protobuf::internal::kEmptyString) {
    appendcontent_ = new ::std::string;
  }
  appendcontent_->assign(value);
}
inline void Chat_CTS_PrivateChat::set_appendcontent(const char* value) {
  set_has_appendcontent();
  if (appendcontent_ == &::google::protobuf::internal::kEmptyString) {
    appendcontent_ = new ::std::string;
  }
  appendcontent_->assign(value);
}
inline void Chat_CTS_PrivateChat::set_appendcontent(const char* value, size_t size) {
  set_has_appendcontent();
  if (appendcontent_ == &::google::protobuf::internal::kEmptyString) {
    appendcontent_ = new ::std::string;
  }
  appendcontent_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Chat_CTS_PrivateChat::mutable_appendcontent() {
  set_has_appendcontent();
  if (appendcontent_ == &::google::protobuf::internal::kEmptyString) {
    appendcontent_ = new ::std::string;
  }
  return appendcontent_;
}
inline ::std::string* Chat_CTS_PrivateChat::release_appendcontent() {
  clear_has_appendcontent();
  if (appendcontent_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = appendcontent_;
    appendcontent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Chat_CTS_PrivateChat::set_allocated_appendcontent(::std::string* appendcontent) {
  if (appendcontent_ != &::google::protobuf::internal::kEmptyString) {
    delete appendcontent_;
  }
  if (appendcontent) {
    set_has_appendcontent();
    appendcontent_ = appendcontent;
  } else {
    clear_has_appendcontent();
    appendcontent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Chat_CTS_Chat

// required int32 channel = 1;
inline bool Chat_CTS_Chat::has_channel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Chat_CTS_Chat::set_has_channel() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Chat_CTS_Chat::clear_has_channel() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Chat_CTS_Chat::clear_channel() {
  channel_ = 0;
  clear_has_channel();
}
inline ::google::protobuf::int32 Chat_CTS_Chat::channel() const {
  return channel_;
}
inline void Chat_CTS_Chat::set_channel(::google::protobuf::int32 value) {
  set_has_channel();
  channel_ = value;
}

// required int32 contentType = 2;
inline bool Chat_CTS_Chat::has_contenttype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Chat_CTS_Chat::set_has_contenttype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Chat_CTS_Chat::clear_has_contenttype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Chat_CTS_Chat::clear_contenttype() {
  contenttype_ = 0;
  clear_has_contenttype();
}
inline ::google::protobuf::int32 Chat_CTS_Chat::contenttype() const {
  return contenttype_;
}
inline void Chat_CTS_Chat::set_contenttype(::google::protobuf::int32 value) {
  set_has_contenttype();
  contenttype_ = value;
}

// required string content = 3;
inline bool Chat_CTS_Chat::has_content() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Chat_CTS_Chat::set_has_content() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Chat_CTS_Chat::clear_has_content() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Chat_CTS_Chat::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& Chat_CTS_Chat::content() const {
  return *content_;
}
inline void Chat_CTS_Chat::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void Chat_CTS_Chat::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void Chat_CTS_Chat::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Chat_CTS_Chat::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* Chat_CTS_Chat::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Chat_CTS_Chat::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string appendContent = 4;
inline bool Chat_CTS_Chat::has_appendcontent() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Chat_CTS_Chat::set_has_appendcontent() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Chat_CTS_Chat::clear_has_appendcontent() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Chat_CTS_Chat::clear_appendcontent() {
  if (appendcontent_ != &::google::protobuf::internal::kEmptyString) {
    appendcontent_->clear();
  }
  clear_has_appendcontent();
}
inline const ::std::string& Chat_CTS_Chat::appendcontent() const {
  return *appendcontent_;
}
inline void Chat_CTS_Chat::set_appendcontent(const ::std::string& value) {
  set_has_appendcontent();
  if (appendcontent_ == &::google::protobuf::internal::kEmptyString) {
    appendcontent_ = new ::std::string;
  }
  appendcontent_->assign(value);
}
inline void Chat_CTS_Chat::set_appendcontent(const char* value) {
  set_has_appendcontent();
  if (appendcontent_ == &::google::protobuf::internal::kEmptyString) {
    appendcontent_ = new ::std::string;
  }
  appendcontent_->assign(value);
}
inline void Chat_CTS_Chat::set_appendcontent(const char* value, size_t size) {
  set_has_appendcontent();
  if (appendcontent_ == &::google::protobuf::internal::kEmptyString) {
    appendcontent_ = new ::std::string;
  }
  appendcontent_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Chat_CTS_Chat::mutable_appendcontent() {
  set_has_appendcontent();
  if (appendcontent_ == &::google::protobuf::internal::kEmptyString) {
    appendcontent_ = new ::std::string;
  }
  return appendcontent_;
}
inline ::std::string* Chat_CTS_Chat::release_appendcontent() {
  clear_has_appendcontent();
  if (appendcontent_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = appendcontent_;
    appendcontent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Chat_CTS_Chat::set_allocated_appendcontent(::std::string* appendcontent) {
  if (appendcontent_ != &::google::protobuf::internal::kEmptyString) {
    delete appendcontent_;
  }
  if (appendcontent) {
    set_has_appendcontent();
    appendcontent_ = appendcontent;
  } else {
    clear_has_appendcontent();
    appendcontent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 voiceTime = 5;
inline bool Chat_CTS_Chat::has_voicetime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Chat_CTS_Chat::set_has_voicetime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Chat_CTS_Chat::clear_has_voicetime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Chat_CTS_Chat::clear_voicetime() {
  voicetime_ = 0;
  clear_has_voicetime();
}
inline ::google::protobuf::int32 Chat_CTS_Chat::voicetime() const {
  return voicetime_;
}
inline void Chat_CTS_Chat::set_voicetime(::google::protobuf::int32 value) {
  set_has_voicetime();
  voicetime_ = value;
}

// -------------------------------------------------------------------

// Chat_STC_Chat

// required int32 result = 1;
inline bool Chat_STC_Chat::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Chat_STC_Chat::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Chat_STC_Chat::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Chat_STC_Chat::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 Chat_STC_Chat::result() const {
  return result_;
}
inline void Chat_STC_Chat::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// Chat_STC_UpdateChatMsg

// required int32 channel = 1;
inline bool Chat_STC_UpdateChatMsg::has_channel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Chat_STC_UpdateChatMsg::set_has_channel() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Chat_STC_UpdateChatMsg::clear_has_channel() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Chat_STC_UpdateChatMsg::clear_channel() {
  channel_ = 0;
  clear_has_channel();
}
inline ::google::protobuf::int32 Chat_STC_UpdateChatMsg::channel() const {
  return channel_;
}
inline void Chat_STC_UpdateChatMsg::set_channel(::google::protobuf::int32 value) {
  set_has_channel();
  channel_ = value;
}

// required uint64 fromCharId = 2;
inline bool Chat_STC_UpdateChatMsg::has_fromcharid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Chat_STC_UpdateChatMsg::set_has_fromcharid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Chat_STC_UpdateChatMsg::clear_has_fromcharid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Chat_STC_UpdateChatMsg::clear_fromcharid() {
  fromcharid_ = GOOGLE_ULONGLONG(0);
  clear_has_fromcharid();
}
inline ::google::protobuf::uint64 Chat_STC_UpdateChatMsg::fromcharid() const {
  return fromcharid_;
}
inline void Chat_STC_UpdateChatMsg::set_fromcharid(::google::protobuf::uint64 value) {
  set_has_fromcharid();
  fromcharid_ = value;
}

// required int32 weapon = 3;
inline bool Chat_STC_UpdateChatMsg::has_weapon() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Chat_STC_UpdateChatMsg::set_has_weapon() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Chat_STC_UpdateChatMsg::clear_has_weapon() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Chat_STC_UpdateChatMsg::clear_weapon() {
  weapon_ = 0;
  clear_has_weapon();
}
inline ::google::protobuf::int32 Chat_STC_UpdateChatMsg::weapon() const {
  return weapon_;
}
inline void Chat_STC_UpdateChatMsg::set_weapon(::google::protobuf::int32 value) {
  set_has_weapon();
  weapon_ = value;
}

// required int32 vipLevel = 4;
inline bool Chat_STC_UpdateChatMsg::has_viplevel() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Chat_STC_UpdateChatMsg::set_has_viplevel() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Chat_STC_UpdateChatMsg::clear_has_viplevel() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Chat_STC_UpdateChatMsg::clear_viplevel() {
  viplevel_ = 0;
  clear_has_viplevel();
}
inline ::google::protobuf::int32 Chat_STC_UpdateChatMsg::viplevel() const {
  return viplevel_;
}
inline void Chat_STC_UpdateChatMsg::set_viplevel(::google::protobuf::int32 value) {
  set_has_viplevel();
  viplevel_ = value;
}

// required string charName = 5;
inline bool Chat_STC_UpdateChatMsg::has_charname() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Chat_STC_UpdateChatMsg::set_has_charname() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Chat_STC_UpdateChatMsg::clear_has_charname() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Chat_STC_UpdateChatMsg::clear_charname() {
  if (charname_ != &::google::protobuf::internal::kEmptyString) {
    charname_->clear();
  }
  clear_has_charname();
}
inline const ::std::string& Chat_STC_UpdateChatMsg::charname() const {
  return *charname_;
}
inline void Chat_STC_UpdateChatMsg::set_charname(const ::std::string& value) {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    charname_ = new ::std::string;
  }
  charname_->assign(value);
}
inline void Chat_STC_UpdateChatMsg::set_charname(const char* value) {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    charname_ = new ::std::string;
  }
  charname_->assign(value);
}
inline void Chat_STC_UpdateChatMsg::set_charname(const char* value, size_t size) {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    charname_ = new ::std::string;
  }
  charname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Chat_STC_UpdateChatMsg::mutable_charname() {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    charname_ = new ::std::string;
  }
  return charname_;
}
inline ::std::string* Chat_STC_UpdateChatMsg::release_charname() {
  clear_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = charname_;
    charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Chat_STC_UpdateChatMsg::set_allocated_charname(::std::string* charname) {
  if (charname_ != &::google::protobuf::internal::kEmptyString) {
    delete charname_;
  }
  if (charname) {
    set_has_charname();
    charname_ = charname;
  } else {
    clear_has_charname();
    charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 contentType = 6;
inline bool Chat_STC_UpdateChatMsg::has_contenttype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Chat_STC_UpdateChatMsg::set_has_contenttype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Chat_STC_UpdateChatMsg::clear_has_contenttype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Chat_STC_UpdateChatMsg::clear_contenttype() {
  contenttype_ = 0;
  clear_has_contenttype();
}
inline ::google::protobuf::int32 Chat_STC_UpdateChatMsg::contenttype() const {
  return contenttype_;
}
inline void Chat_STC_UpdateChatMsg::set_contenttype(::google::protobuf::int32 value) {
  set_has_contenttype();
  contenttype_ = value;
}

// required string content = 7;
inline bool Chat_STC_UpdateChatMsg::has_content() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Chat_STC_UpdateChatMsg::set_has_content() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Chat_STC_UpdateChatMsg::clear_has_content() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Chat_STC_UpdateChatMsg::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& Chat_STC_UpdateChatMsg::content() const {
  return *content_;
}
inline void Chat_STC_UpdateChatMsg::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void Chat_STC_UpdateChatMsg::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void Chat_STC_UpdateChatMsg::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Chat_STC_UpdateChatMsg::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* Chat_STC_UpdateChatMsg::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Chat_STC_UpdateChatMsg::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 voiceTime = 8;
inline bool Chat_STC_UpdateChatMsg::has_voicetime() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Chat_STC_UpdateChatMsg::set_has_voicetime() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Chat_STC_UpdateChatMsg::clear_has_voicetime() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Chat_STC_UpdateChatMsg::clear_voicetime() {
  voicetime_ = 0;
  clear_has_voicetime();
}
inline ::google::protobuf::int32 Chat_STC_UpdateChatMsg::voicetime() const {
  return voicetime_;
}
inline void Chat_STC_UpdateChatMsg::set_voicetime(::google::protobuf::int32 value) {
  set_has_voicetime();
  voicetime_ = value;
}

// -------------------------------------------------------------------

// GuildMessage

// required uint64 guildid = 1;
inline bool GuildMessage::has_guildid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildMessage::set_has_guildid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildMessage::clear_has_guildid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildMessage::clear_guildid() {
  guildid_ = GOOGLE_ULONGLONG(0);
  clear_has_guildid();
}
inline ::google::protobuf::uint64 GuildMessage::guildid() const {
  return guildid_;
}
inline void GuildMessage::set_guildid(::google::protobuf::uint64 value) {
  set_has_guildid();
  guildid_ = value;
}

// required uint32 contextid = 2;
inline bool GuildMessage::has_contextid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuildMessage::set_has_contextid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuildMessage::clear_has_contextid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuildMessage::clear_contextid() {
  contextid_ = 0u;
  clear_has_contextid();
}
inline ::google::protobuf::uint32 GuildMessage::contextid() const {
  return contextid_;
}
inline void GuildMessage::set_contextid(::google::protobuf::uint32 value) {
  set_has_contextid();
  contextid_ = value;
}

// required string contextpar = 3;
inline bool GuildMessage::has_contextpar() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GuildMessage::set_has_contextpar() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GuildMessage::clear_has_contextpar() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GuildMessage::clear_contextpar() {
  if (contextpar_ != &::google::protobuf::internal::kEmptyString) {
    contextpar_->clear();
  }
  clear_has_contextpar();
}
inline const ::std::string& GuildMessage::contextpar() const {
  return *contextpar_;
}
inline void GuildMessage::set_contextpar(const ::std::string& value) {
  set_has_contextpar();
  if (contextpar_ == &::google::protobuf::internal::kEmptyString) {
    contextpar_ = new ::std::string;
  }
  contextpar_->assign(value);
}
inline void GuildMessage::set_contextpar(const char* value) {
  set_has_contextpar();
  if (contextpar_ == &::google::protobuf::internal::kEmptyString) {
    contextpar_ = new ::std::string;
  }
  contextpar_->assign(value);
}
inline void GuildMessage::set_contextpar(const char* value, size_t size) {
  set_has_contextpar();
  if (contextpar_ == &::google::protobuf::internal::kEmptyString) {
    contextpar_ = new ::std::string;
  }
  contextpar_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GuildMessage::mutable_contextpar() {
  set_has_contextpar();
  if (contextpar_ == &::google::protobuf::internal::kEmptyString) {
    contextpar_ = new ::std::string;
  }
  return contextpar_;
}
inline ::std::string* GuildMessage::release_contextpar() {
  clear_has_contextpar();
  if (contextpar_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = contextpar_;
    contextpar_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GuildMessage::set_allocated_contextpar(::std::string* contextpar) {
  if (contextpar_ != &::google::protobuf::internal::kEmptyString) {
    delete contextpar_;
  }
  if (contextpar) {
    set_has_contextpar();
    contextpar_ = contextpar;
  } else {
    clear_has_contextpar();
    contextpar_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bool isall = 4;
inline bool GuildMessage::has_isall() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GuildMessage::set_has_isall() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GuildMessage::clear_has_isall() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GuildMessage::clear_isall() {
  isall_ = false;
  clear_has_isall();
}
inline bool GuildMessage::isall() const {
  return isall_;
}
inline void GuildMessage::set_isall(bool value) {
  set_has_isall();
  isall_ = value;
}

// repeated uint64 playeridlist = 5;
inline int GuildMessage::playeridlist_size() const {
  return playeridlist_.size();
}
inline void GuildMessage::clear_playeridlist() {
  playeridlist_.Clear();
}
inline ::google::protobuf::uint64 GuildMessage::playeridlist(int index) const {
  return playeridlist_.Get(index);
}
inline void GuildMessage::set_playeridlist(int index, ::google::protobuf::uint64 value) {
  playeridlist_.Set(index, value);
}
inline void GuildMessage::add_playeridlist(::google::protobuf::uint64 value) {
  playeridlist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
GuildMessage::playeridlist() const {
  return playeridlist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
GuildMessage::mutable_playeridlist() {
  return &playeridlist_;
}

// -------------------------------------------------------------------

// Chat_STC_GuildPublic

// required uint32 contextid = 1;
inline bool Chat_STC_GuildPublic::has_contextid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Chat_STC_GuildPublic::set_has_contextid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Chat_STC_GuildPublic::clear_has_contextid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Chat_STC_GuildPublic::clear_contextid() {
  contextid_ = 0u;
  clear_has_contextid();
}
inline ::google::protobuf::uint32 Chat_STC_GuildPublic::contextid() const {
  return contextid_;
}
inline void Chat_STC_GuildPublic::set_contextid(::google::protobuf::uint32 value) {
  set_has_contextid();
  contextid_ = value;
}

// required string contextpar = 2;
inline bool Chat_STC_GuildPublic::has_contextpar() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Chat_STC_GuildPublic::set_has_contextpar() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Chat_STC_GuildPublic::clear_has_contextpar() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Chat_STC_GuildPublic::clear_contextpar() {
  if (contextpar_ != &::google::protobuf::internal::kEmptyString) {
    contextpar_->clear();
  }
  clear_has_contextpar();
}
inline const ::std::string& Chat_STC_GuildPublic::contextpar() const {
  return *contextpar_;
}
inline void Chat_STC_GuildPublic::set_contextpar(const ::std::string& value) {
  set_has_contextpar();
  if (contextpar_ == &::google::protobuf::internal::kEmptyString) {
    contextpar_ = new ::std::string;
  }
  contextpar_->assign(value);
}
inline void Chat_STC_GuildPublic::set_contextpar(const char* value) {
  set_has_contextpar();
  if (contextpar_ == &::google::protobuf::internal::kEmptyString) {
    contextpar_ = new ::std::string;
  }
  contextpar_->assign(value);
}
inline void Chat_STC_GuildPublic::set_contextpar(const char* value, size_t size) {
  set_has_contextpar();
  if (contextpar_ == &::google::protobuf::internal::kEmptyString) {
    contextpar_ = new ::std::string;
  }
  contextpar_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Chat_STC_GuildPublic::mutable_contextpar() {
  set_has_contextpar();
  if (contextpar_ == &::google::protobuf::internal::kEmptyString) {
    contextpar_ = new ::std::string;
  }
  return contextpar_;
}
inline ::std::string* Chat_STC_GuildPublic::release_contextpar() {
  clear_has_contextpar();
  if (contextpar_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = contextpar_;
    contextpar_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Chat_STC_GuildPublic::set_allocated_contextpar(::std::string* contextpar) {
  if (contextpar_ != &::google::protobuf::internal::kEmptyString) {
    delete contextpar_;
  }
  if (contextpar) {
    set_has_contextpar();
    contextpar_ = contextpar;
  } else {
    clear_has_contextpar();
    contextpar_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace proto

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_chat_2eproto__INCLUDED
