// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mysql_db.proto

#ifndef PROTOBUF_mysql_5fdb_2eproto__INCLUDED
#define PROTOBUF_mysql_5fdb_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace message {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_mysql_5fdb_2eproto();
void protobuf_AssignDesc_mysql_5fdb_2eproto();
void protobuf_ShutdownFile_mysql_5fdb_2eproto();

class message_db_base;
class update_player;

// ===================================================================

class message_db_base : public ::google::protobuf::Message {
 public:
  message_db_base();
  virtual ~message_db_base();

  message_db_base(const message_db_base& from);

  inline message_db_base& operator=(const message_db_base& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const message_db_base& default_instance();

  void Swap(message_db_base* other);

  // implements Message ----------------------------------------------

  message_db_base* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const message_db_base& from);
  void MergeFrom(const message_db_base& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string table_name = 1;
  inline bool has_table_name() const;
  inline void clear_table_name();
  static const int kTableNameFieldNumber = 1;
  inline const ::std::string& table_name() const;
  inline void set_table_name(const ::std::string& value);
  inline void set_table_name(const char* value);
  inline void set_table_name(const char* value, size_t size);
  inline ::std::string* mutable_table_name();
  inline ::std::string* release_table_name();
  inline void set_allocated_table_name(::std::string* table_name);

  // optional string field_key_name = 2;
  inline bool has_field_key_name() const;
  inline void clear_field_key_name();
  static const int kFieldKeyNameFieldNumber = 2;
  inline const ::std::string& field_key_name() const;
  inline void set_field_key_name(const ::std::string& value);
  inline void set_field_key_name(const char* value);
  inline void set_field_key_name(const char* value, size_t size);
  inline ::std::string* mutable_field_key_name();
  inline ::std::string* release_field_key_name();
  inline void set_allocated_field_key_name(::std::string* field_key_name);

  // optional string field_key = 3;
  inline bool has_field_key() const;
  inline void clear_field_key();
  static const int kFieldKeyFieldNumber = 3;
  inline const ::std::string& field_key() const;
  inline void set_field_key(const ::std::string& value);
  inline void set_field_key(const char* value);
  inline void set_field_key(const char* value, size_t size);
  inline ::std::string* mutable_field_key();
  inline ::std::string* release_field_key();
  inline void set_allocated_field_key(::std::string* field_key);

  // @@protoc_insertion_point(class_scope:proto.message.message_db_base)
 private:
  inline void set_has_table_name();
  inline void clear_has_table_name();
  inline void set_has_field_key_name();
  inline void clear_has_field_key_name();
  inline void set_has_field_key();
  inline void clear_has_field_key();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* table_name_;
  ::std::string* field_key_name_;
  ::std::string* field_key_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_mysql_5fdb_2eproto();
  friend void protobuf_AssignDesc_mysql_5fdb_2eproto();
  friend void protobuf_ShutdownFile_mysql_5fdb_2eproto();

  void InitAsDefaultInstance();
  static message_db_base* default_instance_;
};
// -------------------------------------------------------------------

class update_player : public ::google::protobuf::Message {
 public:
  update_player();
  virtual ~update_player();

  update_player(const update_player& from);

  inline update_player& operator=(const update_player& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const update_player& default_instance();

  void Swap(update_player* other);

  // implements Message ----------------------------------------------

  update_player* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const update_player& from);
  void MergeFrom(const update_player& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto.message.message_db_base db_base = 1;
  inline bool has_db_base() const;
  inline void clear_db_base();
  static const int kDbBaseFieldNumber = 1;
  inline const ::proto::message::message_db_base& db_base() const;
  inline ::proto::message::message_db_base* mutable_db_base();
  inline ::proto::message::message_db_base* release_db_base();
  inline void set_allocated_db_base(::proto::message::message_db_base* db_base);

  // @@protoc_insertion_point(class_scope:proto.message.update_player)
 private:
  inline void set_has_db_base();
  inline void clear_has_db_base();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::message::message_db_base* db_base_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_mysql_5fdb_2eproto();
  friend void protobuf_AssignDesc_mysql_5fdb_2eproto();
  friend void protobuf_ShutdownFile_mysql_5fdb_2eproto();

  void InitAsDefaultInstance();
  static update_player* default_instance_;
};
// ===================================================================


// ===================================================================

// message_db_base

// optional string table_name = 1;
inline bool message_db_base::has_table_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void message_db_base::set_has_table_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void message_db_base::clear_has_table_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void message_db_base::clear_table_name() {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    table_name_->clear();
  }
  clear_has_table_name();
}
inline const ::std::string& message_db_base::table_name() const {
  return *table_name_;
}
inline void message_db_base::set_table_name(const ::std::string& value) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(value);
}
inline void message_db_base::set_table_name(const char* value) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(value);
}
inline void message_db_base::set_table_name(const char* value, size_t size) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* message_db_base::mutable_table_name() {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  return table_name_;
}
inline ::std::string* message_db_base::release_table_name() {
  clear_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = table_name_;
    table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void message_db_base::set_allocated_table_name(::std::string* table_name) {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    delete table_name_;
  }
  if (table_name) {
    set_has_table_name();
    table_name_ = table_name;
  } else {
    clear_has_table_name();
    table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string field_key_name = 2;
inline bool message_db_base::has_field_key_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void message_db_base::set_has_field_key_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void message_db_base::clear_has_field_key_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void message_db_base::clear_field_key_name() {
  if (field_key_name_ != &::google::protobuf::internal::kEmptyString) {
    field_key_name_->clear();
  }
  clear_has_field_key_name();
}
inline const ::std::string& message_db_base::field_key_name() const {
  return *field_key_name_;
}
inline void message_db_base::set_field_key_name(const ::std::string& value) {
  set_has_field_key_name();
  if (field_key_name_ == &::google::protobuf::internal::kEmptyString) {
    field_key_name_ = new ::std::string;
  }
  field_key_name_->assign(value);
}
inline void message_db_base::set_field_key_name(const char* value) {
  set_has_field_key_name();
  if (field_key_name_ == &::google::protobuf::internal::kEmptyString) {
    field_key_name_ = new ::std::string;
  }
  field_key_name_->assign(value);
}
inline void message_db_base::set_field_key_name(const char* value, size_t size) {
  set_has_field_key_name();
  if (field_key_name_ == &::google::protobuf::internal::kEmptyString) {
    field_key_name_ = new ::std::string;
  }
  field_key_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* message_db_base::mutable_field_key_name() {
  set_has_field_key_name();
  if (field_key_name_ == &::google::protobuf::internal::kEmptyString) {
    field_key_name_ = new ::std::string;
  }
  return field_key_name_;
}
inline ::std::string* message_db_base::release_field_key_name() {
  clear_has_field_key_name();
  if (field_key_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = field_key_name_;
    field_key_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void message_db_base::set_allocated_field_key_name(::std::string* field_key_name) {
  if (field_key_name_ != &::google::protobuf::internal::kEmptyString) {
    delete field_key_name_;
  }
  if (field_key_name) {
    set_has_field_key_name();
    field_key_name_ = field_key_name;
  } else {
    clear_has_field_key_name();
    field_key_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string field_key = 3;
inline bool message_db_base::has_field_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void message_db_base::set_has_field_key() {
  _has_bits_[0] |= 0x00000004u;
}
inline void message_db_base::clear_has_field_key() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void message_db_base::clear_field_key() {
  if (field_key_ != &::google::protobuf::internal::kEmptyString) {
    field_key_->clear();
  }
  clear_has_field_key();
}
inline const ::std::string& message_db_base::field_key() const {
  return *field_key_;
}
inline void message_db_base::set_field_key(const ::std::string& value) {
  set_has_field_key();
  if (field_key_ == &::google::protobuf::internal::kEmptyString) {
    field_key_ = new ::std::string;
  }
  field_key_->assign(value);
}
inline void message_db_base::set_field_key(const char* value) {
  set_has_field_key();
  if (field_key_ == &::google::protobuf::internal::kEmptyString) {
    field_key_ = new ::std::string;
  }
  field_key_->assign(value);
}
inline void message_db_base::set_field_key(const char* value, size_t size) {
  set_has_field_key();
  if (field_key_ == &::google::protobuf::internal::kEmptyString) {
    field_key_ = new ::std::string;
  }
  field_key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* message_db_base::mutable_field_key() {
  set_has_field_key();
  if (field_key_ == &::google::protobuf::internal::kEmptyString) {
    field_key_ = new ::std::string;
  }
  return field_key_;
}
inline ::std::string* message_db_base::release_field_key() {
  clear_has_field_key();
  if (field_key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = field_key_;
    field_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void message_db_base::set_allocated_field_key(::std::string* field_key) {
  if (field_key_ != &::google::protobuf::internal::kEmptyString) {
    delete field_key_;
  }
  if (field_key) {
    set_has_field_key();
    field_key_ = field_key;
  } else {
    clear_has_field_key();
    field_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// update_player

// optional .proto.message.message_db_base db_base = 1;
inline bool update_player::has_db_base() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void update_player::set_has_db_base() {
  _has_bits_[0] |= 0x00000001u;
}
inline void update_player::clear_has_db_base() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void update_player::clear_db_base() {
  if (db_base_ != NULL) db_base_->::proto::message::message_db_base::Clear();
  clear_has_db_base();
}
inline const ::proto::message::message_db_base& update_player::db_base() const {
  return db_base_ != NULL ? *db_base_ : *default_instance_->db_base_;
}
inline ::proto::message::message_db_base* update_player::mutable_db_base() {
  set_has_db_base();
  if (db_base_ == NULL) db_base_ = new ::proto::message::message_db_base;
  return db_base_;
}
inline ::proto::message::message_db_base* update_player::release_db_base() {
  clear_has_db_base();
  ::proto::message::message_db_base* temp = db_base_;
  db_base_ = NULL;
  return temp;
}
inline void update_player::set_allocated_db_base(::proto::message::message_db_base* db_base) {
  delete db_base_;
  db_base_ = db_base;
  if (db_base) {
    set_has_db_base();
  } else {
    clear_has_db_base();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace proto

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_mysql_5fdb_2eproto__INCLUDED
