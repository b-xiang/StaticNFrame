// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mysql_db.proto

#ifndef PROTOBUF_INCLUDED_mysql_5fdb_2eproto
#define PROTOBUF_INCLUDED_mysql_5fdb_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_mysql_5fdb_2eproto 

namespace protobuf_mysql_5fdb_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[10];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_mysql_5fdb_2eproto
namespace proto {
namespace message {
class MixMailData;
class MixMailDataDefaultTypeInternal;
extern MixMailDataDefaultTypeInternal _MixMailData_default_instance_;
class message_db_base;
class message_db_baseDefaultTypeInternal;
extern message_db_baseDefaultTypeInternal _message_db_base_default_instance_;
class mysql_player;
class mysql_playerDefaultTypeInternal;
extern mysql_playerDefaultTypeInternal _mysql_player_default_instance_;
class query_mail;
class query_mailDefaultTypeInternal;
extern query_mailDefaultTypeInternal _query_mail_default_instance_;
class query_mail_cond;
class query_mail_condDefaultTypeInternal;
extern query_mail_condDefaultTypeInternal _query_mail_cond_default_instance_;
class query_player;
class query_playerDefaultTypeInternal;
extern query_playerDefaultTypeInternal _query_player_default_instance_;
class query_player_cond;
class query_player_condDefaultTypeInternal;
extern query_player_condDefaultTypeInternal _query_player_cond_default_instance_;
class table_mail;
class table_mailDefaultTypeInternal;
extern table_mailDefaultTypeInternal _table_mail_default_instance_;
class update_mail;
class update_mailDefaultTypeInternal;
extern update_mailDefaultTypeInternal _update_mail_default_instance_;
class update_player;
class update_playerDefaultTypeInternal;
extern update_playerDefaultTypeInternal _update_player_default_instance_;
}  // namespace message
}  // namespace proto
namespace google {
namespace protobuf {
template<> ::proto::message::MixMailData* Arena::CreateMaybeMessage<::proto::message::MixMailData>(Arena*);
template<> ::proto::message::message_db_base* Arena::CreateMaybeMessage<::proto::message::message_db_base>(Arena*);
template<> ::proto::message::mysql_player* Arena::CreateMaybeMessage<::proto::message::mysql_player>(Arena*);
template<> ::proto::message::query_mail* Arena::CreateMaybeMessage<::proto::message::query_mail>(Arena*);
template<> ::proto::message::query_mail_cond* Arena::CreateMaybeMessage<::proto::message::query_mail_cond>(Arena*);
template<> ::proto::message::query_player* Arena::CreateMaybeMessage<::proto::message::query_player>(Arena*);
template<> ::proto::message::query_player_cond* Arena::CreateMaybeMessage<::proto::message::query_player_cond>(Arena*);
template<> ::proto::message::table_mail* Arena::CreateMaybeMessage<::proto::message::table_mail>(Arena*);
template<> ::proto::message::update_mail* Arena::CreateMaybeMessage<::proto::message::update_mail>(Arena*);
template<> ::proto::message::update_player* Arena::CreateMaybeMessage<::proto::message::update_player>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace proto {
namespace message {

// ===================================================================

class message_db_base : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.message.message_db_base) */ {
 public:
  message_db_base();
  virtual ~message_db_base();

  message_db_base(const message_db_base& from);

  inline message_db_base& operator=(const message_db_base& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  message_db_base(message_db_base&& from) noexcept
    : message_db_base() {
    *this = ::std::move(from);
  }

  inline message_db_base& operator=(message_db_base&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const message_db_base& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const message_db_base* internal_default_instance() {
    return reinterpret_cast<const message_db_base*>(
               &_message_db_base_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(message_db_base* other);
  friend void swap(message_db_base& a, message_db_base& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline message_db_base* New() const final {
    return CreateMaybeMessage<message_db_base>(NULL);
  }

  message_db_base* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<message_db_base>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const message_db_base& from);
  void MergeFrom(const message_db_base& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(message_db_base* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string table_name = 1;
  bool has_table_name() const;
  void clear_table_name();
  static const int kTableNameFieldNumber = 1;
  const ::std::string& table_name() const;
  void set_table_name(const ::std::string& value);
  #if LANG_CXX11
  void set_table_name(::std::string&& value);
  #endif
  void set_table_name(const char* value);
  void set_table_name(const char* value, size_t size);
  ::std::string* mutable_table_name();
  ::std::string* release_table_name();
  void set_allocated_table_name(::std::string* table_name);

  // optional string order_key = 4;
  bool has_order_key() const;
  void clear_order_key();
  static const int kOrderKeyFieldNumber = 4;
  const ::std::string& order_key() const;
  void set_order_key(const ::std::string& value);
  #if LANG_CXX11
  void set_order_key(::std::string&& value);
  #endif
  void set_order_key(const char* value);
  void set_order_key(const char* value, size_t size);
  ::std::string* mutable_order_key();
  ::std::string* release_order_key();
  void set_allocated_order_key(::std::string* order_key);

  // optional uint32 offset = 2;
  bool has_offset() const;
  void clear_offset();
  static const int kOffsetFieldNumber = 2;
  ::google::protobuf::uint32 offset() const;
  void set_offset(::google::protobuf::uint32 value);

  // optional uint32 rows = 3;
  bool has_rows() const;
  void clear_rows();
  static const int kRowsFieldNumber = 3;
  ::google::protobuf::uint32 rows() const;
  void set_rows(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.message.message_db_base)
 private:
  void set_has_table_name();
  void clear_has_table_name();
  void set_has_offset();
  void clear_has_offset();
  void set_has_rows();
  void clear_has_rows();
  void set_has_order_key();
  void clear_has_order_key();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr table_name_;
  ::google::protobuf::internal::ArenaStringPtr order_key_;
  ::google::protobuf::uint32 offset_;
  ::google::protobuf::uint32 rows_;
  friend struct ::protobuf_mysql_5fdb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class mysql_player : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.message.mysql_player) */ {
 public:
  mysql_player();
  virtual ~mysql_player();

  mysql_player(const mysql_player& from);

  inline mysql_player& operator=(const mysql_player& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  mysql_player(mysql_player&& from) noexcept
    : mysql_player() {
    *this = ::std::move(from);
  }

  inline mysql_player& operator=(mysql_player&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const mysql_player& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const mysql_player* internal_default_instance() {
    return reinterpret_cast<const mysql_player*>(
               &_mysql_player_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(mysql_player* other);
  friend void swap(mysql_player& a, mysql_player& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline mysql_player* New() const final {
    return CreateMaybeMessage<mysql_player>(NULL);
  }

  mysql_player* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<mysql_player>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const mysql_player& from);
  void MergeFrom(const mysql_player& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mysql_player* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string account = 2;
  bool has_account() const;
  void clear_account();
  static const int kAccountFieldNumber = 2;
  const ::std::string& account() const;
  void set_account(const ::std::string& value);
  #if LANG_CXX11
  void set_account(::std::string&& value);
  #endif
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  ::std::string* mutable_account();
  ::std::string* release_account();
  void set_allocated_account(::std::string* account);

  // optional string charname = 3;
  bool has_charname() const;
  void clear_charname();
  static const int kCharnameFieldNumber = 3;
  const ::std::string& charname() const;
  void set_charname(const ::std::string& value);
  #if LANG_CXX11
  void set_charname(::std::string&& value);
  #endif
  void set_charname(const char* value);
  void set_charname(const char* value, size_t size);
  ::std::string* mutable_charname();
  ::std::string* release_charname();
  void set_allocated_charname(::std::string* charname);

  // optional uint64 charid = 1;
  bool has_charid() const;
  void clear_charid();
  static const int kCharidFieldNumber = 1;
  ::google::protobuf::uint64 charid() const;
  void set_charid(::google::protobuf::uint64 value);

  // optional uint32 serverid = 4;
  bool has_serverid() const;
  void clear_serverid();
  static const int kServeridFieldNumber = 4;
  ::google::protobuf::uint32 serverid() const;
  void set_serverid(::google::protobuf::uint32 value);

  // optional uint32 career = 5;
  bool has_career() const;
  void clear_career();
  static const int kCareerFieldNumber = 5;
  ::google::protobuf::uint32 career() const;
  void set_career(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.message.mysql_player)
 private:
  void set_has_charid();
  void clear_has_charid();
  void set_has_account();
  void clear_has_account();
  void set_has_charname();
  void clear_has_charname();
  void set_has_serverid();
  void clear_has_serverid();
  void set_has_career();
  void clear_has_career();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr account_;
  ::google::protobuf::internal::ArenaStringPtr charname_;
  ::google::protobuf::uint64 charid_;
  ::google::protobuf::uint32 serverid_;
  ::google::protobuf::uint32 career_;
  friend struct ::protobuf_mysql_5fdb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class query_player_cond : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.message.query_player_cond) */ {
 public:
  query_player_cond();
  virtual ~query_player_cond();

  query_player_cond(const query_player_cond& from);

  inline query_player_cond& operator=(const query_player_cond& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  query_player_cond(query_player_cond&& from) noexcept
    : query_player_cond() {
    *this = ::std::move(from);
  }

  inline query_player_cond& operator=(query_player_cond&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const query_player_cond& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const query_player_cond* internal_default_instance() {
    return reinterpret_cast<const query_player_cond*>(
               &_query_player_cond_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(query_player_cond* other);
  friend void swap(query_player_cond& a, query_player_cond& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline query_player_cond* New() const final {
    return CreateMaybeMessage<query_player_cond>(NULL);
  }

  query_player_cond* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<query_player_cond>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const query_player_cond& from);
  void MergeFrom(const query_player_cond& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(query_player_cond* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 serverid = 1;
  bool has_serverid() const;
  void clear_serverid();
  static const int kServeridFieldNumber = 1;
  ::google::protobuf::uint32 serverid() const;
  void set_serverid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.message.query_player_cond)
 private:
  void set_has_serverid();
  void clear_has_serverid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 serverid_;
  friend struct ::protobuf_mysql_5fdb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class update_player : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.message.update_player) */ {
 public:
  update_player();
  virtual ~update_player();

  update_player(const update_player& from);

  inline update_player& operator=(const update_player& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  update_player(update_player&& from) noexcept
    : update_player() {
    *this = ::std::move(from);
  }

  inline update_player& operator=(update_player&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const update_player& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const update_player* internal_default_instance() {
    return reinterpret_cast<const update_player*>(
               &_update_player_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(update_player* other);
  friend void swap(update_player& a, update_player& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline update_player* New() const final {
    return CreateMaybeMessage<update_player>(NULL);
  }

  update_player* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<update_player>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const update_player& from);
  void MergeFrom(const update_player& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(update_player* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto.message.message_db_base db_base = 1;
  bool has_db_base() const;
  void clear_db_base();
  static const int kDbBaseFieldNumber = 1;
  private:
  const ::proto::message::message_db_base& _internal_db_base() const;
  public:
  const ::proto::message::message_db_base& db_base() const;
  ::proto::message::message_db_base* release_db_base();
  ::proto::message::message_db_base* mutable_db_base();
  void set_allocated_db_base(::proto::message::message_db_base* db_base);

  // optional .proto.message.mysql_player db_fields = 2;
  bool has_db_fields() const;
  void clear_db_fields();
  static const int kDbFieldsFieldNumber = 2;
  private:
  const ::proto::message::mysql_player& _internal_db_fields() const;
  public:
  const ::proto::message::mysql_player& db_fields() const;
  ::proto::message::mysql_player* release_db_fields();
  ::proto::message::mysql_player* mutable_db_fields();
  void set_allocated_db_fields(::proto::message::mysql_player* db_fields);

  // @@protoc_insertion_point(class_scope:proto.message.update_player)
 private:
  void set_has_db_base();
  void clear_has_db_base();
  void set_has_db_fields();
  void clear_has_db_fields();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::proto::message::message_db_base* db_base_;
  ::proto::message::mysql_player* db_fields_;
  friend struct ::protobuf_mysql_5fdb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class query_player : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.message.query_player) */ {
 public:
  query_player();
  virtual ~query_player();

  query_player(const query_player& from);

  inline query_player& operator=(const query_player& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  query_player(query_player&& from) noexcept
    : query_player() {
    *this = ::std::move(from);
  }

  inline query_player& operator=(query_player&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const query_player& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const query_player* internal_default_instance() {
    return reinterpret_cast<const query_player*>(
               &_query_player_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(query_player* other);
  friend void swap(query_player& a, query_player& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline query_player* New() const final {
    return CreateMaybeMessage<query_player>(NULL);
  }

  query_player* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<query_player>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const query_player& from);
  void MergeFrom(const query_player& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(query_player* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.message.mysql_player db_fields = 2;
  int db_fields_size() const;
  void clear_db_fields();
  static const int kDbFieldsFieldNumber = 2;
  ::proto::message::mysql_player* mutable_db_fields(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::message::mysql_player >*
      mutable_db_fields();
  const ::proto::message::mysql_player& db_fields(int index) const;
  ::proto::message::mysql_player* add_db_fields();
  const ::google::protobuf::RepeatedPtrField< ::proto::message::mysql_player >&
      db_fields() const;

  // optional .proto.message.message_db_base db_base = 1;
  bool has_db_base() const;
  void clear_db_base();
  static const int kDbBaseFieldNumber = 1;
  private:
  const ::proto::message::message_db_base& _internal_db_base() const;
  public:
  const ::proto::message::message_db_base& db_base() const;
  ::proto::message::message_db_base* release_db_base();
  ::proto::message::message_db_base* mutable_db_base();
  void set_allocated_db_base(::proto::message::message_db_base* db_base);

  // optional .proto.message.query_player_cond db_cond = 3;
  bool has_db_cond() const;
  void clear_db_cond();
  static const int kDbCondFieldNumber = 3;
  private:
  const ::proto::message::query_player_cond& _internal_db_cond() const;
  public:
  const ::proto::message::query_player_cond& db_cond() const;
  ::proto::message::query_player_cond* release_db_cond();
  ::proto::message::query_player_cond* mutable_db_cond();
  void set_allocated_db_cond(::proto::message::query_player_cond* db_cond);

  // @@protoc_insertion_point(class_scope:proto.message.query_player)
 private:
  void set_has_db_base();
  void clear_has_db_base();
  void set_has_db_cond();
  void clear_has_db_cond();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::message::mysql_player > db_fields_;
  ::proto::message::message_db_base* db_base_;
  ::proto::message::query_player_cond* db_cond_;
  friend struct ::protobuf_mysql_5fdb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MixMailData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.message.MixMailData) */ {
 public:
  MixMailData();
  virtual ~MixMailData();

  MixMailData(const MixMailData& from);

  inline MixMailData& operator=(const MixMailData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MixMailData(MixMailData&& from) noexcept
    : MixMailData() {
    *this = ::std::move(from);
  }

  inline MixMailData& operator=(MixMailData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MixMailData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MixMailData* internal_default_instance() {
    return reinterpret_cast<const MixMailData*>(
               &_MixMailData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(MixMailData* other);
  friend void swap(MixMailData& a, MixMailData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MixMailData* New() const final {
    return CreateMaybeMessage<MixMailData>(NULL);
  }

  MixMailData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MixMailData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MixMailData& from);
  void MergeFrom(const MixMailData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MixMailData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.message.MixMailData)
 private:
  void set_has_id();
  void clear_has_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 id_;
  friend struct ::protobuf_mysql_5fdb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class table_mail : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.message.table_mail) */ {
 public:
  table_mail();
  virtual ~table_mail();

  table_mail(const table_mail& from);

  inline table_mail& operator=(const table_mail& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  table_mail(table_mail&& from) noexcept
    : table_mail() {
    *this = ::std::move(from);
  }

  inline table_mail& operator=(table_mail&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const table_mail& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const table_mail* internal_default_instance() {
    return reinterpret_cast<const table_mail*>(
               &_table_mail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(table_mail* other);
  friend void swap(table_mail& a, table_mail& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline table_mail* New() const final {
    return CreateMaybeMessage<table_mail>(NULL);
  }

  table_mail* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<table_mail>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const table_mail& from);
  void MergeFrom(const table_mail& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(table_mail* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto.message.MixMailData mixinfo = 3;
  bool has_mixinfo() const;
  void clear_mixinfo();
  static const int kMixinfoFieldNumber = 3;
  private:
  const ::proto::message::MixMailData& _internal_mixinfo() const;
  public:
  const ::proto::message::MixMailData& mixinfo() const;
  ::proto::message::MixMailData* release_mixinfo();
  ::proto::message::MixMailData* mutable_mixinfo();
  void set_allocated_mixinfo(::proto::message::MixMailData* mixinfo);

  // optional uint64 mailid = 1;
  bool has_mailid() const;
  void clear_mailid();
  static const int kMailidFieldNumber = 1;
  ::google::protobuf::uint64 mailid() const;
  void set_mailid(::google::protobuf::uint64 value);

  // optional uint64 ownerid = 2;
  bool has_ownerid() const;
  void clear_ownerid();
  static const int kOwneridFieldNumber = 2;
  ::google::protobuf::uint64 ownerid() const;
  void set_ownerid(::google::protobuf::uint64 value);

  // optional uint32 mail_type = 4;
  bool has_mail_type() const;
  void clear_mail_type();
  static const int kMailTypeFieldNumber = 4;
  ::google::protobuf::uint32 mail_type() const;
  void set_mail_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.message.table_mail)
 private:
  void set_has_mailid();
  void clear_has_mailid();
  void set_has_ownerid();
  void clear_has_ownerid();
  void set_has_mixinfo();
  void clear_has_mixinfo();
  void set_has_mail_type();
  void clear_has_mail_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::proto::message::MixMailData* mixinfo_;
  ::google::protobuf::uint64 mailid_;
  ::google::protobuf::uint64 ownerid_;
  ::google::protobuf::uint32 mail_type_;
  friend struct ::protobuf_mysql_5fdb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class query_mail_cond : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.message.query_mail_cond) */ {
 public:
  query_mail_cond();
  virtual ~query_mail_cond();

  query_mail_cond(const query_mail_cond& from);

  inline query_mail_cond& operator=(const query_mail_cond& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  query_mail_cond(query_mail_cond&& from) noexcept
    : query_mail_cond() {
    *this = ::std::move(from);
  }

  inline query_mail_cond& operator=(query_mail_cond&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const query_mail_cond& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const query_mail_cond* internal_default_instance() {
    return reinterpret_cast<const query_mail_cond*>(
               &_query_mail_cond_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(query_mail_cond* other);
  friend void swap(query_mail_cond& a, query_mail_cond& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline query_mail_cond* New() const final {
    return CreateMaybeMessage<query_mail_cond>(NULL);
  }

  query_mail_cond* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<query_mail_cond>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const query_mail_cond& from);
  void MergeFrom(const query_mail_cond& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(query_mail_cond* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 mailid = 1;
  bool has_mailid() const;
  void clear_mailid();
  static const int kMailidFieldNumber = 1;
  ::google::protobuf::uint64 mailid() const;
  void set_mailid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.message.query_mail_cond)
 private:
  void set_has_mailid();
  void clear_has_mailid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 mailid_;
  friend struct ::protobuf_mysql_5fdb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class query_mail : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.message.query_mail) */ {
 public:
  query_mail();
  virtual ~query_mail();

  query_mail(const query_mail& from);

  inline query_mail& operator=(const query_mail& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  query_mail(query_mail&& from) noexcept
    : query_mail() {
    *this = ::std::move(from);
  }

  inline query_mail& operator=(query_mail&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const query_mail& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const query_mail* internal_default_instance() {
    return reinterpret_cast<const query_mail*>(
               &_query_mail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(query_mail* other);
  friend void swap(query_mail& a, query_mail& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline query_mail* New() const final {
    return CreateMaybeMessage<query_mail>(NULL);
  }

  query_mail* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<query_mail>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const query_mail& from);
  void MergeFrom(const query_mail& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(query_mail* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto.message.message_db_base db_base = 1;
  bool has_db_base() const;
  void clear_db_base();
  static const int kDbBaseFieldNumber = 1;
  private:
  const ::proto::message::message_db_base& _internal_db_base() const;
  public:
  const ::proto::message::message_db_base& db_base() const;
  ::proto::message::message_db_base* release_db_base();
  ::proto::message::message_db_base* mutable_db_base();
  void set_allocated_db_base(::proto::message::message_db_base* db_base);

  // optional .proto.message.table_mail db_fields = 2;
  bool has_db_fields() const;
  void clear_db_fields();
  static const int kDbFieldsFieldNumber = 2;
  private:
  const ::proto::message::table_mail& _internal_db_fields() const;
  public:
  const ::proto::message::table_mail& db_fields() const;
  ::proto::message::table_mail* release_db_fields();
  ::proto::message::table_mail* mutable_db_fields();
  void set_allocated_db_fields(::proto::message::table_mail* db_fields);

  // optional .proto.message.query_mail_cond db_cond = 3;
  bool has_db_cond() const;
  void clear_db_cond();
  static const int kDbCondFieldNumber = 3;
  private:
  const ::proto::message::query_mail_cond& _internal_db_cond() const;
  public:
  const ::proto::message::query_mail_cond& db_cond() const;
  ::proto::message::query_mail_cond* release_db_cond();
  ::proto::message::query_mail_cond* mutable_db_cond();
  void set_allocated_db_cond(::proto::message::query_mail_cond* db_cond);

  // @@protoc_insertion_point(class_scope:proto.message.query_mail)
 private:
  void set_has_db_base();
  void clear_has_db_base();
  void set_has_db_fields();
  void clear_has_db_fields();
  void set_has_db_cond();
  void clear_has_db_cond();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::proto::message::message_db_base* db_base_;
  ::proto::message::table_mail* db_fields_;
  ::proto::message::query_mail_cond* db_cond_;
  friend struct ::protobuf_mysql_5fdb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class update_mail : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.message.update_mail) */ {
 public:
  update_mail();
  virtual ~update_mail();

  update_mail(const update_mail& from);

  inline update_mail& operator=(const update_mail& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  update_mail(update_mail&& from) noexcept
    : update_mail() {
    *this = ::std::move(from);
  }

  inline update_mail& operator=(update_mail&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const update_mail& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const update_mail* internal_default_instance() {
    return reinterpret_cast<const update_mail*>(
               &_update_mail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(update_mail* other);
  friend void swap(update_mail& a, update_mail& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline update_mail* New() const final {
    return CreateMaybeMessage<update_mail>(NULL);
  }

  update_mail* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<update_mail>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const update_mail& from);
  void MergeFrom(const update_mail& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(update_mail* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto.message.message_db_base db_base = 1;
  bool has_db_base() const;
  void clear_db_base();
  static const int kDbBaseFieldNumber = 1;
  private:
  const ::proto::message::message_db_base& _internal_db_base() const;
  public:
  const ::proto::message::message_db_base& db_base() const;
  ::proto::message::message_db_base* release_db_base();
  ::proto::message::message_db_base* mutable_db_base();
  void set_allocated_db_base(::proto::message::message_db_base* db_base);

  // optional .proto.message.table_mail db_fields = 2;
  bool has_db_fields() const;
  void clear_db_fields();
  static const int kDbFieldsFieldNumber = 2;
  private:
  const ::proto::message::table_mail& _internal_db_fields() const;
  public:
  const ::proto::message::table_mail& db_fields() const;
  ::proto::message::table_mail* release_db_fields();
  ::proto::message::table_mail* mutable_db_fields();
  void set_allocated_db_fields(::proto::message::table_mail* db_fields);

  // @@protoc_insertion_point(class_scope:proto.message.update_mail)
 private:
  void set_has_db_base();
  void clear_has_db_base();
  void set_has_db_fields();
  void clear_has_db_fields();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::proto::message::message_db_base* db_base_;
  ::proto::message::table_mail* db_fields_;
  friend struct ::protobuf_mysql_5fdb_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// message_db_base

// optional string table_name = 1;
inline bool message_db_base::has_table_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void message_db_base::set_has_table_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void message_db_base::clear_has_table_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void message_db_base::clear_table_name() {
  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_table_name();
}
inline const ::std::string& message_db_base::table_name() const {
  // @@protoc_insertion_point(field_get:proto.message.message_db_base.table_name)
  return table_name_.GetNoArena();
}
inline void message_db_base::set_table_name(const ::std::string& value) {
  set_has_table_name();
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.message.message_db_base.table_name)
}
#if LANG_CXX11
inline void message_db_base::set_table_name(::std::string&& value) {
  set_has_table_name();
  table_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.message.message_db_base.table_name)
}
#endif
inline void message_db_base::set_table_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_table_name();
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.message.message_db_base.table_name)
}
inline void message_db_base::set_table_name(const char* value, size_t size) {
  set_has_table_name();
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.message.message_db_base.table_name)
}
inline ::std::string* message_db_base::mutable_table_name() {
  set_has_table_name();
  // @@protoc_insertion_point(field_mutable:proto.message.message_db_base.table_name)
  return table_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* message_db_base::release_table_name() {
  // @@protoc_insertion_point(field_release:proto.message.message_db_base.table_name)
  if (!has_table_name()) {
    return NULL;
  }
  clear_has_table_name();
  return table_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void message_db_base::set_allocated_table_name(::std::string* table_name) {
  if (table_name != NULL) {
    set_has_table_name();
  } else {
    clear_has_table_name();
  }
  table_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table_name);
  // @@protoc_insertion_point(field_set_allocated:proto.message.message_db_base.table_name)
}

// optional uint32 offset = 2;
inline bool message_db_base::has_offset() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void message_db_base::set_has_offset() {
  _has_bits_[0] |= 0x00000004u;
}
inline void message_db_base::clear_has_offset() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void message_db_base::clear_offset() {
  offset_ = 0u;
  clear_has_offset();
}
inline ::google::protobuf::uint32 message_db_base::offset() const {
  // @@protoc_insertion_point(field_get:proto.message.message_db_base.offset)
  return offset_;
}
inline void message_db_base::set_offset(::google::protobuf::uint32 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:proto.message.message_db_base.offset)
}

// optional uint32 rows = 3;
inline bool message_db_base::has_rows() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void message_db_base::set_has_rows() {
  _has_bits_[0] |= 0x00000008u;
}
inline void message_db_base::clear_has_rows() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void message_db_base::clear_rows() {
  rows_ = 0u;
  clear_has_rows();
}
inline ::google::protobuf::uint32 message_db_base::rows() const {
  // @@protoc_insertion_point(field_get:proto.message.message_db_base.rows)
  return rows_;
}
inline void message_db_base::set_rows(::google::protobuf::uint32 value) {
  set_has_rows();
  rows_ = value;
  // @@protoc_insertion_point(field_set:proto.message.message_db_base.rows)
}

// optional string order_key = 4;
inline bool message_db_base::has_order_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void message_db_base::set_has_order_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void message_db_base::clear_has_order_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void message_db_base::clear_order_key() {
  order_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_order_key();
}
inline const ::std::string& message_db_base::order_key() const {
  // @@protoc_insertion_point(field_get:proto.message.message_db_base.order_key)
  return order_key_.GetNoArena();
}
inline void message_db_base::set_order_key(const ::std::string& value) {
  set_has_order_key();
  order_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.message.message_db_base.order_key)
}
#if LANG_CXX11
inline void message_db_base::set_order_key(::std::string&& value) {
  set_has_order_key();
  order_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.message.message_db_base.order_key)
}
#endif
inline void message_db_base::set_order_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_order_key();
  order_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.message.message_db_base.order_key)
}
inline void message_db_base::set_order_key(const char* value, size_t size) {
  set_has_order_key();
  order_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.message.message_db_base.order_key)
}
inline ::std::string* message_db_base::mutable_order_key() {
  set_has_order_key();
  // @@protoc_insertion_point(field_mutable:proto.message.message_db_base.order_key)
  return order_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* message_db_base::release_order_key() {
  // @@protoc_insertion_point(field_release:proto.message.message_db_base.order_key)
  if (!has_order_key()) {
    return NULL;
  }
  clear_has_order_key();
  return order_key_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void message_db_base::set_allocated_order_key(::std::string* order_key) {
  if (order_key != NULL) {
    set_has_order_key();
  } else {
    clear_has_order_key();
  }
  order_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order_key);
  // @@protoc_insertion_point(field_set_allocated:proto.message.message_db_base.order_key)
}

// -------------------------------------------------------------------

// mysql_player

// optional uint64 charid = 1;
inline bool mysql_player::has_charid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void mysql_player::set_has_charid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void mysql_player::clear_has_charid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void mysql_player::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 mysql_player::charid() const {
  // @@protoc_insertion_point(field_get:proto.message.mysql_player.charid)
  return charid_;
}
inline void mysql_player::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:proto.message.mysql_player.charid)
}

// optional string account = 2;
inline bool mysql_player::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void mysql_player::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
inline void mysql_player::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void mysql_player::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_account();
}
inline const ::std::string& mysql_player::account() const {
  // @@protoc_insertion_point(field_get:proto.message.mysql_player.account)
  return account_.GetNoArena();
}
inline void mysql_player::set_account(const ::std::string& value) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.message.mysql_player.account)
}
#if LANG_CXX11
inline void mysql_player::set_account(::std::string&& value) {
  set_has_account();
  account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.message.mysql_player.account)
}
#endif
inline void mysql_player::set_account(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.message.mysql_player.account)
}
inline void mysql_player::set_account(const char* value, size_t size) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.message.mysql_player.account)
}
inline ::std::string* mysql_player::mutable_account() {
  set_has_account();
  // @@protoc_insertion_point(field_mutable:proto.message.mysql_player.account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* mysql_player::release_account() {
  // @@protoc_insertion_point(field_release:proto.message.mysql_player.account)
  if (!has_account()) {
    return NULL;
  }
  clear_has_account();
  return account_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void mysql_player::set_allocated_account(::std::string* account) {
  if (account != NULL) {
    set_has_account();
  } else {
    clear_has_account();
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:proto.message.mysql_player.account)
}

// optional string charname = 3;
inline bool mysql_player::has_charname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void mysql_player::set_has_charname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void mysql_player::clear_has_charname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void mysql_player::clear_charname() {
  charname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_charname();
}
inline const ::std::string& mysql_player::charname() const {
  // @@protoc_insertion_point(field_get:proto.message.mysql_player.charname)
  return charname_.GetNoArena();
}
inline void mysql_player::set_charname(const ::std::string& value) {
  set_has_charname();
  charname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.message.mysql_player.charname)
}
#if LANG_CXX11
inline void mysql_player::set_charname(::std::string&& value) {
  set_has_charname();
  charname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.message.mysql_player.charname)
}
#endif
inline void mysql_player::set_charname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_charname();
  charname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.message.mysql_player.charname)
}
inline void mysql_player::set_charname(const char* value, size_t size) {
  set_has_charname();
  charname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.message.mysql_player.charname)
}
inline ::std::string* mysql_player::mutable_charname() {
  set_has_charname();
  // @@protoc_insertion_point(field_mutable:proto.message.mysql_player.charname)
  return charname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* mysql_player::release_charname() {
  // @@protoc_insertion_point(field_release:proto.message.mysql_player.charname)
  if (!has_charname()) {
    return NULL;
  }
  clear_has_charname();
  return charname_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void mysql_player::set_allocated_charname(::std::string* charname) {
  if (charname != NULL) {
    set_has_charname();
  } else {
    clear_has_charname();
  }
  charname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), charname);
  // @@protoc_insertion_point(field_set_allocated:proto.message.mysql_player.charname)
}

// optional uint32 serverid = 4;
inline bool mysql_player::has_serverid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void mysql_player::set_has_serverid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void mysql_player::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void mysql_player::clear_serverid() {
  serverid_ = 0u;
  clear_has_serverid();
}
inline ::google::protobuf::uint32 mysql_player::serverid() const {
  // @@protoc_insertion_point(field_get:proto.message.mysql_player.serverid)
  return serverid_;
}
inline void mysql_player::set_serverid(::google::protobuf::uint32 value) {
  set_has_serverid();
  serverid_ = value;
  // @@protoc_insertion_point(field_set:proto.message.mysql_player.serverid)
}

// optional uint32 career = 5;
inline bool mysql_player::has_career() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void mysql_player::set_has_career() {
  _has_bits_[0] |= 0x00000010u;
}
inline void mysql_player::clear_has_career() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void mysql_player::clear_career() {
  career_ = 0u;
  clear_has_career();
}
inline ::google::protobuf::uint32 mysql_player::career() const {
  // @@protoc_insertion_point(field_get:proto.message.mysql_player.career)
  return career_;
}
inline void mysql_player::set_career(::google::protobuf::uint32 value) {
  set_has_career();
  career_ = value;
  // @@protoc_insertion_point(field_set:proto.message.mysql_player.career)
}

// -------------------------------------------------------------------

// query_player_cond

// optional uint32 serverid = 1;
inline bool query_player_cond::has_serverid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void query_player_cond::set_has_serverid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void query_player_cond::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void query_player_cond::clear_serverid() {
  serverid_ = 0u;
  clear_has_serverid();
}
inline ::google::protobuf::uint32 query_player_cond::serverid() const {
  // @@protoc_insertion_point(field_get:proto.message.query_player_cond.serverid)
  return serverid_;
}
inline void query_player_cond::set_serverid(::google::protobuf::uint32 value) {
  set_has_serverid();
  serverid_ = value;
  // @@protoc_insertion_point(field_set:proto.message.query_player_cond.serverid)
}

// -------------------------------------------------------------------

// update_player

// optional .proto.message.message_db_base db_base = 1;
inline bool update_player::has_db_base() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void update_player::set_has_db_base() {
  _has_bits_[0] |= 0x00000001u;
}
inline void update_player::clear_has_db_base() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void update_player::clear_db_base() {
  if (db_base_ != NULL) db_base_->Clear();
  clear_has_db_base();
}
inline const ::proto::message::message_db_base& update_player::_internal_db_base() const {
  return *db_base_;
}
inline const ::proto::message::message_db_base& update_player::db_base() const {
  const ::proto::message::message_db_base* p = db_base_;
  // @@protoc_insertion_point(field_get:proto.message.update_player.db_base)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::message::message_db_base*>(
      &::proto::message::_message_db_base_default_instance_);
}
inline ::proto::message::message_db_base* update_player::release_db_base() {
  // @@protoc_insertion_point(field_release:proto.message.update_player.db_base)
  clear_has_db_base();
  ::proto::message::message_db_base* temp = db_base_;
  db_base_ = NULL;
  return temp;
}
inline ::proto::message::message_db_base* update_player::mutable_db_base() {
  set_has_db_base();
  if (db_base_ == NULL) {
    auto* p = CreateMaybeMessage<::proto::message::message_db_base>(GetArenaNoVirtual());
    db_base_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.message.update_player.db_base)
  return db_base_;
}
inline void update_player::set_allocated_db_base(::proto::message::message_db_base* db_base) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete db_base_;
  }
  if (db_base) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      db_base = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, db_base, submessage_arena);
    }
    set_has_db_base();
  } else {
    clear_has_db_base();
  }
  db_base_ = db_base;
  // @@protoc_insertion_point(field_set_allocated:proto.message.update_player.db_base)
}

// optional .proto.message.mysql_player db_fields = 2;
inline bool update_player::has_db_fields() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void update_player::set_has_db_fields() {
  _has_bits_[0] |= 0x00000002u;
}
inline void update_player::clear_has_db_fields() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void update_player::clear_db_fields() {
  if (db_fields_ != NULL) db_fields_->Clear();
  clear_has_db_fields();
}
inline const ::proto::message::mysql_player& update_player::_internal_db_fields() const {
  return *db_fields_;
}
inline const ::proto::message::mysql_player& update_player::db_fields() const {
  const ::proto::message::mysql_player* p = db_fields_;
  // @@protoc_insertion_point(field_get:proto.message.update_player.db_fields)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::message::mysql_player*>(
      &::proto::message::_mysql_player_default_instance_);
}
inline ::proto::message::mysql_player* update_player::release_db_fields() {
  // @@protoc_insertion_point(field_release:proto.message.update_player.db_fields)
  clear_has_db_fields();
  ::proto::message::mysql_player* temp = db_fields_;
  db_fields_ = NULL;
  return temp;
}
inline ::proto::message::mysql_player* update_player::mutable_db_fields() {
  set_has_db_fields();
  if (db_fields_ == NULL) {
    auto* p = CreateMaybeMessage<::proto::message::mysql_player>(GetArenaNoVirtual());
    db_fields_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.message.update_player.db_fields)
  return db_fields_;
}
inline void update_player::set_allocated_db_fields(::proto::message::mysql_player* db_fields) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete db_fields_;
  }
  if (db_fields) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      db_fields = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, db_fields, submessage_arena);
    }
    set_has_db_fields();
  } else {
    clear_has_db_fields();
  }
  db_fields_ = db_fields;
  // @@protoc_insertion_point(field_set_allocated:proto.message.update_player.db_fields)
}

// -------------------------------------------------------------------

// query_player

// optional .proto.message.message_db_base db_base = 1;
inline bool query_player::has_db_base() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void query_player::set_has_db_base() {
  _has_bits_[0] |= 0x00000001u;
}
inline void query_player::clear_has_db_base() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void query_player::clear_db_base() {
  if (db_base_ != NULL) db_base_->Clear();
  clear_has_db_base();
}
inline const ::proto::message::message_db_base& query_player::_internal_db_base() const {
  return *db_base_;
}
inline const ::proto::message::message_db_base& query_player::db_base() const {
  const ::proto::message::message_db_base* p = db_base_;
  // @@protoc_insertion_point(field_get:proto.message.query_player.db_base)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::message::message_db_base*>(
      &::proto::message::_message_db_base_default_instance_);
}
inline ::proto::message::message_db_base* query_player::release_db_base() {
  // @@protoc_insertion_point(field_release:proto.message.query_player.db_base)
  clear_has_db_base();
  ::proto::message::message_db_base* temp = db_base_;
  db_base_ = NULL;
  return temp;
}
inline ::proto::message::message_db_base* query_player::mutable_db_base() {
  set_has_db_base();
  if (db_base_ == NULL) {
    auto* p = CreateMaybeMessage<::proto::message::message_db_base>(GetArenaNoVirtual());
    db_base_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.message.query_player.db_base)
  return db_base_;
}
inline void query_player::set_allocated_db_base(::proto::message::message_db_base* db_base) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete db_base_;
  }
  if (db_base) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      db_base = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, db_base, submessage_arena);
    }
    set_has_db_base();
  } else {
    clear_has_db_base();
  }
  db_base_ = db_base;
  // @@protoc_insertion_point(field_set_allocated:proto.message.query_player.db_base)
}

// repeated .proto.message.mysql_player db_fields = 2;
inline int query_player::db_fields_size() const {
  return db_fields_.size();
}
inline void query_player::clear_db_fields() {
  db_fields_.Clear();
}
inline ::proto::message::mysql_player* query_player::mutable_db_fields(int index) {
  // @@protoc_insertion_point(field_mutable:proto.message.query_player.db_fields)
  return db_fields_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::message::mysql_player >*
query_player::mutable_db_fields() {
  // @@protoc_insertion_point(field_mutable_list:proto.message.query_player.db_fields)
  return &db_fields_;
}
inline const ::proto::message::mysql_player& query_player::db_fields(int index) const {
  // @@protoc_insertion_point(field_get:proto.message.query_player.db_fields)
  return db_fields_.Get(index);
}
inline ::proto::message::mysql_player* query_player::add_db_fields() {
  // @@protoc_insertion_point(field_add:proto.message.query_player.db_fields)
  return db_fields_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::message::mysql_player >&
query_player::db_fields() const {
  // @@protoc_insertion_point(field_list:proto.message.query_player.db_fields)
  return db_fields_;
}

// optional .proto.message.query_player_cond db_cond = 3;
inline bool query_player::has_db_cond() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void query_player::set_has_db_cond() {
  _has_bits_[0] |= 0x00000002u;
}
inline void query_player::clear_has_db_cond() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void query_player::clear_db_cond() {
  if (db_cond_ != NULL) db_cond_->Clear();
  clear_has_db_cond();
}
inline const ::proto::message::query_player_cond& query_player::_internal_db_cond() const {
  return *db_cond_;
}
inline const ::proto::message::query_player_cond& query_player::db_cond() const {
  const ::proto::message::query_player_cond* p = db_cond_;
  // @@protoc_insertion_point(field_get:proto.message.query_player.db_cond)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::message::query_player_cond*>(
      &::proto::message::_query_player_cond_default_instance_);
}
inline ::proto::message::query_player_cond* query_player::release_db_cond() {
  // @@protoc_insertion_point(field_release:proto.message.query_player.db_cond)
  clear_has_db_cond();
  ::proto::message::query_player_cond* temp = db_cond_;
  db_cond_ = NULL;
  return temp;
}
inline ::proto::message::query_player_cond* query_player::mutable_db_cond() {
  set_has_db_cond();
  if (db_cond_ == NULL) {
    auto* p = CreateMaybeMessage<::proto::message::query_player_cond>(GetArenaNoVirtual());
    db_cond_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.message.query_player.db_cond)
  return db_cond_;
}
inline void query_player::set_allocated_db_cond(::proto::message::query_player_cond* db_cond) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete db_cond_;
  }
  if (db_cond) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      db_cond = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, db_cond, submessage_arena);
    }
    set_has_db_cond();
  } else {
    clear_has_db_cond();
  }
  db_cond_ = db_cond;
  // @@protoc_insertion_point(field_set_allocated:proto.message.query_player.db_cond)
}

// -------------------------------------------------------------------

// MixMailData

// optional uint32 id = 1;
inline bool MixMailData::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MixMailData::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MixMailData::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MixMailData::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 MixMailData::id() const {
  // @@protoc_insertion_point(field_get:proto.message.MixMailData.id)
  return id_;
}
inline void MixMailData::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:proto.message.MixMailData.id)
}

// -------------------------------------------------------------------

// table_mail

// optional uint64 mailid = 1;
inline bool table_mail::has_mailid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void table_mail::set_has_mailid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void table_mail::clear_has_mailid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void table_mail::clear_mailid() {
  mailid_ = GOOGLE_ULONGLONG(0);
  clear_has_mailid();
}
inline ::google::protobuf::uint64 table_mail::mailid() const {
  // @@protoc_insertion_point(field_get:proto.message.table_mail.mailid)
  return mailid_;
}
inline void table_mail::set_mailid(::google::protobuf::uint64 value) {
  set_has_mailid();
  mailid_ = value;
  // @@protoc_insertion_point(field_set:proto.message.table_mail.mailid)
}

// optional uint64 ownerid = 2;
inline bool table_mail::has_ownerid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void table_mail::set_has_ownerid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void table_mail::clear_has_ownerid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void table_mail::clear_ownerid() {
  ownerid_ = GOOGLE_ULONGLONG(0);
  clear_has_ownerid();
}
inline ::google::protobuf::uint64 table_mail::ownerid() const {
  // @@protoc_insertion_point(field_get:proto.message.table_mail.ownerid)
  return ownerid_;
}
inline void table_mail::set_ownerid(::google::protobuf::uint64 value) {
  set_has_ownerid();
  ownerid_ = value;
  // @@protoc_insertion_point(field_set:proto.message.table_mail.ownerid)
}

// optional .proto.message.MixMailData mixinfo = 3;
inline bool table_mail::has_mixinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void table_mail::set_has_mixinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void table_mail::clear_has_mixinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void table_mail::clear_mixinfo() {
  if (mixinfo_ != NULL) mixinfo_->Clear();
  clear_has_mixinfo();
}
inline const ::proto::message::MixMailData& table_mail::_internal_mixinfo() const {
  return *mixinfo_;
}
inline const ::proto::message::MixMailData& table_mail::mixinfo() const {
  const ::proto::message::MixMailData* p = mixinfo_;
  // @@protoc_insertion_point(field_get:proto.message.table_mail.mixinfo)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::message::MixMailData*>(
      &::proto::message::_MixMailData_default_instance_);
}
inline ::proto::message::MixMailData* table_mail::release_mixinfo() {
  // @@protoc_insertion_point(field_release:proto.message.table_mail.mixinfo)
  clear_has_mixinfo();
  ::proto::message::MixMailData* temp = mixinfo_;
  mixinfo_ = NULL;
  return temp;
}
inline ::proto::message::MixMailData* table_mail::mutable_mixinfo() {
  set_has_mixinfo();
  if (mixinfo_ == NULL) {
    auto* p = CreateMaybeMessage<::proto::message::MixMailData>(GetArenaNoVirtual());
    mixinfo_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.message.table_mail.mixinfo)
  return mixinfo_;
}
inline void table_mail::set_allocated_mixinfo(::proto::message::MixMailData* mixinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete mixinfo_;
  }
  if (mixinfo) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      mixinfo = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, mixinfo, submessage_arena);
    }
    set_has_mixinfo();
  } else {
    clear_has_mixinfo();
  }
  mixinfo_ = mixinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.message.table_mail.mixinfo)
}

// optional uint32 mail_type = 4;
inline bool table_mail::has_mail_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void table_mail::set_has_mail_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void table_mail::clear_has_mail_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void table_mail::clear_mail_type() {
  mail_type_ = 0u;
  clear_has_mail_type();
}
inline ::google::protobuf::uint32 table_mail::mail_type() const {
  // @@protoc_insertion_point(field_get:proto.message.table_mail.mail_type)
  return mail_type_;
}
inline void table_mail::set_mail_type(::google::protobuf::uint32 value) {
  set_has_mail_type();
  mail_type_ = value;
  // @@protoc_insertion_point(field_set:proto.message.table_mail.mail_type)
}

// -------------------------------------------------------------------

// query_mail_cond

// optional uint64 mailid = 1;
inline bool query_mail_cond::has_mailid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void query_mail_cond::set_has_mailid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void query_mail_cond::clear_has_mailid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void query_mail_cond::clear_mailid() {
  mailid_ = GOOGLE_ULONGLONG(0);
  clear_has_mailid();
}
inline ::google::protobuf::uint64 query_mail_cond::mailid() const {
  // @@protoc_insertion_point(field_get:proto.message.query_mail_cond.mailid)
  return mailid_;
}
inline void query_mail_cond::set_mailid(::google::protobuf::uint64 value) {
  set_has_mailid();
  mailid_ = value;
  // @@protoc_insertion_point(field_set:proto.message.query_mail_cond.mailid)
}

// -------------------------------------------------------------------

// query_mail

// optional .proto.message.message_db_base db_base = 1;
inline bool query_mail::has_db_base() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void query_mail::set_has_db_base() {
  _has_bits_[0] |= 0x00000001u;
}
inline void query_mail::clear_has_db_base() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void query_mail::clear_db_base() {
  if (db_base_ != NULL) db_base_->Clear();
  clear_has_db_base();
}
inline const ::proto::message::message_db_base& query_mail::_internal_db_base() const {
  return *db_base_;
}
inline const ::proto::message::message_db_base& query_mail::db_base() const {
  const ::proto::message::message_db_base* p = db_base_;
  // @@protoc_insertion_point(field_get:proto.message.query_mail.db_base)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::message::message_db_base*>(
      &::proto::message::_message_db_base_default_instance_);
}
inline ::proto::message::message_db_base* query_mail::release_db_base() {
  // @@protoc_insertion_point(field_release:proto.message.query_mail.db_base)
  clear_has_db_base();
  ::proto::message::message_db_base* temp = db_base_;
  db_base_ = NULL;
  return temp;
}
inline ::proto::message::message_db_base* query_mail::mutable_db_base() {
  set_has_db_base();
  if (db_base_ == NULL) {
    auto* p = CreateMaybeMessage<::proto::message::message_db_base>(GetArenaNoVirtual());
    db_base_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.message.query_mail.db_base)
  return db_base_;
}
inline void query_mail::set_allocated_db_base(::proto::message::message_db_base* db_base) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete db_base_;
  }
  if (db_base) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      db_base = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, db_base, submessage_arena);
    }
    set_has_db_base();
  } else {
    clear_has_db_base();
  }
  db_base_ = db_base;
  // @@protoc_insertion_point(field_set_allocated:proto.message.query_mail.db_base)
}

// optional .proto.message.table_mail db_fields = 2;
inline bool query_mail::has_db_fields() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void query_mail::set_has_db_fields() {
  _has_bits_[0] |= 0x00000002u;
}
inline void query_mail::clear_has_db_fields() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void query_mail::clear_db_fields() {
  if (db_fields_ != NULL) db_fields_->Clear();
  clear_has_db_fields();
}
inline const ::proto::message::table_mail& query_mail::_internal_db_fields() const {
  return *db_fields_;
}
inline const ::proto::message::table_mail& query_mail::db_fields() const {
  const ::proto::message::table_mail* p = db_fields_;
  // @@protoc_insertion_point(field_get:proto.message.query_mail.db_fields)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::message::table_mail*>(
      &::proto::message::_table_mail_default_instance_);
}
inline ::proto::message::table_mail* query_mail::release_db_fields() {
  // @@protoc_insertion_point(field_release:proto.message.query_mail.db_fields)
  clear_has_db_fields();
  ::proto::message::table_mail* temp = db_fields_;
  db_fields_ = NULL;
  return temp;
}
inline ::proto::message::table_mail* query_mail::mutable_db_fields() {
  set_has_db_fields();
  if (db_fields_ == NULL) {
    auto* p = CreateMaybeMessage<::proto::message::table_mail>(GetArenaNoVirtual());
    db_fields_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.message.query_mail.db_fields)
  return db_fields_;
}
inline void query_mail::set_allocated_db_fields(::proto::message::table_mail* db_fields) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete db_fields_;
  }
  if (db_fields) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      db_fields = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, db_fields, submessage_arena);
    }
    set_has_db_fields();
  } else {
    clear_has_db_fields();
  }
  db_fields_ = db_fields;
  // @@protoc_insertion_point(field_set_allocated:proto.message.query_mail.db_fields)
}

// optional .proto.message.query_mail_cond db_cond = 3;
inline bool query_mail::has_db_cond() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void query_mail::set_has_db_cond() {
  _has_bits_[0] |= 0x00000004u;
}
inline void query_mail::clear_has_db_cond() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void query_mail::clear_db_cond() {
  if (db_cond_ != NULL) db_cond_->Clear();
  clear_has_db_cond();
}
inline const ::proto::message::query_mail_cond& query_mail::_internal_db_cond() const {
  return *db_cond_;
}
inline const ::proto::message::query_mail_cond& query_mail::db_cond() const {
  const ::proto::message::query_mail_cond* p = db_cond_;
  // @@protoc_insertion_point(field_get:proto.message.query_mail.db_cond)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::message::query_mail_cond*>(
      &::proto::message::_query_mail_cond_default_instance_);
}
inline ::proto::message::query_mail_cond* query_mail::release_db_cond() {
  // @@protoc_insertion_point(field_release:proto.message.query_mail.db_cond)
  clear_has_db_cond();
  ::proto::message::query_mail_cond* temp = db_cond_;
  db_cond_ = NULL;
  return temp;
}
inline ::proto::message::query_mail_cond* query_mail::mutable_db_cond() {
  set_has_db_cond();
  if (db_cond_ == NULL) {
    auto* p = CreateMaybeMessage<::proto::message::query_mail_cond>(GetArenaNoVirtual());
    db_cond_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.message.query_mail.db_cond)
  return db_cond_;
}
inline void query_mail::set_allocated_db_cond(::proto::message::query_mail_cond* db_cond) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete db_cond_;
  }
  if (db_cond) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      db_cond = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, db_cond, submessage_arena);
    }
    set_has_db_cond();
  } else {
    clear_has_db_cond();
  }
  db_cond_ = db_cond;
  // @@protoc_insertion_point(field_set_allocated:proto.message.query_mail.db_cond)
}

// -------------------------------------------------------------------

// update_mail

// optional .proto.message.message_db_base db_base = 1;
inline bool update_mail::has_db_base() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void update_mail::set_has_db_base() {
  _has_bits_[0] |= 0x00000001u;
}
inline void update_mail::clear_has_db_base() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void update_mail::clear_db_base() {
  if (db_base_ != NULL) db_base_->Clear();
  clear_has_db_base();
}
inline const ::proto::message::message_db_base& update_mail::_internal_db_base() const {
  return *db_base_;
}
inline const ::proto::message::message_db_base& update_mail::db_base() const {
  const ::proto::message::message_db_base* p = db_base_;
  // @@protoc_insertion_point(field_get:proto.message.update_mail.db_base)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::message::message_db_base*>(
      &::proto::message::_message_db_base_default_instance_);
}
inline ::proto::message::message_db_base* update_mail::release_db_base() {
  // @@protoc_insertion_point(field_release:proto.message.update_mail.db_base)
  clear_has_db_base();
  ::proto::message::message_db_base* temp = db_base_;
  db_base_ = NULL;
  return temp;
}
inline ::proto::message::message_db_base* update_mail::mutable_db_base() {
  set_has_db_base();
  if (db_base_ == NULL) {
    auto* p = CreateMaybeMessage<::proto::message::message_db_base>(GetArenaNoVirtual());
    db_base_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.message.update_mail.db_base)
  return db_base_;
}
inline void update_mail::set_allocated_db_base(::proto::message::message_db_base* db_base) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete db_base_;
  }
  if (db_base) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      db_base = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, db_base, submessage_arena);
    }
    set_has_db_base();
  } else {
    clear_has_db_base();
  }
  db_base_ = db_base;
  // @@protoc_insertion_point(field_set_allocated:proto.message.update_mail.db_base)
}

// optional .proto.message.table_mail db_fields = 2;
inline bool update_mail::has_db_fields() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void update_mail::set_has_db_fields() {
  _has_bits_[0] |= 0x00000002u;
}
inline void update_mail::clear_has_db_fields() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void update_mail::clear_db_fields() {
  if (db_fields_ != NULL) db_fields_->Clear();
  clear_has_db_fields();
}
inline const ::proto::message::table_mail& update_mail::_internal_db_fields() const {
  return *db_fields_;
}
inline const ::proto::message::table_mail& update_mail::db_fields() const {
  const ::proto::message::table_mail* p = db_fields_;
  // @@protoc_insertion_point(field_get:proto.message.update_mail.db_fields)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::message::table_mail*>(
      &::proto::message::_table_mail_default_instance_);
}
inline ::proto::message::table_mail* update_mail::release_db_fields() {
  // @@protoc_insertion_point(field_release:proto.message.update_mail.db_fields)
  clear_has_db_fields();
  ::proto::message::table_mail* temp = db_fields_;
  db_fields_ = NULL;
  return temp;
}
inline ::proto::message::table_mail* update_mail::mutable_db_fields() {
  set_has_db_fields();
  if (db_fields_ == NULL) {
    auto* p = CreateMaybeMessage<::proto::message::table_mail>(GetArenaNoVirtual());
    db_fields_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.message.update_mail.db_fields)
  return db_fields_;
}
inline void update_mail::set_allocated_db_fields(::proto::message::table_mail* db_fields) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete db_fields_;
  }
  if (db_fields) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      db_fields = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, db_fields, submessage_arena);
    }
    set_has_db_fields();
  } else {
    clear_has_db_fields();
  }
  db_fields_ = db_fields;
  // @@protoc_insertion_point(field_set_allocated:proto.message.update_mail.db_fields)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace proto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_mysql_5fdb_2eproto
