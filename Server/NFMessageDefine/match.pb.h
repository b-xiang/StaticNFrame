// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: match.proto

#ifndef PROTOBUF_match_2eproto__INCLUDED
#define PROTOBUF_match_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)

namespace proto {
namespace message {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_match_2eproto();
void protobuf_AssignDesc_match_2eproto();
void protobuf_ShutdownFile_match_2eproto();

class PVPInfo;
class ArenaInfo;
class Match_CS_PVPMatch;
class Match_SC_PVPMatch;
class Match_CS_CancelPVPMatch;
class Match_SC_CancelPVPMatch;
class PVPRewardItem;
class Match_SC_PVPResult;
class Match_SC_ArenaResult;
class Match_SC_ContinueWinNum;
class Match_SC_ArenaMatchResult;
class Match_SC_NotifyOtherMatch;
class Match_CS_GetPVPInfo;
class Match_SC_GetPVPInfo;
class Match_CS_GetPVPReward;
class Match_SC_GetPVPReward;
class Match_CS_GetArenaInfo;
class Match_SC_GetArenaInfo;
class Match_CS_GetArenaReward;
class Match_SC_GetArenaReward;
class Match_CS_GetBoatPVPInfo;
class Match_SC_GetBoatPVPInfo;
class Match_CS_GetBoatPVPReward;
class Match_SC_GetBoatPVPReward;
class Match2Battle_SendPlyData;
class Match2Battle_SendAllPlyData;
class Match2Game_PVPResult;
class Match2Game_CreateRoom;
class Battle2Match_PVPResult;

// ===================================================================

class PVPInfo : public ::google::protobuf::Message {
 public:
  PVPInfo();
  virtual ~PVPInfo();

  PVPInfo(const PVPInfo& from);

  inline PVPInfo& operator=(const PVPInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PVPInfo& default_instance();

  void Swap(PVPInfo* other);

  // implements Message ----------------------------------------------

  PVPInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PVPInfo& from);
  void MergeFrom(const PVPInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 score = 1;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 1;
  inline ::google::protobuf::int32 score() const;
  inline void set_score(::google::protobuf::int32 value);

  // optional int32 win_num = 2;
  inline bool has_win_num() const;
  inline void clear_win_num();
  static const int kWinNumFieldNumber = 2;
  inline ::google::protobuf::int32 win_num() const;
  inline void set_win_num(::google::protobuf::int32 value);

  // optional int32 total_num = 3;
  inline bool has_total_num() const;
  inline void clear_total_num();
  static const int kTotalNumFieldNumber = 3;
  inline ::google::protobuf::int32 total_num() const;
  inline void set_total_num(::google::protobuf::int32 value);

  // optional int32 continue_num = 4;
  inline bool has_continue_num() const;
  inline void clear_continue_num();
  static const int kContinueNumFieldNumber = 4;
  inline ::google::protobuf::int32 continue_num() const;
  inline void set_continue_num(::google::protobuf::int32 value);

  // optional int32 first_reward = 5;
  inline bool has_first_reward() const;
  inline void clear_first_reward();
  static const int kFirstRewardFieldNumber = 5;
  inline ::google::protobuf::int32 first_reward() const;
  inline void set_first_reward(::google::protobuf::int32 value);

  // optional int32 three_reward = 6;
  inline bool has_three_reward() const;
  inline void clear_three_reward();
  static const int kThreeRewardFieldNumber = 6;
  inline ::google::protobuf::int32 three_reward() const;
  inline void set_three_reward(::google::protobuf::int32 value);

  // optional int32 three_win_reward = 7;
  inline bool has_three_win_reward() const;
  inline void clear_three_win_reward();
  static const int kThreeWinRewardFieldNumber = 7;
  inline ::google::protobuf::int32 three_win_reward() const;
  inline void set_three_win_reward(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.message.PVPInfo)
 private:
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_win_num();
  inline void clear_has_win_num();
  inline void set_has_total_num();
  inline void clear_has_total_num();
  inline void set_has_continue_num();
  inline void clear_has_continue_num();
  inline void set_has_first_reward();
  inline void clear_has_first_reward();
  inline void set_has_three_reward();
  inline void clear_has_three_reward();
  inline void set_has_three_win_reward();
  inline void clear_has_three_win_reward();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 score_;
  ::google::protobuf::int32 win_num_;
  ::google::protobuf::int32 total_num_;
  ::google::protobuf::int32 continue_num_;
  ::google::protobuf::int32 first_reward_;
  ::google::protobuf::int32 three_reward_;
  ::google::protobuf::int32 three_win_reward_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_match_2eproto();
  friend void protobuf_AssignDesc_match_2eproto();
  friend void protobuf_ShutdownFile_match_2eproto();

  void InitAsDefaultInstance();
  static PVPInfo* default_instance_;
};
// -------------------------------------------------------------------

class ArenaInfo : public ::google::protobuf::Message {
 public:
  ArenaInfo();
  virtual ~ArenaInfo();

  ArenaInfo(const ArenaInfo& from);

  inline ArenaInfo& operator=(const ArenaInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ArenaInfo& default_instance();

  void Swap(ArenaInfo* other);

  // implements Message ----------------------------------------------

  ArenaInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ArenaInfo& from);
  void MergeFrom(const ArenaInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 score = 1;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 1;
  inline ::google::protobuf::int32 score() const;
  inline void set_score(::google::protobuf::int32 value);

  // optional int32 stage = 2;
  inline bool has_stage() const;
  inline void clear_stage();
  static const int kStageFieldNumber = 2;
  inline ::google::protobuf::int32 stage() const;
  inline void set_stage(::google::protobuf::int32 value);

  // optional int32 win_num = 3;
  inline bool has_win_num() const;
  inline void clear_win_num();
  static const int kWinNumFieldNumber = 3;
  inline ::google::protobuf::int32 win_num() const;
  inline void set_win_num(::google::protobuf::int32 value);

  // optional int32 total_num = 4;
  inline bool has_total_num() const;
  inline void clear_total_num();
  static const int kTotalNumFieldNumber = 4;
  inline ::google::protobuf::int32 total_num() const;
  inline void set_total_num(::google::protobuf::int32 value);

  // optional int32 continue_num = 5;
  inline bool has_continue_num() const;
  inline void clear_continue_num();
  static const int kContinueNumFieldNumber = 5;
  inline ::google::protobuf::int32 continue_num() const;
  inline void set_continue_num(::google::protobuf::int32 value);

  // repeated int32 rewardlist = 6;
  inline int rewardlist_size() const;
  inline void clear_rewardlist();
  static const int kRewardlistFieldNumber = 6;
  inline ::google::protobuf::int32 rewardlist(int index) const;
  inline void set_rewardlist(int index, ::google::protobuf::int32 value);
  inline void add_rewardlist(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      rewardlist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_rewardlist();

  // @@protoc_insertion_point(class_scope:proto.message.ArenaInfo)
 private:
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_stage();
  inline void clear_has_stage();
  inline void set_has_win_num();
  inline void clear_has_win_num();
  inline void set_has_total_num();
  inline void clear_has_total_num();
  inline void set_has_continue_num();
  inline void clear_has_continue_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 score_;
  ::google::protobuf::int32 stage_;
  ::google::protobuf::int32 win_num_;
  ::google::protobuf::int32 total_num_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > rewardlist_;
  ::google::protobuf::int32 continue_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_match_2eproto();
  friend void protobuf_AssignDesc_match_2eproto();
  friend void protobuf_ShutdownFile_match_2eproto();

  void InitAsDefaultInstance();
  static ArenaInfo* default_instance_;
};
// -------------------------------------------------------------------

class Match_CS_PVPMatch : public ::google::protobuf::Message {
 public:
  Match_CS_PVPMatch();
  virtual ~Match_CS_PVPMatch();

  Match_CS_PVPMatch(const Match_CS_PVPMatch& from);

  inline Match_CS_PVPMatch& operator=(const Match_CS_PVPMatch& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Match_CS_PVPMatch& default_instance();

  void Swap(Match_CS_PVPMatch* other);

  // implements Message ----------------------------------------------

  Match_CS_PVPMatch* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Match_CS_PVPMatch& from);
  void MergeFrom(const Match_CS_PVPMatch& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 usual_id = 1;
  inline bool has_usual_id() const;
  inline void clear_usual_id();
  static const int kUsualIdFieldNumber = 1;
  inline ::google::protobuf::int32 usual_id() const;
  inline void set_usual_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Match_CS_PVPMatch)
 private:
  inline void set_has_usual_id();
  inline void clear_has_usual_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 usual_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_match_2eproto();
  friend void protobuf_AssignDesc_match_2eproto();
  friend void protobuf_ShutdownFile_match_2eproto();

  void InitAsDefaultInstance();
  static Match_CS_PVPMatch* default_instance_;
};
// -------------------------------------------------------------------

class Match_SC_PVPMatch : public ::google::protobuf::Message {
 public:
  Match_SC_PVPMatch();
  virtual ~Match_SC_PVPMatch();

  Match_SC_PVPMatch(const Match_SC_PVPMatch& from);

  inline Match_SC_PVPMatch& operator=(const Match_SC_PVPMatch& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Match_SC_PVPMatch& default_instance();

  void Swap(Match_SC_PVPMatch* other);

  // implements Message ----------------------------------------------

  Match_SC_PVPMatch* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Match_SC_PVPMatch& from);
  void MergeFrom(const Match_SC_PVPMatch& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional string ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional int32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // optional uint64 charid = 4;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 4;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.message.Match_SC_PVPMatch)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* ip_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 port_;
  ::google::protobuf::uint64 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_match_2eproto();
  friend void protobuf_AssignDesc_match_2eproto();
  friend void protobuf_ShutdownFile_match_2eproto();

  void InitAsDefaultInstance();
  static Match_SC_PVPMatch* default_instance_;
};
// -------------------------------------------------------------------

class Match_CS_CancelPVPMatch : public ::google::protobuf::Message {
 public:
  Match_CS_CancelPVPMatch();
  virtual ~Match_CS_CancelPVPMatch();

  Match_CS_CancelPVPMatch(const Match_CS_CancelPVPMatch& from);

  inline Match_CS_CancelPVPMatch& operator=(const Match_CS_CancelPVPMatch& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Match_CS_CancelPVPMatch& default_instance();

  void Swap(Match_CS_CancelPVPMatch* other);

  // implements Message ----------------------------------------------

  Match_CS_CancelPVPMatch* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Match_CS_CancelPVPMatch& from);
  void MergeFrom(const Match_CS_CancelPVPMatch& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.message.Match_CS_CancelPVPMatch)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_match_2eproto();
  friend void protobuf_AssignDesc_match_2eproto();
  friend void protobuf_ShutdownFile_match_2eproto();

  void InitAsDefaultInstance();
  static Match_CS_CancelPVPMatch* default_instance_;
};
// -------------------------------------------------------------------

class Match_SC_CancelPVPMatch : public ::google::protobuf::Message {
 public:
  Match_SC_CancelPVPMatch();
  virtual ~Match_SC_CancelPVPMatch();

  Match_SC_CancelPVPMatch(const Match_SC_CancelPVPMatch& from);

  inline Match_SC_CancelPVPMatch& operator=(const Match_SC_CancelPVPMatch& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Match_SC_CancelPVPMatch& default_instance();

  void Swap(Match_SC_CancelPVPMatch* other);

  // implements Message ----------------------------------------------

  Match_SC_CancelPVPMatch* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Match_SC_CancelPVPMatch& from);
  void MergeFrom(const Match_SC_CancelPVPMatch& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Match_SC_CancelPVPMatch)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_match_2eproto();
  friend void protobuf_AssignDesc_match_2eproto();
  friend void protobuf_ShutdownFile_match_2eproto();

  void InitAsDefaultInstance();
  static Match_SC_CancelPVPMatch* default_instance_;
};
// -------------------------------------------------------------------

class PVPRewardItem : public ::google::protobuf::Message {
 public:
  PVPRewardItem();
  virtual ~PVPRewardItem();

  PVPRewardItem(const PVPRewardItem& from);

  inline PVPRewardItem& operator=(const PVPRewardItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PVPRewardItem& default_instance();

  void Swap(PVPRewardItem* other);

  // implements Message ----------------------------------------------

  PVPRewardItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PVPRewardItem& from);
  void MergeFrom(const PVPRewardItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.message.PVPRewardItem)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_match_2eproto();
  friend void protobuf_AssignDesc_match_2eproto();
  friend void protobuf_ShutdownFile_match_2eproto();

  void InitAsDefaultInstance();
  static PVPRewardItem* default_instance_;
};
// -------------------------------------------------------------------

class Match_SC_PVPResult : public ::google::protobuf::Message {
 public:
  Match_SC_PVPResult();
  virtual ~Match_SC_PVPResult();

  Match_SC_PVPResult(const Match_SC_PVPResult& from);

  inline Match_SC_PVPResult& operator=(const Match_SC_PVPResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Match_SC_PVPResult& default_instance();

  void Swap(Match_SC_PVPResult* other);

  // implements Message ----------------------------------------------

  Match_SC_PVPResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Match_SC_PVPResult& from);
  void MergeFrom(const Match_SC_PVPResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional int32 pass_time = 2;
  inline bool has_pass_time() const;
  inline void clear_pass_time();
  static const int kPassTimeFieldNumber = 2;
  inline ::google::protobuf::int32 pass_time() const;
  inline void set_pass_time(::google::protobuf::int32 value);

  // repeated .proto.message.PVPRewardItem item_list = 3;
  inline int item_list_size() const;
  inline void clear_item_list();
  static const int kItemListFieldNumber = 3;
  inline const ::proto::message::PVPRewardItem& item_list(int index) const;
  inline ::proto::message::PVPRewardItem* mutable_item_list(int index);
  inline ::proto::message::PVPRewardItem* add_item_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::message::PVPRewardItem >&
      item_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::message::PVPRewardItem >*
      mutable_item_list();

  // optional int32 get_score = 4;
  inline bool has_get_score() const;
  inline void clear_get_score();
  static const int kGetScoreFieldNumber = 4;
  inline ::google::protobuf::int32 get_score() const;
  inline void set_get_score(::google::protobuf::int32 value);

  // optional int32 usual_id = 5;
  inline bool has_usual_id() const;
  inline void clear_usual_id();
  static const int kUsualIdFieldNumber = 5;
  inline ::google::protobuf::int32 usual_id() const;
  inline void set_usual_id(::google::protobuf::int32 value);

  // optional .proto.message.PVPInfo pvp_info = 6;
  inline bool has_pvp_info() const;
  inline void clear_pvp_info();
  static const int kPvpInfoFieldNumber = 6;
  inline const ::proto::message::PVPInfo& pvp_info() const;
  inline ::proto::message::PVPInfo* mutable_pvp_info();
  inline ::proto::message::PVPInfo* release_pvp_info();
  inline void set_allocated_pvp_info(::proto::message::PVPInfo* pvp_info);

  // @@protoc_insertion_point(class_scope:proto.message.Match_SC_PVPResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_pass_time();
  inline void clear_has_pass_time();
  inline void set_has_get_score();
  inline void clear_has_get_score();
  inline void set_has_usual_id();
  inline void clear_has_usual_id();
  inline void set_has_pvp_info();
  inline void clear_has_pvp_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 pass_time_;
  ::google::protobuf::RepeatedPtrField< ::proto::message::PVPRewardItem > item_list_;
  ::google::protobuf::int32 get_score_;
  ::google::protobuf::int32 usual_id_;
  ::proto::message::PVPInfo* pvp_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_match_2eproto();
  friend void protobuf_AssignDesc_match_2eproto();
  friend void protobuf_ShutdownFile_match_2eproto();

  void InitAsDefaultInstance();
  static Match_SC_PVPResult* default_instance_;
};
// -------------------------------------------------------------------

class Match_SC_ArenaResult : public ::google::protobuf::Message {
 public:
  Match_SC_ArenaResult();
  virtual ~Match_SC_ArenaResult();

  Match_SC_ArenaResult(const Match_SC_ArenaResult& from);

  inline Match_SC_ArenaResult& operator=(const Match_SC_ArenaResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Match_SC_ArenaResult& default_instance();

  void Swap(Match_SC_ArenaResult* other);

  // implements Message ----------------------------------------------

  Match_SC_ArenaResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Match_SC_ArenaResult& from);
  void MergeFrom(const Match_SC_ArenaResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional int32 pass_time = 2;
  inline bool has_pass_time() const;
  inline void clear_pass_time();
  static const int kPassTimeFieldNumber = 2;
  inline ::google::protobuf::int32 pass_time() const;
  inline void set_pass_time(::google::protobuf::int32 value);

  // repeated .proto.message.PVPRewardItem item_list = 3;
  inline int item_list_size() const;
  inline void clear_item_list();
  static const int kItemListFieldNumber = 3;
  inline const ::proto::message::PVPRewardItem& item_list(int index) const;
  inline ::proto::message::PVPRewardItem* mutable_item_list(int index);
  inline ::proto::message::PVPRewardItem* add_item_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::message::PVPRewardItem >&
      item_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::message::PVPRewardItem >*
      mutable_item_list();

  // optional int32 get_score = 4;
  inline bool has_get_score() const;
  inline void clear_get_score();
  static const int kGetScoreFieldNumber = 4;
  inline ::google::protobuf::int32 get_score() const;
  inline void set_get_score(::google::protobuf::int32 value);

  // optional int32 usual_id = 5;
  inline bool has_usual_id() const;
  inline void clear_usual_id();
  static const int kUsualIdFieldNumber = 5;
  inline ::google::protobuf::int32 usual_id() const;
  inline void set_usual_id(::google::protobuf::int32 value);

  // optional .proto.message.ArenaInfo arena_info = 6;
  inline bool has_arena_info() const;
  inline void clear_arena_info();
  static const int kArenaInfoFieldNumber = 6;
  inline const ::proto::message::ArenaInfo& arena_info() const;
  inline ::proto::message::ArenaInfo* mutable_arena_info();
  inline ::proto::message::ArenaInfo* release_arena_info();
  inline void set_allocated_arena_info(::proto::message::ArenaInfo* arena_info);

  // optional uint32 reason = 7;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 7;
  inline ::google::protobuf::uint32 reason() const;
  inline void set_reason(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Match_SC_ArenaResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_pass_time();
  inline void clear_has_pass_time();
  inline void set_has_get_score();
  inline void clear_has_get_score();
  inline void set_has_usual_id();
  inline void clear_has_usual_id();
  inline void set_has_arena_info();
  inline void clear_has_arena_info();
  inline void set_has_reason();
  inline void clear_has_reason();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 pass_time_;
  ::google::protobuf::RepeatedPtrField< ::proto::message::PVPRewardItem > item_list_;
  ::google::protobuf::int32 get_score_;
  ::google::protobuf::int32 usual_id_;
  ::proto::message::ArenaInfo* arena_info_;
  ::google::protobuf::uint32 reason_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_match_2eproto();
  friend void protobuf_AssignDesc_match_2eproto();
  friend void protobuf_ShutdownFile_match_2eproto();

  void InitAsDefaultInstance();
  static Match_SC_ArenaResult* default_instance_;
};
// -------------------------------------------------------------------

class Match_SC_ContinueWinNum : public ::google::protobuf::Message {
 public:
  Match_SC_ContinueWinNum();
  virtual ~Match_SC_ContinueWinNum();

  Match_SC_ContinueWinNum(const Match_SC_ContinueWinNum& from);

  inline Match_SC_ContinueWinNum& operator=(const Match_SC_ContinueWinNum& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Match_SC_ContinueWinNum& default_instance();

  void Swap(Match_SC_ContinueWinNum* other);

  // implements Message ----------------------------------------------

  Match_SC_ContinueWinNum* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Match_SC_ContinueWinNum& from);
  void MergeFrom(const Match_SC_ContinueWinNum& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 charid = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 1;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 win_num = 3;
  inline bool has_win_num() const;
  inline void clear_win_num();
  static const int kWinNumFieldNumber = 3;
  inline ::google::protobuf::int32 win_num() const;
  inline void set_win_num(::google::protobuf::int32 value);

  // optional int32 usual_id = 4;
  inline bool has_usual_id() const;
  inline void clear_usual_id();
  static const int kUsualIdFieldNumber = 4;
  inline ::google::protobuf::int32 usual_id() const;
  inline void set_usual_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Match_SC_ContinueWinNum)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_win_num();
  inline void clear_has_win_num();
  inline void set_has_usual_id();
  inline void clear_has_usual_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 charid_;
  ::std::string* name_;
  ::google::protobuf::int32 win_num_;
  ::google::protobuf::int32 usual_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_match_2eproto();
  friend void protobuf_AssignDesc_match_2eproto();
  friend void protobuf_ShutdownFile_match_2eproto();

  void InitAsDefaultInstance();
  static Match_SC_ContinueWinNum* default_instance_;
};
// -------------------------------------------------------------------

class Match_SC_ArenaMatchResult : public ::google::protobuf::Message {
 public:
  Match_SC_ArenaMatchResult();
  virtual ~Match_SC_ArenaMatchResult();

  Match_SC_ArenaMatchResult(const Match_SC_ArenaMatchResult& from);

  inline Match_SC_ArenaMatchResult& operator=(const Match_SC_ArenaMatchResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Match_SC_ArenaMatchResult& default_instance();

  void Swap(Match_SC_ArenaMatchResult* other);

  // implements Message ----------------------------------------------

  Match_SC_ArenaMatchResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Match_SC_ArenaMatchResult& from);
  void MergeFrom(const Match_SC_ArenaMatchResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional string ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional int32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // optional uint64 charid = 4;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 4;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional string name = 5;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 5;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 career = 6;
  inline bool has_career() const;
  inline void clear_career();
  static const int kCareerFieldNumber = 6;
  inline ::google::protobuf::int32 career() const;
  inline void set_career(::google::protobuf::int32 value);

  // optional int32 level = 7;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 7;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional string guild_name = 8;
  inline bool has_guild_name() const;
  inline void clear_guild_name();
  static const int kGuildNameFieldNumber = 8;
  inline const ::std::string& guild_name() const;
  inline void set_guild_name(const ::std::string& value);
  inline void set_guild_name(const char* value);
  inline void set_guild_name(const char* value, size_t size);
  inline ::std::string* mutable_guild_name();
  inline ::std::string* release_guild_name();
  inline void set_allocated_guild_name(::std::string* guild_name);

  // optional int32 score = 9;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 9;
  inline ::google::protobuf::int32 score() const;
  inline void set_score(::google::protobuf::int32 value);

  // optional uint32 dhlev = 10;
  inline bool has_dhlev() const;
  inline void clear_dhlev();
  static const int kDhlevFieldNumber = 10;
  inline ::google::protobuf::uint32 dhlev() const;
  inline void set_dhlev(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Match_SC_ArenaMatchResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_career();
  inline void clear_has_career();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_guild_name();
  inline void clear_has_guild_name();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_dhlev();
  inline void clear_has_dhlev();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* ip_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 port_;
  ::google::protobuf::uint64 charid_;
  ::std::string* name_;
  ::google::protobuf::int32 career_;
  ::google::protobuf::int32 level_;
  ::std::string* guild_name_;
  ::google::protobuf::int32 score_;
  ::google::protobuf::uint32 dhlev_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_match_2eproto();
  friend void protobuf_AssignDesc_match_2eproto();
  friend void protobuf_ShutdownFile_match_2eproto();

  void InitAsDefaultInstance();
  static Match_SC_ArenaMatchResult* default_instance_;
};
// -------------------------------------------------------------------

class Match_SC_NotifyOtherMatch : public ::google::protobuf::Message {
 public:
  Match_SC_NotifyOtherMatch();
  virtual ~Match_SC_NotifyOtherMatch();

  Match_SC_NotifyOtherMatch(const Match_SC_NotifyOtherMatch& from);

  inline Match_SC_NotifyOtherMatch& operator=(const Match_SC_NotifyOtherMatch& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Match_SC_NotifyOtherMatch& default_instance();

  void Swap(Match_SC_NotifyOtherMatch* other);

  // implements Message ----------------------------------------------

  Match_SC_NotifyOtherMatch* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Match_SC_NotifyOtherMatch& from);
  void MergeFrom(const Match_SC_NotifyOtherMatch& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.message.Match_SC_NotifyOtherMatch)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_match_2eproto();
  friend void protobuf_AssignDesc_match_2eproto();
  friend void protobuf_ShutdownFile_match_2eproto();

  void InitAsDefaultInstance();
  static Match_SC_NotifyOtherMatch* default_instance_;
};
// -------------------------------------------------------------------

class Match_CS_GetPVPInfo : public ::google::protobuf::Message {
 public:
  Match_CS_GetPVPInfo();
  virtual ~Match_CS_GetPVPInfo();

  Match_CS_GetPVPInfo(const Match_CS_GetPVPInfo& from);

  inline Match_CS_GetPVPInfo& operator=(const Match_CS_GetPVPInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Match_CS_GetPVPInfo& default_instance();

  void Swap(Match_CS_GetPVPInfo* other);

  // implements Message ----------------------------------------------

  Match_CS_GetPVPInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Match_CS_GetPVPInfo& from);
  void MergeFrom(const Match_CS_GetPVPInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 usual_id = 1;
  inline bool has_usual_id() const;
  inline void clear_usual_id();
  static const int kUsualIdFieldNumber = 1;
  inline ::google::protobuf::int32 usual_id() const;
  inline void set_usual_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Match_CS_GetPVPInfo)
 private:
  inline void set_has_usual_id();
  inline void clear_has_usual_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 usual_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_match_2eproto();
  friend void protobuf_AssignDesc_match_2eproto();
  friend void protobuf_ShutdownFile_match_2eproto();

  void InitAsDefaultInstance();
  static Match_CS_GetPVPInfo* default_instance_;
};
// -------------------------------------------------------------------

class Match_SC_GetPVPInfo : public ::google::protobuf::Message {
 public:
  Match_SC_GetPVPInfo();
  virtual ~Match_SC_GetPVPInfo();

  Match_SC_GetPVPInfo(const Match_SC_GetPVPInfo& from);

  inline Match_SC_GetPVPInfo& operator=(const Match_SC_GetPVPInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Match_SC_GetPVPInfo& default_instance();

  void Swap(Match_SC_GetPVPInfo* other);

  // implements Message ----------------------------------------------

  Match_SC_GetPVPInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Match_SC_GetPVPInfo& from);
  void MergeFrom(const Match_SC_GetPVPInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional int32 usual_id = 2;
  inline bool has_usual_id() const;
  inline void clear_usual_id();
  static const int kUsualIdFieldNumber = 2;
  inline ::google::protobuf::int32 usual_id() const;
  inline void set_usual_id(::google::protobuf::int32 value);

  // optional int32 remain_time = 3;
  inline bool has_remain_time() const;
  inline void clear_remain_time();
  static const int kRemainTimeFieldNumber = 3;
  inline ::google::protobuf::int32 remain_time() const;
  inline void set_remain_time(::google::protobuf::int32 value);

  // optional .proto.message.PVPInfo pvp_info = 4;
  inline bool has_pvp_info() const;
  inline void clear_pvp_info();
  static const int kPvpInfoFieldNumber = 4;
  inline const ::proto::message::PVPInfo& pvp_info() const;
  inline ::proto::message::PVPInfo* mutable_pvp_info();
  inline ::proto::message::PVPInfo* release_pvp_info();
  inline void set_allocated_pvp_info(::proto::message::PVPInfo* pvp_info);

  // @@protoc_insertion_point(class_scope:proto.message.Match_SC_GetPVPInfo)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_usual_id();
  inline void clear_has_usual_id();
  inline void set_has_remain_time();
  inline void clear_has_remain_time();
  inline void set_has_pvp_info();
  inline void clear_has_pvp_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 usual_id_;
  ::proto::message::PVPInfo* pvp_info_;
  ::google::protobuf::int32 remain_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_match_2eproto();
  friend void protobuf_AssignDesc_match_2eproto();
  friend void protobuf_ShutdownFile_match_2eproto();

  void InitAsDefaultInstance();
  static Match_SC_GetPVPInfo* default_instance_;
};
// -------------------------------------------------------------------

class Match_CS_GetPVPReward : public ::google::protobuf::Message {
 public:
  Match_CS_GetPVPReward();
  virtual ~Match_CS_GetPVPReward();

  Match_CS_GetPVPReward(const Match_CS_GetPVPReward& from);

  inline Match_CS_GetPVPReward& operator=(const Match_CS_GetPVPReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Match_CS_GetPVPReward& default_instance();

  void Swap(Match_CS_GetPVPReward* other);

  // implements Message ----------------------------------------------

  Match_CS_GetPVPReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Match_CS_GetPVPReward& from);
  void MergeFrom(const Match_CS_GetPVPReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 batt_id = 1;
  inline bool has_batt_id() const;
  inline void clear_batt_id();
  static const int kBattIdFieldNumber = 1;
  inline ::google::protobuf::int32 batt_id() const;
  inline void set_batt_id(::google::protobuf::int32 value);

  // optional int32 reward_type = 2;
  inline bool has_reward_type() const;
  inline void clear_reward_type();
  static const int kRewardTypeFieldNumber = 2;
  inline ::google::protobuf::int32 reward_type() const;
  inline void set_reward_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Match_CS_GetPVPReward)
 private:
  inline void set_has_batt_id();
  inline void clear_has_batt_id();
  inline void set_has_reward_type();
  inline void clear_has_reward_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 batt_id_;
  ::google::protobuf::int32 reward_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_match_2eproto();
  friend void protobuf_AssignDesc_match_2eproto();
  friend void protobuf_ShutdownFile_match_2eproto();

  void InitAsDefaultInstance();
  static Match_CS_GetPVPReward* default_instance_;
};
// -------------------------------------------------------------------

class Match_SC_GetPVPReward : public ::google::protobuf::Message {
 public:
  Match_SC_GetPVPReward();
  virtual ~Match_SC_GetPVPReward();

  Match_SC_GetPVPReward(const Match_SC_GetPVPReward& from);

  inline Match_SC_GetPVPReward& operator=(const Match_SC_GetPVPReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Match_SC_GetPVPReward& default_instance();

  void Swap(Match_SC_GetPVPReward* other);

  // implements Message ----------------------------------------------

  Match_SC_GetPVPReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Match_SC_GetPVPReward& from);
  void MergeFrom(const Match_SC_GetPVPReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional int32 reward_type = 2;
  inline bool has_reward_type() const;
  inline void clear_reward_type();
  static const int kRewardTypeFieldNumber = 2;
  inline ::google::protobuf::int32 reward_type() const;
  inline void set_reward_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Match_SC_GetPVPReward)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_reward_type();
  inline void clear_has_reward_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 reward_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_match_2eproto();
  friend void protobuf_AssignDesc_match_2eproto();
  friend void protobuf_ShutdownFile_match_2eproto();

  void InitAsDefaultInstance();
  static Match_SC_GetPVPReward* default_instance_;
};
// -------------------------------------------------------------------

class Match_CS_GetArenaInfo : public ::google::protobuf::Message {
 public:
  Match_CS_GetArenaInfo();
  virtual ~Match_CS_GetArenaInfo();

  Match_CS_GetArenaInfo(const Match_CS_GetArenaInfo& from);

  inline Match_CS_GetArenaInfo& operator=(const Match_CS_GetArenaInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Match_CS_GetArenaInfo& default_instance();

  void Swap(Match_CS_GetArenaInfo* other);

  // implements Message ----------------------------------------------

  Match_CS_GetArenaInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Match_CS_GetArenaInfo& from);
  void MergeFrom(const Match_CS_GetArenaInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 usual_id = 1;
  inline bool has_usual_id() const;
  inline void clear_usual_id();
  static const int kUsualIdFieldNumber = 1;
  inline ::google::protobuf::int32 usual_id() const;
  inline void set_usual_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Match_CS_GetArenaInfo)
 private:
  inline void set_has_usual_id();
  inline void clear_has_usual_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 usual_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_match_2eproto();
  friend void protobuf_AssignDesc_match_2eproto();
  friend void protobuf_ShutdownFile_match_2eproto();

  void InitAsDefaultInstance();
  static Match_CS_GetArenaInfo* default_instance_;
};
// -------------------------------------------------------------------

class Match_SC_GetArenaInfo : public ::google::protobuf::Message {
 public:
  Match_SC_GetArenaInfo();
  virtual ~Match_SC_GetArenaInfo();

  Match_SC_GetArenaInfo(const Match_SC_GetArenaInfo& from);

  inline Match_SC_GetArenaInfo& operator=(const Match_SC_GetArenaInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Match_SC_GetArenaInfo& default_instance();

  void Swap(Match_SC_GetArenaInfo* other);

  // implements Message ----------------------------------------------

  Match_SC_GetArenaInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Match_SC_GetArenaInfo& from);
  void MergeFrom(const Match_SC_GetArenaInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional int32 usual_id = 2;
  inline bool has_usual_id() const;
  inline void clear_usual_id();
  static const int kUsualIdFieldNumber = 2;
  inline ::google::protobuf::int32 usual_id() const;
  inline void set_usual_id(::google::protobuf::int32 value);

  // optional int32 remain_time = 3;
  inline bool has_remain_time() const;
  inline void clear_remain_time();
  static const int kRemainTimeFieldNumber = 3;
  inline ::google::protobuf::int32 remain_time() const;
  inline void set_remain_time(::google::protobuf::int32 value);

  // optional .proto.message.ArenaInfo arena_info = 4;
  inline bool has_arena_info() const;
  inline void clear_arena_info();
  static const int kArenaInfoFieldNumber = 4;
  inline const ::proto::message::ArenaInfo& arena_info() const;
  inline ::proto::message::ArenaInfo* mutable_arena_info();
  inline ::proto::message::ArenaInfo* release_arena_info();
  inline void set_allocated_arena_info(::proto::message::ArenaInfo* arena_info);

  // @@protoc_insertion_point(class_scope:proto.message.Match_SC_GetArenaInfo)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_usual_id();
  inline void clear_has_usual_id();
  inline void set_has_remain_time();
  inline void clear_has_remain_time();
  inline void set_has_arena_info();
  inline void clear_has_arena_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 usual_id_;
  ::proto::message::ArenaInfo* arena_info_;
  ::google::protobuf::int32 remain_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_match_2eproto();
  friend void protobuf_AssignDesc_match_2eproto();
  friend void protobuf_ShutdownFile_match_2eproto();

  void InitAsDefaultInstance();
  static Match_SC_GetArenaInfo* default_instance_;
};
// -------------------------------------------------------------------

class Match_CS_GetArenaReward : public ::google::protobuf::Message {
 public:
  Match_CS_GetArenaReward();
  virtual ~Match_CS_GetArenaReward();

  Match_CS_GetArenaReward(const Match_CS_GetArenaReward& from);

  inline Match_CS_GetArenaReward& operator=(const Match_CS_GetArenaReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Match_CS_GetArenaReward& default_instance();

  void Swap(Match_CS_GetArenaReward* other);

  // implements Message ----------------------------------------------

  Match_CS_GetArenaReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Match_CS_GetArenaReward& from);
  void MergeFrom(const Match_CS_GetArenaReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 rewardid = 1;
  inline bool has_rewardid() const;
  inline void clear_rewardid();
  static const int kRewardidFieldNumber = 1;
  inline ::google::protobuf::uint32 rewardid() const;
  inline void set_rewardid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Match_CS_GetArenaReward)
 private:
  inline void set_has_rewardid();
  inline void clear_has_rewardid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 rewardid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_match_2eproto();
  friend void protobuf_AssignDesc_match_2eproto();
  friend void protobuf_ShutdownFile_match_2eproto();

  void InitAsDefaultInstance();
  static Match_CS_GetArenaReward* default_instance_;
};
// -------------------------------------------------------------------

class Match_SC_GetArenaReward : public ::google::protobuf::Message {
 public:
  Match_SC_GetArenaReward();
  virtual ~Match_SC_GetArenaReward();

  Match_SC_GetArenaReward(const Match_SC_GetArenaReward& from);

  inline Match_SC_GetArenaReward& operator=(const Match_SC_GetArenaReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Match_SC_GetArenaReward& default_instance();

  void Swap(Match_SC_GetArenaReward* other);

  // implements Message ----------------------------------------------

  Match_SC_GetArenaReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Match_SC_GetArenaReward& from);
  void MergeFrom(const Match_SC_GetArenaReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional int32 rewardid = 2;
  inline bool has_rewardid() const;
  inline void clear_rewardid();
  static const int kRewardidFieldNumber = 2;
  inline ::google::protobuf::int32 rewardid() const;
  inline void set_rewardid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Match_SC_GetArenaReward)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_rewardid();
  inline void clear_has_rewardid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 rewardid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_match_2eproto();
  friend void protobuf_AssignDesc_match_2eproto();
  friend void protobuf_ShutdownFile_match_2eproto();

  void InitAsDefaultInstance();
  static Match_SC_GetArenaReward* default_instance_;
};
// -------------------------------------------------------------------

class Match_CS_GetBoatPVPInfo : public ::google::protobuf::Message {
 public:
  Match_CS_GetBoatPVPInfo();
  virtual ~Match_CS_GetBoatPVPInfo();

  Match_CS_GetBoatPVPInfo(const Match_CS_GetBoatPVPInfo& from);

  inline Match_CS_GetBoatPVPInfo& operator=(const Match_CS_GetBoatPVPInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Match_CS_GetBoatPVPInfo& default_instance();

  void Swap(Match_CS_GetBoatPVPInfo* other);

  // implements Message ----------------------------------------------

  Match_CS_GetBoatPVPInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Match_CS_GetBoatPVPInfo& from);
  void MergeFrom(const Match_CS_GetBoatPVPInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 usual_id = 1;
  inline bool has_usual_id() const;
  inline void clear_usual_id();
  static const int kUsualIdFieldNumber = 1;
  inline ::google::protobuf::int32 usual_id() const;
  inline void set_usual_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Match_CS_GetBoatPVPInfo)
 private:
  inline void set_has_usual_id();
  inline void clear_has_usual_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 usual_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_match_2eproto();
  friend void protobuf_AssignDesc_match_2eproto();
  friend void protobuf_ShutdownFile_match_2eproto();

  void InitAsDefaultInstance();
  static Match_CS_GetBoatPVPInfo* default_instance_;
};
// -------------------------------------------------------------------

class Match_SC_GetBoatPVPInfo : public ::google::protobuf::Message {
 public:
  Match_SC_GetBoatPVPInfo();
  virtual ~Match_SC_GetBoatPVPInfo();

  Match_SC_GetBoatPVPInfo(const Match_SC_GetBoatPVPInfo& from);

  inline Match_SC_GetBoatPVPInfo& operator=(const Match_SC_GetBoatPVPInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Match_SC_GetBoatPVPInfo& default_instance();

  void Swap(Match_SC_GetBoatPVPInfo* other);

  // implements Message ----------------------------------------------

  Match_SC_GetBoatPVPInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Match_SC_GetBoatPVPInfo& from);
  void MergeFrom(const Match_SC_GetBoatPVPInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional int32 usual_id = 2;
  inline bool has_usual_id() const;
  inline void clear_usual_id();
  static const int kUsualIdFieldNumber = 2;
  inline ::google::protobuf::int32 usual_id() const;
  inline void set_usual_id(::google::protobuf::int32 value);

  // optional int32 remain_time = 3;
  inline bool has_remain_time() const;
  inline void clear_remain_time();
  static const int kRemainTimeFieldNumber = 3;
  inline ::google::protobuf::int32 remain_time() const;
  inline void set_remain_time(::google::protobuf::int32 value);

  // optional .proto.message.PVPInfo boat_pvp_info = 4;
  inline bool has_boat_pvp_info() const;
  inline void clear_boat_pvp_info();
  static const int kBoatPvpInfoFieldNumber = 4;
  inline const ::proto::message::PVPInfo& boat_pvp_info() const;
  inline ::proto::message::PVPInfo* mutable_boat_pvp_info();
  inline ::proto::message::PVPInfo* release_boat_pvp_info();
  inline void set_allocated_boat_pvp_info(::proto::message::PVPInfo* boat_pvp_info);

  // @@protoc_insertion_point(class_scope:proto.message.Match_SC_GetBoatPVPInfo)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_usual_id();
  inline void clear_has_usual_id();
  inline void set_has_remain_time();
  inline void clear_has_remain_time();
  inline void set_has_boat_pvp_info();
  inline void clear_has_boat_pvp_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 usual_id_;
  ::proto::message::PVPInfo* boat_pvp_info_;
  ::google::protobuf::int32 remain_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_match_2eproto();
  friend void protobuf_AssignDesc_match_2eproto();
  friend void protobuf_ShutdownFile_match_2eproto();

  void InitAsDefaultInstance();
  static Match_SC_GetBoatPVPInfo* default_instance_;
};
// -------------------------------------------------------------------

class Match_CS_GetBoatPVPReward : public ::google::protobuf::Message {
 public:
  Match_CS_GetBoatPVPReward();
  virtual ~Match_CS_GetBoatPVPReward();

  Match_CS_GetBoatPVPReward(const Match_CS_GetBoatPVPReward& from);

  inline Match_CS_GetBoatPVPReward& operator=(const Match_CS_GetBoatPVPReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Match_CS_GetBoatPVPReward& default_instance();

  void Swap(Match_CS_GetBoatPVPReward* other);

  // implements Message ----------------------------------------------

  Match_CS_GetBoatPVPReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Match_CS_GetBoatPVPReward& from);
  void MergeFrom(const Match_CS_GetBoatPVPReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 reward_type = 1;
  inline bool has_reward_type() const;
  inline void clear_reward_type();
  static const int kRewardTypeFieldNumber = 1;
  inline ::google::protobuf::int32 reward_type() const;
  inline void set_reward_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Match_CS_GetBoatPVPReward)
 private:
  inline void set_has_reward_type();
  inline void clear_has_reward_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 reward_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_match_2eproto();
  friend void protobuf_AssignDesc_match_2eproto();
  friend void protobuf_ShutdownFile_match_2eproto();

  void InitAsDefaultInstance();
  static Match_CS_GetBoatPVPReward* default_instance_;
};
// -------------------------------------------------------------------

class Match_SC_GetBoatPVPReward : public ::google::protobuf::Message {
 public:
  Match_SC_GetBoatPVPReward();
  virtual ~Match_SC_GetBoatPVPReward();

  Match_SC_GetBoatPVPReward(const Match_SC_GetBoatPVPReward& from);

  inline Match_SC_GetBoatPVPReward& operator=(const Match_SC_GetBoatPVPReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Match_SC_GetBoatPVPReward& default_instance();

  void Swap(Match_SC_GetBoatPVPReward* other);

  // implements Message ----------------------------------------------

  Match_SC_GetBoatPVPReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Match_SC_GetBoatPVPReward& from);
  void MergeFrom(const Match_SC_GetBoatPVPReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional int32 reward_type = 2;
  inline bool has_reward_type() const;
  inline void clear_reward_type();
  static const int kRewardTypeFieldNumber = 2;
  inline ::google::protobuf::int32 reward_type() const;
  inline void set_reward_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Match_SC_GetBoatPVPReward)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_reward_type();
  inline void clear_has_reward_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 reward_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_match_2eproto();
  friend void protobuf_AssignDesc_match_2eproto();
  friend void protobuf_ShutdownFile_match_2eproto();

  void InitAsDefaultInstance();
  static Match_SC_GetBoatPVPReward* default_instance_;
};
// -------------------------------------------------------------------

class Match2Battle_SendPlyData : public ::google::protobuf::Message {
 public:
  Match2Battle_SendPlyData();
  virtual ~Match2Battle_SendPlyData();

  Match2Battle_SendPlyData(const Match2Battle_SendPlyData& from);

  inline Match2Battle_SendPlyData& operator=(const Match2Battle_SendPlyData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Match2Battle_SendPlyData& default_instance();

  void Swap(Match2Battle_SendPlyData* other);

  // implements Message ----------------------------------------------

  Match2Battle_SendPlyData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Match2Battle_SendPlyData& from);
  void MergeFrom(const Match2Battle_SendPlyData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional .proto.message.BattlePlayerInfo sPlyInfo = 2;
  inline bool has_splyinfo() const;
  inline void clear_splyinfo();
  static const int kSPlyInfoFieldNumber = 2;
  inline const ::proto::message::BattlePlayerInfo& splyinfo() const;
  inline ::proto::message::BattlePlayerInfo* mutable_splyinfo();
  inline ::proto::message::BattlePlayerInfo* release_splyinfo();
  inline void set_allocated_splyinfo(::proto::message::BattlePlayerInfo* splyinfo);

  // @@protoc_insertion_point(class_scope:proto.message.Match2Battle_SendPlyData)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_splyinfo();
  inline void clear_has_splyinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::message::BattlePlayerInfo* splyinfo_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_match_2eproto();
  friend void protobuf_AssignDesc_match_2eproto();
  friend void protobuf_ShutdownFile_match_2eproto();

  void InitAsDefaultInstance();
  static Match2Battle_SendPlyData* default_instance_;
};
// -------------------------------------------------------------------

class Match2Battle_SendAllPlyData : public ::google::protobuf::Message {
 public:
  Match2Battle_SendAllPlyData();
  virtual ~Match2Battle_SendAllPlyData();

  Match2Battle_SendAllPlyData(const Match2Battle_SendAllPlyData& from);

  inline Match2Battle_SendAllPlyData& operator=(const Match2Battle_SendAllPlyData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Match2Battle_SendAllPlyData& default_instance();

  void Swap(Match2Battle_SendAllPlyData* other);

  // implements Message ----------------------------------------------

  Match2Battle_SendAllPlyData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Match2Battle_SendAllPlyData& from);
  void MergeFrom(const Match2Battle_SendAllPlyData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 mapid = 2;
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapidFieldNumber = 2;
  inline ::google::protobuf::int32 mapid() const;
  inline void set_mapid(::google::protobuf::int32 value);

  // repeated .proto.message.BattlePlayerInfo sPlyInfo = 3;
  inline int splyinfo_size() const;
  inline void clear_splyinfo();
  static const int kSPlyInfoFieldNumber = 3;
  inline const ::proto::message::BattlePlayerInfo& splyinfo(int index) const;
  inline ::proto::message::BattlePlayerInfo* mutable_splyinfo(int index);
  inline ::proto::message::BattlePlayerInfo* add_splyinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::message::BattlePlayerInfo >&
      splyinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::message::BattlePlayerInfo >*
      mutable_splyinfo();

  // @@protoc_insertion_point(class_scope:proto.message.Match2Battle_SendAllPlyData)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_mapid();
  inline void clear_has_mapid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 mapid_;
  ::google::protobuf::RepeatedPtrField< ::proto::message::BattlePlayerInfo > splyinfo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_match_2eproto();
  friend void protobuf_AssignDesc_match_2eproto();
  friend void protobuf_ShutdownFile_match_2eproto();

  void InitAsDefaultInstance();
  static Match2Battle_SendAllPlyData* default_instance_;
};
// -------------------------------------------------------------------

class Match2Game_PVPResult : public ::google::protobuf::Message {
 public:
  Match2Game_PVPResult();
  virtual ~Match2Game_PVPResult();

  Match2Game_PVPResult(const Match2Game_PVPResult& from);

  inline Match2Game_PVPResult& operator=(const Match2Game_PVPResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Match2Game_PVPResult& default_instance();

  void Swap(Match2Game_PVPResult* other);

  // implements Message ----------------------------------------------

  Match2Game_PVPResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Match2Game_PVPResult& from);
  void MergeFrom(const Match2Game_PVPResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 playerid = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  inline ::google::protobuf::uint64 playerid() const;
  inline void set_playerid(::google::protobuf::uint64 value);

  // optional uint32 usualid = 2;
  inline bool has_usualid() const;
  inline void clear_usualid();
  static const int kUsualidFieldNumber = 2;
  inline ::google::protobuf::uint32 usualid() const;
  inline void set_usualid(::google::protobuf::uint32 value);

  // optional uint64 ntime = 3;
  inline bool has_ntime() const;
  inline void clear_ntime();
  static const int kNtimeFieldNumber = 3;
  inline ::google::protobuf::uint64 ntime() const;
  inline void set_ntime(::google::protobuf::uint64 value);

  // optional uint32 result = 4;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 4;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);

  // optional uint32 killnum = 5;
  inline bool has_killnum() const;
  inline void clear_killnum();
  static const int kKillnumFieldNumber = 5;
  inline ::google::protobuf::uint32 killnum() const;
  inline void set_killnum(::google::protobuf::uint32 value);

  // repeated uint64 rival = 6;
  inline int rival_size() const;
  inline void clear_rival();
  static const int kRivalFieldNumber = 6;
  inline ::google::protobuf::uint64 rival(int index) const;
  inline void set_rival(int index, ::google::protobuf::uint64 value);
  inline void add_rival(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      rival() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_rival();

  // optional uint32 reason = 7;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 7;
  inline ::google::protobuf::uint32 reason() const;
  inline void set_reason(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Match2Game_PVPResult)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_usualid();
  inline void clear_has_usualid();
  inline void set_has_ntime();
  inline void clear_has_ntime();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_killnum();
  inline void clear_has_killnum();
  inline void set_has_reason();
  inline void clear_has_reason();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 playerid_;
  ::google::protobuf::uint64 ntime_;
  ::google::protobuf::uint32 usualid_;
  ::google::protobuf::uint32 result_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > rival_;
  ::google::protobuf::uint32 killnum_;
  ::google::protobuf::uint32 reason_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_match_2eproto();
  friend void protobuf_AssignDesc_match_2eproto();
  friend void protobuf_ShutdownFile_match_2eproto();

  void InitAsDefaultInstance();
  static Match2Game_PVPResult* default_instance_;
};
// -------------------------------------------------------------------

class Match2Game_CreateRoom : public ::google::protobuf::Message {
 public:
  Match2Game_CreateRoom();
  virtual ~Match2Game_CreateRoom();

  Match2Game_CreateRoom(const Match2Game_CreateRoom& from);

  inline Match2Game_CreateRoom& operator=(const Match2Game_CreateRoom& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Match2Game_CreateRoom& default_instance();

  void Swap(Match2Game_CreateRoom* other);

  // implements Message ----------------------------------------------

  Match2Game_CreateRoom* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Match2Game_CreateRoom& from);
  void MergeFrom(const Match2Game_CreateRoom& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional int32 roomid = 2;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 2;
  inline ::google::protobuf::int32 roomid() const;
  inline void set_roomid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Match2Game_CreateRoom)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_roomid();
  inline void clear_has_roomid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 roomid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_match_2eproto();
  friend void protobuf_AssignDesc_match_2eproto();
  friend void protobuf_ShutdownFile_match_2eproto();

  void InitAsDefaultInstance();
  static Match2Game_CreateRoom* default_instance_;
};
// -------------------------------------------------------------------

class Battle2Match_PVPResult : public ::google::protobuf::Message {
 public:
  Battle2Match_PVPResult();
  virtual ~Battle2Match_PVPResult();

  Battle2Match_PVPResult(const Battle2Match_PVPResult& from);

  inline Battle2Match_PVPResult& operator=(const Battle2Match_PVPResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Battle2Match_PVPResult& default_instance();

  void Swap(Battle2Match_PVPResult* other);

  // implements Message ----------------------------------------------

  Battle2Match_PVPResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Battle2Match_PVPResult& from);
  void MergeFrom(const Battle2Match_PVPResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 pvpid = 1;
  inline bool has_pvpid() const;
  inline void clear_pvpid();
  static const int kPvpidFieldNumber = 1;
  inline ::google::protobuf::uint32 pvpid() const;
  inline void set_pvpid(::google::protobuf::uint32 value);

  // optional uint32 winner = 2;
  inline bool has_winner() const;
  inline void clear_winner();
  static const int kWinnerFieldNumber = 2;
  inline ::google::protobuf::uint32 winner() const;
  inline void set_winner(::google::protobuf::uint32 value);

  // optional uint64 costtime = 3;
  inline bool has_costtime() const;
  inline void clear_costtime();
  static const int kCosttimeFieldNumber = 3;
  inline ::google::protobuf::uint64 costtime() const;
  inline void set_costtime(::google::protobuf::uint64 value);

  // optional uint32 reason = 4;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 4;
  inline ::google::protobuf::uint32 reason() const;
  inline void set_reason(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Battle2Match_PVPResult)
 private:
  inline void set_has_pvpid();
  inline void clear_has_pvpid();
  inline void set_has_winner();
  inline void clear_has_winner();
  inline void set_has_costtime();
  inline void clear_has_costtime();
  inline void set_has_reason();
  inline void clear_has_reason();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 pvpid_;
  ::google::protobuf::uint32 winner_;
  ::google::protobuf::uint64 costtime_;
  ::google::protobuf::uint32 reason_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_match_2eproto();
  friend void protobuf_AssignDesc_match_2eproto();
  friend void protobuf_ShutdownFile_match_2eproto();

  void InitAsDefaultInstance();
  static Battle2Match_PVPResult* default_instance_;
};
// ===================================================================


// ===================================================================

// PVPInfo

// optional int32 score = 1;
inline bool PVPInfo::has_score() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PVPInfo::set_has_score() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PVPInfo::clear_has_score() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PVPInfo::clear_score() {
  score_ = 0;
  clear_has_score();
}
inline ::google::protobuf::int32 PVPInfo::score() const {
  return score_;
}
inline void PVPInfo::set_score(::google::protobuf::int32 value) {
  set_has_score();
  score_ = value;
}

// optional int32 win_num = 2;
inline bool PVPInfo::has_win_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PVPInfo::set_has_win_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PVPInfo::clear_has_win_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PVPInfo::clear_win_num() {
  win_num_ = 0;
  clear_has_win_num();
}
inline ::google::protobuf::int32 PVPInfo::win_num() const {
  return win_num_;
}
inline void PVPInfo::set_win_num(::google::protobuf::int32 value) {
  set_has_win_num();
  win_num_ = value;
}

// optional int32 total_num = 3;
inline bool PVPInfo::has_total_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PVPInfo::set_has_total_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PVPInfo::clear_has_total_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PVPInfo::clear_total_num() {
  total_num_ = 0;
  clear_has_total_num();
}
inline ::google::protobuf::int32 PVPInfo::total_num() const {
  return total_num_;
}
inline void PVPInfo::set_total_num(::google::protobuf::int32 value) {
  set_has_total_num();
  total_num_ = value;
}

// optional int32 continue_num = 4;
inline bool PVPInfo::has_continue_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PVPInfo::set_has_continue_num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PVPInfo::clear_has_continue_num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PVPInfo::clear_continue_num() {
  continue_num_ = 0;
  clear_has_continue_num();
}
inline ::google::protobuf::int32 PVPInfo::continue_num() const {
  return continue_num_;
}
inline void PVPInfo::set_continue_num(::google::protobuf::int32 value) {
  set_has_continue_num();
  continue_num_ = value;
}

// optional int32 first_reward = 5;
inline bool PVPInfo::has_first_reward() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PVPInfo::set_has_first_reward() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PVPInfo::clear_has_first_reward() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PVPInfo::clear_first_reward() {
  first_reward_ = 0;
  clear_has_first_reward();
}
inline ::google::protobuf::int32 PVPInfo::first_reward() const {
  return first_reward_;
}
inline void PVPInfo::set_first_reward(::google::protobuf::int32 value) {
  set_has_first_reward();
  first_reward_ = value;
}

// optional int32 three_reward = 6;
inline bool PVPInfo::has_three_reward() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PVPInfo::set_has_three_reward() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PVPInfo::clear_has_three_reward() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PVPInfo::clear_three_reward() {
  three_reward_ = 0;
  clear_has_three_reward();
}
inline ::google::protobuf::int32 PVPInfo::three_reward() const {
  return three_reward_;
}
inline void PVPInfo::set_three_reward(::google::protobuf::int32 value) {
  set_has_three_reward();
  three_reward_ = value;
}

// optional int32 three_win_reward = 7;
inline bool PVPInfo::has_three_win_reward() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PVPInfo::set_has_three_win_reward() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PVPInfo::clear_has_three_win_reward() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PVPInfo::clear_three_win_reward() {
  three_win_reward_ = 0;
  clear_has_three_win_reward();
}
inline ::google::protobuf::int32 PVPInfo::three_win_reward() const {
  return three_win_reward_;
}
inline void PVPInfo::set_three_win_reward(::google::protobuf::int32 value) {
  set_has_three_win_reward();
  three_win_reward_ = value;
}

// -------------------------------------------------------------------

// ArenaInfo

// optional int32 score = 1;
inline bool ArenaInfo::has_score() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ArenaInfo::set_has_score() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ArenaInfo::clear_has_score() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ArenaInfo::clear_score() {
  score_ = 0;
  clear_has_score();
}
inline ::google::protobuf::int32 ArenaInfo::score() const {
  return score_;
}
inline void ArenaInfo::set_score(::google::protobuf::int32 value) {
  set_has_score();
  score_ = value;
}

// optional int32 stage = 2;
inline bool ArenaInfo::has_stage() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ArenaInfo::set_has_stage() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ArenaInfo::clear_has_stage() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ArenaInfo::clear_stage() {
  stage_ = 0;
  clear_has_stage();
}
inline ::google::protobuf::int32 ArenaInfo::stage() const {
  return stage_;
}
inline void ArenaInfo::set_stage(::google::protobuf::int32 value) {
  set_has_stage();
  stage_ = value;
}

// optional int32 win_num = 3;
inline bool ArenaInfo::has_win_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ArenaInfo::set_has_win_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ArenaInfo::clear_has_win_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ArenaInfo::clear_win_num() {
  win_num_ = 0;
  clear_has_win_num();
}
inline ::google::protobuf::int32 ArenaInfo::win_num() const {
  return win_num_;
}
inline void ArenaInfo::set_win_num(::google::protobuf::int32 value) {
  set_has_win_num();
  win_num_ = value;
}

// optional int32 total_num = 4;
inline bool ArenaInfo::has_total_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ArenaInfo::set_has_total_num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ArenaInfo::clear_has_total_num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ArenaInfo::clear_total_num() {
  total_num_ = 0;
  clear_has_total_num();
}
inline ::google::protobuf::int32 ArenaInfo::total_num() const {
  return total_num_;
}
inline void ArenaInfo::set_total_num(::google::protobuf::int32 value) {
  set_has_total_num();
  total_num_ = value;
}

// optional int32 continue_num = 5;
inline bool ArenaInfo::has_continue_num() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ArenaInfo::set_has_continue_num() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ArenaInfo::clear_has_continue_num() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ArenaInfo::clear_continue_num() {
  continue_num_ = 0;
  clear_has_continue_num();
}
inline ::google::protobuf::int32 ArenaInfo::continue_num() const {
  return continue_num_;
}
inline void ArenaInfo::set_continue_num(::google::protobuf::int32 value) {
  set_has_continue_num();
  continue_num_ = value;
}

// repeated int32 rewardlist = 6;
inline int ArenaInfo::rewardlist_size() const {
  return rewardlist_.size();
}
inline void ArenaInfo::clear_rewardlist() {
  rewardlist_.Clear();
}
inline ::google::protobuf::int32 ArenaInfo::rewardlist(int index) const {
  return rewardlist_.Get(index);
}
inline void ArenaInfo::set_rewardlist(int index, ::google::protobuf::int32 value) {
  rewardlist_.Set(index, value);
}
inline void ArenaInfo::add_rewardlist(::google::protobuf::int32 value) {
  rewardlist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ArenaInfo::rewardlist() const {
  return rewardlist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ArenaInfo::mutable_rewardlist() {
  return &rewardlist_;
}

// -------------------------------------------------------------------

// Match_CS_PVPMatch

// optional int32 usual_id = 1;
inline bool Match_CS_PVPMatch::has_usual_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Match_CS_PVPMatch::set_has_usual_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Match_CS_PVPMatch::clear_has_usual_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Match_CS_PVPMatch::clear_usual_id() {
  usual_id_ = 0;
  clear_has_usual_id();
}
inline ::google::protobuf::int32 Match_CS_PVPMatch::usual_id() const {
  return usual_id_;
}
inline void Match_CS_PVPMatch::set_usual_id(::google::protobuf::int32 value) {
  set_has_usual_id();
  usual_id_ = value;
}

// -------------------------------------------------------------------

// Match_SC_PVPMatch

// optional int32 result = 1;
inline bool Match_SC_PVPMatch::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Match_SC_PVPMatch::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Match_SC_PVPMatch::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Match_SC_PVPMatch::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 Match_SC_PVPMatch::result() const {
  return result_;
}
inline void Match_SC_PVPMatch::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional string ip = 2;
inline bool Match_SC_PVPMatch::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Match_SC_PVPMatch::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Match_SC_PVPMatch::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Match_SC_PVPMatch::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& Match_SC_PVPMatch::ip() const {
  return *ip_;
}
inline void Match_SC_PVPMatch::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void Match_SC_PVPMatch::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void Match_SC_PVPMatch::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Match_SC_PVPMatch::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* Match_SC_PVPMatch::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Match_SC_PVPMatch::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 port = 3;
inline bool Match_SC_PVPMatch::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Match_SC_PVPMatch::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Match_SC_PVPMatch::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Match_SC_PVPMatch::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 Match_SC_PVPMatch::port() const {
  return port_;
}
inline void Match_SC_PVPMatch::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
}

// optional uint64 charid = 4;
inline bool Match_SC_PVPMatch::has_charid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Match_SC_PVPMatch::set_has_charid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Match_SC_PVPMatch::clear_has_charid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Match_SC_PVPMatch::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 Match_SC_PVPMatch::charid() const {
  return charid_;
}
inline void Match_SC_PVPMatch::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// Match_CS_CancelPVPMatch

// -------------------------------------------------------------------

// Match_SC_CancelPVPMatch

// optional int32 result = 1;
inline bool Match_SC_CancelPVPMatch::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Match_SC_CancelPVPMatch::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Match_SC_CancelPVPMatch::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Match_SC_CancelPVPMatch::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 Match_SC_CancelPVPMatch::result() const {
  return result_;
}
inline void Match_SC_CancelPVPMatch::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// PVPRewardItem

// optional int32 id = 1;
inline bool PVPRewardItem::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PVPRewardItem::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PVPRewardItem::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PVPRewardItem::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 PVPRewardItem::id() const {
  return id_;
}
inline void PVPRewardItem::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 num = 2;
inline bool PVPRewardItem::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PVPRewardItem::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PVPRewardItem::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PVPRewardItem::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 PVPRewardItem::num() const {
  return num_;
}
inline void PVPRewardItem::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
}

// -------------------------------------------------------------------

// Match_SC_PVPResult

// optional int32 result = 1;
inline bool Match_SC_PVPResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Match_SC_PVPResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Match_SC_PVPResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Match_SC_PVPResult::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 Match_SC_PVPResult::result() const {
  return result_;
}
inline void Match_SC_PVPResult::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional int32 pass_time = 2;
inline bool Match_SC_PVPResult::has_pass_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Match_SC_PVPResult::set_has_pass_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Match_SC_PVPResult::clear_has_pass_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Match_SC_PVPResult::clear_pass_time() {
  pass_time_ = 0;
  clear_has_pass_time();
}
inline ::google::protobuf::int32 Match_SC_PVPResult::pass_time() const {
  return pass_time_;
}
inline void Match_SC_PVPResult::set_pass_time(::google::protobuf::int32 value) {
  set_has_pass_time();
  pass_time_ = value;
}

// repeated .proto.message.PVPRewardItem item_list = 3;
inline int Match_SC_PVPResult::item_list_size() const {
  return item_list_.size();
}
inline void Match_SC_PVPResult::clear_item_list() {
  item_list_.Clear();
}
inline const ::proto::message::PVPRewardItem& Match_SC_PVPResult::item_list(int index) const {
  return item_list_.Get(index);
}
inline ::proto::message::PVPRewardItem* Match_SC_PVPResult::mutable_item_list(int index) {
  return item_list_.Mutable(index);
}
inline ::proto::message::PVPRewardItem* Match_SC_PVPResult::add_item_list() {
  return item_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::message::PVPRewardItem >&
Match_SC_PVPResult::item_list() const {
  return item_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::message::PVPRewardItem >*
Match_SC_PVPResult::mutable_item_list() {
  return &item_list_;
}

// optional int32 get_score = 4;
inline bool Match_SC_PVPResult::has_get_score() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Match_SC_PVPResult::set_has_get_score() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Match_SC_PVPResult::clear_has_get_score() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Match_SC_PVPResult::clear_get_score() {
  get_score_ = 0;
  clear_has_get_score();
}
inline ::google::protobuf::int32 Match_SC_PVPResult::get_score() const {
  return get_score_;
}
inline void Match_SC_PVPResult::set_get_score(::google::protobuf::int32 value) {
  set_has_get_score();
  get_score_ = value;
}

// optional int32 usual_id = 5;
inline bool Match_SC_PVPResult::has_usual_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Match_SC_PVPResult::set_has_usual_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Match_SC_PVPResult::clear_has_usual_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Match_SC_PVPResult::clear_usual_id() {
  usual_id_ = 0;
  clear_has_usual_id();
}
inline ::google::protobuf::int32 Match_SC_PVPResult::usual_id() const {
  return usual_id_;
}
inline void Match_SC_PVPResult::set_usual_id(::google::protobuf::int32 value) {
  set_has_usual_id();
  usual_id_ = value;
}

// optional .proto.message.PVPInfo pvp_info = 6;
inline bool Match_SC_PVPResult::has_pvp_info() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Match_SC_PVPResult::set_has_pvp_info() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Match_SC_PVPResult::clear_has_pvp_info() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Match_SC_PVPResult::clear_pvp_info() {
  if (pvp_info_ != NULL) pvp_info_->::proto::message::PVPInfo::Clear();
  clear_has_pvp_info();
}
inline const ::proto::message::PVPInfo& Match_SC_PVPResult::pvp_info() const {
  return pvp_info_ != NULL ? *pvp_info_ : *default_instance_->pvp_info_;
}
inline ::proto::message::PVPInfo* Match_SC_PVPResult::mutable_pvp_info() {
  set_has_pvp_info();
  if (pvp_info_ == NULL) pvp_info_ = new ::proto::message::PVPInfo;
  return pvp_info_;
}
inline ::proto::message::PVPInfo* Match_SC_PVPResult::release_pvp_info() {
  clear_has_pvp_info();
  ::proto::message::PVPInfo* temp = pvp_info_;
  pvp_info_ = NULL;
  return temp;
}
inline void Match_SC_PVPResult::set_allocated_pvp_info(::proto::message::PVPInfo* pvp_info) {
  delete pvp_info_;
  pvp_info_ = pvp_info;
  if (pvp_info) {
    set_has_pvp_info();
  } else {
    clear_has_pvp_info();
  }
}

// -------------------------------------------------------------------

// Match_SC_ArenaResult

// optional int32 result = 1;
inline bool Match_SC_ArenaResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Match_SC_ArenaResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Match_SC_ArenaResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Match_SC_ArenaResult::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 Match_SC_ArenaResult::result() const {
  return result_;
}
inline void Match_SC_ArenaResult::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional int32 pass_time = 2;
inline bool Match_SC_ArenaResult::has_pass_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Match_SC_ArenaResult::set_has_pass_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Match_SC_ArenaResult::clear_has_pass_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Match_SC_ArenaResult::clear_pass_time() {
  pass_time_ = 0;
  clear_has_pass_time();
}
inline ::google::protobuf::int32 Match_SC_ArenaResult::pass_time() const {
  return pass_time_;
}
inline void Match_SC_ArenaResult::set_pass_time(::google::protobuf::int32 value) {
  set_has_pass_time();
  pass_time_ = value;
}

// repeated .proto.message.PVPRewardItem item_list = 3;
inline int Match_SC_ArenaResult::item_list_size() const {
  return item_list_.size();
}
inline void Match_SC_ArenaResult::clear_item_list() {
  item_list_.Clear();
}
inline const ::proto::message::PVPRewardItem& Match_SC_ArenaResult::item_list(int index) const {
  return item_list_.Get(index);
}
inline ::proto::message::PVPRewardItem* Match_SC_ArenaResult::mutable_item_list(int index) {
  return item_list_.Mutable(index);
}
inline ::proto::message::PVPRewardItem* Match_SC_ArenaResult::add_item_list() {
  return item_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::message::PVPRewardItem >&
Match_SC_ArenaResult::item_list() const {
  return item_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::message::PVPRewardItem >*
Match_SC_ArenaResult::mutable_item_list() {
  return &item_list_;
}

// optional int32 get_score = 4;
inline bool Match_SC_ArenaResult::has_get_score() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Match_SC_ArenaResult::set_has_get_score() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Match_SC_ArenaResult::clear_has_get_score() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Match_SC_ArenaResult::clear_get_score() {
  get_score_ = 0;
  clear_has_get_score();
}
inline ::google::protobuf::int32 Match_SC_ArenaResult::get_score() const {
  return get_score_;
}
inline void Match_SC_ArenaResult::set_get_score(::google::protobuf::int32 value) {
  set_has_get_score();
  get_score_ = value;
}

// optional int32 usual_id = 5;
inline bool Match_SC_ArenaResult::has_usual_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Match_SC_ArenaResult::set_has_usual_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Match_SC_ArenaResult::clear_has_usual_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Match_SC_ArenaResult::clear_usual_id() {
  usual_id_ = 0;
  clear_has_usual_id();
}
inline ::google::protobuf::int32 Match_SC_ArenaResult::usual_id() const {
  return usual_id_;
}
inline void Match_SC_ArenaResult::set_usual_id(::google::protobuf::int32 value) {
  set_has_usual_id();
  usual_id_ = value;
}

// optional .proto.message.ArenaInfo arena_info = 6;
inline bool Match_SC_ArenaResult::has_arena_info() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Match_SC_ArenaResult::set_has_arena_info() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Match_SC_ArenaResult::clear_has_arena_info() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Match_SC_ArenaResult::clear_arena_info() {
  if (arena_info_ != NULL) arena_info_->::proto::message::ArenaInfo::Clear();
  clear_has_arena_info();
}
inline const ::proto::message::ArenaInfo& Match_SC_ArenaResult::arena_info() const {
  return arena_info_ != NULL ? *arena_info_ : *default_instance_->arena_info_;
}
inline ::proto::message::ArenaInfo* Match_SC_ArenaResult::mutable_arena_info() {
  set_has_arena_info();
  if (arena_info_ == NULL) arena_info_ = new ::proto::message::ArenaInfo;
  return arena_info_;
}
inline ::proto::message::ArenaInfo* Match_SC_ArenaResult::release_arena_info() {
  clear_has_arena_info();
  ::proto::message::ArenaInfo* temp = arena_info_;
  arena_info_ = NULL;
  return temp;
}
inline void Match_SC_ArenaResult::set_allocated_arena_info(::proto::message::ArenaInfo* arena_info) {
  delete arena_info_;
  arena_info_ = arena_info;
  if (arena_info) {
    set_has_arena_info();
  } else {
    clear_has_arena_info();
  }
}

// optional uint32 reason = 7;
inline bool Match_SC_ArenaResult::has_reason() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Match_SC_ArenaResult::set_has_reason() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Match_SC_ArenaResult::clear_has_reason() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Match_SC_ArenaResult::clear_reason() {
  reason_ = 0u;
  clear_has_reason();
}
inline ::google::protobuf::uint32 Match_SC_ArenaResult::reason() const {
  return reason_;
}
inline void Match_SC_ArenaResult::set_reason(::google::protobuf::uint32 value) {
  set_has_reason();
  reason_ = value;
}

// -------------------------------------------------------------------

// Match_SC_ContinueWinNum

// optional uint64 charid = 1;
inline bool Match_SC_ContinueWinNum::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Match_SC_ContinueWinNum::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Match_SC_ContinueWinNum::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Match_SC_ContinueWinNum::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 Match_SC_ContinueWinNum::charid() const {
  return charid_;
}
inline void Match_SC_ContinueWinNum::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
}

// optional string name = 2;
inline bool Match_SC_ContinueWinNum::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Match_SC_ContinueWinNum::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Match_SC_ContinueWinNum::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Match_SC_ContinueWinNum::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Match_SC_ContinueWinNum::name() const {
  return *name_;
}
inline void Match_SC_ContinueWinNum::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Match_SC_ContinueWinNum::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Match_SC_ContinueWinNum::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Match_SC_ContinueWinNum::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Match_SC_ContinueWinNum::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Match_SC_ContinueWinNum::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 win_num = 3;
inline bool Match_SC_ContinueWinNum::has_win_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Match_SC_ContinueWinNum::set_has_win_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Match_SC_ContinueWinNum::clear_has_win_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Match_SC_ContinueWinNum::clear_win_num() {
  win_num_ = 0;
  clear_has_win_num();
}
inline ::google::protobuf::int32 Match_SC_ContinueWinNum::win_num() const {
  return win_num_;
}
inline void Match_SC_ContinueWinNum::set_win_num(::google::protobuf::int32 value) {
  set_has_win_num();
  win_num_ = value;
}

// optional int32 usual_id = 4;
inline bool Match_SC_ContinueWinNum::has_usual_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Match_SC_ContinueWinNum::set_has_usual_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Match_SC_ContinueWinNum::clear_has_usual_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Match_SC_ContinueWinNum::clear_usual_id() {
  usual_id_ = 0;
  clear_has_usual_id();
}
inline ::google::protobuf::int32 Match_SC_ContinueWinNum::usual_id() const {
  return usual_id_;
}
inline void Match_SC_ContinueWinNum::set_usual_id(::google::protobuf::int32 value) {
  set_has_usual_id();
  usual_id_ = value;
}

// -------------------------------------------------------------------

// Match_SC_ArenaMatchResult

// optional int32 result = 1;
inline bool Match_SC_ArenaMatchResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Match_SC_ArenaMatchResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Match_SC_ArenaMatchResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Match_SC_ArenaMatchResult::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 Match_SC_ArenaMatchResult::result() const {
  return result_;
}
inline void Match_SC_ArenaMatchResult::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional string ip = 2;
inline bool Match_SC_ArenaMatchResult::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Match_SC_ArenaMatchResult::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Match_SC_ArenaMatchResult::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Match_SC_ArenaMatchResult::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& Match_SC_ArenaMatchResult::ip() const {
  return *ip_;
}
inline void Match_SC_ArenaMatchResult::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void Match_SC_ArenaMatchResult::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void Match_SC_ArenaMatchResult::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Match_SC_ArenaMatchResult::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* Match_SC_ArenaMatchResult::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Match_SC_ArenaMatchResult::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 port = 3;
inline bool Match_SC_ArenaMatchResult::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Match_SC_ArenaMatchResult::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Match_SC_ArenaMatchResult::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Match_SC_ArenaMatchResult::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 Match_SC_ArenaMatchResult::port() const {
  return port_;
}
inline void Match_SC_ArenaMatchResult::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
}

// optional uint64 charid = 4;
inline bool Match_SC_ArenaMatchResult::has_charid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Match_SC_ArenaMatchResult::set_has_charid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Match_SC_ArenaMatchResult::clear_has_charid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Match_SC_ArenaMatchResult::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 Match_SC_ArenaMatchResult::charid() const {
  return charid_;
}
inline void Match_SC_ArenaMatchResult::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
}

// optional string name = 5;
inline bool Match_SC_ArenaMatchResult::has_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Match_SC_ArenaMatchResult::set_has_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Match_SC_ArenaMatchResult::clear_has_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Match_SC_ArenaMatchResult::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Match_SC_ArenaMatchResult::name() const {
  return *name_;
}
inline void Match_SC_ArenaMatchResult::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Match_SC_ArenaMatchResult::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Match_SC_ArenaMatchResult::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Match_SC_ArenaMatchResult::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Match_SC_ArenaMatchResult::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Match_SC_ArenaMatchResult::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 career = 6;
inline bool Match_SC_ArenaMatchResult::has_career() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Match_SC_ArenaMatchResult::set_has_career() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Match_SC_ArenaMatchResult::clear_has_career() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Match_SC_ArenaMatchResult::clear_career() {
  career_ = 0;
  clear_has_career();
}
inline ::google::protobuf::int32 Match_SC_ArenaMatchResult::career() const {
  return career_;
}
inline void Match_SC_ArenaMatchResult::set_career(::google::protobuf::int32 value) {
  set_has_career();
  career_ = value;
}

// optional int32 level = 7;
inline bool Match_SC_ArenaMatchResult::has_level() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Match_SC_ArenaMatchResult::set_has_level() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Match_SC_ArenaMatchResult::clear_has_level() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Match_SC_ArenaMatchResult::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 Match_SC_ArenaMatchResult::level() const {
  return level_;
}
inline void Match_SC_ArenaMatchResult::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional string guild_name = 8;
inline bool Match_SC_ArenaMatchResult::has_guild_name() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Match_SC_ArenaMatchResult::set_has_guild_name() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Match_SC_ArenaMatchResult::clear_has_guild_name() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Match_SC_ArenaMatchResult::clear_guild_name() {
  if (guild_name_ != &::google::protobuf::internal::kEmptyString) {
    guild_name_->clear();
  }
  clear_has_guild_name();
}
inline const ::std::string& Match_SC_ArenaMatchResult::guild_name() const {
  return *guild_name_;
}
inline void Match_SC_ArenaMatchResult::set_guild_name(const ::std::string& value) {
  set_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::kEmptyString) {
    guild_name_ = new ::std::string;
  }
  guild_name_->assign(value);
}
inline void Match_SC_ArenaMatchResult::set_guild_name(const char* value) {
  set_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::kEmptyString) {
    guild_name_ = new ::std::string;
  }
  guild_name_->assign(value);
}
inline void Match_SC_ArenaMatchResult::set_guild_name(const char* value, size_t size) {
  set_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::kEmptyString) {
    guild_name_ = new ::std::string;
  }
  guild_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Match_SC_ArenaMatchResult::mutable_guild_name() {
  set_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::kEmptyString) {
    guild_name_ = new ::std::string;
  }
  return guild_name_;
}
inline ::std::string* Match_SC_ArenaMatchResult::release_guild_name() {
  clear_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = guild_name_;
    guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Match_SC_ArenaMatchResult::set_allocated_guild_name(::std::string* guild_name) {
  if (guild_name_ != &::google::protobuf::internal::kEmptyString) {
    delete guild_name_;
  }
  if (guild_name) {
    set_has_guild_name();
    guild_name_ = guild_name;
  } else {
    clear_has_guild_name();
    guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 score = 9;
inline bool Match_SC_ArenaMatchResult::has_score() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Match_SC_ArenaMatchResult::set_has_score() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Match_SC_ArenaMatchResult::clear_has_score() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Match_SC_ArenaMatchResult::clear_score() {
  score_ = 0;
  clear_has_score();
}
inline ::google::protobuf::int32 Match_SC_ArenaMatchResult::score() const {
  return score_;
}
inline void Match_SC_ArenaMatchResult::set_score(::google::protobuf::int32 value) {
  set_has_score();
  score_ = value;
}

// optional uint32 dhlev = 10;
inline bool Match_SC_ArenaMatchResult::has_dhlev() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Match_SC_ArenaMatchResult::set_has_dhlev() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Match_SC_ArenaMatchResult::clear_has_dhlev() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Match_SC_ArenaMatchResult::clear_dhlev() {
  dhlev_ = 0u;
  clear_has_dhlev();
}
inline ::google::protobuf::uint32 Match_SC_ArenaMatchResult::dhlev() const {
  return dhlev_;
}
inline void Match_SC_ArenaMatchResult::set_dhlev(::google::protobuf::uint32 value) {
  set_has_dhlev();
  dhlev_ = value;
}

// -------------------------------------------------------------------

// Match_SC_NotifyOtherMatch

// -------------------------------------------------------------------

// Match_CS_GetPVPInfo

// optional int32 usual_id = 1;
inline bool Match_CS_GetPVPInfo::has_usual_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Match_CS_GetPVPInfo::set_has_usual_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Match_CS_GetPVPInfo::clear_has_usual_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Match_CS_GetPVPInfo::clear_usual_id() {
  usual_id_ = 0;
  clear_has_usual_id();
}
inline ::google::protobuf::int32 Match_CS_GetPVPInfo::usual_id() const {
  return usual_id_;
}
inline void Match_CS_GetPVPInfo::set_usual_id(::google::protobuf::int32 value) {
  set_has_usual_id();
  usual_id_ = value;
}

// -------------------------------------------------------------------

// Match_SC_GetPVPInfo

// optional int32 result = 1;
inline bool Match_SC_GetPVPInfo::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Match_SC_GetPVPInfo::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Match_SC_GetPVPInfo::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Match_SC_GetPVPInfo::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 Match_SC_GetPVPInfo::result() const {
  return result_;
}
inline void Match_SC_GetPVPInfo::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional int32 usual_id = 2;
inline bool Match_SC_GetPVPInfo::has_usual_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Match_SC_GetPVPInfo::set_has_usual_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Match_SC_GetPVPInfo::clear_has_usual_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Match_SC_GetPVPInfo::clear_usual_id() {
  usual_id_ = 0;
  clear_has_usual_id();
}
inline ::google::protobuf::int32 Match_SC_GetPVPInfo::usual_id() const {
  return usual_id_;
}
inline void Match_SC_GetPVPInfo::set_usual_id(::google::protobuf::int32 value) {
  set_has_usual_id();
  usual_id_ = value;
}

// optional int32 remain_time = 3;
inline bool Match_SC_GetPVPInfo::has_remain_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Match_SC_GetPVPInfo::set_has_remain_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Match_SC_GetPVPInfo::clear_has_remain_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Match_SC_GetPVPInfo::clear_remain_time() {
  remain_time_ = 0;
  clear_has_remain_time();
}
inline ::google::protobuf::int32 Match_SC_GetPVPInfo::remain_time() const {
  return remain_time_;
}
inline void Match_SC_GetPVPInfo::set_remain_time(::google::protobuf::int32 value) {
  set_has_remain_time();
  remain_time_ = value;
}

// optional .proto.message.PVPInfo pvp_info = 4;
inline bool Match_SC_GetPVPInfo::has_pvp_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Match_SC_GetPVPInfo::set_has_pvp_info() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Match_SC_GetPVPInfo::clear_has_pvp_info() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Match_SC_GetPVPInfo::clear_pvp_info() {
  if (pvp_info_ != NULL) pvp_info_->::proto::message::PVPInfo::Clear();
  clear_has_pvp_info();
}
inline const ::proto::message::PVPInfo& Match_SC_GetPVPInfo::pvp_info() const {
  return pvp_info_ != NULL ? *pvp_info_ : *default_instance_->pvp_info_;
}
inline ::proto::message::PVPInfo* Match_SC_GetPVPInfo::mutable_pvp_info() {
  set_has_pvp_info();
  if (pvp_info_ == NULL) pvp_info_ = new ::proto::message::PVPInfo;
  return pvp_info_;
}
inline ::proto::message::PVPInfo* Match_SC_GetPVPInfo::release_pvp_info() {
  clear_has_pvp_info();
  ::proto::message::PVPInfo* temp = pvp_info_;
  pvp_info_ = NULL;
  return temp;
}
inline void Match_SC_GetPVPInfo::set_allocated_pvp_info(::proto::message::PVPInfo* pvp_info) {
  delete pvp_info_;
  pvp_info_ = pvp_info;
  if (pvp_info) {
    set_has_pvp_info();
  } else {
    clear_has_pvp_info();
  }
}

// -------------------------------------------------------------------

// Match_CS_GetPVPReward

// optional int32 batt_id = 1;
inline bool Match_CS_GetPVPReward::has_batt_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Match_CS_GetPVPReward::set_has_batt_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Match_CS_GetPVPReward::clear_has_batt_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Match_CS_GetPVPReward::clear_batt_id() {
  batt_id_ = 0;
  clear_has_batt_id();
}
inline ::google::protobuf::int32 Match_CS_GetPVPReward::batt_id() const {
  return batt_id_;
}
inline void Match_CS_GetPVPReward::set_batt_id(::google::protobuf::int32 value) {
  set_has_batt_id();
  batt_id_ = value;
}

// optional int32 reward_type = 2;
inline bool Match_CS_GetPVPReward::has_reward_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Match_CS_GetPVPReward::set_has_reward_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Match_CS_GetPVPReward::clear_has_reward_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Match_CS_GetPVPReward::clear_reward_type() {
  reward_type_ = 0;
  clear_has_reward_type();
}
inline ::google::protobuf::int32 Match_CS_GetPVPReward::reward_type() const {
  return reward_type_;
}
inline void Match_CS_GetPVPReward::set_reward_type(::google::protobuf::int32 value) {
  set_has_reward_type();
  reward_type_ = value;
}

// -------------------------------------------------------------------

// Match_SC_GetPVPReward

// optional int32 result = 1;
inline bool Match_SC_GetPVPReward::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Match_SC_GetPVPReward::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Match_SC_GetPVPReward::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Match_SC_GetPVPReward::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 Match_SC_GetPVPReward::result() const {
  return result_;
}
inline void Match_SC_GetPVPReward::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional int32 reward_type = 2;
inline bool Match_SC_GetPVPReward::has_reward_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Match_SC_GetPVPReward::set_has_reward_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Match_SC_GetPVPReward::clear_has_reward_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Match_SC_GetPVPReward::clear_reward_type() {
  reward_type_ = 0;
  clear_has_reward_type();
}
inline ::google::protobuf::int32 Match_SC_GetPVPReward::reward_type() const {
  return reward_type_;
}
inline void Match_SC_GetPVPReward::set_reward_type(::google::protobuf::int32 value) {
  set_has_reward_type();
  reward_type_ = value;
}

// -------------------------------------------------------------------

// Match_CS_GetArenaInfo

// optional int32 usual_id = 1;
inline bool Match_CS_GetArenaInfo::has_usual_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Match_CS_GetArenaInfo::set_has_usual_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Match_CS_GetArenaInfo::clear_has_usual_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Match_CS_GetArenaInfo::clear_usual_id() {
  usual_id_ = 0;
  clear_has_usual_id();
}
inline ::google::protobuf::int32 Match_CS_GetArenaInfo::usual_id() const {
  return usual_id_;
}
inline void Match_CS_GetArenaInfo::set_usual_id(::google::protobuf::int32 value) {
  set_has_usual_id();
  usual_id_ = value;
}

// -------------------------------------------------------------------

// Match_SC_GetArenaInfo

// optional int32 result = 1;
inline bool Match_SC_GetArenaInfo::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Match_SC_GetArenaInfo::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Match_SC_GetArenaInfo::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Match_SC_GetArenaInfo::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 Match_SC_GetArenaInfo::result() const {
  return result_;
}
inline void Match_SC_GetArenaInfo::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional int32 usual_id = 2;
inline bool Match_SC_GetArenaInfo::has_usual_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Match_SC_GetArenaInfo::set_has_usual_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Match_SC_GetArenaInfo::clear_has_usual_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Match_SC_GetArenaInfo::clear_usual_id() {
  usual_id_ = 0;
  clear_has_usual_id();
}
inline ::google::protobuf::int32 Match_SC_GetArenaInfo::usual_id() const {
  return usual_id_;
}
inline void Match_SC_GetArenaInfo::set_usual_id(::google::protobuf::int32 value) {
  set_has_usual_id();
  usual_id_ = value;
}

// optional int32 remain_time = 3;
inline bool Match_SC_GetArenaInfo::has_remain_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Match_SC_GetArenaInfo::set_has_remain_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Match_SC_GetArenaInfo::clear_has_remain_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Match_SC_GetArenaInfo::clear_remain_time() {
  remain_time_ = 0;
  clear_has_remain_time();
}
inline ::google::protobuf::int32 Match_SC_GetArenaInfo::remain_time() const {
  return remain_time_;
}
inline void Match_SC_GetArenaInfo::set_remain_time(::google::protobuf::int32 value) {
  set_has_remain_time();
  remain_time_ = value;
}

// optional .proto.message.ArenaInfo arena_info = 4;
inline bool Match_SC_GetArenaInfo::has_arena_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Match_SC_GetArenaInfo::set_has_arena_info() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Match_SC_GetArenaInfo::clear_has_arena_info() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Match_SC_GetArenaInfo::clear_arena_info() {
  if (arena_info_ != NULL) arena_info_->::proto::message::ArenaInfo::Clear();
  clear_has_arena_info();
}
inline const ::proto::message::ArenaInfo& Match_SC_GetArenaInfo::arena_info() const {
  return arena_info_ != NULL ? *arena_info_ : *default_instance_->arena_info_;
}
inline ::proto::message::ArenaInfo* Match_SC_GetArenaInfo::mutable_arena_info() {
  set_has_arena_info();
  if (arena_info_ == NULL) arena_info_ = new ::proto::message::ArenaInfo;
  return arena_info_;
}
inline ::proto::message::ArenaInfo* Match_SC_GetArenaInfo::release_arena_info() {
  clear_has_arena_info();
  ::proto::message::ArenaInfo* temp = arena_info_;
  arena_info_ = NULL;
  return temp;
}
inline void Match_SC_GetArenaInfo::set_allocated_arena_info(::proto::message::ArenaInfo* arena_info) {
  delete arena_info_;
  arena_info_ = arena_info;
  if (arena_info) {
    set_has_arena_info();
  } else {
    clear_has_arena_info();
  }
}

// -------------------------------------------------------------------

// Match_CS_GetArenaReward

// optional uint32 rewardid = 1;
inline bool Match_CS_GetArenaReward::has_rewardid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Match_CS_GetArenaReward::set_has_rewardid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Match_CS_GetArenaReward::clear_has_rewardid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Match_CS_GetArenaReward::clear_rewardid() {
  rewardid_ = 0u;
  clear_has_rewardid();
}
inline ::google::protobuf::uint32 Match_CS_GetArenaReward::rewardid() const {
  return rewardid_;
}
inline void Match_CS_GetArenaReward::set_rewardid(::google::protobuf::uint32 value) {
  set_has_rewardid();
  rewardid_ = value;
}

// -------------------------------------------------------------------

// Match_SC_GetArenaReward

// optional int32 result = 1;
inline bool Match_SC_GetArenaReward::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Match_SC_GetArenaReward::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Match_SC_GetArenaReward::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Match_SC_GetArenaReward::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 Match_SC_GetArenaReward::result() const {
  return result_;
}
inline void Match_SC_GetArenaReward::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional int32 rewardid = 2;
inline bool Match_SC_GetArenaReward::has_rewardid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Match_SC_GetArenaReward::set_has_rewardid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Match_SC_GetArenaReward::clear_has_rewardid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Match_SC_GetArenaReward::clear_rewardid() {
  rewardid_ = 0;
  clear_has_rewardid();
}
inline ::google::protobuf::int32 Match_SC_GetArenaReward::rewardid() const {
  return rewardid_;
}
inline void Match_SC_GetArenaReward::set_rewardid(::google::protobuf::int32 value) {
  set_has_rewardid();
  rewardid_ = value;
}

// -------------------------------------------------------------------

// Match_CS_GetBoatPVPInfo

// optional int32 usual_id = 1;
inline bool Match_CS_GetBoatPVPInfo::has_usual_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Match_CS_GetBoatPVPInfo::set_has_usual_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Match_CS_GetBoatPVPInfo::clear_has_usual_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Match_CS_GetBoatPVPInfo::clear_usual_id() {
  usual_id_ = 0;
  clear_has_usual_id();
}
inline ::google::protobuf::int32 Match_CS_GetBoatPVPInfo::usual_id() const {
  return usual_id_;
}
inline void Match_CS_GetBoatPVPInfo::set_usual_id(::google::protobuf::int32 value) {
  set_has_usual_id();
  usual_id_ = value;
}

// -------------------------------------------------------------------

// Match_SC_GetBoatPVPInfo

// optional int32 result = 1;
inline bool Match_SC_GetBoatPVPInfo::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Match_SC_GetBoatPVPInfo::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Match_SC_GetBoatPVPInfo::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Match_SC_GetBoatPVPInfo::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 Match_SC_GetBoatPVPInfo::result() const {
  return result_;
}
inline void Match_SC_GetBoatPVPInfo::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional int32 usual_id = 2;
inline bool Match_SC_GetBoatPVPInfo::has_usual_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Match_SC_GetBoatPVPInfo::set_has_usual_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Match_SC_GetBoatPVPInfo::clear_has_usual_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Match_SC_GetBoatPVPInfo::clear_usual_id() {
  usual_id_ = 0;
  clear_has_usual_id();
}
inline ::google::protobuf::int32 Match_SC_GetBoatPVPInfo::usual_id() const {
  return usual_id_;
}
inline void Match_SC_GetBoatPVPInfo::set_usual_id(::google::protobuf::int32 value) {
  set_has_usual_id();
  usual_id_ = value;
}

// optional int32 remain_time = 3;
inline bool Match_SC_GetBoatPVPInfo::has_remain_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Match_SC_GetBoatPVPInfo::set_has_remain_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Match_SC_GetBoatPVPInfo::clear_has_remain_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Match_SC_GetBoatPVPInfo::clear_remain_time() {
  remain_time_ = 0;
  clear_has_remain_time();
}
inline ::google::protobuf::int32 Match_SC_GetBoatPVPInfo::remain_time() const {
  return remain_time_;
}
inline void Match_SC_GetBoatPVPInfo::set_remain_time(::google::protobuf::int32 value) {
  set_has_remain_time();
  remain_time_ = value;
}

// optional .proto.message.PVPInfo boat_pvp_info = 4;
inline bool Match_SC_GetBoatPVPInfo::has_boat_pvp_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Match_SC_GetBoatPVPInfo::set_has_boat_pvp_info() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Match_SC_GetBoatPVPInfo::clear_has_boat_pvp_info() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Match_SC_GetBoatPVPInfo::clear_boat_pvp_info() {
  if (boat_pvp_info_ != NULL) boat_pvp_info_->::proto::message::PVPInfo::Clear();
  clear_has_boat_pvp_info();
}
inline const ::proto::message::PVPInfo& Match_SC_GetBoatPVPInfo::boat_pvp_info() const {
  return boat_pvp_info_ != NULL ? *boat_pvp_info_ : *default_instance_->boat_pvp_info_;
}
inline ::proto::message::PVPInfo* Match_SC_GetBoatPVPInfo::mutable_boat_pvp_info() {
  set_has_boat_pvp_info();
  if (boat_pvp_info_ == NULL) boat_pvp_info_ = new ::proto::message::PVPInfo;
  return boat_pvp_info_;
}
inline ::proto::message::PVPInfo* Match_SC_GetBoatPVPInfo::release_boat_pvp_info() {
  clear_has_boat_pvp_info();
  ::proto::message::PVPInfo* temp = boat_pvp_info_;
  boat_pvp_info_ = NULL;
  return temp;
}
inline void Match_SC_GetBoatPVPInfo::set_allocated_boat_pvp_info(::proto::message::PVPInfo* boat_pvp_info) {
  delete boat_pvp_info_;
  boat_pvp_info_ = boat_pvp_info;
  if (boat_pvp_info) {
    set_has_boat_pvp_info();
  } else {
    clear_has_boat_pvp_info();
  }
}

// -------------------------------------------------------------------

// Match_CS_GetBoatPVPReward

// optional int32 reward_type = 1;
inline bool Match_CS_GetBoatPVPReward::has_reward_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Match_CS_GetBoatPVPReward::set_has_reward_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Match_CS_GetBoatPVPReward::clear_has_reward_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Match_CS_GetBoatPVPReward::clear_reward_type() {
  reward_type_ = 0;
  clear_has_reward_type();
}
inline ::google::protobuf::int32 Match_CS_GetBoatPVPReward::reward_type() const {
  return reward_type_;
}
inline void Match_CS_GetBoatPVPReward::set_reward_type(::google::protobuf::int32 value) {
  set_has_reward_type();
  reward_type_ = value;
}

// -------------------------------------------------------------------

// Match_SC_GetBoatPVPReward

// optional int32 result = 1;
inline bool Match_SC_GetBoatPVPReward::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Match_SC_GetBoatPVPReward::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Match_SC_GetBoatPVPReward::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Match_SC_GetBoatPVPReward::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 Match_SC_GetBoatPVPReward::result() const {
  return result_;
}
inline void Match_SC_GetBoatPVPReward::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional int32 reward_type = 2;
inline bool Match_SC_GetBoatPVPReward::has_reward_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Match_SC_GetBoatPVPReward::set_has_reward_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Match_SC_GetBoatPVPReward::clear_has_reward_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Match_SC_GetBoatPVPReward::clear_reward_type() {
  reward_type_ = 0;
  clear_has_reward_type();
}
inline ::google::protobuf::int32 Match_SC_GetBoatPVPReward::reward_type() const {
  return reward_type_;
}
inline void Match_SC_GetBoatPVPReward::set_reward_type(::google::protobuf::int32 value) {
  set_has_reward_type();
  reward_type_ = value;
}

// -------------------------------------------------------------------

// Match2Battle_SendPlyData

// optional int32 id = 1;
inline bool Match2Battle_SendPlyData::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Match2Battle_SendPlyData::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Match2Battle_SendPlyData::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Match2Battle_SendPlyData::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Match2Battle_SendPlyData::id() const {
  return id_;
}
inline void Match2Battle_SendPlyData::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional .proto.message.BattlePlayerInfo sPlyInfo = 2;
inline bool Match2Battle_SendPlyData::has_splyinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Match2Battle_SendPlyData::set_has_splyinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Match2Battle_SendPlyData::clear_has_splyinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Match2Battle_SendPlyData::clear_splyinfo() {
  if (splyinfo_ != NULL) splyinfo_->::proto::message::BattlePlayerInfo::Clear();
  clear_has_splyinfo();
}
inline const ::proto::message::BattlePlayerInfo& Match2Battle_SendPlyData::splyinfo() const {
  return splyinfo_ != NULL ? *splyinfo_ : *default_instance_->splyinfo_;
}
inline ::proto::message::BattlePlayerInfo* Match2Battle_SendPlyData::mutable_splyinfo() {
  set_has_splyinfo();
  if (splyinfo_ == NULL) splyinfo_ = new ::proto::message::BattlePlayerInfo;
  return splyinfo_;
}
inline ::proto::message::BattlePlayerInfo* Match2Battle_SendPlyData::release_splyinfo() {
  clear_has_splyinfo();
  ::proto::message::BattlePlayerInfo* temp = splyinfo_;
  splyinfo_ = NULL;
  return temp;
}
inline void Match2Battle_SendPlyData::set_allocated_splyinfo(::proto::message::BattlePlayerInfo* splyinfo) {
  delete splyinfo_;
  splyinfo_ = splyinfo;
  if (splyinfo) {
    set_has_splyinfo();
  } else {
    clear_has_splyinfo();
  }
}

// -------------------------------------------------------------------

// Match2Battle_SendAllPlyData

// optional int32 id = 1;
inline bool Match2Battle_SendAllPlyData::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Match2Battle_SendAllPlyData::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Match2Battle_SendAllPlyData::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Match2Battle_SendAllPlyData::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Match2Battle_SendAllPlyData::id() const {
  return id_;
}
inline void Match2Battle_SendAllPlyData::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 mapid = 2;
inline bool Match2Battle_SendAllPlyData::has_mapid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Match2Battle_SendAllPlyData::set_has_mapid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Match2Battle_SendAllPlyData::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Match2Battle_SendAllPlyData::clear_mapid() {
  mapid_ = 0;
  clear_has_mapid();
}
inline ::google::protobuf::int32 Match2Battle_SendAllPlyData::mapid() const {
  return mapid_;
}
inline void Match2Battle_SendAllPlyData::set_mapid(::google::protobuf::int32 value) {
  set_has_mapid();
  mapid_ = value;
}

// repeated .proto.message.BattlePlayerInfo sPlyInfo = 3;
inline int Match2Battle_SendAllPlyData::splyinfo_size() const {
  return splyinfo_.size();
}
inline void Match2Battle_SendAllPlyData::clear_splyinfo() {
  splyinfo_.Clear();
}
inline const ::proto::message::BattlePlayerInfo& Match2Battle_SendAllPlyData::splyinfo(int index) const {
  return splyinfo_.Get(index);
}
inline ::proto::message::BattlePlayerInfo* Match2Battle_SendAllPlyData::mutable_splyinfo(int index) {
  return splyinfo_.Mutable(index);
}
inline ::proto::message::BattlePlayerInfo* Match2Battle_SendAllPlyData::add_splyinfo() {
  return splyinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::message::BattlePlayerInfo >&
Match2Battle_SendAllPlyData::splyinfo() const {
  return splyinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::message::BattlePlayerInfo >*
Match2Battle_SendAllPlyData::mutable_splyinfo() {
  return &splyinfo_;
}

// -------------------------------------------------------------------

// Match2Game_PVPResult

// optional uint64 playerid = 1;
inline bool Match2Game_PVPResult::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Match2Game_PVPResult::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Match2Game_PVPResult::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Match2Game_PVPResult::clear_playerid() {
  playerid_ = GOOGLE_ULONGLONG(0);
  clear_has_playerid();
}
inline ::google::protobuf::uint64 Match2Game_PVPResult::playerid() const {
  return playerid_;
}
inline void Match2Game_PVPResult::set_playerid(::google::protobuf::uint64 value) {
  set_has_playerid();
  playerid_ = value;
}

// optional uint32 usualid = 2;
inline bool Match2Game_PVPResult::has_usualid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Match2Game_PVPResult::set_has_usualid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Match2Game_PVPResult::clear_has_usualid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Match2Game_PVPResult::clear_usualid() {
  usualid_ = 0u;
  clear_has_usualid();
}
inline ::google::protobuf::uint32 Match2Game_PVPResult::usualid() const {
  return usualid_;
}
inline void Match2Game_PVPResult::set_usualid(::google::protobuf::uint32 value) {
  set_has_usualid();
  usualid_ = value;
}

// optional uint64 ntime = 3;
inline bool Match2Game_PVPResult::has_ntime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Match2Game_PVPResult::set_has_ntime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Match2Game_PVPResult::clear_has_ntime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Match2Game_PVPResult::clear_ntime() {
  ntime_ = GOOGLE_ULONGLONG(0);
  clear_has_ntime();
}
inline ::google::protobuf::uint64 Match2Game_PVPResult::ntime() const {
  return ntime_;
}
inline void Match2Game_PVPResult::set_ntime(::google::protobuf::uint64 value) {
  set_has_ntime();
  ntime_ = value;
}

// optional uint32 result = 4;
inline bool Match2Game_PVPResult::has_result() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Match2Game_PVPResult::set_has_result() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Match2Game_PVPResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Match2Game_PVPResult::clear_result() {
  result_ = 0u;
  clear_has_result();
}
inline ::google::protobuf::uint32 Match2Game_PVPResult::result() const {
  return result_;
}
inline void Match2Game_PVPResult::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
}

// optional uint32 killnum = 5;
inline bool Match2Game_PVPResult::has_killnum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Match2Game_PVPResult::set_has_killnum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Match2Game_PVPResult::clear_has_killnum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Match2Game_PVPResult::clear_killnum() {
  killnum_ = 0u;
  clear_has_killnum();
}
inline ::google::protobuf::uint32 Match2Game_PVPResult::killnum() const {
  return killnum_;
}
inline void Match2Game_PVPResult::set_killnum(::google::protobuf::uint32 value) {
  set_has_killnum();
  killnum_ = value;
}

// repeated uint64 rival = 6;
inline int Match2Game_PVPResult::rival_size() const {
  return rival_.size();
}
inline void Match2Game_PVPResult::clear_rival() {
  rival_.Clear();
}
inline ::google::protobuf::uint64 Match2Game_PVPResult::rival(int index) const {
  return rival_.Get(index);
}
inline void Match2Game_PVPResult::set_rival(int index, ::google::protobuf::uint64 value) {
  rival_.Set(index, value);
}
inline void Match2Game_PVPResult::add_rival(::google::protobuf::uint64 value) {
  rival_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Match2Game_PVPResult::rival() const {
  return rival_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Match2Game_PVPResult::mutable_rival() {
  return &rival_;
}

// optional uint32 reason = 7;
inline bool Match2Game_PVPResult::has_reason() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Match2Game_PVPResult::set_has_reason() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Match2Game_PVPResult::clear_has_reason() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Match2Game_PVPResult::clear_reason() {
  reason_ = 0u;
  clear_has_reason();
}
inline ::google::protobuf::uint32 Match2Game_PVPResult::reason() const {
  return reason_;
}
inline void Match2Game_PVPResult::set_reason(::google::protobuf::uint32 value) {
  set_has_reason();
  reason_ = value;
}

// -------------------------------------------------------------------

// Match2Game_CreateRoom

// optional int32 result = 1;
inline bool Match2Game_CreateRoom::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Match2Game_CreateRoom::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Match2Game_CreateRoom::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Match2Game_CreateRoom::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 Match2Game_CreateRoom::result() const {
  return result_;
}
inline void Match2Game_CreateRoom::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional int32 roomid = 2;
inline bool Match2Game_CreateRoom::has_roomid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Match2Game_CreateRoom::set_has_roomid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Match2Game_CreateRoom::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Match2Game_CreateRoom::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
inline ::google::protobuf::int32 Match2Game_CreateRoom::roomid() const {
  return roomid_;
}
inline void Match2Game_CreateRoom::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
}

// -------------------------------------------------------------------

// Battle2Match_PVPResult

// optional uint32 pvpid = 1;
inline bool Battle2Match_PVPResult::has_pvpid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Battle2Match_PVPResult::set_has_pvpid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Battle2Match_PVPResult::clear_has_pvpid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Battle2Match_PVPResult::clear_pvpid() {
  pvpid_ = 0u;
  clear_has_pvpid();
}
inline ::google::protobuf::uint32 Battle2Match_PVPResult::pvpid() const {
  return pvpid_;
}
inline void Battle2Match_PVPResult::set_pvpid(::google::protobuf::uint32 value) {
  set_has_pvpid();
  pvpid_ = value;
}

// optional uint32 winner = 2;
inline bool Battle2Match_PVPResult::has_winner() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Battle2Match_PVPResult::set_has_winner() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Battle2Match_PVPResult::clear_has_winner() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Battle2Match_PVPResult::clear_winner() {
  winner_ = 0u;
  clear_has_winner();
}
inline ::google::protobuf::uint32 Battle2Match_PVPResult::winner() const {
  return winner_;
}
inline void Battle2Match_PVPResult::set_winner(::google::protobuf::uint32 value) {
  set_has_winner();
  winner_ = value;
}

// optional uint64 costtime = 3;
inline bool Battle2Match_PVPResult::has_costtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Battle2Match_PVPResult::set_has_costtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Battle2Match_PVPResult::clear_has_costtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Battle2Match_PVPResult::clear_costtime() {
  costtime_ = GOOGLE_ULONGLONG(0);
  clear_has_costtime();
}
inline ::google::protobuf::uint64 Battle2Match_PVPResult::costtime() const {
  return costtime_;
}
inline void Battle2Match_PVPResult::set_costtime(::google::protobuf::uint64 value) {
  set_has_costtime();
  costtime_ = value;
}

// optional uint32 reason = 4;
inline bool Battle2Match_PVPResult::has_reason() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Battle2Match_PVPResult::set_has_reason() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Battle2Match_PVPResult::clear_has_reason() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Battle2Match_PVPResult::clear_reason() {
  reason_ = 0u;
  clear_has_reason();
}
inline ::google::protobuf::uint32 Battle2Match_PVPResult::reason() const {
  return reason_;
}
inline void Battle2Match_PVPResult::set_reason(::google::protobuf::uint32 value) {
  set_has_reason();
  reason_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace proto

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_match_2eproto__INCLUDED
