// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: db_activity.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "db_activity.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace message {

namespace {

const ::google::protobuf::Descriptor* DBTowerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DBTowerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActivityInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivityInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActivityState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivityState_reflection_ = NULL;
const ::google::protobuf::Descriptor* Activity_DiamondDouble_Data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Activity_DiamondDouble_Data_reflection_ = NULL;
const ::google::protobuf::Descriptor* Activity_DiamondDouble_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Activity_DiamondDouble_reflection_ = NULL;
const ::google::protobuf::Descriptor* Activity_Roulette_Data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Activity_Roulette_Data_reflection_ = NULL;
const ::google::protobuf::Descriptor* Activity_Roulette_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Activity_Roulette_reflection_ = NULL;
const ::google::protobuf::Descriptor* Activity_LostTreasure_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Activity_LostTreasure_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_db_5factivity_2eproto() {
  protobuf_AddDesc_db_5factivity_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "db_activity.proto");
  GOOGLE_CHECK(file != NULL);
  DBTowerInfo_descriptor_ = file->message_type(0);
  static const int DBTowerInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBTowerInfo, tower40_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBTowerInfo, tower60_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBTowerInfo, tower_floor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBTowerInfo, tower_bufferid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBTowerInfo, tower_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBTowerInfo, tower_times_),
  };
  DBTowerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DBTowerInfo_descriptor_,
      DBTowerInfo::default_instance_,
      DBTowerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBTowerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBTowerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DBTowerInfo));
  ActivityInfo_descriptor_ = file->message_type(1);
  static const int ActivityInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityInfo, act_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityInfo, salvage_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityInfo, chest_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityInfo, activitydata_),
  };
  ActivityInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActivityInfo_descriptor_,
      ActivityInfo::default_instance_,
      ActivityInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActivityInfo));
  ActivityState_descriptor_ = file->message_type(2);
  static const int ActivityState_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityState, uiactivityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityState, uistate_),
  };
  ActivityState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActivityState_descriptor_,
      ActivityState::default_instance_,
      ActivityState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActivityState));
  Activity_DiamondDouble_Data_descriptor_ = file->message_type(3);
  static const int Activity_DiamondDouble_Data_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_DiamondDouble_Data, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_DiamondDouble_Data, data_),
  };
  Activity_DiamondDouble_Data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Activity_DiamondDouble_Data_descriptor_,
      Activity_DiamondDouble_Data::default_instance_,
      Activity_DiamondDouble_Data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_DiamondDouble_Data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_DiamondDouble_Data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Activity_DiamondDouble_Data));
  Activity_DiamondDouble_descriptor_ = file->message_type(4);
  static const int Activity_DiamondDouble_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_DiamondDouble, data_),
  };
  Activity_DiamondDouble_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Activity_DiamondDouble_descriptor_,
      Activity_DiamondDouble::default_instance_,
      Activity_DiamondDouble_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_DiamondDouble, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_DiamondDouble, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Activity_DiamondDouble));
  Activity_Roulette_Data_descriptor_ = file->message_type(5);
  static const int Activity_Roulette_Data_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_Roulette_Data, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_Roulette_Data, data_),
  };
  Activity_Roulette_Data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Activity_Roulette_Data_descriptor_,
      Activity_Roulette_Data::default_instance_,
      Activity_Roulette_Data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_Roulette_Data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_Roulette_Data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Activity_Roulette_Data));
  Activity_Roulette_descriptor_ = file->message_type(6);
  static const int Activity_Roulette_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_Roulette, data_),
  };
  Activity_Roulette_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Activity_Roulette_descriptor_,
      Activity_Roulette::default_instance_,
      Activity_Roulette_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_Roulette, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_Roulette, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Activity_Roulette));
  Activity_LostTreasure_descriptor_ = file->message_type(7);
  static const int Activity_LostTreasure_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_LostTreasure, data_),
  };
  Activity_LostTreasure_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Activity_LostTreasure_descriptor_,
      Activity_LostTreasure::default_instance_,
      Activity_LostTreasure_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_LostTreasure, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_LostTreasure, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Activity_LostTreasure));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_db_5factivity_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DBTowerInfo_descriptor_, &DBTowerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActivityInfo_descriptor_, &ActivityInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActivityState_descriptor_, &ActivityState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Activity_DiamondDouble_Data_descriptor_, &Activity_DiamondDouble_Data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Activity_DiamondDouble_descriptor_, &Activity_DiamondDouble::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Activity_Roulette_Data_descriptor_, &Activity_Roulette_Data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Activity_Roulette_descriptor_, &Activity_Roulette::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Activity_LostTreasure_descriptor_, &Activity_LostTreasure::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_db_5factivity_2eproto() {
  delete DBTowerInfo::default_instance_;
  delete DBTowerInfo_reflection_;
  delete ActivityInfo::default_instance_;
  delete ActivityInfo_reflection_;
  delete ActivityState::default_instance_;
  delete ActivityState_reflection_;
  delete Activity_DiamondDouble_Data::default_instance_;
  delete Activity_DiamondDouble_Data_reflection_;
  delete Activity_DiamondDouble::default_instance_;
  delete Activity_DiamondDouble_reflection_;
  delete Activity_Roulette_Data::default_instance_;
  delete Activity_Roulette_Data_reflection_;
  delete Activity_Roulette::default_instance_;
  delete Activity_Roulette_reflection_;
  delete Activity_LostTreasure::default_instance_;
  delete Activity_LostTreasure_reflection_;
}

void protobuf_AddDesc_db_5factivity_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::proto::message::protobuf_AddDesc_common_2eproto();
  ::proto::message::protobuf_AddDesc_match_2eproto();
  ::proto::message::protobuf_AddDesc_activity_2eproto();
  ::proto::message::protobuf_AddDesc_tower_2eproto();
  ::proto::message::protobuf_AddDesc_parkour_2eproto();
  ::proto::message::protobuf_AddDesc_marketing_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021db_activity.proto\022\rproto.message\032\014comm"
    "on.proto\032\013match.proto\032\016activity.proto\032\013t"
    "ower.proto\032\rparkour.proto\032\017marketing.pro"
    "to\"\307\001\n\013DBTowerInfo\0220\n\014tower40_list\030\001 \003(\013"
    "2\032.proto.message.TowerRecord\0220\n\014tower60_"
    "list\030\002 \003(\0132\032.proto.message.TowerRecord\022\023"
    "\n\013tower_floor\030\003 \001(\r\022\026\n\016tower_bufferid\030\004 "
    "\001(\r\022\022\n\ntower_time\030\005 \001(\r\022\023\n\013tower_times\030\006"
    " \001(\005\"\315\001\n\014ActivityInfo\0220\n\010act_list\030\001 \003(\0132"
    "\036.proto.message.ActivityIDTimes\022,\n\014salva"
    "ge_list\030\002 \003(\0132\026.proto.message.IDTimes\022*\n"
    "\nchest_list\030\003 \003(\0132\026.proto.message.IDTime"
    "s\0221\n\014activitydata\030\004 \003(\0132\033.proto.message."
    "ActivityData\"6\n\rActivityState\022\024\n\014uiActiv"
    "ityId\030\001 \001(\r\022\017\n\007uiState\030\002 \001(\r\"^\n\033Activity"
    "_DiamondDouble_Data\022\n\n\002id\030\001 \001(\005\0223\n\004data\030"
    "\002 \001(\0132%.proto.message.Activity_DiamondDo"
    "uble\"K\n\026Activity_DiamondDouble\0221\n\004data\030\001"
    " \003(\0132#.proto.message.DiamondDoubleHistor"
    "y\"T\n\026Activity_Roulette_Data\022\n\n\002id\030\001 \001(\005\022"
    ".\n\004data\030\002 \001(\0132 .proto.message.Activity_R"
    "oulette\"A\n\021Activity_Roulette\022,\n\004data\030\001 \003"
    "(\0132\036.proto.message.RouletteHistory\"B\n\025Ac"
    "tivity_LostTreasure\022)\n\004data\030\001 \001(\0132\033.prot"
    "o.message.LostTreasureB\017\n\rproto.message", 999);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "db_activity.proto", &protobuf_RegisterTypes);
  DBTowerInfo::default_instance_ = new DBTowerInfo();
  ActivityInfo::default_instance_ = new ActivityInfo();
  ActivityState::default_instance_ = new ActivityState();
  Activity_DiamondDouble_Data::default_instance_ = new Activity_DiamondDouble_Data();
  Activity_DiamondDouble::default_instance_ = new Activity_DiamondDouble();
  Activity_Roulette_Data::default_instance_ = new Activity_Roulette_Data();
  Activity_Roulette::default_instance_ = new Activity_Roulette();
  Activity_LostTreasure::default_instance_ = new Activity_LostTreasure();
  DBTowerInfo::default_instance_->InitAsDefaultInstance();
  ActivityInfo::default_instance_->InitAsDefaultInstance();
  ActivityState::default_instance_->InitAsDefaultInstance();
  Activity_DiamondDouble_Data::default_instance_->InitAsDefaultInstance();
  Activity_DiamondDouble::default_instance_->InitAsDefaultInstance();
  Activity_Roulette_Data::default_instance_->InitAsDefaultInstance();
  Activity_Roulette::default_instance_->InitAsDefaultInstance();
  Activity_LostTreasure::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_db_5factivity_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_db_5factivity_2eproto {
  StaticDescriptorInitializer_db_5factivity_2eproto() {
    protobuf_AddDesc_db_5factivity_2eproto();
  }
} static_descriptor_initializer_db_5factivity_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int DBTowerInfo::kTower40ListFieldNumber;
const int DBTowerInfo::kTower60ListFieldNumber;
const int DBTowerInfo::kTowerFloorFieldNumber;
const int DBTowerInfo::kTowerBufferidFieldNumber;
const int DBTowerInfo::kTowerTimeFieldNumber;
const int DBTowerInfo::kTowerTimesFieldNumber;
#endif  // !_MSC_VER

DBTowerInfo::DBTowerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DBTowerInfo::InitAsDefaultInstance() {
}

DBTowerInfo::DBTowerInfo(const DBTowerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DBTowerInfo::SharedCtor() {
  _cached_size_ = 0;
  tower_floor_ = 0u;
  tower_bufferid_ = 0u;
  tower_time_ = 0u;
  tower_times_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DBTowerInfo::~DBTowerInfo() {
  SharedDtor();
}

void DBTowerInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DBTowerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBTowerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBTowerInfo_descriptor_;
}

const DBTowerInfo& DBTowerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_5factivity_2eproto();
  return *default_instance_;
}

DBTowerInfo* DBTowerInfo::default_instance_ = NULL;

DBTowerInfo* DBTowerInfo::New() const {
  return new DBTowerInfo;
}

void DBTowerInfo::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    tower_floor_ = 0u;
    tower_bufferid_ = 0u;
    tower_time_ = 0u;
    tower_times_ = 0;
  }
  tower40_list_.Clear();
  tower60_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DBTowerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.message.TowerRecord tower40_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tower40_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tower40_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_tower40_list;
        if (input->ExpectTag(18)) goto parse_tower60_list;
        break;
      }

      // repeated .proto.message.TowerRecord tower60_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tower60_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tower60_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tower60_list;
        if (input->ExpectTag(24)) goto parse_tower_floor;
        break;
      }

      // optional uint32 tower_floor = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tower_floor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tower_floor_)));
          set_has_tower_floor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_tower_bufferid;
        break;
      }

      // optional uint32 tower_bufferid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tower_bufferid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tower_bufferid_)));
          set_has_tower_bufferid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_tower_time;
        break;
      }

      // optional uint32 tower_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tower_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tower_time_)));
          set_has_tower_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_tower_times;
        break;
      }

      // optional int32 tower_times = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tower_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tower_times_)));
          set_has_tower_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DBTowerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.message.TowerRecord tower40_list = 1;
  for (int i = 0; i < this->tower40_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tower40_list(i), output);
  }

  // repeated .proto.message.TowerRecord tower60_list = 2;
  for (int i = 0; i < this->tower60_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->tower60_list(i), output);
  }

  // optional uint32 tower_floor = 3;
  if (has_tower_floor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->tower_floor(), output);
  }

  // optional uint32 tower_bufferid = 4;
  if (has_tower_bufferid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->tower_bufferid(), output);
  }

  // optional uint32 tower_time = 5;
  if (has_tower_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->tower_time(), output);
  }

  // optional int32 tower_times = 6;
  if (has_tower_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->tower_times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DBTowerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.message.TowerRecord tower40_list = 1;
  for (int i = 0; i < this->tower40_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->tower40_list(i), target);
  }

  // repeated .proto.message.TowerRecord tower60_list = 2;
  for (int i = 0; i < this->tower60_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->tower60_list(i), target);
  }

  // optional uint32 tower_floor = 3;
  if (has_tower_floor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->tower_floor(), target);
  }

  // optional uint32 tower_bufferid = 4;
  if (has_tower_bufferid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->tower_bufferid(), target);
  }

  // optional uint32 tower_time = 5;
  if (has_tower_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->tower_time(), target);
  }

  // optional int32 tower_times = 6;
  if (has_tower_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->tower_times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DBTowerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional uint32 tower_floor = 3;
    if (has_tower_floor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tower_floor());
    }

    // optional uint32 tower_bufferid = 4;
    if (has_tower_bufferid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tower_bufferid());
    }

    // optional uint32 tower_time = 5;
    if (has_tower_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tower_time());
    }

    // optional int32 tower_times = 6;
    if (has_tower_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tower_times());
    }

  }
  // repeated .proto.message.TowerRecord tower40_list = 1;
  total_size += 1 * this->tower40_list_size();
  for (int i = 0; i < this->tower40_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tower40_list(i));
  }

  // repeated .proto.message.TowerRecord tower60_list = 2;
  total_size += 1 * this->tower60_list_size();
  for (int i = 0; i < this->tower60_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tower60_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBTowerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DBTowerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DBTowerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DBTowerInfo::MergeFrom(const DBTowerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  tower40_list_.MergeFrom(from.tower40_list_);
  tower60_list_.MergeFrom(from.tower60_list_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_tower_floor()) {
      set_tower_floor(from.tower_floor());
    }
    if (from.has_tower_bufferid()) {
      set_tower_bufferid(from.tower_bufferid());
    }
    if (from.has_tower_time()) {
      set_tower_time(from.tower_time());
    }
    if (from.has_tower_times()) {
      set_tower_times(from.tower_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DBTowerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBTowerInfo::CopyFrom(const DBTowerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBTowerInfo::IsInitialized() const {

  return true;
}

void DBTowerInfo::Swap(DBTowerInfo* other) {
  if (other != this) {
    tower40_list_.Swap(&other->tower40_list_);
    tower60_list_.Swap(&other->tower60_list_);
    std::swap(tower_floor_, other->tower_floor_);
    std::swap(tower_bufferid_, other->tower_bufferid_);
    std::swap(tower_time_, other->tower_time_);
    std::swap(tower_times_, other->tower_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DBTowerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DBTowerInfo_descriptor_;
  metadata.reflection = DBTowerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActivityInfo::kActListFieldNumber;
const int ActivityInfo::kSalvageListFieldNumber;
const int ActivityInfo::kChestListFieldNumber;
const int ActivityInfo::kActivitydataFieldNumber;
#endif  // !_MSC_VER

ActivityInfo::ActivityInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActivityInfo::InitAsDefaultInstance() {
}

ActivityInfo::ActivityInfo(const ActivityInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActivityInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivityInfo::~ActivityInfo() {
  SharedDtor();
}

void ActivityInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActivityInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityInfo_descriptor_;
}

const ActivityInfo& ActivityInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_5factivity_2eproto();
  return *default_instance_;
}

ActivityInfo* ActivityInfo::default_instance_ = NULL;

ActivityInfo* ActivityInfo::New() const {
  return new ActivityInfo;
}

void ActivityInfo::Clear() {
  act_list_.Clear();
  salvage_list_.Clear();
  chest_list_.Clear();
  activitydata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActivityInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.message.ActivityIDTimes act_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_act_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_act_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_act_list;
        if (input->ExpectTag(18)) goto parse_salvage_list;
        break;
      }

      // repeated .proto.message.IDTimes salvage_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_salvage_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_salvage_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_salvage_list;
        if (input->ExpectTag(26)) goto parse_chest_list;
        break;
      }

      // repeated .proto.message.IDTimes chest_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chest_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chest_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_chest_list;
        if (input->ExpectTag(34)) goto parse_activitydata;
        break;
      }

      // repeated .proto.message.ActivityData activitydata = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_activitydata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_activitydata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_activitydata;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActivityInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.message.ActivityIDTimes act_list = 1;
  for (int i = 0; i < this->act_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->act_list(i), output);
  }

  // repeated .proto.message.IDTimes salvage_list = 2;
  for (int i = 0; i < this->salvage_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->salvage_list(i), output);
  }

  // repeated .proto.message.IDTimes chest_list = 3;
  for (int i = 0; i < this->chest_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->chest_list(i), output);
  }

  // repeated .proto.message.ActivityData activitydata = 4;
  for (int i = 0; i < this->activitydata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->activitydata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActivityInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.message.ActivityIDTimes act_list = 1;
  for (int i = 0; i < this->act_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->act_list(i), target);
  }

  // repeated .proto.message.IDTimes salvage_list = 2;
  for (int i = 0; i < this->salvage_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->salvage_list(i), target);
  }

  // repeated .proto.message.IDTimes chest_list = 3;
  for (int i = 0; i < this->chest_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->chest_list(i), target);
  }

  // repeated .proto.message.ActivityData activitydata = 4;
  for (int i = 0; i < this->activitydata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->activitydata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActivityInfo::ByteSize() const {
  int total_size = 0;

  // repeated .proto.message.ActivityIDTimes act_list = 1;
  total_size += 1 * this->act_list_size();
  for (int i = 0; i < this->act_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->act_list(i));
  }

  // repeated .proto.message.IDTimes salvage_list = 2;
  total_size += 1 * this->salvage_list_size();
  for (int i = 0; i < this->salvage_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->salvage_list(i));
  }

  // repeated .proto.message.IDTimes chest_list = 3;
  total_size += 1 * this->chest_list_size();
  for (int i = 0; i < this->chest_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chest_list(i));
  }

  // repeated .proto.message.ActivityData activitydata = 4;
  total_size += 1 * this->activitydata_size();
  for (int i = 0; i < this->activitydata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->activitydata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActivityInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActivityInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActivityInfo::MergeFrom(const ActivityInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  act_list_.MergeFrom(from.act_list_);
  salvage_list_.MergeFrom(from.salvage_list_);
  chest_list_.MergeFrom(from.chest_list_);
  activitydata_.MergeFrom(from.activitydata_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActivityInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityInfo::CopyFrom(const ActivityInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityInfo::IsInitialized() const {

  return true;
}

void ActivityInfo::Swap(ActivityInfo* other) {
  if (other != this) {
    act_list_.Swap(&other->act_list_);
    salvage_list_.Swap(&other->salvage_list_);
    chest_list_.Swap(&other->chest_list_);
    activitydata_.Swap(&other->activitydata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActivityInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivityInfo_descriptor_;
  metadata.reflection = ActivityInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActivityState::kUiActivityIdFieldNumber;
const int ActivityState::kUiStateFieldNumber;
#endif  // !_MSC_VER

ActivityState::ActivityState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActivityState::InitAsDefaultInstance() {
}

ActivityState::ActivityState(const ActivityState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActivityState::SharedCtor() {
  _cached_size_ = 0;
  uiactivityid_ = 0u;
  uistate_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivityState::~ActivityState() {
  SharedDtor();
}

void ActivityState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActivityState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityState_descriptor_;
}

const ActivityState& ActivityState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_5factivity_2eproto();
  return *default_instance_;
}

ActivityState* ActivityState::default_instance_ = NULL;

ActivityState* ActivityState::New() const {
  return new ActivityState;
}

void ActivityState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uiactivityid_ = 0u;
    uistate_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActivityState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uiActivityId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiactivityid_)));
          set_has_uiactivityid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uiState;
        break;
      }

      // optional uint32 uiState = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uistate_)));
          set_has_uistate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActivityState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uiActivityId = 1;
  if (has_uiactivityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uiactivityid(), output);
  }

  // optional uint32 uiState = 2;
  if (has_uistate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uistate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActivityState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uiActivityId = 1;
  if (has_uiactivityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uiactivityid(), target);
  }

  // optional uint32 uiState = 2;
  if (has_uistate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uistate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActivityState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uiActivityId = 1;
    if (has_uiactivityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiactivityid());
    }

    // optional uint32 uiState = 2;
    if (has_uistate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uistate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActivityState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActivityState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActivityState::MergeFrom(const ActivityState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uiactivityid()) {
      set_uiactivityid(from.uiactivityid());
    }
    if (from.has_uistate()) {
      set_uistate(from.uistate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActivityState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityState::CopyFrom(const ActivityState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityState::IsInitialized() const {

  return true;
}

void ActivityState::Swap(ActivityState* other) {
  if (other != this) {
    std::swap(uiactivityid_, other->uiactivityid_);
    std::swap(uistate_, other->uistate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActivityState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivityState_descriptor_;
  metadata.reflection = ActivityState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Activity_DiamondDouble_Data::kIdFieldNumber;
const int Activity_DiamondDouble_Data::kDataFieldNumber;
#endif  // !_MSC_VER

Activity_DiamondDouble_Data::Activity_DiamondDouble_Data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Activity_DiamondDouble_Data::InitAsDefaultInstance() {
  data_ = const_cast< ::proto::message::Activity_DiamondDouble*>(&::proto::message::Activity_DiamondDouble::default_instance());
}

Activity_DiamondDouble_Data::Activity_DiamondDouble_Data(const Activity_DiamondDouble_Data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Activity_DiamondDouble_Data::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Activity_DiamondDouble_Data::~Activity_DiamondDouble_Data() {
  SharedDtor();
}

void Activity_DiamondDouble_Data::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void Activity_DiamondDouble_Data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Activity_DiamondDouble_Data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Activity_DiamondDouble_Data_descriptor_;
}

const Activity_DiamondDouble_Data& Activity_DiamondDouble_Data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_5factivity_2eproto();
  return *default_instance_;
}

Activity_DiamondDouble_Data* Activity_DiamondDouble_Data::default_instance_ = NULL;

Activity_DiamondDouble_Data* Activity_DiamondDouble_Data::New() const {
  return new Activity_DiamondDouble_Data;
}

void Activity_DiamondDouble_Data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_data()) {
      if (data_ != NULL) data_->::proto::message::Activity_DiamondDouble::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Activity_DiamondDouble_Data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional .proto.message.Activity_DiamondDouble data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Activity_DiamondDouble_Data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional .proto.message.Activity_DiamondDouble data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Activity_DiamondDouble_Data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional .proto.message.Activity_DiamondDouble data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Activity_DiamondDouble_Data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional .proto.message.Activity_DiamondDouble data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Activity_DiamondDouble_Data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Activity_DiamondDouble_Data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Activity_DiamondDouble_Data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Activity_DiamondDouble_Data::MergeFrom(const Activity_DiamondDouble_Data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_data()) {
      mutable_data()->::proto::message::Activity_DiamondDouble::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Activity_DiamondDouble_Data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Activity_DiamondDouble_Data::CopyFrom(const Activity_DiamondDouble_Data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Activity_DiamondDouble_Data::IsInitialized() const {

  return true;
}

void Activity_DiamondDouble_Data::Swap(Activity_DiamondDouble_Data* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Activity_DiamondDouble_Data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Activity_DiamondDouble_Data_descriptor_;
  metadata.reflection = Activity_DiamondDouble_Data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Activity_DiamondDouble::kDataFieldNumber;
#endif  // !_MSC_VER

Activity_DiamondDouble::Activity_DiamondDouble()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Activity_DiamondDouble::InitAsDefaultInstance() {
}

Activity_DiamondDouble::Activity_DiamondDouble(const Activity_DiamondDouble& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Activity_DiamondDouble::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Activity_DiamondDouble::~Activity_DiamondDouble() {
  SharedDtor();
}

void Activity_DiamondDouble::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Activity_DiamondDouble::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Activity_DiamondDouble::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Activity_DiamondDouble_descriptor_;
}

const Activity_DiamondDouble& Activity_DiamondDouble::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_5factivity_2eproto();
  return *default_instance_;
}

Activity_DiamondDouble* Activity_DiamondDouble::default_instance_ = NULL;

Activity_DiamondDouble* Activity_DiamondDouble::New() const {
  return new Activity_DiamondDouble;
}

void Activity_DiamondDouble::Clear() {
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Activity_DiamondDouble::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.message.DiamondDoubleHistory data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Activity_DiamondDouble::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.message.DiamondDoubleHistory data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Activity_DiamondDouble::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.message.DiamondDoubleHistory data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Activity_DiamondDouble::ByteSize() const {
  int total_size = 0;

  // repeated .proto.message.DiamondDoubleHistory data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Activity_DiamondDouble::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Activity_DiamondDouble* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Activity_DiamondDouble*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Activity_DiamondDouble::MergeFrom(const Activity_DiamondDouble& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Activity_DiamondDouble::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Activity_DiamondDouble::CopyFrom(const Activity_DiamondDouble& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Activity_DiamondDouble::IsInitialized() const {

  return true;
}

void Activity_DiamondDouble::Swap(Activity_DiamondDouble* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Activity_DiamondDouble::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Activity_DiamondDouble_descriptor_;
  metadata.reflection = Activity_DiamondDouble_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Activity_Roulette_Data::kIdFieldNumber;
const int Activity_Roulette_Data::kDataFieldNumber;
#endif  // !_MSC_VER

Activity_Roulette_Data::Activity_Roulette_Data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Activity_Roulette_Data::InitAsDefaultInstance() {
  data_ = const_cast< ::proto::message::Activity_Roulette*>(&::proto::message::Activity_Roulette::default_instance());
}

Activity_Roulette_Data::Activity_Roulette_Data(const Activity_Roulette_Data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Activity_Roulette_Data::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Activity_Roulette_Data::~Activity_Roulette_Data() {
  SharedDtor();
}

void Activity_Roulette_Data::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void Activity_Roulette_Data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Activity_Roulette_Data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Activity_Roulette_Data_descriptor_;
}

const Activity_Roulette_Data& Activity_Roulette_Data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_5factivity_2eproto();
  return *default_instance_;
}

Activity_Roulette_Data* Activity_Roulette_Data::default_instance_ = NULL;

Activity_Roulette_Data* Activity_Roulette_Data::New() const {
  return new Activity_Roulette_Data;
}

void Activity_Roulette_Data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_data()) {
      if (data_ != NULL) data_->::proto::message::Activity_Roulette::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Activity_Roulette_Data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional .proto.message.Activity_Roulette data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Activity_Roulette_Data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional .proto.message.Activity_Roulette data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Activity_Roulette_Data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional .proto.message.Activity_Roulette data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Activity_Roulette_Data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional .proto.message.Activity_Roulette data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Activity_Roulette_Data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Activity_Roulette_Data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Activity_Roulette_Data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Activity_Roulette_Data::MergeFrom(const Activity_Roulette_Data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_data()) {
      mutable_data()->::proto::message::Activity_Roulette::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Activity_Roulette_Data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Activity_Roulette_Data::CopyFrom(const Activity_Roulette_Data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Activity_Roulette_Data::IsInitialized() const {

  return true;
}

void Activity_Roulette_Data::Swap(Activity_Roulette_Data* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Activity_Roulette_Data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Activity_Roulette_Data_descriptor_;
  metadata.reflection = Activity_Roulette_Data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Activity_Roulette::kDataFieldNumber;
#endif  // !_MSC_VER

Activity_Roulette::Activity_Roulette()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Activity_Roulette::InitAsDefaultInstance() {
}

Activity_Roulette::Activity_Roulette(const Activity_Roulette& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Activity_Roulette::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Activity_Roulette::~Activity_Roulette() {
  SharedDtor();
}

void Activity_Roulette::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Activity_Roulette::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Activity_Roulette::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Activity_Roulette_descriptor_;
}

const Activity_Roulette& Activity_Roulette::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_5factivity_2eproto();
  return *default_instance_;
}

Activity_Roulette* Activity_Roulette::default_instance_ = NULL;

Activity_Roulette* Activity_Roulette::New() const {
  return new Activity_Roulette;
}

void Activity_Roulette::Clear() {
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Activity_Roulette::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.message.RouletteHistory data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Activity_Roulette::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.message.RouletteHistory data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Activity_Roulette::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.message.RouletteHistory data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Activity_Roulette::ByteSize() const {
  int total_size = 0;

  // repeated .proto.message.RouletteHistory data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Activity_Roulette::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Activity_Roulette* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Activity_Roulette*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Activity_Roulette::MergeFrom(const Activity_Roulette& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Activity_Roulette::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Activity_Roulette::CopyFrom(const Activity_Roulette& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Activity_Roulette::IsInitialized() const {

  return true;
}

void Activity_Roulette::Swap(Activity_Roulette* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Activity_Roulette::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Activity_Roulette_descriptor_;
  metadata.reflection = Activity_Roulette_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Activity_LostTreasure::kDataFieldNumber;
#endif  // !_MSC_VER

Activity_LostTreasure::Activity_LostTreasure()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Activity_LostTreasure::InitAsDefaultInstance() {
  data_ = const_cast< ::proto::message::LostTreasure*>(&::proto::message::LostTreasure::default_instance());
}

Activity_LostTreasure::Activity_LostTreasure(const Activity_LostTreasure& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Activity_LostTreasure::SharedCtor() {
  _cached_size_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Activity_LostTreasure::~Activity_LostTreasure() {
  SharedDtor();
}

void Activity_LostTreasure::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void Activity_LostTreasure::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Activity_LostTreasure::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Activity_LostTreasure_descriptor_;
}

const Activity_LostTreasure& Activity_LostTreasure::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_5factivity_2eproto();
  return *default_instance_;
}

Activity_LostTreasure* Activity_LostTreasure::default_instance_ = NULL;

Activity_LostTreasure* Activity_LostTreasure::New() const {
  return new Activity_LostTreasure;
}

void Activity_LostTreasure::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_data()) {
      if (data_ != NULL) data_->::proto::message::LostTreasure::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Activity_LostTreasure::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.message.LostTreasure data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Activity_LostTreasure::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto.message.LostTreasure data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Activity_LostTreasure::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto.message.LostTreasure data = 1;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Activity_LostTreasure::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto.message.LostTreasure data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Activity_LostTreasure::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Activity_LostTreasure* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Activity_LostTreasure*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Activity_LostTreasure::MergeFrom(const Activity_LostTreasure& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      mutable_data()->::proto::message::LostTreasure::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Activity_LostTreasure::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Activity_LostTreasure::CopyFrom(const Activity_LostTreasure& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Activity_LostTreasure::IsInitialized() const {

  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  return true;
}

void Activity_LostTreasure::Swap(Activity_LostTreasure* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Activity_LostTreasure::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Activity_LostTreasure_descriptor_;
  metadata.reflection = Activity_LostTreasure_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace proto

// @@protoc_insertion_point(global_scope)
