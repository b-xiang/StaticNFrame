// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: player.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "player.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace message {

namespace {

const ::google::protobuf::Descriptor* ProtoAttrData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoAttrData_reflection_ = NULL;
const ::google::protobuf::Descriptor* Player_SC_PlayerAttrData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Player_SC_PlayerAttrData_reflection_ = NULL;
const ::google::protobuf::Descriptor* Player_SC_PlayerAttrData_Exp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Player_SC_PlayerAttrData_Exp_reflection_ = NULL;
const ::google::protobuf::Descriptor* MultiProgressCon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MultiProgressCon_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoProgressConData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoProgressConData_reflection_ = NULL;
const ::google::protobuf::Descriptor* Player_SC_PlayerProgressConData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Player_SC_PlayerProgressConData_reflection_ = NULL;
const ::google::protobuf::Descriptor* Player_CS_OpenSystem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Player_CS_OpenSystem_reflection_ = NULL;
const ::google::protobuf::Descriptor* Player_SC_UpdateOpenButton_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Player_SC_UpdateOpenButton_reflection_ = NULL;
const ::google::protobuf::Descriptor* Player_CS_QueryPlayerData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Player_CS_QueryPlayerData_reflection_ = NULL;
const ::google::protobuf::Descriptor* Player_SC_QueryPlayerData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Player_SC_QueryPlayerData_reflection_ = NULL;
const ::google::protobuf::Descriptor* Player_CS_ChangeCharname_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Player_CS_ChangeCharname_reflection_ = NULL;
const ::google::protobuf::Descriptor* Player_SC_ChangeCharname_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Player_SC_ChangeCharname_reflection_ = NULL;
const ::google::protobuf::Descriptor* SingleExpRio_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SingleExpRio_reflection_ = NULL;
const ::google::protobuf::Descriptor* Player_SC_UpdatePlayerExpRio_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Player_SC_UpdatePlayerExpRio_reflection_ = NULL;
const ::google::protobuf::Descriptor* Player_CS_UpdateGuide_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Player_CS_UpdateGuide_reflection_ = NULL;
const ::google::protobuf::Descriptor* Player_SC_UpdateGuide_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Player_SC_UpdateGuide_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoSingleCon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoSingleCon_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoProgressConInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoProgressConInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoAllProgressConInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoAllProgressConInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Player_SC_OffRewordInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Player_SC_OffRewordInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Player_CS_GetOffReword_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Player_CS_GetOffReword_reflection_ = NULL;
const ::google::protobuf::Descriptor* Player_SC_GetDreadDungeonInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Player_SC_GetDreadDungeonInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Player_CS_GetAssignPlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Player_CS_GetAssignPlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Player_SC_GetAssignPlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Player_SC_GetAssignPlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Player_SC_GetTerritoryBattleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Player_SC_GetTerritoryBattleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Player_CS_GetTerBatReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Player_CS_GetTerBatReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* Player_CS_JoinTerritoryBattle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Player_CS_JoinTerritoryBattle_reflection_ = NULL;
const ::google::protobuf::Descriptor* Player_CS_TBCaptureFlag_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Player_CS_TBCaptureFlag_reflection_ = NULL;
const ::google::protobuf::Descriptor* Player_SC_TerritoryBattleResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Player_SC_TerritoryBattleResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* Player_CS_QueryPlayerSimpleData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Player_CS_QueryPlayerSimpleData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerSimpleData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerSimpleData_reflection_ = NULL;
const ::google::protobuf::Descriptor* Player_SC_QueryPlayerSimpleData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Player_SC_QueryPlayerSimpleData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_player_2eproto() {
  protobuf_AddDesc_player_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "player.proto");
  GOOGLE_CHECK(file != NULL);
  ProtoAttrData_descriptor_ = file->message_type(0);
  static const int ProtoAttrData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAttrData, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAttrData, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAttrData, percent_),
  };
  ProtoAttrData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoAttrData_descriptor_,
      ProtoAttrData::default_instance_,
      ProtoAttrData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAttrData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAttrData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoAttrData));
  Player_SC_PlayerAttrData_descriptor_ = file->message_type(1);
  static const int Player_SC_PlayerAttrData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_SC_PlayerAttrData, attrdata_),
  };
  Player_SC_PlayerAttrData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Player_SC_PlayerAttrData_descriptor_,
      Player_SC_PlayerAttrData::default_instance_,
      Player_SC_PlayerAttrData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_SC_PlayerAttrData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_SC_PlayerAttrData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Player_SC_PlayerAttrData));
  Player_SC_PlayerAttrData_Exp_descriptor_ = file->message_type(2);
  static const int Player_SC_PlayerAttrData_Exp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_SC_PlayerAttrData_Exp, value_),
  };
  Player_SC_PlayerAttrData_Exp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Player_SC_PlayerAttrData_Exp_descriptor_,
      Player_SC_PlayerAttrData_Exp::default_instance_,
      Player_SC_PlayerAttrData_Exp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_SC_PlayerAttrData_Exp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_SC_PlayerAttrData_Exp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Player_SC_PlayerAttrData_Exp));
  MultiProgressCon_descriptor_ = file->message_type(3);
  static const int MultiProgressCon_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiProgressCon, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiProgressCon, val_),
  };
  MultiProgressCon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MultiProgressCon_descriptor_,
      MultiProgressCon::default_instance_,
      MultiProgressCon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiProgressCon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiProgressCon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MultiProgressCon));
  ProtoProgressConData_descriptor_ = file->message_type(4);
  static const int ProtoProgressConData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoProgressConData, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoProgressConData, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoProgressConData, multivalue_),
  };
  ProtoProgressConData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoProgressConData_descriptor_,
      ProtoProgressConData::default_instance_,
      ProtoProgressConData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoProgressConData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoProgressConData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoProgressConData));
  Player_SC_PlayerProgressConData_descriptor_ = file->message_type(5);
  static const int Player_SC_PlayerProgressConData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_SC_PlayerProgressConData, condata_),
  };
  Player_SC_PlayerProgressConData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Player_SC_PlayerProgressConData_descriptor_,
      Player_SC_PlayerProgressConData::default_instance_,
      Player_SC_PlayerProgressConData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_SC_PlayerProgressConData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_SC_PlayerProgressConData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Player_SC_PlayerProgressConData));
  Player_CS_OpenSystem_descriptor_ = file->message_type(6);
  static const int Player_CS_OpenSystem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_CS_OpenSystem, open_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_CS_OpenSystem, item_id_),
  };
  Player_CS_OpenSystem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Player_CS_OpenSystem_descriptor_,
      Player_CS_OpenSystem::default_instance_,
      Player_CS_OpenSystem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_CS_OpenSystem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_CS_OpenSystem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Player_CS_OpenSystem));
  Player_SC_UpdateOpenButton_descriptor_ = file->message_type(7);
  static const int Player_SC_UpdateOpenButton_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_SC_UpdateOpenButton, button_id_list_),
  };
  Player_SC_UpdateOpenButton_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Player_SC_UpdateOpenButton_descriptor_,
      Player_SC_UpdateOpenButton::default_instance_,
      Player_SC_UpdateOpenButton_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_SC_UpdateOpenButton, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_SC_UpdateOpenButton, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Player_SC_UpdateOpenButton));
  Player_CS_QueryPlayerData_descriptor_ = file->message_type(8);
  static const int Player_CS_QueryPlayerData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_CS_QueryPlayerData, charid_),
  };
  Player_CS_QueryPlayerData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Player_CS_QueryPlayerData_descriptor_,
      Player_CS_QueryPlayerData::default_instance_,
      Player_CS_QueryPlayerData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_CS_QueryPlayerData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_CS_QueryPlayerData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Player_CS_QueryPlayerData));
  Player_SC_QueryPlayerData_descriptor_ = file->message_type(9);
  static const int Player_SC_QueryPlayerData_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_SC_QueryPlayerData, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_SC_QueryPlayerData, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_SC_QueryPlayerData, career_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_SC_QueryPlayerData, charname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_SC_QueryPlayerData, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_SC_QueryPlayerData, equip_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_SC_QueryPlayerData, player_attr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_SC_QueryPlayerData, titleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_SC_QueryPlayerData, ishidetitle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_SC_QueryPlayerData, titlename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_SC_QueryPlayerData, player_combat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_SC_QueryPlayerData, guild_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_SC_QueryPlayerData, boat_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_SC_QueryPlayerData, boat_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_SC_QueryPlayerData, fa_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_SC_QueryPlayerData, stage_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_SC_QueryPlayerData, part_list_),
  };
  Player_SC_QueryPlayerData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Player_SC_QueryPlayerData_descriptor_,
      Player_SC_QueryPlayerData::default_instance_,
      Player_SC_QueryPlayerData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_SC_QueryPlayerData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_SC_QueryPlayerData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Player_SC_QueryPlayerData));
  Player_CS_ChangeCharname_descriptor_ = file->message_type(10);
  static const int Player_CS_ChangeCharname_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_CS_ChangeCharname, charname_),
  };
  Player_CS_ChangeCharname_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Player_CS_ChangeCharname_descriptor_,
      Player_CS_ChangeCharname::default_instance_,
      Player_CS_ChangeCharname_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_CS_ChangeCharname, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_CS_ChangeCharname, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Player_CS_ChangeCharname));
  Player_SC_ChangeCharname_descriptor_ = file->message_type(11);
  static const int Player_SC_ChangeCharname_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_SC_ChangeCharname, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_SC_ChangeCharname, charname_),
  };
  Player_SC_ChangeCharname_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Player_SC_ChangeCharname_descriptor_,
      Player_SC_ChangeCharname::default_instance_,
      Player_SC_ChangeCharname_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_SC_ChangeCharname, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_SC_ChangeCharname, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Player_SC_ChangeCharname));
  SingleExpRio_descriptor_ = file->message_type(12);
  static const int SingleExpRio_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleExpRio, nid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleExpRio, rio_),
  };
  SingleExpRio_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SingleExpRio_descriptor_,
      SingleExpRio::default_instance_,
      SingleExpRio_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleExpRio, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleExpRio, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SingleExpRio));
  Player_SC_UpdatePlayerExpRio_descriptor_ = file->message_type(13);
  static const int Player_SC_UpdatePlayerExpRio_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_SC_UpdatePlayerExpRio, all_info_),
  };
  Player_SC_UpdatePlayerExpRio_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Player_SC_UpdatePlayerExpRio_descriptor_,
      Player_SC_UpdatePlayerExpRio::default_instance_,
      Player_SC_UpdatePlayerExpRio_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_SC_UpdatePlayerExpRio, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_SC_UpdatePlayerExpRio, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Player_SC_UpdatePlayerExpRio));
  Player_CS_UpdateGuide_descriptor_ = file->message_type(14);
  static const int Player_CS_UpdateGuide_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_CS_UpdateGuide, finishkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_CS_UpdateGuide, guidepart_),
  };
  Player_CS_UpdateGuide_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Player_CS_UpdateGuide_descriptor_,
      Player_CS_UpdateGuide::default_instance_,
      Player_CS_UpdateGuide_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_CS_UpdateGuide, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_CS_UpdateGuide, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Player_CS_UpdateGuide));
  Player_SC_UpdateGuide_descriptor_ = file->message_type(15);
  static const int Player_SC_UpdateGuide_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_SC_UpdateGuide, result_),
  };
  Player_SC_UpdateGuide_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Player_SC_UpdateGuide_descriptor_,
      Player_SC_UpdateGuide::default_instance_,
      Player_SC_UpdateGuide_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_SC_UpdateGuide, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_SC_UpdateGuide, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Player_SC_UpdateGuide));
  ProtoSingleCon_descriptor_ = file->message_type(16);
  static const int ProtoSingleCon_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSingleCon, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSingleCon, val_),
  };
  ProtoSingleCon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoSingleCon_descriptor_,
      ProtoSingleCon::default_instance_,
      ProtoSingleCon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSingleCon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSingleCon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoSingleCon));
  ProtoProgressConInfo_descriptor_ = file->message_type(17);
  static const int ProtoProgressConInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoProgressConInfo, etpye_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoProgressConInfo, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoProgressConInfo, mapparam_),
  };
  ProtoProgressConInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoProgressConInfo_descriptor_,
      ProtoProgressConInfo::default_instance_,
      ProtoProgressConInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoProgressConInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoProgressConInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoProgressConInfo));
  ProtoAllProgressConInfo_descriptor_ = file->message_type(18);
  static const int ProtoAllProgressConInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAllProgressConInfo, allinfo_),
  };
  ProtoAllProgressConInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoAllProgressConInfo_descriptor_,
      ProtoAllProgressConInfo::default_instance_,
      ProtoAllProgressConInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAllProgressConInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAllProgressConInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoAllProgressConInfo));
  Player_SC_OffRewordInfo_descriptor_ = file->message_type(19);
  static const int Player_SC_OffRewordInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_SC_OffRewordInfo, accumulatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_SC_OffRewordInfo, lastouttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_SC_OffRewordInfo, curexp_),
  };
  Player_SC_OffRewordInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Player_SC_OffRewordInfo_descriptor_,
      Player_SC_OffRewordInfo::default_instance_,
      Player_SC_OffRewordInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_SC_OffRewordInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_SC_OffRewordInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Player_SC_OffRewordInfo));
  Player_CS_GetOffReword_descriptor_ = file->message_type(20);
  static const int Player_CS_GetOffReword_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_CS_GetOffReword, type_),
  };
  Player_CS_GetOffReword_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Player_CS_GetOffReword_descriptor_,
      Player_CS_GetOffReword::default_instance_,
      Player_CS_GetOffReword_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_CS_GetOffReword, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_CS_GetOffReword, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Player_CS_GetOffReword));
  Player_SC_GetDreadDungeonInfo_descriptor_ = file->message_type(21);
  static const int Player_SC_GetDreadDungeonInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_SC_GetDreadDungeonInfo, draedcounts_),
  };
  Player_SC_GetDreadDungeonInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Player_SC_GetDreadDungeonInfo_descriptor_,
      Player_SC_GetDreadDungeonInfo::default_instance_,
      Player_SC_GetDreadDungeonInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_SC_GetDreadDungeonInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_SC_GetDreadDungeonInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Player_SC_GetDreadDungeonInfo));
  Player_CS_GetAssignPlayerInfo_descriptor_ = file->message_type(22);
  static const int Player_CS_GetAssignPlayerInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_CS_GetAssignPlayerInfo, assignplayerid_),
  };
  Player_CS_GetAssignPlayerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Player_CS_GetAssignPlayerInfo_descriptor_,
      Player_CS_GetAssignPlayerInfo::default_instance_,
      Player_CS_GetAssignPlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_CS_GetAssignPlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_CS_GetAssignPlayerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Player_CS_GetAssignPlayerInfo));
  Player_SC_GetAssignPlayerInfo_descriptor_ = file->message_type(23);
  static const int Player_SC_GetAssignPlayerInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_SC_GetAssignPlayerInfo, datainfo_),
  };
  Player_SC_GetAssignPlayerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Player_SC_GetAssignPlayerInfo_descriptor_,
      Player_SC_GetAssignPlayerInfo::default_instance_,
      Player_SC_GetAssignPlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_SC_GetAssignPlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_SC_GetAssignPlayerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Player_SC_GetAssignPlayerInfo));
  Player_SC_GetTerritoryBattleInfo_descriptor_ = file->message_type(24);
  static const int Player_SC_GetTerritoryBattleInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_SC_GetTerritoryBattleInfo, infolist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_SC_GetTerritoryBattleInfo, rewardid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_SC_GetTerritoryBattleInfo, fightcity_),
  };
  Player_SC_GetTerritoryBattleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Player_SC_GetTerritoryBattleInfo_descriptor_,
      Player_SC_GetTerritoryBattleInfo::default_instance_,
      Player_SC_GetTerritoryBattleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_SC_GetTerritoryBattleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_SC_GetTerritoryBattleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Player_SC_GetTerritoryBattleInfo));
  Player_CS_GetTerBatReward_descriptor_ = file->message_type(25);
  static const int Player_CS_GetTerBatReward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_CS_GetTerBatReward, fieldid_),
  };
  Player_CS_GetTerBatReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Player_CS_GetTerBatReward_descriptor_,
      Player_CS_GetTerBatReward::default_instance_,
      Player_CS_GetTerBatReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_CS_GetTerBatReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_CS_GetTerBatReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Player_CS_GetTerBatReward));
  Player_CS_JoinTerritoryBattle_descriptor_ = file->message_type(26);
  static const int Player_CS_JoinTerritoryBattle_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_CS_JoinTerritoryBattle, fieldid_),
  };
  Player_CS_JoinTerritoryBattle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Player_CS_JoinTerritoryBattle_descriptor_,
      Player_CS_JoinTerritoryBattle::default_instance_,
      Player_CS_JoinTerritoryBattle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_CS_JoinTerritoryBattle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_CS_JoinTerritoryBattle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Player_CS_JoinTerritoryBattle));
  Player_CS_TBCaptureFlag_descriptor_ = file->message_type(27);
  static const int Player_CS_TBCaptureFlag_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_CS_TBCaptureFlag, fieldid_),
  };
  Player_CS_TBCaptureFlag_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Player_CS_TBCaptureFlag_descriptor_,
      Player_CS_TBCaptureFlag::default_instance_,
      Player_CS_TBCaptureFlag_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_CS_TBCaptureFlag, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_CS_TBCaptureFlag, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Player_CS_TBCaptureFlag));
  Player_SC_TerritoryBattleResult_descriptor_ = file->message_type(28);
  static const int Player_SC_TerritoryBattleResult_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_SC_TerritoryBattleResult, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_SC_TerritoryBattleResult, wingid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_SC_TerritoryBattleResult, winname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_SC_TerritoryBattleResult, losegid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_SC_TerritoryBattleResult, onlinetime_),
  };
  Player_SC_TerritoryBattleResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Player_SC_TerritoryBattleResult_descriptor_,
      Player_SC_TerritoryBattleResult::default_instance_,
      Player_SC_TerritoryBattleResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_SC_TerritoryBattleResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_SC_TerritoryBattleResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Player_SC_TerritoryBattleResult));
  Player_CS_QueryPlayerSimpleData_descriptor_ = file->message_type(29);
  static const int Player_CS_QueryPlayerSimpleData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_CS_QueryPlayerSimpleData, charid_),
  };
  Player_CS_QueryPlayerSimpleData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Player_CS_QueryPlayerSimpleData_descriptor_,
      Player_CS_QueryPlayerSimpleData::default_instance_,
      Player_CS_QueryPlayerSimpleData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_CS_QueryPlayerSimpleData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_CS_QueryPlayerSimpleData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Player_CS_QueryPlayerSimpleData));
  PlayerSimpleData_descriptor_ = file->message_type(30);
  static const int PlayerSimpleData_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSimpleData, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSimpleData, career_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSimpleData, charname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSimpleData, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSimpleData, guild_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSimpleData, guild_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSimpleData, dhlevel_),
  };
  PlayerSimpleData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerSimpleData_descriptor_,
      PlayerSimpleData::default_instance_,
      PlayerSimpleData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSimpleData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSimpleData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerSimpleData));
  Player_SC_QueryPlayerSimpleData_descriptor_ = file->message_type(31);
  static const int Player_SC_QueryPlayerSimpleData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_SC_QueryPlayerSimpleData, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_SC_QueryPlayerSimpleData, simple_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_SC_QueryPlayerSimpleData, online_),
  };
  Player_SC_QueryPlayerSimpleData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Player_SC_QueryPlayerSimpleData_descriptor_,
      Player_SC_QueryPlayerSimpleData::default_instance_,
      Player_SC_QueryPlayerSimpleData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_SC_QueryPlayerSimpleData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_SC_QueryPlayerSimpleData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Player_SC_QueryPlayerSimpleData));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_player_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoAttrData_descriptor_, &ProtoAttrData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Player_SC_PlayerAttrData_descriptor_, &Player_SC_PlayerAttrData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Player_SC_PlayerAttrData_Exp_descriptor_, &Player_SC_PlayerAttrData_Exp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MultiProgressCon_descriptor_, &MultiProgressCon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoProgressConData_descriptor_, &ProtoProgressConData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Player_SC_PlayerProgressConData_descriptor_, &Player_SC_PlayerProgressConData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Player_CS_OpenSystem_descriptor_, &Player_CS_OpenSystem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Player_SC_UpdateOpenButton_descriptor_, &Player_SC_UpdateOpenButton::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Player_CS_QueryPlayerData_descriptor_, &Player_CS_QueryPlayerData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Player_SC_QueryPlayerData_descriptor_, &Player_SC_QueryPlayerData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Player_CS_ChangeCharname_descriptor_, &Player_CS_ChangeCharname::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Player_SC_ChangeCharname_descriptor_, &Player_SC_ChangeCharname::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SingleExpRio_descriptor_, &SingleExpRio::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Player_SC_UpdatePlayerExpRio_descriptor_, &Player_SC_UpdatePlayerExpRio::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Player_CS_UpdateGuide_descriptor_, &Player_CS_UpdateGuide::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Player_SC_UpdateGuide_descriptor_, &Player_SC_UpdateGuide::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoSingleCon_descriptor_, &ProtoSingleCon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoProgressConInfo_descriptor_, &ProtoProgressConInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoAllProgressConInfo_descriptor_, &ProtoAllProgressConInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Player_SC_OffRewordInfo_descriptor_, &Player_SC_OffRewordInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Player_CS_GetOffReword_descriptor_, &Player_CS_GetOffReword::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Player_SC_GetDreadDungeonInfo_descriptor_, &Player_SC_GetDreadDungeonInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Player_CS_GetAssignPlayerInfo_descriptor_, &Player_CS_GetAssignPlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Player_SC_GetAssignPlayerInfo_descriptor_, &Player_SC_GetAssignPlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Player_SC_GetTerritoryBattleInfo_descriptor_, &Player_SC_GetTerritoryBattleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Player_CS_GetTerBatReward_descriptor_, &Player_CS_GetTerBatReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Player_CS_JoinTerritoryBattle_descriptor_, &Player_CS_JoinTerritoryBattle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Player_CS_TBCaptureFlag_descriptor_, &Player_CS_TBCaptureFlag::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Player_SC_TerritoryBattleResult_descriptor_, &Player_SC_TerritoryBattleResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Player_CS_QueryPlayerSimpleData_descriptor_, &Player_CS_QueryPlayerSimpleData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerSimpleData_descriptor_, &PlayerSimpleData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Player_SC_QueryPlayerSimpleData_descriptor_, &Player_SC_QueryPlayerSimpleData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_player_2eproto() {
  delete ProtoAttrData::default_instance_;
  delete ProtoAttrData_reflection_;
  delete Player_SC_PlayerAttrData::default_instance_;
  delete Player_SC_PlayerAttrData_reflection_;
  delete Player_SC_PlayerAttrData_Exp::default_instance_;
  delete Player_SC_PlayerAttrData_Exp_reflection_;
  delete MultiProgressCon::default_instance_;
  delete MultiProgressCon_reflection_;
  delete ProtoProgressConData::default_instance_;
  delete ProtoProgressConData_reflection_;
  delete Player_SC_PlayerProgressConData::default_instance_;
  delete Player_SC_PlayerProgressConData_reflection_;
  delete Player_CS_OpenSystem::default_instance_;
  delete Player_CS_OpenSystem_reflection_;
  delete Player_SC_UpdateOpenButton::default_instance_;
  delete Player_SC_UpdateOpenButton_reflection_;
  delete Player_CS_QueryPlayerData::default_instance_;
  delete Player_CS_QueryPlayerData_reflection_;
  delete Player_SC_QueryPlayerData::default_instance_;
  delete Player_SC_QueryPlayerData_reflection_;
  delete Player_CS_ChangeCharname::default_instance_;
  delete Player_CS_ChangeCharname_reflection_;
  delete Player_SC_ChangeCharname::default_instance_;
  delete Player_SC_ChangeCharname_reflection_;
  delete SingleExpRio::default_instance_;
  delete SingleExpRio_reflection_;
  delete Player_SC_UpdatePlayerExpRio::default_instance_;
  delete Player_SC_UpdatePlayerExpRio_reflection_;
  delete Player_CS_UpdateGuide::default_instance_;
  delete Player_CS_UpdateGuide_reflection_;
  delete Player_SC_UpdateGuide::default_instance_;
  delete Player_SC_UpdateGuide_reflection_;
  delete ProtoSingleCon::default_instance_;
  delete ProtoSingleCon_reflection_;
  delete ProtoProgressConInfo::default_instance_;
  delete ProtoProgressConInfo_reflection_;
  delete ProtoAllProgressConInfo::default_instance_;
  delete ProtoAllProgressConInfo_reflection_;
  delete Player_SC_OffRewordInfo::default_instance_;
  delete Player_SC_OffRewordInfo_reflection_;
  delete Player_CS_GetOffReword::default_instance_;
  delete Player_CS_GetOffReword_reflection_;
  delete Player_SC_GetDreadDungeonInfo::default_instance_;
  delete Player_SC_GetDreadDungeonInfo_reflection_;
  delete Player_CS_GetAssignPlayerInfo::default_instance_;
  delete Player_CS_GetAssignPlayerInfo_reflection_;
  delete Player_SC_GetAssignPlayerInfo::default_instance_;
  delete Player_SC_GetAssignPlayerInfo_reflection_;
  delete Player_SC_GetTerritoryBattleInfo::default_instance_;
  delete Player_SC_GetTerritoryBattleInfo_reflection_;
  delete Player_CS_GetTerBatReward::default_instance_;
  delete Player_CS_GetTerBatReward_reflection_;
  delete Player_CS_JoinTerritoryBattle::default_instance_;
  delete Player_CS_JoinTerritoryBattle_reflection_;
  delete Player_CS_TBCaptureFlag::default_instance_;
  delete Player_CS_TBCaptureFlag_reflection_;
  delete Player_SC_TerritoryBattleResult::default_instance_;
  delete Player_SC_TerritoryBattleResult_reflection_;
  delete Player_CS_QueryPlayerSimpleData::default_instance_;
  delete Player_CS_QueryPlayerSimpleData_reflection_;
  delete PlayerSimpleData::default_instance_;
  delete PlayerSimpleData_reflection_;
  delete Player_SC_QueryPlayerSimpleData::default_instance_;
  delete Player_SC_QueryPlayerSimpleData_reflection_;
}

void protobuf_AddDesc_player_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::proto::message::protobuf_AddDesc_common_2eproto();
  ::proto::message::protobuf_AddDesc_item_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014player.proto\022\rproto.message\032\014common.pr"
    "oto\032\nitem.proto\"=\n\rProtoAttrData\022\014\n\004type"
    "\030\001 \002(\005\022\r\n\005value\030\002 \002(\005\022\017\n\007percent\030\003 \001(\r\"J"
    "\n\030Player_SC_PlayerAttrData\022.\n\010attrData\030\001"
    " \003(\0132\034.proto.message.ProtoAttrData\"-\n\034Pl"
    "ayer_SC_PlayerAttrData_Exp\022\r\n\005value\030\001 \002("
    "\004\".\n\020MultiProgressCon\022\r\n\005param\030\001 \002(\005\022\013\n\003"
    "val\030\002 \001(\003\"h\n\024ProtoProgressConData\022\014\n\004typ"
    "e\030\001 \002(\005\022\r\n\005value\030\002 \001(\003\0223\n\nmultivalue\030\003 \003"
    "(\0132\037.proto.message.MultiProgressCon\"W\n\037P"
    "layer_SC_PlayerProgressConData\0224\n\007condat"
    "a\030\001 \003(\0132#.proto.message.ProtoProgressCon"
    "Data\"8\n\024Player_CS_OpenSystem\022\017\n\007open_id\030"
    "\001 \002(\r\022\017\n\007item_id\030\002 \001(\r\"J\n\032Player_SC_Upda"
    "teOpenButton\022,\n\016button_id_list\030\001 \003(\0132\024.p"
    "roto.message.IDNum\"+\n\031Player_CS_QueryPla"
    "yerData\022\016\n\006charid\030\001 \001(\004\"\207\003\n\031Player_SC_Qu"
    "eryPlayerData\022\016\n\006result\030\001 \001(\005\022\016\n\006charid\030"
    "\002 \001(\004\022\016\n\006career\030\003 \001(\005\022\020\n\010charname\030\004 \001(\t\022"
    "\r\n\005level\030\005 \001(\005\022(\n\nequip_list\030\006 \003(\0132\024.pro"
    "to.message.Equip\0220\n\013player_attr\030\007 \001(\0132\033."
    "proto.message.PlayerEffect\022\017\n\007titleID\030\010 "
    "\001(\005\022\023\n\013isHideTitle\030\t \001(\005\022\021\n\ttitleName\030\n "
    "\001(\t\022\025\n\rplayer_combat\030\013 \001(\005\022\022\n\nguild_name"
    "\030\014 \001(\t\022\021\n\tboat_name\030\024 \001(\t\022\022\n\nboat_level\030"
    "\025 \001(\005\022\r\n\005fa_id\030\026 \001(\005\022\020\n\010stage_id\030\027 \001(\005\022\021"
    "\n\tpart_list\030\030 \003(\005\",\n\030Player_CS_ChangeCha"
    "rname\022\020\n\010charname\030\001 \001(\t\"<\n\030Player_SC_Cha"
    "ngeCharname\022\016\n\006result\030\001 \001(\005\022\020\n\010charname\030"
    "\002 \001(\t\"(\n\014SingleExpRio\022\013\n\003nID\030\001 \001(\005\022\013\n\003ri"
    "o\030\002 \001(\005\"M\n\034Player_SC_UpdatePlayerExpRio\022"
    "-\n\010all_info\030\001 \003(\0132\033.proto.message.Single"
    "ExpRio\"=\n\025Player_CS_UpdateGuide\022\021\n\tfinis"
    "hkey\030\001 \001(\t\022\021\n\tguidepart\030\002 \001(\r\"\'\n\025Player_"
    "SC_UpdateGuide\022\016\n\006result\030\001 \001(\005\",\n\016ProtoS"
    "ingleCon\022\r\n\005param\030\001 \001(\005\022\013\n\003val\030\002 \001(\003\"e\n\024"
    "ProtoProgressConInfo\022\r\n\005eTpye\030\001 \001(\005\022\r\n\005v"
    "alue\030\002 \001(\003\022/\n\010mapParam\030\003 \003(\0132\035.proto.mes"
    "sage.ProtoSingleCon\"O\n\027ProtoAllProgressC"
    "onInfo\0224\n\007allInfo\030\001 \003(\0132#.proto.message."
    "ProtoProgressConInfo\"V\n\027Player_SC_OffRew"
    "ordInfo\022\026\n\016accumulatetime\030\001 \001(\004\022\023\n\013lasto"
    "uttime\030\002 \001(\004\022\016\n\006curexp\030\003 \001(\004\"&\n\026Player_C"
    "S_GetOffReword\022\014\n\004type\030\001 \001(\r\"4\n\035Player_S"
    "C_GetDreadDungeonInfo\022\023\n\013draedcounts\030\001 \001"
    "(\r\"7\n\035Player_CS_GetAssignPlayerInfo\022\026\n\016a"
    "ssignplayerid\030\001 \001(\004\"L\n\035Player_SC_GetAssi"
    "gnPlayerInfo\022+\n\010datainfo\030\001 \001(\0132\031.proto.m"
    "essage.PlayerShow\"u\n Player_SC_GetTerrit"
    "oryBattleInfo\022,\n\010infolist\030\001 \003(\0132\032.proto."
    "message.TBFieldInfo\022\020\n\010rewardid\030\002 \003(\r\022\021\n"
    "\tfightcity\030\003 \001(\r\",\n\031Player_CS_GetTerBatR"
    "eward\022\017\n\007fieldid\030\001 \001(\r\"0\n\035Player_CS_Join"
    "TerritoryBattle\022\017\n\007fieldid\030\001 \001(\r\"*\n\027Play"
    "er_CS_TBCaptureFlag\022\017\n\007fieldid\030\001 \001(\r\"s\n\037"
    "Player_SC_TerritoryBattleResult\022\n\n\002id\030\001 "
    "\001(\r\022\016\n\006wingid\030\002 \001(\004\022\017\n\007winname\030\003 \001(\t\022\017\n\007"
    "losegid\030\004 \001(\004\022\022\n\nonlinetime\030\005 \001(\r\"1\n\037Pla"
    "yer_CS_QueryPlayerSimpleData\022\016\n\006charid\030\001"
    " \001(\004\"\212\001\n\020PlayerSimpleData\022\016\n\006charid\030\001 \001("
    "\004\022\016\n\006career\030\002 \001(\005\022\020\n\010charname\030\003 \001(\t\022\r\n\005l"
    "evel\030\004 \001(\005\022\020\n\010guild_id\030\005 \001(\004\022\022\n\nguild_na"
    "me\030\006 \001(\t\022\017\n\007dhlevel\030\007 \001(\r\"w\n\037Player_SC_Q"
    "ueryPlayerSimpleData\022\016\n\006result\030\001 \001(\005\0224\n\013"
    "simple_data\030\002 \001(\0132\037.proto.message.Player"
    "SimpleData\022\016\n\006online\030\003 \001(\005B\017\n\rproto.mess"
    "age", 2643);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "player.proto", &protobuf_RegisterTypes);
  ProtoAttrData::default_instance_ = new ProtoAttrData();
  Player_SC_PlayerAttrData::default_instance_ = new Player_SC_PlayerAttrData();
  Player_SC_PlayerAttrData_Exp::default_instance_ = new Player_SC_PlayerAttrData_Exp();
  MultiProgressCon::default_instance_ = new MultiProgressCon();
  ProtoProgressConData::default_instance_ = new ProtoProgressConData();
  Player_SC_PlayerProgressConData::default_instance_ = new Player_SC_PlayerProgressConData();
  Player_CS_OpenSystem::default_instance_ = new Player_CS_OpenSystem();
  Player_SC_UpdateOpenButton::default_instance_ = new Player_SC_UpdateOpenButton();
  Player_CS_QueryPlayerData::default_instance_ = new Player_CS_QueryPlayerData();
  Player_SC_QueryPlayerData::default_instance_ = new Player_SC_QueryPlayerData();
  Player_CS_ChangeCharname::default_instance_ = new Player_CS_ChangeCharname();
  Player_SC_ChangeCharname::default_instance_ = new Player_SC_ChangeCharname();
  SingleExpRio::default_instance_ = new SingleExpRio();
  Player_SC_UpdatePlayerExpRio::default_instance_ = new Player_SC_UpdatePlayerExpRio();
  Player_CS_UpdateGuide::default_instance_ = new Player_CS_UpdateGuide();
  Player_SC_UpdateGuide::default_instance_ = new Player_SC_UpdateGuide();
  ProtoSingleCon::default_instance_ = new ProtoSingleCon();
  ProtoProgressConInfo::default_instance_ = new ProtoProgressConInfo();
  ProtoAllProgressConInfo::default_instance_ = new ProtoAllProgressConInfo();
  Player_SC_OffRewordInfo::default_instance_ = new Player_SC_OffRewordInfo();
  Player_CS_GetOffReword::default_instance_ = new Player_CS_GetOffReword();
  Player_SC_GetDreadDungeonInfo::default_instance_ = new Player_SC_GetDreadDungeonInfo();
  Player_CS_GetAssignPlayerInfo::default_instance_ = new Player_CS_GetAssignPlayerInfo();
  Player_SC_GetAssignPlayerInfo::default_instance_ = new Player_SC_GetAssignPlayerInfo();
  Player_SC_GetTerritoryBattleInfo::default_instance_ = new Player_SC_GetTerritoryBattleInfo();
  Player_CS_GetTerBatReward::default_instance_ = new Player_CS_GetTerBatReward();
  Player_CS_JoinTerritoryBattle::default_instance_ = new Player_CS_JoinTerritoryBattle();
  Player_CS_TBCaptureFlag::default_instance_ = new Player_CS_TBCaptureFlag();
  Player_SC_TerritoryBattleResult::default_instance_ = new Player_SC_TerritoryBattleResult();
  Player_CS_QueryPlayerSimpleData::default_instance_ = new Player_CS_QueryPlayerSimpleData();
  PlayerSimpleData::default_instance_ = new PlayerSimpleData();
  Player_SC_QueryPlayerSimpleData::default_instance_ = new Player_SC_QueryPlayerSimpleData();
  ProtoAttrData::default_instance_->InitAsDefaultInstance();
  Player_SC_PlayerAttrData::default_instance_->InitAsDefaultInstance();
  Player_SC_PlayerAttrData_Exp::default_instance_->InitAsDefaultInstance();
  MultiProgressCon::default_instance_->InitAsDefaultInstance();
  ProtoProgressConData::default_instance_->InitAsDefaultInstance();
  Player_SC_PlayerProgressConData::default_instance_->InitAsDefaultInstance();
  Player_CS_OpenSystem::default_instance_->InitAsDefaultInstance();
  Player_SC_UpdateOpenButton::default_instance_->InitAsDefaultInstance();
  Player_CS_QueryPlayerData::default_instance_->InitAsDefaultInstance();
  Player_SC_QueryPlayerData::default_instance_->InitAsDefaultInstance();
  Player_CS_ChangeCharname::default_instance_->InitAsDefaultInstance();
  Player_SC_ChangeCharname::default_instance_->InitAsDefaultInstance();
  SingleExpRio::default_instance_->InitAsDefaultInstance();
  Player_SC_UpdatePlayerExpRio::default_instance_->InitAsDefaultInstance();
  Player_CS_UpdateGuide::default_instance_->InitAsDefaultInstance();
  Player_SC_UpdateGuide::default_instance_->InitAsDefaultInstance();
  ProtoSingleCon::default_instance_->InitAsDefaultInstance();
  ProtoProgressConInfo::default_instance_->InitAsDefaultInstance();
  ProtoAllProgressConInfo::default_instance_->InitAsDefaultInstance();
  Player_SC_OffRewordInfo::default_instance_->InitAsDefaultInstance();
  Player_CS_GetOffReword::default_instance_->InitAsDefaultInstance();
  Player_SC_GetDreadDungeonInfo::default_instance_->InitAsDefaultInstance();
  Player_CS_GetAssignPlayerInfo::default_instance_->InitAsDefaultInstance();
  Player_SC_GetAssignPlayerInfo::default_instance_->InitAsDefaultInstance();
  Player_SC_GetTerritoryBattleInfo::default_instance_->InitAsDefaultInstance();
  Player_CS_GetTerBatReward::default_instance_->InitAsDefaultInstance();
  Player_CS_JoinTerritoryBattle::default_instance_->InitAsDefaultInstance();
  Player_CS_TBCaptureFlag::default_instance_->InitAsDefaultInstance();
  Player_SC_TerritoryBattleResult::default_instance_->InitAsDefaultInstance();
  Player_CS_QueryPlayerSimpleData::default_instance_->InitAsDefaultInstance();
  PlayerSimpleData::default_instance_->InitAsDefaultInstance();
  Player_SC_QueryPlayerSimpleData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_player_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_player_2eproto {
  StaticDescriptorInitializer_player_2eproto() {
    protobuf_AddDesc_player_2eproto();
  }
} static_descriptor_initializer_player_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ProtoAttrData::kTypeFieldNumber;
const int ProtoAttrData::kValueFieldNumber;
const int ProtoAttrData::kPercentFieldNumber;
#endif  // !_MSC_VER

ProtoAttrData::ProtoAttrData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoAttrData::InitAsDefaultInstance() {
}

ProtoAttrData::ProtoAttrData(const ProtoAttrData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoAttrData::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  value_ = 0;
  percent_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoAttrData::~ProtoAttrData() {
  SharedDtor();
}

void ProtoAttrData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoAttrData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoAttrData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoAttrData_descriptor_;
}

const ProtoAttrData& ProtoAttrData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_2eproto();
  return *default_instance_;
}

ProtoAttrData* ProtoAttrData::default_instance_ = NULL;

ProtoAttrData* ProtoAttrData::New() const {
  return new ProtoAttrData;
}

void ProtoAttrData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    value_ = 0;
    percent_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoAttrData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // required int32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_percent;
        break;
      }

      // optional uint32 percent = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_percent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &percent_)));
          set_has_percent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoAttrData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // required int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  // optional uint32 percent = 3;
  if (has_percent()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->percent(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoAttrData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // required int32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  // optional uint32 percent = 3;
  if (has_percent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->percent(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoAttrData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

    // optional uint32 percent = 3;
    if (has_percent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->percent());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoAttrData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoAttrData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoAttrData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoAttrData::MergeFrom(const ProtoAttrData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_percent()) {
      set_percent(from.percent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoAttrData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoAttrData::CopyFrom(const ProtoAttrData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoAttrData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ProtoAttrData::Swap(ProtoAttrData* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(percent_, other->percent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoAttrData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoAttrData_descriptor_;
  metadata.reflection = ProtoAttrData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Player_SC_PlayerAttrData::kAttrDataFieldNumber;
#endif  // !_MSC_VER

Player_SC_PlayerAttrData::Player_SC_PlayerAttrData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Player_SC_PlayerAttrData::InitAsDefaultInstance() {
}

Player_SC_PlayerAttrData::Player_SC_PlayerAttrData(const Player_SC_PlayerAttrData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Player_SC_PlayerAttrData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Player_SC_PlayerAttrData::~Player_SC_PlayerAttrData() {
  SharedDtor();
}

void Player_SC_PlayerAttrData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Player_SC_PlayerAttrData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Player_SC_PlayerAttrData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Player_SC_PlayerAttrData_descriptor_;
}

const Player_SC_PlayerAttrData& Player_SC_PlayerAttrData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_2eproto();
  return *default_instance_;
}

Player_SC_PlayerAttrData* Player_SC_PlayerAttrData::default_instance_ = NULL;

Player_SC_PlayerAttrData* Player_SC_PlayerAttrData::New() const {
  return new Player_SC_PlayerAttrData;
}

void Player_SC_PlayerAttrData::Clear() {
  attrdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Player_SC_PlayerAttrData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.message.ProtoAttrData attrData = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attrData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attrdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_attrData;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Player_SC_PlayerAttrData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.message.ProtoAttrData attrData = 1;
  for (int i = 0; i < this->attrdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->attrdata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Player_SC_PlayerAttrData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.message.ProtoAttrData attrData = 1;
  for (int i = 0; i < this->attrdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->attrdata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Player_SC_PlayerAttrData::ByteSize() const {
  int total_size = 0;

  // repeated .proto.message.ProtoAttrData attrData = 1;
  total_size += 1 * this->attrdata_size();
  for (int i = 0; i < this->attrdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attrdata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Player_SC_PlayerAttrData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Player_SC_PlayerAttrData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Player_SC_PlayerAttrData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Player_SC_PlayerAttrData::MergeFrom(const Player_SC_PlayerAttrData& from) {
  GOOGLE_CHECK_NE(&from, this);
  attrdata_.MergeFrom(from.attrdata_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Player_SC_PlayerAttrData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Player_SC_PlayerAttrData::CopyFrom(const Player_SC_PlayerAttrData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Player_SC_PlayerAttrData::IsInitialized() const {

  for (int i = 0; i < attrdata_size(); i++) {
    if (!this->attrdata(i).IsInitialized()) return false;
  }
  return true;
}

void Player_SC_PlayerAttrData::Swap(Player_SC_PlayerAttrData* other) {
  if (other != this) {
    attrdata_.Swap(&other->attrdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Player_SC_PlayerAttrData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Player_SC_PlayerAttrData_descriptor_;
  metadata.reflection = Player_SC_PlayerAttrData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Player_SC_PlayerAttrData_Exp::kValueFieldNumber;
#endif  // !_MSC_VER

Player_SC_PlayerAttrData_Exp::Player_SC_PlayerAttrData_Exp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Player_SC_PlayerAttrData_Exp::InitAsDefaultInstance() {
}

Player_SC_PlayerAttrData_Exp::Player_SC_PlayerAttrData_Exp(const Player_SC_PlayerAttrData_Exp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Player_SC_PlayerAttrData_Exp::SharedCtor() {
  _cached_size_ = 0;
  value_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Player_SC_PlayerAttrData_Exp::~Player_SC_PlayerAttrData_Exp() {
  SharedDtor();
}

void Player_SC_PlayerAttrData_Exp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Player_SC_PlayerAttrData_Exp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Player_SC_PlayerAttrData_Exp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Player_SC_PlayerAttrData_Exp_descriptor_;
}

const Player_SC_PlayerAttrData_Exp& Player_SC_PlayerAttrData_Exp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_2eproto();
  return *default_instance_;
}

Player_SC_PlayerAttrData_Exp* Player_SC_PlayerAttrData_Exp::default_instance_ = NULL;

Player_SC_PlayerAttrData_Exp* Player_SC_PlayerAttrData_Exp::New() const {
  return new Player_SC_PlayerAttrData_Exp;
}

void Player_SC_PlayerAttrData_Exp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    value_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Player_SC_PlayerAttrData_Exp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Player_SC_PlayerAttrData_Exp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Player_SC_PlayerAttrData_Exp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 value = 1;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Player_SC_PlayerAttrData_Exp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Player_SC_PlayerAttrData_Exp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Player_SC_PlayerAttrData_Exp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Player_SC_PlayerAttrData_Exp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Player_SC_PlayerAttrData_Exp::MergeFrom(const Player_SC_PlayerAttrData_Exp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Player_SC_PlayerAttrData_Exp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Player_SC_PlayerAttrData_Exp::CopyFrom(const Player_SC_PlayerAttrData_Exp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Player_SC_PlayerAttrData_Exp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Player_SC_PlayerAttrData_Exp::Swap(Player_SC_PlayerAttrData_Exp* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Player_SC_PlayerAttrData_Exp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Player_SC_PlayerAttrData_Exp_descriptor_;
  metadata.reflection = Player_SC_PlayerAttrData_Exp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MultiProgressCon::kParamFieldNumber;
const int MultiProgressCon::kValFieldNumber;
#endif  // !_MSC_VER

MultiProgressCon::MultiProgressCon()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MultiProgressCon::InitAsDefaultInstance() {
}

MultiProgressCon::MultiProgressCon(const MultiProgressCon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MultiProgressCon::SharedCtor() {
  _cached_size_ = 0;
  param_ = 0;
  val_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MultiProgressCon::~MultiProgressCon() {
  SharedDtor();
}

void MultiProgressCon::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MultiProgressCon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MultiProgressCon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MultiProgressCon_descriptor_;
}

const MultiProgressCon& MultiProgressCon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_2eproto();
  return *default_instance_;
}

MultiProgressCon* MultiProgressCon::default_instance_ = NULL;

MultiProgressCon* MultiProgressCon::New() const {
  return new MultiProgressCon;
}

void MultiProgressCon::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    param_ = 0;
    val_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MultiProgressCon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 param = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &param_)));
          set_has_param();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_val;
        break;
      }

      // optional int64 val = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &val_)));
          set_has_val();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MultiProgressCon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 param = 1;
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->param(), output);
  }

  // optional int64 val = 2;
  if (has_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->val(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MultiProgressCon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 param = 1;
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->param(), target);
  }

  // optional int64 val = 2;
  if (has_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->val(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MultiProgressCon::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 param = 1;
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->param());
    }

    // optional int64 val = 2;
    if (has_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->val());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MultiProgressCon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MultiProgressCon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MultiProgressCon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MultiProgressCon::MergeFrom(const MultiProgressCon& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_val()) {
      set_val(from.val());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MultiProgressCon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiProgressCon::CopyFrom(const MultiProgressCon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiProgressCon::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MultiProgressCon::Swap(MultiProgressCon* other) {
  if (other != this) {
    std::swap(param_, other->param_);
    std::swap(val_, other->val_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MultiProgressCon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MultiProgressCon_descriptor_;
  metadata.reflection = MultiProgressCon_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoProgressConData::kTypeFieldNumber;
const int ProtoProgressConData::kValueFieldNumber;
const int ProtoProgressConData::kMultivalueFieldNumber;
#endif  // !_MSC_VER

ProtoProgressConData::ProtoProgressConData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoProgressConData::InitAsDefaultInstance() {
}

ProtoProgressConData::ProtoProgressConData(const ProtoProgressConData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoProgressConData::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  value_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoProgressConData::~ProtoProgressConData() {
  SharedDtor();
}

void ProtoProgressConData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoProgressConData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoProgressConData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoProgressConData_descriptor_;
}

const ProtoProgressConData& ProtoProgressConData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_2eproto();
  return *default_instance_;
}

ProtoProgressConData* ProtoProgressConData::default_instance_ = NULL;

ProtoProgressConData* ProtoProgressConData::New() const {
  return new ProtoProgressConData;
}

void ProtoProgressConData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    value_ = GOOGLE_LONGLONG(0);
  }
  multivalue_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoProgressConData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional int64 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_multivalue;
        break;
      }

      // repeated .proto.message.MultiProgressCon multivalue = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_multivalue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_multivalue()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_multivalue;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoProgressConData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int64 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->value(), output);
  }

  // repeated .proto.message.MultiProgressCon multivalue = 3;
  for (int i = 0; i < this->multivalue_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->multivalue(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoProgressConData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int64 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->value(), target);
  }

  // repeated .proto.message.MultiProgressCon multivalue = 3;
  for (int i = 0; i < this->multivalue_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->multivalue(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoProgressConData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int64 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->value());
    }

  }
  // repeated .proto.message.MultiProgressCon multivalue = 3;
  total_size += 1 * this->multivalue_size();
  for (int i = 0; i < this->multivalue_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->multivalue(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoProgressConData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoProgressConData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoProgressConData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoProgressConData::MergeFrom(const ProtoProgressConData& from) {
  GOOGLE_CHECK_NE(&from, this);
  multivalue_.MergeFrom(from.multivalue_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoProgressConData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoProgressConData::CopyFrom(const ProtoProgressConData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoProgressConData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < multivalue_size(); i++) {
    if (!this->multivalue(i).IsInitialized()) return false;
  }
  return true;
}

void ProtoProgressConData::Swap(ProtoProgressConData* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    multivalue_.Swap(&other->multivalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoProgressConData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoProgressConData_descriptor_;
  metadata.reflection = ProtoProgressConData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Player_SC_PlayerProgressConData::kCondataFieldNumber;
#endif  // !_MSC_VER

Player_SC_PlayerProgressConData::Player_SC_PlayerProgressConData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Player_SC_PlayerProgressConData::InitAsDefaultInstance() {
}

Player_SC_PlayerProgressConData::Player_SC_PlayerProgressConData(const Player_SC_PlayerProgressConData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Player_SC_PlayerProgressConData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Player_SC_PlayerProgressConData::~Player_SC_PlayerProgressConData() {
  SharedDtor();
}

void Player_SC_PlayerProgressConData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Player_SC_PlayerProgressConData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Player_SC_PlayerProgressConData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Player_SC_PlayerProgressConData_descriptor_;
}

const Player_SC_PlayerProgressConData& Player_SC_PlayerProgressConData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_2eproto();
  return *default_instance_;
}

Player_SC_PlayerProgressConData* Player_SC_PlayerProgressConData::default_instance_ = NULL;

Player_SC_PlayerProgressConData* Player_SC_PlayerProgressConData::New() const {
  return new Player_SC_PlayerProgressConData;
}

void Player_SC_PlayerProgressConData::Clear() {
  condata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Player_SC_PlayerProgressConData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.message.ProtoProgressConData condata = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_condata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_condata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_condata;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Player_SC_PlayerProgressConData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.message.ProtoProgressConData condata = 1;
  for (int i = 0; i < this->condata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->condata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Player_SC_PlayerProgressConData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.message.ProtoProgressConData condata = 1;
  for (int i = 0; i < this->condata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->condata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Player_SC_PlayerProgressConData::ByteSize() const {
  int total_size = 0;

  // repeated .proto.message.ProtoProgressConData condata = 1;
  total_size += 1 * this->condata_size();
  for (int i = 0; i < this->condata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->condata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Player_SC_PlayerProgressConData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Player_SC_PlayerProgressConData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Player_SC_PlayerProgressConData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Player_SC_PlayerProgressConData::MergeFrom(const Player_SC_PlayerProgressConData& from) {
  GOOGLE_CHECK_NE(&from, this);
  condata_.MergeFrom(from.condata_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Player_SC_PlayerProgressConData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Player_SC_PlayerProgressConData::CopyFrom(const Player_SC_PlayerProgressConData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Player_SC_PlayerProgressConData::IsInitialized() const {

  for (int i = 0; i < condata_size(); i++) {
    if (!this->condata(i).IsInitialized()) return false;
  }
  return true;
}

void Player_SC_PlayerProgressConData::Swap(Player_SC_PlayerProgressConData* other) {
  if (other != this) {
    condata_.Swap(&other->condata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Player_SC_PlayerProgressConData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Player_SC_PlayerProgressConData_descriptor_;
  metadata.reflection = Player_SC_PlayerProgressConData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Player_CS_OpenSystem::kOpenIdFieldNumber;
const int Player_CS_OpenSystem::kItemIdFieldNumber;
#endif  // !_MSC_VER

Player_CS_OpenSystem::Player_CS_OpenSystem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Player_CS_OpenSystem::InitAsDefaultInstance() {
}

Player_CS_OpenSystem::Player_CS_OpenSystem(const Player_CS_OpenSystem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Player_CS_OpenSystem::SharedCtor() {
  _cached_size_ = 0;
  open_id_ = 0u;
  item_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Player_CS_OpenSystem::~Player_CS_OpenSystem() {
  SharedDtor();
}

void Player_CS_OpenSystem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Player_CS_OpenSystem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Player_CS_OpenSystem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Player_CS_OpenSystem_descriptor_;
}

const Player_CS_OpenSystem& Player_CS_OpenSystem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_2eproto();
  return *default_instance_;
}

Player_CS_OpenSystem* Player_CS_OpenSystem::default_instance_ = NULL;

Player_CS_OpenSystem* Player_CS_OpenSystem::New() const {
  return new Player_CS_OpenSystem;
}

void Player_CS_OpenSystem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    open_id_ = 0u;
    item_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Player_CS_OpenSystem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 open_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &open_id_)));
          set_has_open_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_id;
        break;
      }

      // optional uint32 item_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Player_CS_OpenSystem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 open_id = 1;
  if (has_open_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->open_id(), output);
  }

  // optional uint32 item_id = 2;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->item_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Player_CS_OpenSystem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 open_id = 1;
  if (has_open_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->open_id(), target);
  }

  // optional uint32 item_id = 2;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->item_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Player_CS_OpenSystem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 open_id = 1;
    if (has_open_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->open_id());
    }

    // optional uint32 item_id = 2;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Player_CS_OpenSystem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Player_CS_OpenSystem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Player_CS_OpenSystem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Player_CS_OpenSystem::MergeFrom(const Player_CS_OpenSystem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_open_id()) {
      set_open_id(from.open_id());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Player_CS_OpenSystem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Player_CS_OpenSystem::CopyFrom(const Player_CS_OpenSystem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Player_CS_OpenSystem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Player_CS_OpenSystem::Swap(Player_CS_OpenSystem* other) {
  if (other != this) {
    std::swap(open_id_, other->open_id_);
    std::swap(item_id_, other->item_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Player_CS_OpenSystem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Player_CS_OpenSystem_descriptor_;
  metadata.reflection = Player_CS_OpenSystem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Player_SC_UpdateOpenButton::kButtonIdListFieldNumber;
#endif  // !_MSC_VER

Player_SC_UpdateOpenButton::Player_SC_UpdateOpenButton()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Player_SC_UpdateOpenButton::InitAsDefaultInstance() {
}

Player_SC_UpdateOpenButton::Player_SC_UpdateOpenButton(const Player_SC_UpdateOpenButton& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Player_SC_UpdateOpenButton::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Player_SC_UpdateOpenButton::~Player_SC_UpdateOpenButton() {
  SharedDtor();
}

void Player_SC_UpdateOpenButton::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Player_SC_UpdateOpenButton::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Player_SC_UpdateOpenButton::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Player_SC_UpdateOpenButton_descriptor_;
}

const Player_SC_UpdateOpenButton& Player_SC_UpdateOpenButton::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_2eproto();
  return *default_instance_;
}

Player_SC_UpdateOpenButton* Player_SC_UpdateOpenButton::default_instance_ = NULL;

Player_SC_UpdateOpenButton* Player_SC_UpdateOpenButton::New() const {
  return new Player_SC_UpdateOpenButton;
}

void Player_SC_UpdateOpenButton::Clear() {
  button_id_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Player_SC_UpdateOpenButton::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.message.IDNum button_id_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_button_id_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_button_id_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_button_id_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Player_SC_UpdateOpenButton::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.message.IDNum button_id_list = 1;
  for (int i = 0; i < this->button_id_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->button_id_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Player_SC_UpdateOpenButton::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.message.IDNum button_id_list = 1;
  for (int i = 0; i < this->button_id_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->button_id_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Player_SC_UpdateOpenButton::ByteSize() const {
  int total_size = 0;

  // repeated .proto.message.IDNum button_id_list = 1;
  total_size += 1 * this->button_id_list_size();
  for (int i = 0; i < this->button_id_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->button_id_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Player_SC_UpdateOpenButton::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Player_SC_UpdateOpenButton* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Player_SC_UpdateOpenButton*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Player_SC_UpdateOpenButton::MergeFrom(const Player_SC_UpdateOpenButton& from) {
  GOOGLE_CHECK_NE(&from, this);
  button_id_list_.MergeFrom(from.button_id_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Player_SC_UpdateOpenButton::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Player_SC_UpdateOpenButton::CopyFrom(const Player_SC_UpdateOpenButton& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Player_SC_UpdateOpenButton::IsInitialized() const {

  return true;
}

void Player_SC_UpdateOpenButton::Swap(Player_SC_UpdateOpenButton* other) {
  if (other != this) {
    button_id_list_.Swap(&other->button_id_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Player_SC_UpdateOpenButton::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Player_SC_UpdateOpenButton_descriptor_;
  metadata.reflection = Player_SC_UpdateOpenButton_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Player_CS_QueryPlayerData::kCharidFieldNumber;
#endif  // !_MSC_VER

Player_CS_QueryPlayerData::Player_CS_QueryPlayerData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Player_CS_QueryPlayerData::InitAsDefaultInstance() {
}

Player_CS_QueryPlayerData::Player_CS_QueryPlayerData(const Player_CS_QueryPlayerData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Player_CS_QueryPlayerData::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Player_CS_QueryPlayerData::~Player_CS_QueryPlayerData() {
  SharedDtor();
}

void Player_CS_QueryPlayerData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Player_CS_QueryPlayerData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Player_CS_QueryPlayerData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Player_CS_QueryPlayerData_descriptor_;
}

const Player_CS_QueryPlayerData& Player_CS_QueryPlayerData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_2eproto();
  return *default_instance_;
}

Player_CS_QueryPlayerData* Player_CS_QueryPlayerData::default_instance_ = NULL;

Player_CS_QueryPlayerData* Player_CS_QueryPlayerData::New() const {
  return new Player_CS_QueryPlayerData;
}

void Player_CS_QueryPlayerData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Player_CS_QueryPlayerData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Player_CS_QueryPlayerData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Player_CS_QueryPlayerData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Player_CS_QueryPlayerData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Player_CS_QueryPlayerData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Player_CS_QueryPlayerData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Player_CS_QueryPlayerData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Player_CS_QueryPlayerData::MergeFrom(const Player_CS_QueryPlayerData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Player_CS_QueryPlayerData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Player_CS_QueryPlayerData::CopyFrom(const Player_CS_QueryPlayerData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Player_CS_QueryPlayerData::IsInitialized() const {

  return true;
}

void Player_CS_QueryPlayerData::Swap(Player_CS_QueryPlayerData* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Player_CS_QueryPlayerData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Player_CS_QueryPlayerData_descriptor_;
  metadata.reflection = Player_CS_QueryPlayerData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Player_SC_QueryPlayerData::kResultFieldNumber;
const int Player_SC_QueryPlayerData::kCharidFieldNumber;
const int Player_SC_QueryPlayerData::kCareerFieldNumber;
const int Player_SC_QueryPlayerData::kCharnameFieldNumber;
const int Player_SC_QueryPlayerData::kLevelFieldNumber;
const int Player_SC_QueryPlayerData::kEquipListFieldNumber;
const int Player_SC_QueryPlayerData::kPlayerAttrFieldNumber;
const int Player_SC_QueryPlayerData::kTitleIDFieldNumber;
const int Player_SC_QueryPlayerData::kIsHideTitleFieldNumber;
const int Player_SC_QueryPlayerData::kTitleNameFieldNumber;
const int Player_SC_QueryPlayerData::kPlayerCombatFieldNumber;
const int Player_SC_QueryPlayerData::kGuildNameFieldNumber;
const int Player_SC_QueryPlayerData::kBoatNameFieldNumber;
const int Player_SC_QueryPlayerData::kBoatLevelFieldNumber;
const int Player_SC_QueryPlayerData::kFaIdFieldNumber;
const int Player_SC_QueryPlayerData::kStageIdFieldNumber;
const int Player_SC_QueryPlayerData::kPartListFieldNumber;
#endif  // !_MSC_VER

Player_SC_QueryPlayerData::Player_SC_QueryPlayerData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Player_SC_QueryPlayerData::InitAsDefaultInstance() {
  player_attr_ = const_cast< ::proto::message::PlayerEffect*>(&::proto::message::PlayerEffect::default_instance());
}

Player_SC_QueryPlayerData::Player_SC_QueryPlayerData(const Player_SC_QueryPlayerData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Player_SC_QueryPlayerData::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  career_ = 0;
  charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0;
  player_attr_ = NULL;
  titleid_ = 0;
  ishidetitle_ = 0;
  titlename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  player_combat_ = 0;
  guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  boat_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  boat_level_ = 0;
  fa_id_ = 0;
  stage_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Player_SC_QueryPlayerData::~Player_SC_QueryPlayerData() {
  SharedDtor();
}

void Player_SC_QueryPlayerData::SharedDtor() {
  if (charname_ != &::google::protobuf::internal::kEmptyString) {
    delete charname_;
  }
  if (titlename_ != &::google::protobuf::internal::kEmptyString) {
    delete titlename_;
  }
  if (guild_name_ != &::google::protobuf::internal::kEmptyString) {
    delete guild_name_;
  }
  if (boat_name_ != &::google::protobuf::internal::kEmptyString) {
    delete boat_name_;
  }
  if (this != default_instance_) {
    delete player_attr_;
  }
}

void Player_SC_QueryPlayerData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Player_SC_QueryPlayerData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Player_SC_QueryPlayerData_descriptor_;
}

const Player_SC_QueryPlayerData& Player_SC_QueryPlayerData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_2eproto();
  return *default_instance_;
}

Player_SC_QueryPlayerData* Player_SC_QueryPlayerData::default_instance_ = NULL;

Player_SC_QueryPlayerData* Player_SC_QueryPlayerData::New() const {
  return new Player_SC_QueryPlayerData;
}

void Player_SC_QueryPlayerData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    charid_ = GOOGLE_ULONGLONG(0);
    career_ = 0;
    if (has_charname()) {
      if (charname_ != &::google::protobuf::internal::kEmptyString) {
        charname_->clear();
      }
    }
    level_ = 0;
    if (has_player_attr()) {
      if (player_attr_ != NULL) player_attr_->::proto::message::PlayerEffect::Clear();
    }
    titleid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    ishidetitle_ = 0;
    if (has_titlename()) {
      if (titlename_ != &::google::protobuf::internal::kEmptyString) {
        titlename_->clear();
      }
    }
    player_combat_ = 0;
    if (has_guild_name()) {
      if (guild_name_ != &::google::protobuf::internal::kEmptyString) {
        guild_name_->clear();
      }
    }
    if (has_boat_name()) {
      if (boat_name_ != &::google::protobuf::internal::kEmptyString) {
        boat_name_->clear();
      }
    }
    boat_level_ = 0;
    fa_id_ = 0;
    stage_id_ = 0;
  }
  equip_list_.Clear();
  part_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Player_SC_QueryPlayerData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_career;
        break;
      }

      // optional int32 career = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_career:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &career_)));
          set_has_career();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_charname;
        break;
      }

      // optional string charname = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_charname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_charname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->charname().data(), this->charname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_level;
        break;
      }

      // optional int32 level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_equip_list;
        break;
      }

      // repeated .proto.message.Equip equip_list = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equip_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_equip_list;
        if (input->ExpectTag(58)) goto parse_player_attr;
        break;
      }

      // optional .proto.message.PlayerEffect player_attr = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_attr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_titleID;
        break;
      }

      // optional int32 titleID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_titleID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &titleid_)));
          set_has_titleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_isHideTitle;
        break;
      }

      // optional int32 isHideTitle = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isHideTitle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ishidetitle_)));
          set_has_ishidetitle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_titleName;
        break;
      }

      // optional string titleName = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_titleName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_titlename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->titlename().data(), this->titlename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_player_combat;
        break;
      }

      // optional int32 player_combat = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_combat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_combat_)));
          set_has_player_combat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_guild_name;
        break;
      }

      // optional string guild_name = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guild_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guild_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guild_name().data(), this->guild_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_boat_name;
        break;
      }

      // optional string boat_name = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_boat_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_boat_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->boat_name().data(), this->boat_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_boat_level;
        break;
      }

      // optional int32 boat_level = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boat_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &boat_level_)));
          set_has_boat_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_fa_id;
        break;
      }

      // optional int32 fa_id = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fa_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fa_id_)));
          set_has_fa_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_stage_id;
        break;
      }

      // optional int32 stage_id = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stage_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stage_id_)));
          set_has_stage_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_part_list;
        break;
      }

      // repeated int32 part_list = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_part_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 192, input, this->mutable_part_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_part_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_part_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Player_SC_QueryPlayerData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional uint64 charid = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->charid(), output);
  }

  // optional int32 career = 3;
  if (has_career()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->career(), output);
  }

  // optional string charname = 4;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->charname(), output);
  }

  // optional int32 level = 5;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->level(), output);
  }

  // repeated .proto.message.Equip equip_list = 6;
  for (int i = 0; i < this->equip_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->equip_list(i), output);
  }

  // optional .proto.message.PlayerEffect player_attr = 7;
  if (has_player_attr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->player_attr(), output);
  }

  // optional int32 titleID = 8;
  if (has_titleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->titleid(), output);
  }

  // optional int32 isHideTitle = 9;
  if (has_ishidetitle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->ishidetitle(), output);
  }

  // optional string titleName = 10;
  if (has_titlename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->titlename().data(), this->titlename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->titlename(), output);
  }

  // optional int32 player_combat = 11;
  if (has_player_combat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->player_combat(), output);
  }

  // optional string guild_name = 12;
  if (has_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guild_name().data(), this->guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->guild_name(), output);
  }

  // optional string boat_name = 20;
  if (has_boat_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->boat_name().data(), this->boat_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->boat_name(), output);
  }

  // optional int32 boat_level = 21;
  if (has_boat_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->boat_level(), output);
  }

  // optional int32 fa_id = 22;
  if (has_fa_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->fa_id(), output);
  }

  // optional int32 stage_id = 23;
  if (has_stage_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->stage_id(), output);
  }

  // repeated int32 part_list = 24;
  for (int i = 0; i < this->part_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      24, this->part_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Player_SC_QueryPlayerData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional uint64 charid = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->charid(), target);
  }

  // optional int32 career = 3;
  if (has_career()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->career(), target);
  }

  // optional string charname = 4;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->charname(), target);
  }

  // optional int32 level = 5;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->level(), target);
  }

  // repeated .proto.message.Equip equip_list = 6;
  for (int i = 0; i < this->equip_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->equip_list(i), target);
  }

  // optional .proto.message.PlayerEffect player_attr = 7;
  if (has_player_attr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->player_attr(), target);
  }

  // optional int32 titleID = 8;
  if (has_titleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->titleid(), target);
  }

  // optional int32 isHideTitle = 9;
  if (has_ishidetitle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->ishidetitle(), target);
  }

  // optional string titleName = 10;
  if (has_titlename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->titlename().data(), this->titlename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->titlename(), target);
  }

  // optional int32 player_combat = 11;
  if (has_player_combat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->player_combat(), target);
  }

  // optional string guild_name = 12;
  if (has_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guild_name().data(), this->guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->guild_name(), target);
  }

  // optional string boat_name = 20;
  if (has_boat_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->boat_name().data(), this->boat_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->boat_name(), target);
  }

  // optional int32 boat_level = 21;
  if (has_boat_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->boat_level(), target);
  }

  // optional int32 fa_id = 22;
  if (has_fa_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->fa_id(), target);
  }

  // optional int32 stage_id = 23;
  if (has_stage_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->stage_id(), target);
  }

  // repeated int32 part_list = 24;
  for (int i = 0; i < this->part_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(24, this->part_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Player_SC_QueryPlayerData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional uint64 charid = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional int32 career = 3;
    if (has_career()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->career());
    }

    // optional string charname = 4;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->charname());
    }

    // optional int32 level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional .proto.message.PlayerEffect player_attr = 7;
    if (has_player_attr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_attr());
    }

    // optional int32 titleID = 8;
    if (has_titleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->titleid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 isHideTitle = 9;
    if (has_ishidetitle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ishidetitle());
    }

    // optional string titleName = 10;
    if (has_titlename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->titlename());
    }

    // optional int32 player_combat = 11;
    if (has_player_combat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_combat());
    }

    // optional string guild_name = 12;
    if (has_guild_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guild_name());
    }

    // optional string boat_name = 20;
    if (has_boat_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->boat_name());
    }

    // optional int32 boat_level = 21;
    if (has_boat_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->boat_level());
    }

    // optional int32 fa_id = 22;
    if (has_fa_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fa_id());
    }

    // optional int32 stage_id = 23;
    if (has_stage_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stage_id());
    }

  }
  // repeated .proto.message.Equip equip_list = 6;
  total_size += 1 * this->equip_list_size();
  for (int i = 0; i < this->equip_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equip_list(i));
  }

  // repeated int32 part_list = 24;
  {
    int data_size = 0;
    for (int i = 0; i < this->part_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->part_list(i));
    }
    total_size += 2 * this->part_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Player_SC_QueryPlayerData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Player_SC_QueryPlayerData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Player_SC_QueryPlayerData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Player_SC_QueryPlayerData::MergeFrom(const Player_SC_QueryPlayerData& from) {
  GOOGLE_CHECK_NE(&from, this);
  equip_list_.MergeFrom(from.equip_list_);
  part_list_.MergeFrom(from.part_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_career()) {
      set_career(from.career());
    }
    if (from.has_charname()) {
      set_charname(from.charname());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_player_attr()) {
      mutable_player_attr()->::proto::message::PlayerEffect::MergeFrom(from.player_attr());
    }
    if (from.has_titleid()) {
      set_titleid(from.titleid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ishidetitle()) {
      set_ishidetitle(from.ishidetitle());
    }
    if (from.has_titlename()) {
      set_titlename(from.titlename());
    }
    if (from.has_player_combat()) {
      set_player_combat(from.player_combat());
    }
    if (from.has_guild_name()) {
      set_guild_name(from.guild_name());
    }
    if (from.has_boat_name()) {
      set_boat_name(from.boat_name());
    }
    if (from.has_boat_level()) {
      set_boat_level(from.boat_level());
    }
    if (from.has_fa_id()) {
      set_fa_id(from.fa_id());
    }
    if (from.has_stage_id()) {
      set_stage_id(from.stage_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Player_SC_QueryPlayerData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Player_SC_QueryPlayerData::CopyFrom(const Player_SC_QueryPlayerData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Player_SC_QueryPlayerData::IsInitialized() const {

  return true;
}

void Player_SC_QueryPlayerData::Swap(Player_SC_QueryPlayerData* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(charid_, other->charid_);
    std::swap(career_, other->career_);
    std::swap(charname_, other->charname_);
    std::swap(level_, other->level_);
    equip_list_.Swap(&other->equip_list_);
    std::swap(player_attr_, other->player_attr_);
    std::swap(titleid_, other->titleid_);
    std::swap(ishidetitle_, other->ishidetitle_);
    std::swap(titlename_, other->titlename_);
    std::swap(player_combat_, other->player_combat_);
    std::swap(guild_name_, other->guild_name_);
    std::swap(boat_name_, other->boat_name_);
    std::swap(boat_level_, other->boat_level_);
    std::swap(fa_id_, other->fa_id_);
    std::swap(stage_id_, other->stage_id_);
    part_list_.Swap(&other->part_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Player_SC_QueryPlayerData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Player_SC_QueryPlayerData_descriptor_;
  metadata.reflection = Player_SC_QueryPlayerData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Player_CS_ChangeCharname::kCharnameFieldNumber;
#endif  // !_MSC_VER

Player_CS_ChangeCharname::Player_CS_ChangeCharname()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Player_CS_ChangeCharname::InitAsDefaultInstance() {
}

Player_CS_ChangeCharname::Player_CS_ChangeCharname(const Player_CS_ChangeCharname& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Player_CS_ChangeCharname::SharedCtor() {
  _cached_size_ = 0;
  charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Player_CS_ChangeCharname::~Player_CS_ChangeCharname() {
  SharedDtor();
}

void Player_CS_ChangeCharname::SharedDtor() {
  if (charname_ != &::google::protobuf::internal::kEmptyString) {
    delete charname_;
  }
  if (this != default_instance_) {
  }
}

void Player_CS_ChangeCharname::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Player_CS_ChangeCharname::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Player_CS_ChangeCharname_descriptor_;
}

const Player_CS_ChangeCharname& Player_CS_ChangeCharname::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_2eproto();
  return *default_instance_;
}

Player_CS_ChangeCharname* Player_CS_ChangeCharname::default_instance_ = NULL;

Player_CS_ChangeCharname* Player_CS_ChangeCharname::New() const {
  return new Player_CS_ChangeCharname;
}

void Player_CS_ChangeCharname::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_charname()) {
      if (charname_ != &::google::protobuf::internal::kEmptyString) {
        charname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Player_CS_ChangeCharname::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string charname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_charname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->charname().data(), this->charname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Player_CS_ChangeCharname::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string charname = 1;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->charname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Player_CS_ChangeCharname::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string charname = 1;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->charname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Player_CS_ChangeCharname::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string charname = 1;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->charname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Player_CS_ChangeCharname::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Player_CS_ChangeCharname* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Player_CS_ChangeCharname*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Player_CS_ChangeCharname::MergeFrom(const Player_CS_ChangeCharname& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charname()) {
      set_charname(from.charname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Player_CS_ChangeCharname::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Player_CS_ChangeCharname::CopyFrom(const Player_CS_ChangeCharname& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Player_CS_ChangeCharname::IsInitialized() const {

  return true;
}

void Player_CS_ChangeCharname::Swap(Player_CS_ChangeCharname* other) {
  if (other != this) {
    std::swap(charname_, other->charname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Player_CS_ChangeCharname::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Player_CS_ChangeCharname_descriptor_;
  metadata.reflection = Player_CS_ChangeCharname_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Player_SC_ChangeCharname::kResultFieldNumber;
const int Player_SC_ChangeCharname::kCharnameFieldNumber;
#endif  // !_MSC_VER

Player_SC_ChangeCharname::Player_SC_ChangeCharname()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Player_SC_ChangeCharname::InitAsDefaultInstance() {
}

Player_SC_ChangeCharname::Player_SC_ChangeCharname(const Player_SC_ChangeCharname& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Player_SC_ChangeCharname::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Player_SC_ChangeCharname::~Player_SC_ChangeCharname() {
  SharedDtor();
}

void Player_SC_ChangeCharname::SharedDtor() {
  if (charname_ != &::google::protobuf::internal::kEmptyString) {
    delete charname_;
  }
  if (this != default_instance_) {
  }
}

void Player_SC_ChangeCharname::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Player_SC_ChangeCharname::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Player_SC_ChangeCharname_descriptor_;
}

const Player_SC_ChangeCharname& Player_SC_ChangeCharname::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_2eproto();
  return *default_instance_;
}

Player_SC_ChangeCharname* Player_SC_ChangeCharname::default_instance_ = NULL;

Player_SC_ChangeCharname* Player_SC_ChangeCharname::New() const {
  return new Player_SC_ChangeCharname;
}

void Player_SC_ChangeCharname::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_charname()) {
      if (charname_ != &::google::protobuf::internal::kEmptyString) {
        charname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Player_SC_ChangeCharname::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_charname;
        break;
      }

      // optional string charname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_charname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_charname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->charname().data(), this->charname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Player_SC_ChangeCharname::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional string charname = 2;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->charname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Player_SC_ChangeCharname::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional string charname = 2;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->charname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Player_SC_ChangeCharname::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional string charname = 2;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->charname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Player_SC_ChangeCharname::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Player_SC_ChangeCharname* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Player_SC_ChangeCharname*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Player_SC_ChangeCharname::MergeFrom(const Player_SC_ChangeCharname& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_charname()) {
      set_charname(from.charname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Player_SC_ChangeCharname::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Player_SC_ChangeCharname::CopyFrom(const Player_SC_ChangeCharname& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Player_SC_ChangeCharname::IsInitialized() const {

  return true;
}

void Player_SC_ChangeCharname::Swap(Player_SC_ChangeCharname* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(charname_, other->charname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Player_SC_ChangeCharname::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Player_SC_ChangeCharname_descriptor_;
  metadata.reflection = Player_SC_ChangeCharname_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SingleExpRio::kNIDFieldNumber;
const int SingleExpRio::kRioFieldNumber;
#endif  // !_MSC_VER

SingleExpRio::SingleExpRio()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SingleExpRio::InitAsDefaultInstance() {
}

SingleExpRio::SingleExpRio(const SingleExpRio& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SingleExpRio::SharedCtor() {
  _cached_size_ = 0;
  nid_ = 0;
  rio_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SingleExpRio::~SingleExpRio() {
  SharedDtor();
}

void SingleExpRio::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SingleExpRio::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SingleExpRio::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SingleExpRio_descriptor_;
}

const SingleExpRio& SingleExpRio::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_2eproto();
  return *default_instance_;
}

SingleExpRio* SingleExpRio::default_instance_ = NULL;

SingleExpRio* SingleExpRio::New() const {
  return new SingleExpRio;
}

void SingleExpRio::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nid_ = 0;
    rio_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SingleExpRio::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 nID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nid_)));
          set_has_nid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rio;
        break;
      }

      // optional int32 rio = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rio_)));
          set_has_rio();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SingleExpRio::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 nID = 1;
  if (has_nid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nid(), output);
  }

  // optional int32 rio = 2;
  if (has_rio()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rio(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SingleExpRio::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 nID = 1;
  if (has_nid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nid(), target);
  }

  // optional int32 rio = 2;
  if (has_rio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rio(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SingleExpRio::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 nID = 1;
    if (has_nid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nid());
    }

    // optional int32 rio = 2;
    if (has_rio()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rio());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SingleExpRio::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SingleExpRio* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SingleExpRio*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SingleExpRio::MergeFrom(const SingleExpRio& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nid()) {
      set_nid(from.nid());
    }
    if (from.has_rio()) {
      set_rio(from.rio());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SingleExpRio::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleExpRio::CopyFrom(const SingleExpRio& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleExpRio::IsInitialized() const {

  return true;
}

void SingleExpRio::Swap(SingleExpRio* other) {
  if (other != this) {
    std::swap(nid_, other->nid_);
    std::swap(rio_, other->rio_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SingleExpRio::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SingleExpRio_descriptor_;
  metadata.reflection = SingleExpRio_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Player_SC_UpdatePlayerExpRio::kAllInfoFieldNumber;
#endif  // !_MSC_VER

Player_SC_UpdatePlayerExpRio::Player_SC_UpdatePlayerExpRio()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Player_SC_UpdatePlayerExpRio::InitAsDefaultInstance() {
}

Player_SC_UpdatePlayerExpRio::Player_SC_UpdatePlayerExpRio(const Player_SC_UpdatePlayerExpRio& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Player_SC_UpdatePlayerExpRio::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Player_SC_UpdatePlayerExpRio::~Player_SC_UpdatePlayerExpRio() {
  SharedDtor();
}

void Player_SC_UpdatePlayerExpRio::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Player_SC_UpdatePlayerExpRio::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Player_SC_UpdatePlayerExpRio::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Player_SC_UpdatePlayerExpRio_descriptor_;
}

const Player_SC_UpdatePlayerExpRio& Player_SC_UpdatePlayerExpRio::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_2eproto();
  return *default_instance_;
}

Player_SC_UpdatePlayerExpRio* Player_SC_UpdatePlayerExpRio::default_instance_ = NULL;

Player_SC_UpdatePlayerExpRio* Player_SC_UpdatePlayerExpRio::New() const {
  return new Player_SC_UpdatePlayerExpRio;
}

void Player_SC_UpdatePlayerExpRio::Clear() {
  all_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Player_SC_UpdatePlayerExpRio::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.message.SingleExpRio all_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_all_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_all_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_all_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Player_SC_UpdatePlayerExpRio::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.message.SingleExpRio all_info = 1;
  for (int i = 0; i < this->all_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->all_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Player_SC_UpdatePlayerExpRio::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.message.SingleExpRio all_info = 1;
  for (int i = 0; i < this->all_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->all_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Player_SC_UpdatePlayerExpRio::ByteSize() const {
  int total_size = 0;

  // repeated .proto.message.SingleExpRio all_info = 1;
  total_size += 1 * this->all_info_size();
  for (int i = 0; i < this->all_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->all_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Player_SC_UpdatePlayerExpRio::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Player_SC_UpdatePlayerExpRio* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Player_SC_UpdatePlayerExpRio*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Player_SC_UpdatePlayerExpRio::MergeFrom(const Player_SC_UpdatePlayerExpRio& from) {
  GOOGLE_CHECK_NE(&from, this);
  all_info_.MergeFrom(from.all_info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Player_SC_UpdatePlayerExpRio::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Player_SC_UpdatePlayerExpRio::CopyFrom(const Player_SC_UpdatePlayerExpRio& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Player_SC_UpdatePlayerExpRio::IsInitialized() const {

  return true;
}

void Player_SC_UpdatePlayerExpRio::Swap(Player_SC_UpdatePlayerExpRio* other) {
  if (other != this) {
    all_info_.Swap(&other->all_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Player_SC_UpdatePlayerExpRio::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Player_SC_UpdatePlayerExpRio_descriptor_;
  metadata.reflection = Player_SC_UpdatePlayerExpRio_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Player_CS_UpdateGuide::kFinishkeyFieldNumber;
const int Player_CS_UpdateGuide::kGuidepartFieldNumber;
#endif  // !_MSC_VER

Player_CS_UpdateGuide::Player_CS_UpdateGuide()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Player_CS_UpdateGuide::InitAsDefaultInstance() {
}

Player_CS_UpdateGuide::Player_CS_UpdateGuide(const Player_CS_UpdateGuide& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Player_CS_UpdateGuide::SharedCtor() {
  _cached_size_ = 0;
  finishkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  guidepart_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Player_CS_UpdateGuide::~Player_CS_UpdateGuide() {
  SharedDtor();
}

void Player_CS_UpdateGuide::SharedDtor() {
  if (finishkey_ != &::google::protobuf::internal::kEmptyString) {
    delete finishkey_;
  }
  if (this != default_instance_) {
  }
}

void Player_CS_UpdateGuide::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Player_CS_UpdateGuide::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Player_CS_UpdateGuide_descriptor_;
}

const Player_CS_UpdateGuide& Player_CS_UpdateGuide::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_2eproto();
  return *default_instance_;
}

Player_CS_UpdateGuide* Player_CS_UpdateGuide::default_instance_ = NULL;

Player_CS_UpdateGuide* Player_CS_UpdateGuide::New() const {
  return new Player_CS_UpdateGuide;
}

void Player_CS_UpdateGuide::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_finishkey()) {
      if (finishkey_ != &::google::protobuf::internal::kEmptyString) {
        finishkey_->clear();
      }
    }
    guidepart_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Player_CS_UpdateGuide::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string finishkey = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_finishkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->finishkey().data(), this->finishkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_guidepart;
        break;
      }

      // optional uint32 guidepart = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guidepart:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guidepart_)));
          set_has_guidepart();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Player_CS_UpdateGuide::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string finishkey = 1;
  if (has_finishkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->finishkey().data(), this->finishkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->finishkey(), output);
  }

  // optional uint32 guidepart = 2;
  if (has_guidepart()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->guidepart(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Player_CS_UpdateGuide::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string finishkey = 1;
  if (has_finishkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->finishkey().data(), this->finishkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->finishkey(), target);
  }

  // optional uint32 guidepart = 2;
  if (has_guidepart()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->guidepart(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Player_CS_UpdateGuide::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string finishkey = 1;
    if (has_finishkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->finishkey());
    }

    // optional uint32 guidepart = 2;
    if (has_guidepart()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guidepart());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Player_CS_UpdateGuide::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Player_CS_UpdateGuide* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Player_CS_UpdateGuide*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Player_CS_UpdateGuide::MergeFrom(const Player_CS_UpdateGuide& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_finishkey()) {
      set_finishkey(from.finishkey());
    }
    if (from.has_guidepart()) {
      set_guidepart(from.guidepart());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Player_CS_UpdateGuide::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Player_CS_UpdateGuide::CopyFrom(const Player_CS_UpdateGuide& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Player_CS_UpdateGuide::IsInitialized() const {

  return true;
}

void Player_CS_UpdateGuide::Swap(Player_CS_UpdateGuide* other) {
  if (other != this) {
    std::swap(finishkey_, other->finishkey_);
    std::swap(guidepart_, other->guidepart_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Player_CS_UpdateGuide::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Player_CS_UpdateGuide_descriptor_;
  metadata.reflection = Player_CS_UpdateGuide_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Player_SC_UpdateGuide::kResultFieldNumber;
#endif  // !_MSC_VER

Player_SC_UpdateGuide::Player_SC_UpdateGuide()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Player_SC_UpdateGuide::InitAsDefaultInstance() {
}

Player_SC_UpdateGuide::Player_SC_UpdateGuide(const Player_SC_UpdateGuide& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Player_SC_UpdateGuide::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Player_SC_UpdateGuide::~Player_SC_UpdateGuide() {
  SharedDtor();
}

void Player_SC_UpdateGuide::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Player_SC_UpdateGuide::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Player_SC_UpdateGuide::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Player_SC_UpdateGuide_descriptor_;
}

const Player_SC_UpdateGuide& Player_SC_UpdateGuide::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_2eproto();
  return *default_instance_;
}

Player_SC_UpdateGuide* Player_SC_UpdateGuide::default_instance_ = NULL;

Player_SC_UpdateGuide* Player_SC_UpdateGuide::New() const {
  return new Player_SC_UpdateGuide;
}

void Player_SC_UpdateGuide::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Player_SC_UpdateGuide::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Player_SC_UpdateGuide::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Player_SC_UpdateGuide::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Player_SC_UpdateGuide::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Player_SC_UpdateGuide::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Player_SC_UpdateGuide* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Player_SC_UpdateGuide*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Player_SC_UpdateGuide::MergeFrom(const Player_SC_UpdateGuide& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Player_SC_UpdateGuide::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Player_SC_UpdateGuide::CopyFrom(const Player_SC_UpdateGuide& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Player_SC_UpdateGuide::IsInitialized() const {

  return true;
}

void Player_SC_UpdateGuide::Swap(Player_SC_UpdateGuide* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Player_SC_UpdateGuide::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Player_SC_UpdateGuide_descriptor_;
  metadata.reflection = Player_SC_UpdateGuide_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoSingleCon::kParamFieldNumber;
const int ProtoSingleCon::kValFieldNumber;
#endif  // !_MSC_VER

ProtoSingleCon::ProtoSingleCon()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoSingleCon::InitAsDefaultInstance() {
}

ProtoSingleCon::ProtoSingleCon(const ProtoSingleCon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoSingleCon::SharedCtor() {
  _cached_size_ = 0;
  param_ = 0;
  val_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoSingleCon::~ProtoSingleCon() {
  SharedDtor();
}

void ProtoSingleCon::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoSingleCon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoSingleCon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoSingleCon_descriptor_;
}

const ProtoSingleCon& ProtoSingleCon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_2eproto();
  return *default_instance_;
}

ProtoSingleCon* ProtoSingleCon::default_instance_ = NULL;

ProtoSingleCon* ProtoSingleCon::New() const {
  return new ProtoSingleCon;
}

void ProtoSingleCon::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    param_ = 0;
    val_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoSingleCon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 param = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &param_)));
          set_has_param();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_val;
        break;
      }

      // optional int64 val = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &val_)));
          set_has_val();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoSingleCon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 param = 1;
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->param(), output);
  }

  // optional int64 val = 2;
  if (has_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->val(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoSingleCon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 param = 1;
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->param(), target);
  }

  // optional int64 val = 2;
  if (has_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->val(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoSingleCon::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 param = 1;
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->param());
    }

    // optional int64 val = 2;
    if (has_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->val());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoSingleCon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoSingleCon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoSingleCon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoSingleCon::MergeFrom(const ProtoSingleCon& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_val()) {
      set_val(from.val());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoSingleCon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoSingleCon::CopyFrom(const ProtoSingleCon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoSingleCon::IsInitialized() const {

  return true;
}

void ProtoSingleCon::Swap(ProtoSingleCon* other) {
  if (other != this) {
    std::swap(param_, other->param_);
    std::swap(val_, other->val_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoSingleCon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoSingleCon_descriptor_;
  metadata.reflection = ProtoSingleCon_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoProgressConInfo::kETpyeFieldNumber;
const int ProtoProgressConInfo::kValueFieldNumber;
const int ProtoProgressConInfo::kMapParamFieldNumber;
#endif  // !_MSC_VER

ProtoProgressConInfo::ProtoProgressConInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoProgressConInfo::InitAsDefaultInstance() {
}

ProtoProgressConInfo::ProtoProgressConInfo(const ProtoProgressConInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoProgressConInfo::SharedCtor() {
  _cached_size_ = 0;
  etpye_ = 0;
  value_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoProgressConInfo::~ProtoProgressConInfo() {
  SharedDtor();
}

void ProtoProgressConInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoProgressConInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoProgressConInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoProgressConInfo_descriptor_;
}

const ProtoProgressConInfo& ProtoProgressConInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_2eproto();
  return *default_instance_;
}

ProtoProgressConInfo* ProtoProgressConInfo::default_instance_ = NULL;

ProtoProgressConInfo* ProtoProgressConInfo::New() const {
  return new ProtoProgressConInfo;
}

void ProtoProgressConInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    etpye_ = 0;
    value_ = GOOGLE_LONGLONG(0);
  }
  mapparam_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoProgressConInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eTpye = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &etpye_)));
          set_has_etpye();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional int64 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_mapParam;
        break;
      }

      // repeated .proto.message.ProtoSingleCon mapParam = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mapParam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mapparam()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_mapParam;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoProgressConInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 eTpye = 1;
  if (has_etpye()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->etpye(), output);
  }

  // optional int64 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->value(), output);
  }

  // repeated .proto.message.ProtoSingleCon mapParam = 3;
  for (int i = 0; i < this->mapparam_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->mapparam(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoProgressConInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 eTpye = 1;
  if (has_etpye()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->etpye(), target);
  }

  // optional int64 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->value(), target);
  }

  // repeated .proto.message.ProtoSingleCon mapParam = 3;
  for (int i = 0; i < this->mapparam_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->mapparam(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoProgressConInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 eTpye = 1;
    if (has_etpye()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->etpye());
    }

    // optional int64 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->value());
    }

  }
  // repeated .proto.message.ProtoSingleCon mapParam = 3;
  total_size += 1 * this->mapparam_size();
  for (int i = 0; i < this->mapparam_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mapparam(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoProgressConInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoProgressConInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoProgressConInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoProgressConInfo::MergeFrom(const ProtoProgressConInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  mapparam_.MergeFrom(from.mapparam_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_etpye()) {
      set_etpye(from.etpye());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoProgressConInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoProgressConInfo::CopyFrom(const ProtoProgressConInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoProgressConInfo::IsInitialized() const {

  return true;
}

void ProtoProgressConInfo::Swap(ProtoProgressConInfo* other) {
  if (other != this) {
    std::swap(etpye_, other->etpye_);
    std::swap(value_, other->value_);
    mapparam_.Swap(&other->mapparam_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoProgressConInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoProgressConInfo_descriptor_;
  metadata.reflection = ProtoProgressConInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoAllProgressConInfo::kAllInfoFieldNumber;
#endif  // !_MSC_VER

ProtoAllProgressConInfo::ProtoAllProgressConInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoAllProgressConInfo::InitAsDefaultInstance() {
}

ProtoAllProgressConInfo::ProtoAllProgressConInfo(const ProtoAllProgressConInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoAllProgressConInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoAllProgressConInfo::~ProtoAllProgressConInfo() {
  SharedDtor();
}

void ProtoAllProgressConInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoAllProgressConInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoAllProgressConInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoAllProgressConInfo_descriptor_;
}

const ProtoAllProgressConInfo& ProtoAllProgressConInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_2eproto();
  return *default_instance_;
}

ProtoAllProgressConInfo* ProtoAllProgressConInfo::default_instance_ = NULL;

ProtoAllProgressConInfo* ProtoAllProgressConInfo::New() const {
  return new ProtoAllProgressConInfo;
}

void ProtoAllProgressConInfo::Clear() {
  allinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoAllProgressConInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.message.ProtoProgressConInfo allInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_allInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_allinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_allInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoAllProgressConInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.message.ProtoProgressConInfo allInfo = 1;
  for (int i = 0; i < this->allinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->allinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoAllProgressConInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.message.ProtoProgressConInfo allInfo = 1;
  for (int i = 0; i < this->allinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->allinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoAllProgressConInfo::ByteSize() const {
  int total_size = 0;

  // repeated .proto.message.ProtoProgressConInfo allInfo = 1;
  total_size += 1 * this->allinfo_size();
  for (int i = 0; i < this->allinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->allinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoAllProgressConInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoAllProgressConInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoAllProgressConInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoAllProgressConInfo::MergeFrom(const ProtoAllProgressConInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  allinfo_.MergeFrom(from.allinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoAllProgressConInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoAllProgressConInfo::CopyFrom(const ProtoAllProgressConInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoAllProgressConInfo::IsInitialized() const {

  return true;
}

void ProtoAllProgressConInfo::Swap(ProtoAllProgressConInfo* other) {
  if (other != this) {
    allinfo_.Swap(&other->allinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoAllProgressConInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoAllProgressConInfo_descriptor_;
  metadata.reflection = ProtoAllProgressConInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Player_SC_OffRewordInfo::kAccumulatetimeFieldNumber;
const int Player_SC_OffRewordInfo::kLastouttimeFieldNumber;
const int Player_SC_OffRewordInfo::kCurexpFieldNumber;
#endif  // !_MSC_VER

Player_SC_OffRewordInfo::Player_SC_OffRewordInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Player_SC_OffRewordInfo::InitAsDefaultInstance() {
}

Player_SC_OffRewordInfo::Player_SC_OffRewordInfo(const Player_SC_OffRewordInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Player_SC_OffRewordInfo::SharedCtor() {
  _cached_size_ = 0;
  accumulatetime_ = GOOGLE_ULONGLONG(0);
  lastouttime_ = GOOGLE_ULONGLONG(0);
  curexp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Player_SC_OffRewordInfo::~Player_SC_OffRewordInfo() {
  SharedDtor();
}

void Player_SC_OffRewordInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Player_SC_OffRewordInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Player_SC_OffRewordInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Player_SC_OffRewordInfo_descriptor_;
}

const Player_SC_OffRewordInfo& Player_SC_OffRewordInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_2eproto();
  return *default_instance_;
}

Player_SC_OffRewordInfo* Player_SC_OffRewordInfo::default_instance_ = NULL;

Player_SC_OffRewordInfo* Player_SC_OffRewordInfo::New() const {
  return new Player_SC_OffRewordInfo;
}

void Player_SC_OffRewordInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    accumulatetime_ = GOOGLE_ULONGLONG(0);
    lastouttime_ = GOOGLE_ULONGLONG(0);
    curexp_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Player_SC_OffRewordInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 accumulatetime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &accumulatetime_)));
          set_has_accumulatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lastouttime;
        break;
      }

      // optional uint64 lastouttime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastouttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lastouttime_)));
          set_has_lastouttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_curexp;
        break;
      }

      // optional uint64 curexp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curexp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &curexp_)));
          set_has_curexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Player_SC_OffRewordInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 accumulatetime = 1;
  if (has_accumulatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->accumulatetime(), output);
  }

  // optional uint64 lastouttime = 2;
  if (has_lastouttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->lastouttime(), output);
  }

  // optional uint64 curexp = 3;
  if (has_curexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->curexp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Player_SC_OffRewordInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 accumulatetime = 1;
  if (has_accumulatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->accumulatetime(), target);
  }

  // optional uint64 lastouttime = 2;
  if (has_lastouttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->lastouttime(), target);
  }

  // optional uint64 curexp = 3;
  if (has_curexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->curexp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Player_SC_OffRewordInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 accumulatetime = 1;
    if (has_accumulatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->accumulatetime());
    }

    // optional uint64 lastouttime = 2;
    if (has_lastouttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lastouttime());
    }

    // optional uint64 curexp = 3;
    if (has_curexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->curexp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Player_SC_OffRewordInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Player_SC_OffRewordInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Player_SC_OffRewordInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Player_SC_OffRewordInfo::MergeFrom(const Player_SC_OffRewordInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accumulatetime()) {
      set_accumulatetime(from.accumulatetime());
    }
    if (from.has_lastouttime()) {
      set_lastouttime(from.lastouttime());
    }
    if (from.has_curexp()) {
      set_curexp(from.curexp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Player_SC_OffRewordInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Player_SC_OffRewordInfo::CopyFrom(const Player_SC_OffRewordInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Player_SC_OffRewordInfo::IsInitialized() const {

  return true;
}

void Player_SC_OffRewordInfo::Swap(Player_SC_OffRewordInfo* other) {
  if (other != this) {
    std::swap(accumulatetime_, other->accumulatetime_);
    std::swap(lastouttime_, other->lastouttime_);
    std::swap(curexp_, other->curexp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Player_SC_OffRewordInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Player_SC_OffRewordInfo_descriptor_;
  metadata.reflection = Player_SC_OffRewordInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Player_CS_GetOffReword::kTypeFieldNumber;
#endif  // !_MSC_VER

Player_CS_GetOffReword::Player_CS_GetOffReword()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Player_CS_GetOffReword::InitAsDefaultInstance() {
}

Player_CS_GetOffReword::Player_CS_GetOffReword(const Player_CS_GetOffReword& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Player_CS_GetOffReword::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Player_CS_GetOffReword::~Player_CS_GetOffReword() {
  SharedDtor();
}

void Player_CS_GetOffReword::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Player_CS_GetOffReword::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Player_CS_GetOffReword::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Player_CS_GetOffReword_descriptor_;
}

const Player_CS_GetOffReword& Player_CS_GetOffReword::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_2eproto();
  return *default_instance_;
}

Player_CS_GetOffReword* Player_CS_GetOffReword::default_instance_ = NULL;

Player_CS_GetOffReword* Player_CS_GetOffReword::New() const {
  return new Player_CS_GetOffReword;
}

void Player_CS_GetOffReword::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Player_CS_GetOffReword::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Player_CS_GetOffReword::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Player_CS_GetOffReword::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Player_CS_GetOffReword::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Player_CS_GetOffReword::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Player_CS_GetOffReword* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Player_CS_GetOffReword*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Player_CS_GetOffReword::MergeFrom(const Player_CS_GetOffReword& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Player_CS_GetOffReword::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Player_CS_GetOffReword::CopyFrom(const Player_CS_GetOffReword& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Player_CS_GetOffReword::IsInitialized() const {

  return true;
}

void Player_CS_GetOffReword::Swap(Player_CS_GetOffReword* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Player_CS_GetOffReword::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Player_CS_GetOffReword_descriptor_;
  metadata.reflection = Player_CS_GetOffReword_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Player_SC_GetDreadDungeonInfo::kDraedcountsFieldNumber;
#endif  // !_MSC_VER

Player_SC_GetDreadDungeonInfo::Player_SC_GetDreadDungeonInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Player_SC_GetDreadDungeonInfo::InitAsDefaultInstance() {
}

Player_SC_GetDreadDungeonInfo::Player_SC_GetDreadDungeonInfo(const Player_SC_GetDreadDungeonInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Player_SC_GetDreadDungeonInfo::SharedCtor() {
  _cached_size_ = 0;
  draedcounts_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Player_SC_GetDreadDungeonInfo::~Player_SC_GetDreadDungeonInfo() {
  SharedDtor();
}

void Player_SC_GetDreadDungeonInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Player_SC_GetDreadDungeonInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Player_SC_GetDreadDungeonInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Player_SC_GetDreadDungeonInfo_descriptor_;
}

const Player_SC_GetDreadDungeonInfo& Player_SC_GetDreadDungeonInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_2eproto();
  return *default_instance_;
}

Player_SC_GetDreadDungeonInfo* Player_SC_GetDreadDungeonInfo::default_instance_ = NULL;

Player_SC_GetDreadDungeonInfo* Player_SC_GetDreadDungeonInfo::New() const {
  return new Player_SC_GetDreadDungeonInfo;
}

void Player_SC_GetDreadDungeonInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    draedcounts_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Player_SC_GetDreadDungeonInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 draedcounts = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &draedcounts_)));
          set_has_draedcounts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Player_SC_GetDreadDungeonInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 draedcounts = 1;
  if (has_draedcounts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->draedcounts(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Player_SC_GetDreadDungeonInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 draedcounts = 1;
  if (has_draedcounts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->draedcounts(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Player_SC_GetDreadDungeonInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 draedcounts = 1;
    if (has_draedcounts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->draedcounts());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Player_SC_GetDreadDungeonInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Player_SC_GetDreadDungeonInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Player_SC_GetDreadDungeonInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Player_SC_GetDreadDungeonInfo::MergeFrom(const Player_SC_GetDreadDungeonInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_draedcounts()) {
      set_draedcounts(from.draedcounts());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Player_SC_GetDreadDungeonInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Player_SC_GetDreadDungeonInfo::CopyFrom(const Player_SC_GetDreadDungeonInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Player_SC_GetDreadDungeonInfo::IsInitialized() const {

  return true;
}

void Player_SC_GetDreadDungeonInfo::Swap(Player_SC_GetDreadDungeonInfo* other) {
  if (other != this) {
    std::swap(draedcounts_, other->draedcounts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Player_SC_GetDreadDungeonInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Player_SC_GetDreadDungeonInfo_descriptor_;
  metadata.reflection = Player_SC_GetDreadDungeonInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Player_CS_GetAssignPlayerInfo::kAssignplayeridFieldNumber;
#endif  // !_MSC_VER

Player_CS_GetAssignPlayerInfo::Player_CS_GetAssignPlayerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Player_CS_GetAssignPlayerInfo::InitAsDefaultInstance() {
}

Player_CS_GetAssignPlayerInfo::Player_CS_GetAssignPlayerInfo(const Player_CS_GetAssignPlayerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Player_CS_GetAssignPlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  assignplayerid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Player_CS_GetAssignPlayerInfo::~Player_CS_GetAssignPlayerInfo() {
  SharedDtor();
}

void Player_CS_GetAssignPlayerInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Player_CS_GetAssignPlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Player_CS_GetAssignPlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Player_CS_GetAssignPlayerInfo_descriptor_;
}

const Player_CS_GetAssignPlayerInfo& Player_CS_GetAssignPlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_2eproto();
  return *default_instance_;
}

Player_CS_GetAssignPlayerInfo* Player_CS_GetAssignPlayerInfo::default_instance_ = NULL;

Player_CS_GetAssignPlayerInfo* Player_CS_GetAssignPlayerInfo::New() const {
  return new Player_CS_GetAssignPlayerInfo;
}

void Player_CS_GetAssignPlayerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    assignplayerid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Player_CS_GetAssignPlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 assignplayerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &assignplayerid_)));
          set_has_assignplayerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Player_CS_GetAssignPlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 assignplayerid = 1;
  if (has_assignplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->assignplayerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Player_CS_GetAssignPlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 assignplayerid = 1;
  if (has_assignplayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->assignplayerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Player_CS_GetAssignPlayerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 assignplayerid = 1;
    if (has_assignplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->assignplayerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Player_CS_GetAssignPlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Player_CS_GetAssignPlayerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Player_CS_GetAssignPlayerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Player_CS_GetAssignPlayerInfo::MergeFrom(const Player_CS_GetAssignPlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_assignplayerid()) {
      set_assignplayerid(from.assignplayerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Player_CS_GetAssignPlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Player_CS_GetAssignPlayerInfo::CopyFrom(const Player_CS_GetAssignPlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Player_CS_GetAssignPlayerInfo::IsInitialized() const {

  return true;
}

void Player_CS_GetAssignPlayerInfo::Swap(Player_CS_GetAssignPlayerInfo* other) {
  if (other != this) {
    std::swap(assignplayerid_, other->assignplayerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Player_CS_GetAssignPlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Player_CS_GetAssignPlayerInfo_descriptor_;
  metadata.reflection = Player_CS_GetAssignPlayerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Player_SC_GetAssignPlayerInfo::kDatainfoFieldNumber;
#endif  // !_MSC_VER

Player_SC_GetAssignPlayerInfo::Player_SC_GetAssignPlayerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Player_SC_GetAssignPlayerInfo::InitAsDefaultInstance() {
  datainfo_ = const_cast< ::proto::message::PlayerShow*>(&::proto::message::PlayerShow::default_instance());
}

Player_SC_GetAssignPlayerInfo::Player_SC_GetAssignPlayerInfo(const Player_SC_GetAssignPlayerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Player_SC_GetAssignPlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  datainfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Player_SC_GetAssignPlayerInfo::~Player_SC_GetAssignPlayerInfo() {
  SharedDtor();
}

void Player_SC_GetAssignPlayerInfo::SharedDtor() {
  if (this != default_instance_) {
    delete datainfo_;
  }
}

void Player_SC_GetAssignPlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Player_SC_GetAssignPlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Player_SC_GetAssignPlayerInfo_descriptor_;
}

const Player_SC_GetAssignPlayerInfo& Player_SC_GetAssignPlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_2eproto();
  return *default_instance_;
}

Player_SC_GetAssignPlayerInfo* Player_SC_GetAssignPlayerInfo::default_instance_ = NULL;

Player_SC_GetAssignPlayerInfo* Player_SC_GetAssignPlayerInfo::New() const {
  return new Player_SC_GetAssignPlayerInfo;
}

void Player_SC_GetAssignPlayerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_datainfo()) {
      if (datainfo_ != NULL) datainfo_->::proto::message::PlayerShow::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Player_SC_GetAssignPlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.message.PlayerShow datainfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_datainfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Player_SC_GetAssignPlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto.message.PlayerShow datainfo = 1;
  if (has_datainfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->datainfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Player_SC_GetAssignPlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto.message.PlayerShow datainfo = 1;
  if (has_datainfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->datainfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Player_SC_GetAssignPlayerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto.message.PlayerShow datainfo = 1;
    if (has_datainfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->datainfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Player_SC_GetAssignPlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Player_SC_GetAssignPlayerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Player_SC_GetAssignPlayerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Player_SC_GetAssignPlayerInfo::MergeFrom(const Player_SC_GetAssignPlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_datainfo()) {
      mutable_datainfo()->::proto::message::PlayerShow::MergeFrom(from.datainfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Player_SC_GetAssignPlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Player_SC_GetAssignPlayerInfo::CopyFrom(const Player_SC_GetAssignPlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Player_SC_GetAssignPlayerInfo::IsInitialized() const {

  return true;
}

void Player_SC_GetAssignPlayerInfo::Swap(Player_SC_GetAssignPlayerInfo* other) {
  if (other != this) {
    std::swap(datainfo_, other->datainfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Player_SC_GetAssignPlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Player_SC_GetAssignPlayerInfo_descriptor_;
  metadata.reflection = Player_SC_GetAssignPlayerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Player_SC_GetTerritoryBattleInfo::kInfolistFieldNumber;
const int Player_SC_GetTerritoryBattleInfo::kRewardidFieldNumber;
const int Player_SC_GetTerritoryBattleInfo::kFightcityFieldNumber;
#endif  // !_MSC_VER

Player_SC_GetTerritoryBattleInfo::Player_SC_GetTerritoryBattleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Player_SC_GetTerritoryBattleInfo::InitAsDefaultInstance() {
}

Player_SC_GetTerritoryBattleInfo::Player_SC_GetTerritoryBattleInfo(const Player_SC_GetTerritoryBattleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Player_SC_GetTerritoryBattleInfo::SharedCtor() {
  _cached_size_ = 0;
  fightcity_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Player_SC_GetTerritoryBattleInfo::~Player_SC_GetTerritoryBattleInfo() {
  SharedDtor();
}

void Player_SC_GetTerritoryBattleInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Player_SC_GetTerritoryBattleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Player_SC_GetTerritoryBattleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Player_SC_GetTerritoryBattleInfo_descriptor_;
}

const Player_SC_GetTerritoryBattleInfo& Player_SC_GetTerritoryBattleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_2eproto();
  return *default_instance_;
}

Player_SC_GetTerritoryBattleInfo* Player_SC_GetTerritoryBattleInfo::default_instance_ = NULL;

Player_SC_GetTerritoryBattleInfo* Player_SC_GetTerritoryBattleInfo::New() const {
  return new Player_SC_GetTerritoryBattleInfo;
}

void Player_SC_GetTerritoryBattleInfo::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    fightcity_ = 0u;
  }
  infolist_.Clear();
  rewardid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Player_SC_GetTerritoryBattleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.message.TBFieldInfo infolist = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infolist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infolist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_infolist;
        if (input->ExpectTag(16)) goto parse_rewardid;
        break;
      }

      // repeated uint32 rewardid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rewardid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_rewardid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_rewardid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rewardid;
        if (input->ExpectTag(24)) goto parse_fightcity;
        break;
      }

      // optional uint32 fightcity = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fightcity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fightcity_)));
          set_has_fightcity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Player_SC_GetTerritoryBattleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.message.TBFieldInfo infolist = 1;
  for (int i = 0; i < this->infolist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->infolist(i), output);
  }

  // repeated uint32 rewardid = 2;
  for (int i = 0; i < this->rewardid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->rewardid(i), output);
  }

  // optional uint32 fightcity = 3;
  if (has_fightcity()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->fightcity(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Player_SC_GetTerritoryBattleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.message.TBFieldInfo infolist = 1;
  for (int i = 0; i < this->infolist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->infolist(i), target);
  }

  // repeated uint32 rewardid = 2;
  for (int i = 0; i < this->rewardid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->rewardid(i), target);
  }

  // optional uint32 fightcity = 3;
  if (has_fightcity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->fightcity(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Player_SC_GetTerritoryBattleInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional uint32 fightcity = 3;
    if (has_fightcity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fightcity());
    }

  }
  // repeated .proto.message.TBFieldInfo infolist = 1;
  total_size += 1 * this->infolist_size();
  for (int i = 0; i < this->infolist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infolist(i));
  }

  // repeated uint32 rewardid = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->rewardid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->rewardid(i));
    }
    total_size += 1 * this->rewardid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Player_SC_GetTerritoryBattleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Player_SC_GetTerritoryBattleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Player_SC_GetTerritoryBattleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Player_SC_GetTerritoryBattleInfo::MergeFrom(const Player_SC_GetTerritoryBattleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  infolist_.MergeFrom(from.infolist_);
  rewardid_.MergeFrom(from.rewardid_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_fightcity()) {
      set_fightcity(from.fightcity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Player_SC_GetTerritoryBattleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Player_SC_GetTerritoryBattleInfo::CopyFrom(const Player_SC_GetTerritoryBattleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Player_SC_GetTerritoryBattleInfo::IsInitialized() const {

  return true;
}

void Player_SC_GetTerritoryBattleInfo::Swap(Player_SC_GetTerritoryBattleInfo* other) {
  if (other != this) {
    infolist_.Swap(&other->infolist_);
    rewardid_.Swap(&other->rewardid_);
    std::swap(fightcity_, other->fightcity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Player_SC_GetTerritoryBattleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Player_SC_GetTerritoryBattleInfo_descriptor_;
  metadata.reflection = Player_SC_GetTerritoryBattleInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Player_CS_GetTerBatReward::kFieldidFieldNumber;
#endif  // !_MSC_VER

Player_CS_GetTerBatReward::Player_CS_GetTerBatReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Player_CS_GetTerBatReward::InitAsDefaultInstance() {
}

Player_CS_GetTerBatReward::Player_CS_GetTerBatReward(const Player_CS_GetTerBatReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Player_CS_GetTerBatReward::SharedCtor() {
  _cached_size_ = 0;
  fieldid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Player_CS_GetTerBatReward::~Player_CS_GetTerBatReward() {
  SharedDtor();
}

void Player_CS_GetTerBatReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Player_CS_GetTerBatReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Player_CS_GetTerBatReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Player_CS_GetTerBatReward_descriptor_;
}

const Player_CS_GetTerBatReward& Player_CS_GetTerBatReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_2eproto();
  return *default_instance_;
}

Player_CS_GetTerBatReward* Player_CS_GetTerBatReward::default_instance_ = NULL;

Player_CS_GetTerBatReward* Player_CS_GetTerBatReward::New() const {
  return new Player_CS_GetTerBatReward;
}

void Player_CS_GetTerBatReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fieldid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Player_CS_GetTerBatReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fieldid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fieldid_)));
          set_has_fieldid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Player_CS_GetTerBatReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 fieldid = 1;
  if (has_fieldid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fieldid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Player_CS_GetTerBatReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 fieldid = 1;
  if (has_fieldid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fieldid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Player_CS_GetTerBatReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 fieldid = 1;
    if (has_fieldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fieldid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Player_CS_GetTerBatReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Player_CS_GetTerBatReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Player_CS_GetTerBatReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Player_CS_GetTerBatReward::MergeFrom(const Player_CS_GetTerBatReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fieldid()) {
      set_fieldid(from.fieldid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Player_CS_GetTerBatReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Player_CS_GetTerBatReward::CopyFrom(const Player_CS_GetTerBatReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Player_CS_GetTerBatReward::IsInitialized() const {

  return true;
}

void Player_CS_GetTerBatReward::Swap(Player_CS_GetTerBatReward* other) {
  if (other != this) {
    std::swap(fieldid_, other->fieldid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Player_CS_GetTerBatReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Player_CS_GetTerBatReward_descriptor_;
  metadata.reflection = Player_CS_GetTerBatReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Player_CS_JoinTerritoryBattle::kFieldidFieldNumber;
#endif  // !_MSC_VER

Player_CS_JoinTerritoryBattle::Player_CS_JoinTerritoryBattle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Player_CS_JoinTerritoryBattle::InitAsDefaultInstance() {
}

Player_CS_JoinTerritoryBattle::Player_CS_JoinTerritoryBattle(const Player_CS_JoinTerritoryBattle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Player_CS_JoinTerritoryBattle::SharedCtor() {
  _cached_size_ = 0;
  fieldid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Player_CS_JoinTerritoryBattle::~Player_CS_JoinTerritoryBattle() {
  SharedDtor();
}

void Player_CS_JoinTerritoryBattle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Player_CS_JoinTerritoryBattle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Player_CS_JoinTerritoryBattle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Player_CS_JoinTerritoryBattle_descriptor_;
}

const Player_CS_JoinTerritoryBattle& Player_CS_JoinTerritoryBattle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_2eproto();
  return *default_instance_;
}

Player_CS_JoinTerritoryBattle* Player_CS_JoinTerritoryBattle::default_instance_ = NULL;

Player_CS_JoinTerritoryBattle* Player_CS_JoinTerritoryBattle::New() const {
  return new Player_CS_JoinTerritoryBattle;
}

void Player_CS_JoinTerritoryBattle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fieldid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Player_CS_JoinTerritoryBattle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fieldid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fieldid_)));
          set_has_fieldid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Player_CS_JoinTerritoryBattle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 fieldid = 1;
  if (has_fieldid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fieldid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Player_CS_JoinTerritoryBattle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 fieldid = 1;
  if (has_fieldid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fieldid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Player_CS_JoinTerritoryBattle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 fieldid = 1;
    if (has_fieldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fieldid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Player_CS_JoinTerritoryBattle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Player_CS_JoinTerritoryBattle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Player_CS_JoinTerritoryBattle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Player_CS_JoinTerritoryBattle::MergeFrom(const Player_CS_JoinTerritoryBattle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fieldid()) {
      set_fieldid(from.fieldid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Player_CS_JoinTerritoryBattle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Player_CS_JoinTerritoryBattle::CopyFrom(const Player_CS_JoinTerritoryBattle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Player_CS_JoinTerritoryBattle::IsInitialized() const {

  return true;
}

void Player_CS_JoinTerritoryBattle::Swap(Player_CS_JoinTerritoryBattle* other) {
  if (other != this) {
    std::swap(fieldid_, other->fieldid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Player_CS_JoinTerritoryBattle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Player_CS_JoinTerritoryBattle_descriptor_;
  metadata.reflection = Player_CS_JoinTerritoryBattle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Player_CS_TBCaptureFlag::kFieldidFieldNumber;
#endif  // !_MSC_VER

Player_CS_TBCaptureFlag::Player_CS_TBCaptureFlag()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Player_CS_TBCaptureFlag::InitAsDefaultInstance() {
}

Player_CS_TBCaptureFlag::Player_CS_TBCaptureFlag(const Player_CS_TBCaptureFlag& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Player_CS_TBCaptureFlag::SharedCtor() {
  _cached_size_ = 0;
  fieldid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Player_CS_TBCaptureFlag::~Player_CS_TBCaptureFlag() {
  SharedDtor();
}

void Player_CS_TBCaptureFlag::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Player_CS_TBCaptureFlag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Player_CS_TBCaptureFlag::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Player_CS_TBCaptureFlag_descriptor_;
}

const Player_CS_TBCaptureFlag& Player_CS_TBCaptureFlag::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_2eproto();
  return *default_instance_;
}

Player_CS_TBCaptureFlag* Player_CS_TBCaptureFlag::default_instance_ = NULL;

Player_CS_TBCaptureFlag* Player_CS_TBCaptureFlag::New() const {
  return new Player_CS_TBCaptureFlag;
}

void Player_CS_TBCaptureFlag::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fieldid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Player_CS_TBCaptureFlag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fieldid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fieldid_)));
          set_has_fieldid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Player_CS_TBCaptureFlag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 fieldid = 1;
  if (has_fieldid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fieldid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Player_CS_TBCaptureFlag::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 fieldid = 1;
  if (has_fieldid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fieldid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Player_CS_TBCaptureFlag::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 fieldid = 1;
    if (has_fieldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fieldid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Player_CS_TBCaptureFlag::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Player_CS_TBCaptureFlag* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Player_CS_TBCaptureFlag*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Player_CS_TBCaptureFlag::MergeFrom(const Player_CS_TBCaptureFlag& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fieldid()) {
      set_fieldid(from.fieldid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Player_CS_TBCaptureFlag::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Player_CS_TBCaptureFlag::CopyFrom(const Player_CS_TBCaptureFlag& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Player_CS_TBCaptureFlag::IsInitialized() const {

  return true;
}

void Player_CS_TBCaptureFlag::Swap(Player_CS_TBCaptureFlag* other) {
  if (other != this) {
    std::swap(fieldid_, other->fieldid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Player_CS_TBCaptureFlag::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Player_CS_TBCaptureFlag_descriptor_;
  metadata.reflection = Player_CS_TBCaptureFlag_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Player_SC_TerritoryBattleResult::kIdFieldNumber;
const int Player_SC_TerritoryBattleResult::kWingidFieldNumber;
const int Player_SC_TerritoryBattleResult::kWinnameFieldNumber;
const int Player_SC_TerritoryBattleResult::kLosegidFieldNumber;
const int Player_SC_TerritoryBattleResult::kOnlinetimeFieldNumber;
#endif  // !_MSC_VER

Player_SC_TerritoryBattleResult::Player_SC_TerritoryBattleResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Player_SC_TerritoryBattleResult::InitAsDefaultInstance() {
}

Player_SC_TerritoryBattleResult::Player_SC_TerritoryBattleResult(const Player_SC_TerritoryBattleResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Player_SC_TerritoryBattleResult::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  wingid_ = GOOGLE_ULONGLONG(0);
  winname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  losegid_ = GOOGLE_ULONGLONG(0);
  onlinetime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Player_SC_TerritoryBattleResult::~Player_SC_TerritoryBattleResult() {
  SharedDtor();
}

void Player_SC_TerritoryBattleResult::SharedDtor() {
  if (winname_ != &::google::protobuf::internal::kEmptyString) {
    delete winname_;
  }
  if (this != default_instance_) {
  }
}

void Player_SC_TerritoryBattleResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Player_SC_TerritoryBattleResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Player_SC_TerritoryBattleResult_descriptor_;
}

const Player_SC_TerritoryBattleResult& Player_SC_TerritoryBattleResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_2eproto();
  return *default_instance_;
}

Player_SC_TerritoryBattleResult* Player_SC_TerritoryBattleResult::default_instance_ = NULL;

Player_SC_TerritoryBattleResult* Player_SC_TerritoryBattleResult::New() const {
  return new Player_SC_TerritoryBattleResult;
}

void Player_SC_TerritoryBattleResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    wingid_ = GOOGLE_ULONGLONG(0);
    if (has_winname()) {
      if (winname_ != &::google::protobuf::internal::kEmptyString) {
        winname_->clear();
      }
    }
    losegid_ = GOOGLE_ULONGLONG(0);
    onlinetime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Player_SC_TerritoryBattleResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_wingid;
        break;
      }

      // optional uint64 wingid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wingid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &wingid_)));
          set_has_wingid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_winname;
        break;
      }

      // optional string winname = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_winname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_winname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->winname().data(), this->winname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_losegid;
        break;
      }

      // optional uint64 losegid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_losegid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &losegid_)));
          set_has_losegid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_onlinetime;
        break;
      }

      // optional uint32 onlinetime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_onlinetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &onlinetime_)));
          set_has_onlinetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Player_SC_TerritoryBattleResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint64 wingid = 2;
  if (has_wingid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->wingid(), output);
  }

  // optional string winname = 3;
  if (has_winname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->winname().data(), this->winname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->winname(), output);
  }

  // optional uint64 losegid = 4;
  if (has_losegid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->losegid(), output);
  }

  // optional uint32 onlinetime = 5;
  if (has_onlinetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->onlinetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Player_SC_TerritoryBattleResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint64 wingid = 2;
  if (has_wingid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->wingid(), target);
  }

  // optional string winname = 3;
  if (has_winname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->winname().data(), this->winname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->winname(), target);
  }

  // optional uint64 losegid = 4;
  if (has_losegid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->losegid(), target);
  }

  // optional uint32 onlinetime = 5;
  if (has_onlinetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->onlinetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Player_SC_TerritoryBattleResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint64 wingid = 2;
    if (has_wingid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->wingid());
    }

    // optional string winname = 3;
    if (has_winname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->winname());
    }

    // optional uint64 losegid = 4;
    if (has_losegid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->losegid());
    }

    // optional uint32 onlinetime = 5;
    if (has_onlinetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->onlinetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Player_SC_TerritoryBattleResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Player_SC_TerritoryBattleResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Player_SC_TerritoryBattleResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Player_SC_TerritoryBattleResult::MergeFrom(const Player_SC_TerritoryBattleResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_wingid()) {
      set_wingid(from.wingid());
    }
    if (from.has_winname()) {
      set_winname(from.winname());
    }
    if (from.has_losegid()) {
      set_losegid(from.losegid());
    }
    if (from.has_onlinetime()) {
      set_onlinetime(from.onlinetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Player_SC_TerritoryBattleResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Player_SC_TerritoryBattleResult::CopyFrom(const Player_SC_TerritoryBattleResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Player_SC_TerritoryBattleResult::IsInitialized() const {

  return true;
}

void Player_SC_TerritoryBattleResult::Swap(Player_SC_TerritoryBattleResult* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(wingid_, other->wingid_);
    std::swap(winname_, other->winname_);
    std::swap(losegid_, other->losegid_);
    std::swap(onlinetime_, other->onlinetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Player_SC_TerritoryBattleResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Player_SC_TerritoryBattleResult_descriptor_;
  metadata.reflection = Player_SC_TerritoryBattleResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Player_CS_QueryPlayerSimpleData::kCharidFieldNumber;
#endif  // !_MSC_VER

Player_CS_QueryPlayerSimpleData::Player_CS_QueryPlayerSimpleData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Player_CS_QueryPlayerSimpleData::InitAsDefaultInstance() {
}

Player_CS_QueryPlayerSimpleData::Player_CS_QueryPlayerSimpleData(const Player_CS_QueryPlayerSimpleData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Player_CS_QueryPlayerSimpleData::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Player_CS_QueryPlayerSimpleData::~Player_CS_QueryPlayerSimpleData() {
  SharedDtor();
}

void Player_CS_QueryPlayerSimpleData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Player_CS_QueryPlayerSimpleData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Player_CS_QueryPlayerSimpleData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Player_CS_QueryPlayerSimpleData_descriptor_;
}

const Player_CS_QueryPlayerSimpleData& Player_CS_QueryPlayerSimpleData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_2eproto();
  return *default_instance_;
}

Player_CS_QueryPlayerSimpleData* Player_CS_QueryPlayerSimpleData::default_instance_ = NULL;

Player_CS_QueryPlayerSimpleData* Player_CS_QueryPlayerSimpleData::New() const {
  return new Player_CS_QueryPlayerSimpleData;
}

void Player_CS_QueryPlayerSimpleData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Player_CS_QueryPlayerSimpleData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Player_CS_QueryPlayerSimpleData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Player_CS_QueryPlayerSimpleData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Player_CS_QueryPlayerSimpleData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Player_CS_QueryPlayerSimpleData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Player_CS_QueryPlayerSimpleData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Player_CS_QueryPlayerSimpleData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Player_CS_QueryPlayerSimpleData::MergeFrom(const Player_CS_QueryPlayerSimpleData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Player_CS_QueryPlayerSimpleData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Player_CS_QueryPlayerSimpleData::CopyFrom(const Player_CS_QueryPlayerSimpleData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Player_CS_QueryPlayerSimpleData::IsInitialized() const {

  return true;
}

void Player_CS_QueryPlayerSimpleData::Swap(Player_CS_QueryPlayerSimpleData* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Player_CS_QueryPlayerSimpleData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Player_CS_QueryPlayerSimpleData_descriptor_;
  metadata.reflection = Player_CS_QueryPlayerSimpleData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerSimpleData::kCharidFieldNumber;
const int PlayerSimpleData::kCareerFieldNumber;
const int PlayerSimpleData::kCharnameFieldNumber;
const int PlayerSimpleData::kLevelFieldNumber;
const int PlayerSimpleData::kGuildIdFieldNumber;
const int PlayerSimpleData::kGuildNameFieldNumber;
const int PlayerSimpleData::kDhlevelFieldNumber;
#endif  // !_MSC_VER

PlayerSimpleData::PlayerSimpleData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerSimpleData::InitAsDefaultInstance() {
}

PlayerSimpleData::PlayerSimpleData(const PlayerSimpleData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerSimpleData::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  career_ = 0;
  charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0;
  guild_id_ = GOOGLE_ULONGLONG(0);
  guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dhlevel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerSimpleData::~PlayerSimpleData() {
  SharedDtor();
}

void PlayerSimpleData::SharedDtor() {
  if (charname_ != &::google::protobuf::internal::kEmptyString) {
    delete charname_;
  }
  if (guild_name_ != &::google::protobuf::internal::kEmptyString) {
    delete guild_name_;
  }
  if (this != default_instance_) {
  }
}

void PlayerSimpleData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerSimpleData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerSimpleData_descriptor_;
}

const PlayerSimpleData& PlayerSimpleData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_2eproto();
  return *default_instance_;
}

PlayerSimpleData* PlayerSimpleData::default_instance_ = NULL;

PlayerSimpleData* PlayerSimpleData::New() const {
  return new PlayerSimpleData;
}

void PlayerSimpleData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_ULONGLONG(0);
    career_ = 0;
    if (has_charname()) {
      if (charname_ != &::google::protobuf::internal::kEmptyString) {
        charname_->clear();
      }
    }
    level_ = 0;
    guild_id_ = GOOGLE_ULONGLONG(0);
    if (has_guild_name()) {
      if (guild_name_ != &::google::protobuf::internal::kEmptyString) {
        guild_name_->clear();
      }
    }
    dhlevel_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerSimpleData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_career;
        break;
      }

      // optional int32 career = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_career:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &career_)));
          set_has_career();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_charname;
        break;
      }

      // optional string charname = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_charname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_charname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->charname().data(), this->charname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // optional int32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_guild_id;
        break;
      }

      // optional uint64 guild_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guild_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guild_id_)));
          set_has_guild_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_guild_name;
        break;
      }

      // optional string guild_name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guild_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guild_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guild_name().data(), this->guild_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_dhlevel;
        break;
      }

      // optional uint32 dhlevel = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dhlevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dhlevel_)));
          set_has_dhlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerSimpleData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  // optional int32 career = 2;
  if (has_career()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->career(), output);
  }

  // optional string charname = 3;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->charname(), output);
  }

  // optional int32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->level(), output);
  }

  // optional uint64 guild_id = 5;
  if (has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->guild_id(), output);
  }

  // optional string guild_name = 6;
  if (has_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guild_name().data(), this->guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->guild_name(), output);
  }

  // optional uint32 dhlevel = 7;
  if (has_dhlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->dhlevel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerSimpleData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  // optional int32 career = 2;
  if (has_career()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->career(), target);
  }

  // optional string charname = 3;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->charname(), target);
  }

  // optional int32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->level(), target);
  }

  // optional uint64 guild_id = 5;
  if (has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->guild_id(), target);
  }

  // optional string guild_name = 6;
  if (has_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guild_name().data(), this->guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->guild_name(), target);
  }

  // optional uint32 dhlevel = 7;
  if (has_dhlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->dhlevel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerSimpleData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional int32 career = 2;
    if (has_career()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->career());
    }

    // optional string charname = 3;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->charname());
    }

    // optional int32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional uint64 guild_id = 5;
    if (has_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guild_id());
    }

    // optional string guild_name = 6;
    if (has_guild_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guild_name());
    }

    // optional uint32 dhlevel = 7;
    if (has_dhlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dhlevel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerSimpleData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerSimpleData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerSimpleData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerSimpleData::MergeFrom(const PlayerSimpleData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_career()) {
      set_career(from.career());
    }
    if (from.has_charname()) {
      set_charname(from.charname());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_guild_id()) {
      set_guild_id(from.guild_id());
    }
    if (from.has_guild_name()) {
      set_guild_name(from.guild_name());
    }
    if (from.has_dhlevel()) {
      set_dhlevel(from.dhlevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerSimpleData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerSimpleData::CopyFrom(const PlayerSimpleData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerSimpleData::IsInitialized() const {

  return true;
}

void PlayerSimpleData::Swap(PlayerSimpleData* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(career_, other->career_);
    std::swap(charname_, other->charname_);
    std::swap(level_, other->level_);
    std::swap(guild_id_, other->guild_id_);
    std::swap(guild_name_, other->guild_name_);
    std::swap(dhlevel_, other->dhlevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerSimpleData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerSimpleData_descriptor_;
  metadata.reflection = PlayerSimpleData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Player_SC_QueryPlayerSimpleData::kResultFieldNumber;
const int Player_SC_QueryPlayerSimpleData::kSimpleDataFieldNumber;
const int Player_SC_QueryPlayerSimpleData::kOnlineFieldNumber;
#endif  // !_MSC_VER

Player_SC_QueryPlayerSimpleData::Player_SC_QueryPlayerSimpleData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Player_SC_QueryPlayerSimpleData::InitAsDefaultInstance() {
  simple_data_ = const_cast< ::proto::message::PlayerSimpleData*>(&::proto::message::PlayerSimpleData::default_instance());
}

Player_SC_QueryPlayerSimpleData::Player_SC_QueryPlayerSimpleData(const Player_SC_QueryPlayerSimpleData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Player_SC_QueryPlayerSimpleData::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  simple_data_ = NULL;
  online_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Player_SC_QueryPlayerSimpleData::~Player_SC_QueryPlayerSimpleData() {
  SharedDtor();
}

void Player_SC_QueryPlayerSimpleData::SharedDtor() {
  if (this != default_instance_) {
    delete simple_data_;
  }
}

void Player_SC_QueryPlayerSimpleData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Player_SC_QueryPlayerSimpleData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Player_SC_QueryPlayerSimpleData_descriptor_;
}

const Player_SC_QueryPlayerSimpleData& Player_SC_QueryPlayerSimpleData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_2eproto();
  return *default_instance_;
}

Player_SC_QueryPlayerSimpleData* Player_SC_QueryPlayerSimpleData::default_instance_ = NULL;

Player_SC_QueryPlayerSimpleData* Player_SC_QueryPlayerSimpleData::New() const {
  return new Player_SC_QueryPlayerSimpleData;
}

void Player_SC_QueryPlayerSimpleData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_simple_data()) {
      if (simple_data_ != NULL) simple_data_->::proto::message::PlayerSimpleData::Clear();
    }
    online_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Player_SC_QueryPlayerSimpleData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_simple_data;
        break;
      }

      // optional .proto.message.PlayerSimpleData simple_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_simple_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_simple_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_online;
        break;
      }

      // optional int32 online = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_online:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &online_)));
          set_has_online();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Player_SC_QueryPlayerSimpleData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .proto.message.PlayerSimpleData simple_data = 2;
  if (has_simple_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->simple_data(), output);
  }

  // optional int32 online = 3;
  if (has_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->online(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Player_SC_QueryPlayerSimpleData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .proto.message.PlayerSimpleData simple_data = 2;
  if (has_simple_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->simple_data(), target);
  }

  // optional int32 online = 3;
  if (has_online()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->online(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Player_SC_QueryPlayerSimpleData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .proto.message.PlayerSimpleData simple_data = 2;
    if (has_simple_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->simple_data());
    }

    // optional int32 online = 3;
    if (has_online()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->online());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Player_SC_QueryPlayerSimpleData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Player_SC_QueryPlayerSimpleData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Player_SC_QueryPlayerSimpleData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Player_SC_QueryPlayerSimpleData::MergeFrom(const Player_SC_QueryPlayerSimpleData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_simple_data()) {
      mutable_simple_data()->::proto::message::PlayerSimpleData::MergeFrom(from.simple_data());
    }
    if (from.has_online()) {
      set_online(from.online());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Player_SC_QueryPlayerSimpleData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Player_SC_QueryPlayerSimpleData::CopyFrom(const Player_SC_QueryPlayerSimpleData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Player_SC_QueryPlayerSimpleData::IsInitialized() const {

  return true;
}

void Player_SC_QueryPlayerSimpleData::Swap(Player_SC_QueryPlayerSimpleData* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(simple_data_, other->simple_data_);
    std::swap(online_, other->online_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Player_SC_QueryPlayerSimpleData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Player_SC_QueryPlayerSimpleData_descriptor_;
  metadata.reflection = Player_SC_QueryPlayerSimpleData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace proto

// @@protoc_insertion_point(global_scope)
