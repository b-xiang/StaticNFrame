// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lively.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "lively.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace message {

namespace {

const ::google::protobuf::Descriptor* LivelyUpInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LivelyUpInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Lively_CS_GetInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Lively_CS_GetInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Lively_CS_ReqAward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Lively_CS_ReqAward_reflection_ = NULL;
const ::google::protobuf::Descriptor* LivelyInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LivelyInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Lively_SC_GetInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Lively_SC_GetInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Lively_SC_ReqAward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Lively_SC_ReqAward_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerLivelyInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerLivelyInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Lively_CS_ReqLivelyUpData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Lively_CS_ReqLivelyUpData_reflection_ = NULL;
const ::google::protobuf::Descriptor* Lively_SC_AckLivelyUpData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Lively_SC_AckLivelyUpData_reflection_ = NULL;
const ::google::protobuf::Descriptor* Lively_CS_ReqUpgradeLively_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Lively_CS_ReqUpgradeLively_reflection_ = NULL;
const ::google::protobuf::Descriptor* Lively_SC_AckUpgradeLively_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Lively_SC_AckUpgradeLively_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_lively_2eproto() {
  protobuf_AddDesc_lively_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "lively.proto");
  GOOGLE_CHECK(file != NULL);
  LivelyUpInfo_descriptor_ = file->message_type(0);
  static const int LivelyUpInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LivelyUpInfo, livelyupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LivelyUpInfo, liveupexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LivelyUpInfo, dayamass_),
  };
  LivelyUpInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LivelyUpInfo_descriptor_,
      LivelyUpInfo::default_instance_,
      LivelyUpInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LivelyUpInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LivelyUpInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LivelyUpInfo));
  Lively_CS_GetInfo_descriptor_ = file->message_type(1);
  static const int Lively_CS_GetInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lively_CS_GetInfo, ntype_),
  };
  Lively_CS_GetInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Lively_CS_GetInfo_descriptor_,
      Lively_CS_GetInfo::default_instance_,
      Lively_CS_GetInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lively_CS_GetInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lively_CS_GetInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Lively_CS_GetInfo));
  Lively_CS_ReqAward_descriptor_ = file->message_type(2);
  static const int Lively_CS_ReqAward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lively_CS_ReqAward, nnumber_),
  };
  Lively_CS_ReqAward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Lively_CS_ReqAward_descriptor_,
      Lively_CS_ReqAward::default_instance_,
      Lively_CS_ReqAward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lively_CS_ReqAward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lively_CS_ReqAward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Lively_CS_ReqAward));
  LivelyInfo_descriptor_ = file->message_type(3);
  static const int LivelyInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LivelyInfo, nid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LivelyInfo, nfinishtimes_),
  };
  LivelyInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LivelyInfo_descriptor_,
      LivelyInfo::default_instance_,
      LivelyInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LivelyInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LivelyInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LivelyInfo));
  Lively_SC_GetInfo_descriptor_ = file->message_type(4);
  static const int Lively_SC_GetInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lively_SC_GetInfo, lively_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lively_SC_GetInfo, multipleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lively_SC_GetInfo, multiplevalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lively_SC_GetInfo, sumlively_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lively_SC_GetInfo, nflag_),
  };
  Lively_SC_GetInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Lively_SC_GetInfo_descriptor_,
      Lively_SC_GetInfo::default_instance_,
      Lively_SC_GetInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lively_SC_GetInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lively_SC_GetInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Lively_SC_GetInfo));
  Lively_SC_ReqAward_descriptor_ = file->message_type(5);
  static const int Lively_SC_ReqAward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lively_SC_ReqAward, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lively_SC_ReqAward, items_),
  };
  Lively_SC_ReqAward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Lively_SC_ReqAward_descriptor_,
      Lively_SC_ReqAward::default_instance_,
      Lively_SC_ReqAward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lively_SC_ReqAward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lively_SC_ReqAward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Lively_SC_ReqAward));
  PlayerLivelyInfo_descriptor_ = file->message_type(6);
  static const int PlayerLivelyInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLivelyInfo, sumlively_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLivelyInfo, lively_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLivelyInfo, nflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLivelyInfo, resettime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLivelyInfo, overlimitrecord_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLivelyInfo, overlimittoday_),
  };
  PlayerLivelyInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerLivelyInfo_descriptor_,
      PlayerLivelyInfo::default_instance_,
      PlayerLivelyInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLivelyInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLivelyInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerLivelyInfo));
  Lively_CS_ReqLivelyUpData_descriptor_ = file->message_type(7);
  static const int Lively_CS_ReqLivelyUpData_offsets_[1] = {
  };
  Lively_CS_ReqLivelyUpData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Lively_CS_ReqLivelyUpData_descriptor_,
      Lively_CS_ReqLivelyUpData::default_instance_,
      Lively_CS_ReqLivelyUpData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lively_CS_ReqLivelyUpData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lively_CS_ReqLivelyUpData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Lively_CS_ReqLivelyUpData));
  Lively_SC_AckLivelyUpData_descriptor_ = file->message_type(8);
  static const int Lively_SC_AckLivelyUpData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lively_SC_AckLivelyUpData, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lively_SC_AckLivelyUpData, data_),
  };
  Lively_SC_AckLivelyUpData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Lively_SC_AckLivelyUpData_descriptor_,
      Lively_SC_AckLivelyUpData::default_instance_,
      Lively_SC_AckLivelyUpData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lively_SC_AckLivelyUpData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lively_SC_AckLivelyUpData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Lively_SC_AckLivelyUpData));
  Lively_CS_ReqUpgradeLively_descriptor_ = file->message_type(9);
  static const int Lively_CS_ReqUpgradeLively_offsets_[1] = {
  };
  Lively_CS_ReqUpgradeLively_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Lively_CS_ReqUpgradeLively_descriptor_,
      Lively_CS_ReqUpgradeLively::default_instance_,
      Lively_CS_ReqUpgradeLively_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lively_CS_ReqUpgradeLively, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lively_CS_ReqUpgradeLively, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Lively_CS_ReqUpgradeLively));
  Lively_SC_AckUpgradeLively_descriptor_ = file->message_type(10);
  static const int Lively_SC_AckUpgradeLively_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lively_SC_AckUpgradeLively, result_),
  };
  Lively_SC_AckUpgradeLively_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Lively_SC_AckUpgradeLively_descriptor_,
      Lively_SC_AckUpgradeLively::default_instance_,
      Lively_SC_AckUpgradeLively_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lively_SC_AckUpgradeLively, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lively_SC_AckUpgradeLively, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Lively_SC_AckUpgradeLively));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_lively_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LivelyUpInfo_descriptor_, &LivelyUpInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Lively_CS_GetInfo_descriptor_, &Lively_CS_GetInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Lively_CS_ReqAward_descriptor_, &Lively_CS_ReqAward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LivelyInfo_descriptor_, &LivelyInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Lively_SC_GetInfo_descriptor_, &Lively_SC_GetInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Lively_SC_ReqAward_descriptor_, &Lively_SC_ReqAward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerLivelyInfo_descriptor_, &PlayerLivelyInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Lively_CS_ReqLivelyUpData_descriptor_, &Lively_CS_ReqLivelyUpData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Lively_SC_AckLivelyUpData_descriptor_, &Lively_SC_AckLivelyUpData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Lively_CS_ReqUpgradeLively_descriptor_, &Lively_CS_ReqUpgradeLively::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Lively_SC_AckUpgradeLively_descriptor_, &Lively_SC_AckUpgradeLively::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_lively_2eproto() {
  delete LivelyUpInfo::default_instance_;
  delete LivelyUpInfo_reflection_;
  delete Lively_CS_GetInfo::default_instance_;
  delete Lively_CS_GetInfo_reflection_;
  delete Lively_CS_ReqAward::default_instance_;
  delete Lively_CS_ReqAward_reflection_;
  delete LivelyInfo::default_instance_;
  delete LivelyInfo_reflection_;
  delete Lively_SC_GetInfo::default_instance_;
  delete Lively_SC_GetInfo_reflection_;
  delete Lively_SC_ReqAward::default_instance_;
  delete Lively_SC_ReqAward_reflection_;
  delete PlayerLivelyInfo::default_instance_;
  delete PlayerLivelyInfo_reflection_;
  delete Lively_CS_ReqLivelyUpData::default_instance_;
  delete Lively_CS_ReqLivelyUpData_reflection_;
  delete Lively_SC_AckLivelyUpData::default_instance_;
  delete Lively_SC_AckLivelyUpData_reflection_;
  delete Lively_CS_ReqUpgradeLively::default_instance_;
  delete Lively_CS_ReqUpgradeLively_reflection_;
  delete Lively_SC_AckUpgradeLively::default_instance_;
  delete Lively_SC_AckUpgradeLively_reflection_;
}

void protobuf_AddDesc_lively_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::proto::message::protobuf_AddDesc_item_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014lively.proto\022\rproto.message\032\nitem.prot"
    "o\"G\n\014LivelyUpInfo\022\022\n\nlivelyupid\030\001 \001(\r\022\021\n"
    "\tliveupexp\030\002 \001(\r\022\020\n\010dayamass\030\003 \001(\r\"\"\n\021Li"
    "vely_CS_GetInfo\022\r\n\005nType\030\001 \001(\005\"%\n\022Lively"
    "_CS_ReqAward\022\017\n\007nNumber\030\001 \002(\005\"/\n\nLivelyI"
    "nfo\022\013\n\003nID\030\001 \002(\005\022\024\n\014nFinishTimes\030\002 \002(\005\"\220"
    "\001\n\021Lively_SC_GetInfo\022.\n\013lively_info\030\001 \003("
    "\0132\031.proto.message.LivelyInfo\022\022\n\nmultiple"
    "ID\030\002 \002(\005\022\025\n\rmultipleValue\030\003 \002(\005\022\021\n\tsumLi"
    "vely\030\004 \002(\005\022\r\n\005nFlag\030\005 \002(\005\"O\n\022Lively_SC_R"
    "eqAward\022\016\n\006result\030\001 \002(\005\022)\n\005items\030\002 \003(\0132\032"
    ".proto.message.DropItemNum\"\250\001\n\020PlayerLiv"
    "elyInfo\022\021\n\tsumLively\030\001 \001(\005\022.\n\013lively_inf"
    "o\030\002 \003(\0132\031.proto.message.LivelyInfo\022\r\n\005nF"
    "lag\030\003 \001(\005\022\021\n\tresetTime\030\004 \001(\003\022\027\n\017overlimi"
    "tRecord\030\005 \001(\005\022\026\n\016overlimitToday\030\006 \001(\005\"\033\n"
    "\031Lively_CS_ReqLivelyUpData\"V\n\031Lively_SC_"
    "AckLivelyUpData\022\016\n\006result\030\001 \002(\005\022)\n\004data\030"
    "\002 \001(\0132\033.proto.message.LivelyUpInfo\"\034\n\032Li"
    "vely_CS_ReqUpgradeLively\",\n\032Lively_SC_Ac"
    "kUpgradeLively\022\016\n\006result\030\001 \002(\005B\017\n\rproto."
    "message", 847);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "lively.proto", &protobuf_RegisterTypes);
  LivelyUpInfo::default_instance_ = new LivelyUpInfo();
  Lively_CS_GetInfo::default_instance_ = new Lively_CS_GetInfo();
  Lively_CS_ReqAward::default_instance_ = new Lively_CS_ReqAward();
  LivelyInfo::default_instance_ = new LivelyInfo();
  Lively_SC_GetInfo::default_instance_ = new Lively_SC_GetInfo();
  Lively_SC_ReqAward::default_instance_ = new Lively_SC_ReqAward();
  PlayerLivelyInfo::default_instance_ = new PlayerLivelyInfo();
  Lively_CS_ReqLivelyUpData::default_instance_ = new Lively_CS_ReqLivelyUpData();
  Lively_SC_AckLivelyUpData::default_instance_ = new Lively_SC_AckLivelyUpData();
  Lively_CS_ReqUpgradeLively::default_instance_ = new Lively_CS_ReqUpgradeLively();
  Lively_SC_AckUpgradeLively::default_instance_ = new Lively_SC_AckUpgradeLively();
  LivelyUpInfo::default_instance_->InitAsDefaultInstance();
  Lively_CS_GetInfo::default_instance_->InitAsDefaultInstance();
  Lively_CS_ReqAward::default_instance_->InitAsDefaultInstance();
  LivelyInfo::default_instance_->InitAsDefaultInstance();
  Lively_SC_GetInfo::default_instance_->InitAsDefaultInstance();
  Lively_SC_ReqAward::default_instance_->InitAsDefaultInstance();
  PlayerLivelyInfo::default_instance_->InitAsDefaultInstance();
  Lively_CS_ReqLivelyUpData::default_instance_->InitAsDefaultInstance();
  Lively_SC_AckLivelyUpData::default_instance_->InitAsDefaultInstance();
  Lively_CS_ReqUpgradeLively::default_instance_->InitAsDefaultInstance();
  Lively_SC_AckUpgradeLively::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_lively_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_lively_2eproto {
  StaticDescriptorInitializer_lively_2eproto() {
    protobuf_AddDesc_lively_2eproto();
  }
} static_descriptor_initializer_lively_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int LivelyUpInfo::kLivelyupidFieldNumber;
const int LivelyUpInfo::kLiveupexpFieldNumber;
const int LivelyUpInfo::kDayamassFieldNumber;
#endif  // !_MSC_VER

LivelyUpInfo::LivelyUpInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LivelyUpInfo::InitAsDefaultInstance() {
}

LivelyUpInfo::LivelyUpInfo(const LivelyUpInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LivelyUpInfo::SharedCtor() {
  _cached_size_ = 0;
  livelyupid_ = 0u;
  liveupexp_ = 0u;
  dayamass_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LivelyUpInfo::~LivelyUpInfo() {
  SharedDtor();
}

void LivelyUpInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LivelyUpInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LivelyUpInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LivelyUpInfo_descriptor_;
}

const LivelyUpInfo& LivelyUpInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lively_2eproto();
  return *default_instance_;
}

LivelyUpInfo* LivelyUpInfo::default_instance_ = NULL;

LivelyUpInfo* LivelyUpInfo::New() const {
  return new LivelyUpInfo;
}

void LivelyUpInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    livelyupid_ = 0u;
    liveupexp_ = 0u;
    dayamass_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LivelyUpInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 livelyupid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &livelyupid_)));
          set_has_livelyupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_liveupexp;
        break;
      }

      // optional uint32 liveupexp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_liveupexp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &liveupexp_)));
          set_has_liveupexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dayamass;
        break;
      }

      // optional uint32 dayamass = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dayamass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dayamass_)));
          set_has_dayamass();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LivelyUpInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 livelyupid = 1;
  if (has_livelyupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->livelyupid(), output);
  }

  // optional uint32 liveupexp = 2;
  if (has_liveupexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->liveupexp(), output);
  }

  // optional uint32 dayamass = 3;
  if (has_dayamass()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->dayamass(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LivelyUpInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 livelyupid = 1;
  if (has_livelyupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->livelyupid(), target);
  }

  // optional uint32 liveupexp = 2;
  if (has_liveupexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->liveupexp(), target);
  }

  // optional uint32 dayamass = 3;
  if (has_dayamass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->dayamass(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LivelyUpInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 livelyupid = 1;
    if (has_livelyupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->livelyupid());
    }

    // optional uint32 liveupexp = 2;
    if (has_liveupexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->liveupexp());
    }

    // optional uint32 dayamass = 3;
    if (has_dayamass()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dayamass());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LivelyUpInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LivelyUpInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LivelyUpInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LivelyUpInfo::MergeFrom(const LivelyUpInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_livelyupid()) {
      set_livelyupid(from.livelyupid());
    }
    if (from.has_liveupexp()) {
      set_liveupexp(from.liveupexp());
    }
    if (from.has_dayamass()) {
      set_dayamass(from.dayamass());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LivelyUpInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LivelyUpInfo::CopyFrom(const LivelyUpInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LivelyUpInfo::IsInitialized() const {

  return true;
}

void LivelyUpInfo::Swap(LivelyUpInfo* other) {
  if (other != this) {
    std::swap(livelyupid_, other->livelyupid_);
    std::swap(liveupexp_, other->liveupexp_);
    std::swap(dayamass_, other->dayamass_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LivelyUpInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LivelyUpInfo_descriptor_;
  metadata.reflection = LivelyUpInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Lively_CS_GetInfo::kNTypeFieldNumber;
#endif  // !_MSC_VER

Lively_CS_GetInfo::Lively_CS_GetInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Lively_CS_GetInfo::InitAsDefaultInstance() {
}

Lively_CS_GetInfo::Lively_CS_GetInfo(const Lively_CS_GetInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Lively_CS_GetInfo::SharedCtor() {
  _cached_size_ = 0;
  ntype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Lively_CS_GetInfo::~Lively_CS_GetInfo() {
  SharedDtor();
}

void Lively_CS_GetInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Lively_CS_GetInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Lively_CS_GetInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Lively_CS_GetInfo_descriptor_;
}

const Lively_CS_GetInfo& Lively_CS_GetInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lively_2eproto();
  return *default_instance_;
}

Lively_CS_GetInfo* Lively_CS_GetInfo::default_instance_ = NULL;

Lively_CS_GetInfo* Lively_CS_GetInfo::New() const {
  return new Lively_CS_GetInfo;
}

void Lively_CS_GetInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ntype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Lively_CS_GetInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 nType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ntype_)));
          set_has_ntype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Lively_CS_GetInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 nType = 1;
  if (has_ntype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ntype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Lively_CS_GetInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 nType = 1;
  if (has_ntype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ntype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Lively_CS_GetInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 nType = 1;
    if (has_ntype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ntype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Lively_CS_GetInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Lively_CS_GetInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Lively_CS_GetInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Lively_CS_GetInfo::MergeFrom(const Lively_CS_GetInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ntype()) {
      set_ntype(from.ntype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Lively_CS_GetInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Lively_CS_GetInfo::CopyFrom(const Lively_CS_GetInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lively_CS_GetInfo::IsInitialized() const {

  return true;
}

void Lively_CS_GetInfo::Swap(Lively_CS_GetInfo* other) {
  if (other != this) {
    std::swap(ntype_, other->ntype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Lively_CS_GetInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Lively_CS_GetInfo_descriptor_;
  metadata.reflection = Lively_CS_GetInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Lively_CS_ReqAward::kNNumberFieldNumber;
#endif  // !_MSC_VER

Lively_CS_ReqAward::Lively_CS_ReqAward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Lively_CS_ReqAward::InitAsDefaultInstance() {
}

Lively_CS_ReqAward::Lively_CS_ReqAward(const Lively_CS_ReqAward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Lively_CS_ReqAward::SharedCtor() {
  _cached_size_ = 0;
  nnumber_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Lively_CS_ReqAward::~Lively_CS_ReqAward() {
  SharedDtor();
}

void Lively_CS_ReqAward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Lively_CS_ReqAward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Lively_CS_ReqAward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Lively_CS_ReqAward_descriptor_;
}

const Lively_CS_ReqAward& Lively_CS_ReqAward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lively_2eproto();
  return *default_instance_;
}

Lively_CS_ReqAward* Lively_CS_ReqAward::default_instance_ = NULL;

Lively_CS_ReqAward* Lively_CS_ReqAward::New() const {
  return new Lively_CS_ReqAward;
}

void Lively_CS_ReqAward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nnumber_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Lively_CS_ReqAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 nNumber = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nnumber_)));
          set_has_nnumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Lively_CS_ReqAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 nNumber = 1;
  if (has_nnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nnumber(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Lively_CS_ReqAward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 nNumber = 1;
  if (has_nnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nnumber(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Lively_CS_ReqAward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 nNumber = 1;
    if (has_nnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nnumber());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Lively_CS_ReqAward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Lively_CS_ReqAward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Lively_CS_ReqAward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Lively_CS_ReqAward::MergeFrom(const Lively_CS_ReqAward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nnumber()) {
      set_nnumber(from.nnumber());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Lively_CS_ReqAward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Lively_CS_ReqAward::CopyFrom(const Lively_CS_ReqAward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lively_CS_ReqAward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Lively_CS_ReqAward::Swap(Lively_CS_ReqAward* other) {
  if (other != this) {
    std::swap(nnumber_, other->nnumber_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Lively_CS_ReqAward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Lively_CS_ReqAward_descriptor_;
  metadata.reflection = Lively_CS_ReqAward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LivelyInfo::kNIDFieldNumber;
const int LivelyInfo::kNFinishTimesFieldNumber;
#endif  // !_MSC_VER

LivelyInfo::LivelyInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LivelyInfo::InitAsDefaultInstance() {
}

LivelyInfo::LivelyInfo(const LivelyInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LivelyInfo::SharedCtor() {
  _cached_size_ = 0;
  nid_ = 0;
  nfinishtimes_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LivelyInfo::~LivelyInfo() {
  SharedDtor();
}

void LivelyInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LivelyInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LivelyInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LivelyInfo_descriptor_;
}

const LivelyInfo& LivelyInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lively_2eproto();
  return *default_instance_;
}

LivelyInfo* LivelyInfo::default_instance_ = NULL;

LivelyInfo* LivelyInfo::New() const {
  return new LivelyInfo;
}

void LivelyInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nid_ = 0;
    nfinishtimes_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LivelyInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 nID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nid_)));
          set_has_nid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nFinishTimes;
        break;
      }

      // required int32 nFinishTimes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nFinishTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nfinishtimes_)));
          set_has_nfinishtimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LivelyInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 nID = 1;
  if (has_nid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nid(), output);
  }

  // required int32 nFinishTimes = 2;
  if (has_nfinishtimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nfinishtimes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LivelyInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 nID = 1;
  if (has_nid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nid(), target);
  }

  // required int32 nFinishTimes = 2;
  if (has_nfinishtimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->nfinishtimes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LivelyInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 nID = 1;
    if (has_nid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nid());
    }

    // required int32 nFinishTimes = 2;
    if (has_nfinishtimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nfinishtimes());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LivelyInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LivelyInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LivelyInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LivelyInfo::MergeFrom(const LivelyInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nid()) {
      set_nid(from.nid());
    }
    if (from.has_nfinishtimes()) {
      set_nfinishtimes(from.nfinishtimes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LivelyInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LivelyInfo::CopyFrom(const LivelyInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LivelyInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void LivelyInfo::Swap(LivelyInfo* other) {
  if (other != this) {
    std::swap(nid_, other->nid_);
    std::swap(nfinishtimes_, other->nfinishtimes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LivelyInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LivelyInfo_descriptor_;
  metadata.reflection = LivelyInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Lively_SC_GetInfo::kLivelyInfoFieldNumber;
const int Lively_SC_GetInfo::kMultipleIDFieldNumber;
const int Lively_SC_GetInfo::kMultipleValueFieldNumber;
const int Lively_SC_GetInfo::kSumLivelyFieldNumber;
const int Lively_SC_GetInfo::kNFlagFieldNumber;
#endif  // !_MSC_VER

Lively_SC_GetInfo::Lively_SC_GetInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Lively_SC_GetInfo::InitAsDefaultInstance() {
}

Lively_SC_GetInfo::Lively_SC_GetInfo(const Lively_SC_GetInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Lively_SC_GetInfo::SharedCtor() {
  _cached_size_ = 0;
  multipleid_ = 0;
  multiplevalue_ = 0;
  sumlively_ = 0;
  nflag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Lively_SC_GetInfo::~Lively_SC_GetInfo() {
  SharedDtor();
}

void Lively_SC_GetInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Lively_SC_GetInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Lively_SC_GetInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Lively_SC_GetInfo_descriptor_;
}

const Lively_SC_GetInfo& Lively_SC_GetInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lively_2eproto();
  return *default_instance_;
}

Lively_SC_GetInfo* Lively_SC_GetInfo::default_instance_ = NULL;

Lively_SC_GetInfo* Lively_SC_GetInfo::New() const {
  return new Lively_SC_GetInfo;
}

void Lively_SC_GetInfo::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    multipleid_ = 0;
    multiplevalue_ = 0;
    sumlively_ = 0;
    nflag_ = 0;
  }
  lively_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Lively_SC_GetInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.message.LivelyInfo lively_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lively_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lively_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_lively_info;
        if (input->ExpectTag(16)) goto parse_multipleID;
        break;
      }

      // required int32 multipleID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_multipleID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &multipleid_)));
          set_has_multipleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_multipleValue;
        break;
      }

      // required int32 multipleValue = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_multipleValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &multiplevalue_)));
          set_has_multiplevalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sumLively;
        break;
      }

      // required int32 sumLively = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sumLively:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sumlively_)));
          set_has_sumlively();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_nFlag;
        break;
      }

      // required int32 nFlag = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nFlag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nflag_)));
          set_has_nflag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Lively_SC_GetInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.message.LivelyInfo lively_info = 1;
  for (int i = 0; i < this->lively_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->lively_info(i), output);
  }

  // required int32 multipleID = 2;
  if (has_multipleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->multipleid(), output);
  }

  // required int32 multipleValue = 3;
  if (has_multiplevalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->multiplevalue(), output);
  }

  // required int32 sumLively = 4;
  if (has_sumlively()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sumlively(), output);
  }

  // required int32 nFlag = 5;
  if (has_nflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->nflag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Lively_SC_GetInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.message.LivelyInfo lively_info = 1;
  for (int i = 0; i < this->lively_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->lively_info(i), target);
  }

  // required int32 multipleID = 2;
  if (has_multipleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->multipleid(), target);
  }

  // required int32 multipleValue = 3;
  if (has_multiplevalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->multiplevalue(), target);
  }

  // required int32 sumLively = 4;
  if (has_sumlively()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->sumlively(), target);
  }

  // required int32 nFlag = 5;
  if (has_nflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->nflag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Lively_SC_GetInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required int32 multipleID = 2;
    if (has_multipleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->multipleid());
    }

    // required int32 multipleValue = 3;
    if (has_multiplevalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->multiplevalue());
    }

    // required int32 sumLively = 4;
    if (has_sumlively()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sumlively());
    }

    // required int32 nFlag = 5;
    if (has_nflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nflag());
    }

  }
  // repeated .proto.message.LivelyInfo lively_info = 1;
  total_size += 1 * this->lively_info_size();
  for (int i = 0; i < this->lively_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lively_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Lively_SC_GetInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Lively_SC_GetInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Lively_SC_GetInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Lively_SC_GetInfo::MergeFrom(const Lively_SC_GetInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  lively_info_.MergeFrom(from.lively_info_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_multipleid()) {
      set_multipleid(from.multipleid());
    }
    if (from.has_multiplevalue()) {
      set_multiplevalue(from.multiplevalue());
    }
    if (from.has_sumlively()) {
      set_sumlively(from.sumlively());
    }
    if (from.has_nflag()) {
      set_nflag(from.nflag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Lively_SC_GetInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Lively_SC_GetInfo::CopyFrom(const Lively_SC_GetInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lively_SC_GetInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001e) != 0x0000001e) return false;

  for (int i = 0; i < lively_info_size(); i++) {
    if (!this->lively_info(i).IsInitialized()) return false;
  }
  return true;
}

void Lively_SC_GetInfo::Swap(Lively_SC_GetInfo* other) {
  if (other != this) {
    lively_info_.Swap(&other->lively_info_);
    std::swap(multipleid_, other->multipleid_);
    std::swap(multiplevalue_, other->multiplevalue_);
    std::swap(sumlively_, other->sumlively_);
    std::swap(nflag_, other->nflag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Lively_SC_GetInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Lively_SC_GetInfo_descriptor_;
  metadata.reflection = Lively_SC_GetInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Lively_SC_ReqAward::kResultFieldNumber;
const int Lively_SC_ReqAward::kItemsFieldNumber;
#endif  // !_MSC_VER

Lively_SC_ReqAward::Lively_SC_ReqAward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Lively_SC_ReqAward::InitAsDefaultInstance() {
}

Lively_SC_ReqAward::Lively_SC_ReqAward(const Lively_SC_ReqAward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Lively_SC_ReqAward::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Lively_SC_ReqAward::~Lively_SC_ReqAward() {
  SharedDtor();
}

void Lively_SC_ReqAward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Lively_SC_ReqAward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Lively_SC_ReqAward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Lively_SC_ReqAward_descriptor_;
}

const Lively_SC_ReqAward& Lively_SC_ReqAward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lively_2eproto();
  return *default_instance_;
}

Lively_SC_ReqAward* Lively_SC_ReqAward::default_instance_ = NULL;

Lively_SC_ReqAward* Lively_SC_ReqAward::New() const {
  return new Lively_SC_ReqAward;
}

void Lively_SC_ReqAward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Lively_SC_ReqAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_items;
        break;
      }

      // repeated .proto.message.DropItemNum items = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Lively_SC_ReqAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated .proto.message.DropItemNum items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Lively_SC_ReqAward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated .proto.message.DropItemNum items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Lively_SC_ReqAward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated .proto.message.DropItemNum items = 2;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Lively_SC_ReqAward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Lively_SC_ReqAward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Lively_SC_ReqAward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Lively_SC_ReqAward::MergeFrom(const Lively_SC_ReqAward& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Lively_SC_ReqAward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Lively_SC_ReqAward::CopyFrom(const Lively_SC_ReqAward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lively_SC_ReqAward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Lively_SC_ReqAward::Swap(Lively_SC_ReqAward* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Lively_SC_ReqAward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Lively_SC_ReqAward_descriptor_;
  metadata.reflection = Lively_SC_ReqAward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerLivelyInfo::kSumLivelyFieldNumber;
const int PlayerLivelyInfo::kLivelyInfoFieldNumber;
const int PlayerLivelyInfo::kNFlagFieldNumber;
const int PlayerLivelyInfo::kResetTimeFieldNumber;
const int PlayerLivelyInfo::kOverlimitRecordFieldNumber;
const int PlayerLivelyInfo::kOverlimitTodayFieldNumber;
#endif  // !_MSC_VER

PlayerLivelyInfo::PlayerLivelyInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerLivelyInfo::InitAsDefaultInstance() {
}

PlayerLivelyInfo::PlayerLivelyInfo(const PlayerLivelyInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerLivelyInfo::SharedCtor() {
  _cached_size_ = 0;
  sumlively_ = 0;
  nflag_ = 0;
  resettime_ = GOOGLE_LONGLONG(0);
  overlimitrecord_ = 0;
  overlimittoday_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerLivelyInfo::~PlayerLivelyInfo() {
  SharedDtor();
}

void PlayerLivelyInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerLivelyInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerLivelyInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerLivelyInfo_descriptor_;
}

const PlayerLivelyInfo& PlayerLivelyInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lively_2eproto();
  return *default_instance_;
}

PlayerLivelyInfo* PlayerLivelyInfo::default_instance_ = NULL;

PlayerLivelyInfo* PlayerLivelyInfo::New() const {
  return new PlayerLivelyInfo;
}

void PlayerLivelyInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sumlively_ = 0;
    nflag_ = 0;
    resettime_ = GOOGLE_LONGLONG(0);
    overlimitrecord_ = 0;
    overlimittoday_ = 0;
  }
  lively_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerLivelyInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 sumLively = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sumlively_)));
          set_has_sumlively();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_lively_info;
        break;
      }

      // repeated .proto.message.LivelyInfo lively_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lively_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lively_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_lively_info;
        if (input->ExpectTag(24)) goto parse_nFlag;
        break;
      }

      // optional int32 nFlag = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nFlag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nflag_)));
          set_has_nflag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_resetTime;
        break;
      }

      // optional int64 resetTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resetTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &resettime_)));
          set_has_resettime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_overlimitRecord;
        break;
      }

      // optional int32 overlimitRecord = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_overlimitRecord:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &overlimitrecord_)));
          set_has_overlimitrecord();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_overlimitToday;
        break;
      }

      // optional int32 overlimitToday = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_overlimitToday:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &overlimittoday_)));
          set_has_overlimittoday();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerLivelyInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 sumLively = 1;
  if (has_sumlively()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sumlively(), output);
  }

  // repeated .proto.message.LivelyInfo lively_info = 2;
  for (int i = 0; i < this->lively_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->lively_info(i), output);
  }

  // optional int32 nFlag = 3;
  if (has_nflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->nflag(), output);
  }

  // optional int64 resetTime = 4;
  if (has_resettime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->resettime(), output);
  }

  // optional int32 overlimitRecord = 5;
  if (has_overlimitrecord()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->overlimitrecord(), output);
  }

  // optional int32 overlimitToday = 6;
  if (has_overlimittoday()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->overlimittoday(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerLivelyInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 sumLively = 1;
  if (has_sumlively()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sumlively(), target);
  }

  // repeated .proto.message.LivelyInfo lively_info = 2;
  for (int i = 0; i < this->lively_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->lively_info(i), target);
  }

  // optional int32 nFlag = 3;
  if (has_nflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->nflag(), target);
  }

  // optional int64 resetTime = 4;
  if (has_resettime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->resettime(), target);
  }

  // optional int32 overlimitRecord = 5;
  if (has_overlimitrecord()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->overlimitrecord(), target);
  }

  // optional int32 overlimitToday = 6;
  if (has_overlimittoday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->overlimittoday(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerLivelyInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 sumLively = 1;
    if (has_sumlively()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sumlively());
    }

    // optional int32 nFlag = 3;
    if (has_nflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nflag());
    }

    // optional int64 resetTime = 4;
    if (has_resettime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->resettime());
    }

    // optional int32 overlimitRecord = 5;
    if (has_overlimitrecord()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->overlimitrecord());
    }

    // optional int32 overlimitToday = 6;
    if (has_overlimittoday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->overlimittoday());
    }

  }
  // repeated .proto.message.LivelyInfo lively_info = 2;
  total_size += 1 * this->lively_info_size();
  for (int i = 0; i < this->lively_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lively_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerLivelyInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerLivelyInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerLivelyInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerLivelyInfo::MergeFrom(const PlayerLivelyInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  lively_info_.MergeFrom(from.lively_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sumlively()) {
      set_sumlively(from.sumlively());
    }
    if (from.has_nflag()) {
      set_nflag(from.nflag());
    }
    if (from.has_resettime()) {
      set_resettime(from.resettime());
    }
    if (from.has_overlimitrecord()) {
      set_overlimitrecord(from.overlimitrecord());
    }
    if (from.has_overlimittoday()) {
      set_overlimittoday(from.overlimittoday());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerLivelyInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerLivelyInfo::CopyFrom(const PlayerLivelyInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerLivelyInfo::IsInitialized() const {

  for (int i = 0; i < lively_info_size(); i++) {
    if (!this->lively_info(i).IsInitialized()) return false;
  }
  return true;
}

void PlayerLivelyInfo::Swap(PlayerLivelyInfo* other) {
  if (other != this) {
    std::swap(sumlively_, other->sumlively_);
    lively_info_.Swap(&other->lively_info_);
    std::swap(nflag_, other->nflag_);
    std::swap(resettime_, other->resettime_);
    std::swap(overlimitrecord_, other->overlimitrecord_);
    std::swap(overlimittoday_, other->overlimittoday_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerLivelyInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerLivelyInfo_descriptor_;
  metadata.reflection = PlayerLivelyInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Lively_CS_ReqLivelyUpData::Lively_CS_ReqLivelyUpData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Lively_CS_ReqLivelyUpData::InitAsDefaultInstance() {
}

Lively_CS_ReqLivelyUpData::Lively_CS_ReqLivelyUpData(const Lively_CS_ReqLivelyUpData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Lively_CS_ReqLivelyUpData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Lively_CS_ReqLivelyUpData::~Lively_CS_ReqLivelyUpData() {
  SharedDtor();
}

void Lively_CS_ReqLivelyUpData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Lively_CS_ReqLivelyUpData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Lively_CS_ReqLivelyUpData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Lively_CS_ReqLivelyUpData_descriptor_;
}

const Lively_CS_ReqLivelyUpData& Lively_CS_ReqLivelyUpData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lively_2eproto();
  return *default_instance_;
}

Lively_CS_ReqLivelyUpData* Lively_CS_ReqLivelyUpData::default_instance_ = NULL;

Lively_CS_ReqLivelyUpData* Lively_CS_ReqLivelyUpData::New() const {
  return new Lively_CS_ReqLivelyUpData;
}

void Lively_CS_ReqLivelyUpData::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Lively_CS_ReqLivelyUpData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Lively_CS_ReqLivelyUpData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Lively_CS_ReqLivelyUpData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Lively_CS_ReqLivelyUpData::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Lively_CS_ReqLivelyUpData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Lively_CS_ReqLivelyUpData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Lively_CS_ReqLivelyUpData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Lively_CS_ReqLivelyUpData::MergeFrom(const Lively_CS_ReqLivelyUpData& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Lively_CS_ReqLivelyUpData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Lively_CS_ReqLivelyUpData::CopyFrom(const Lively_CS_ReqLivelyUpData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lively_CS_ReqLivelyUpData::IsInitialized() const {

  return true;
}

void Lively_CS_ReqLivelyUpData::Swap(Lively_CS_ReqLivelyUpData* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Lively_CS_ReqLivelyUpData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Lively_CS_ReqLivelyUpData_descriptor_;
  metadata.reflection = Lively_CS_ReqLivelyUpData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Lively_SC_AckLivelyUpData::kResultFieldNumber;
const int Lively_SC_AckLivelyUpData::kDataFieldNumber;
#endif  // !_MSC_VER

Lively_SC_AckLivelyUpData::Lively_SC_AckLivelyUpData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Lively_SC_AckLivelyUpData::InitAsDefaultInstance() {
  data_ = const_cast< ::proto::message::LivelyUpInfo*>(&::proto::message::LivelyUpInfo::default_instance());
}

Lively_SC_AckLivelyUpData::Lively_SC_AckLivelyUpData(const Lively_SC_AckLivelyUpData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Lively_SC_AckLivelyUpData::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Lively_SC_AckLivelyUpData::~Lively_SC_AckLivelyUpData() {
  SharedDtor();
}

void Lively_SC_AckLivelyUpData::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void Lively_SC_AckLivelyUpData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Lively_SC_AckLivelyUpData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Lively_SC_AckLivelyUpData_descriptor_;
}

const Lively_SC_AckLivelyUpData& Lively_SC_AckLivelyUpData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lively_2eproto();
  return *default_instance_;
}

Lively_SC_AckLivelyUpData* Lively_SC_AckLivelyUpData::default_instance_ = NULL;

Lively_SC_AckLivelyUpData* Lively_SC_AckLivelyUpData::New() const {
  return new Lively_SC_AckLivelyUpData;
}

void Lively_SC_AckLivelyUpData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_data()) {
      if (data_ != NULL) data_->::proto::message::LivelyUpInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Lively_SC_AckLivelyUpData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional .proto.message.LivelyUpInfo data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Lively_SC_AckLivelyUpData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .proto.message.LivelyUpInfo data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Lively_SC_AckLivelyUpData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .proto.message.LivelyUpInfo data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Lively_SC_AckLivelyUpData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .proto.message.LivelyUpInfo data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Lively_SC_AckLivelyUpData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Lively_SC_AckLivelyUpData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Lively_SC_AckLivelyUpData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Lively_SC_AckLivelyUpData::MergeFrom(const Lively_SC_AckLivelyUpData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_data()) {
      mutable_data()->::proto::message::LivelyUpInfo::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Lively_SC_AckLivelyUpData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Lively_SC_AckLivelyUpData::CopyFrom(const Lively_SC_AckLivelyUpData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lively_SC_AckLivelyUpData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Lively_SC_AckLivelyUpData::Swap(Lively_SC_AckLivelyUpData* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Lively_SC_AckLivelyUpData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Lively_SC_AckLivelyUpData_descriptor_;
  metadata.reflection = Lively_SC_AckLivelyUpData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Lively_CS_ReqUpgradeLively::Lively_CS_ReqUpgradeLively()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Lively_CS_ReqUpgradeLively::InitAsDefaultInstance() {
}

Lively_CS_ReqUpgradeLively::Lively_CS_ReqUpgradeLively(const Lively_CS_ReqUpgradeLively& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Lively_CS_ReqUpgradeLively::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Lively_CS_ReqUpgradeLively::~Lively_CS_ReqUpgradeLively() {
  SharedDtor();
}

void Lively_CS_ReqUpgradeLively::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Lively_CS_ReqUpgradeLively::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Lively_CS_ReqUpgradeLively::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Lively_CS_ReqUpgradeLively_descriptor_;
}

const Lively_CS_ReqUpgradeLively& Lively_CS_ReqUpgradeLively::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lively_2eproto();
  return *default_instance_;
}

Lively_CS_ReqUpgradeLively* Lively_CS_ReqUpgradeLively::default_instance_ = NULL;

Lively_CS_ReqUpgradeLively* Lively_CS_ReqUpgradeLively::New() const {
  return new Lively_CS_ReqUpgradeLively;
}

void Lively_CS_ReqUpgradeLively::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Lively_CS_ReqUpgradeLively::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Lively_CS_ReqUpgradeLively::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Lively_CS_ReqUpgradeLively::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Lively_CS_ReqUpgradeLively::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Lively_CS_ReqUpgradeLively::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Lively_CS_ReqUpgradeLively* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Lively_CS_ReqUpgradeLively*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Lively_CS_ReqUpgradeLively::MergeFrom(const Lively_CS_ReqUpgradeLively& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Lively_CS_ReqUpgradeLively::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Lively_CS_ReqUpgradeLively::CopyFrom(const Lively_CS_ReqUpgradeLively& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lively_CS_ReqUpgradeLively::IsInitialized() const {

  return true;
}

void Lively_CS_ReqUpgradeLively::Swap(Lively_CS_ReqUpgradeLively* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Lively_CS_ReqUpgradeLively::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Lively_CS_ReqUpgradeLively_descriptor_;
  metadata.reflection = Lively_CS_ReqUpgradeLively_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Lively_SC_AckUpgradeLively::kResultFieldNumber;
#endif  // !_MSC_VER

Lively_SC_AckUpgradeLively::Lively_SC_AckUpgradeLively()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Lively_SC_AckUpgradeLively::InitAsDefaultInstance() {
}

Lively_SC_AckUpgradeLively::Lively_SC_AckUpgradeLively(const Lively_SC_AckUpgradeLively& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Lively_SC_AckUpgradeLively::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Lively_SC_AckUpgradeLively::~Lively_SC_AckUpgradeLively() {
  SharedDtor();
}

void Lively_SC_AckUpgradeLively::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Lively_SC_AckUpgradeLively::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Lively_SC_AckUpgradeLively::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Lively_SC_AckUpgradeLively_descriptor_;
}

const Lively_SC_AckUpgradeLively& Lively_SC_AckUpgradeLively::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lively_2eproto();
  return *default_instance_;
}

Lively_SC_AckUpgradeLively* Lively_SC_AckUpgradeLively::default_instance_ = NULL;

Lively_SC_AckUpgradeLively* Lively_SC_AckUpgradeLively::New() const {
  return new Lively_SC_AckUpgradeLively;
}

void Lively_SC_AckUpgradeLively::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Lively_SC_AckUpgradeLively::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Lively_SC_AckUpgradeLively::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Lively_SC_AckUpgradeLively::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Lively_SC_AckUpgradeLively::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Lively_SC_AckUpgradeLively::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Lively_SC_AckUpgradeLively* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Lively_SC_AckUpgradeLively*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Lively_SC_AckUpgradeLively::MergeFrom(const Lively_SC_AckUpgradeLively& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Lively_SC_AckUpgradeLively::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Lively_SC_AckUpgradeLively::CopyFrom(const Lively_SC_AckUpgradeLively& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lively_SC_AckUpgradeLively::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Lively_SC_AckUpgradeLively::Swap(Lively_SC_AckUpgradeLively* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Lively_SC_AckUpgradeLively::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Lively_SC_AckUpgradeLively_descriptor_;
  metadata.reflection = Lively_SC_AckUpgradeLively_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace proto

// @@protoc_insertion_point(global_scope)
