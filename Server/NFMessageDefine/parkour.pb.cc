// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: parkour.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "parkour.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace message {

namespace {

const ::google::protobuf::Descriptor* Parkour_CS_GetInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Parkour_CS_GetInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Parkour_CS_ReqBegin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Parkour_CS_ReqBegin_reflection_ = NULL;
const ::google::protobuf::Descriptor* ParkourRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ParkourRank_reflection_ = NULL;
const ::google::protobuf::Descriptor* ParkourRank_RecordItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ParkourRank_RecordItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* Parkour_SC_GetInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Parkour_SC_GetInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Parkour_SC_GetInfo_Path_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Parkour_SC_GetInfo_Path_reflection_ = NULL;
const ::google::protobuf::Descriptor* Parkour_SC_ReqBegin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Parkour_SC_ReqBegin_reflection_ = NULL;
const ::google::protobuf::Descriptor* Parkour_CS_Finish_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Parkour_CS_Finish_reflection_ = NULL;
const ::google::protobuf::Descriptor* ParkourInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ParkourInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Parkour_CS_UsePotion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Parkour_CS_UsePotion_reflection_ = NULL;
const ::google::protobuf::Descriptor* Parkour_SC_UsePotion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Parkour_SC_UsePotion_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_parkour_2eproto() {
  protobuf_AddDesc_parkour_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "parkour.proto");
  GOOGLE_CHECK(file != NULL);
  Parkour_CS_GetInfo_descriptor_ = file->message_type(0);
  static const int Parkour_CS_GetInfo_offsets_[1] = {
  };
  Parkour_CS_GetInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Parkour_CS_GetInfo_descriptor_,
      Parkour_CS_GetInfo::default_instance_,
      Parkour_CS_GetInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parkour_CS_GetInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parkour_CS_GetInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Parkour_CS_GetInfo));
  Parkour_CS_ReqBegin_descriptor_ = file->message_type(1);
  static const int Parkour_CS_ReqBegin_offsets_[1] = {
  };
  Parkour_CS_ReqBegin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Parkour_CS_ReqBegin_descriptor_,
      Parkour_CS_ReqBegin::default_instance_,
      Parkour_CS_ReqBegin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parkour_CS_ReqBegin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parkour_CS_ReqBegin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Parkour_CS_ReqBegin));
  ParkourRank_descriptor_ = file->message_type(2);
  static const int ParkourRank_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParkourRank, item_),
  };
  ParkourRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ParkourRank_descriptor_,
      ParkourRank::default_instance_,
      ParkourRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParkourRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParkourRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ParkourRank));
  ParkourRank_RecordItem_descriptor_ = ParkourRank_descriptor_->nested_type(0);
  static const int ParkourRank_RecordItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParkourRank_RecordItem, ranking_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParkourRank_RecordItem, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParkourRank_RecordItem, score_),
  };
  ParkourRank_RecordItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ParkourRank_RecordItem_descriptor_,
      ParkourRank_RecordItem::default_instance_,
      ParkourRank_RecordItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParkourRank_RecordItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParkourRank_RecordItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ParkourRank_RecordItem));
  Parkour_SC_GetInfo_descriptor_ = file->message_type(3);
  static const int Parkour_SC_GetInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parkour_SC_GetInfo, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parkour_SC_GetInfo, weekday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parkour_SC_GetInfo, parkour_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parkour_SC_GetInfo, lefttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parkour_SC_GetInfo, dungonid1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parkour_SC_GetInfo, dungonid2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parkour_SC_GetInfo, rank_),
  };
  Parkour_SC_GetInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Parkour_SC_GetInfo_descriptor_,
      Parkour_SC_GetInfo::default_instance_,
      Parkour_SC_GetInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parkour_SC_GetInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parkour_SC_GetInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Parkour_SC_GetInfo));
  Parkour_SC_GetInfo_Path_descriptor_ = Parkour_SC_GetInfo_descriptor_->nested_type(0);
  static const int Parkour_SC_GetInfo_Path_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parkour_SC_GetInfo_Path, check_),
  };
  Parkour_SC_GetInfo_Path_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Parkour_SC_GetInfo_Path_descriptor_,
      Parkour_SC_GetInfo_Path::default_instance_,
      Parkour_SC_GetInfo_Path_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parkour_SC_GetInfo_Path, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parkour_SC_GetInfo_Path, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Parkour_SC_GetInfo_Path));
  Parkour_SC_ReqBegin_descriptor_ = file->message_type(4);
  static const int Parkour_SC_ReqBegin_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parkour_SC_ReqBegin, result_),
  };
  Parkour_SC_ReqBegin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Parkour_SC_ReqBegin_descriptor_,
      Parkour_SC_ReqBegin::default_instance_,
      Parkour_SC_ReqBegin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parkour_SC_ReqBegin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parkour_SC_ReqBegin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Parkour_SC_ReqBegin));
  Parkour_CS_Finish_descriptor_ = file->message_type(5);
  static const int Parkour_CS_Finish_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parkour_CS_Finish, point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parkour_CS_Finish, parkourtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parkour_CS_Finish, item1num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parkour_CS_Finish, item2num_),
  };
  Parkour_CS_Finish_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Parkour_CS_Finish_descriptor_,
      Parkour_CS_Finish::default_instance_,
      Parkour_CS_Finish_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parkour_CS_Finish, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parkour_CS_Finish, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Parkour_CS_Finish));
  ParkourInfo_descriptor_ = file->message_type(6);
  static const int ParkourInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParkourInfo, daytimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParkourInfo, item1num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParkourInfo, item2num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParkourInfo, highest1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParkourInfo, highest2_),
  };
  ParkourInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ParkourInfo_descriptor_,
      ParkourInfo::default_instance_,
      ParkourInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParkourInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParkourInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ParkourInfo));
  Parkour_CS_UsePotion_descriptor_ = file->message_type(7);
  static const int Parkour_CS_UsePotion_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parkour_CS_UsePotion, potionindex_),
  };
  Parkour_CS_UsePotion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Parkour_CS_UsePotion_descriptor_,
      Parkour_CS_UsePotion::default_instance_,
      Parkour_CS_UsePotion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parkour_CS_UsePotion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parkour_CS_UsePotion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Parkour_CS_UsePotion));
  Parkour_SC_UsePotion_descriptor_ = file->message_type(8);
  static const int Parkour_SC_UsePotion_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parkour_SC_UsePotion, result_),
  };
  Parkour_SC_UsePotion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Parkour_SC_UsePotion_descriptor_,
      Parkour_SC_UsePotion::default_instance_,
      Parkour_SC_UsePotion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parkour_SC_UsePotion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parkour_SC_UsePotion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Parkour_SC_UsePotion));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_parkour_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Parkour_CS_GetInfo_descriptor_, &Parkour_CS_GetInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Parkour_CS_ReqBegin_descriptor_, &Parkour_CS_ReqBegin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ParkourRank_descriptor_, &ParkourRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ParkourRank_RecordItem_descriptor_, &ParkourRank_RecordItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Parkour_SC_GetInfo_descriptor_, &Parkour_SC_GetInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Parkour_SC_GetInfo_Path_descriptor_, &Parkour_SC_GetInfo_Path::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Parkour_SC_ReqBegin_descriptor_, &Parkour_SC_ReqBegin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Parkour_CS_Finish_descriptor_, &Parkour_CS_Finish::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ParkourInfo_descriptor_, &ParkourInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Parkour_CS_UsePotion_descriptor_, &Parkour_CS_UsePotion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Parkour_SC_UsePotion_descriptor_, &Parkour_SC_UsePotion::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_parkour_2eproto() {
  delete Parkour_CS_GetInfo::default_instance_;
  delete Parkour_CS_GetInfo_reflection_;
  delete Parkour_CS_ReqBegin::default_instance_;
  delete Parkour_CS_ReqBegin_reflection_;
  delete ParkourRank::default_instance_;
  delete ParkourRank_reflection_;
  delete ParkourRank_RecordItem::default_instance_;
  delete ParkourRank_RecordItem_reflection_;
  delete Parkour_SC_GetInfo::default_instance_;
  delete Parkour_SC_GetInfo_reflection_;
  delete Parkour_SC_GetInfo_Path::default_instance_;
  delete Parkour_SC_GetInfo_Path_reflection_;
  delete Parkour_SC_ReqBegin::default_instance_;
  delete Parkour_SC_ReqBegin_reflection_;
  delete Parkour_CS_Finish::default_instance_;
  delete Parkour_CS_Finish_reflection_;
  delete ParkourInfo::default_instance_;
  delete ParkourInfo_reflection_;
  delete Parkour_CS_UsePotion::default_instance_;
  delete Parkour_CS_UsePotion_reflection_;
  delete Parkour_SC_UsePotion::default_instance_;
  delete Parkour_SC_UsePotion_reflection_;
}

void protobuf_AddDesc_parkour_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::proto::message::protobuf_AddDesc_dungeon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rparkour.proto\022\rproto.message\032\rdungeon."
    "proto\"\024\n\022Parkour_CS_GetInfo\"\025\n\023Parkour_C"
    "S_ReqBegin\"~\n\013ParkourRank\0223\n\004item\030\001 \003(\0132"
    "%.proto.message.ParkourRank.RecordItem\032:"
    "\n\nRecordItem\022\017\n\007ranking\030\001 \002(\005\022\014\n\004name\030\002 "
    "\002(\t\022\r\n\005score\030\003 \002(\005\"\333\001\n\022Parkour_SC_GetInf"
    "o\022\016\n\006result\030\001 \002(\005\022\017\n\007weekday\030\002 \001(\005\022+\n\007pa"
    "rkour\030\003 \001(\0132\032.proto.message.ParkourInfo\022"
    "\020\n\010leftTime\030\004 \001(\005\022\021\n\tdungonid1\030\005 \001(\005\022\021\n\t"
    "dungonid2\030\006 \001(\005\022(\n\004rank\030\007 \001(\0132\032.proto.me"
    "ssage.ParkourRank\032\025\n\004Path\022\r\n\005check\030\001 \003(\005"
    "\"%\n\023Parkour_SC_ReqBegin\022\016\n\006result\030\001 \002(\005\""
    "[\n\021Parkour_CS_Finish\022\r\n\005point\030\001 \002(\005\022\023\n\013p"
    "arkourType\030\002 \002(\005\022\020\n\010item1num\030\003 \001(\005\022\020\n\010it"
    "em2num\030\004 \001(\005\"g\n\013ParkourInfo\022\020\n\010dayTimes\030"
    "\001 \002(\005\022\020\n\010item1Num\030\002 \001(\005\022\020\n\010item2Num\030\003 \001("
    "\005\022\020\n\010highest1\030\004 \001(\005\022\020\n\010highest2\030\005 \001(\005\"+\n"
    "\024Parkour_CS_UsePotion\022\023\n\013potionindex\030\001 \002"
    "(\005\"&\n\024Parkour_SC_UsePotion\022\016\n\006result\030\001 \002"
    "(\005B\017\n\rproto.message", 779);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "parkour.proto", &protobuf_RegisterTypes);
  Parkour_CS_GetInfo::default_instance_ = new Parkour_CS_GetInfo();
  Parkour_CS_ReqBegin::default_instance_ = new Parkour_CS_ReqBegin();
  ParkourRank::default_instance_ = new ParkourRank();
  ParkourRank_RecordItem::default_instance_ = new ParkourRank_RecordItem();
  Parkour_SC_GetInfo::default_instance_ = new Parkour_SC_GetInfo();
  Parkour_SC_GetInfo_Path::default_instance_ = new Parkour_SC_GetInfo_Path();
  Parkour_SC_ReqBegin::default_instance_ = new Parkour_SC_ReqBegin();
  Parkour_CS_Finish::default_instance_ = new Parkour_CS_Finish();
  ParkourInfo::default_instance_ = new ParkourInfo();
  Parkour_CS_UsePotion::default_instance_ = new Parkour_CS_UsePotion();
  Parkour_SC_UsePotion::default_instance_ = new Parkour_SC_UsePotion();
  Parkour_CS_GetInfo::default_instance_->InitAsDefaultInstance();
  Parkour_CS_ReqBegin::default_instance_->InitAsDefaultInstance();
  ParkourRank::default_instance_->InitAsDefaultInstance();
  ParkourRank_RecordItem::default_instance_->InitAsDefaultInstance();
  Parkour_SC_GetInfo::default_instance_->InitAsDefaultInstance();
  Parkour_SC_GetInfo_Path::default_instance_->InitAsDefaultInstance();
  Parkour_SC_ReqBegin::default_instance_->InitAsDefaultInstance();
  Parkour_CS_Finish::default_instance_->InitAsDefaultInstance();
  ParkourInfo::default_instance_->InitAsDefaultInstance();
  Parkour_CS_UsePotion::default_instance_->InitAsDefaultInstance();
  Parkour_SC_UsePotion::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_parkour_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_parkour_2eproto {
  StaticDescriptorInitializer_parkour_2eproto() {
    protobuf_AddDesc_parkour_2eproto();
  }
} static_descriptor_initializer_parkour_2eproto_;

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Parkour_CS_GetInfo::Parkour_CS_GetInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Parkour_CS_GetInfo::InitAsDefaultInstance() {
}

Parkour_CS_GetInfo::Parkour_CS_GetInfo(const Parkour_CS_GetInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Parkour_CS_GetInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Parkour_CS_GetInfo::~Parkour_CS_GetInfo() {
  SharedDtor();
}

void Parkour_CS_GetInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Parkour_CS_GetInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Parkour_CS_GetInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Parkour_CS_GetInfo_descriptor_;
}

const Parkour_CS_GetInfo& Parkour_CS_GetInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_parkour_2eproto();
  return *default_instance_;
}

Parkour_CS_GetInfo* Parkour_CS_GetInfo::default_instance_ = NULL;

Parkour_CS_GetInfo* Parkour_CS_GetInfo::New() const {
  return new Parkour_CS_GetInfo;
}

void Parkour_CS_GetInfo::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Parkour_CS_GetInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Parkour_CS_GetInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Parkour_CS_GetInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Parkour_CS_GetInfo::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Parkour_CS_GetInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Parkour_CS_GetInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Parkour_CS_GetInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Parkour_CS_GetInfo::MergeFrom(const Parkour_CS_GetInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Parkour_CS_GetInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Parkour_CS_GetInfo::CopyFrom(const Parkour_CS_GetInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Parkour_CS_GetInfo::IsInitialized() const {

  return true;
}

void Parkour_CS_GetInfo::Swap(Parkour_CS_GetInfo* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Parkour_CS_GetInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Parkour_CS_GetInfo_descriptor_;
  metadata.reflection = Parkour_CS_GetInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Parkour_CS_ReqBegin::Parkour_CS_ReqBegin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Parkour_CS_ReqBegin::InitAsDefaultInstance() {
}

Parkour_CS_ReqBegin::Parkour_CS_ReqBegin(const Parkour_CS_ReqBegin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Parkour_CS_ReqBegin::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Parkour_CS_ReqBegin::~Parkour_CS_ReqBegin() {
  SharedDtor();
}

void Parkour_CS_ReqBegin::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Parkour_CS_ReqBegin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Parkour_CS_ReqBegin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Parkour_CS_ReqBegin_descriptor_;
}

const Parkour_CS_ReqBegin& Parkour_CS_ReqBegin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_parkour_2eproto();
  return *default_instance_;
}

Parkour_CS_ReqBegin* Parkour_CS_ReqBegin::default_instance_ = NULL;

Parkour_CS_ReqBegin* Parkour_CS_ReqBegin::New() const {
  return new Parkour_CS_ReqBegin;
}

void Parkour_CS_ReqBegin::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Parkour_CS_ReqBegin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Parkour_CS_ReqBegin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Parkour_CS_ReqBegin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Parkour_CS_ReqBegin::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Parkour_CS_ReqBegin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Parkour_CS_ReqBegin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Parkour_CS_ReqBegin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Parkour_CS_ReqBegin::MergeFrom(const Parkour_CS_ReqBegin& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Parkour_CS_ReqBegin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Parkour_CS_ReqBegin::CopyFrom(const Parkour_CS_ReqBegin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Parkour_CS_ReqBegin::IsInitialized() const {

  return true;
}

void Parkour_CS_ReqBegin::Swap(Parkour_CS_ReqBegin* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Parkour_CS_ReqBegin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Parkour_CS_ReqBegin_descriptor_;
  metadata.reflection = Parkour_CS_ReqBegin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ParkourRank_RecordItem::kRankingFieldNumber;
const int ParkourRank_RecordItem::kNameFieldNumber;
const int ParkourRank_RecordItem::kScoreFieldNumber;
#endif  // !_MSC_VER

ParkourRank_RecordItem::ParkourRank_RecordItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ParkourRank_RecordItem::InitAsDefaultInstance() {
}

ParkourRank_RecordItem::ParkourRank_RecordItem(const ParkourRank_RecordItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ParkourRank_RecordItem::SharedCtor() {
  _cached_size_ = 0;
  ranking_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  score_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ParkourRank_RecordItem::~ParkourRank_RecordItem() {
  SharedDtor();
}

void ParkourRank_RecordItem::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ParkourRank_RecordItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ParkourRank_RecordItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ParkourRank_RecordItem_descriptor_;
}

const ParkourRank_RecordItem& ParkourRank_RecordItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_parkour_2eproto();
  return *default_instance_;
}

ParkourRank_RecordItem* ParkourRank_RecordItem::default_instance_ = NULL;

ParkourRank_RecordItem* ParkourRank_RecordItem::New() const {
  return new ParkourRank_RecordItem;
}

void ParkourRank_RecordItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ranking_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    score_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ParkourRank_RecordItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ranking = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ranking_)));
          set_has_ranking();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_score;
        break;
      }

      // required int32 score = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ParkourRank_RecordItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ranking = 1;
  if (has_ranking()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ranking(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // required int32 score = 3;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ParkourRank_RecordItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ranking = 1;
  if (has_ranking()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ranking(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required int32 score = 3;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ParkourRank_RecordItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ranking = 1;
    if (has_ranking()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ranking());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required int32 score = 3;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ParkourRank_RecordItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ParkourRank_RecordItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ParkourRank_RecordItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ParkourRank_RecordItem::MergeFrom(const ParkourRank_RecordItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ranking()) {
      set_ranking(from.ranking());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ParkourRank_RecordItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParkourRank_RecordItem::CopyFrom(const ParkourRank_RecordItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParkourRank_RecordItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ParkourRank_RecordItem::Swap(ParkourRank_RecordItem* other) {
  if (other != this) {
    std::swap(ranking_, other->ranking_);
    std::swap(name_, other->name_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ParkourRank_RecordItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ParkourRank_RecordItem_descriptor_;
  metadata.reflection = ParkourRank_RecordItem_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ParkourRank::kItemFieldNumber;
#endif  // !_MSC_VER

ParkourRank::ParkourRank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ParkourRank::InitAsDefaultInstance() {
}

ParkourRank::ParkourRank(const ParkourRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ParkourRank::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ParkourRank::~ParkourRank() {
  SharedDtor();
}

void ParkourRank::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ParkourRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ParkourRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ParkourRank_descriptor_;
}

const ParkourRank& ParkourRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_parkour_2eproto();
  return *default_instance_;
}

ParkourRank* ParkourRank::default_instance_ = NULL;

ParkourRank* ParkourRank::New() const {
  return new ParkourRank;
}

void ParkourRank::Clear() {
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ParkourRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.message.ParkourRank.RecordItem item = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_item;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ParkourRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.message.ParkourRank.RecordItem item = 1;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ParkourRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.message.ParkourRank.RecordItem item = 1;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ParkourRank::ByteSize() const {
  int total_size = 0;

  // repeated .proto.message.ParkourRank.RecordItem item = 1;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ParkourRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ParkourRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ParkourRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ParkourRank::MergeFrom(const ParkourRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ParkourRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParkourRank::CopyFrom(const ParkourRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParkourRank::IsInitialized() const {

  for (int i = 0; i < item_size(); i++) {
    if (!this->item(i).IsInitialized()) return false;
  }
  return true;
}

void ParkourRank::Swap(ParkourRank* other) {
  if (other != this) {
    item_.Swap(&other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ParkourRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ParkourRank_descriptor_;
  metadata.reflection = ParkourRank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Parkour_SC_GetInfo_Path::kCheckFieldNumber;
#endif  // !_MSC_VER

Parkour_SC_GetInfo_Path::Parkour_SC_GetInfo_Path()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Parkour_SC_GetInfo_Path::InitAsDefaultInstance() {
}

Parkour_SC_GetInfo_Path::Parkour_SC_GetInfo_Path(const Parkour_SC_GetInfo_Path& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Parkour_SC_GetInfo_Path::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Parkour_SC_GetInfo_Path::~Parkour_SC_GetInfo_Path() {
  SharedDtor();
}

void Parkour_SC_GetInfo_Path::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Parkour_SC_GetInfo_Path::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Parkour_SC_GetInfo_Path::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Parkour_SC_GetInfo_Path_descriptor_;
}

const Parkour_SC_GetInfo_Path& Parkour_SC_GetInfo_Path::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_parkour_2eproto();
  return *default_instance_;
}

Parkour_SC_GetInfo_Path* Parkour_SC_GetInfo_Path::default_instance_ = NULL;

Parkour_SC_GetInfo_Path* Parkour_SC_GetInfo_Path::New() const {
  return new Parkour_SC_GetInfo_Path;
}

void Parkour_SC_GetInfo_Path::Clear() {
  check_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Parkour_SC_GetInfo_Path::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 check = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_check:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_check())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_check())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_check;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Parkour_SC_GetInfo_Path::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 check = 1;
  for (int i = 0; i < this->check_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->check(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Parkour_SC_GetInfo_Path::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 check = 1;
  for (int i = 0; i < this->check_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->check(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Parkour_SC_GetInfo_Path::ByteSize() const {
  int total_size = 0;

  // repeated int32 check = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->check_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->check(i));
    }
    total_size += 1 * this->check_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Parkour_SC_GetInfo_Path::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Parkour_SC_GetInfo_Path* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Parkour_SC_GetInfo_Path*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Parkour_SC_GetInfo_Path::MergeFrom(const Parkour_SC_GetInfo_Path& from) {
  GOOGLE_CHECK_NE(&from, this);
  check_.MergeFrom(from.check_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Parkour_SC_GetInfo_Path::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Parkour_SC_GetInfo_Path::CopyFrom(const Parkour_SC_GetInfo_Path& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Parkour_SC_GetInfo_Path::IsInitialized() const {

  return true;
}

void Parkour_SC_GetInfo_Path::Swap(Parkour_SC_GetInfo_Path* other) {
  if (other != this) {
    check_.Swap(&other->check_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Parkour_SC_GetInfo_Path::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Parkour_SC_GetInfo_Path_descriptor_;
  metadata.reflection = Parkour_SC_GetInfo_Path_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Parkour_SC_GetInfo::kResultFieldNumber;
const int Parkour_SC_GetInfo::kWeekdayFieldNumber;
const int Parkour_SC_GetInfo::kParkourFieldNumber;
const int Parkour_SC_GetInfo::kLeftTimeFieldNumber;
const int Parkour_SC_GetInfo::kDungonid1FieldNumber;
const int Parkour_SC_GetInfo::kDungonid2FieldNumber;
const int Parkour_SC_GetInfo::kRankFieldNumber;
#endif  // !_MSC_VER

Parkour_SC_GetInfo::Parkour_SC_GetInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Parkour_SC_GetInfo::InitAsDefaultInstance() {
  parkour_ = const_cast< ::proto::message::ParkourInfo*>(&::proto::message::ParkourInfo::default_instance());
  rank_ = const_cast< ::proto::message::ParkourRank*>(&::proto::message::ParkourRank::default_instance());
}

Parkour_SC_GetInfo::Parkour_SC_GetInfo(const Parkour_SC_GetInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Parkour_SC_GetInfo::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  weekday_ = 0;
  parkour_ = NULL;
  lefttime_ = 0;
  dungonid1_ = 0;
  dungonid2_ = 0;
  rank_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Parkour_SC_GetInfo::~Parkour_SC_GetInfo() {
  SharedDtor();
}

void Parkour_SC_GetInfo::SharedDtor() {
  if (this != default_instance_) {
    delete parkour_;
    delete rank_;
  }
}

void Parkour_SC_GetInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Parkour_SC_GetInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Parkour_SC_GetInfo_descriptor_;
}

const Parkour_SC_GetInfo& Parkour_SC_GetInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_parkour_2eproto();
  return *default_instance_;
}

Parkour_SC_GetInfo* Parkour_SC_GetInfo::default_instance_ = NULL;

Parkour_SC_GetInfo* Parkour_SC_GetInfo::New() const {
  return new Parkour_SC_GetInfo;
}

void Parkour_SC_GetInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    weekday_ = 0;
    if (has_parkour()) {
      if (parkour_ != NULL) parkour_->::proto::message::ParkourInfo::Clear();
    }
    lefttime_ = 0;
    dungonid1_ = 0;
    dungonid2_ = 0;
    if (has_rank()) {
      if (rank_ != NULL) rank_->::proto::message::ParkourRank::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Parkour_SC_GetInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_weekday;
        break;
      }

      // optional int32 weekday = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weekday:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weekday_)));
          set_has_weekday();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_parkour;
        break;
      }

      // optional .proto.message.ParkourInfo parkour = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_parkour:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_parkour()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_leftTime;
        break;
      }

      // optional int32 leftTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leftTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lefttime_)));
          set_has_lefttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_dungonid1;
        break;
      }

      // optional int32 dungonid1 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dungonid1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dungonid1_)));
          set_has_dungonid1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_dungonid2;
        break;
      }

      // optional int32 dungonid2 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dungonid2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dungonid2_)));
          set_has_dungonid2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_rank;
        break;
      }

      // optional .proto.message.ParkourRank rank = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rank:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rank()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Parkour_SC_GetInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 weekday = 2;
  if (has_weekday()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->weekday(), output);
  }

  // optional .proto.message.ParkourInfo parkour = 3;
  if (has_parkour()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->parkour(), output);
  }

  // optional int32 leftTime = 4;
  if (has_lefttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->lefttime(), output);
  }

  // optional int32 dungonid1 = 5;
  if (has_dungonid1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->dungonid1(), output);
  }

  // optional int32 dungonid2 = 6;
  if (has_dungonid2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->dungonid2(), output);
  }

  // optional .proto.message.ParkourRank rank = 7;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->rank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Parkour_SC_GetInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 weekday = 2;
  if (has_weekday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->weekday(), target);
  }

  // optional .proto.message.ParkourInfo parkour = 3;
  if (has_parkour()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->parkour(), target);
  }

  // optional int32 leftTime = 4;
  if (has_lefttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->lefttime(), target);
  }

  // optional int32 dungonid1 = 5;
  if (has_dungonid1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->dungonid1(), target);
  }

  // optional int32 dungonid2 = 6;
  if (has_dungonid2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->dungonid2(), target);
  }

  // optional .proto.message.ParkourRank rank = 7;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->rank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Parkour_SC_GetInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 weekday = 2;
    if (has_weekday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->weekday());
    }

    // optional .proto.message.ParkourInfo parkour = 3;
    if (has_parkour()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->parkour());
    }

    // optional int32 leftTime = 4;
    if (has_lefttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lefttime());
    }

    // optional int32 dungonid1 = 5;
    if (has_dungonid1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dungonid1());
    }

    // optional int32 dungonid2 = 6;
    if (has_dungonid2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dungonid2());
    }

    // optional .proto.message.ParkourRank rank = 7;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rank());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Parkour_SC_GetInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Parkour_SC_GetInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Parkour_SC_GetInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Parkour_SC_GetInfo::MergeFrom(const Parkour_SC_GetInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_weekday()) {
      set_weekday(from.weekday());
    }
    if (from.has_parkour()) {
      mutable_parkour()->::proto::message::ParkourInfo::MergeFrom(from.parkour());
    }
    if (from.has_lefttime()) {
      set_lefttime(from.lefttime());
    }
    if (from.has_dungonid1()) {
      set_dungonid1(from.dungonid1());
    }
    if (from.has_dungonid2()) {
      set_dungonid2(from.dungonid2());
    }
    if (from.has_rank()) {
      mutable_rank()->::proto::message::ParkourRank::MergeFrom(from.rank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Parkour_SC_GetInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Parkour_SC_GetInfo::CopyFrom(const Parkour_SC_GetInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Parkour_SC_GetInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_parkour()) {
    if (!this->parkour().IsInitialized()) return false;
  }
  if (has_rank()) {
    if (!this->rank().IsInitialized()) return false;
  }
  return true;
}

void Parkour_SC_GetInfo::Swap(Parkour_SC_GetInfo* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(weekday_, other->weekday_);
    std::swap(parkour_, other->parkour_);
    std::swap(lefttime_, other->lefttime_);
    std::swap(dungonid1_, other->dungonid1_);
    std::swap(dungonid2_, other->dungonid2_);
    std::swap(rank_, other->rank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Parkour_SC_GetInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Parkour_SC_GetInfo_descriptor_;
  metadata.reflection = Parkour_SC_GetInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Parkour_SC_ReqBegin::kResultFieldNumber;
#endif  // !_MSC_VER

Parkour_SC_ReqBegin::Parkour_SC_ReqBegin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Parkour_SC_ReqBegin::InitAsDefaultInstance() {
}

Parkour_SC_ReqBegin::Parkour_SC_ReqBegin(const Parkour_SC_ReqBegin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Parkour_SC_ReqBegin::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Parkour_SC_ReqBegin::~Parkour_SC_ReqBegin() {
  SharedDtor();
}

void Parkour_SC_ReqBegin::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Parkour_SC_ReqBegin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Parkour_SC_ReqBegin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Parkour_SC_ReqBegin_descriptor_;
}

const Parkour_SC_ReqBegin& Parkour_SC_ReqBegin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_parkour_2eproto();
  return *default_instance_;
}

Parkour_SC_ReqBegin* Parkour_SC_ReqBegin::default_instance_ = NULL;

Parkour_SC_ReqBegin* Parkour_SC_ReqBegin::New() const {
  return new Parkour_SC_ReqBegin;
}

void Parkour_SC_ReqBegin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Parkour_SC_ReqBegin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Parkour_SC_ReqBegin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Parkour_SC_ReqBegin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Parkour_SC_ReqBegin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Parkour_SC_ReqBegin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Parkour_SC_ReqBegin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Parkour_SC_ReqBegin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Parkour_SC_ReqBegin::MergeFrom(const Parkour_SC_ReqBegin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Parkour_SC_ReqBegin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Parkour_SC_ReqBegin::CopyFrom(const Parkour_SC_ReqBegin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Parkour_SC_ReqBegin::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Parkour_SC_ReqBegin::Swap(Parkour_SC_ReqBegin* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Parkour_SC_ReqBegin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Parkour_SC_ReqBegin_descriptor_;
  metadata.reflection = Parkour_SC_ReqBegin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Parkour_CS_Finish::kPointFieldNumber;
const int Parkour_CS_Finish::kParkourTypeFieldNumber;
const int Parkour_CS_Finish::kItem1NumFieldNumber;
const int Parkour_CS_Finish::kItem2NumFieldNumber;
#endif  // !_MSC_VER

Parkour_CS_Finish::Parkour_CS_Finish()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Parkour_CS_Finish::InitAsDefaultInstance() {
}

Parkour_CS_Finish::Parkour_CS_Finish(const Parkour_CS_Finish& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Parkour_CS_Finish::SharedCtor() {
  _cached_size_ = 0;
  point_ = 0;
  parkourtype_ = 0;
  item1num_ = 0;
  item2num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Parkour_CS_Finish::~Parkour_CS_Finish() {
  SharedDtor();
}

void Parkour_CS_Finish::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Parkour_CS_Finish::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Parkour_CS_Finish::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Parkour_CS_Finish_descriptor_;
}

const Parkour_CS_Finish& Parkour_CS_Finish::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_parkour_2eproto();
  return *default_instance_;
}

Parkour_CS_Finish* Parkour_CS_Finish::default_instance_ = NULL;

Parkour_CS_Finish* Parkour_CS_Finish::New() const {
  return new Parkour_CS_Finish;
}

void Parkour_CS_Finish::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    point_ = 0;
    parkourtype_ = 0;
    item1num_ = 0;
    item2num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Parkour_CS_Finish::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 point = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &point_)));
          set_has_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_parkourType;
        break;
      }

      // required int32 parkourType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_parkourType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &parkourtype_)));
          set_has_parkourtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item1num;
        break;
      }

      // optional int32 item1num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item1num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item1num_)));
          set_has_item1num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_item2num;
        break;
      }

      // optional int32 item2num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item2num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item2num_)));
          set_has_item2num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Parkour_CS_Finish::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 point = 1;
  if (has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->point(), output);
  }

  // required int32 parkourType = 2;
  if (has_parkourtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->parkourtype(), output);
  }

  // optional int32 item1num = 3;
  if (has_item1num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->item1num(), output);
  }

  // optional int32 item2num = 4;
  if (has_item2num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->item2num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Parkour_CS_Finish::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 point = 1;
  if (has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->point(), target);
  }

  // required int32 parkourType = 2;
  if (has_parkourtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->parkourtype(), target);
  }

  // optional int32 item1num = 3;
  if (has_item1num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->item1num(), target);
  }

  // optional int32 item2num = 4;
  if (has_item2num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->item2num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Parkour_CS_Finish::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 point = 1;
    if (has_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->point());
    }

    // required int32 parkourType = 2;
    if (has_parkourtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->parkourtype());
    }

    // optional int32 item1num = 3;
    if (has_item1num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item1num());
    }

    // optional int32 item2num = 4;
    if (has_item2num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item2num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Parkour_CS_Finish::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Parkour_CS_Finish* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Parkour_CS_Finish*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Parkour_CS_Finish::MergeFrom(const Parkour_CS_Finish& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_point()) {
      set_point(from.point());
    }
    if (from.has_parkourtype()) {
      set_parkourtype(from.parkourtype());
    }
    if (from.has_item1num()) {
      set_item1num(from.item1num());
    }
    if (from.has_item2num()) {
      set_item2num(from.item2num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Parkour_CS_Finish::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Parkour_CS_Finish::CopyFrom(const Parkour_CS_Finish& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Parkour_CS_Finish::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Parkour_CS_Finish::Swap(Parkour_CS_Finish* other) {
  if (other != this) {
    std::swap(point_, other->point_);
    std::swap(parkourtype_, other->parkourtype_);
    std::swap(item1num_, other->item1num_);
    std::swap(item2num_, other->item2num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Parkour_CS_Finish::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Parkour_CS_Finish_descriptor_;
  metadata.reflection = Parkour_CS_Finish_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ParkourInfo::kDayTimesFieldNumber;
const int ParkourInfo::kItem1NumFieldNumber;
const int ParkourInfo::kItem2NumFieldNumber;
const int ParkourInfo::kHighest1FieldNumber;
const int ParkourInfo::kHighest2FieldNumber;
#endif  // !_MSC_VER

ParkourInfo::ParkourInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ParkourInfo::InitAsDefaultInstance() {
}

ParkourInfo::ParkourInfo(const ParkourInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ParkourInfo::SharedCtor() {
  _cached_size_ = 0;
  daytimes_ = 0;
  item1num_ = 0;
  item2num_ = 0;
  highest1_ = 0;
  highest2_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ParkourInfo::~ParkourInfo() {
  SharedDtor();
}

void ParkourInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ParkourInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ParkourInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ParkourInfo_descriptor_;
}

const ParkourInfo& ParkourInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_parkour_2eproto();
  return *default_instance_;
}

ParkourInfo* ParkourInfo::default_instance_ = NULL;

ParkourInfo* ParkourInfo::New() const {
  return new ParkourInfo;
}

void ParkourInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    daytimes_ = 0;
    item1num_ = 0;
    item2num_ = 0;
    highest1_ = 0;
    highest2_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ParkourInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 dayTimes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &daytimes_)));
          set_has_daytimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item1Num;
        break;
      }

      // optional int32 item1Num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item1Num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item1num_)));
          set_has_item1num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item2Num;
        break;
      }

      // optional int32 item2Num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item2Num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item2num_)));
          set_has_item2num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_highest1;
        break;
      }

      // optional int32 highest1 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_highest1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &highest1_)));
          set_has_highest1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_highest2;
        break;
      }

      // optional int32 highest2 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_highest2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &highest2_)));
          set_has_highest2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ParkourInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 dayTimes = 1;
  if (has_daytimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->daytimes(), output);
  }

  // optional int32 item1Num = 2;
  if (has_item1num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->item1num(), output);
  }

  // optional int32 item2Num = 3;
  if (has_item2num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->item2num(), output);
  }

  // optional int32 highest1 = 4;
  if (has_highest1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->highest1(), output);
  }

  // optional int32 highest2 = 5;
  if (has_highest2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->highest2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ParkourInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 dayTimes = 1;
  if (has_daytimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->daytimes(), target);
  }

  // optional int32 item1Num = 2;
  if (has_item1num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->item1num(), target);
  }

  // optional int32 item2Num = 3;
  if (has_item2num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->item2num(), target);
  }

  // optional int32 highest1 = 4;
  if (has_highest1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->highest1(), target);
  }

  // optional int32 highest2 = 5;
  if (has_highest2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->highest2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ParkourInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 dayTimes = 1;
    if (has_daytimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->daytimes());
    }

    // optional int32 item1Num = 2;
    if (has_item1num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item1num());
    }

    // optional int32 item2Num = 3;
    if (has_item2num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item2num());
    }

    // optional int32 highest1 = 4;
    if (has_highest1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->highest1());
    }

    // optional int32 highest2 = 5;
    if (has_highest2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->highest2());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ParkourInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ParkourInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ParkourInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ParkourInfo::MergeFrom(const ParkourInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_daytimes()) {
      set_daytimes(from.daytimes());
    }
    if (from.has_item1num()) {
      set_item1num(from.item1num());
    }
    if (from.has_item2num()) {
      set_item2num(from.item2num());
    }
    if (from.has_highest1()) {
      set_highest1(from.highest1());
    }
    if (from.has_highest2()) {
      set_highest2(from.highest2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ParkourInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParkourInfo::CopyFrom(const ParkourInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParkourInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ParkourInfo::Swap(ParkourInfo* other) {
  if (other != this) {
    std::swap(daytimes_, other->daytimes_);
    std::swap(item1num_, other->item1num_);
    std::swap(item2num_, other->item2num_);
    std::swap(highest1_, other->highest1_);
    std::swap(highest2_, other->highest2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ParkourInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ParkourInfo_descriptor_;
  metadata.reflection = ParkourInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Parkour_CS_UsePotion::kPotionindexFieldNumber;
#endif  // !_MSC_VER

Parkour_CS_UsePotion::Parkour_CS_UsePotion()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Parkour_CS_UsePotion::InitAsDefaultInstance() {
}

Parkour_CS_UsePotion::Parkour_CS_UsePotion(const Parkour_CS_UsePotion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Parkour_CS_UsePotion::SharedCtor() {
  _cached_size_ = 0;
  potionindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Parkour_CS_UsePotion::~Parkour_CS_UsePotion() {
  SharedDtor();
}

void Parkour_CS_UsePotion::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Parkour_CS_UsePotion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Parkour_CS_UsePotion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Parkour_CS_UsePotion_descriptor_;
}

const Parkour_CS_UsePotion& Parkour_CS_UsePotion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_parkour_2eproto();
  return *default_instance_;
}

Parkour_CS_UsePotion* Parkour_CS_UsePotion::default_instance_ = NULL;

Parkour_CS_UsePotion* Parkour_CS_UsePotion::New() const {
  return new Parkour_CS_UsePotion;
}

void Parkour_CS_UsePotion::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    potionindex_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Parkour_CS_UsePotion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 potionindex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &potionindex_)));
          set_has_potionindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Parkour_CS_UsePotion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 potionindex = 1;
  if (has_potionindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->potionindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Parkour_CS_UsePotion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 potionindex = 1;
  if (has_potionindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->potionindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Parkour_CS_UsePotion::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 potionindex = 1;
    if (has_potionindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->potionindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Parkour_CS_UsePotion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Parkour_CS_UsePotion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Parkour_CS_UsePotion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Parkour_CS_UsePotion::MergeFrom(const Parkour_CS_UsePotion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_potionindex()) {
      set_potionindex(from.potionindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Parkour_CS_UsePotion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Parkour_CS_UsePotion::CopyFrom(const Parkour_CS_UsePotion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Parkour_CS_UsePotion::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Parkour_CS_UsePotion::Swap(Parkour_CS_UsePotion* other) {
  if (other != this) {
    std::swap(potionindex_, other->potionindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Parkour_CS_UsePotion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Parkour_CS_UsePotion_descriptor_;
  metadata.reflection = Parkour_CS_UsePotion_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Parkour_SC_UsePotion::kResultFieldNumber;
#endif  // !_MSC_VER

Parkour_SC_UsePotion::Parkour_SC_UsePotion()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Parkour_SC_UsePotion::InitAsDefaultInstance() {
}

Parkour_SC_UsePotion::Parkour_SC_UsePotion(const Parkour_SC_UsePotion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Parkour_SC_UsePotion::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Parkour_SC_UsePotion::~Parkour_SC_UsePotion() {
  SharedDtor();
}

void Parkour_SC_UsePotion::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Parkour_SC_UsePotion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Parkour_SC_UsePotion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Parkour_SC_UsePotion_descriptor_;
}

const Parkour_SC_UsePotion& Parkour_SC_UsePotion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_parkour_2eproto();
  return *default_instance_;
}

Parkour_SC_UsePotion* Parkour_SC_UsePotion::default_instance_ = NULL;

Parkour_SC_UsePotion* Parkour_SC_UsePotion::New() const {
  return new Parkour_SC_UsePotion;
}

void Parkour_SC_UsePotion::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Parkour_SC_UsePotion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Parkour_SC_UsePotion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Parkour_SC_UsePotion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Parkour_SC_UsePotion::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Parkour_SC_UsePotion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Parkour_SC_UsePotion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Parkour_SC_UsePotion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Parkour_SC_UsePotion::MergeFrom(const Parkour_SC_UsePotion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Parkour_SC_UsePotion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Parkour_SC_UsePotion::CopyFrom(const Parkour_SC_UsePotion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Parkour_SC_UsePotion::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Parkour_SC_UsePotion::Swap(Parkour_SC_UsePotion* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Parkour_SC_UsePotion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Parkour_SC_UsePotion_descriptor_;
  metadata.reflection = Parkour_SC_UsePotion_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace proto

// @@protoc_insertion_point(global_scope)
