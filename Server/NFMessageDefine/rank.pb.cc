// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rank.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rank.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace message {

namespace {

const ::google::protobuf::Descriptor* RankDataCopy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RankDataCopy_reflection_ = NULL;
const ::google::protobuf::Descriptor* RankFirstBody_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RankFirstBody_reflection_ = NULL;
const ::google::protobuf::Descriptor* RewardRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RewardRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActivityRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivityRank_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActivityRankList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivityRankList_reflection_ = NULL;
const ::google::protobuf::Descriptor* SaveActivityRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SaveActivityRank_reflection_ = NULL;
const ::google::protobuf::Descriptor* AuxData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuxData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RankDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RankDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RankDBList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RankDBList_reflection_ = NULL;
const ::google::protobuf::Descriptor* SaveRankData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SaveRankData_reflection_ = NULL;
const ::google::protobuf::Descriptor* Rank_CS_GetRankInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Rank_CS_GetRankInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Rank_SC_GetRankInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Rank_SC_GetRankInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Rank_CS_ReqActivityReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Rank_CS_ReqActivityReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* Rank_CS_ReqRankRewardData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Rank_CS_ReqRankRewardData_reflection_ = NULL;
const ::google::protobuf::Descriptor* Rank_SC_AckRankRewardData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Rank_SC_AckRankRewardData_reflection_ = NULL;
const ::google::protobuf::Descriptor* Rank_SC_AckPvPSignRankFirst_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Rank_SC_AckPvPSignRankFirst_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* eRankType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_rank_2eproto() {
  protobuf_AddDesc_rank_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rank.proto");
  GOOGLE_CHECK(file != NULL);
  RankDataCopy_descriptor_ = file->message_type(0);
  static const int RankDataCopy_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankDataCopy, ranking_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankDataCopy, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankDataCopy, value_),
  };
  RankDataCopy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RankDataCopy_descriptor_,
      RankDataCopy::default_instance_,
      RankDataCopy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankDataCopy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankDataCopy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RankDataCopy));
  RankFirstBody_descriptor_ = file->message_type(1);
  static const int RankFirstBody_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankFirstBody, firstname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankFirstBody, skinid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankFirstBody, suitid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankFirstBody, weaponid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankFirstBody, weaponskin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankFirstBody, showid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankFirstBody, career_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankFirstBody, playerid_),
  };
  RankFirstBody_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RankFirstBody_descriptor_,
      RankFirstBody::default_instance_,
      RankFirstBody_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankFirstBody, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankFirstBody, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RankFirstBody));
  RewardRecord_descriptor_ = file->message_type(2);
  static const int RewardRecord_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardRecord, condition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardRecord, counts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardRecord, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardRecord, isget_),
  };
  RewardRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RewardRecord_descriptor_,
      RewardRecord::default_instance_,
      RewardRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RewardRecord));
  ActivityRank_descriptor_ = file->message_type(3);
  static const int ActivityRank_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityRank, ranktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityRank, reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityRank, first_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityRank, isover_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityRank, copy_),
  };
  ActivityRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActivityRank_descriptor_,
      ActivityRank::default_instance_,
      ActivityRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActivityRank));
  ActivityRankList_descriptor_ = file->message_type(4);
  static const int ActivityRankList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityRankList, data_),
  };
  ActivityRankList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActivityRankList_descriptor_,
      ActivityRankList::default_instance_,
      ActivityRankList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityRankList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityRankList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActivityRankList));
  SaveActivityRank_descriptor_ = file->message_type(5);
  static const int SaveActivityRank_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveActivityRank, content_),
  };
  SaveActivityRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SaveActivityRank_descriptor_,
      SaveActivityRank::default_instance_,
      SaveActivityRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveActivityRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveActivityRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SaveActivityRank));
  AuxData_descriptor_ = file->message_type(6);
  static const int AuxData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuxData, exid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuxData, fitvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuxData, equiplist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuxData, skilllist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuxData, skilllev_),
  };
  AuxData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AuxData_descriptor_,
      AuxData::default_instance_,
      AuxData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuxData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuxData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AuxData));
  RankDBData_descriptor_ = file->message_type(7);
  static const int RankDBData_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankDBData, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankDBData, charname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankDBData, rank_ranking_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankDBData, updatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankDBData, rank_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankDBData, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankDBData, guildname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankDBData, career_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankDBData, dhlev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankDBData, fightval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankDBData, skinid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankDBData, weaponskin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankDBData, equiplist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankDBData, suitid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankDBData, datalist_),
  };
  RankDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RankDBData_descriptor_,
      RankDBData::default_instance_,
      RankDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RankDBData));
  RankDBList_descriptor_ = file->message_type(8);
  static const int RankDBList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankDBList, datas_),
  };
  RankDBList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RankDBList_descriptor_,
      RankDBList::default_instance_,
      RankDBList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankDBList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankDBList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RankDBList));
  SaveRankData_descriptor_ = file->message_type(9);
  static const int SaveRankData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveRankData, rank_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveRankData, rank_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveRankData, rank_datas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveRankData, resettime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveRankData, first_),
  };
  SaveRankData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SaveRankData_descriptor_,
      SaveRankData::default_instance_,
      SaveRankData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveRankData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveRankData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SaveRankData));
  Rank_CS_GetRankInfo_descriptor_ = file->message_type(10);
  static const int Rank_CS_GetRankInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rank_CS_GetRankInfo, rank_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rank_CS_GetRankInfo, ranking_start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rank_CS_GetRankInfo, rankint_end_),
  };
  Rank_CS_GetRankInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Rank_CS_GetRankInfo_descriptor_,
      Rank_CS_GetRankInfo::default_instance_,
      Rank_CS_GetRankInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rank_CS_GetRankInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rank_CS_GetRankInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Rank_CS_GetRankInfo));
  Rank_SC_GetRankInfo_descriptor_ = file->message_type(11);
  static const int Rank_SC_GetRankInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rank_SC_GetRankInfo, rank_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rank_SC_GetRankInfo, total_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rank_SC_GetRankInfo, rank_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rank_SC_GetRankInfo, rank_self_),
  };
  Rank_SC_GetRankInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Rank_SC_GetRankInfo_descriptor_,
      Rank_SC_GetRankInfo::default_instance_,
      Rank_SC_GetRankInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rank_SC_GetRankInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rank_SC_GetRankInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Rank_SC_GetRankInfo));
  Rank_CS_ReqActivityReward_descriptor_ = file->message_type(12);
  static const int Rank_CS_ReqActivityReward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rank_CS_ReqActivityReward, conditionid_),
  };
  Rank_CS_ReqActivityReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Rank_CS_ReqActivityReward_descriptor_,
      Rank_CS_ReqActivityReward::default_instance_,
      Rank_CS_ReqActivityReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rank_CS_ReqActivityReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rank_CS_ReqActivityReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Rank_CS_ReqActivityReward));
  Rank_CS_ReqRankRewardData_descriptor_ = file->message_type(13);
  static const int Rank_CS_ReqRankRewardData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rank_CS_ReqRankRewardData, ranktype_),
  };
  Rank_CS_ReqRankRewardData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Rank_CS_ReqRankRewardData_descriptor_,
      Rank_CS_ReqRankRewardData::default_instance_,
      Rank_CS_ReqRankRewardData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rank_CS_ReqRankRewardData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rank_CS_ReqRankRewardData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Rank_CS_ReqRankRewardData));
  Rank_SC_AckRankRewardData_descriptor_ = file->message_type(14);
  static const int Rank_SC_AckRankRewardData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rank_SC_AckRankRewardData, rankdata_),
  };
  Rank_SC_AckRankRewardData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Rank_SC_AckRankRewardData_descriptor_,
      Rank_SC_AckRankRewardData::default_instance_,
      Rank_SC_AckRankRewardData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rank_SC_AckRankRewardData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rank_SC_AckRankRewardData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Rank_SC_AckRankRewardData));
  Rank_SC_AckPvPSignRankFirst_descriptor_ = file->message_type(15);
  static const int Rank_SC_AckPvPSignRankFirst_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rank_SC_AckPvPSignRankFirst, data_),
  };
  Rank_SC_AckPvPSignRankFirst_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Rank_SC_AckPvPSignRankFirst_descriptor_,
      Rank_SC_AckPvPSignRankFirst::default_instance_,
      Rank_SC_AckPvPSignRankFirst_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rank_SC_AckPvPSignRankFirst, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rank_SC_AckPvPSignRankFirst, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Rank_SC_AckPvPSignRankFirst));
  eRankType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rank_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RankDataCopy_descriptor_, &RankDataCopy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RankFirstBody_descriptor_, &RankFirstBody::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RewardRecord_descriptor_, &RewardRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActivityRank_descriptor_, &ActivityRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActivityRankList_descriptor_, &ActivityRankList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SaveActivityRank_descriptor_, &SaveActivityRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AuxData_descriptor_, &AuxData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RankDBData_descriptor_, &RankDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RankDBList_descriptor_, &RankDBList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SaveRankData_descriptor_, &SaveRankData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Rank_CS_GetRankInfo_descriptor_, &Rank_CS_GetRankInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Rank_SC_GetRankInfo_descriptor_, &Rank_SC_GetRankInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Rank_CS_ReqActivityReward_descriptor_, &Rank_CS_ReqActivityReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Rank_CS_ReqRankRewardData_descriptor_, &Rank_CS_ReqRankRewardData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Rank_SC_AckRankRewardData_descriptor_, &Rank_SC_AckRankRewardData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Rank_SC_AckPvPSignRankFirst_descriptor_, &Rank_SC_AckPvPSignRankFirst::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rank_2eproto() {
  delete RankDataCopy::default_instance_;
  delete RankDataCopy_reflection_;
  delete RankFirstBody::default_instance_;
  delete RankFirstBody_reflection_;
  delete RewardRecord::default_instance_;
  delete RewardRecord_reflection_;
  delete ActivityRank::default_instance_;
  delete ActivityRank_reflection_;
  delete ActivityRankList::default_instance_;
  delete ActivityRankList_reflection_;
  delete SaveActivityRank::default_instance_;
  delete SaveActivityRank_reflection_;
  delete AuxData::default_instance_;
  delete AuxData_reflection_;
  delete RankDBData::default_instance_;
  delete RankDBData_reflection_;
  delete RankDBList::default_instance_;
  delete RankDBList_reflection_;
  delete SaveRankData::default_instance_;
  delete SaveRankData_reflection_;
  delete Rank_CS_GetRankInfo::default_instance_;
  delete Rank_CS_GetRankInfo_reflection_;
  delete Rank_SC_GetRankInfo::default_instance_;
  delete Rank_SC_GetRankInfo_reflection_;
  delete Rank_CS_ReqActivityReward::default_instance_;
  delete Rank_CS_ReqActivityReward_reflection_;
  delete Rank_CS_ReqRankRewardData::default_instance_;
  delete Rank_CS_ReqRankRewardData_reflection_;
  delete Rank_SC_AckRankRewardData::default_instance_;
  delete Rank_SC_AckRankRewardData_reflection_;
  delete Rank_SC_AckPvPSignRankFirst::default_instance_;
  delete Rank_SC_AckPvPSignRankFirst_reflection_;
}

void protobuf_AddDesc_rank_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::proto::message::protobuf_AddDesc_common_2eproto();
  ::proto::message::protobuf_AddDesc_item_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nrank.proto\022\rproto.message\032\014common.prot"
    "o\032\nitem.proto\"<\n\014RankDataCopy\022\017\n\007ranking"
    "\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022\r\n\005value\030\003 \001(\r\"\232\001\n\r"
    "RankFirstBody\022\021\n\tfirstname\030\001 \001(\t\022\016\n\006skin"
    "id\030\002 \001(\r\022\016\n\006suitid\030\003 \001(\r\022\020\n\010weaponid\030\004 \001"
    "(\r\022\022\n\nweaponskin\030\005 \001(\r\022\016\n\006showid\030\006 \001(\r\022\016"
    "\n\006career\030\007 \001(\r\022\020\n\010playerid\030\010 \001(\004\"R\n\014Rewa"
    "rdRecord\022\021\n\tcondition\030\001 \001(\r\022\016\n\006counts\030\002 "
    "\001(\005\022\020\n\010playerid\030\003 \003(\004\022\r\n\005isget\030\004 \001(\010\"\265\001\n"
    "\014ActivityRank\022\020\n\010ranktype\030\001 \001(\r\022+\n\006rewar"
    "d\030\002 \003(\0132\033.proto.message.RewardRecord\022+\n\005"
    "first\030\003 \001(\0132\034.proto.message.RankFirstBod"
    "y\022\016\n\006isOver\030\004 \001(\r\022)\n\004copy\030\005 \003(\0132\033.proto."
    "message.RankDataCopy\"=\n\020ActivityRankList"
    "\022)\n\004data\030\001 \003(\0132\033.proto.message.ActivityR"
    "ank\"D\n\020SaveActivityRank\0220\n\007content\030\001 \001(\013"
    "2\037.proto.message.ActivityRankList\"a\n\007Aux"
    "Data\022\014\n\004exid\030\001 \001(\r\022\020\n\010fitvalue\030\002 \001(\r\022\021\n\t"
    "equiplist\030\003 \003(\r\022\021\n\tskilllist\030\004 \003(\r\022\020\n\010sk"
    "illlev\030\005 \003(\r\"\262\002\n\nRankDBData\022\016\n\006charid\030\001 "
    "\001(\004\022\020\n\010charname\030\002 \001(\t\022\024\n\014rank_ranking\030\004 "
    "\001(\005\022\022\n\nupdatetime\030\005 \001(\004\022\022\n\nrank_value\030\006 "
    "\001(\005\022\017\n\007guildid\030\007 \001(\004\022\021\n\tguildname\030\010 \001(\t\022"
    "\016\n\006career\030\t \001(\r\022\r\n\005dhlev\030\n \001(\r\022\020\n\010fightv"
    "al\030\013 \001(\r\022\016\n\006skinid\030\014 \001(\r\022\022\n\nweaponskin\030\r"
    " \001(\r\022\021\n\tequiplist\030\016 \003(\r\022\016\n\006suitid\030\017 \001(\r\022"
    "(\n\010datalist\030\020 \003(\0132\026.proto.message.AuxDat"
    "a\"6\n\nRankDBList\022(\n\005datas\030\001 \003(\0132\031.proto.m"
    "essage.RankDBData\"\241\001\n\014SaveRankData\022\017\n\007ra"
    "nk_id\030\001 \001(\005\022\021\n\trank_type\030\002 \001(\005\022-\n\nrank_d"
    "atas\030\003 \001(\0132\031.proto.message.RankDBList\022\021\n"
    "\tresettime\030\004 \001(\004\022+\n\005first\030\005 \001(\0132\034.proto."
    "message.RankFirstBody\"n\n\023Rank_CS_GetRank"
    "Info\022+\n\trank_type\030\001 \002(\0162\030.proto.message."
    "eRankType\022\025\n\rranking_start\030\002 \001(\005\022\023\n\013rank"
    "int_end\030\003 \001(\005\"\261\001\n\023Rank_SC_GetRankInfo\022+\n"
    "\trank_type\030\001 \002(\0162\030.proto.message.eRankTy"
    "pe\022\021\n\ttotal_num\030\002 \001(\005\022,\n\trank_list\030\003 \003(\013"
    "2\031.proto.message.RankDBData\022,\n\trank_self"
    "\030\004 \001(\0132\031.proto.message.RankDBData\"0\n\031Ran"
    "k_CS_ReqActivityReward\022\023\n\013conditionid\030\001 "
    "\001(\r\"-\n\031Rank_CS_ReqRankRewardData\022\020\n\010rank"
    "type\030\001 \001(\r\"J\n\031Rank_SC_AckRankRewardData\022"
    "-\n\010rankdata\030\001 \001(\0132\033.proto.message.Activi"
    "tyRank\"I\n\033Rank_SC_AckPvPSignRankFirst\022*\n"
    "\004data\030\001 \001(\0132\034.proto.message.RankFirstBod"
    "y*\360\007\n\teRankType\022\031\n\025eRankType_PlayerLevel"
    "\020\001\022\032\n\026eRankType_PlayerCombat\020\002\022\031\n\025eRankT"
    "ype_EquipCombat\020\003\022\022\n\016eRankType_Ride\020\004\022\021\n"
    "\reRankType_Pet\020\005\022\027\n\023eRankType_Mercenary\020"
    "\006\022\022\n\016eRankType_Boat\020\007\022\033\n\027eRankType_Const"
    "ellation\020\010\022\031\n\025eRankType_Achievement\020\t\022\026\n"
    "\022eRankType_Chivalry\020\n\022\023\n\017eRankType_Guild"
    "\020\013\022\031\n\025eRankType_GuildDevote\020\014\022\027\n\023eRankTy"
    "pe_OffBattle\020\r\022\033\n\027eRankType_Ladder_Singl"
    "e\020\016\022\032\n\026eRankType_Battle_Score\020\017\022 \n\034eRank"
    "Type_Battle_HeadHunting\020\020\022!\n\035eRankType_B"
    "attle_DemonHunting\020\021\022!\n\035eRankType_Battle"
    "_GuardGoddess\020\022\022\024\n\020eRankType_Awaken\020\023\022\026\n"
    "\022eRankType_ReCharge\020\024\022\027\n\023eRankType_GodWe"
    "apon\020\025\022\027\n\023eRankType_GuildBoom\020\026\022\027\n\023eRank"
    "Type_GuildBoss\020\027\022\022\n\016eRankType_Pet1\020e\022\022\n\016"
    "eRankType_Pet2\020f\022\022\n\016eRankType_Pet3\020g\022\022\n\016"
    "eRankType_Pet4\020h\022\022\n\016eRankType_Pet5\020i\022\022\n\016"
    "eRankType_Pet6\020j\022\022\n\016eRankType_Pet7\020k\022\022\n\016"
    "eRankType_Pet8\020l\022\022\n\016eRankType_Pet9\020m\022\026\n\021"
    "eRankType_Mercen1\020\311\001\022\026\n\021eRankType_Mercen"
    "2\020\312\001\022\026\n\021eRankType_Mercen3\020\313\001\022\026\n\021eRankTyp"
    "e_Mercen4\020\314\001\022\026\n\021eRankType_Mercen5\020\315\001\022\026\n\021"
    "eRankType_Mercen6\020\316\001\022\026\n\021eRankType_Mercen"
    "7\020\317\001\022\026\n\021eRankType_Mercen8\020\320\001\022\026\n\021eRankTyp"
    "e_Mercen9\020\321\001B\017\n\rproto.message", 2869);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rank.proto", &protobuf_RegisterTypes);
  RankDataCopy::default_instance_ = new RankDataCopy();
  RankFirstBody::default_instance_ = new RankFirstBody();
  RewardRecord::default_instance_ = new RewardRecord();
  ActivityRank::default_instance_ = new ActivityRank();
  ActivityRankList::default_instance_ = new ActivityRankList();
  SaveActivityRank::default_instance_ = new SaveActivityRank();
  AuxData::default_instance_ = new AuxData();
  RankDBData::default_instance_ = new RankDBData();
  RankDBList::default_instance_ = new RankDBList();
  SaveRankData::default_instance_ = new SaveRankData();
  Rank_CS_GetRankInfo::default_instance_ = new Rank_CS_GetRankInfo();
  Rank_SC_GetRankInfo::default_instance_ = new Rank_SC_GetRankInfo();
  Rank_CS_ReqActivityReward::default_instance_ = new Rank_CS_ReqActivityReward();
  Rank_CS_ReqRankRewardData::default_instance_ = new Rank_CS_ReqRankRewardData();
  Rank_SC_AckRankRewardData::default_instance_ = new Rank_SC_AckRankRewardData();
  Rank_SC_AckPvPSignRankFirst::default_instance_ = new Rank_SC_AckPvPSignRankFirst();
  RankDataCopy::default_instance_->InitAsDefaultInstance();
  RankFirstBody::default_instance_->InitAsDefaultInstance();
  RewardRecord::default_instance_->InitAsDefaultInstance();
  ActivityRank::default_instance_->InitAsDefaultInstance();
  ActivityRankList::default_instance_->InitAsDefaultInstance();
  SaveActivityRank::default_instance_->InitAsDefaultInstance();
  AuxData::default_instance_->InitAsDefaultInstance();
  RankDBData::default_instance_->InitAsDefaultInstance();
  RankDBList::default_instance_->InitAsDefaultInstance();
  SaveRankData::default_instance_->InitAsDefaultInstance();
  Rank_CS_GetRankInfo::default_instance_->InitAsDefaultInstance();
  Rank_SC_GetRankInfo::default_instance_->InitAsDefaultInstance();
  Rank_CS_ReqActivityReward::default_instance_->InitAsDefaultInstance();
  Rank_CS_ReqRankRewardData::default_instance_->InitAsDefaultInstance();
  Rank_SC_AckRankRewardData::default_instance_->InitAsDefaultInstance();
  Rank_SC_AckPvPSignRankFirst::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rank_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rank_2eproto {
  StaticDescriptorInitializer_rank_2eproto() {
    protobuf_AddDesc_rank_2eproto();
  }
} static_descriptor_initializer_rank_2eproto_;
const ::google::protobuf::EnumDescriptor* eRankType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eRankType_descriptor_;
}
bool eRankType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 201:
    case 202:
    case 203:
    case 204:
    case 205:
    case 206:
    case 207:
    case 208:
    case 209:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int RankDataCopy::kRankingFieldNumber;
const int RankDataCopy::kNameFieldNumber;
const int RankDataCopy::kValueFieldNumber;
#endif  // !_MSC_VER

RankDataCopy::RankDataCopy()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RankDataCopy::InitAsDefaultInstance() {
}

RankDataCopy::RankDataCopy(const RankDataCopy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RankDataCopy::SharedCtor() {
  _cached_size_ = 0;
  ranking_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RankDataCopy::~RankDataCopy() {
  SharedDtor();
}

void RankDataCopy::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void RankDataCopy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RankDataCopy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RankDataCopy_descriptor_;
}

const RankDataCopy& RankDataCopy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rank_2eproto();
  return *default_instance_;
}

RankDataCopy* RankDataCopy::default_instance_ = NULL;

RankDataCopy* RankDataCopy::New() const {
  return new RankDataCopy;
}

void RankDataCopy::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ranking_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    value_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RankDataCopy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ranking = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ranking_)));
          set_has_ranking();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_value;
        break;
      }

      // optional uint32 value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RankDataCopy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 ranking = 1;
  if (has_ranking()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ranking(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional uint32 value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RankDataCopy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ranking = 1;
  if (has_ranking()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ranking(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint32 value = 3;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RankDataCopy::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ranking = 1;
    if (has_ranking()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ranking());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RankDataCopy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RankDataCopy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RankDataCopy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RankDataCopy::MergeFrom(const RankDataCopy& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ranking()) {
      set_ranking(from.ranking());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RankDataCopy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RankDataCopy::CopyFrom(const RankDataCopy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankDataCopy::IsInitialized() const {

  return true;
}

void RankDataCopy::Swap(RankDataCopy* other) {
  if (other != this) {
    std::swap(ranking_, other->ranking_);
    std::swap(name_, other->name_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RankDataCopy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RankDataCopy_descriptor_;
  metadata.reflection = RankDataCopy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RankFirstBody::kFirstnameFieldNumber;
const int RankFirstBody::kSkinidFieldNumber;
const int RankFirstBody::kSuitidFieldNumber;
const int RankFirstBody::kWeaponidFieldNumber;
const int RankFirstBody::kWeaponskinFieldNumber;
const int RankFirstBody::kShowidFieldNumber;
const int RankFirstBody::kCareerFieldNumber;
const int RankFirstBody::kPlayeridFieldNumber;
#endif  // !_MSC_VER

RankFirstBody::RankFirstBody()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RankFirstBody::InitAsDefaultInstance() {
}

RankFirstBody::RankFirstBody(const RankFirstBody& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RankFirstBody::SharedCtor() {
  _cached_size_ = 0;
  firstname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  skinid_ = 0u;
  suitid_ = 0u;
  weaponid_ = 0u;
  weaponskin_ = 0u;
  showid_ = 0u;
  career_ = 0u;
  playerid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RankFirstBody::~RankFirstBody() {
  SharedDtor();
}

void RankFirstBody::SharedDtor() {
  if (firstname_ != &::google::protobuf::internal::kEmptyString) {
    delete firstname_;
  }
  if (this != default_instance_) {
  }
}

void RankFirstBody::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RankFirstBody::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RankFirstBody_descriptor_;
}

const RankFirstBody& RankFirstBody::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rank_2eproto();
  return *default_instance_;
}

RankFirstBody* RankFirstBody::default_instance_ = NULL;

RankFirstBody* RankFirstBody::New() const {
  return new RankFirstBody;
}

void RankFirstBody::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_firstname()) {
      if (firstname_ != &::google::protobuf::internal::kEmptyString) {
        firstname_->clear();
      }
    }
    skinid_ = 0u;
    suitid_ = 0u;
    weaponid_ = 0u;
    weaponskin_ = 0u;
    showid_ = 0u;
    career_ = 0u;
    playerid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RankFirstBody::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string firstname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_firstname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->firstname().data(), this->firstname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skinid;
        break;
      }

      // optional uint32 skinid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skinid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skinid_)));
          set_has_skinid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_suitid;
        break;
      }

      // optional uint32 suitid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_suitid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &suitid_)));
          set_has_suitid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_weaponid;
        break;
      }

      // optional uint32 weaponid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weaponid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weaponid_)));
          set_has_weaponid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_weaponskin;
        break;
      }

      // optional uint32 weaponskin = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weaponskin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weaponskin_)));
          set_has_weaponskin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_showid;
        break;
      }

      // optional uint32 showid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_showid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &showid_)));
          set_has_showid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_career;
        break;
      }

      // optional uint32 career = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_career:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &career_)));
          set_has_career();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_playerid;
        break;
      }

      // optional uint64 playerid = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RankFirstBody::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string firstname = 1;
  if (has_firstname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->firstname().data(), this->firstname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->firstname(), output);
  }

  // optional uint32 skinid = 2;
  if (has_skinid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->skinid(), output);
  }

  // optional uint32 suitid = 3;
  if (has_suitid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->suitid(), output);
  }

  // optional uint32 weaponid = 4;
  if (has_weaponid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->weaponid(), output);
  }

  // optional uint32 weaponskin = 5;
  if (has_weaponskin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->weaponskin(), output);
  }

  // optional uint32 showid = 6;
  if (has_showid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->showid(), output);
  }

  // optional uint32 career = 7;
  if (has_career()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->career(), output);
  }

  // optional uint64 playerid = 8;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RankFirstBody::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string firstname = 1;
  if (has_firstname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->firstname().data(), this->firstname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->firstname(), target);
  }

  // optional uint32 skinid = 2;
  if (has_skinid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->skinid(), target);
  }

  // optional uint32 suitid = 3;
  if (has_suitid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->suitid(), target);
  }

  // optional uint32 weaponid = 4;
  if (has_weaponid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->weaponid(), target);
  }

  // optional uint32 weaponskin = 5;
  if (has_weaponskin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->weaponskin(), target);
  }

  // optional uint32 showid = 6;
  if (has_showid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->showid(), target);
  }

  // optional uint32 career = 7;
  if (has_career()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->career(), target);
  }

  // optional uint64 playerid = 8;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RankFirstBody::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string firstname = 1;
    if (has_firstname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->firstname());
    }

    // optional uint32 skinid = 2;
    if (has_skinid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skinid());
    }

    // optional uint32 suitid = 3;
    if (has_suitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->suitid());
    }

    // optional uint32 weaponid = 4;
    if (has_weaponid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weaponid());
    }

    // optional uint32 weaponskin = 5;
    if (has_weaponskin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weaponskin());
    }

    // optional uint32 showid = 6;
    if (has_showid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->showid());
    }

    // optional uint32 career = 7;
    if (has_career()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->career());
    }

    // optional uint64 playerid = 8;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RankFirstBody::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RankFirstBody* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RankFirstBody*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RankFirstBody::MergeFrom(const RankFirstBody& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_firstname()) {
      set_firstname(from.firstname());
    }
    if (from.has_skinid()) {
      set_skinid(from.skinid());
    }
    if (from.has_suitid()) {
      set_suitid(from.suitid());
    }
    if (from.has_weaponid()) {
      set_weaponid(from.weaponid());
    }
    if (from.has_weaponskin()) {
      set_weaponskin(from.weaponskin());
    }
    if (from.has_showid()) {
      set_showid(from.showid());
    }
    if (from.has_career()) {
      set_career(from.career());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RankFirstBody::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RankFirstBody::CopyFrom(const RankFirstBody& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankFirstBody::IsInitialized() const {

  return true;
}

void RankFirstBody::Swap(RankFirstBody* other) {
  if (other != this) {
    std::swap(firstname_, other->firstname_);
    std::swap(skinid_, other->skinid_);
    std::swap(suitid_, other->suitid_);
    std::swap(weaponid_, other->weaponid_);
    std::swap(weaponskin_, other->weaponskin_);
    std::swap(showid_, other->showid_);
    std::swap(career_, other->career_);
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RankFirstBody::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RankFirstBody_descriptor_;
  metadata.reflection = RankFirstBody_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RewardRecord::kConditionFieldNumber;
const int RewardRecord::kCountsFieldNumber;
const int RewardRecord::kPlayeridFieldNumber;
const int RewardRecord::kIsgetFieldNumber;
#endif  // !_MSC_VER

RewardRecord::RewardRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RewardRecord::InitAsDefaultInstance() {
}

RewardRecord::RewardRecord(const RewardRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RewardRecord::SharedCtor() {
  _cached_size_ = 0;
  condition_ = 0u;
  counts_ = 0;
  isget_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RewardRecord::~RewardRecord() {
  SharedDtor();
}

void RewardRecord::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RewardRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RewardRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RewardRecord_descriptor_;
}

const RewardRecord& RewardRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rank_2eproto();
  return *default_instance_;
}

RewardRecord* RewardRecord::default_instance_ = NULL;

RewardRecord* RewardRecord::New() const {
  return new RewardRecord;
}

void RewardRecord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    condition_ = 0u;
    counts_ = 0;
    isget_ = false;
  }
  playerid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RewardRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 condition = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &condition_)));
          set_has_condition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_counts;
        break;
      }

      // optional int32 counts = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_counts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &counts_)));
          set_has_counts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_playerid;
        break;
      }

      // repeated uint64 playerid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 24, input, this->mutable_playerid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_playerid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_playerid;
        if (input->ExpectTag(32)) goto parse_isget;
        break;
      }

      // optional bool isget = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isget:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isget_)));
          set_has_isget();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RewardRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 condition = 1;
  if (has_condition()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->condition(), output);
  }

  // optional int32 counts = 2;
  if (has_counts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->counts(), output);
  }

  // repeated uint64 playerid = 3;
  for (int i = 0; i < this->playerid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      3, this->playerid(i), output);
  }

  // optional bool isget = 4;
  if (has_isget()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isget(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RewardRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 condition = 1;
  if (has_condition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->condition(), target);
  }

  // optional int32 counts = 2;
  if (has_counts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->counts(), target);
  }

  // repeated uint64 playerid = 3;
  for (int i = 0; i < this->playerid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(3, this->playerid(i), target);
  }

  // optional bool isget = 4;
  if (has_isget()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isget(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RewardRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 condition = 1;
    if (has_condition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->condition());
    }

    // optional int32 counts = 2;
    if (has_counts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->counts());
    }

    // optional bool isget = 4;
    if (has_isget()) {
      total_size += 1 + 1;
    }

  }
  // repeated uint64 playerid = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->playerid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->playerid(i));
    }
    total_size += 1 * this->playerid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RewardRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RewardRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RewardRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RewardRecord::MergeFrom(const RewardRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  playerid_.MergeFrom(from.playerid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_condition()) {
      set_condition(from.condition());
    }
    if (from.has_counts()) {
      set_counts(from.counts());
    }
    if (from.has_isget()) {
      set_isget(from.isget());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RewardRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RewardRecord::CopyFrom(const RewardRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RewardRecord::IsInitialized() const {

  return true;
}

void RewardRecord::Swap(RewardRecord* other) {
  if (other != this) {
    std::swap(condition_, other->condition_);
    std::swap(counts_, other->counts_);
    playerid_.Swap(&other->playerid_);
    std::swap(isget_, other->isget_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RewardRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RewardRecord_descriptor_;
  metadata.reflection = RewardRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActivityRank::kRanktypeFieldNumber;
const int ActivityRank::kRewardFieldNumber;
const int ActivityRank::kFirstFieldNumber;
const int ActivityRank::kIsOverFieldNumber;
const int ActivityRank::kCopyFieldNumber;
#endif  // !_MSC_VER

ActivityRank::ActivityRank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActivityRank::InitAsDefaultInstance() {
  first_ = const_cast< ::proto::message::RankFirstBody*>(&::proto::message::RankFirstBody::default_instance());
}

ActivityRank::ActivityRank(const ActivityRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActivityRank::SharedCtor() {
  _cached_size_ = 0;
  ranktype_ = 0u;
  first_ = NULL;
  isover_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivityRank::~ActivityRank() {
  SharedDtor();
}

void ActivityRank::SharedDtor() {
  if (this != default_instance_) {
    delete first_;
  }
}

void ActivityRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityRank_descriptor_;
}

const ActivityRank& ActivityRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rank_2eproto();
  return *default_instance_;
}

ActivityRank* ActivityRank::default_instance_ = NULL;

ActivityRank* ActivityRank::New() const {
  return new ActivityRank;
}

void ActivityRank::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ranktype_ = 0u;
    if (has_first()) {
      if (first_ != NULL) first_->::proto::message::RankFirstBody::Clear();
    }
    isover_ = 0u;
  }
  reward_.Clear();
  copy_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActivityRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ranktype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ranktype_)));
          set_has_ranktype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_reward;
        break;
      }

      // repeated .proto.message.RewardRecord reward = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_reward;
        if (input->ExpectTag(26)) goto parse_first;
        break;
      }

      // optional .proto.message.RankFirstBody first = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_first:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_first()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_isOver;
        break;
      }

      // optional uint32 isOver = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isOver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isover_)));
          set_has_isover();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_copy;
        break;
      }

      // repeated .proto.message.RankDataCopy copy = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_copy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_copy()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_copy;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActivityRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 ranktype = 1;
  if (has_ranktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ranktype(), output);
  }

  // repeated .proto.message.RewardRecord reward = 2;
  for (int i = 0; i < this->reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->reward(i), output);
  }

  // optional .proto.message.RankFirstBody first = 3;
  if (has_first()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->first(), output);
  }

  // optional uint32 isOver = 4;
  if (has_isover()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->isover(), output);
  }

  // repeated .proto.message.RankDataCopy copy = 5;
  for (int i = 0; i < this->copy_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->copy(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActivityRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ranktype = 1;
  if (has_ranktype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ranktype(), target);
  }

  // repeated .proto.message.RewardRecord reward = 2;
  for (int i = 0; i < this->reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->reward(i), target);
  }

  // optional .proto.message.RankFirstBody first = 3;
  if (has_first()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->first(), target);
  }

  // optional uint32 isOver = 4;
  if (has_isover()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->isover(), target);
  }

  // repeated .proto.message.RankDataCopy copy = 5;
  for (int i = 0; i < this->copy_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->copy(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActivityRank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ranktype = 1;
    if (has_ranktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ranktype());
    }

    // optional .proto.message.RankFirstBody first = 3;
    if (has_first()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->first());
    }

    // optional uint32 isOver = 4;
    if (has_isover()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isover());
    }

  }
  // repeated .proto.message.RewardRecord reward = 2;
  total_size += 1 * this->reward_size();
  for (int i = 0; i < this->reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward(i));
  }

  // repeated .proto.message.RankDataCopy copy = 5;
  total_size += 1 * this->copy_size();
  for (int i = 0; i < this->copy_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->copy(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActivityRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActivityRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActivityRank::MergeFrom(const ActivityRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  reward_.MergeFrom(from.reward_);
  copy_.MergeFrom(from.copy_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ranktype()) {
      set_ranktype(from.ranktype());
    }
    if (from.has_first()) {
      mutable_first()->::proto::message::RankFirstBody::MergeFrom(from.first());
    }
    if (from.has_isover()) {
      set_isover(from.isover());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActivityRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityRank::CopyFrom(const ActivityRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityRank::IsInitialized() const {

  return true;
}

void ActivityRank::Swap(ActivityRank* other) {
  if (other != this) {
    std::swap(ranktype_, other->ranktype_);
    reward_.Swap(&other->reward_);
    std::swap(first_, other->first_);
    std::swap(isover_, other->isover_);
    copy_.Swap(&other->copy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActivityRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivityRank_descriptor_;
  metadata.reflection = ActivityRank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActivityRankList::kDataFieldNumber;
#endif  // !_MSC_VER

ActivityRankList::ActivityRankList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActivityRankList::InitAsDefaultInstance() {
}

ActivityRankList::ActivityRankList(const ActivityRankList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActivityRankList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivityRankList::~ActivityRankList() {
  SharedDtor();
}

void ActivityRankList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActivityRankList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityRankList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityRankList_descriptor_;
}

const ActivityRankList& ActivityRankList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rank_2eproto();
  return *default_instance_;
}

ActivityRankList* ActivityRankList::default_instance_ = NULL;

ActivityRankList* ActivityRankList::New() const {
  return new ActivityRankList;
}

void ActivityRankList::Clear() {
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActivityRankList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.message.ActivityRank data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActivityRankList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.message.ActivityRank data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActivityRankList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.message.ActivityRank data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActivityRankList::ByteSize() const {
  int total_size = 0;

  // repeated .proto.message.ActivityRank data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityRankList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActivityRankList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActivityRankList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActivityRankList::MergeFrom(const ActivityRankList& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActivityRankList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityRankList::CopyFrom(const ActivityRankList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityRankList::IsInitialized() const {

  return true;
}

void ActivityRankList::Swap(ActivityRankList* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActivityRankList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivityRankList_descriptor_;
  metadata.reflection = ActivityRankList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SaveActivityRank::kContentFieldNumber;
#endif  // !_MSC_VER

SaveActivityRank::SaveActivityRank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SaveActivityRank::InitAsDefaultInstance() {
  content_ = const_cast< ::proto::message::ActivityRankList*>(&::proto::message::ActivityRankList::default_instance());
}

SaveActivityRank::SaveActivityRank(const SaveActivityRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SaveActivityRank::SharedCtor() {
  _cached_size_ = 0;
  content_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SaveActivityRank::~SaveActivityRank() {
  SharedDtor();
}

void SaveActivityRank::SharedDtor() {
  if (this != default_instance_) {
    delete content_;
  }
}

void SaveActivityRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SaveActivityRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SaveActivityRank_descriptor_;
}

const SaveActivityRank& SaveActivityRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rank_2eproto();
  return *default_instance_;
}

SaveActivityRank* SaveActivityRank::default_instance_ = NULL;

SaveActivityRank* SaveActivityRank::New() const {
  return new SaveActivityRank;
}

void SaveActivityRank::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_content()) {
      if (content_ != NULL) content_->::proto::message::ActivityRankList::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SaveActivityRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.message.ActivityRankList content = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SaveActivityRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto.message.ActivityRankList content = 1;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SaveActivityRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto.message.ActivityRankList content = 1;
  if (has_content()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SaveActivityRank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto.message.ActivityRankList content = 1;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SaveActivityRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SaveActivityRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SaveActivityRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SaveActivityRank::MergeFrom(const SaveActivityRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_content()) {
      mutable_content()->::proto::message::ActivityRankList::MergeFrom(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SaveActivityRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SaveActivityRank::CopyFrom(const SaveActivityRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SaveActivityRank::IsInitialized() const {

  return true;
}

void SaveActivityRank::Swap(SaveActivityRank* other) {
  if (other != this) {
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SaveActivityRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SaveActivityRank_descriptor_;
  metadata.reflection = SaveActivityRank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AuxData::kExidFieldNumber;
const int AuxData::kFitvalueFieldNumber;
const int AuxData::kEquiplistFieldNumber;
const int AuxData::kSkilllistFieldNumber;
const int AuxData::kSkilllevFieldNumber;
#endif  // !_MSC_VER

AuxData::AuxData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AuxData::InitAsDefaultInstance() {
}

AuxData::AuxData(const AuxData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AuxData::SharedCtor() {
  _cached_size_ = 0;
  exid_ = 0u;
  fitvalue_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuxData::~AuxData() {
  SharedDtor();
}

void AuxData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AuxData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuxData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuxData_descriptor_;
}

const AuxData& AuxData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rank_2eproto();
  return *default_instance_;
}

AuxData* AuxData::default_instance_ = NULL;

AuxData* AuxData::New() const {
  return new AuxData;
}

void AuxData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    exid_ = 0u;
    fitvalue_ = 0u;
  }
  equiplist_.Clear();
  skilllist_.Clear();
  skilllev_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AuxData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 exid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exid_)));
          set_has_exid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fitvalue;
        break;
      }

      // optional uint32 fitvalue = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fitvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fitvalue_)));
          set_has_fitvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_equiplist;
        break;
      }

      // repeated uint32 equiplist = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equiplist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_equiplist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_equiplist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_equiplist;
        if (input->ExpectTag(32)) goto parse_skilllist;
        break;
      }

      // repeated uint32 skilllist = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skilllist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_skilllist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_skilllist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_skilllist;
        if (input->ExpectTag(40)) goto parse_skilllev;
        break;
      }

      // repeated uint32 skilllev = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skilllev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_skilllev())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_skilllev())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_skilllev;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AuxData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 exid = 1;
  if (has_exid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->exid(), output);
  }

  // optional uint32 fitvalue = 2;
  if (has_fitvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->fitvalue(), output);
  }

  // repeated uint32 equiplist = 3;
  for (int i = 0; i < this->equiplist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->equiplist(i), output);
  }

  // repeated uint32 skilllist = 4;
  for (int i = 0; i < this->skilllist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->skilllist(i), output);
  }

  // repeated uint32 skilllev = 5;
  for (int i = 0; i < this->skilllev_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->skilllev(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AuxData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 exid = 1;
  if (has_exid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->exid(), target);
  }

  // optional uint32 fitvalue = 2;
  if (has_fitvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->fitvalue(), target);
  }

  // repeated uint32 equiplist = 3;
  for (int i = 0; i < this->equiplist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->equiplist(i), target);
  }

  // repeated uint32 skilllist = 4;
  for (int i = 0; i < this->skilllist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->skilllist(i), target);
  }

  // repeated uint32 skilllev = 5;
  for (int i = 0; i < this->skilllev_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->skilllev(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AuxData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 exid = 1;
    if (has_exid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exid());
    }

    // optional uint32 fitvalue = 2;
    if (has_fitvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fitvalue());
    }

  }
  // repeated uint32 equiplist = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->equiplist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->equiplist(i));
    }
    total_size += 1 * this->equiplist_size() + data_size;
  }

  // repeated uint32 skilllist = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->skilllist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->skilllist(i));
    }
    total_size += 1 * this->skilllist_size() + data_size;
  }

  // repeated uint32 skilllev = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->skilllev_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->skilllev(i));
    }
    total_size += 1 * this->skilllev_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuxData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AuxData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AuxData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AuxData::MergeFrom(const AuxData& from) {
  GOOGLE_CHECK_NE(&from, this);
  equiplist_.MergeFrom(from.equiplist_);
  skilllist_.MergeFrom(from.skilllist_);
  skilllev_.MergeFrom(from.skilllev_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_exid()) {
      set_exid(from.exid());
    }
    if (from.has_fitvalue()) {
      set_fitvalue(from.fitvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AuxData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuxData::CopyFrom(const AuxData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuxData::IsInitialized() const {

  return true;
}

void AuxData::Swap(AuxData* other) {
  if (other != this) {
    std::swap(exid_, other->exid_);
    std::swap(fitvalue_, other->fitvalue_);
    equiplist_.Swap(&other->equiplist_);
    skilllist_.Swap(&other->skilllist_);
    skilllev_.Swap(&other->skilllev_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AuxData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuxData_descriptor_;
  metadata.reflection = AuxData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RankDBData::kCharidFieldNumber;
const int RankDBData::kCharnameFieldNumber;
const int RankDBData::kRankRankingFieldNumber;
const int RankDBData::kUpdatetimeFieldNumber;
const int RankDBData::kRankValueFieldNumber;
const int RankDBData::kGuildidFieldNumber;
const int RankDBData::kGuildnameFieldNumber;
const int RankDBData::kCareerFieldNumber;
const int RankDBData::kDhlevFieldNumber;
const int RankDBData::kFightvalFieldNumber;
const int RankDBData::kSkinidFieldNumber;
const int RankDBData::kWeaponskinFieldNumber;
const int RankDBData::kEquiplistFieldNumber;
const int RankDBData::kSuitidFieldNumber;
const int RankDBData::kDatalistFieldNumber;
#endif  // !_MSC_VER

RankDBData::RankDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RankDBData::InitAsDefaultInstance() {
}

RankDBData::RankDBData(const RankDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RankDBData::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rank_ranking_ = 0;
  updatetime_ = GOOGLE_ULONGLONG(0);
  rank_value_ = 0;
  guildid_ = GOOGLE_ULONGLONG(0);
  guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  career_ = 0u;
  dhlev_ = 0u;
  fightval_ = 0u;
  skinid_ = 0u;
  weaponskin_ = 0u;
  suitid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RankDBData::~RankDBData() {
  SharedDtor();
}

void RankDBData::SharedDtor() {
  if (charname_ != &::google::protobuf::internal::kEmptyString) {
    delete charname_;
  }
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    delete guildname_;
  }
  if (this != default_instance_) {
  }
}

void RankDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RankDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RankDBData_descriptor_;
}

const RankDBData& RankDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rank_2eproto();
  return *default_instance_;
}

RankDBData* RankDBData::default_instance_ = NULL;

RankDBData* RankDBData::New() const {
  return new RankDBData;
}

void RankDBData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_ULONGLONG(0);
    if (has_charname()) {
      if (charname_ != &::google::protobuf::internal::kEmptyString) {
        charname_->clear();
      }
    }
    rank_ranking_ = 0;
    updatetime_ = GOOGLE_ULONGLONG(0);
    rank_value_ = 0;
    guildid_ = GOOGLE_ULONGLONG(0);
    if (has_guildname()) {
      if (guildname_ != &::google::protobuf::internal::kEmptyString) {
        guildname_->clear();
      }
    }
    career_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    dhlev_ = 0u;
    fightval_ = 0u;
    skinid_ = 0u;
    weaponskin_ = 0u;
    suitid_ = 0u;
  }
  equiplist_.Clear();
  datalist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RankDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_charname;
        break;
      }

      // optional string charname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_charname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_charname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->charname().data(), this->charname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_rank_ranking;
        break;
      }

      // optional int32 rank_ranking = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank_ranking:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_ranking_)));
          set_has_rank_ranking();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_updatetime;
        break;
      }

      // optional uint64 updatetime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_updatetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &updatetime_)));
          set_has_updatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_rank_value;
        break;
      }

      // optional int32 rank_value = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_value_)));
          set_has_rank_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_guildid;
        break;
      }

      // optional uint64 guildid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guildid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_guildname;
        break;
      }

      // optional string guildname = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guildname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guildname().data(), this->guildname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_career;
        break;
      }

      // optional uint32 career = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_career:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &career_)));
          set_has_career();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_dhlev;
        break;
      }

      // optional uint32 dhlev = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dhlev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dhlev_)));
          set_has_dhlev();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_fightval;
        break;
      }

      // optional uint32 fightval = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fightval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fightval_)));
          set_has_fightval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_skinid;
        break;
      }

      // optional uint32 skinid = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skinid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skinid_)));
          set_has_skinid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_weaponskin;
        break;
      }

      // optional uint32 weaponskin = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weaponskin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weaponskin_)));
          set_has_weaponskin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_equiplist;
        break;
      }

      // repeated uint32 equiplist = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equiplist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 112, input, this->mutable_equiplist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_equiplist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_equiplist;
        if (input->ExpectTag(120)) goto parse_suitid;
        break;
      }

      // optional uint32 suitid = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_suitid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &suitid_)));
          set_has_suitid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_datalist;
        break;
      }

      // repeated .proto.message.AuxData datalist = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_datalist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_datalist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_datalist;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RankDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  // optional string charname = 2;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->charname(), output);
  }

  // optional int32 rank_ranking = 4;
  if (has_rank_ranking()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->rank_ranking(), output);
  }

  // optional uint64 updatetime = 5;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->updatetime(), output);
  }

  // optional int32 rank_value = 6;
  if (has_rank_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->rank_value(), output);
  }

  // optional uint64 guildid = 7;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->guildid(), output);
  }

  // optional string guildname = 8;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->guildname(), output);
  }

  // optional uint32 career = 9;
  if (has_career()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->career(), output);
  }

  // optional uint32 dhlev = 10;
  if (has_dhlev()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->dhlev(), output);
  }

  // optional uint32 fightval = 11;
  if (has_fightval()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->fightval(), output);
  }

  // optional uint32 skinid = 12;
  if (has_skinid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->skinid(), output);
  }

  // optional uint32 weaponskin = 13;
  if (has_weaponskin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->weaponskin(), output);
  }

  // repeated uint32 equiplist = 14;
  for (int i = 0; i < this->equiplist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      14, this->equiplist(i), output);
  }

  // optional uint32 suitid = 15;
  if (has_suitid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->suitid(), output);
  }

  // repeated .proto.message.AuxData datalist = 16;
  for (int i = 0; i < this->datalist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->datalist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RankDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  // optional string charname = 2;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->charname(), target);
  }

  // optional int32 rank_ranking = 4;
  if (has_rank_ranking()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->rank_ranking(), target);
  }

  // optional uint64 updatetime = 5;
  if (has_updatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->updatetime(), target);
  }

  // optional int32 rank_value = 6;
  if (has_rank_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->rank_value(), target);
  }

  // optional uint64 guildid = 7;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->guildid(), target);
  }

  // optional string guildname = 8;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->guildname(), target);
  }

  // optional uint32 career = 9;
  if (has_career()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->career(), target);
  }

  // optional uint32 dhlev = 10;
  if (has_dhlev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->dhlev(), target);
  }

  // optional uint32 fightval = 11;
  if (has_fightval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->fightval(), target);
  }

  // optional uint32 skinid = 12;
  if (has_skinid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->skinid(), target);
  }

  // optional uint32 weaponskin = 13;
  if (has_weaponskin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->weaponskin(), target);
  }

  // repeated uint32 equiplist = 14;
  for (int i = 0; i < this->equiplist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(14, this->equiplist(i), target);
  }

  // optional uint32 suitid = 15;
  if (has_suitid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->suitid(), target);
  }

  // repeated .proto.message.AuxData datalist = 16;
  for (int i = 0; i < this->datalist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->datalist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RankDBData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional string charname = 2;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->charname());
    }

    // optional int32 rank_ranking = 4;
    if (has_rank_ranking()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank_ranking());
    }

    // optional uint64 updatetime = 5;
    if (has_updatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->updatetime());
    }

    // optional int32 rank_value = 6;
    if (has_rank_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank_value());
    }

    // optional uint64 guildid = 7;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

    // optional string guildname = 8;
    if (has_guildname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildname());
    }

    // optional uint32 career = 9;
    if (has_career()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->career());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 dhlev = 10;
    if (has_dhlev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dhlev());
    }

    // optional uint32 fightval = 11;
    if (has_fightval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fightval());
    }

    // optional uint32 skinid = 12;
    if (has_skinid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skinid());
    }

    // optional uint32 weaponskin = 13;
    if (has_weaponskin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weaponskin());
    }

    // optional uint32 suitid = 15;
    if (has_suitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->suitid());
    }

  }
  // repeated uint32 equiplist = 14;
  {
    int data_size = 0;
    for (int i = 0; i < this->equiplist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->equiplist(i));
    }
    total_size += 1 * this->equiplist_size() + data_size;
  }

  // repeated .proto.message.AuxData datalist = 16;
  total_size += 2 * this->datalist_size();
  for (int i = 0; i < this->datalist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->datalist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RankDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RankDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RankDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RankDBData::MergeFrom(const RankDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  equiplist_.MergeFrom(from.equiplist_);
  datalist_.MergeFrom(from.datalist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_charname()) {
      set_charname(from.charname());
    }
    if (from.has_rank_ranking()) {
      set_rank_ranking(from.rank_ranking());
    }
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
    if (from.has_rank_value()) {
      set_rank_value(from.rank_value());
    }
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_guildname()) {
      set_guildname(from.guildname());
    }
    if (from.has_career()) {
      set_career(from.career());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_dhlev()) {
      set_dhlev(from.dhlev());
    }
    if (from.has_fightval()) {
      set_fightval(from.fightval());
    }
    if (from.has_skinid()) {
      set_skinid(from.skinid());
    }
    if (from.has_weaponskin()) {
      set_weaponskin(from.weaponskin());
    }
    if (from.has_suitid()) {
      set_suitid(from.suitid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RankDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RankDBData::CopyFrom(const RankDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankDBData::IsInitialized() const {

  return true;
}

void RankDBData::Swap(RankDBData* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(charname_, other->charname_);
    std::swap(rank_ranking_, other->rank_ranking_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(rank_value_, other->rank_value_);
    std::swap(guildid_, other->guildid_);
    std::swap(guildname_, other->guildname_);
    std::swap(career_, other->career_);
    std::swap(dhlev_, other->dhlev_);
    std::swap(fightval_, other->fightval_);
    std::swap(skinid_, other->skinid_);
    std::swap(weaponskin_, other->weaponskin_);
    equiplist_.Swap(&other->equiplist_);
    std::swap(suitid_, other->suitid_);
    datalist_.Swap(&other->datalist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RankDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RankDBData_descriptor_;
  metadata.reflection = RankDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RankDBList::kDatasFieldNumber;
#endif  // !_MSC_VER

RankDBList::RankDBList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RankDBList::InitAsDefaultInstance() {
}

RankDBList::RankDBList(const RankDBList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RankDBList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RankDBList::~RankDBList() {
  SharedDtor();
}

void RankDBList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RankDBList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RankDBList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RankDBList_descriptor_;
}

const RankDBList& RankDBList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rank_2eproto();
  return *default_instance_;
}

RankDBList* RankDBList::default_instance_ = NULL;

RankDBList* RankDBList::New() const {
  return new RankDBList;
}

void RankDBList::Clear() {
  datas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RankDBList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.message.RankDBData datas = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_datas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_datas()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_datas;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RankDBList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.message.RankDBData datas = 1;
  for (int i = 0; i < this->datas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->datas(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RankDBList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.message.RankDBData datas = 1;
  for (int i = 0; i < this->datas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->datas(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RankDBList::ByteSize() const {
  int total_size = 0;

  // repeated .proto.message.RankDBData datas = 1;
  total_size += 1 * this->datas_size();
  for (int i = 0; i < this->datas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->datas(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RankDBList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RankDBList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RankDBList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RankDBList::MergeFrom(const RankDBList& from) {
  GOOGLE_CHECK_NE(&from, this);
  datas_.MergeFrom(from.datas_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RankDBList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RankDBList::CopyFrom(const RankDBList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankDBList::IsInitialized() const {

  return true;
}

void RankDBList::Swap(RankDBList* other) {
  if (other != this) {
    datas_.Swap(&other->datas_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RankDBList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RankDBList_descriptor_;
  metadata.reflection = RankDBList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SaveRankData::kRankIdFieldNumber;
const int SaveRankData::kRankTypeFieldNumber;
const int SaveRankData::kRankDatasFieldNumber;
const int SaveRankData::kResettimeFieldNumber;
const int SaveRankData::kFirstFieldNumber;
#endif  // !_MSC_VER

SaveRankData::SaveRankData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SaveRankData::InitAsDefaultInstance() {
  rank_datas_ = const_cast< ::proto::message::RankDBList*>(&::proto::message::RankDBList::default_instance());
  first_ = const_cast< ::proto::message::RankFirstBody*>(&::proto::message::RankFirstBody::default_instance());
}

SaveRankData::SaveRankData(const SaveRankData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SaveRankData::SharedCtor() {
  _cached_size_ = 0;
  rank_id_ = 0;
  rank_type_ = 0;
  rank_datas_ = NULL;
  resettime_ = GOOGLE_ULONGLONG(0);
  first_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SaveRankData::~SaveRankData() {
  SharedDtor();
}

void SaveRankData::SharedDtor() {
  if (this != default_instance_) {
    delete rank_datas_;
    delete first_;
  }
}

void SaveRankData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SaveRankData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SaveRankData_descriptor_;
}

const SaveRankData& SaveRankData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rank_2eproto();
  return *default_instance_;
}

SaveRankData* SaveRankData::default_instance_ = NULL;

SaveRankData* SaveRankData::New() const {
  return new SaveRankData;
}

void SaveRankData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rank_id_ = 0;
    rank_type_ = 0;
    if (has_rank_datas()) {
      if (rank_datas_ != NULL) rank_datas_->::proto::message::RankDBList::Clear();
    }
    resettime_ = GOOGLE_ULONGLONG(0);
    if (has_first()) {
      if (first_ != NULL) first_->::proto::message::RankFirstBody::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SaveRankData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 rank_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_id_)));
          set_has_rank_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rank_type;
        break;
      }

      // optional int32 rank_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_type_)));
          set_has_rank_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rank_datas;
        break;
      }

      // optional .proto.message.RankDBList rank_datas = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rank_datas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rank_datas()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_resettime;
        break;
      }

      // optional uint64 resettime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resettime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &resettime_)));
          set_has_resettime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_first;
        break;
      }

      // optional .proto.message.RankFirstBody first = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_first:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_first()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SaveRankData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 rank_id = 1;
  if (has_rank_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rank_id(), output);
  }

  // optional int32 rank_type = 2;
  if (has_rank_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rank_type(), output);
  }

  // optional .proto.message.RankDBList rank_datas = 3;
  if (has_rank_datas()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rank_datas(), output);
  }

  // optional uint64 resettime = 4;
  if (has_resettime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->resettime(), output);
  }

  // optional .proto.message.RankFirstBody first = 5;
  if (has_first()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->first(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SaveRankData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 rank_id = 1;
  if (has_rank_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rank_id(), target);
  }

  // optional int32 rank_type = 2;
  if (has_rank_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rank_type(), target);
  }

  // optional .proto.message.RankDBList rank_datas = 3;
  if (has_rank_datas()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->rank_datas(), target);
  }

  // optional uint64 resettime = 4;
  if (has_resettime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->resettime(), target);
  }

  // optional .proto.message.RankFirstBody first = 5;
  if (has_first()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->first(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SaveRankData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 rank_id = 1;
    if (has_rank_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank_id());
    }

    // optional int32 rank_type = 2;
    if (has_rank_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank_type());
    }

    // optional .proto.message.RankDBList rank_datas = 3;
    if (has_rank_datas()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rank_datas());
    }

    // optional uint64 resettime = 4;
    if (has_resettime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->resettime());
    }

    // optional .proto.message.RankFirstBody first = 5;
    if (has_first()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->first());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SaveRankData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SaveRankData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SaveRankData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SaveRankData::MergeFrom(const SaveRankData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank_id()) {
      set_rank_id(from.rank_id());
    }
    if (from.has_rank_type()) {
      set_rank_type(from.rank_type());
    }
    if (from.has_rank_datas()) {
      mutable_rank_datas()->::proto::message::RankDBList::MergeFrom(from.rank_datas());
    }
    if (from.has_resettime()) {
      set_resettime(from.resettime());
    }
    if (from.has_first()) {
      mutable_first()->::proto::message::RankFirstBody::MergeFrom(from.first());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SaveRankData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SaveRankData::CopyFrom(const SaveRankData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SaveRankData::IsInitialized() const {

  return true;
}

void SaveRankData::Swap(SaveRankData* other) {
  if (other != this) {
    std::swap(rank_id_, other->rank_id_);
    std::swap(rank_type_, other->rank_type_);
    std::swap(rank_datas_, other->rank_datas_);
    std::swap(resettime_, other->resettime_);
    std::swap(first_, other->first_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SaveRankData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SaveRankData_descriptor_;
  metadata.reflection = SaveRankData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Rank_CS_GetRankInfo::kRankTypeFieldNumber;
const int Rank_CS_GetRankInfo::kRankingStartFieldNumber;
const int Rank_CS_GetRankInfo::kRankintEndFieldNumber;
#endif  // !_MSC_VER

Rank_CS_GetRankInfo::Rank_CS_GetRankInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Rank_CS_GetRankInfo::InitAsDefaultInstance() {
}

Rank_CS_GetRankInfo::Rank_CS_GetRankInfo(const Rank_CS_GetRankInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Rank_CS_GetRankInfo::SharedCtor() {
  _cached_size_ = 0;
  rank_type_ = 1;
  ranking_start_ = 0;
  rankint_end_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Rank_CS_GetRankInfo::~Rank_CS_GetRankInfo() {
  SharedDtor();
}

void Rank_CS_GetRankInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Rank_CS_GetRankInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Rank_CS_GetRankInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Rank_CS_GetRankInfo_descriptor_;
}

const Rank_CS_GetRankInfo& Rank_CS_GetRankInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rank_2eproto();
  return *default_instance_;
}

Rank_CS_GetRankInfo* Rank_CS_GetRankInfo::default_instance_ = NULL;

Rank_CS_GetRankInfo* Rank_CS_GetRankInfo::New() const {
  return new Rank_CS_GetRankInfo;
}

void Rank_CS_GetRankInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rank_type_ = 1;
    ranking_start_ = 0;
    rankint_end_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Rank_CS_GetRankInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .proto.message.eRankType rank_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::message::eRankType_IsValid(value)) {
            set_rank_type(static_cast< ::proto::message::eRankType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ranking_start;
        break;
      }

      // optional int32 ranking_start = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ranking_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ranking_start_)));
          set_has_ranking_start();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rankint_end;
        break;
      }

      // optional int32 rankint_end = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rankint_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rankint_end_)));
          set_has_rankint_end();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Rank_CS_GetRankInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .proto.message.eRankType rank_type = 1;
  if (has_rank_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->rank_type(), output);
  }

  // optional int32 ranking_start = 2;
  if (has_ranking_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ranking_start(), output);
  }

  // optional int32 rankint_end = 3;
  if (has_rankint_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rankint_end(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Rank_CS_GetRankInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .proto.message.eRankType rank_type = 1;
  if (has_rank_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->rank_type(), target);
  }

  // optional int32 ranking_start = 2;
  if (has_ranking_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ranking_start(), target);
  }

  // optional int32 rankint_end = 3;
  if (has_rankint_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rankint_end(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Rank_CS_GetRankInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .proto.message.eRankType rank_type = 1;
    if (has_rank_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->rank_type());
    }

    // optional int32 ranking_start = 2;
    if (has_ranking_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ranking_start());
    }

    // optional int32 rankint_end = 3;
    if (has_rankint_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rankint_end());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Rank_CS_GetRankInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Rank_CS_GetRankInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Rank_CS_GetRankInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Rank_CS_GetRankInfo::MergeFrom(const Rank_CS_GetRankInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank_type()) {
      set_rank_type(from.rank_type());
    }
    if (from.has_ranking_start()) {
      set_ranking_start(from.ranking_start());
    }
    if (from.has_rankint_end()) {
      set_rankint_end(from.rankint_end());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Rank_CS_GetRankInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rank_CS_GetRankInfo::CopyFrom(const Rank_CS_GetRankInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rank_CS_GetRankInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Rank_CS_GetRankInfo::Swap(Rank_CS_GetRankInfo* other) {
  if (other != this) {
    std::swap(rank_type_, other->rank_type_);
    std::swap(ranking_start_, other->ranking_start_);
    std::swap(rankint_end_, other->rankint_end_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Rank_CS_GetRankInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Rank_CS_GetRankInfo_descriptor_;
  metadata.reflection = Rank_CS_GetRankInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Rank_SC_GetRankInfo::kRankTypeFieldNumber;
const int Rank_SC_GetRankInfo::kTotalNumFieldNumber;
const int Rank_SC_GetRankInfo::kRankListFieldNumber;
const int Rank_SC_GetRankInfo::kRankSelfFieldNumber;
#endif  // !_MSC_VER

Rank_SC_GetRankInfo::Rank_SC_GetRankInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Rank_SC_GetRankInfo::InitAsDefaultInstance() {
  rank_self_ = const_cast< ::proto::message::RankDBData*>(&::proto::message::RankDBData::default_instance());
}

Rank_SC_GetRankInfo::Rank_SC_GetRankInfo(const Rank_SC_GetRankInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Rank_SC_GetRankInfo::SharedCtor() {
  _cached_size_ = 0;
  rank_type_ = 1;
  total_num_ = 0;
  rank_self_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Rank_SC_GetRankInfo::~Rank_SC_GetRankInfo() {
  SharedDtor();
}

void Rank_SC_GetRankInfo::SharedDtor() {
  if (this != default_instance_) {
    delete rank_self_;
  }
}

void Rank_SC_GetRankInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Rank_SC_GetRankInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Rank_SC_GetRankInfo_descriptor_;
}

const Rank_SC_GetRankInfo& Rank_SC_GetRankInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rank_2eproto();
  return *default_instance_;
}

Rank_SC_GetRankInfo* Rank_SC_GetRankInfo::default_instance_ = NULL;

Rank_SC_GetRankInfo* Rank_SC_GetRankInfo::New() const {
  return new Rank_SC_GetRankInfo;
}

void Rank_SC_GetRankInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rank_type_ = 1;
    total_num_ = 0;
    if (has_rank_self()) {
      if (rank_self_ != NULL) rank_self_->::proto::message::RankDBData::Clear();
    }
  }
  rank_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Rank_SC_GetRankInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .proto.message.eRankType rank_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::message::eRankType_IsValid(value)) {
            set_rank_type(static_cast< ::proto::message::eRankType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_total_num;
        break;
      }

      // optional int32 total_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_num_)));
          set_has_total_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rank_list;
        break;
      }

      // repeated .proto.message.RankDBData rank_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rank_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rank_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rank_list;
        if (input->ExpectTag(34)) goto parse_rank_self;
        break;
      }

      // optional .proto.message.RankDBData rank_self = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rank_self:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rank_self()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Rank_SC_GetRankInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .proto.message.eRankType rank_type = 1;
  if (has_rank_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->rank_type(), output);
  }

  // optional int32 total_num = 2;
  if (has_total_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->total_num(), output);
  }

  // repeated .proto.message.RankDBData rank_list = 3;
  for (int i = 0; i < this->rank_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rank_list(i), output);
  }

  // optional .proto.message.RankDBData rank_self = 4;
  if (has_rank_self()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->rank_self(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Rank_SC_GetRankInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .proto.message.eRankType rank_type = 1;
  if (has_rank_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->rank_type(), target);
  }

  // optional int32 total_num = 2;
  if (has_total_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->total_num(), target);
  }

  // repeated .proto.message.RankDBData rank_list = 3;
  for (int i = 0; i < this->rank_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->rank_list(i), target);
  }

  // optional .proto.message.RankDBData rank_self = 4;
  if (has_rank_self()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->rank_self(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Rank_SC_GetRankInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .proto.message.eRankType rank_type = 1;
    if (has_rank_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->rank_type());
    }

    // optional int32 total_num = 2;
    if (has_total_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_num());
    }

    // optional .proto.message.RankDBData rank_self = 4;
    if (has_rank_self()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rank_self());
    }

  }
  // repeated .proto.message.RankDBData rank_list = 3;
  total_size += 1 * this->rank_list_size();
  for (int i = 0; i < this->rank_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rank_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Rank_SC_GetRankInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Rank_SC_GetRankInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Rank_SC_GetRankInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Rank_SC_GetRankInfo::MergeFrom(const Rank_SC_GetRankInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  rank_list_.MergeFrom(from.rank_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank_type()) {
      set_rank_type(from.rank_type());
    }
    if (from.has_total_num()) {
      set_total_num(from.total_num());
    }
    if (from.has_rank_self()) {
      mutable_rank_self()->::proto::message::RankDBData::MergeFrom(from.rank_self());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Rank_SC_GetRankInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rank_SC_GetRankInfo::CopyFrom(const Rank_SC_GetRankInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rank_SC_GetRankInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Rank_SC_GetRankInfo::Swap(Rank_SC_GetRankInfo* other) {
  if (other != this) {
    std::swap(rank_type_, other->rank_type_);
    std::swap(total_num_, other->total_num_);
    rank_list_.Swap(&other->rank_list_);
    std::swap(rank_self_, other->rank_self_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Rank_SC_GetRankInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Rank_SC_GetRankInfo_descriptor_;
  metadata.reflection = Rank_SC_GetRankInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Rank_CS_ReqActivityReward::kConditionidFieldNumber;
#endif  // !_MSC_VER

Rank_CS_ReqActivityReward::Rank_CS_ReqActivityReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Rank_CS_ReqActivityReward::InitAsDefaultInstance() {
}

Rank_CS_ReqActivityReward::Rank_CS_ReqActivityReward(const Rank_CS_ReqActivityReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Rank_CS_ReqActivityReward::SharedCtor() {
  _cached_size_ = 0;
  conditionid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Rank_CS_ReqActivityReward::~Rank_CS_ReqActivityReward() {
  SharedDtor();
}

void Rank_CS_ReqActivityReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Rank_CS_ReqActivityReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Rank_CS_ReqActivityReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Rank_CS_ReqActivityReward_descriptor_;
}

const Rank_CS_ReqActivityReward& Rank_CS_ReqActivityReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rank_2eproto();
  return *default_instance_;
}

Rank_CS_ReqActivityReward* Rank_CS_ReqActivityReward::default_instance_ = NULL;

Rank_CS_ReqActivityReward* Rank_CS_ReqActivityReward::New() const {
  return new Rank_CS_ReqActivityReward;
}

void Rank_CS_ReqActivityReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    conditionid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Rank_CS_ReqActivityReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 conditionid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &conditionid_)));
          set_has_conditionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Rank_CS_ReqActivityReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 conditionid = 1;
  if (has_conditionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->conditionid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Rank_CS_ReqActivityReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 conditionid = 1;
  if (has_conditionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->conditionid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Rank_CS_ReqActivityReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 conditionid = 1;
    if (has_conditionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->conditionid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Rank_CS_ReqActivityReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Rank_CS_ReqActivityReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Rank_CS_ReqActivityReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Rank_CS_ReqActivityReward::MergeFrom(const Rank_CS_ReqActivityReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_conditionid()) {
      set_conditionid(from.conditionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Rank_CS_ReqActivityReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rank_CS_ReqActivityReward::CopyFrom(const Rank_CS_ReqActivityReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rank_CS_ReqActivityReward::IsInitialized() const {

  return true;
}

void Rank_CS_ReqActivityReward::Swap(Rank_CS_ReqActivityReward* other) {
  if (other != this) {
    std::swap(conditionid_, other->conditionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Rank_CS_ReqActivityReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Rank_CS_ReqActivityReward_descriptor_;
  metadata.reflection = Rank_CS_ReqActivityReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Rank_CS_ReqRankRewardData::kRanktypeFieldNumber;
#endif  // !_MSC_VER

Rank_CS_ReqRankRewardData::Rank_CS_ReqRankRewardData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Rank_CS_ReqRankRewardData::InitAsDefaultInstance() {
}

Rank_CS_ReqRankRewardData::Rank_CS_ReqRankRewardData(const Rank_CS_ReqRankRewardData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Rank_CS_ReqRankRewardData::SharedCtor() {
  _cached_size_ = 0;
  ranktype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Rank_CS_ReqRankRewardData::~Rank_CS_ReqRankRewardData() {
  SharedDtor();
}

void Rank_CS_ReqRankRewardData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Rank_CS_ReqRankRewardData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Rank_CS_ReqRankRewardData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Rank_CS_ReqRankRewardData_descriptor_;
}

const Rank_CS_ReqRankRewardData& Rank_CS_ReqRankRewardData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rank_2eproto();
  return *default_instance_;
}

Rank_CS_ReqRankRewardData* Rank_CS_ReqRankRewardData::default_instance_ = NULL;

Rank_CS_ReqRankRewardData* Rank_CS_ReqRankRewardData::New() const {
  return new Rank_CS_ReqRankRewardData;
}

void Rank_CS_ReqRankRewardData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ranktype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Rank_CS_ReqRankRewardData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ranktype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ranktype_)));
          set_has_ranktype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Rank_CS_ReqRankRewardData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 ranktype = 1;
  if (has_ranktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ranktype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Rank_CS_ReqRankRewardData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ranktype = 1;
  if (has_ranktype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ranktype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Rank_CS_ReqRankRewardData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ranktype = 1;
    if (has_ranktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ranktype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Rank_CS_ReqRankRewardData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Rank_CS_ReqRankRewardData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Rank_CS_ReqRankRewardData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Rank_CS_ReqRankRewardData::MergeFrom(const Rank_CS_ReqRankRewardData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ranktype()) {
      set_ranktype(from.ranktype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Rank_CS_ReqRankRewardData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rank_CS_ReqRankRewardData::CopyFrom(const Rank_CS_ReqRankRewardData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rank_CS_ReqRankRewardData::IsInitialized() const {

  return true;
}

void Rank_CS_ReqRankRewardData::Swap(Rank_CS_ReqRankRewardData* other) {
  if (other != this) {
    std::swap(ranktype_, other->ranktype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Rank_CS_ReqRankRewardData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Rank_CS_ReqRankRewardData_descriptor_;
  metadata.reflection = Rank_CS_ReqRankRewardData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Rank_SC_AckRankRewardData::kRankdataFieldNumber;
#endif  // !_MSC_VER

Rank_SC_AckRankRewardData::Rank_SC_AckRankRewardData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Rank_SC_AckRankRewardData::InitAsDefaultInstance() {
  rankdata_ = const_cast< ::proto::message::ActivityRank*>(&::proto::message::ActivityRank::default_instance());
}

Rank_SC_AckRankRewardData::Rank_SC_AckRankRewardData(const Rank_SC_AckRankRewardData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Rank_SC_AckRankRewardData::SharedCtor() {
  _cached_size_ = 0;
  rankdata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Rank_SC_AckRankRewardData::~Rank_SC_AckRankRewardData() {
  SharedDtor();
}

void Rank_SC_AckRankRewardData::SharedDtor() {
  if (this != default_instance_) {
    delete rankdata_;
  }
}

void Rank_SC_AckRankRewardData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Rank_SC_AckRankRewardData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Rank_SC_AckRankRewardData_descriptor_;
}

const Rank_SC_AckRankRewardData& Rank_SC_AckRankRewardData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rank_2eproto();
  return *default_instance_;
}

Rank_SC_AckRankRewardData* Rank_SC_AckRankRewardData::default_instance_ = NULL;

Rank_SC_AckRankRewardData* Rank_SC_AckRankRewardData::New() const {
  return new Rank_SC_AckRankRewardData;
}

void Rank_SC_AckRankRewardData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_rankdata()) {
      if (rankdata_ != NULL) rankdata_->::proto::message::ActivityRank::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Rank_SC_AckRankRewardData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.message.ActivityRank rankdata = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rankdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Rank_SC_AckRankRewardData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto.message.ActivityRank rankdata = 1;
  if (has_rankdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rankdata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Rank_SC_AckRankRewardData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto.message.ActivityRank rankdata = 1;
  if (has_rankdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rankdata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Rank_SC_AckRankRewardData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto.message.ActivityRank rankdata = 1;
    if (has_rankdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rankdata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Rank_SC_AckRankRewardData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Rank_SC_AckRankRewardData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Rank_SC_AckRankRewardData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Rank_SC_AckRankRewardData::MergeFrom(const Rank_SC_AckRankRewardData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rankdata()) {
      mutable_rankdata()->::proto::message::ActivityRank::MergeFrom(from.rankdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Rank_SC_AckRankRewardData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rank_SC_AckRankRewardData::CopyFrom(const Rank_SC_AckRankRewardData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rank_SC_AckRankRewardData::IsInitialized() const {

  return true;
}

void Rank_SC_AckRankRewardData::Swap(Rank_SC_AckRankRewardData* other) {
  if (other != this) {
    std::swap(rankdata_, other->rankdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Rank_SC_AckRankRewardData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Rank_SC_AckRankRewardData_descriptor_;
  metadata.reflection = Rank_SC_AckRankRewardData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Rank_SC_AckPvPSignRankFirst::kDataFieldNumber;
#endif  // !_MSC_VER

Rank_SC_AckPvPSignRankFirst::Rank_SC_AckPvPSignRankFirst()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Rank_SC_AckPvPSignRankFirst::InitAsDefaultInstance() {
  data_ = const_cast< ::proto::message::RankFirstBody*>(&::proto::message::RankFirstBody::default_instance());
}

Rank_SC_AckPvPSignRankFirst::Rank_SC_AckPvPSignRankFirst(const Rank_SC_AckPvPSignRankFirst& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Rank_SC_AckPvPSignRankFirst::SharedCtor() {
  _cached_size_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Rank_SC_AckPvPSignRankFirst::~Rank_SC_AckPvPSignRankFirst() {
  SharedDtor();
}

void Rank_SC_AckPvPSignRankFirst::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void Rank_SC_AckPvPSignRankFirst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Rank_SC_AckPvPSignRankFirst::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Rank_SC_AckPvPSignRankFirst_descriptor_;
}

const Rank_SC_AckPvPSignRankFirst& Rank_SC_AckPvPSignRankFirst::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rank_2eproto();
  return *default_instance_;
}

Rank_SC_AckPvPSignRankFirst* Rank_SC_AckPvPSignRankFirst::default_instance_ = NULL;

Rank_SC_AckPvPSignRankFirst* Rank_SC_AckPvPSignRankFirst::New() const {
  return new Rank_SC_AckPvPSignRankFirst;
}

void Rank_SC_AckPvPSignRankFirst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_data()) {
      if (data_ != NULL) data_->::proto::message::RankFirstBody::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Rank_SC_AckPvPSignRankFirst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.message.RankFirstBody data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Rank_SC_AckPvPSignRankFirst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto.message.RankFirstBody data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Rank_SC_AckPvPSignRankFirst::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto.message.RankFirstBody data = 1;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Rank_SC_AckPvPSignRankFirst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto.message.RankFirstBody data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Rank_SC_AckPvPSignRankFirst::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Rank_SC_AckPvPSignRankFirst* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Rank_SC_AckPvPSignRankFirst*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Rank_SC_AckPvPSignRankFirst::MergeFrom(const Rank_SC_AckPvPSignRankFirst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      mutable_data()->::proto::message::RankFirstBody::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Rank_SC_AckPvPSignRankFirst::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rank_SC_AckPvPSignRankFirst::CopyFrom(const Rank_SC_AckPvPSignRankFirst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rank_SC_AckPvPSignRankFirst::IsInitialized() const {

  return true;
}

void Rank_SC_AckPvPSignRankFirst::Swap(Rank_SC_AckPvPSignRankFirst* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Rank_SC_AckPvPSignRankFirst::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Rank_SC_AckPvPSignRankFirst_descriptor_;
  metadata.reflection = Rank_SC_AckPvPSignRankFirst_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace proto

// @@protoc_insertion_point(global_scope)
