// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: treasure.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "treasure.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace message {

namespace {

const ::google::protobuf::Descriptor* Treasure_CS_Synthesis_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Treasure_CS_Synthesis_reflection_ = NULL;
const ::google::protobuf::Descriptor* Treasure_SC_Synthesis_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Treasure_SC_Synthesis_reflection_ = NULL;
const ::google::protobuf::Descriptor* Treasure_CS_UseTreasure_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Treasure_CS_UseTreasure_reflection_ = NULL;
const ::google::protobuf::Descriptor* Treasure_SC_UseTreasure_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Treasure_SC_UseTreasure_reflection_ = NULL;
const ::google::protobuf::Descriptor* Treasure_SC_UpdateEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Treasure_SC_UpdateEvent_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_treasure_2eproto() {
  protobuf_AddDesc_treasure_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "treasure.proto");
  GOOGLE_CHECK(file != NULL);
  Treasure_CS_Synthesis_descriptor_ = file->message_type(0);
  static const int Treasure_CS_Synthesis_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Treasure_CS_Synthesis, treasure_map_id_),
  };
  Treasure_CS_Synthesis_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Treasure_CS_Synthesis_descriptor_,
      Treasure_CS_Synthesis::default_instance_,
      Treasure_CS_Synthesis_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Treasure_CS_Synthesis, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Treasure_CS_Synthesis, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Treasure_CS_Synthesis));
  Treasure_SC_Synthesis_descriptor_ = file->message_type(1);
  static const int Treasure_SC_Synthesis_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Treasure_SC_Synthesis, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Treasure_SC_Synthesis, treasure_map_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Treasure_SC_Synthesis, treasure_id_),
  };
  Treasure_SC_Synthesis_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Treasure_SC_Synthesis_descriptor_,
      Treasure_SC_Synthesis::default_instance_,
      Treasure_SC_Synthesis_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Treasure_SC_Synthesis, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Treasure_SC_Synthesis, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Treasure_SC_Synthesis));
  Treasure_CS_UseTreasure_descriptor_ = file->message_type(2);
  static const int Treasure_CS_UseTreasure_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Treasure_CS_UseTreasure, uuid_),
  };
  Treasure_CS_UseTreasure_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Treasure_CS_UseTreasure_descriptor_,
      Treasure_CS_UseTreasure::default_instance_,
      Treasure_CS_UseTreasure_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Treasure_CS_UseTreasure, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Treasure_CS_UseTreasure, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Treasure_CS_UseTreasure));
  Treasure_SC_UseTreasure_descriptor_ = file->message_type(3);
  static const int Treasure_SC_UseTreasure_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Treasure_SC_UseTreasure, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Treasure_SC_UseTreasure, uuid_),
  };
  Treasure_SC_UseTreasure_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Treasure_SC_UseTreasure_descriptor_,
      Treasure_SC_UseTreasure::default_instance_,
      Treasure_SC_UseTreasure_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Treasure_SC_UseTreasure, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Treasure_SC_UseTreasure, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Treasure_SC_UseTreasure));
  Treasure_SC_UpdateEvent_descriptor_ = file->message_type(4);
  static const int Treasure_SC_UpdateEvent_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Treasure_SC_UpdateEvent, event_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Treasure_SC_UpdateEvent, result_),
  };
  Treasure_SC_UpdateEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Treasure_SC_UpdateEvent_descriptor_,
      Treasure_SC_UpdateEvent::default_instance_,
      Treasure_SC_UpdateEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Treasure_SC_UpdateEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Treasure_SC_UpdateEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Treasure_SC_UpdateEvent));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_treasure_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Treasure_CS_Synthesis_descriptor_, &Treasure_CS_Synthesis::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Treasure_SC_Synthesis_descriptor_, &Treasure_SC_Synthesis::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Treasure_CS_UseTreasure_descriptor_, &Treasure_CS_UseTreasure::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Treasure_SC_UseTreasure_descriptor_, &Treasure_SC_UseTreasure::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Treasure_SC_UpdateEvent_descriptor_, &Treasure_SC_UpdateEvent::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_treasure_2eproto() {
  delete Treasure_CS_Synthesis::default_instance_;
  delete Treasure_CS_Synthesis_reflection_;
  delete Treasure_SC_Synthesis::default_instance_;
  delete Treasure_SC_Synthesis_reflection_;
  delete Treasure_CS_UseTreasure::default_instance_;
  delete Treasure_CS_UseTreasure_reflection_;
  delete Treasure_SC_UseTreasure::default_instance_;
  delete Treasure_SC_UseTreasure_reflection_;
  delete Treasure_SC_UpdateEvent::default_instance_;
  delete Treasure_SC_UpdateEvent_reflection_;
}

void protobuf_AddDesc_treasure_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016treasure.proto\022\rproto.message\"0\n\025Treas"
    "ure_CS_Synthesis\022\027\n\017treasure_map_id\030\001 \001("
    "\005\"U\n\025Treasure_SC_Synthesis\022\016\n\006result\030\001 \001"
    "(\005\022\027\n\017treasure_map_id\030\002 \001(\005\022\023\n\013treasure_"
    "id\030\003 \001(\005\"\'\n\027Treasure_CS_UseTreasure\022\014\n\004u"
    "uid\030\001 \001(\004\"7\n\027Treasure_SC_UseTreasure\022\016\n\006"
    "result\030\001 \001(\005\022\014\n\004uuid\030\002 \001(\004\"=\n\027Treasure_S"
    "C_UpdateEvent\022\022\n\nevent_type\030\001 \001(\005\022\016\n\006res"
    "ult\030\002 \001(\005B\017\n\rproto.message", 346);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "treasure.proto", &protobuf_RegisterTypes);
  Treasure_CS_Synthesis::default_instance_ = new Treasure_CS_Synthesis();
  Treasure_SC_Synthesis::default_instance_ = new Treasure_SC_Synthesis();
  Treasure_CS_UseTreasure::default_instance_ = new Treasure_CS_UseTreasure();
  Treasure_SC_UseTreasure::default_instance_ = new Treasure_SC_UseTreasure();
  Treasure_SC_UpdateEvent::default_instance_ = new Treasure_SC_UpdateEvent();
  Treasure_CS_Synthesis::default_instance_->InitAsDefaultInstance();
  Treasure_SC_Synthesis::default_instance_->InitAsDefaultInstance();
  Treasure_CS_UseTreasure::default_instance_->InitAsDefaultInstance();
  Treasure_SC_UseTreasure::default_instance_->InitAsDefaultInstance();
  Treasure_SC_UpdateEvent::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_treasure_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_treasure_2eproto {
  StaticDescriptorInitializer_treasure_2eproto() {
    protobuf_AddDesc_treasure_2eproto();
  }
} static_descriptor_initializer_treasure_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Treasure_CS_Synthesis::kTreasureMapIdFieldNumber;
#endif  // !_MSC_VER

Treasure_CS_Synthesis::Treasure_CS_Synthesis()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Treasure_CS_Synthesis::InitAsDefaultInstance() {
}

Treasure_CS_Synthesis::Treasure_CS_Synthesis(const Treasure_CS_Synthesis& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Treasure_CS_Synthesis::SharedCtor() {
  _cached_size_ = 0;
  treasure_map_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Treasure_CS_Synthesis::~Treasure_CS_Synthesis() {
  SharedDtor();
}

void Treasure_CS_Synthesis::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Treasure_CS_Synthesis::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Treasure_CS_Synthesis::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Treasure_CS_Synthesis_descriptor_;
}

const Treasure_CS_Synthesis& Treasure_CS_Synthesis::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_treasure_2eproto();
  return *default_instance_;
}

Treasure_CS_Synthesis* Treasure_CS_Synthesis::default_instance_ = NULL;

Treasure_CS_Synthesis* Treasure_CS_Synthesis::New() const {
  return new Treasure_CS_Synthesis;
}

void Treasure_CS_Synthesis::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    treasure_map_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Treasure_CS_Synthesis::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 treasure_map_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &treasure_map_id_)));
          set_has_treasure_map_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Treasure_CS_Synthesis::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 treasure_map_id = 1;
  if (has_treasure_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->treasure_map_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Treasure_CS_Synthesis::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 treasure_map_id = 1;
  if (has_treasure_map_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->treasure_map_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Treasure_CS_Synthesis::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 treasure_map_id = 1;
    if (has_treasure_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->treasure_map_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Treasure_CS_Synthesis::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Treasure_CS_Synthesis* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Treasure_CS_Synthesis*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Treasure_CS_Synthesis::MergeFrom(const Treasure_CS_Synthesis& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_treasure_map_id()) {
      set_treasure_map_id(from.treasure_map_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Treasure_CS_Synthesis::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Treasure_CS_Synthesis::CopyFrom(const Treasure_CS_Synthesis& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Treasure_CS_Synthesis::IsInitialized() const {

  return true;
}

void Treasure_CS_Synthesis::Swap(Treasure_CS_Synthesis* other) {
  if (other != this) {
    std::swap(treasure_map_id_, other->treasure_map_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Treasure_CS_Synthesis::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Treasure_CS_Synthesis_descriptor_;
  metadata.reflection = Treasure_CS_Synthesis_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Treasure_SC_Synthesis::kResultFieldNumber;
const int Treasure_SC_Synthesis::kTreasureMapIdFieldNumber;
const int Treasure_SC_Synthesis::kTreasureIdFieldNumber;
#endif  // !_MSC_VER

Treasure_SC_Synthesis::Treasure_SC_Synthesis()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Treasure_SC_Synthesis::InitAsDefaultInstance() {
}

Treasure_SC_Synthesis::Treasure_SC_Synthesis(const Treasure_SC_Synthesis& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Treasure_SC_Synthesis::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  treasure_map_id_ = 0;
  treasure_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Treasure_SC_Synthesis::~Treasure_SC_Synthesis() {
  SharedDtor();
}

void Treasure_SC_Synthesis::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Treasure_SC_Synthesis::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Treasure_SC_Synthesis::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Treasure_SC_Synthesis_descriptor_;
}

const Treasure_SC_Synthesis& Treasure_SC_Synthesis::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_treasure_2eproto();
  return *default_instance_;
}

Treasure_SC_Synthesis* Treasure_SC_Synthesis::default_instance_ = NULL;

Treasure_SC_Synthesis* Treasure_SC_Synthesis::New() const {
  return new Treasure_SC_Synthesis;
}

void Treasure_SC_Synthesis::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    treasure_map_id_ = 0;
    treasure_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Treasure_SC_Synthesis::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_treasure_map_id;
        break;
      }

      // optional int32 treasure_map_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_treasure_map_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &treasure_map_id_)));
          set_has_treasure_map_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_treasure_id;
        break;
      }

      // optional int32 treasure_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_treasure_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &treasure_id_)));
          set_has_treasure_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Treasure_SC_Synthesis::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 treasure_map_id = 2;
  if (has_treasure_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->treasure_map_id(), output);
  }

  // optional int32 treasure_id = 3;
  if (has_treasure_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->treasure_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Treasure_SC_Synthesis::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 treasure_map_id = 2;
  if (has_treasure_map_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->treasure_map_id(), target);
  }

  // optional int32 treasure_id = 3;
  if (has_treasure_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->treasure_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Treasure_SC_Synthesis::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 treasure_map_id = 2;
    if (has_treasure_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->treasure_map_id());
    }

    // optional int32 treasure_id = 3;
    if (has_treasure_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->treasure_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Treasure_SC_Synthesis::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Treasure_SC_Synthesis* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Treasure_SC_Synthesis*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Treasure_SC_Synthesis::MergeFrom(const Treasure_SC_Synthesis& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_treasure_map_id()) {
      set_treasure_map_id(from.treasure_map_id());
    }
    if (from.has_treasure_id()) {
      set_treasure_id(from.treasure_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Treasure_SC_Synthesis::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Treasure_SC_Synthesis::CopyFrom(const Treasure_SC_Synthesis& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Treasure_SC_Synthesis::IsInitialized() const {

  return true;
}

void Treasure_SC_Synthesis::Swap(Treasure_SC_Synthesis* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(treasure_map_id_, other->treasure_map_id_);
    std::swap(treasure_id_, other->treasure_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Treasure_SC_Synthesis::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Treasure_SC_Synthesis_descriptor_;
  metadata.reflection = Treasure_SC_Synthesis_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Treasure_CS_UseTreasure::kUuidFieldNumber;
#endif  // !_MSC_VER

Treasure_CS_UseTreasure::Treasure_CS_UseTreasure()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Treasure_CS_UseTreasure::InitAsDefaultInstance() {
}

Treasure_CS_UseTreasure::Treasure_CS_UseTreasure(const Treasure_CS_UseTreasure& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Treasure_CS_UseTreasure::SharedCtor() {
  _cached_size_ = 0;
  uuid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Treasure_CS_UseTreasure::~Treasure_CS_UseTreasure() {
  SharedDtor();
}

void Treasure_CS_UseTreasure::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Treasure_CS_UseTreasure::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Treasure_CS_UseTreasure::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Treasure_CS_UseTreasure_descriptor_;
}

const Treasure_CS_UseTreasure& Treasure_CS_UseTreasure::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_treasure_2eproto();
  return *default_instance_;
}

Treasure_CS_UseTreasure* Treasure_CS_UseTreasure::default_instance_ = NULL;

Treasure_CS_UseTreasure* Treasure_CS_UseTreasure::New() const {
  return new Treasure_CS_UseTreasure;
}

void Treasure_CS_UseTreasure::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uuid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Treasure_CS_UseTreasure::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Treasure_CS_UseTreasure::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Treasure_CS_UseTreasure::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 uuid = 1;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Treasure_CS_UseTreasure::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 uuid = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Treasure_CS_UseTreasure::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Treasure_CS_UseTreasure* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Treasure_CS_UseTreasure*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Treasure_CS_UseTreasure::MergeFrom(const Treasure_CS_UseTreasure& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Treasure_CS_UseTreasure::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Treasure_CS_UseTreasure::CopyFrom(const Treasure_CS_UseTreasure& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Treasure_CS_UseTreasure::IsInitialized() const {

  return true;
}

void Treasure_CS_UseTreasure::Swap(Treasure_CS_UseTreasure* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Treasure_CS_UseTreasure::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Treasure_CS_UseTreasure_descriptor_;
  metadata.reflection = Treasure_CS_UseTreasure_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Treasure_SC_UseTreasure::kResultFieldNumber;
const int Treasure_SC_UseTreasure::kUuidFieldNumber;
#endif  // !_MSC_VER

Treasure_SC_UseTreasure::Treasure_SC_UseTreasure()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Treasure_SC_UseTreasure::InitAsDefaultInstance() {
}

Treasure_SC_UseTreasure::Treasure_SC_UseTreasure(const Treasure_SC_UseTreasure& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Treasure_SC_UseTreasure::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  uuid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Treasure_SC_UseTreasure::~Treasure_SC_UseTreasure() {
  SharedDtor();
}

void Treasure_SC_UseTreasure::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Treasure_SC_UseTreasure::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Treasure_SC_UseTreasure::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Treasure_SC_UseTreasure_descriptor_;
}

const Treasure_SC_UseTreasure& Treasure_SC_UseTreasure::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_treasure_2eproto();
  return *default_instance_;
}

Treasure_SC_UseTreasure* Treasure_SC_UseTreasure::default_instance_ = NULL;

Treasure_SC_UseTreasure* Treasure_SC_UseTreasure::New() const {
  return new Treasure_SC_UseTreasure;
}

void Treasure_SC_UseTreasure::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    uuid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Treasure_SC_UseTreasure::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uuid;
        break;
      }

      // optional uint64 uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Treasure_SC_UseTreasure::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Treasure_SC_UseTreasure::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Treasure_SC_UseTreasure::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional uint64 uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Treasure_SC_UseTreasure::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Treasure_SC_UseTreasure* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Treasure_SC_UseTreasure*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Treasure_SC_UseTreasure::MergeFrom(const Treasure_SC_UseTreasure& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Treasure_SC_UseTreasure::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Treasure_SC_UseTreasure::CopyFrom(const Treasure_SC_UseTreasure& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Treasure_SC_UseTreasure::IsInitialized() const {

  return true;
}

void Treasure_SC_UseTreasure::Swap(Treasure_SC_UseTreasure* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(uuid_, other->uuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Treasure_SC_UseTreasure::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Treasure_SC_UseTreasure_descriptor_;
  metadata.reflection = Treasure_SC_UseTreasure_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Treasure_SC_UpdateEvent::kEventTypeFieldNumber;
const int Treasure_SC_UpdateEvent::kResultFieldNumber;
#endif  // !_MSC_VER

Treasure_SC_UpdateEvent::Treasure_SC_UpdateEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Treasure_SC_UpdateEvent::InitAsDefaultInstance() {
}

Treasure_SC_UpdateEvent::Treasure_SC_UpdateEvent(const Treasure_SC_UpdateEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Treasure_SC_UpdateEvent::SharedCtor() {
  _cached_size_ = 0;
  event_type_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Treasure_SC_UpdateEvent::~Treasure_SC_UpdateEvent() {
  SharedDtor();
}

void Treasure_SC_UpdateEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Treasure_SC_UpdateEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Treasure_SC_UpdateEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Treasure_SC_UpdateEvent_descriptor_;
}

const Treasure_SC_UpdateEvent& Treasure_SC_UpdateEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_treasure_2eproto();
  return *default_instance_;
}

Treasure_SC_UpdateEvent* Treasure_SC_UpdateEvent::default_instance_ = NULL;

Treasure_SC_UpdateEvent* Treasure_SC_UpdateEvent::New() const {
  return new Treasure_SC_UpdateEvent;
}

void Treasure_SC_UpdateEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    event_type_ = 0;
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Treasure_SC_UpdateEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 event_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_type_)));
          set_has_event_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Treasure_SC_UpdateEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 event_type = 1;
  if (has_event_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->event_type(), output);
  }

  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Treasure_SC_UpdateEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 event_type = 1;
  if (has_event_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->event_type(), target);
  }

  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Treasure_SC_UpdateEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 event_type = 1;
    if (has_event_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->event_type());
    }

    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Treasure_SC_UpdateEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Treasure_SC_UpdateEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Treasure_SC_UpdateEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Treasure_SC_UpdateEvent::MergeFrom(const Treasure_SC_UpdateEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_type()) {
      set_event_type(from.event_type());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Treasure_SC_UpdateEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Treasure_SC_UpdateEvent::CopyFrom(const Treasure_SC_UpdateEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Treasure_SC_UpdateEvent::IsInitialized() const {

  return true;
}

void Treasure_SC_UpdateEvent::Swap(Treasure_SC_UpdateEvent* other) {
  if (other != this) {
    std::swap(event_type_, other->event_type_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Treasure_SC_UpdateEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Treasure_SC_UpdateEvent_descriptor_;
  metadata.reflection = Treasure_SC_UpdateEvent_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace proto

// @@protoc_insertion_point(global_scope)
