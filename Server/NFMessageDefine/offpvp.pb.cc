// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: offpvp.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "offpvp.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace message {

namespace {

const ::google::protobuf::Descriptor* OffPVPRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OffPVPRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* FighterInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FighterInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* OffPVP_CS_GetSelfData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OffPVP_CS_GetSelfData_reflection_ = NULL;
const ::google::protobuf::Descriptor* OffPVP_SC_GetSelfData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OffPVP_SC_GetSelfData_reflection_ = NULL;
const ::google::protobuf::Descriptor* OffPVP_CS_GetOtherData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OffPVP_CS_GetOtherData_reflection_ = NULL;
const ::google::protobuf::Descriptor* OffPVP_CS_ChangeFighter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OffPVP_CS_ChangeFighter_reflection_ = NULL;
const ::google::protobuf::Descriptor* OffPVP_SC_GetOtherData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OffPVP_SC_GetOtherData_reflection_ = NULL;
const ::google::protobuf::Descriptor* OffPVP_CS_Fight_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OffPVP_CS_Fight_reflection_ = NULL;
const ::google::protobuf::Descriptor* OffPVP_SC_FightResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OffPVP_SC_FightResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* OffPVP_CS_BuyCounts_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OffPVP_CS_BuyCounts_reflection_ = NULL;
const ::google::protobuf::Descriptor* OffPVP_SC_BuyCountsResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OffPVP_SC_BuyCountsResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* OffPVP_CS_GetReword_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OffPVP_CS_GetReword_reflection_ = NULL;
const ::google::protobuf::Descriptor* OffPVP_SC_GetRewordResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OffPVP_SC_GetRewordResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* OffPVP_SC_UpdateCounts_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OffPVP_SC_UpdateCounts_reflection_ = NULL;
const ::google::protobuf::Descriptor* OffPVP_CS_GetPVPRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OffPVP_CS_GetPVPRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* OffPVP_SC_GetPVPRecordResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OffPVP_SC_GetPVPRecordResult_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_offpvp_2eproto() {
  protobuf_AddDesc_offpvp_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "offpvp.proto");
  GOOGLE_CHECK(file != NULL);
  OffPVPRecord_descriptor_ = file->message_type(0);
  static const int OffPVPRecord_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OffPVPRecord, fighter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OffPVPRecord, fitname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OffPVPRecord, foldranking_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OffPVPRecord, fnewranking_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OffPVPRecord, behiter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OffPVPRecord, bitname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OffPVPRecord, boldranking_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OffPVPRecord, bnewranking_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OffPVPRecord, recordtime_),
  };
  OffPVPRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OffPVPRecord_descriptor_,
      OffPVPRecord::default_instance_,
      OffPVPRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OffPVPRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OffPVPRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OffPVPRecord));
  FighterInfo_descriptor_ = file->message_type(1);
  static const int FighterInfo_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FighterInfo, ranking_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FighterInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FighterInfo, fightvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FighterInfo, equipid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FighterInfo, playername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FighterInfo, skinid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FighterInfo, career_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FighterInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FighterInfo, suit_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FighterInfo, weaponskinid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FighterInfo, dhlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FighterInfo, playerskill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FighterInfo, playeratt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FighterInfo, petid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FighterInfo, playerid_),
  };
  FighterInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FighterInfo_descriptor_,
      FighterInfo::default_instance_,
      FighterInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FighterInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FighterInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FighterInfo));
  OffPVP_CS_GetSelfData_descriptor_ = file->message_type(2);
  static const int OffPVP_CS_GetSelfData_offsets_[1] = {
  };
  OffPVP_CS_GetSelfData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OffPVP_CS_GetSelfData_descriptor_,
      OffPVP_CS_GetSelfData::default_instance_,
      OffPVP_CS_GetSelfData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OffPVP_CS_GetSelfData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OffPVP_CS_GetSelfData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OffPVP_CS_GetSelfData));
  OffPVP_SC_GetSelfData_descriptor_ = file->message_type(3);
  static const int OffPVP_SC_GetSelfData_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OffPVP_SC_GetSelfData, fightcounts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OffPVP_SC_GetSelfData, rewordtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OffPVP_SC_GetSelfData, ranking_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OffPVP_SC_GetSelfData, officeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OffPVP_SC_GetSelfData, showoffid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OffPVP_SC_GetSelfData, infolist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OffPVP_SC_GetSelfData, rewordid_),
  };
  OffPVP_SC_GetSelfData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OffPVP_SC_GetSelfData_descriptor_,
      OffPVP_SC_GetSelfData::default_instance_,
      OffPVP_SC_GetSelfData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OffPVP_SC_GetSelfData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OffPVP_SC_GetSelfData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OffPVP_SC_GetSelfData));
  OffPVP_CS_GetOtherData_descriptor_ = file->message_type(4);
  static const int OffPVP_CS_GetOtherData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OffPVP_CS_GetOtherData, officeid_),
  };
  OffPVP_CS_GetOtherData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OffPVP_CS_GetOtherData_descriptor_,
      OffPVP_CS_GetOtherData::default_instance_,
      OffPVP_CS_GetOtherData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OffPVP_CS_GetOtherData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OffPVP_CS_GetOtherData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OffPVP_CS_GetOtherData));
  OffPVP_CS_ChangeFighter_descriptor_ = file->message_type(5);
  static const int OffPVP_CS_ChangeFighter_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OffPVP_CS_ChangeFighter, officeid_),
  };
  OffPVP_CS_ChangeFighter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OffPVP_CS_ChangeFighter_descriptor_,
      OffPVP_CS_ChangeFighter::default_instance_,
      OffPVP_CS_ChangeFighter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OffPVP_CS_ChangeFighter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OffPVP_CS_ChangeFighter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OffPVP_CS_ChangeFighter));
  OffPVP_SC_GetOtherData_descriptor_ = file->message_type(6);
  static const int OffPVP_SC_GetOtherData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OffPVP_SC_GetOtherData, officeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OffPVP_SC_GetOtherData, infolist_),
  };
  OffPVP_SC_GetOtherData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OffPVP_SC_GetOtherData_descriptor_,
      OffPVP_SC_GetOtherData::default_instance_,
      OffPVP_SC_GetOtherData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OffPVP_SC_GetOtherData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OffPVP_SC_GetOtherData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OffPVP_SC_GetOtherData));
  OffPVP_CS_Fight_descriptor_ = file->message_type(7);
  static const int OffPVP_CS_Fight_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OffPVP_CS_Fight, ranking_),
  };
  OffPVP_CS_Fight_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OffPVP_CS_Fight_descriptor_,
      OffPVP_CS_Fight::default_instance_,
      OffPVP_CS_Fight_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OffPVP_CS_Fight, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OffPVP_CS_Fight, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OffPVP_CS_Fight));
  OffPVP_SC_FightResult_descriptor_ = file->message_type(8);
  static const int OffPVP_SC_FightResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OffPVP_SC_FightResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OffPVP_SC_FightResult, errorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OffPVP_SC_FightResult, data_),
  };
  OffPVP_SC_FightResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OffPVP_SC_FightResult_descriptor_,
      OffPVP_SC_FightResult::default_instance_,
      OffPVP_SC_FightResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OffPVP_SC_FightResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OffPVP_SC_FightResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OffPVP_SC_FightResult));
  OffPVP_CS_BuyCounts_descriptor_ = file->message_type(9);
  static const int OffPVP_CS_BuyCounts_offsets_[1] = {
  };
  OffPVP_CS_BuyCounts_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OffPVP_CS_BuyCounts_descriptor_,
      OffPVP_CS_BuyCounts::default_instance_,
      OffPVP_CS_BuyCounts_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OffPVP_CS_BuyCounts, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OffPVP_CS_BuyCounts, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OffPVP_CS_BuyCounts));
  OffPVP_SC_BuyCountsResult_descriptor_ = file->message_type(10);
  static const int OffPVP_SC_BuyCountsResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OffPVP_SC_BuyCountsResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OffPVP_SC_BuyCountsResult, counts_),
  };
  OffPVP_SC_BuyCountsResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OffPVP_SC_BuyCountsResult_descriptor_,
      OffPVP_SC_BuyCountsResult::default_instance_,
      OffPVP_SC_BuyCountsResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OffPVP_SC_BuyCountsResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OffPVP_SC_BuyCountsResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OffPVP_SC_BuyCountsResult));
  OffPVP_CS_GetReword_descriptor_ = file->message_type(11);
  static const int OffPVP_CS_GetReword_offsets_[1] = {
  };
  OffPVP_CS_GetReword_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OffPVP_CS_GetReword_descriptor_,
      OffPVP_CS_GetReword::default_instance_,
      OffPVP_CS_GetReword_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OffPVP_CS_GetReword, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OffPVP_CS_GetReword, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OffPVP_CS_GetReword));
  OffPVP_SC_GetRewordResult_descriptor_ = file->message_type(12);
  static const int OffPVP_SC_GetRewordResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OffPVP_SC_GetRewordResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OffPVP_SC_GetRewordResult, nexttime_),
  };
  OffPVP_SC_GetRewordResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OffPVP_SC_GetRewordResult_descriptor_,
      OffPVP_SC_GetRewordResult::default_instance_,
      OffPVP_SC_GetRewordResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OffPVP_SC_GetRewordResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OffPVP_SC_GetRewordResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OffPVP_SC_GetRewordResult));
  OffPVP_SC_UpdateCounts_descriptor_ = file->message_type(13);
  static const int OffPVP_SC_UpdateCounts_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OffPVP_SC_UpdateCounts, newcounts_),
  };
  OffPVP_SC_UpdateCounts_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OffPVP_SC_UpdateCounts_descriptor_,
      OffPVP_SC_UpdateCounts::default_instance_,
      OffPVP_SC_UpdateCounts_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OffPVP_SC_UpdateCounts, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OffPVP_SC_UpdateCounts, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OffPVP_SC_UpdateCounts));
  OffPVP_CS_GetPVPRecord_descriptor_ = file->message_type(14);
  static const int OffPVP_CS_GetPVPRecord_offsets_[1] = {
  };
  OffPVP_CS_GetPVPRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OffPVP_CS_GetPVPRecord_descriptor_,
      OffPVP_CS_GetPVPRecord::default_instance_,
      OffPVP_CS_GetPVPRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OffPVP_CS_GetPVPRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OffPVP_CS_GetPVPRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OffPVP_CS_GetPVPRecord));
  OffPVP_SC_GetPVPRecordResult_descriptor_ = file->message_type(15);
  static const int OffPVP_SC_GetPVPRecordResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OffPVP_SC_GetPVPRecordResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OffPVP_SC_GetPVPRecordResult, datalist_),
  };
  OffPVP_SC_GetPVPRecordResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OffPVP_SC_GetPVPRecordResult_descriptor_,
      OffPVP_SC_GetPVPRecordResult::default_instance_,
      OffPVP_SC_GetPVPRecordResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OffPVP_SC_GetPVPRecordResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OffPVP_SC_GetPVPRecordResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OffPVP_SC_GetPVPRecordResult));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_offpvp_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OffPVPRecord_descriptor_, &OffPVPRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FighterInfo_descriptor_, &FighterInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OffPVP_CS_GetSelfData_descriptor_, &OffPVP_CS_GetSelfData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OffPVP_SC_GetSelfData_descriptor_, &OffPVP_SC_GetSelfData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OffPVP_CS_GetOtherData_descriptor_, &OffPVP_CS_GetOtherData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OffPVP_CS_ChangeFighter_descriptor_, &OffPVP_CS_ChangeFighter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OffPVP_SC_GetOtherData_descriptor_, &OffPVP_SC_GetOtherData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OffPVP_CS_Fight_descriptor_, &OffPVP_CS_Fight::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OffPVP_SC_FightResult_descriptor_, &OffPVP_SC_FightResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OffPVP_CS_BuyCounts_descriptor_, &OffPVP_CS_BuyCounts::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OffPVP_SC_BuyCountsResult_descriptor_, &OffPVP_SC_BuyCountsResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OffPVP_CS_GetReword_descriptor_, &OffPVP_CS_GetReword::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OffPVP_SC_GetRewordResult_descriptor_, &OffPVP_SC_GetRewordResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OffPVP_SC_UpdateCounts_descriptor_, &OffPVP_SC_UpdateCounts::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OffPVP_CS_GetPVPRecord_descriptor_, &OffPVP_CS_GetPVPRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OffPVP_SC_GetPVPRecordResult_descriptor_, &OffPVP_SC_GetPVPRecordResult::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_offpvp_2eproto() {
  delete OffPVPRecord::default_instance_;
  delete OffPVPRecord_reflection_;
  delete FighterInfo::default_instance_;
  delete FighterInfo_reflection_;
  delete OffPVP_CS_GetSelfData::default_instance_;
  delete OffPVP_CS_GetSelfData_reflection_;
  delete OffPVP_SC_GetSelfData::default_instance_;
  delete OffPVP_SC_GetSelfData_reflection_;
  delete OffPVP_CS_GetOtherData::default_instance_;
  delete OffPVP_CS_GetOtherData_reflection_;
  delete OffPVP_CS_ChangeFighter::default_instance_;
  delete OffPVP_CS_ChangeFighter_reflection_;
  delete OffPVP_SC_GetOtherData::default_instance_;
  delete OffPVP_SC_GetOtherData_reflection_;
  delete OffPVP_CS_Fight::default_instance_;
  delete OffPVP_CS_Fight_reflection_;
  delete OffPVP_SC_FightResult::default_instance_;
  delete OffPVP_SC_FightResult_reflection_;
  delete OffPVP_CS_BuyCounts::default_instance_;
  delete OffPVP_CS_BuyCounts_reflection_;
  delete OffPVP_SC_BuyCountsResult::default_instance_;
  delete OffPVP_SC_BuyCountsResult_reflection_;
  delete OffPVP_CS_GetReword::default_instance_;
  delete OffPVP_CS_GetReword_reflection_;
  delete OffPVP_SC_GetRewordResult::default_instance_;
  delete OffPVP_SC_GetRewordResult_reflection_;
  delete OffPVP_SC_UpdateCounts::default_instance_;
  delete OffPVP_SC_UpdateCounts_reflection_;
  delete OffPVP_CS_GetPVPRecord::default_instance_;
  delete OffPVP_CS_GetPVPRecord_reflection_;
  delete OffPVP_SC_GetPVPRecordResult::default_instance_;
  delete OffPVP_SC_GetPVPRecordResult_reflection_;
}

void protobuf_AddDesc_offpvp_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::proto::message::protobuf_AddDesc_common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014offpvp.proto\022\rproto.message\032\014common.pr"
    "oto\"\272\001\n\014OffPVPRecord\022\017\n\007fighter\030\001 \001(\004\022\017\n"
    "\007fitname\030\002 \001(\t\022\023\n\013foldranking\030\003 \001(\r\022\023\n\013f"
    "newranking\030\004 \001(\r\022\017\n\007behiter\030\005 \001(\004\022\017\n\007bit"
    "name\030\006 \001(\t\022\023\n\013boldranking\030\007 \001(\r\022\023\n\013bnewr"
    "anking\030\010 \001(\r\022\022\n\nrecordtime\030\t \001(\004\"\262\002\n\013Fig"
    "hterInfo\022\017\n\007ranking\030\001 \001(\005\022\014\n\004type\030\002 \001(\005\022"
    "\022\n\nfightvalue\030\003 \001(\005\022\017\n\007equipid\030\005 \003(\005\022\022\n\n"
    "playername\030\006 \001(\t\022\016\n\006skinid\030\007 \001(\005\022\016\n\006care"
    "er\030\010 \001(\005\022\r\n\005level\030\t \001(\r\022\017\n\007suit_id\030\n \001(\r"
    "\022\024\n\014weaponskinid\030\013 \001(\005\022\017\n\007dhlevel\030\014 \001(\r\022"
    "\023\n\013playerskill\030\r \003(\r\022.\n\tplayeratt\030\016 \001(\0132"
    "\033.proto.message.PlayerEffect\022\r\n\005petid\030\017 "
    "\001(\005\022\020\n\010playerid\030\020 \001(\004\"\027\n\025OffPVP_CS_GetSe"
    "lfData\"\266\001\n\025OffPVP_SC_GetSelfData\022\023\n\013figh"
    "tcounts\030\001 \001(\005\022\022\n\nrewordtime\030\002 \001(\004\022\017\n\007ran"
    "king\030\003 \001(\005\022\020\n\010officeid\030\004 \001(\005\022\021\n\tshowoffi"
    "d\030\005 \001(\r\022,\n\010infolist\030\006 \003(\0132\032.proto.messag"
    "e.FighterInfo\022\020\n\010rewordid\030\007 \001(\r\"*\n\026OffPV"
    "P_CS_GetOtherData\022\020\n\010officeid\030\001 \001(\005\"+\n\027O"
    "ffPVP_CS_ChangeFighter\022\020\n\010officeid\030\001 \001(\005"
    "\"X\n\026OffPVP_SC_GetOtherData\022\020\n\010officeid\030\001"
    " \001(\005\022,\n\010infolist\030\002 \003(\0132\032.proto.message.F"
    "ighterInfo\"\"\n\017OffPVP_CS_Fight\022\017\n\007ranking"
    "\030\001 \001(\005\"j\n\025OffPVP_SC_FightResult\022\016\n\006resul"
    "t\030\001 \001(\005\022\021\n\terrorcode\030\002 \001(\005\022.\n\004data\030\003 \001(\013"
    "2 .proto.message.OfflineDataDetail\"\025\n\023Of"
    "fPVP_CS_BuyCounts\";\n\031OffPVP_SC_BuyCounts"
    "Result\022\016\n\006result\030\001 \001(\005\022\016\n\006counts\030\002 \001(\005\"\025"
    "\n\023OffPVP_CS_GetReword\"=\n\031OffPVP_SC_GetRe"
    "wordResult\022\016\n\006result\030\001 \001(\005\022\020\n\010nexttime\030\002"
    " \001(\003\"+\n\026OffPVP_SC_UpdateCounts\022\021\n\tnewcou"
    "nts\030\001 \001(\005\"\030\n\026OffPVP_CS_GetPVPRecord\"]\n\034O"
    "ffPVP_SC_GetPVPRecordResult\022\016\n\006result\030\001 "
    "\001(\005\022-\n\010datalist\030\002 \003(\0132\033.proto.message.Of"
    "fPVPRecordB\017\n\rproto.message", 1427);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "offpvp.proto", &protobuf_RegisterTypes);
  OffPVPRecord::default_instance_ = new OffPVPRecord();
  FighterInfo::default_instance_ = new FighterInfo();
  OffPVP_CS_GetSelfData::default_instance_ = new OffPVP_CS_GetSelfData();
  OffPVP_SC_GetSelfData::default_instance_ = new OffPVP_SC_GetSelfData();
  OffPVP_CS_GetOtherData::default_instance_ = new OffPVP_CS_GetOtherData();
  OffPVP_CS_ChangeFighter::default_instance_ = new OffPVP_CS_ChangeFighter();
  OffPVP_SC_GetOtherData::default_instance_ = new OffPVP_SC_GetOtherData();
  OffPVP_CS_Fight::default_instance_ = new OffPVP_CS_Fight();
  OffPVP_SC_FightResult::default_instance_ = new OffPVP_SC_FightResult();
  OffPVP_CS_BuyCounts::default_instance_ = new OffPVP_CS_BuyCounts();
  OffPVP_SC_BuyCountsResult::default_instance_ = new OffPVP_SC_BuyCountsResult();
  OffPVP_CS_GetReword::default_instance_ = new OffPVP_CS_GetReword();
  OffPVP_SC_GetRewordResult::default_instance_ = new OffPVP_SC_GetRewordResult();
  OffPVP_SC_UpdateCounts::default_instance_ = new OffPVP_SC_UpdateCounts();
  OffPVP_CS_GetPVPRecord::default_instance_ = new OffPVP_CS_GetPVPRecord();
  OffPVP_SC_GetPVPRecordResult::default_instance_ = new OffPVP_SC_GetPVPRecordResult();
  OffPVPRecord::default_instance_->InitAsDefaultInstance();
  FighterInfo::default_instance_->InitAsDefaultInstance();
  OffPVP_CS_GetSelfData::default_instance_->InitAsDefaultInstance();
  OffPVP_SC_GetSelfData::default_instance_->InitAsDefaultInstance();
  OffPVP_CS_GetOtherData::default_instance_->InitAsDefaultInstance();
  OffPVP_CS_ChangeFighter::default_instance_->InitAsDefaultInstance();
  OffPVP_SC_GetOtherData::default_instance_->InitAsDefaultInstance();
  OffPVP_CS_Fight::default_instance_->InitAsDefaultInstance();
  OffPVP_SC_FightResult::default_instance_->InitAsDefaultInstance();
  OffPVP_CS_BuyCounts::default_instance_->InitAsDefaultInstance();
  OffPVP_SC_BuyCountsResult::default_instance_->InitAsDefaultInstance();
  OffPVP_CS_GetReword::default_instance_->InitAsDefaultInstance();
  OffPVP_SC_GetRewordResult::default_instance_->InitAsDefaultInstance();
  OffPVP_SC_UpdateCounts::default_instance_->InitAsDefaultInstance();
  OffPVP_CS_GetPVPRecord::default_instance_->InitAsDefaultInstance();
  OffPVP_SC_GetPVPRecordResult::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_offpvp_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_offpvp_2eproto {
  StaticDescriptorInitializer_offpvp_2eproto() {
    protobuf_AddDesc_offpvp_2eproto();
  }
} static_descriptor_initializer_offpvp_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int OffPVPRecord::kFighterFieldNumber;
const int OffPVPRecord::kFitnameFieldNumber;
const int OffPVPRecord::kFoldrankingFieldNumber;
const int OffPVPRecord::kFnewrankingFieldNumber;
const int OffPVPRecord::kBehiterFieldNumber;
const int OffPVPRecord::kBitnameFieldNumber;
const int OffPVPRecord::kBoldrankingFieldNumber;
const int OffPVPRecord::kBnewrankingFieldNumber;
const int OffPVPRecord::kRecordtimeFieldNumber;
#endif  // !_MSC_VER

OffPVPRecord::OffPVPRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OffPVPRecord::InitAsDefaultInstance() {
}

OffPVPRecord::OffPVPRecord(const OffPVPRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OffPVPRecord::SharedCtor() {
  _cached_size_ = 0;
  fighter_ = GOOGLE_ULONGLONG(0);
  fitname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  foldranking_ = 0u;
  fnewranking_ = 0u;
  behiter_ = GOOGLE_ULONGLONG(0);
  bitname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  boldranking_ = 0u;
  bnewranking_ = 0u;
  recordtime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OffPVPRecord::~OffPVPRecord() {
  SharedDtor();
}

void OffPVPRecord::SharedDtor() {
  if (fitname_ != &::google::protobuf::internal::kEmptyString) {
    delete fitname_;
  }
  if (bitname_ != &::google::protobuf::internal::kEmptyString) {
    delete bitname_;
  }
  if (this != default_instance_) {
  }
}

void OffPVPRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OffPVPRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OffPVPRecord_descriptor_;
}

const OffPVPRecord& OffPVPRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_offpvp_2eproto();
  return *default_instance_;
}

OffPVPRecord* OffPVPRecord::default_instance_ = NULL;

OffPVPRecord* OffPVPRecord::New() const {
  return new OffPVPRecord;
}

void OffPVPRecord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fighter_ = GOOGLE_ULONGLONG(0);
    if (has_fitname()) {
      if (fitname_ != &::google::protobuf::internal::kEmptyString) {
        fitname_->clear();
      }
    }
    foldranking_ = 0u;
    fnewranking_ = 0u;
    behiter_ = GOOGLE_ULONGLONG(0);
    if (has_bitname()) {
      if (bitname_ != &::google::protobuf::internal::kEmptyString) {
        bitname_->clear();
      }
    }
    boldranking_ = 0u;
    bnewranking_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    recordtime_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OffPVPRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 fighter = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fighter_)));
          set_has_fighter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_fitname;
        break;
      }

      // optional string fitname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fitname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fitname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fitname().data(), this->fitname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_foldranking;
        break;
      }

      // optional uint32 foldranking = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_foldranking:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &foldranking_)));
          set_has_foldranking();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_fnewranking;
        break;
      }

      // optional uint32 fnewranking = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fnewranking:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fnewranking_)));
          set_has_fnewranking();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_behiter;
        break;
      }

      // optional uint64 behiter = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_behiter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &behiter_)));
          set_has_behiter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_bitname;
        break;
      }

      // optional string bitname = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bitname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bitname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bitname().data(), this->bitname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_boldranking;
        break;
      }

      // optional uint32 boldranking = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boldranking:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &boldranking_)));
          set_has_boldranking();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_bnewranking;
        break;
      }

      // optional uint32 bnewranking = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bnewranking:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bnewranking_)));
          set_has_bnewranking();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_recordtime;
        break;
      }

      // optional uint64 recordtime = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recordtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &recordtime_)));
          set_has_recordtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OffPVPRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 fighter = 1;
  if (has_fighter()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->fighter(), output);
  }

  // optional string fitname = 2;
  if (has_fitname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fitname().data(), this->fitname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->fitname(), output);
  }

  // optional uint32 foldranking = 3;
  if (has_foldranking()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->foldranking(), output);
  }

  // optional uint32 fnewranking = 4;
  if (has_fnewranking()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->fnewranking(), output);
  }

  // optional uint64 behiter = 5;
  if (has_behiter()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->behiter(), output);
  }

  // optional string bitname = 6;
  if (has_bitname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bitname().data(), this->bitname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->bitname(), output);
  }

  // optional uint32 boldranking = 7;
  if (has_boldranking()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->boldranking(), output);
  }

  // optional uint32 bnewranking = 8;
  if (has_bnewranking()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->bnewranking(), output);
  }

  // optional uint64 recordtime = 9;
  if (has_recordtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->recordtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OffPVPRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 fighter = 1;
  if (has_fighter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->fighter(), target);
  }

  // optional string fitname = 2;
  if (has_fitname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fitname().data(), this->fitname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->fitname(), target);
  }

  // optional uint32 foldranking = 3;
  if (has_foldranking()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->foldranking(), target);
  }

  // optional uint32 fnewranking = 4;
  if (has_fnewranking()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->fnewranking(), target);
  }

  // optional uint64 behiter = 5;
  if (has_behiter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->behiter(), target);
  }

  // optional string bitname = 6;
  if (has_bitname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bitname().data(), this->bitname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->bitname(), target);
  }

  // optional uint32 boldranking = 7;
  if (has_boldranking()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->boldranking(), target);
  }

  // optional uint32 bnewranking = 8;
  if (has_bnewranking()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->bnewranking(), target);
  }

  // optional uint64 recordtime = 9;
  if (has_recordtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->recordtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OffPVPRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 fighter = 1;
    if (has_fighter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fighter());
    }

    // optional string fitname = 2;
    if (has_fitname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fitname());
    }

    // optional uint32 foldranking = 3;
    if (has_foldranking()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->foldranking());
    }

    // optional uint32 fnewranking = 4;
    if (has_fnewranking()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fnewranking());
    }

    // optional uint64 behiter = 5;
    if (has_behiter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->behiter());
    }

    // optional string bitname = 6;
    if (has_bitname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bitname());
    }

    // optional uint32 boldranking = 7;
    if (has_boldranking()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->boldranking());
    }

    // optional uint32 bnewranking = 8;
    if (has_bnewranking()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bnewranking());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 recordtime = 9;
    if (has_recordtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->recordtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OffPVPRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OffPVPRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OffPVPRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OffPVPRecord::MergeFrom(const OffPVPRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fighter()) {
      set_fighter(from.fighter());
    }
    if (from.has_fitname()) {
      set_fitname(from.fitname());
    }
    if (from.has_foldranking()) {
      set_foldranking(from.foldranking());
    }
    if (from.has_fnewranking()) {
      set_fnewranking(from.fnewranking());
    }
    if (from.has_behiter()) {
      set_behiter(from.behiter());
    }
    if (from.has_bitname()) {
      set_bitname(from.bitname());
    }
    if (from.has_boldranking()) {
      set_boldranking(from.boldranking());
    }
    if (from.has_bnewranking()) {
      set_bnewranking(from.bnewranking());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_recordtime()) {
      set_recordtime(from.recordtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OffPVPRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OffPVPRecord::CopyFrom(const OffPVPRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OffPVPRecord::IsInitialized() const {

  return true;
}

void OffPVPRecord::Swap(OffPVPRecord* other) {
  if (other != this) {
    std::swap(fighter_, other->fighter_);
    std::swap(fitname_, other->fitname_);
    std::swap(foldranking_, other->foldranking_);
    std::swap(fnewranking_, other->fnewranking_);
    std::swap(behiter_, other->behiter_);
    std::swap(bitname_, other->bitname_);
    std::swap(boldranking_, other->boldranking_);
    std::swap(bnewranking_, other->bnewranking_);
    std::swap(recordtime_, other->recordtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OffPVPRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OffPVPRecord_descriptor_;
  metadata.reflection = OffPVPRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FighterInfo::kRankingFieldNumber;
const int FighterInfo::kTypeFieldNumber;
const int FighterInfo::kFightvalueFieldNumber;
const int FighterInfo::kEquipidFieldNumber;
const int FighterInfo::kPlayernameFieldNumber;
const int FighterInfo::kSkinidFieldNumber;
const int FighterInfo::kCareerFieldNumber;
const int FighterInfo::kLevelFieldNumber;
const int FighterInfo::kSuitIdFieldNumber;
const int FighterInfo::kWeaponskinidFieldNumber;
const int FighterInfo::kDhlevelFieldNumber;
const int FighterInfo::kPlayerskillFieldNumber;
const int FighterInfo::kPlayerattFieldNumber;
const int FighterInfo::kPetidFieldNumber;
const int FighterInfo::kPlayeridFieldNumber;
#endif  // !_MSC_VER

FighterInfo::FighterInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FighterInfo::InitAsDefaultInstance() {
  playeratt_ = const_cast< ::proto::message::PlayerEffect*>(&::proto::message::PlayerEffect::default_instance());
}

FighterInfo::FighterInfo(const FighterInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FighterInfo::SharedCtor() {
  _cached_size_ = 0;
  ranking_ = 0;
  type_ = 0;
  fightvalue_ = 0;
  playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  skinid_ = 0;
  career_ = 0;
  level_ = 0u;
  suit_id_ = 0u;
  weaponskinid_ = 0;
  dhlevel_ = 0u;
  playeratt_ = NULL;
  petid_ = 0;
  playerid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FighterInfo::~FighterInfo() {
  SharedDtor();
}

void FighterInfo::SharedDtor() {
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    delete playername_;
  }
  if (this != default_instance_) {
    delete playeratt_;
  }
}

void FighterInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FighterInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FighterInfo_descriptor_;
}

const FighterInfo& FighterInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_offpvp_2eproto();
  return *default_instance_;
}

FighterInfo* FighterInfo::default_instance_ = NULL;

FighterInfo* FighterInfo::New() const {
  return new FighterInfo;
}

void FighterInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ranking_ = 0;
    type_ = 0;
    fightvalue_ = 0;
    if (has_playername()) {
      if (playername_ != &::google::protobuf::internal::kEmptyString) {
        playername_->clear();
      }
    }
    skinid_ = 0;
    career_ = 0;
    level_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    suit_id_ = 0u;
    weaponskinid_ = 0;
    dhlevel_ = 0u;
    if (has_playeratt()) {
      if (playeratt_ != NULL) playeratt_->::proto::message::PlayerEffect::Clear();
    }
    petid_ = 0;
    playerid_ = GOOGLE_ULONGLONG(0);
  }
  equipid_.Clear();
  playerskill_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FighterInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ranking = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ranking_)));
          set_has_ranking();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_fightvalue;
        break;
      }

      // optional int32 fightvalue = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fightvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fightvalue_)));
          set_has_fightvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_equipid;
        break;
      }

      // repeated int32 equipid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equipid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_equipid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_equipid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_equipid;
        if (input->ExpectTag(50)) goto parse_playername;
        break;
      }

      // optional string playername = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playername().data(), this->playername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_skinid;
        break;
      }

      // optional int32 skinid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skinid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skinid_)));
          set_has_skinid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_career;
        break;
      }

      // optional int32 career = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_career:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &career_)));
          set_has_career();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_level;
        break;
      }

      // optional uint32 level = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_suit_id;
        break;
      }

      // optional uint32 suit_id = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_suit_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &suit_id_)));
          set_has_suit_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_weaponskinid;
        break;
      }

      // optional int32 weaponskinid = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weaponskinid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weaponskinid_)));
          set_has_weaponskinid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_dhlevel;
        break;
      }

      // optional uint32 dhlevel = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dhlevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dhlevel_)));
          set_has_dhlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_playerskill;
        break;
      }

      // repeated uint32 playerskill = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerskill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 104, input, this->mutable_playerskill())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_playerskill())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_playerskill;
        if (input->ExpectTag(114)) goto parse_playeratt;
        break;
      }

      // optional .proto.message.PlayerEffect playeratt = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playeratt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playeratt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_petid;
        break;
      }

      // optional int32 petid = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_petid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &petid_)));
          set_has_petid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_playerid;
        break;
      }

      // optional uint64 playerid = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FighterInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ranking = 1;
  if (has_ranking()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ranking(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional int32 fightvalue = 3;
  if (has_fightvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->fightvalue(), output);
  }

  // repeated int32 equipid = 5;
  for (int i = 0; i < this->equipid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->equipid(i), output);
  }

  // optional string playername = 6;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->playername(), output);
  }

  // optional int32 skinid = 7;
  if (has_skinid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->skinid(), output);
  }

  // optional int32 career = 8;
  if (has_career()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->career(), output);
  }

  // optional uint32 level = 9;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->level(), output);
  }

  // optional uint32 suit_id = 10;
  if (has_suit_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->suit_id(), output);
  }

  // optional int32 weaponskinid = 11;
  if (has_weaponskinid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->weaponskinid(), output);
  }

  // optional uint32 dhlevel = 12;
  if (has_dhlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->dhlevel(), output);
  }

  // repeated uint32 playerskill = 13;
  for (int i = 0; i < this->playerskill_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      13, this->playerskill(i), output);
  }

  // optional .proto.message.PlayerEffect playeratt = 14;
  if (has_playeratt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->playeratt(), output);
  }

  // optional int32 petid = 15;
  if (has_petid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->petid(), output);
  }

  // optional uint64 playerid = 16;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(16, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FighterInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ranking = 1;
  if (has_ranking()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ranking(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional int32 fightvalue = 3;
  if (has_fightvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->fightvalue(), target);
  }

  // repeated int32 equipid = 5;
  for (int i = 0; i < this->equipid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->equipid(i), target);
  }

  // optional string playername = 6;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->playername(), target);
  }

  // optional int32 skinid = 7;
  if (has_skinid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->skinid(), target);
  }

  // optional int32 career = 8;
  if (has_career()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->career(), target);
  }

  // optional uint32 level = 9;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->level(), target);
  }

  // optional uint32 suit_id = 10;
  if (has_suit_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->suit_id(), target);
  }

  // optional int32 weaponskinid = 11;
  if (has_weaponskinid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->weaponskinid(), target);
  }

  // optional uint32 dhlevel = 12;
  if (has_dhlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->dhlevel(), target);
  }

  // repeated uint32 playerskill = 13;
  for (int i = 0; i < this->playerskill_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(13, this->playerskill(i), target);
  }

  // optional .proto.message.PlayerEffect playeratt = 14;
  if (has_playeratt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->playeratt(), target);
  }

  // optional int32 petid = 15;
  if (has_petid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->petid(), target);
  }

  // optional uint64 playerid = 16;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(16, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FighterInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ranking = 1;
    if (has_ranking()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ranking());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 fightvalue = 3;
    if (has_fightvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fightvalue());
    }

    // optional string playername = 6;
    if (has_playername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playername());
    }

    // optional int32 skinid = 7;
    if (has_skinid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skinid());
    }

    // optional int32 career = 8;
    if (has_career()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->career());
    }

    // optional uint32 level = 9;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 suit_id = 10;
    if (has_suit_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->suit_id());
    }

    // optional int32 weaponskinid = 11;
    if (has_weaponskinid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->weaponskinid());
    }

    // optional uint32 dhlevel = 12;
    if (has_dhlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dhlevel());
    }

    // optional .proto.message.PlayerEffect playeratt = 14;
    if (has_playeratt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playeratt());
    }

    // optional int32 petid = 15;
    if (has_petid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->petid());
    }

    // optional uint64 playerid = 16;
    if (has_playerid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerid());
    }

  }
  // repeated int32 equipid = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->equipid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->equipid(i));
    }
    total_size += 1 * this->equipid_size() + data_size;
  }

  // repeated uint32 playerskill = 13;
  {
    int data_size = 0;
    for (int i = 0; i < this->playerskill_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->playerskill(i));
    }
    total_size += 1 * this->playerskill_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FighterInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FighterInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FighterInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FighterInfo::MergeFrom(const FighterInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  equipid_.MergeFrom(from.equipid_);
  playerskill_.MergeFrom(from.playerskill_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ranking()) {
      set_ranking(from.ranking());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_fightvalue()) {
      set_fightvalue(from.fightvalue());
    }
    if (from.has_playername()) {
      set_playername(from.playername());
    }
    if (from.has_skinid()) {
      set_skinid(from.skinid());
    }
    if (from.has_career()) {
      set_career(from.career());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_suit_id()) {
      set_suit_id(from.suit_id());
    }
    if (from.has_weaponskinid()) {
      set_weaponskinid(from.weaponskinid());
    }
    if (from.has_dhlevel()) {
      set_dhlevel(from.dhlevel());
    }
    if (from.has_playeratt()) {
      mutable_playeratt()->::proto::message::PlayerEffect::MergeFrom(from.playeratt());
    }
    if (from.has_petid()) {
      set_petid(from.petid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FighterInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FighterInfo::CopyFrom(const FighterInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FighterInfo::IsInitialized() const {

  return true;
}

void FighterInfo::Swap(FighterInfo* other) {
  if (other != this) {
    std::swap(ranking_, other->ranking_);
    std::swap(type_, other->type_);
    std::swap(fightvalue_, other->fightvalue_);
    equipid_.Swap(&other->equipid_);
    std::swap(playername_, other->playername_);
    std::swap(skinid_, other->skinid_);
    std::swap(career_, other->career_);
    std::swap(level_, other->level_);
    std::swap(suit_id_, other->suit_id_);
    std::swap(weaponskinid_, other->weaponskinid_);
    std::swap(dhlevel_, other->dhlevel_);
    playerskill_.Swap(&other->playerskill_);
    std::swap(playeratt_, other->playeratt_);
    std::swap(petid_, other->petid_);
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FighterInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FighterInfo_descriptor_;
  metadata.reflection = FighterInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

OffPVP_CS_GetSelfData::OffPVP_CS_GetSelfData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OffPVP_CS_GetSelfData::InitAsDefaultInstance() {
}

OffPVP_CS_GetSelfData::OffPVP_CS_GetSelfData(const OffPVP_CS_GetSelfData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OffPVP_CS_GetSelfData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OffPVP_CS_GetSelfData::~OffPVP_CS_GetSelfData() {
  SharedDtor();
}

void OffPVP_CS_GetSelfData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OffPVP_CS_GetSelfData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OffPVP_CS_GetSelfData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OffPVP_CS_GetSelfData_descriptor_;
}

const OffPVP_CS_GetSelfData& OffPVP_CS_GetSelfData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_offpvp_2eproto();
  return *default_instance_;
}

OffPVP_CS_GetSelfData* OffPVP_CS_GetSelfData::default_instance_ = NULL;

OffPVP_CS_GetSelfData* OffPVP_CS_GetSelfData::New() const {
  return new OffPVP_CS_GetSelfData;
}

void OffPVP_CS_GetSelfData::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OffPVP_CS_GetSelfData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void OffPVP_CS_GetSelfData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OffPVP_CS_GetSelfData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OffPVP_CS_GetSelfData::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OffPVP_CS_GetSelfData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OffPVP_CS_GetSelfData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OffPVP_CS_GetSelfData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OffPVP_CS_GetSelfData::MergeFrom(const OffPVP_CS_GetSelfData& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OffPVP_CS_GetSelfData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OffPVP_CS_GetSelfData::CopyFrom(const OffPVP_CS_GetSelfData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OffPVP_CS_GetSelfData::IsInitialized() const {

  return true;
}

void OffPVP_CS_GetSelfData::Swap(OffPVP_CS_GetSelfData* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OffPVP_CS_GetSelfData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OffPVP_CS_GetSelfData_descriptor_;
  metadata.reflection = OffPVP_CS_GetSelfData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OffPVP_SC_GetSelfData::kFightcountsFieldNumber;
const int OffPVP_SC_GetSelfData::kRewordtimeFieldNumber;
const int OffPVP_SC_GetSelfData::kRankingFieldNumber;
const int OffPVP_SC_GetSelfData::kOfficeidFieldNumber;
const int OffPVP_SC_GetSelfData::kShowoffidFieldNumber;
const int OffPVP_SC_GetSelfData::kInfolistFieldNumber;
const int OffPVP_SC_GetSelfData::kRewordidFieldNumber;
#endif  // !_MSC_VER

OffPVP_SC_GetSelfData::OffPVP_SC_GetSelfData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OffPVP_SC_GetSelfData::InitAsDefaultInstance() {
}

OffPVP_SC_GetSelfData::OffPVP_SC_GetSelfData(const OffPVP_SC_GetSelfData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OffPVP_SC_GetSelfData::SharedCtor() {
  _cached_size_ = 0;
  fightcounts_ = 0;
  rewordtime_ = GOOGLE_ULONGLONG(0);
  ranking_ = 0;
  officeid_ = 0;
  showoffid_ = 0u;
  rewordid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OffPVP_SC_GetSelfData::~OffPVP_SC_GetSelfData() {
  SharedDtor();
}

void OffPVP_SC_GetSelfData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OffPVP_SC_GetSelfData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OffPVP_SC_GetSelfData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OffPVP_SC_GetSelfData_descriptor_;
}

const OffPVP_SC_GetSelfData& OffPVP_SC_GetSelfData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_offpvp_2eproto();
  return *default_instance_;
}

OffPVP_SC_GetSelfData* OffPVP_SC_GetSelfData::default_instance_ = NULL;

OffPVP_SC_GetSelfData* OffPVP_SC_GetSelfData::New() const {
  return new OffPVP_SC_GetSelfData;
}

void OffPVP_SC_GetSelfData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fightcounts_ = 0;
    rewordtime_ = GOOGLE_ULONGLONG(0);
    ranking_ = 0;
    officeid_ = 0;
    showoffid_ = 0u;
    rewordid_ = 0u;
  }
  infolist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OffPVP_SC_GetSelfData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 fightcounts = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fightcounts_)));
          set_has_fightcounts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rewordtime;
        break;
      }

      // optional uint64 rewordtime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rewordtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rewordtime_)));
          set_has_rewordtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ranking;
        break;
      }

      // optional int32 ranking = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ranking:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ranking_)));
          set_has_ranking();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_officeid;
        break;
      }

      // optional int32 officeid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_officeid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &officeid_)));
          set_has_officeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_showoffid;
        break;
      }

      // optional uint32 showoffid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_showoffid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &showoffid_)));
          set_has_showoffid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_infolist;
        break;
      }

      // repeated .proto.message.FighterInfo infolist = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infolist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infolist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_infolist;
        if (input->ExpectTag(56)) goto parse_rewordid;
        break;
      }

      // optional uint32 rewordid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rewordid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rewordid_)));
          set_has_rewordid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OffPVP_SC_GetSelfData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 fightcounts = 1;
  if (has_fightcounts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fightcounts(), output);
  }

  // optional uint64 rewordtime = 2;
  if (has_rewordtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->rewordtime(), output);
  }

  // optional int32 ranking = 3;
  if (has_ranking()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ranking(), output);
  }

  // optional int32 officeid = 4;
  if (has_officeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->officeid(), output);
  }

  // optional uint32 showoffid = 5;
  if (has_showoffid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->showoffid(), output);
  }

  // repeated .proto.message.FighterInfo infolist = 6;
  for (int i = 0; i < this->infolist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->infolist(i), output);
  }

  // optional uint32 rewordid = 7;
  if (has_rewordid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->rewordid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OffPVP_SC_GetSelfData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 fightcounts = 1;
  if (has_fightcounts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->fightcounts(), target);
  }

  // optional uint64 rewordtime = 2;
  if (has_rewordtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->rewordtime(), target);
  }

  // optional int32 ranking = 3;
  if (has_ranking()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ranking(), target);
  }

  // optional int32 officeid = 4;
  if (has_officeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->officeid(), target);
  }

  // optional uint32 showoffid = 5;
  if (has_showoffid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->showoffid(), target);
  }

  // repeated .proto.message.FighterInfo infolist = 6;
  for (int i = 0; i < this->infolist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->infolist(i), target);
  }

  // optional uint32 rewordid = 7;
  if (has_rewordid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->rewordid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OffPVP_SC_GetSelfData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 fightcounts = 1;
    if (has_fightcounts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fightcounts());
    }

    // optional uint64 rewordtime = 2;
    if (has_rewordtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rewordtime());
    }

    // optional int32 ranking = 3;
    if (has_ranking()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ranking());
    }

    // optional int32 officeid = 4;
    if (has_officeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->officeid());
    }

    // optional uint32 showoffid = 5;
    if (has_showoffid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->showoffid());
    }

    // optional uint32 rewordid = 7;
    if (has_rewordid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rewordid());
    }

  }
  // repeated .proto.message.FighterInfo infolist = 6;
  total_size += 1 * this->infolist_size();
  for (int i = 0; i < this->infolist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infolist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OffPVP_SC_GetSelfData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OffPVP_SC_GetSelfData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OffPVP_SC_GetSelfData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OffPVP_SC_GetSelfData::MergeFrom(const OffPVP_SC_GetSelfData& from) {
  GOOGLE_CHECK_NE(&from, this);
  infolist_.MergeFrom(from.infolist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fightcounts()) {
      set_fightcounts(from.fightcounts());
    }
    if (from.has_rewordtime()) {
      set_rewordtime(from.rewordtime());
    }
    if (from.has_ranking()) {
      set_ranking(from.ranking());
    }
    if (from.has_officeid()) {
      set_officeid(from.officeid());
    }
    if (from.has_showoffid()) {
      set_showoffid(from.showoffid());
    }
    if (from.has_rewordid()) {
      set_rewordid(from.rewordid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OffPVP_SC_GetSelfData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OffPVP_SC_GetSelfData::CopyFrom(const OffPVP_SC_GetSelfData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OffPVP_SC_GetSelfData::IsInitialized() const {

  return true;
}

void OffPVP_SC_GetSelfData::Swap(OffPVP_SC_GetSelfData* other) {
  if (other != this) {
    std::swap(fightcounts_, other->fightcounts_);
    std::swap(rewordtime_, other->rewordtime_);
    std::swap(ranking_, other->ranking_);
    std::swap(officeid_, other->officeid_);
    std::swap(showoffid_, other->showoffid_);
    infolist_.Swap(&other->infolist_);
    std::swap(rewordid_, other->rewordid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OffPVP_SC_GetSelfData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OffPVP_SC_GetSelfData_descriptor_;
  metadata.reflection = OffPVP_SC_GetSelfData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OffPVP_CS_GetOtherData::kOfficeidFieldNumber;
#endif  // !_MSC_VER

OffPVP_CS_GetOtherData::OffPVP_CS_GetOtherData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OffPVP_CS_GetOtherData::InitAsDefaultInstance() {
}

OffPVP_CS_GetOtherData::OffPVP_CS_GetOtherData(const OffPVP_CS_GetOtherData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OffPVP_CS_GetOtherData::SharedCtor() {
  _cached_size_ = 0;
  officeid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OffPVP_CS_GetOtherData::~OffPVP_CS_GetOtherData() {
  SharedDtor();
}

void OffPVP_CS_GetOtherData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OffPVP_CS_GetOtherData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OffPVP_CS_GetOtherData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OffPVP_CS_GetOtherData_descriptor_;
}

const OffPVP_CS_GetOtherData& OffPVP_CS_GetOtherData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_offpvp_2eproto();
  return *default_instance_;
}

OffPVP_CS_GetOtherData* OffPVP_CS_GetOtherData::default_instance_ = NULL;

OffPVP_CS_GetOtherData* OffPVP_CS_GetOtherData::New() const {
  return new OffPVP_CS_GetOtherData;
}

void OffPVP_CS_GetOtherData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    officeid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OffPVP_CS_GetOtherData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 officeid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &officeid_)));
          set_has_officeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OffPVP_CS_GetOtherData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 officeid = 1;
  if (has_officeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->officeid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OffPVP_CS_GetOtherData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 officeid = 1;
  if (has_officeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->officeid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OffPVP_CS_GetOtherData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 officeid = 1;
    if (has_officeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->officeid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OffPVP_CS_GetOtherData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OffPVP_CS_GetOtherData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OffPVP_CS_GetOtherData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OffPVP_CS_GetOtherData::MergeFrom(const OffPVP_CS_GetOtherData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_officeid()) {
      set_officeid(from.officeid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OffPVP_CS_GetOtherData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OffPVP_CS_GetOtherData::CopyFrom(const OffPVP_CS_GetOtherData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OffPVP_CS_GetOtherData::IsInitialized() const {

  return true;
}

void OffPVP_CS_GetOtherData::Swap(OffPVP_CS_GetOtherData* other) {
  if (other != this) {
    std::swap(officeid_, other->officeid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OffPVP_CS_GetOtherData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OffPVP_CS_GetOtherData_descriptor_;
  metadata.reflection = OffPVP_CS_GetOtherData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OffPVP_CS_ChangeFighter::kOfficeidFieldNumber;
#endif  // !_MSC_VER

OffPVP_CS_ChangeFighter::OffPVP_CS_ChangeFighter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OffPVP_CS_ChangeFighter::InitAsDefaultInstance() {
}

OffPVP_CS_ChangeFighter::OffPVP_CS_ChangeFighter(const OffPVP_CS_ChangeFighter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OffPVP_CS_ChangeFighter::SharedCtor() {
  _cached_size_ = 0;
  officeid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OffPVP_CS_ChangeFighter::~OffPVP_CS_ChangeFighter() {
  SharedDtor();
}

void OffPVP_CS_ChangeFighter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OffPVP_CS_ChangeFighter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OffPVP_CS_ChangeFighter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OffPVP_CS_ChangeFighter_descriptor_;
}

const OffPVP_CS_ChangeFighter& OffPVP_CS_ChangeFighter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_offpvp_2eproto();
  return *default_instance_;
}

OffPVP_CS_ChangeFighter* OffPVP_CS_ChangeFighter::default_instance_ = NULL;

OffPVP_CS_ChangeFighter* OffPVP_CS_ChangeFighter::New() const {
  return new OffPVP_CS_ChangeFighter;
}

void OffPVP_CS_ChangeFighter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    officeid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OffPVP_CS_ChangeFighter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 officeid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &officeid_)));
          set_has_officeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OffPVP_CS_ChangeFighter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 officeid = 1;
  if (has_officeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->officeid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OffPVP_CS_ChangeFighter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 officeid = 1;
  if (has_officeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->officeid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OffPVP_CS_ChangeFighter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 officeid = 1;
    if (has_officeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->officeid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OffPVP_CS_ChangeFighter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OffPVP_CS_ChangeFighter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OffPVP_CS_ChangeFighter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OffPVP_CS_ChangeFighter::MergeFrom(const OffPVP_CS_ChangeFighter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_officeid()) {
      set_officeid(from.officeid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OffPVP_CS_ChangeFighter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OffPVP_CS_ChangeFighter::CopyFrom(const OffPVP_CS_ChangeFighter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OffPVP_CS_ChangeFighter::IsInitialized() const {

  return true;
}

void OffPVP_CS_ChangeFighter::Swap(OffPVP_CS_ChangeFighter* other) {
  if (other != this) {
    std::swap(officeid_, other->officeid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OffPVP_CS_ChangeFighter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OffPVP_CS_ChangeFighter_descriptor_;
  metadata.reflection = OffPVP_CS_ChangeFighter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OffPVP_SC_GetOtherData::kOfficeidFieldNumber;
const int OffPVP_SC_GetOtherData::kInfolistFieldNumber;
#endif  // !_MSC_VER

OffPVP_SC_GetOtherData::OffPVP_SC_GetOtherData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OffPVP_SC_GetOtherData::InitAsDefaultInstance() {
}

OffPVP_SC_GetOtherData::OffPVP_SC_GetOtherData(const OffPVP_SC_GetOtherData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OffPVP_SC_GetOtherData::SharedCtor() {
  _cached_size_ = 0;
  officeid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OffPVP_SC_GetOtherData::~OffPVP_SC_GetOtherData() {
  SharedDtor();
}

void OffPVP_SC_GetOtherData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OffPVP_SC_GetOtherData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OffPVP_SC_GetOtherData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OffPVP_SC_GetOtherData_descriptor_;
}

const OffPVP_SC_GetOtherData& OffPVP_SC_GetOtherData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_offpvp_2eproto();
  return *default_instance_;
}

OffPVP_SC_GetOtherData* OffPVP_SC_GetOtherData::default_instance_ = NULL;

OffPVP_SC_GetOtherData* OffPVP_SC_GetOtherData::New() const {
  return new OffPVP_SC_GetOtherData;
}

void OffPVP_SC_GetOtherData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    officeid_ = 0;
  }
  infolist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OffPVP_SC_GetOtherData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 officeid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &officeid_)));
          set_has_officeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_infolist;
        break;
      }

      // repeated .proto.message.FighterInfo infolist = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infolist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infolist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_infolist;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OffPVP_SC_GetOtherData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 officeid = 1;
  if (has_officeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->officeid(), output);
  }

  // repeated .proto.message.FighterInfo infolist = 2;
  for (int i = 0; i < this->infolist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->infolist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OffPVP_SC_GetOtherData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 officeid = 1;
  if (has_officeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->officeid(), target);
  }

  // repeated .proto.message.FighterInfo infolist = 2;
  for (int i = 0; i < this->infolist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->infolist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OffPVP_SC_GetOtherData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 officeid = 1;
    if (has_officeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->officeid());
    }

  }
  // repeated .proto.message.FighterInfo infolist = 2;
  total_size += 1 * this->infolist_size();
  for (int i = 0; i < this->infolist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infolist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OffPVP_SC_GetOtherData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OffPVP_SC_GetOtherData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OffPVP_SC_GetOtherData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OffPVP_SC_GetOtherData::MergeFrom(const OffPVP_SC_GetOtherData& from) {
  GOOGLE_CHECK_NE(&from, this);
  infolist_.MergeFrom(from.infolist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_officeid()) {
      set_officeid(from.officeid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OffPVP_SC_GetOtherData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OffPVP_SC_GetOtherData::CopyFrom(const OffPVP_SC_GetOtherData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OffPVP_SC_GetOtherData::IsInitialized() const {

  return true;
}

void OffPVP_SC_GetOtherData::Swap(OffPVP_SC_GetOtherData* other) {
  if (other != this) {
    std::swap(officeid_, other->officeid_);
    infolist_.Swap(&other->infolist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OffPVP_SC_GetOtherData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OffPVP_SC_GetOtherData_descriptor_;
  metadata.reflection = OffPVP_SC_GetOtherData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OffPVP_CS_Fight::kRankingFieldNumber;
#endif  // !_MSC_VER

OffPVP_CS_Fight::OffPVP_CS_Fight()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OffPVP_CS_Fight::InitAsDefaultInstance() {
}

OffPVP_CS_Fight::OffPVP_CS_Fight(const OffPVP_CS_Fight& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OffPVP_CS_Fight::SharedCtor() {
  _cached_size_ = 0;
  ranking_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OffPVP_CS_Fight::~OffPVP_CS_Fight() {
  SharedDtor();
}

void OffPVP_CS_Fight::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OffPVP_CS_Fight::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OffPVP_CS_Fight::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OffPVP_CS_Fight_descriptor_;
}

const OffPVP_CS_Fight& OffPVP_CS_Fight::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_offpvp_2eproto();
  return *default_instance_;
}

OffPVP_CS_Fight* OffPVP_CS_Fight::default_instance_ = NULL;

OffPVP_CS_Fight* OffPVP_CS_Fight::New() const {
  return new OffPVP_CS_Fight;
}

void OffPVP_CS_Fight::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ranking_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OffPVP_CS_Fight::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ranking = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ranking_)));
          set_has_ranking();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OffPVP_CS_Fight::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ranking = 1;
  if (has_ranking()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ranking(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OffPVP_CS_Fight::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ranking = 1;
  if (has_ranking()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ranking(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OffPVP_CS_Fight::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ranking = 1;
    if (has_ranking()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ranking());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OffPVP_CS_Fight::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OffPVP_CS_Fight* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OffPVP_CS_Fight*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OffPVP_CS_Fight::MergeFrom(const OffPVP_CS_Fight& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ranking()) {
      set_ranking(from.ranking());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OffPVP_CS_Fight::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OffPVP_CS_Fight::CopyFrom(const OffPVP_CS_Fight& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OffPVP_CS_Fight::IsInitialized() const {

  return true;
}

void OffPVP_CS_Fight::Swap(OffPVP_CS_Fight* other) {
  if (other != this) {
    std::swap(ranking_, other->ranking_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OffPVP_CS_Fight::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OffPVP_CS_Fight_descriptor_;
  metadata.reflection = OffPVP_CS_Fight_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OffPVP_SC_FightResult::kResultFieldNumber;
const int OffPVP_SC_FightResult::kErrorcodeFieldNumber;
const int OffPVP_SC_FightResult::kDataFieldNumber;
#endif  // !_MSC_VER

OffPVP_SC_FightResult::OffPVP_SC_FightResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OffPVP_SC_FightResult::InitAsDefaultInstance() {
  data_ = const_cast< ::proto::message::OfflineDataDetail*>(&::proto::message::OfflineDataDetail::default_instance());
}

OffPVP_SC_FightResult::OffPVP_SC_FightResult(const OffPVP_SC_FightResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OffPVP_SC_FightResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  errorcode_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OffPVP_SC_FightResult::~OffPVP_SC_FightResult() {
  SharedDtor();
}

void OffPVP_SC_FightResult::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void OffPVP_SC_FightResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OffPVP_SC_FightResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OffPVP_SC_FightResult_descriptor_;
}

const OffPVP_SC_FightResult& OffPVP_SC_FightResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_offpvp_2eproto();
  return *default_instance_;
}

OffPVP_SC_FightResult* OffPVP_SC_FightResult::default_instance_ = NULL;

OffPVP_SC_FightResult* OffPVP_SC_FightResult::New() const {
  return new OffPVP_SC_FightResult;
}

void OffPVP_SC_FightResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    errorcode_ = 0;
    if (has_data()) {
      if (data_ != NULL) data_->::proto::message::OfflineDataDetail::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OffPVP_SC_FightResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_errorcode;
        break;
      }

      // optional int32 errorcode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_errorcode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional .proto.message.OfflineDataDetail data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OffPVP_SC_FightResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 errorcode = 2;
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->errorcode(), output);
  }

  // optional .proto.message.OfflineDataDetail data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OffPVP_SC_FightResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 errorcode = 2;
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->errorcode(), target);
  }

  // optional .proto.message.OfflineDataDetail data = 3;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OffPVP_SC_FightResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 errorcode = 2;
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errorcode());
    }

    // optional .proto.message.OfflineDataDetail data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OffPVP_SC_FightResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OffPVP_SC_FightResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OffPVP_SC_FightResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OffPVP_SC_FightResult::MergeFrom(const OffPVP_SC_FightResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
    if (from.has_data()) {
      mutable_data()->::proto::message::OfflineDataDetail::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OffPVP_SC_FightResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OffPVP_SC_FightResult::CopyFrom(const OffPVP_SC_FightResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OffPVP_SC_FightResult::IsInitialized() const {

  return true;
}

void OffPVP_SC_FightResult::Swap(OffPVP_SC_FightResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(errorcode_, other->errorcode_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OffPVP_SC_FightResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OffPVP_SC_FightResult_descriptor_;
  metadata.reflection = OffPVP_SC_FightResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

OffPVP_CS_BuyCounts::OffPVP_CS_BuyCounts()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OffPVP_CS_BuyCounts::InitAsDefaultInstance() {
}

OffPVP_CS_BuyCounts::OffPVP_CS_BuyCounts(const OffPVP_CS_BuyCounts& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OffPVP_CS_BuyCounts::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OffPVP_CS_BuyCounts::~OffPVP_CS_BuyCounts() {
  SharedDtor();
}

void OffPVP_CS_BuyCounts::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OffPVP_CS_BuyCounts::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OffPVP_CS_BuyCounts::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OffPVP_CS_BuyCounts_descriptor_;
}

const OffPVP_CS_BuyCounts& OffPVP_CS_BuyCounts::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_offpvp_2eproto();
  return *default_instance_;
}

OffPVP_CS_BuyCounts* OffPVP_CS_BuyCounts::default_instance_ = NULL;

OffPVP_CS_BuyCounts* OffPVP_CS_BuyCounts::New() const {
  return new OffPVP_CS_BuyCounts;
}

void OffPVP_CS_BuyCounts::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OffPVP_CS_BuyCounts::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void OffPVP_CS_BuyCounts::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OffPVP_CS_BuyCounts::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OffPVP_CS_BuyCounts::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OffPVP_CS_BuyCounts::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OffPVP_CS_BuyCounts* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OffPVP_CS_BuyCounts*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OffPVP_CS_BuyCounts::MergeFrom(const OffPVP_CS_BuyCounts& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OffPVP_CS_BuyCounts::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OffPVP_CS_BuyCounts::CopyFrom(const OffPVP_CS_BuyCounts& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OffPVP_CS_BuyCounts::IsInitialized() const {

  return true;
}

void OffPVP_CS_BuyCounts::Swap(OffPVP_CS_BuyCounts* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OffPVP_CS_BuyCounts::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OffPVP_CS_BuyCounts_descriptor_;
  metadata.reflection = OffPVP_CS_BuyCounts_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OffPVP_SC_BuyCountsResult::kResultFieldNumber;
const int OffPVP_SC_BuyCountsResult::kCountsFieldNumber;
#endif  // !_MSC_VER

OffPVP_SC_BuyCountsResult::OffPVP_SC_BuyCountsResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OffPVP_SC_BuyCountsResult::InitAsDefaultInstance() {
}

OffPVP_SC_BuyCountsResult::OffPVP_SC_BuyCountsResult(const OffPVP_SC_BuyCountsResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OffPVP_SC_BuyCountsResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  counts_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OffPVP_SC_BuyCountsResult::~OffPVP_SC_BuyCountsResult() {
  SharedDtor();
}

void OffPVP_SC_BuyCountsResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OffPVP_SC_BuyCountsResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OffPVP_SC_BuyCountsResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OffPVP_SC_BuyCountsResult_descriptor_;
}

const OffPVP_SC_BuyCountsResult& OffPVP_SC_BuyCountsResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_offpvp_2eproto();
  return *default_instance_;
}

OffPVP_SC_BuyCountsResult* OffPVP_SC_BuyCountsResult::default_instance_ = NULL;

OffPVP_SC_BuyCountsResult* OffPVP_SC_BuyCountsResult::New() const {
  return new OffPVP_SC_BuyCountsResult;
}

void OffPVP_SC_BuyCountsResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    counts_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OffPVP_SC_BuyCountsResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_counts;
        break;
      }

      // optional int32 counts = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_counts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &counts_)));
          set_has_counts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OffPVP_SC_BuyCountsResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 counts = 2;
  if (has_counts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->counts(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OffPVP_SC_BuyCountsResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 counts = 2;
  if (has_counts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->counts(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OffPVP_SC_BuyCountsResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 counts = 2;
    if (has_counts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->counts());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OffPVP_SC_BuyCountsResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OffPVP_SC_BuyCountsResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OffPVP_SC_BuyCountsResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OffPVP_SC_BuyCountsResult::MergeFrom(const OffPVP_SC_BuyCountsResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_counts()) {
      set_counts(from.counts());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OffPVP_SC_BuyCountsResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OffPVP_SC_BuyCountsResult::CopyFrom(const OffPVP_SC_BuyCountsResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OffPVP_SC_BuyCountsResult::IsInitialized() const {

  return true;
}

void OffPVP_SC_BuyCountsResult::Swap(OffPVP_SC_BuyCountsResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(counts_, other->counts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OffPVP_SC_BuyCountsResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OffPVP_SC_BuyCountsResult_descriptor_;
  metadata.reflection = OffPVP_SC_BuyCountsResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

OffPVP_CS_GetReword::OffPVP_CS_GetReword()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OffPVP_CS_GetReword::InitAsDefaultInstance() {
}

OffPVP_CS_GetReword::OffPVP_CS_GetReword(const OffPVP_CS_GetReword& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OffPVP_CS_GetReword::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OffPVP_CS_GetReword::~OffPVP_CS_GetReword() {
  SharedDtor();
}

void OffPVP_CS_GetReword::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OffPVP_CS_GetReword::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OffPVP_CS_GetReword::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OffPVP_CS_GetReword_descriptor_;
}

const OffPVP_CS_GetReword& OffPVP_CS_GetReword::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_offpvp_2eproto();
  return *default_instance_;
}

OffPVP_CS_GetReword* OffPVP_CS_GetReword::default_instance_ = NULL;

OffPVP_CS_GetReword* OffPVP_CS_GetReword::New() const {
  return new OffPVP_CS_GetReword;
}

void OffPVP_CS_GetReword::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OffPVP_CS_GetReword::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void OffPVP_CS_GetReword::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OffPVP_CS_GetReword::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OffPVP_CS_GetReword::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OffPVP_CS_GetReword::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OffPVP_CS_GetReword* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OffPVP_CS_GetReword*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OffPVP_CS_GetReword::MergeFrom(const OffPVP_CS_GetReword& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OffPVP_CS_GetReword::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OffPVP_CS_GetReword::CopyFrom(const OffPVP_CS_GetReword& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OffPVP_CS_GetReword::IsInitialized() const {

  return true;
}

void OffPVP_CS_GetReword::Swap(OffPVP_CS_GetReword* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OffPVP_CS_GetReword::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OffPVP_CS_GetReword_descriptor_;
  metadata.reflection = OffPVP_CS_GetReword_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OffPVP_SC_GetRewordResult::kResultFieldNumber;
const int OffPVP_SC_GetRewordResult::kNexttimeFieldNumber;
#endif  // !_MSC_VER

OffPVP_SC_GetRewordResult::OffPVP_SC_GetRewordResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OffPVP_SC_GetRewordResult::InitAsDefaultInstance() {
}

OffPVP_SC_GetRewordResult::OffPVP_SC_GetRewordResult(const OffPVP_SC_GetRewordResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OffPVP_SC_GetRewordResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  nexttime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OffPVP_SC_GetRewordResult::~OffPVP_SC_GetRewordResult() {
  SharedDtor();
}

void OffPVP_SC_GetRewordResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OffPVP_SC_GetRewordResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OffPVP_SC_GetRewordResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OffPVP_SC_GetRewordResult_descriptor_;
}

const OffPVP_SC_GetRewordResult& OffPVP_SC_GetRewordResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_offpvp_2eproto();
  return *default_instance_;
}

OffPVP_SC_GetRewordResult* OffPVP_SC_GetRewordResult::default_instance_ = NULL;

OffPVP_SC_GetRewordResult* OffPVP_SC_GetRewordResult::New() const {
  return new OffPVP_SC_GetRewordResult;
}

void OffPVP_SC_GetRewordResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    nexttime_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OffPVP_SC_GetRewordResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nexttime;
        break;
      }

      // optional int64 nexttime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nexttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &nexttime_)));
          set_has_nexttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OffPVP_SC_GetRewordResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int64 nexttime = 2;
  if (has_nexttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->nexttime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OffPVP_SC_GetRewordResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int64 nexttime = 2;
  if (has_nexttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->nexttime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OffPVP_SC_GetRewordResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int64 nexttime = 2;
    if (has_nexttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->nexttime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OffPVP_SC_GetRewordResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OffPVP_SC_GetRewordResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OffPVP_SC_GetRewordResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OffPVP_SC_GetRewordResult::MergeFrom(const OffPVP_SC_GetRewordResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_nexttime()) {
      set_nexttime(from.nexttime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OffPVP_SC_GetRewordResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OffPVP_SC_GetRewordResult::CopyFrom(const OffPVP_SC_GetRewordResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OffPVP_SC_GetRewordResult::IsInitialized() const {

  return true;
}

void OffPVP_SC_GetRewordResult::Swap(OffPVP_SC_GetRewordResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(nexttime_, other->nexttime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OffPVP_SC_GetRewordResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OffPVP_SC_GetRewordResult_descriptor_;
  metadata.reflection = OffPVP_SC_GetRewordResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OffPVP_SC_UpdateCounts::kNewcountsFieldNumber;
#endif  // !_MSC_VER

OffPVP_SC_UpdateCounts::OffPVP_SC_UpdateCounts()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OffPVP_SC_UpdateCounts::InitAsDefaultInstance() {
}

OffPVP_SC_UpdateCounts::OffPVP_SC_UpdateCounts(const OffPVP_SC_UpdateCounts& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OffPVP_SC_UpdateCounts::SharedCtor() {
  _cached_size_ = 0;
  newcounts_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OffPVP_SC_UpdateCounts::~OffPVP_SC_UpdateCounts() {
  SharedDtor();
}

void OffPVP_SC_UpdateCounts::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OffPVP_SC_UpdateCounts::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OffPVP_SC_UpdateCounts::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OffPVP_SC_UpdateCounts_descriptor_;
}

const OffPVP_SC_UpdateCounts& OffPVP_SC_UpdateCounts::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_offpvp_2eproto();
  return *default_instance_;
}

OffPVP_SC_UpdateCounts* OffPVP_SC_UpdateCounts::default_instance_ = NULL;

OffPVP_SC_UpdateCounts* OffPVP_SC_UpdateCounts::New() const {
  return new OffPVP_SC_UpdateCounts;
}

void OffPVP_SC_UpdateCounts::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    newcounts_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OffPVP_SC_UpdateCounts::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 newcounts = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &newcounts_)));
          set_has_newcounts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OffPVP_SC_UpdateCounts::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 newcounts = 1;
  if (has_newcounts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->newcounts(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OffPVP_SC_UpdateCounts::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 newcounts = 1;
  if (has_newcounts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->newcounts(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OffPVP_SC_UpdateCounts::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 newcounts = 1;
    if (has_newcounts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->newcounts());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OffPVP_SC_UpdateCounts::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OffPVP_SC_UpdateCounts* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OffPVP_SC_UpdateCounts*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OffPVP_SC_UpdateCounts::MergeFrom(const OffPVP_SC_UpdateCounts& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_newcounts()) {
      set_newcounts(from.newcounts());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OffPVP_SC_UpdateCounts::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OffPVP_SC_UpdateCounts::CopyFrom(const OffPVP_SC_UpdateCounts& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OffPVP_SC_UpdateCounts::IsInitialized() const {

  return true;
}

void OffPVP_SC_UpdateCounts::Swap(OffPVP_SC_UpdateCounts* other) {
  if (other != this) {
    std::swap(newcounts_, other->newcounts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OffPVP_SC_UpdateCounts::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OffPVP_SC_UpdateCounts_descriptor_;
  metadata.reflection = OffPVP_SC_UpdateCounts_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

OffPVP_CS_GetPVPRecord::OffPVP_CS_GetPVPRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OffPVP_CS_GetPVPRecord::InitAsDefaultInstance() {
}

OffPVP_CS_GetPVPRecord::OffPVP_CS_GetPVPRecord(const OffPVP_CS_GetPVPRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OffPVP_CS_GetPVPRecord::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OffPVP_CS_GetPVPRecord::~OffPVP_CS_GetPVPRecord() {
  SharedDtor();
}

void OffPVP_CS_GetPVPRecord::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OffPVP_CS_GetPVPRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OffPVP_CS_GetPVPRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OffPVP_CS_GetPVPRecord_descriptor_;
}

const OffPVP_CS_GetPVPRecord& OffPVP_CS_GetPVPRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_offpvp_2eproto();
  return *default_instance_;
}

OffPVP_CS_GetPVPRecord* OffPVP_CS_GetPVPRecord::default_instance_ = NULL;

OffPVP_CS_GetPVPRecord* OffPVP_CS_GetPVPRecord::New() const {
  return new OffPVP_CS_GetPVPRecord;
}

void OffPVP_CS_GetPVPRecord::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OffPVP_CS_GetPVPRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void OffPVP_CS_GetPVPRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OffPVP_CS_GetPVPRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OffPVP_CS_GetPVPRecord::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OffPVP_CS_GetPVPRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OffPVP_CS_GetPVPRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OffPVP_CS_GetPVPRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OffPVP_CS_GetPVPRecord::MergeFrom(const OffPVP_CS_GetPVPRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OffPVP_CS_GetPVPRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OffPVP_CS_GetPVPRecord::CopyFrom(const OffPVP_CS_GetPVPRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OffPVP_CS_GetPVPRecord::IsInitialized() const {

  return true;
}

void OffPVP_CS_GetPVPRecord::Swap(OffPVP_CS_GetPVPRecord* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OffPVP_CS_GetPVPRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OffPVP_CS_GetPVPRecord_descriptor_;
  metadata.reflection = OffPVP_CS_GetPVPRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OffPVP_SC_GetPVPRecordResult::kResultFieldNumber;
const int OffPVP_SC_GetPVPRecordResult::kDatalistFieldNumber;
#endif  // !_MSC_VER

OffPVP_SC_GetPVPRecordResult::OffPVP_SC_GetPVPRecordResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OffPVP_SC_GetPVPRecordResult::InitAsDefaultInstance() {
}

OffPVP_SC_GetPVPRecordResult::OffPVP_SC_GetPVPRecordResult(const OffPVP_SC_GetPVPRecordResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OffPVP_SC_GetPVPRecordResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OffPVP_SC_GetPVPRecordResult::~OffPVP_SC_GetPVPRecordResult() {
  SharedDtor();
}

void OffPVP_SC_GetPVPRecordResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OffPVP_SC_GetPVPRecordResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OffPVP_SC_GetPVPRecordResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OffPVP_SC_GetPVPRecordResult_descriptor_;
}

const OffPVP_SC_GetPVPRecordResult& OffPVP_SC_GetPVPRecordResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_offpvp_2eproto();
  return *default_instance_;
}

OffPVP_SC_GetPVPRecordResult* OffPVP_SC_GetPVPRecordResult::default_instance_ = NULL;

OffPVP_SC_GetPVPRecordResult* OffPVP_SC_GetPVPRecordResult::New() const {
  return new OffPVP_SC_GetPVPRecordResult;
}

void OffPVP_SC_GetPVPRecordResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  datalist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OffPVP_SC_GetPVPRecordResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_datalist;
        break;
      }

      // repeated .proto.message.OffPVPRecord datalist = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_datalist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_datalist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_datalist;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OffPVP_SC_GetPVPRecordResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated .proto.message.OffPVPRecord datalist = 2;
  for (int i = 0; i < this->datalist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->datalist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OffPVP_SC_GetPVPRecordResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated .proto.message.OffPVPRecord datalist = 2;
  for (int i = 0; i < this->datalist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->datalist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OffPVP_SC_GetPVPRecordResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated .proto.message.OffPVPRecord datalist = 2;
  total_size += 1 * this->datalist_size();
  for (int i = 0; i < this->datalist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->datalist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OffPVP_SC_GetPVPRecordResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OffPVP_SC_GetPVPRecordResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OffPVP_SC_GetPVPRecordResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OffPVP_SC_GetPVPRecordResult::MergeFrom(const OffPVP_SC_GetPVPRecordResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  datalist_.MergeFrom(from.datalist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OffPVP_SC_GetPVPRecordResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OffPVP_SC_GetPVPRecordResult::CopyFrom(const OffPVP_SC_GetPVPRecordResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OffPVP_SC_GetPVPRecordResult::IsInitialized() const {

  return true;
}

void OffPVP_SC_GetPVPRecordResult::Swap(OffPVP_SC_GetPVPRecordResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    datalist_.Swap(&other->datalist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OffPVP_SC_GetPVPRecordResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OffPVP_SC_GetPVPRecordResult_descriptor_;
  metadata.reflection = OffPVP_SC_GetPVPRecordResult_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace proto

// @@protoc_insertion_point(global_scope)
