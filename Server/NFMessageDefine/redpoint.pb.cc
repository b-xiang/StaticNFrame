// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: redpoint.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "redpoint.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace message {

namespace {

const ::google::protobuf::Descriptor* RedPointInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RedPointInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RedPoint_SC_UpdateRedPointData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RedPoint_SC_UpdateRedPointData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_redpoint_2eproto() {
  protobuf_AddDesc_redpoint_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "redpoint.proto");
  GOOGLE_CHECK(file != NULL);
  RedPointInfo_descriptor_ = file->message_type(0);
  static const int RedPointInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedPointInfo, nincid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedPointInfo, nid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedPointInfo, nstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedPointInfo, ntype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedPointInfo, nstrparam_),
  };
  RedPointInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RedPointInfo_descriptor_,
      RedPointInfo::default_instance_,
      RedPointInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedPointInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedPointInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RedPointInfo));
  RedPoint_SC_UpdateRedPointData_descriptor_ = file->message_type(1);
  static const int RedPoint_SC_UpdateRedPointData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedPoint_SC_UpdateRedPointData, infolist_),
  };
  RedPoint_SC_UpdateRedPointData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RedPoint_SC_UpdateRedPointData_descriptor_,
      RedPoint_SC_UpdateRedPointData::default_instance_,
      RedPoint_SC_UpdateRedPointData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedPoint_SC_UpdateRedPointData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedPoint_SC_UpdateRedPointData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RedPoint_SC_UpdateRedPointData));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_redpoint_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RedPointInfo_descriptor_, &RedPointInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RedPoint_SC_UpdateRedPointData_descriptor_, &RedPoint_SC_UpdateRedPointData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_redpoint_2eproto() {
  delete RedPointInfo::default_instance_;
  delete RedPointInfo_reflection_;
  delete RedPoint_SC_UpdateRedPointData::default_instance_;
  delete RedPoint_SC_UpdateRedPointData_reflection_;
}

void protobuf_AddDesc_redpoint_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016redpoint.proto\022\rproto.message\"^\n\014RedPo"
    "intInfo\022\016\n\006nIncID\030\001 \002(\005\022\013\n\003nID\030\002 \002(\005\022\017\n\007"
    "nStatus\030\003 \001(\005\022\r\n\005nType\030\004 \001(\005\022\021\n\tnStrPara"
    "m\030\005 \001(\t\"O\n\036RedPoint_SC_UpdateRedPointDat"
    "a\022-\n\010infoList\030\001 \003(\0132\033.proto.message.RedP"
    "ointInfoB\017\n\rproto.message", 225);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "redpoint.proto", &protobuf_RegisterTypes);
  RedPointInfo::default_instance_ = new RedPointInfo();
  RedPoint_SC_UpdateRedPointData::default_instance_ = new RedPoint_SC_UpdateRedPointData();
  RedPointInfo::default_instance_->InitAsDefaultInstance();
  RedPoint_SC_UpdateRedPointData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_redpoint_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_redpoint_2eproto {
  StaticDescriptorInitializer_redpoint_2eproto() {
    protobuf_AddDesc_redpoint_2eproto();
  }
} static_descriptor_initializer_redpoint_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int RedPointInfo::kNIncIDFieldNumber;
const int RedPointInfo::kNIDFieldNumber;
const int RedPointInfo::kNStatusFieldNumber;
const int RedPointInfo::kNTypeFieldNumber;
const int RedPointInfo::kNStrParamFieldNumber;
#endif  // !_MSC_VER

RedPointInfo::RedPointInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RedPointInfo::InitAsDefaultInstance() {
}

RedPointInfo::RedPointInfo(const RedPointInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RedPointInfo::SharedCtor() {
  _cached_size_ = 0;
  nincid_ = 0;
  nid_ = 0;
  nstatus_ = 0;
  ntype_ = 0;
  nstrparam_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RedPointInfo::~RedPointInfo() {
  SharedDtor();
}

void RedPointInfo::SharedDtor() {
  if (nstrparam_ != &::google::protobuf::internal::kEmptyString) {
    delete nstrparam_;
  }
  if (this != default_instance_) {
  }
}

void RedPointInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RedPointInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RedPointInfo_descriptor_;
}

const RedPointInfo& RedPointInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_redpoint_2eproto();
  return *default_instance_;
}

RedPointInfo* RedPointInfo::default_instance_ = NULL;

RedPointInfo* RedPointInfo::New() const {
  return new RedPointInfo;
}

void RedPointInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nincid_ = 0;
    nid_ = 0;
    nstatus_ = 0;
    ntype_ = 0;
    if (has_nstrparam()) {
      if (nstrparam_ != &::google::protobuf::internal::kEmptyString) {
        nstrparam_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RedPointInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 nIncID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nincid_)));
          set_has_nincid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nID;
        break;
      }

      // required int32 nID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nid_)));
          set_has_nid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nStatus;
        break;
      }

      // optional int32 nStatus = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nstatus_)));
          set_has_nstatus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_nType;
        break;
      }

      // optional int32 nType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ntype_)));
          set_has_ntype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_nStrParam;
        break;
      }

      // optional string nStrParam = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nStrParam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nstrparam()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nstrparam().data(), this->nstrparam().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RedPointInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 nIncID = 1;
  if (has_nincid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nincid(), output);
  }

  // required int32 nID = 2;
  if (has_nid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nid(), output);
  }

  // optional int32 nStatus = 3;
  if (has_nstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->nstatus(), output);
  }

  // optional int32 nType = 4;
  if (has_ntype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ntype(), output);
  }

  // optional string nStrParam = 5;
  if (has_nstrparam()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nstrparam().data(), this->nstrparam().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->nstrparam(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RedPointInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 nIncID = 1;
  if (has_nincid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nincid(), target);
  }

  // required int32 nID = 2;
  if (has_nid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->nid(), target);
  }

  // optional int32 nStatus = 3;
  if (has_nstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->nstatus(), target);
  }

  // optional int32 nType = 4;
  if (has_ntype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ntype(), target);
  }

  // optional string nStrParam = 5;
  if (has_nstrparam()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nstrparam().data(), this->nstrparam().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->nstrparam(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RedPointInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 nIncID = 1;
    if (has_nincid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nincid());
    }

    // required int32 nID = 2;
    if (has_nid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nid());
    }

    // optional int32 nStatus = 3;
    if (has_nstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nstatus());
    }

    // optional int32 nType = 4;
    if (has_ntype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ntype());
    }

    // optional string nStrParam = 5;
    if (has_nstrparam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nstrparam());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RedPointInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RedPointInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RedPointInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RedPointInfo::MergeFrom(const RedPointInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nincid()) {
      set_nincid(from.nincid());
    }
    if (from.has_nid()) {
      set_nid(from.nid());
    }
    if (from.has_nstatus()) {
      set_nstatus(from.nstatus());
    }
    if (from.has_ntype()) {
      set_ntype(from.ntype());
    }
    if (from.has_nstrparam()) {
      set_nstrparam(from.nstrparam());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RedPointInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RedPointInfo::CopyFrom(const RedPointInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedPointInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RedPointInfo::Swap(RedPointInfo* other) {
  if (other != this) {
    std::swap(nincid_, other->nincid_);
    std::swap(nid_, other->nid_);
    std::swap(nstatus_, other->nstatus_);
    std::swap(ntype_, other->ntype_);
    std::swap(nstrparam_, other->nstrparam_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RedPointInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RedPointInfo_descriptor_;
  metadata.reflection = RedPointInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RedPoint_SC_UpdateRedPointData::kInfoListFieldNumber;
#endif  // !_MSC_VER

RedPoint_SC_UpdateRedPointData::RedPoint_SC_UpdateRedPointData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RedPoint_SC_UpdateRedPointData::InitAsDefaultInstance() {
}

RedPoint_SC_UpdateRedPointData::RedPoint_SC_UpdateRedPointData(const RedPoint_SC_UpdateRedPointData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RedPoint_SC_UpdateRedPointData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RedPoint_SC_UpdateRedPointData::~RedPoint_SC_UpdateRedPointData() {
  SharedDtor();
}

void RedPoint_SC_UpdateRedPointData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RedPoint_SC_UpdateRedPointData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RedPoint_SC_UpdateRedPointData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RedPoint_SC_UpdateRedPointData_descriptor_;
}

const RedPoint_SC_UpdateRedPointData& RedPoint_SC_UpdateRedPointData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_redpoint_2eproto();
  return *default_instance_;
}

RedPoint_SC_UpdateRedPointData* RedPoint_SC_UpdateRedPointData::default_instance_ = NULL;

RedPoint_SC_UpdateRedPointData* RedPoint_SC_UpdateRedPointData::New() const {
  return new RedPoint_SC_UpdateRedPointData;
}

void RedPoint_SC_UpdateRedPointData::Clear() {
  infolist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RedPoint_SC_UpdateRedPointData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.message.RedPointInfo infoList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infoList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infolist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_infoList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RedPoint_SC_UpdateRedPointData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.message.RedPointInfo infoList = 1;
  for (int i = 0; i < this->infolist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->infolist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RedPoint_SC_UpdateRedPointData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.message.RedPointInfo infoList = 1;
  for (int i = 0; i < this->infolist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->infolist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RedPoint_SC_UpdateRedPointData::ByteSize() const {
  int total_size = 0;

  // repeated .proto.message.RedPointInfo infoList = 1;
  total_size += 1 * this->infolist_size();
  for (int i = 0; i < this->infolist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infolist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RedPoint_SC_UpdateRedPointData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RedPoint_SC_UpdateRedPointData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RedPoint_SC_UpdateRedPointData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RedPoint_SC_UpdateRedPointData::MergeFrom(const RedPoint_SC_UpdateRedPointData& from) {
  GOOGLE_CHECK_NE(&from, this);
  infolist_.MergeFrom(from.infolist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RedPoint_SC_UpdateRedPointData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RedPoint_SC_UpdateRedPointData::CopyFrom(const RedPoint_SC_UpdateRedPointData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedPoint_SC_UpdateRedPointData::IsInitialized() const {

  for (int i = 0; i < infolist_size(); i++) {
    if (!this->infolist(i).IsInitialized()) return false;
  }
  return true;
}

void RedPoint_SC_UpdateRedPointData::Swap(RedPoint_SC_UpdateRedPointData* other) {
  if (other != this) {
    infolist_.Swap(&other->infolist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RedPoint_SC_UpdateRedPointData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RedPoint_SC_UpdateRedPointData_descriptor_;
  metadata.reflection = RedPoint_SC_UpdateRedPointData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace proto

// @@protoc_insertion_point(global_scope)
