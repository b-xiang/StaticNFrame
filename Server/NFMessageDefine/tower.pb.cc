// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tower.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tower.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace message {

namespace {

const ::google::protobuf::Descriptor* TowerRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TowerRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* Tower_CS_EnterTowerOk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Tower_CS_EnterTowerOk_reflection_ = NULL;
const ::google::protobuf::Descriptor* Tower_SC_EnterTower_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Tower_SC_EnterTower_reflection_ = NULL;
const ::google::protobuf::Descriptor* Tower_CS_UserBuffer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Tower_CS_UserBuffer_reflection_ = NULL;
const ::google::protobuf::Descriptor* Tower_SC_AddTowerBuffer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Tower_SC_AddTowerBuffer_reflection_ = NULL;
const ::google::protobuf::Descriptor* Tower_SC_DelTowerBuffer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Tower_SC_DelTowerBuffer_reflection_ = NULL;
const ::google::protobuf::Descriptor* Tower_SC_NewFloor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Tower_SC_NewFloor_reflection_ = NULL;
const ::google::protobuf::Descriptor* Tower_CS_LeaveTower_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Tower_CS_LeaveTower_reflection_ = NULL;
const ::google::protobuf::Descriptor* Tower_SC_EndTower_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Tower_SC_EndTower_reflection_ = NULL;
const ::google::protobuf::Descriptor* Tower_CS_ReqEnterTower_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Tower_CS_ReqEnterTower_reflection_ = NULL;
const ::google::protobuf::Descriptor* Tower_CS_GetTowerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Tower_CS_GetTowerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Tower_SC_GetTowerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Tower_SC_GetTowerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Tower_CS_GetTowerRankTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Tower_CS_GetTowerRankTime_reflection_ = NULL;
const ::google::protobuf::Descriptor* Tower_SC_GetTowerRankTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Tower_SC_GetTowerRankTime_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_tower_2eproto() {
  protobuf_AddDesc_tower_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "tower.proto");
  GOOGLE_CHECK(file != NULL);
  TowerRecord_descriptor_ = file->message_type(0);
  static const int TowerRecord_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerRecord, floor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerRecord, pass_time_),
  };
  TowerRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TowerRecord_descriptor_,
      TowerRecord::default_instance_,
      TowerRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TowerRecord));
  Tower_CS_EnterTowerOk_descriptor_ = file->message_type(1);
  static const int Tower_CS_EnterTowerOk_offsets_[1] = {
  };
  Tower_CS_EnterTowerOk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Tower_CS_EnterTowerOk_descriptor_,
      Tower_CS_EnterTowerOk::default_instance_,
      Tower_CS_EnterTowerOk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tower_CS_EnterTowerOk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tower_CS_EnterTowerOk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Tower_CS_EnterTowerOk));
  Tower_SC_EnterTower_descriptor_ = file->message_type(2);
  static const int Tower_SC_EnterTower_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tower_SC_EnterTower, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tower_SC_EnterTower, pt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tower_SC_EnterTower, dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tower_SC_EnterTower, layer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tower_SC_EnterTower, team_),
  };
  Tower_SC_EnterTower_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Tower_SC_EnterTower_descriptor_,
      Tower_SC_EnterTower::default_instance_,
      Tower_SC_EnterTower_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tower_SC_EnterTower, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tower_SC_EnterTower, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Tower_SC_EnterTower));
  Tower_CS_UserBuffer_descriptor_ = file->message_type(3);
  static const int Tower_CS_UserBuffer_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tower_CS_UserBuffer, bufferid_),
  };
  Tower_CS_UserBuffer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Tower_CS_UserBuffer_descriptor_,
      Tower_CS_UserBuffer::default_instance_,
      Tower_CS_UserBuffer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tower_CS_UserBuffer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tower_CS_UserBuffer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Tower_CS_UserBuffer));
  Tower_SC_AddTowerBuffer_descriptor_ = file->message_type(4);
  static const int Tower_SC_AddTowerBuffer_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tower_SC_AddTowerBuffer, bufferid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tower_SC_AddTowerBuffer, bufferproid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tower_SC_AddTowerBuffer, pt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tower_SC_AddTowerBuffer, dir_),
  };
  Tower_SC_AddTowerBuffer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Tower_SC_AddTowerBuffer_descriptor_,
      Tower_SC_AddTowerBuffer::default_instance_,
      Tower_SC_AddTowerBuffer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tower_SC_AddTowerBuffer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tower_SC_AddTowerBuffer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Tower_SC_AddTowerBuffer));
  Tower_SC_DelTowerBuffer_descriptor_ = file->message_type(5);
  static const int Tower_SC_DelTowerBuffer_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tower_SC_DelTowerBuffer, bufferid_),
  };
  Tower_SC_DelTowerBuffer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Tower_SC_DelTowerBuffer_descriptor_,
      Tower_SC_DelTowerBuffer::default_instance_,
      Tower_SC_DelTowerBuffer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tower_SC_DelTowerBuffer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tower_SC_DelTowerBuffer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Tower_SC_DelTowerBuffer));
  Tower_SC_NewFloor_descriptor_ = file->message_type(6);
  static const int Tower_SC_NewFloor_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tower_SC_NewFloor, curfloor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tower_SC_NewFloor, npasstime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tower_SC_NewFloor, nbesttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tower_SC_NewFloor, floor_id_),
  };
  Tower_SC_NewFloor_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Tower_SC_NewFloor_descriptor_,
      Tower_SC_NewFloor::default_instance_,
      Tower_SC_NewFloor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tower_SC_NewFloor, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tower_SC_NewFloor, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Tower_SC_NewFloor));
  Tower_CS_LeaveTower_descriptor_ = file->message_type(7);
  static const int Tower_CS_LeaveTower_offsets_[1] = {
  };
  Tower_CS_LeaveTower_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Tower_CS_LeaveTower_descriptor_,
      Tower_CS_LeaveTower::default_instance_,
      Tower_CS_LeaveTower_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tower_CS_LeaveTower, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tower_CS_LeaveTower, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Tower_CS_LeaveTower));
  Tower_SC_EndTower_descriptor_ = file->message_type(8);
  static const int Tower_SC_EndTower_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tower_SC_EndTower, rt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tower_SC_EndTower, pass_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tower_SC_EndTower, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tower_SC_EndTower, times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tower_SC_EndTower, floor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tower_SC_EndTower, new_record_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tower_SC_EndTower, item_list_),
  };
  Tower_SC_EndTower_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Tower_SC_EndTower_descriptor_,
      Tower_SC_EndTower::default_instance_,
      Tower_SC_EndTower_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tower_SC_EndTower, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tower_SC_EndTower, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Tower_SC_EndTower));
  Tower_CS_ReqEnterTower_descriptor_ = file->message_type(9);
  static const int Tower_CS_ReqEnterTower_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tower_CS_ReqEnterTower, activityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tower_CS_ReqEnterTower, nfloor_),
  };
  Tower_CS_ReqEnterTower_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Tower_CS_ReqEnterTower_descriptor_,
      Tower_CS_ReqEnterTower::default_instance_,
      Tower_CS_ReqEnterTower_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tower_CS_ReqEnterTower, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tower_CS_ReqEnterTower, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Tower_CS_ReqEnterTower));
  Tower_CS_GetTowerInfo_descriptor_ = file->message_type(10);
  static const int Tower_CS_GetTowerInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tower_CS_GetTowerInfo, usual_id_),
  };
  Tower_CS_GetTowerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Tower_CS_GetTowerInfo_descriptor_,
      Tower_CS_GetTowerInfo::default_instance_,
      Tower_CS_GetTowerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tower_CS_GetTowerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tower_CS_GetTowerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Tower_CS_GetTowerInfo));
  Tower_SC_GetTowerInfo_descriptor_ = file->message_type(11);
  static const int Tower_SC_GetTowerInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tower_SC_GetTowerInfo, usual_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tower_SC_GetTowerInfo, tower_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tower_SC_GetTowerInfo, times_),
  };
  Tower_SC_GetTowerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Tower_SC_GetTowerInfo_descriptor_,
      Tower_SC_GetTowerInfo::default_instance_,
      Tower_SC_GetTowerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tower_SC_GetTowerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tower_SC_GetTowerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Tower_SC_GetTowerInfo));
  Tower_CS_GetTowerRankTime_descriptor_ = file->message_type(12);
  static const int Tower_CS_GetTowerRankTime_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tower_CS_GetTowerRankTime, usual_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tower_CS_GetTowerRankTime, floor_),
  };
  Tower_CS_GetTowerRankTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Tower_CS_GetTowerRankTime_descriptor_,
      Tower_CS_GetTowerRankTime::default_instance_,
      Tower_CS_GetTowerRankTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tower_CS_GetTowerRankTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tower_CS_GetTowerRankTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Tower_CS_GetTowerRankTime));
  Tower_SC_GetTowerRankTime_descriptor_ = file->message_type(13);
  static const int Tower_SC_GetTowerRankTime_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tower_SC_GetTowerRankTime, usual_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tower_SC_GetTowerRankTime, floor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tower_SC_GetTowerRankTime, pass_time_),
  };
  Tower_SC_GetTowerRankTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Tower_SC_GetTowerRankTime_descriptor_,
      Tower_SC_GetTowerRankTime::default_instance_,
      Tower_SC_GetTowerRankTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tower_SC_GetTowerRankTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tower_SC_GetTowerRankTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Tower_SC_GetTowerRankTime));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_tower_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TowerRecord_descriptor_, &TowerRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Tower_CS_EnterTowerOk_descriptor_, &Tower_CS_EnterTowerOk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Tower_SC_EnterTower_descriptor_, &Tower_SC_EnterTower::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Tower_CS_UserBuffer_descriptor_, &Tower_CS_UserBuffer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Tower_SC_AddTowerBuffer_descriptor_, &Tower_SC_AddTowerBuffer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Tower_SC_DelTowerBuffer_descriptor_, &Tower_SC_DelTowerBuffer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Tower_SC_NewFloor_descriptor_, &Tower_SC_NewFloor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Tower_CS_LeaveTower_descriptor_, &Tower_CS_LeaveTower::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Tower_SC_EndTower_descriptor_, &Tower_SC_EndTower::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Tower_CS_ReqEnterTower_descriptor_, &Tower_CS_ReqEnterTower::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Tower_CS_GetTowerInfo_descriptor_, &Tower_CS_GetTowerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Tower_SC_GetTowerInfo_descriptor_, &Tower_SC_GetTowerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Tower_CS_GetTowerRankTime_descriptor_, &Tower_CS_GetTowerRankTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Tower_SC_GetTowerRankTime_descriptor_, &Tower_SC_GetTowerRankTime::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_tower_2eproto() {
  delete TowerRecord::default_instance_;
  delete TowerRecord_reflection_;
  delete Tower_CS_EnterTowerOk::default_instance_;
  delete Tower_CS_EnterTowerOk_reflection_;
  delete Tower_SC_EnterTower::default_instance_;
  delete Tower_SC_EnterTower_reflection_;
  delete Tower_CS_UserBuffer::default_instance_;
  delete Tower_CS_UserBuffer_reflection_;
  delete Tower_SC_AddTowerBuffer::default_instance_;
  delete Tower_SC_AddTowerBuffer_reflection_;
  delete Tower_SC_DelTowerBuffer::default_instance_;
  delete Tower_SC_DelTowerBuffer_reflection_;
  delete Tower_SC_NewFloor::default_instance_;
  delete Tower_SC_NewFloor_reflection_;
  delete Tower_CS_LeaveTower::default_instance_;
  delete Tower_CS_LeaveTower_reflection_;
  delete Tower_SC_EndTower::default_instance_;
  delete Tower_SC_EndTower_reflection_;
  delete Tower_CS_ReqEnterTower::default_instance_;
  delete Tower_CS_ReqEnterTower_reflection_;
  delete Tower_CS_GetTowerInfo::default_instance_;
  delete Tower_CS_GetTowerInfo_reflection_;
  delete Tower_SC_GetTowerInfo::default_instance_;
  delete Tower_SC_GetTowerInfo_reflection_;
  delete Tower_CS_GetTowerRankTime::default_instance_;
  delete Tower_CS_GetTowerRankTime_reflection_;
  delete Tower_SC_GetTowerRankTime::default_instance_;
  delete Tower_SC_GetTowerRankTime_reflection_;
}

void protobuf_AddDesc_tower_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::proto::message::protobuf_AddDesc_common_2eproto();
  ::proto::message::protobuf_AddDesc_dungeon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013tower.proto\022\rproto.message\032\014common.pro"
    "to\032\rdungeon.proto\"/\n\013TowerRecord\022\r\n\005floo"
    "r\030\001 \001(\005\022\021\n\tpass_time\030\002 \001(\005\"\027\n\025Tower_CS_E"
    "nterTowerOk\"r\n\023Tower_SC_EnterTower\022\r\n\005ma"
    "pid\030\001 \002(\r\022\"\n\002pt\030\002 \001(\0132\026.proto.message.Po"
    "int3D\022\013\n\003dir\030\003 \001(\002\022\r\n\005layer\030\004 \001(\005\022\014\n\004tea"
    "m\030\005 \001(\005\"\'\n\023Tower_CS_UserBuffer\022\020\n\010buffer"
    "Id\030\001 \002(\r\"q\n\027Tower_SC_AddTowerBuffer\022\020\n\010b"
    "ufferId\030\001 \002(\r\022\023\n\013bufferProId\030\002 \002(\r\022\"\n\002pt"
    "\030\003 \001(\0132\026.proto.message.Point3D\022\013\n\003dir\030\004 "
    "\001(\002\"+\n\027Tower_SC_DelTowerBuffer\022\020\n\010buffer"
    "Id\030\001 \002(\r\"]\n\021Tower_SC_NewFloor\022\020\n\010curFloo"
    "r\030\001 \002(\005\022\021\n\tnPassTime\030\002 \002(\005\022\021\n\tnBestTime\030"
    "\003 \002(\005\022\020\n\010floor_id\030\004 \001(\005\"\025\n\023Tower_CS_Leav"
    "eTower\"\240\001\n\021Tower_SC_EndTower\022\n\n\002rt\030\001 \002(\005"
    "\022\021\n\tpass_time\030\002 \001(\005\022\014\n\004rank\030\003 \001(\005\022\r\n\005tim"
    "es\030\004 \001(\005\022\r\n\005floor\030\005 \001(\005\022\022\n\nnew_record\030\006 "
    "\001(\005\022,\n\titem_list\030\007 \003(\0132\031.proto.message.R"
    "ewardItem\"<\n\026Tower_CS_ReqEnterTower\022\022\n\na"
    "ctivityid\030\001 \001(\005\022\016\n\006nfloor\030\002 \001(\005\")\n\025Tower"
    "_CS_GetTowerInfo\022\020\n\010usual_id\030\001 \001(\005\"h\n\025To"
    "wer_SC_GetTowerInfo\022\020\n\010usual_id\030\001 \001(\005\022.\n"
    "\ntower_list\030\002 \003(\0132\032.proto.message.TowerR"
    "ecord\022\r\n\005times\030\003 \001(\005\"<\n\031Tower_CS_GetTowe"
    "rRankTime\022\020\n\010usual_id\030\001 \001(\005\022\r\n\005floor\030\002 \001"
    "(\005\"O\n\031Tower_SC_GetTowerRankTime\022\020\n\010usual"
    "_id\030\001 \001(\005\022\r\n\005floor\030\002 \001(\005\022\021\n\tpass_time\030\003 "
    "\001(\005", 1083);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tower.proto", &protobuf_RegisterTypes);
  TowerRecord::default_instance_ = new TowerRecord();
  Tower_CS_EnterTowerOk::default_instance_ = new Tower_CS_EnterTowerOk();
  Tower_SC_EnterTower::default_instance_ = new Tower_SC_EnterTower();
  Tower_CS_UserBuffer::default_instance_ = new Tower_CS_UserBuffer();
  Tower_SC_AddTowerBuffer::default_instance_ = new Tower_SC_AddTowerBuffer();
  Tower_SC_DelTowerBuffer::default_instance_ = new Tower_SC_DelTowerBuffer();
  Tower_SC_NewFloor::default_instance_ = new Tower_SC_NewFloor();
  Tower_CS_LeaveTower::default_instance_ = new Tower_CS_LeaveTower();
  Tower_SC_EndTower::default_instance_ = new Tower_SC_EndTower();
  Tower_CS_ReqEnterTower::default_instance_ = new Tower_CS_ReqEnterTower();
  Tower_CS_GetTowerInfo::default_instance_ = new Tower_CS_GetTowerInfo();
  Tower_SC_GetTowerInfo::default_instance_ = new Tower_SC_GetTowerInfo();
  Tower_CS_GetTowerRankTime::default_instance_ = new Tower_CS_GetTowerRankTime();
  Tower_SC_GetTowerRankTime::default_instance_ = new Tower_SC_GetTowerRankTime();
  TowerRecord::default_instance_->InitAsDefaultInstance();
  Tower_CS_EnterTowerOk::default_instance_->InitAsDefaultInstance();
  Tower_SC_EnterTower::default_instance_->InitAsDefaultInstance();
  Tower_CS_UserBuffer::default_instance_->InitAsDefaultInstance();
  Tower_SC_AddTowerBuffer::default_instance_->InitAsDefaultInstance();
  Tower_SC_DelTowerBuffer::default_instance_->InitAsDefaultInstance();
  Tower_SC_NewFloor::default_instance_->InitAsDefaultInstance();
  Tower_CS_LeaveTower::default_instance_->InitAsDefaultInstance();
  Tower_SC_EndTower::default_instance_->InitAsDefaultInstance();
  Tower_CS_ReqEnterTower::default_instance_->InitAsDefaultInstance();
  Tower_CS_GetTowerInfo::default_instance_->InitAsDefaultInstance();
  Tower_SC_GetTowerInfo::default_instance_->InitAsDefaultInstance();
  Tower_CS_GetTowerRankTime::default_instance_->InitAsDefaultInstance();
  Tower_SC_GetTowerRankTime::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tower_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tower_2eproto {
  StaticDescriptorInitializer_tower_2eproto() {
    protobuf_AddDesc_tower_2eproto();
  }
} static_descriptor_initializer_tower_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TowerRecord::kFloorFieldNumber;
const int TowerRecord::kPassTimeFieldNumber;
#endif  // !_MSC_VER

TowerRecord::TowerRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TowerRecord::InitAsDefaultInstance() {
}

TowerRecord::TowerRecord(const TowerRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TowerRecord::SharedCtor() {
  _cached_size_ = 0;
  floor_ = 0;
  pass_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TowerRecord::~TowerRecord() {
  SharedDtor();
}

void TowerRecord::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TowerRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TowerRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TowerRecord_descriptor_;
}

const TowerRecord& TowerRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tower_2eproto();
  return *default_instance_;
}

TowerRecord* TowerRecord::default_instance_ = NULL;

TowerRecord* TowerRecord::New() const {
  return new TowerRecord;
}

void TowerRecord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    floor_ = 0;
    pass_time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TowerRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 floor = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &floor_)));
          set_has_floor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pass_time;
        break;
      }

      // optional int32 pass_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pass_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pass_time_)));
          set_has_pass_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TowerRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 floor = 1;
  if (has_floor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->floor(), output);
  }

  // optional int32 pass_time = 2;
  if (has_pass_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pass_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TowerRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 floor = 1;
  if (has_floor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->floor(), target);
  }

  // optional int32 pass_time = 2;
  if (has_pass_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pass_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TowerRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 floor = 1;
    if (has_floor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->floor());
    }

    // optional int32 pass_time = 2;
    if (has_pass_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pass_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TowerRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TowerRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TowerRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TowerRecord::MergeFrom(const TowerRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_floor()) {
      set_floor(from.floor());
    }
    if (from.has_pass_time()) {
      set_pass_time(from.pass_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TowerRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TowerRecord::CopyFrom(const TowerRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TowerRecord::IsInitialized() const {

  return true;
}

void TowerRecord::Swap(TowerRecord* other) {
  if (other != this) {
    std::swap(floor_, other->floor_);
    std::swap(pass_time_, other->pass_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TowerRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TowerRecord_descriptor_;
  metadata.reflection = TowerRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Tower_CS_EnterTowerOk::Tower_CS_EnterTowerOk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Tower_CS_EnterTowerOk::InitAsDefaultInstance() {
}

Tower_CS_EnterTowerOk::Tower_CS_EnterTowerOk(const Tower_CS_EnterTowerOk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Tower_CS_EnterTowerOk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Tower_CS_EnterTowerOk::~Tower_CS_EnterTowerOk() {
  SharedDtor();
}

void Tower_CS_EnterTowerOk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Tower_CS_EnterTowerOk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Tower_CS_EnterTowerOk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Tower_CS_EnterTowerOk_descriptor_;
}

const Tower_CS_EnterTowerOk& Tower_CS_EnterTowerOk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tower_2eproto();
  return *default_instance_;
}

Tower_CS_EnterTowerOk* Tower_CS_EnterTowerOk::default_instance_ = NULL;

Tower_CS_EnterTowerOk* Tower_CS_EnterTowerOk::New() const {
  return new Tower_CS_EnterTowerOk;
}

void Tower_CS_EnterTowerOk::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Tower_CS_EnterTowerOk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Tower_CS_EnterTowerOk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Tower_CS_EnterTowerOk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Tower_CS_EnterTowerOk::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Tower_CS_EnterTowerOk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Tower_CS_EnterTowerOk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Tower_CS_EnterTowerOk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Tower_CS_EnterTowerOk::MergeFrom(const Tower_CS_EnterTowerOk& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Tower_CS_EnterTowerOk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tower_CS_EnterTowerOk::CopyFrom(const Tower_CS_EnterTowerOk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tower_CS_EnterTowerOk::IsInitialized() const {

  return true;
}

void Tower_CS_EnterTowerOk::Swap(Tower_CS_EnterTowerOk* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Tower_CS_EnterTowerOk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Tower_CS_EnterTowerOk_descriptor_;
  metadata.reflection = Tower_CS_EnterTowerOk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Tower_SC_EnterTower::kMapidFieldNumber;
const int Tower_SC_EnterTower::kPtFieldNumber;
const int Tower_SC_EnterTower::kDirFieldNumber;
const int Tower_SC_EnterTower::kLayerFieldNumber;
const int Tower_SC_EnterTower::kTeamFieldNumber;
#endif  // !_MSC_VER

Tower_SC_EnterTower::Tower_SC_EnterTower()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Tower_SC_EnterTower::InitAsDefaultInstance() {
  pt_ = const_cast< ::proto::message::Point3D*>(&::proto::message::Point3D::default_instance());
}

Tower_SC_EnterTower::Tower_SC_EnterTower(const Tower_SC_EnterTower& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Tower_SC_EnterTower::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = 0u;
  pt_ = NULL;
  dir_ = 0;
  layer_ = 0;
  team_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Tower_SC_EnterTower::~Tower_SC_EnterTower() {
  SharedDtor();
}

void Tower_SC_EnterTower::SharedDtor() {
  if (this != default_instance_) {
    delete pt_;
  }
}

void Tower_SC_EnterTower::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Tower_SC_EnterTower::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Tower_SC_EnterTower_descriptor_;
}

const Tower_SC_EnterTower& Tower_SC_EnterTower::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tower_2eproto();
  return *default_instance_;
}

Tower_SC_EnterTower* Tower_SC_EnterTower::default_instance_ = NULL;

Tower_SC_EnterTower* Tower_SC_EnterTower::New() const {
  return new Tower_SC_EnterTower;
}

void Tower_SC_EnterTower::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mapid_ = 0u;
    if (has_pt()) {
      if (pt_ != NULL) pt_->::proto::message::Point3D::Clear();
    }
    dir_ = 0;
    layer_ = 0;
    team_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Tower_SC_EnterTower::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 mapid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pt;
        break;
      }

      // optional .proto.message.Point3D pt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_dir;
        break;
      }

      // optional float dir = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dir_)));
          set_has_dir();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_layer;
        break;
      }

      // optional int32 layer = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_layer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &layer_)));
          set_has_layer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_team;
        break;
      }

      // optional int32 team = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &team_)));
          set_has_team();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Tower_SC_EnterTower::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 mapid = 1;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mapid(), output);
  }

  // optional .proto.message.Point3D pt = 2;
  if (has_pt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pt(), output);
  }

  // optional float dir = 3;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->dir(), output);
  }

  // optional int32 layer = 4;
  if (has_layer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->layer(), output);
  }

  // optional int32 team = 5;
  if (has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->team(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Tower_SC_EnterTower::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 mapid = 1;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mapid(), target);
  }

  // optional .proto.message.Point3D pt = 2;
  if (has_pt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pt(), target);
  }

  // optional float dir = 3;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->dir(), target);
  }

  // optional int32 layer = 4;
  if (has_layer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->layer(), target);
  }

  // optional int32 team = 5;
  if (has_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->team(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Tower_SC_EnterTower::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 mapid = 1;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }

    // optional .proto.message.Point3D pt = 2;
    if (has_pt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pt());
    }

    // optional float dir = 3;
    if (has_dir()) {
      total_size += 1 + 4;
    }

    // optional int32 layer = 4;
    if (has_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->layer());
    }

    // optional int32 team = 5;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->team());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Tower_SC_EnterTower::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Tower_SC_EnterTower* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Tower_SC_EnterTower*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Tower_SC_EnterTower::MergeFrom(const Tower_SC_EnterTower& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_pt()) {
      mutable_pt()->::proto::message::Point3D::MergeFrom(from.pt());
    }
    if (from.has_dir()) {
      set_dir(from.dir());
    }
    if (from.has_layer()) {
      set_layer(from.layer());
    }
    if (from.has_team()) {
      set_team(from.team());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Tower_SC_EnterTower::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tower_SC_EnterTower::CopyFrom(const Tower_SC_EnterTower& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tower_SC_EnterTower::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Tower_SC_EnterTower::Swap(Tower_SC_EnterTower* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    std::swap(pt_, other->pt_);
    std::swap(dir_, other->dir_);
    std::swap(layer_, other->layer_);
    std::swap(team_, other->team_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Tower_SC_EnterTower::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Tower_SC_EnterTower_descriptor_;
  metadata.reflection = Tower_SC_EnterTower_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Tower_CS_UserBuffer::kBufferIdFieldNumber;
#endif  // !_MSC_VER

Tower_CS_UserBuffer::Tower_CS_UserBuffer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Tower_CS_UserBuffer::InitAsDefaultInstance() {
}

Tower_CS_UserBuffer::Tower_CS_UserBuffer(const Tower_CS_UserBuffer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Tower_CS_UserBuffer::SharedCtor() {
  _cached_size_ = 0;
  bufferid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Tower_CS_UserBuffer::~Tower_CS_UserBuffer() {
  SharedDtor();
}

void Tower_CS_UserBuffer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Tower_CS_UserBuffer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Tower_CS_UserBuffer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Tower_CS_UserBuffer_descriptor_;
}

const Tower_CS_UserBuffer& Tower_CS_UserBuffer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tower_2eproto();
  return *default_instance_;
}

Tower_CS_UserBuffer* Tower_CS_UserBuffer::default_instance_ = NULL;

Tower_CS_UserBuffer* Tower_CS_UserBuffer::New() const {
  return new Tower_CS_UserBuffer;
}

void Tower_CS_UserBuffer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bufferid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Tower_CS_UserBuffer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 bufferId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bufferid_)));
          set_has_bufferid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Tower_CS_UserBuffer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 bufferId = 1;
  if (has_bufferid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bufferid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Tower_CS_UserBuffer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 bufferId = 1;
  if (has_bufferid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bufferid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Tower_CS_UserBuffer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 bufferId = 1;
    if (has_bufferid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bufferid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Tower_CS_UserBuffer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Tower_CS_UserBuffer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Tower_CS_UserBuffer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Tower_CS_UserBuffer::MergeFrom(const Tower_CS_UserBuffer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bufferid()) {
      set_bufferid(from.bufferid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Tower_CS_UserBuffer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tower_CS_UserBuffer::CopyFrom(const Tower_CS_UserBuffer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tower_CS_UserBuffer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Tower_CS_UserBuffer::Swap(Tower_CS_UserBuffer* other) {
  if (other != this) {
    std::swap(bufferid_, other->bufferid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Tower_CS_UserBuffer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Tower_CS_UserBuffer_descriptor_;
  metadata.reflection = Tower_CS_UserBuffer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Tower_SC_AddTowerBuffer::kBufferIdFieldNumber;
const int Tower_SC_AddTowerBuffer::kBufferProIdFieldNumber;
const int Tower_SC_AddTowerBuffer::kPtFieldNumber;
const int Tower_SC_AddTowerBuffer::kDirFieldNumber;
#endif  // !_MSC_VER

Tower_SC_AddTowerBuffer::Tower_SC_AddTowerBuffer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Tower_SC_AddTowerBuffer::InitAsDefaultInstance() {
  pt_ = const_cast< ::proto::message::Point3D*>(&::proto::message::Point3D::default_instance());
}

Tower_SC_AddTowerBuffer::Tower_SC_AddTowerBuffer(const Tower_SC_AddTowerBuffer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Tower_SC_AddTowerBuffer::SharedCtor() {
  _cached_size_ = 0;
  bufferid_ = 0u;
  bufferproid_ = 0u;
  pt_ = NULL;
  dir_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Tower_SC_AddTowerBuffer::~Tower_SC_AddTowerBuffer() {
  SharedDtor();
}

void Tower_SC_AddTowerBuffer::SharedDtor() {
  if (this != default_instance_) {
    delete pt_;
  }
}

void Tower_SC_AddTowerBuffer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Tower_SC_AddTowerBuffer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Tower_SC_AddTowerBuffer_descriptor_;
}

const Tower_SC_AddTowerBuffer& Tower_SC_AddTowerBuffer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tower_2eproto();
  return *default_instance_;
}

Tower_SC_AddTowerBuffer* Tower_SC_AddTowerBuffer::default_instance_ = NULL;

Tower_SC_AddTowerBuffer* Tower_SC_AddTowerBuffer::New() const {
  return new Tower_SC_AddTowerBuffer;
}

void Tower_SC_AddTowerBuffer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bufferid_ = 0u;
    bufferproid_ = 0u;
    if (has_pt()) {
      if (pt_ != NULL) pt_->::proto::message::Point3D::Clear();
    }
    dir_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Tower_SC_AddTowerBuffer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 bufferId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bufferid_)));
          set_has_bufferid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bufferProId;
        break;
      }

      // required uint32 bufferProId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bufferProId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bufferproid_)));
          set_has_bufferproid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pt;
        break;
      }

      // optional .proto.message.Point3D pt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_dir;
        break;
      }

      // optional float dir = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dir_)));
          set_has_dir();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Tower_SC_AddTowerBuffer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 bufferId = 1;
  if (has_bufferid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bufferid(), output);
  }

  // required uint32 bufferProId = 2;
  if (has_bufferproid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->bufferproid(), output);
  }

  // optional .proto.message.Point3D pt = 3;
  if (has_pt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pt(), output);
  }

  // optional float dir = 4;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->dir(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Tower_SC_AddTowerBuffer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 bufferId = 1;
  if (has_bufferid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bufferid(), target);
  }

  // required uint32 bufferProId = 2;
  if (has_bufferproid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->bufferproid(), target);
  }

  // optional .proto.message.Point3D pt = 3;
  if (has_pt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pt(), target);
  }

  // optional float dir = 4;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->dir(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Tower_SC_AddTowerBuffer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 bufferId = 1;
    if (has_bufferid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bufferid());
    }

    // required uint32 bufferProId = 2;
    if (has_bufferproid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bufferproid());
    }

    // optional .proto.message.Point3D pt = 3;
    if (has_pt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pt());
    }

    // optional float dir = 4;
    if (has_dir()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Tower_SC_AddTowerBuffer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Tower_SC_AddTowerBuffer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Tower_SC_AddTowerBuffer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Tower_SC_AddTowerBuffer::MergeFrom(const Tower_SC_AddTowerBuffer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bufferid()) {
      set_bufferid(from.bufferid());
    }
    if (from.has_bufferproid()) {
      set_bufferproid(from.bufferproid());
    }
    if (from.has_pt()) {
      mutable_pt()->::proto::message::Point3D::MergeFrom(from.pt());
    }
    if (from.has_dir()) {
      set_dir(from.dir());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Tower_SC_AddTowerBuffer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tower_SC_AddTowerBuffer::CopyFrom(const Tower_SC_AddTowerBuffer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tower_SC_AddTowerBuffer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Tower_SC_AddTowerBuffer::Swap(Tower_SC_AddTowerBuffer* other) {
  if (other != this) {
    std::swap(bufferid_, other->bufferid_);
    std::swap(bufferproid_, other->bufferproid_);
    std::swap(pt_, other->pt_);
    std::swap(dir_, other->dir_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Tower_SC_AddTowerBuffer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Tower_SC_AddTowerBuffer_descriptor_;
  metadata.reflection = Tower_SC_AddTowerBuffer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Tower_SC_DelTowerBuffer::kBufferIdFieldNumber;
#endif  // !_MSC_VER

Tower_SC_DelTowerBuffer::Tower_SC_DelTowerBuffer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Tower_SC_DelTowerBuffer::InitAsDefaultInstance() {
}

Tower_SC_DelTowerBuffer::Tower_SC_DelTowerBuffer(const Tower_SC_DelTowerBuffer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Tower_SC_DelTowerBuffer::SharedCtor() {
  _cached_size_ = 0;
  bufferid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Tower_SC_DelTowerBuffer::~Tower_SC_DelTowerBuffer() {
  SharedDtor();
}

void Tower_SC_DelTowerBuffer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Tower_SC_DelTowerBuffer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Tower_SC_DelTowerBuffer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Tower_SC_DelTowerBuffer_descriptor_;
}

const Tower_SC_DelTowerBuffer& Tower_SC_DelTowerBuffer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tower_2eproto();
  return *default_instance_;
}

Tower_SC_DelTowerBuffer* Tower_SC_DelTowerBuffer::default_instance_ = NULL;

Tower_SC_DelTowerBuffer* Tower_SC_DelTowerBuffer::New() const {
  return new Tower_SC_DelTowerBuffer;
}

void Tower_SC_DelTowerBuffer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bufferid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Tower_SC_DelTowerBuffer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 bufferId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bufferid_)));
          set_has_bufferid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Tower_SC_DelTowerBuffer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 bufferId = 1;
  if (has_bufferid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bufferid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Tower_SC_DelTowerBuffer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 bufferId = 1;
  if (has_bufferid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bufferid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Tower_SC_DelTowerBuffer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 bufferId = 1;
    if (has_bufferid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bufferid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Tower_SC_DelTowerBuffer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Tower_SC_DelTowerBuffer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Tower_SC_DelTowerBuffer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Tower_SC_DelTowerBuffer::MergeFrom(const Tower_SC_DelTowerBuffer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bufferid()) {
      set_bufferid(from.bufferid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Tower_SC_DelTowerBuffer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tower_SC_DelTowerBuffer::CopyFrom(const Tower_SC_DelTowerBuffer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tower_SC_DelTowerBuffer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Tower_SC_DelTowerBuffer::Swap(Tower_SC_DelTowerBuffer* other) {
  if (other != this) {
    std::swap(bufferid_, other->bufferid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Tower_SC_DelTowerBuffer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Tower_SC_DelTowerBuffer_descriptor_;
  metadata.reflection = Tower_SC_DelTowerBuffer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Tower_SC_NewFloor::kCurFloorFieldNumber;
const int Tower_SC_NewFloor::kNPassTimeFieldNumber;
const int Tower_SC_NewFloor::kNBestTimeFieldNumber;
const int Tower_SC_NewFloor::kFloorIdFieldNumber;
#endif  // !_MSC_VER

Tower_SC_NewFloor::Tower_SC_NewFloor()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Tower_SC_NewFloor::InitAsDefaultInstance() {
}

Tower_SC_NewFloor::Tower_SC_NewFloor(const Tower_SC_NewFloor& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Tower_SC_NewFloor::SharedCtor() {
  _cached_size_ = 0;
  curfloor_ = 0;
  npasstime_ = 0;
  nbesttime_ = 0;
  floor_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Tower_SC_NewFloor::~Tower_SC_NewFloor() {
  SharedDtor();
}

void Tower_SC_NewFloor::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Tower_SC_NewFloor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Tower_SC_NewFloor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Tower_SC_NewFloor_descriptor_;
}

const Tower_SC_NewFloor& Tower_SC_NewFloor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tower_2eproto();
  return *default_instance_;
}

Tower_SC_NewFloor* Tower_SC_NewFloor::default_instance_ = NULL;

Tower_SC_NewFloor* Tower_SC_NewFloor::New() const {
  return new Tower_SC_NewFloor;
}

void Tower_SC_NewFloor::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    curfloor_ = 0;
    npasstime_ = 0;
    nbesttime_ = 0;
    floor_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Tower_SC_NewFloor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 curFloor = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curfloor_)));
          set_has_curfloor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nPassTime;
        break;
      }

      // required int32 nPassTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nPassTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &npasstime_)));
          set_has_npasstime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nBestTime;
        break;
      }

      // required int32 nBestTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nBestTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nbesttime_)));
          set_has_nbesttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_floor_id;
        break;
      }

      // optional int32 floor_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_floor_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &floor_id_)));
          set_has_floor_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Tower_SC_NewFloor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 curFloor = 1;
  if (has_curfloor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->curfloor(), output);
  }

  // required int32 nPassTime = 2;
  if (has_npasstime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->npasstime(), output);
  }

  // required int32 nBestTime = 3;
  if (has_nbesttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->nbesttime(), output);
  }

  // optional int32 floor_id = 4;
  if (has_floor_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->floor_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Tower_SC_NewFloor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 curFloor = 1;
  if (has_curfloor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->curfloor(), target);
  }

  // required int32 nPassTime = 2;
  if (has_npasstime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->npasstime(), target);
  }

  // required int32 nBestTime = 3;
  if (has_nbesttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->nbesttime(), target);
  }

  // optional int32 floor_id = 4;
  if (has_floor_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->floor_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Tower_SC_NewFloor::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 curFloor = 1;
    if (has_curfloor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curfloor());
    }

    // required int32 nPassTime = 2;
    if (has_npasstime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->npasstime());
    }

    // required int32 nBestTime = 3;
    if (has_nbesttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nbesttime());
    }

    // optional int32 floor_id = 4;
    if (has_floor_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->floor_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Tower_SC_NewFloor::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Tower_SC_NewFloor* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Tower_SC_NewFloor*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Tower_SC_NewFloor::MergeFrom(const Tower_SC_NewFloor& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_curfloor()) {
      set_curfloor(from.curfloor());
    }
    if (from.has_npasstime()) {
      set_npasstime(from.npasstime());
    }
    if (from.has_nbesttime()) {
      set_nbesttime(from.nbesttime());
    }
    if (from.has_floor_id()) {
      set_floor_id(from.floor_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Tower_SC_NewFloor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tower_SC_NewFloor::CopyFrom(const Tower_SC_NewFloor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tower_SC_NewFloor::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Tower_SC_NewFloor::Swap(Tower_SC_NewFloor* other) {
  if (other != this) {
    std::swap(curfloor_, other->curfloor_);
    std::swap(npasstime_, other->npasstime_);
    std::swap(nbesttime_, other->nbesttime_);
    std::swap(floor_id_, other->floor_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Tower_SC_NewFloor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Tower_SC_NewFloor_descriptor_;
  metadata.reflection = Tower_SC_NewFloor_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Tower_CS_LeaveTower::Tower_CS_LeaveTower()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Tower_CS_LeaveTower::InitAsDefaultInstance() {
}

Tower_CS_LeaveTower::Tower_CS_LeaveTower(const Tower_CS_LeaveTower& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Tower_CS_LeaveTower::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Tower_CS_LeaveTower::~Tower_CS_LeaveTower() {
  SharedDtor();
}

void Tower_CS_LeaveTower::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Tower_CS_LeaveTower::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Tower_CS_LeaveTower::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Tower_CS_LeaveTower_descriptor_;
}

const Tower_CS_LeaveTower& Tower_CS_LeaveTower::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tower_2eproto();
  return *default_instance_;
}

Tower_CS_LeaveTower* Tower_CS_LeaveTower::default_instance_ = NULL;

Tower_CS_LeaveTower* Tower_CS_LeaveTower::New() const {
  return new Tower_CS_LeaveTower;
}

void Tower_CS_LeaveTower::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Tower_CS_LeaveTower::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Tower_CS_LeaveTower::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Tower_CS_LeaveTower::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Tower_CS_LeaveTower::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Tower_CS_LeaveTower::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Tower_CS_LeaveTower* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Tower_CS_LeaveTower*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Tower_CS_LeaveTower::MergeFrom(const Tower_CS_LeaveTower& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Tower_CS_LeaveTower::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tower_CS_LeaveTower::CopyFrom(const Tower_CS_LeaveTower& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tower_CS_LeaveTower::IsInitialized() const {

  return true;
}

void Tower_CS_LeaveTower::Swap(Tower_CS_LeaveTower* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Tower_CS_LeaveTower::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Tower_CS_LeaveTower_descriptor_;
  metadata.reflection = Tower_CS_LeaveTower_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Tower_SC_EndTower::kRtFieldNumber;
const int Tower_SC_EndTower::kPassTimeFieldNumber;
const int Tower_SC_EndTower::kRankFieldNumber;
const int Tower_SC_EndTower::kTimesFieldNumber;
const int Tower_SC_EndTower::kFloorFieldNumber;
const int Tower_SC_EndTower::kNewRecordFieldNumber;
const int Tower_SC_EndTower::kItemListFieldNumber;
#endif  // !_MSC_VER

Tower_SC_EndTower::Tower_SC_EndTower()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Tower_SC_EndTower::InitAsDefaultInstance() {
}

Tower_SC_EndTower::Tower_SC_EndTower(const Tower_SC_EndTower& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Tower_SC_EndTower::SharedCtor() {
  _cached_size_ = 0;
  rt_ = 0;
  pass_time_ = 0;
  rank_ = 0;
  times_ = 0;
  floor_ = 0;
  new_record_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Tower_SC_EndTower::~Tower_SC_EndTower() {
  SharedDtor();
}

void Tower_SC_EndTower::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Tower_SC_EndTower::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Tower_SC_EndTower::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Tower_SC_EndTower_descriptor_;
}

const Tower_SC_EndTower& Tower_SC_EndTower::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tower_2eproto();
  return *default_instance_;
}

Tower_SC_EndTower* Tower_SC_EndTower::default_instance_ = NULL;

Tower_SC_EndTower* Tower_SC_EndTower::New() const {
  return new Tower_SC_EndTower;
}

void Tower_SC_EndTower::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rt_ = 0;
    pass_time_ = 0;
    rank_ = 0;
    times_ = 0;
    floor_ = 0;
    new_record_ = 0;
  }
  item_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Tower_SC_EndTower::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 rt = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rt_)));
          set_has_rt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pass_time;
        break;
      }

      // optional int32 pass_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pass_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pass_time_)));
          set_has_pass_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rank;
        break;
      }

      // optional int32 rank = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_times;
        break;
      }

      // optional int32 times = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_floor;
        break;
      }

      // optional int32 floor = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_floor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &floor_)));
          set_has_floor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_new_record;
        break;
      }

      // optional int32 new_record = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_record:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &new_record_)));
          set_has_new_record();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_item_list;
        break;
      }

      // repeated .proto.message.RewardItem item_list = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_item_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Tower_SC_EndTower::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 rt = 1;
  if (has_rt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rt(), output);
  }

  // optional int32 pass_time = 2;
  if (has_pass_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pass_time(), output);
  }

  // optional int32 rank = 3;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rank(), output);
  }

  // optional int32 times = 4;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->times(), output);
  }

  // optional int32 floor = 5;
  if (has_floor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->floor(), output);
  }

  // optional int32 new_record = 6;
  if (has_new_record()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->new_record(), output);
  }

  // repeated .proto.message.RewardItem item_list = 7;
  for (int i = 0; i < this->item_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->item_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Tower_SC_EndTower::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 rt = 1;
  if (has_rt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rt(), target);
  }

  // optional int32 pass_time = 2;
  if (has_pass_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pass_time(), target);
  }

  // optional int32 rank = 3;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rank(), target);
  }

  // optional int32 times = 4;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->times(), target);
  }

  // optional int32 floor = 5;
  if (has_floor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->floor(), target);
  }

  // optional int32 new_record = 6;
  if (has_new_record()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->new_record(), target);
  }

  // repeated .proto.message.RewardItem item_list = 7;
  for (int i = 0; i < this->item_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->item_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Tower_SC_EndTower::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 rt = 1;
    if (has_rt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rt());
    }

    // optional int32 pass_time = 2;
    if (has_pass_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pass_time());
    }

    // optional int32 rank = 3;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

    // optional int32 times = 4;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->times());
    }

    // optional int32 floor = 5;
    if (has_floor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->floor());
    }

    // optional int32 new_record = 6;
    if (has_new_record()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->new_record());
    }

  }
  // repeated .proto.message.RewardItem item_list = 7;
  total_size += 1 * this->item_list_size();
  for (int i = 0; i < this->item_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Tower_SC_EndTower::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Tower_SC_EndTower* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Tower_SC_EndTower*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Tower_SC_EndTower::MergeFrom(const Tower_SC_EndTower& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_list_.MergeFrom(from.item_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rt()) {
      set_rt(from.rt());
    }
    if (from.has_pass_time()) {
      set_pass_time(from.pass_time());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_times()) {
      set_times(from.times());
    }
    if (from.has_floor()) {
      set_floor(from.floor());
    }
    if (from.has_new_record()) {
      set_new_record(from.new_record());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Tower_SC_EndTower::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tower_SC_EndTower::CopyFrom(const Tower_SC_EndTower& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tower_SC_EndTower::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Tower_SC_EndTower::Swap(Tower_SC_EndTower* other) {
  if (other != this) {
    std::swap(rt_, other->rt_);
    std::swap(pass_time_, other->pass_time_);
    std::swap(rank_, other->rank_);
    std::swap(times_, other->times_);
    std::swap(floor_, other->floor_);
    std::swap(new_record_, other->new_record_);
    item_list_.Swap(&other->item_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Tower_SC_EndTower::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Tower_SC_EndTower_descriptor_;
  metadata.reflection = Tower_SC_EndTower_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Tower_CS_ReqEnterTower::kActivityidFieldNumber;
const int Tower_CS_ReqEnterTower::kNfloorFieldNumber;
#endif  // !_MSC_VER

Tower_CS_ReqEnterTower::Tower_CS_ReqEnterTower()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Tower_CS_ReqEnterTower::InitAsDefaultInstance() {
}

Tower_CS_ReqEnterTower::Tower_CS_ReqEnterTower(const Tower_CS_ReqEnterTower& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Tower_CS_ReqEnterTower::SharedCtor() {
  _cached_size_ = 0;
  activityid_ = 0;
  nfloor_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Tower_CS_ReqEnterTower::~Tower_CS_ReqEnterTower() {
  SharedDtor();
}

void Tower_CS_ReqEnterTower::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Tower_CS_ReqEnterTower::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Tower_CS_ReqEnterTower::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Tower_CS_ReqEnterTower_descriptor_;
}

const Tower_CS_ReqEnterTower& Tower_CS_ReqEnterTower::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tower_2eproto();
  return *default_instance_;
}

Tower_CS_ReqEnterTower* Tower_CS_ReqEnterTower::default_instance_ = NULL;

Tower_CS_ReqEnterTower* Tower_CS_ReqEnterTower::New() const {
  return new Tower_CS_ReqEnterTower;
}

void Tower_CS_ReqEnterTower::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    activityid_ = 0;
    nfloor_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Tower_CS_ReqEnterTower::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 activityid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &activityid_)));
          set_has_activityid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nfloor;
        break;
      }

      // optional int32 nfloor = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nfloor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nfloor_)));
          set_has_nfloor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Tower_CS_ReqEnterTower::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 activityid = 1;
  if (has_activityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->activityid(), output);
  }

  // optional int32 nfloor = 2;
  if (has_nfloor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nfloor(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Tower_CS_ReqEnterTower::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 activityid = 1;
  if (has_activityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->activityid(), target);
  }

  // optional int32 nfloor = 2;
  if (has_nfloor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->nfloor(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Tower_CS_ReqEnterTower::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 activityid = 1;
    if (has_activityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->activityid());
    }

    // optional int32 nfloor = 2;
    if (has_nfloor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nfloor());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Tower_CS_ReqEnterTower::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Tower_CS_ReqEnterTower* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Tower_CS_ReqEnterTower*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Tower_CS_ReqEnterTower::MergeFrom(const Tower_CS_ReqEnterTower& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activityid()) {
      set_activityid(from.activityid());
    }
    if (from.has_nfloor()) {
      set_nfloor(from.nfloor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Tower_CS_ReqEnterTower::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tower_CS_ReqEnterTower::CopyFrom(const Tower_CS_ReqEnterTower& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tower_CS_ReqEnterTower::IsInitialized() const {

  return true;
}

void Tower_CS_ReqEnterTower::Swap(Tower_CS_ReqEnterTower* other) {
  if (other != this) {
    std::swap(activityid_, other->activityid_);
    std::swap(nfloor_, other->nfloor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Tower_CS_ReqEnterTower::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Tower_CS_ReqEnterTower_descriptor_;
  metadata.reflection = Tower_CS_ReqEnterTower_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Tower_CS_GetTowerInfo::kUsualIdFieldNumber;
#endif  // !_MSC_VER

Tower_CS_GetTowerInfo::Tower_CS_GetTowerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Tower_CS_GetTowerInfo::InitAsDefaultInstance() {
}

Tower_CS_GetTowerInfo::Tower_CS_GetTowerInfo(const Tower_CS_GetTowerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Tower_CS_GetTowerInfo::SharedCtor() {
  _cached_size_ = 0;
  usual_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Tower_CS_GetTowerInfo::~Tower_CS_GetTowerInfo() {
  SharedDtor();
}

void Tower_CS_GetTowerInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Tower_CS_GetTowerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Tower_CS_GetTowerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Tower_CS_GetTowerInfo_descriptor_;
}

const Tower_CS_GetTowerInfo& Tower_CS_GetTowerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tower_2eproto();
  return *default_instance_;
}

Tower_CS_GetTowerInfo* Tower_CS_GetTowerInfo::default_instance_ = NULL;

Tower_CS_GetTowerInfo* Tower_CS_GetTowerInfo::New() const {
  return new Tower_CS_GetTowerInfo;
}

void Tower_CS_GetTowerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    usual_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Tower_CS_GetTowerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 usual_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usual_id_)));
          set_has_usual_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Tower_CS_GetTowerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 usual_id = 1;
  if (has_usual_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->usual_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Tower_CS_GetTowerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 usual_id = 1;
  if (has_usual_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->usual_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Tower_CS_GetTowerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 usual_id = 1;
    if (has_usual_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usual_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Tower_CS_GetTowerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Tower_CS_GetTowerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Tower_CS_GetTowerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Tower_CS_GetTowerInfo::MergeFrom(const Tower_CS_GetTowerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_usual_id()) {
      set_usual_id(from.usual_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Tower_CS_GetTowerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tower_CS_GetTowerInfo::CopyFrom(const Tower_CS_GetTowerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tower_CS_GetTowerInfo::IsInitialized() const {

  return true;
}

void Tower_CS_GetTowerInfo::Swap(Tower_CS_GetTowerInfo* other) {
  if (other != this) {
    std::swap(usual_id_, other->usual_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Tower_CS_GetTowerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Tower_CS_GetTowerInfo_descriptor_;
  metadata.reflection = Tower_CS_GetTowerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Tower_SC_GetTowerInfo::kUsualIdFieldNumber;
const int Tower_SC_GetTowerInfo::kTowerListFieldNumber;
const int Tower_SC_GetTowerInfo::kTimesFieldNumber;
#endif  // !_MSC_VER

Tower_SC_GetTowerInfo::Tower_SC_GetTowerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Tower_SC_GetTowerInfo::InitAsDefaultInstance() {
}

Tower_SC_GetTowerInfo::Tower_SC_GetTowerInfo(const Tower_SC_GetTowerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Tower_SC_GetTowerInfo::SharedCtor() {
  _cached_size_ = 0;
  usual_id_ = 0;
  times_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Tower_SC_GetTowerInfo::~Tower_SC_GetTowerInfo() {
  SharedDtor();
}

void Tower_SC_GetTowerInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Tower_SC_GetTowerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Tower_SC_GetTowerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Tower_SC_GetTowerInfo_descriptor_;
}

const Tower_SC_GetTowerInfo& Tower_SC_GetTowerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tower_2eproto();
  return *default_instance_;
}

Tower_SC_GetTowerInfo* Tower_SC_GetTowerInfo::default_instance_ = NULL;

Tower_SC_GetTowerInfo* Tower_SC_GetTowerInfo::New() const {
  return new Tower_SC_GetTowerInfo;
}

void Tower_SC_GetTowerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    usual_id_ = 0;
    times_ = 0;
  }
  tower_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Tower_SC_GetTowerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 usual_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usual_id_)));
          set_has_usual_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tower_list;
        break;
      }

      // repeated .proto.message.TowerRecord tower_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tower_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tower_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tower_list;
        if (input->ExpectTag(24)) goto parse_times;
        break;
      }

      // optional int32 times = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Tower_SC_GetTowerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 usual_id = 1;
  if (has_usual_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->usual_id(), output);
  }

  // repeated .proto.message.TowerRecord tower_list = 2;
  for (int i = 0; i < this->tower_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->tower_list(i), output);
  }

  // optional int32 times = 3;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Tower_SC_GetTowerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 usual_id = 1;
  if (has_usual_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->usual_id(), target);
  }

  // repeated .proto.message.TowerRecord tower_list = 2;
  for (int i = 0; i < this->tower_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->tower_list(i), target);
  }

  // optional int32 times = 3;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Tower_SC_GetTowerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 usual_id = 1;
    if (has_usual_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usual_id());
    }

    // optional int32 times = 3;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->times());
    }

  }
  // repeated .proto.message.TowerRecord tower_list = 2;
  total_size += 1 * this->tower_list_size();
  for (int i = 0; i < this->tower_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tower_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Tower_SC_GetTowerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Tower_SC_GetTowerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Tower_SC_GetTowerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Tower_SC_GetTowerInfo::MergeFrom(const Tower_SC_GetTowerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  tower_list_.MergeFrom(from.tower_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_usual_id()) {
      set_usual_id(from.usual_id());
    }
    if (from.has_times()) {
      set_times(from.times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Tower_SC_GetTowerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tower_SC_GetTowerInfo::CopyFrom(const Tower_SC_GetTowerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tower_SC_GetTowerInfo::IsInitialized() const {

  return true;
}

void Tower_SC_GetTowerInfo::Swap(Tower_SC_GetTowerInfo* other) {
  if (other != this) {
    std::swap(usual_id_, other->usual_id_);
    tower_list_.Swap(&other->tower_list_);
    std::swap(times_, other->times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Tower_SC_GetTowerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Tower_SC_GetTowerInfo_descriptor_;
  metadata.reflection = Tower_SC_GetTowerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Tower_CS_GetTowerRankTime::kUsualIdFieldNumber;
const int Tower_CS_GetTowerRankTime::kFloorFieldNumber;
#endif  // !_MSC_VER

Tower_CS_GetTowerRankTime::Tower_CS_GetTowerRankTime()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Tower_CS_GetTowerRankTime::InitAsDefaultInstance() {
}

Tower_CS_GetTowerRankTime::Tower_CS_GetTowerRankTime(const Tower_CS_GetTowerRankTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Tower_CS_GetTowerRankTime::SharedCtor() {
  _cached_size_ = 0;
  usual_id_ = 0;
  floor_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Tower_CS_GetTowerRankTime::~Tower_CS_GetTowerRankTime() {
  SharedDtor();
}

void Tower_CS_GetTowerRankTime::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Tower_CS_GetTowerRankTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Tower_CS_GetTowerRankTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Tower_CS_GetTowerRankTime_descriptor_;
}

const Tower_CS_GetTowerRankTime& Tower_CS_GetTowerRankTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tower_2eproto();
  return *default_instance_;
}

Tower_CS_GetTowerRankTime* Tower_CS_GetTowerRankTime::default_instance_ = NULL;

Tower_CS_GetTowerRankTime* Tower_CS_GetTowerRankTime::New() const {
  return new Tower_CS_GetTowerRankTime;
}

void Tower_CS_GetTowerRankTime::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    usual_id_ = 0;
    floor_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Tower_CS_GetTowerRankTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 usual_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usual_id_)));
          set_has_usual_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_floor;
        break;
      }

      // optional int32 floor = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_floor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &floor_)));
          set_has_floor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Tower_CS_GetTowerRankTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 usual_id = 1;
  if (has_usual_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->usual_id(), output);
  }

  // optional int32 floor = 2;
  if (has_floor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->floor(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Tower_CS_GetTowerRankTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 usual_id = 1;
  if (has_usual_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->usual_id(), target);
  }

  // optional int32 floor = 2;
  if (has_floor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->floor(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Tower_CS_GetTowerRankTime::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 usual_id = 1;
    if (has_usual_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usual_id());
    }

    // optional int32 floor = 2;
    if (has_floor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->floor());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Tower_CS_GetTowerRankTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Tower_CS_GetTowerRankTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Tower_CS_GetTowerRankTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Tower_CS_GetTowerRankTime::MergeFrom(const Tower_CS_GetTowerRankTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_usual_id()) {
      set_usual_id(from.usual_id());
    }
    if (from.has_floor()) {
      set_floor(from.floor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Tower_CS_GetTowerRankTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tower_CS_GetTowerRankTime::CopyFrom(const Tower_CS_GetTowerRankTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tower_CS_GetTowerRankTime::IsInitialized() const {

  return true;
}

void Tower_CS_GetTowerRankTime::Swap(Tower_CS_GetTowerRankTime* other) {
  if (other != this) {
    std::swap(usual_id_, other->usual_id_);
    std::swap(floor_, other->floor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Tower_CS_GetTowerRankTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Tower_CS_GetTowerRankTime_descriptor_;
  metadata.reflection = Tower_CS_GetTowerRankTime_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Tower_SC_GetTowerRankTime::kUsualIdFieldNumber;
const int Tower_SC_GetTowerRankTime::kFloorFieldNumber;
const int Tower_SC_GetTowerRankTime::kPassTimeFieldNumber;
#endif  // !_MSC_VER

Tower_SC_GetTowerRankTime::Tower_SC_GetTowerRankTime()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Tower_SC_GetTowerRankTime::InitAsDefaultInstance() {
}

Tower_SC_GetTowerRankTime::Tower_SC_GetTowerRankTime(const Tower_SC_GetTowerRankTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Tower_SC_GetTowerRankTime::SharedCtor() {
  _cached_size_ = 0;
  usual_id_ = 0;
  floor_ = 0;
  pass_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Tower_SC_GetTowerRankTime::~Tower_SC_GetTowerRankTime() {
  SharedDtor();
}

void Tower_SC_GetTowerRankTime::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Tower_SC_GetTowerRankTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Tower_SC_GetTowerRankTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Tower_SC_GetTowerRankTime_descriptor_;
}

const Tower_SC_GetTowerRankTime& Tower_SC_GetTowerRankTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tower_2eproto();
  return *default_instance_;
}

Tower_SC_GetTowerRankTime* Tower_SC_GetTowerRankTime::default_instance_ = NULL;

Tower_SC_GetTowerRankTime* Tower_SC_GetTowerRankTime::New() const {
  return new Tower_SC_GetTowerRankTime;
}

void Tower_SC_GetTowerRankTime::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    usual_id_ = 0;
    floor_ = 0;
    pass_time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Tower_SC_GetTowerRankTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 usual_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usual_id_)));
          set_has_usual_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_floor;
        break;
      }

      // optional int32 floor = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_floor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &floor_)));
          set_has_floor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pass_time;
        break;
      }

      // optional int32 pass_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pass_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pass_time_)));
          set_has_pass_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Tower_SC_GetTowerRankTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 usual_id = 1;
  if (has_usual_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->usual_id(), output);
  }

  // optional int32 floor = 2;
  if (has_floor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->floor(), output);
  }

  // optional int32 pass_time = 3;
  if (has_pass_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pass_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Tower_SC_GetTowerRankTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 usual_id = 1;
  if (has_usual_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->usual_id(), target);
  }

  // optional int32 floor = 2;
  if (has_floor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->floor(), target);
  }

  // optional int32 pass_time = 3;
  if (has_pass_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pass_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Tower_SC_GetTowerRankTime::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 usual_id = 1;
    if (has_usual_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usual_id());
    }

    // optional int32 floor = 2;
    if (has_floor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->floor());
    }

    // optional int32 pass_time = 3;
    if (has_pass_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pass_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Tower_SC_GetTowerRankTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Tower_SC_GetTowerRankTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Tower_SC_GetTowerRankTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Tower_SC_GetTowerRankTime::MergeFrom(const Tower_SC_GetTowerRankTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_usual_id()) {
      set_usual_id(from.usual_id());
    }
    if (from.has_floor()) {
      set_floor(from.floor());
    }
    if (from.has_pass_time()) {
      set_pass_time(from.pass_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Tower_SC_GetTowerRankTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tower_SC_GetTowerRankTime::CopyFrom(const Tower_SC_GetTowerRankTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tower_SC_GetTowerRankTime::IsInitialized() const {

  return true;
}

void Tower_SC_GetTowerRankTime::Swap(Tower_SC_GetTowerRankTime* other) {
  if (other != this) {
    std::swap(usual_id_, other->usual_id_);
    std::swap(floor_, other->floor_);
    std::swap(pass_time_, other->pass_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Tower_SC_GetTowerRankTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Tower_SC_GetTowerRankTime_descriptor_;
  metadata.reflection = Tower_SC_GetTowerRankTime_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace proto

// @@protoc_insertion_point(global_scope)
