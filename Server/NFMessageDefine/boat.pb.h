// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: boat.proto

#ifndef PROTOBUF_boat_2eproto__INCLUDED
#define PROTOBUF_boat_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)

namespace proto {
namespace message {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_boat_2eproto();
void protobuf_AssignDesc_boat_2eproto();
void protobuf_ShutdownFile_boat_2eproto();

class SkinInfo;
class BoatAllData;
class Boat_CS_GetBoatInfo;
class Boat_SC_GetBoatInfo;
class Boat_CS_UpBoat;
class Boat_SC_UpBoatResult;
class Boat_CS_SkinChange;
class Boat_SC_SkinChangeResult;
class Boat_CS_UpBoatPart;
class Boat_SC_UpBoatPartResult;
class Boat_CS_ActiveFashion;
class Boat_SC_ActiveFashionResult;
class Boat_SC_UpdateBoatInfo;

// ===================================================================

class SkinInfo : public ::google::protobuf::Message {
 public:
  SkinInfo();
  virtual ~SkinInfo();

  SkinInfo(const SkinInfo& from);

  inline SkinInfo& operator=(const SkinInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SkinInfo& default_instance();

  void Swap(SkinInfo* other);

  // implements Message ----------------------------------------------

  SkinInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SkinInfo& from);
  void MergeFrom(const SkinInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 skinid = 1;
  inline bool has_skinid() const;
  inline void clear_skinid();
  static const int kSkinidFieldNumber = 1;
  inline ::google::protobuf::int32 skinid() const;
  inline void set_skinid(::google::protobuf::int32 value);

  // required int64 validitytime = 2;
  inline bool has_validitytime() const;
  inline void clear_validitytime();
  static const int kValiditytimeFieldNumber = 2;
  inline ::google::protobuf::int64 validitytime() const;
  inline void set_validitytime(::google::protobuf::int64 value);

  // optional uint32 attid = 3;
  inline bool has_attid() const;
  inline void clear_attid();
  static const int kAttidFieldNumber = 3;
  inline ::google::protobuf::uint32 attid() const;
  inline void set_attid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.message.SkinInfo)
 private:
  inline void set_has_skinid();
  inline void clear_has_skinid();
  inline void set_has_validitytime();
  inline void clear_has_validitytime();
  inline void set_has_attid();
  inline void clear_has_attid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 validitytime_;
  ::google::protobuf::int32 skinid_;
  ::google::protobuf::uint32 attid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_boat_2eproto();
  friend void protobuf_AssignDesc_boat_2eproto();
  friend void protobuf_ShutdownFile_boat_2eproto();

  void InitAsDefaultInstance();
  static SkinInfo* default_instance_;
};
// -------------------------------------------------------------------

class BoatAllData : public ::google::protobuf::Message {
 public:
  BoatAllData();
  virtual ~BoatAllData();

  BoatAllData(const BoatAllData& from);

  inline BoatAllData& operator=(const BoatAllData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BoatAllData& default_instance();

  void Swap(BoatAllData* other);

  // implements Message ----------------------------------------------

  BoatAllData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BoatAllData& from);
  void MergeFrom(const BoatAllData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 boatid = 1;
  inline bool has_boatid() const;
  inline void clear_boatid();
  static const int kBoatidFieldNumber = 1;
  inline ::google::protobuf::int32 boatid() const;
  inline void set_boatid(::google::protobuf::int32 value);

  // optional int32 lucky = 2;
  inline bool has_lucky() const;
  inline void clear_lucky();
  static const int kLuckyFieldNumber = 2;
  inline ::google::protobuf::int32 lucky() const;
  inline void set_lucky(::google::protobuf::int32 value);

  // optional uint64 uptime = 3;
  inline bool has_uptime() const;
  inline void clear_uptime();
  static const int kUptimeFieldNumber = 3;
  inline ::google::protobuf::uint64 uptime() const;
  inline void set_uptime(::google::protobuf::uint64 value);

  // optional int32 skinonid = 4;
  inline bool has_skinonid() const;
  inline void clear_skinonid();
  static const int kSkinonidFieldNumber = 4;
  inline ::google::protobuf::int32 skinonid() const;
  inline void set_skinonid(::google::protobuf::int32 value);

  // repeated .proto.message.SkinInfo skinlist = 5;
  inline int skinlist_size() const;
  inline void clear_skinlist();
  static const int kSkinlistFieldNumber = 5;
  inline const ::proto::message::SkinInfo& skinlist(int index) const;
  inline ::proto::message::SkinInfo* mutable_skinlist(int index);
  inline ::proto::message::SkinInfo* add_skinlist();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::message::SkinInfo >&
      skinlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::message::SkinInfo >*
      mutable_skinlist();

  // repeated int32 partid = 6;
  inline int partid_size() const;
  inline void clear_partid();
  static const int kPartidFieldNumber = 6;
  inline ::google::protobuf::int32 partid(int index) const;
  inline void set_partid(int index, ::google::protobuf::int32 value);
  inline void add_partid(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      partid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_partid();

  // repeated int32 landskill = 7;
  inline int landskill_size() const;
  inline void clear_landskill();
  static const int kLandskillFieldNumber = 7;
  inline ::google::protobuf::int32 landskill(int index) const;
  inline void set_landskill(int index, ::google::protobuf::int32 value);
  inline void add_landskill(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      landskill() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_landskill();

  // repeated int32 seaskill = 8;
  inline int seaskill_size() const;
  inline void clear_seaskill();
  static const int kSeaskillFieldNumber = 8;
  inline ::google::protobuf::int32 seaskill(int index) const;
  inline void set_seaskill(int index, ::google::protobuf::int32 value);
  inline void add_seaskill(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      seaskill() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_seaskill();

  // optional bool isActive = 9;
  inline bool has_isactive() const;
  inline void clear_isactive();
  static const int kIsActiveFieldNumber = 9;
  inline bool isactive() const;
  inline void set_isactive(bool value);

  // @@protoc_insertion_point(class_scope:proto.message.BoatAllData)
 private:
  inline void set_has_boatid();
  inline void clear_has_boatid();
  inline void set_has_lucky();
  inline void clear_has_lucky();
  inline void set_has_uptime();
  inline void clear_has_uptime();
  inline void set_has_skinonid();
  inline void clear_has_skinonid();
  inline void set_has_isactive();
  inline void clear_has_isactive();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 boatid_;
  ::google::protobuf::int32 lucky_;
  ::google::protobuf::uint64 uptime_;
  ::google::protobuf::RepeatedPtrField< ::proto::message::SkinInfo > skinlist_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > partid_;
  ::google::protobuf::int32 skinonid_;
  bool isactive_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > landskill_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > seaskill_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_boat_2eproto();
  friend void protobuf_AssignDesc_boat_2eproto();
  friend void protobuf_ShutdownFile_boat_2eproto();

  void InitAsDefaultInstance();
  static BoatAllData* default_instance_;
};
// -------------------------------------------------------------------

class Boat_CS_GetBoatInfo : public ::google::protobuf::Message {
 public:
  Boat_CS_GetBoatInfo();
  virtual ~Boat_CS_GetBoatInfo();

  Boat_CS_GetBoatInfo(const Boat_CS_GetBoatInfo& from);

  inline Boat_CS_GetBoatInfo& operator=(const Boat_CS_GetBoatInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Boat_CS_GetBoatInfo& default_instance();

  void Swap(Boat_CS_GetBoatInfo* other);

  // implements Message ----------------------------------------------

  Boat_CS_GetBoatInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Boat_CS_GetBoatInfo& from);
  void MergeFrom(const Boat_CS_GetBoatInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.message.Boat_CS_GetBoatInfo)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_boat_2eproto();
  friend void protobuf_AssignDesc_boat_2eproto();
  friend void protobuf_ShutdownFile_boat_2eproto();

  void InitAsDefaultInstance();
  static Boat_CS_GetBoatInfo* default_instance_;
};
// -------------------------------------------------------------------

class Boat_SC_GetBoatInfo : public ::google::protobuf::Message {
 public:
  Boat_SC_GetBoatInfo();
  virtual ~Boat_SC_GetBoatInfo();

  Boat_SC_GetBoatInfo(const Boat_SC_GetBoatInfo& from);

  inline Boat_SC_GetBoatInfo& operator=(const Boat_SC_GetBoatInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Boat_SC_GetBoatInfo& default_instance();

  void Swap(Boat_SC_GetBoatInfo* other);

  // implements Message ----------------------------------------------

  Boat_SC_GetBoatInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Boat_SC_GetBoatInfo& from);
  void MergeFrom(const Boat_SC_GetBoatInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional .proto.message.BoatAllData data = 2;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::proto::message::BoatAllData& data() const;
  inline ::proto::message::BoatAllData* mutable_data();
  inline ::proto::message::BoatAllData* release_data();
  inline void set_allocated_data(::proto::message::BoatAllData* data);

  // @@protoc_insertion_point(class_scope:proto.message.Boat_SC_GetBoatInfo)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::message::BoatAllData* data_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_boat_2eproto();
  friend void protobuf_AssignDesc_boat_2eproto();
  friend void protobuf_ShutdownFile_boat_2eproto();

  void InitAsDefaultInstance();
  static Boat_SC_GetBoatInfo* default_instance_;
};
// -------------------------------------------------------------------

class Boat_CS_UpBoat : public ::google::protobuf::Message {
 public:
  Boat_CS_UpBoat();
  virtual ~Boat_CS_UpBoat();

  Boat_CS_UpBoat(const Boat_CS_UpBoat& from);

  inline Boat_CS_UpBoat& operator=(const Boat_CS_UpBoat& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Boat_CS_UpBoat& default_instance();

  void Swap(Boat_CS_UpBoat* other);

  // implements Message ----------------------------------------------

  Boat_CS_UpBoat* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Boat_CS_UpBoat& from);
  void MergeFrom(const Boat_CS_UpBoat& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.message.Boat_CS_UpBoat)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_boat_2eproto();
  friend void protobuf_AssignDesc_boat_2eproto();
  friend void protobuf_ShutdownFile_boat_2eproto();

  void InitAsDefaultInstance();
  static Boat_CS_UpBoat* default_instance_;
};
// -------------------------------------------------------------------

class Boat_SC_UpBoatResult : public ::google::protobuf::Message {
 public:
  Boat_SC_UpBoatResult();
  virtual ~Boat_SC_UpBoatResult();

  Boat_SC_UpBoatResult(const Boat_SC_UpBoatResult& from);

  inline Boat_SC_UpBoatResult& operator=(const Boat_SC_UpBoatResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Boat_SC_UpBoatResult& default_instance();

  void Swap(Boat_SC_UpBoatResult* other);

  // implements Message ----------------------------------------------

  Boat_SC_UpBoatResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Boat_SC_UpBoatResult& from);
  void MergeFrom(const Boat_SC_UpBoatResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional int32 lucky = 2;
  inline bool has_lucky() const;
  inline void clear_lucky();
  static const int kLuckyFieldNumber = 2;
  inline ::google::protobuf::int32 lucky() const;
  inline void set_lucky(::google::protobuf::int32 value);

  // optional int32 boatid = 3;
  inline bool has_boatid() const;
  inline void clear_boatid();
  static const int kBoatidFieldNumber = 3;
  inline ::google::protobuf::int32 boatid() const;
  inline void set_boatid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Boat_SC_UpBoatResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_lucky();
  inline void clear_has_lucky();
  inline void set_has_boatid();
  inline void clear_has_boatid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 lucky_;
  ::google::protobuf::int32 boatid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_boat_2eproto();
  friend void protobuf_AssignDesc_boat_2eproto();
  friend void protobuf_ShutdownFile_boat_2eproto();

  void InitAsDefaultInstance();
  static Boat_SC_UpBoatResult* default_instance_;
};
// -------------------------------------------------------------------

class Boat_CS_SkinChange : public ::google::protobuf::Message {
 public:
  Boat_CS_SkinChange();
  virtual ~Boat_CS_SkinChange();

  Boat_CS_SkinChange(const Boat_CS_SkinChange& from);

  inline Boat_CS_SkinChange& operator=(const Boat_CS_SkinChange& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Boat_CS_SkinChange& default_instance();

  void Swap(Boat_CS_SkinChange* other);

  // implements Message ----------------------------------------------

  Boat_CS_SkinChange* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Boat_CS_SkinChange& from);
  void MergeFrom(const Boat_CS_SkinChange& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 skinid = 1;
  inline bool has_skinid() const;
  inline void clear_skinid();
  static const int kSkinidFieldNumber = 1;
  inline ::google::protobuf::int32 skinid() const;
  inline void set_skinid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Boat_CS_SkinChange)
 private:
  inline void set_has_skinid();
  inline void clear_has_skinid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 skinid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_boat_2eproto();
  friend void protobuf_AssignDesc_boat_2eproto();
  friend void protobuf_ShutdownFile_boat_2eproto();

  void InitAsDefaultInstance();
  static Boat_CS_SkinChange* default_instance_;
};
// -------------------------------------------------------------------

class Boat_SC_SkinChangeResult : public ::google::protobuf::Message {
 public:
  Boat_SC_SkinChangeResult();
  virtual ~Boat_SC_SkinChangeResult();

  Boat_SC_SkinChangeResult(const Boat_SC_SkinChangeResult& from);

  inline Boat_SC_SkinChangeResult& operator=(const Boat_SC_SkinChangeResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Boat_SC_SkinChangeResult& default_instance();

  void Swap(Boat_SC_SkinChangeResult* other);

  // implements Message ----------------------------------------------

  Boat_SC_SkinChangeResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Boat_SC_SkinChangeResult& from);
  void MergeFrom(const Boat_SC_SkinChangeResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Boat_SC_SkinChangeResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_boat_2eproto();
  friend void protobuf_AssignDesc_boat_2eproto();
  friend void protobuf_ShutdownFile_boat_2eproto();

  void InitAsDefaultInstance();
  static Boat_SC_SkinChangeResult* default_instance_;
};
// -------------------------------------------------------------------

class Boat_CS_UpBoatPart : public ::google::protobuf::Message {
 public:
  Boat_CS_UpBoatPart();
  virtual ~Boat_CS_UpBoatPart();

  Boat_CS_UpBoatPart(const Boat_CS_UpBoatPart& from);

  inline Boat_CS_UpBoatPart& operator=(const Boat_CS_UpBoatPart& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Boat_CS_UpBoatPart& default_instance();

  void Swap(Boat_CS_UpBoatPart* other);

  // implements Message ----------------------------------------------

  Boat_CS_UpBoatPart* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Boat_CS_UpBoatPart& from);
  void MergeFrom(const Boat_CS_UpBoatPart& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 partid = 1;
  inline bool has_partid() const;
  inline void clear_partid();
  static const int kPartidFieldNumber = 1;
  inline ::google::protobuf::int32 partid() const;
  inline void set_partid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Boat_CS_UpBoatPart)
 private:
  inline void set_has_partid();
  inline void clear_has_partid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 partid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_boat_2eproto();
  friend void protobuf_AssignDesc_boat_2eproto();
  friend void protobuf_ShutdownFile_boat_2eproto();

  void InitAsDefaultInstance();
  static Boat_CS_UpBoatPart* default_instance_;
};
// -------------------------------------------------------------------

class Boat_SC_UpBoatPartResult : public ::google::protobuf::Message {
 public:
  Boat_SC_UpBoatPartResult();
  virtual ~Boat_SC_UpBoatPartResult();

  Boat_SC_UpBoatPartResult(const Boat_SC_UpBoatPartResult& from);

  inline Boat_SC_UpBoatPartResult& operator=(const Boat_SC_UpBoatPartResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Boat_SC_UpBoatPartResult& default_instance();

  void Swap(Boat_SC_UpBoatPartResult* other);

  // implements Message ----------------------------------------------

  Boat_SC_UpBoatPartResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Boat_SC_UpBoatPartResult& from);
  void MergeFrom(const Boat_SC_UpBoatPartResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional int32 partid = 2;
  inline bool has_partid() const;
  inline void clear_partid();
  static const int kPartidFieldNumber = 2;
  inline ::google::protobuf::int32 partid() const;
  inline void set_partid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Boat_SC_UpBoatPartResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_partid();
  inline void clear_has_partid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 partid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_boat_2eproto();
  friend void protobuf_AssignDesc_boat_2eproto();
  friend void protobuf_ShutdownFile_boat_2eproto();

  void InitAsDefaultInstance();
  static Boat_SC_UpBoatPartResult* default_instance_;
};
// -------------------------------------------------------------------

class Boat_CS_ActiveFashion : public ::google::protobuf::Message {
 public:
  Boat_CS_ActiveFashion();
  virtual ~Boat_CS_ActiveFashion();

  Boat_CS_ActiveFashion(const Boat_CS_ActiveFashion& from);

  inline Boat_CS_ActiveFashion& operator=(const Boat_CS_ActiveFashion& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Boat_CS_ActiveFashion& default_instance();

  void Swap(Boat_CS_ActiveFashion* other);

  // implements Message ----------------------------------------------

  Boat_CS_ActiveFashion* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Boat_CS_ActiveFashion& from);
  void MergeFrom(const Boat_CS_ActiveFashion& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 skinid = 1;
  inline bool has_skinid() const;
  inline void clear_skinid();
  static const int kSkinidFieldNumber = 1;
  inline ::google::protobuf::int32 skinid() const;
  inline void set_skinid(::google::protobuf::int32 value);

  // optional int32 timetype = 2;
  inline bool has_timetype() const;
  inline void clear_timetype();
  static const int kTimetypeFieldNumber = 2;
  inline ::google::protobuf::int32 timetype() const;
  inline void set_timetype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Boat_CS_ActiveFashion)
 private:
  inline void set_has_skinid();
  inline void clear_has_skinid();
  inline void set_has_timetype();
  inline void clear_has_timetype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 skinid_;
  ::google::protobuf::int32 timetype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_boat_2eproto();
  friend void protobuf_AssignDesc_boat_2eproto();
  friend void protobuf_ShutdownFile_boat_2eproto();

  void InitAsDefaultInstance();
  static Boat_CS_ActiveFashion* default_instance_;
};
// -------------------------------------------------------------------

class Boat_SC_ActiveFashionResult : public ::google::protobuf::Message {
 public:
  Boat_SC_ActiveFashionResult();
  virtual ~Boat_SC_ActiveFashionResult();

  Boat_SC_ActiveFashionResult(const Boat_SC_ActiveFashionResult& from);

  inline Boat_SC_ActiveFashionResult& operator=(const Boat_SC_ActiveFashionResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Boat_SC_ActiveFashionResult& default_instance();

  void Swap(Boat_SC_ActiveFashionResult* other);

  // implements Message ----------------------------------------------

  Boat_SC_ActiveFashionResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Boat_SC_ActiveFashionResult& from);
  void MergeFrom(const Boat_SC_ActiveFashionResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Boat_SC_ActiveFashionResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_boat_2eproto();
  friend void protobuf_AssignDesc_boat_2eproto();
  friend void protobuf_ShutdownFile_boat_2eproto();

  void InitAsDefaultInstance();
  static Boat_SC_ActiveFashionResult* default_instance_;
};
// -------------------------------------------------------------------

class Boat_SC_UpdateBoatInfo : public ::google::protobuf::Message {
 public:
  Boat_SC_UpdateBoatInfo();
  virtual ~Boat_SC_UpdateBoatInfo();

  Boat_SC_UpdateBoatInfo(const Boat_SC_UpdateBoatInfo& from);

  inline Boat_SC_UpdateBoatInfo& operator=(const Boat_SC_UpdateBoatInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Boat_SC_UpdateBoatInfo& default_instance();

  void Swap(Boat_SC_UpdateBoatInfo* other);

  // implements Message ----------------------------------------------

  Boat_SC_UpdateBoatInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Boat_SC_UpdateBoatInfo& from);
  void MergeFrom(const Boat_SC_UpdateBoatInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto.message.BoatAllData data = 1;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::proto::message::BoatAllData& data() const;
  inline ::proto::message::BoatAllData* mutable_data();
  inline ::proto::message::BoatAllData* release_data();
  inline void set_allocated_data(::proto::message::BoatAllData* data);

  // @@protoc_insertion_point(class_scope:proto.message.Boat_SC_UpdateBoatInfo)
 private:
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::message::BoatAllData* data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_boat_2eproto();
  friend void protobuf_AssignDesc_boat_2eproto();
  friend void protobuf_ShutdownFile_boat_2eproto();

  void InitAsDefaultInstance();
  static Boat_SC_UpdateBoatInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// SkinInfo

// required int32 skinid = 1;
inline bool SkinInfo::has_skinid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SkinInfo::set_has_skinid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SkinInfo::clear_has_skinid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SkinInfo::clear_skinid() {
  skinid_ = 0;
  clear_has_skinid();
}
inline ::google::protobuf::int32 SkinInfo::skinid() const {
  return skinid_;
}
inline void SkinInfo::set_skinid(::google::protobuf::int32 value) {
  set_has_skinid();
  skinid_ = value;
}

// required int64 validitytime = 2;
inline bool SkinInfo::has_validitytime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SkinInfo::set_has_validitytime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SkinInfo::clear_has_validitytime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SkinInfo::clear_validitytime() {
  validitytime_ = GOOGLE_LONGLONG(0);
  clear_has_validitytime();
}
inline ::google::protobuf::int64 SkinInfo::validitytime() const {
  return validitytime_;
}
inline void SkinInfo::set_validitytime(::google::protobuf::int64 value) {
  set_has_validitytime();
  validitytime_ = value;
}

// optional uint32 attid = 3;
inline bool SkinInfo::has_attid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SkinInfo::set_has_attid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SkinInfo::clear_has_attid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SkinInfo::clear_attid() {
  attid_ = 0u;
  clear_has_attid();
}
inline ::google::protobuf::uint32 SkinInfo::attid() const {
  return attid_;
}
inline void SkinInfo::set_attid(::google::protobuf::uint32 value) {
  set_has_attid();
  attid_ = value;
}

// -------------------------------------------------------------------

// BoatAllData

// optional int32 boatid = 1;
inline bool BoatAllData::has_boatid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BoatAllData::set_has_boatid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BoatAllData::clear_has_boatid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BoatAllData::clear_boatid() {
  boatid_ = 0;
  clear_has_boatid();
}
inline ::google::protobuf::int32 BoatAllData::boatid() const {
  return boatid_;
}
inline void BoatAllData::set_boatid(::google::protobuf::int32 value) {
  set_has_boatid();
  boatid_ = value;
}

// optional int32 lucky = 2;
inline bool BoatAllData::has_lucky() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BoatAllData::set_has_lucky() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BoatAllData::clear_has_lucky() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BoatAllData::clear_lucky() {
  lucky_ = 0;
  clear_has_lucky();
}
inline ::google::protobuf::int32 BoatAllData::lucky() const {
  return lucky_;
}
inline void BoatAllData::set_lucky(::google::protobuf::int32 value) {
  set_has_lucky();
  lucky_ = value;
}

// optional uint64 uptime = 3;
inline bool BoatAllData::has_uptime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BoatAllData::set_has_uptime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BoatAllData::clear_has_uptime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BoatAllData::clear_uptime() {
  uptime_ = GOOGLE_ULONGLONG(0);
  clear_has_uptime();
}
inline ::google::protobuf::uint64 BoatAllData::uptime() const {
  return uptime_;
}
inline void BoatAllData::set_uptime(::google::protobuf::uint64 value) {
  set_has_uptime();
  uptime_ = value;
}

// optional int32 skinonid = 4;
inline bool BoatAllData::has_skinonid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BoatAllData::set_has_skinonid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BoatAllData::clear_has_skinonid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BoatAllData::clear_skinonid() {
  skinonid_ = 0;
  clear_has_skinonid();
}
inline ::google::protobuf::int32 BoatAllData::skinonid() const {
  return skinonid_;
}
inline void BoatAllData::set_skinonid(::google::protobuf::int32 value) {
  set_has_skinonid();
  skinonid_ = value;
}

// repeated .proto.message.SkinInfo skinlist = 5;
inline int BoatAllData::skinlist_size() const {
  return skinlist_.size();
}
inline void BoatAllData::clear_skinlist() {
  skinlist_.Clear();
}
inline const ::proto::message::SkinInfo& BoatAllData::skinlist(int index) const {
  return skinlist_.Get(index);
}
inline ::proto::message::SkinInfo* BoatAllData::mutable_skinlist(int index) {
  return skinlist_.Mutable(index);
}
inline ::proto::message::SkinInfo* BoatAllData::add_skinlist() {
  return skinlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::message::SkinInfo >&
BoatAllData::skinlist() const {
  return skinlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::message::SkinInfo >*
BoatAllData::mutable_skinlist() {
  return &skinlist_;
}

// repeated int32 partid = 6;
inline int BoatAllData::partid_size() const {
  return partid_.size();
}
inline void BoatAllData::clear_partid() {
  partid_.Clear();
}
inline ::google::protobuf::int32 BoatAllData::partid(int index) const {
  return partid_.Get(index);
}
inline void BoatAllData::set_partid(int index, ::google::protobuf::int32 value) {
  partid_.Set(index, value);
}
inline void BoatAllData::add_partid(::google::protobuf::int32 value) {
  partid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BoatAllData::partid() const {
  return partid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BoatAllData::mutable_partid() {
  return &partid_;
}

// repeated int32 landskill = 7;
inline int BoatAllData::landskill_size() const {
  return landskill_.size();
}
inline void BoatAllData::clear_landskill() {
  landskill_.Clear();
}
inline ::google::protobuf::int32 BoatAllData::landskill(int index) const {
  return landskill_.Get(index);
}
inline void BoatAllData::set_landskill(int index, ::google::protobuf::int32 value) {
  landskill_.Set(index, value);
}
inline void BoatAllData::add_landskill(::google::protobuf::int32 value) {
  landskill_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BoatAllData::landskill() const {
  return landskill_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BoatAllData::mutable_landskill() {
  return &landskill_;
}

// repeated int32 seaskill = 8;
inline int BoatAllData::seaskill_size() const {
  return seaskill_.size();
}
inline void BoatAllData::clear_seaskill() {
  seaskill_.Clear();
}
inline ::google::protobuf::int32 BoatAllData::seaskill(int index) const {
  return seaskill_.Get(index);
}
inline void BoatAllData::set_seaskill(int index, ::google::protobuf::int32 value) {
  seaskill_.Set(index, value);
}
inline void BoatAllData::add_seaskill(::google::protobuf::int32 value) {
  seaskill_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BoatAllData::seaskill() const {
  return seaskill_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BoatAllData::mutable_seaskill() {
  return &seaskill_;
}

// optional bool isActive = 9;
inline bool BoatAllData::has_isactive() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BoatAllData::set_has_isactive() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BoatAllData::clear_has_isactive() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BoatAllData::clear_isactive() {
  isactive_ = false;
  clear_has_isactive();
}
inline bool BoatAllData::isactive() const {
  return isactive_;
}
inline void BoatAllData::set_isactive(bool value) {
  set_has_isactive();
  isactive_ = value;
}

// -------------------------------------------------------------------

// Boat_CS_GetBoatInfo

// -------------------------------------------------------------------

// Boat_SC_GetBoatInfo

// optional int32 result = 1;
inline bool Boat_SC_GetBoatInfo::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Boat_SC_GetBoatInfo::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Boat_SC_GetBoatInfo::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Boat_SC_GetBoatInfo::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 Boat_SC_GetBoatInfo::result() const {
  return result_;
}
inline void Boat_SC_GetBoatInfo::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional .proto.message.BoatAllData data = 2;
inline bool Boat_SC_GetBoatInfo::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Boat_SC_GetBoatInfo::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Boat_SC_GetBoatInfo::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Boat_SC_GetBoatInfo::clear_data() {
  if (data_ != NULL) data_->::proto::message::BoatAllData::Clear();
  clear_has_data();
}
inline const ::proto::message::BoatAllData& Boat_SC_GetBoatInfo::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::proto::message::BoatAllData* Boat_SC_GetBoatInfo::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::proto::message::BoatAllData;
  return data_;
}
inline ::proto::message::BoatAllData* Boat_SC_GetBoatInfo::release_data() {
  clear_has_data();
  ::proto::message::BoatAllData* temp = data_;
  data_ = NULL;
  return temp;
}
inline void Boat_SC_GetBoatInfo::set_allocated_data(::proto::message::BoatAllData* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
}

// -------------------------------------------------------------------

// Boat_CS_UpBoat

// -------------------------------------------------------------------

// Boat_SC_UpBoatResult

// optional int32 result = 1;
inline bool Boat_SC_UpBoatResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Boat_SC_UpBoatResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Boat_SC_UpBoatResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Boat_SC_UpBoatResult::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 Boat_SC_UpBoatResult::result() const {
  return result_;
}
inline void Boat_SC_UpBoatResult::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional int32 lucky = 2;
inline bool Boat_SC_UpBoatResult::has_lucky() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Boat_SC_UpBoatResult::set_has_lucky() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Boat_SC_UpBoatResult::clear_has_lucky() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Boat_SC_UpBoatResult::clear_lucky() {
  lucky_ = 0;
  clear_has_lucky();
}
inline ::google::protobuf::int32 Boat_SC_UpBoatResult::lucky() const {
  return lucky_;
}
inline void Boat_SC_UpBoatResult::set_lucky(::google::protobuf::int32 value) {
  set_has_lucky();
  lucky_ = value;
}

// optional int32 boatid = 3;
inline bool Boat_SC_UpBoatResult::has_boatid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Boat_SC_UpBoatResult::set_has_boatid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Boat_SC_UpBoatResult::clear_has_boatid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Boat_SC_UpBoatResult::clear_boatid() {
  boatid_ = 0;
  clear_has_boatid();
}
inline ::google::protobuf::int32 Boat_SC_UpBoatResult::boatid() const {
  return boatid_;
}
inline void Boat_SC_UpBoatResult::set_boatid(::google::protobuf::int32 value) {
  set_has_boatid();
  boatid_ = value;
}

// -------------------------------------------------------------------

// Boat_CS_SkinChange

// optional int32 skinid = 1;
inline bool Boat_CS_SkinChange::has_skinid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Boat_CS_SkinChange::set_has_skinid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Boat_CS_SkinChange::clear_has_skinid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Boat_CS_SkinChange::clear_skinid() {
  skinid_ = 0;
  clear_has_skinid();
}
inline ::google::protobuf::int32 Boat_CS_SkinChange::skinid() const {
  return skinid_;
}
inline void Boat_CS_SkinChange::set_skinid(::google::protobuf::int32 value) {
  set_has_skinid();
  skinid_ = value;
}

// -------------------------------------------------------------------

// Boat_SC_SkinChangeResult

// optional int32 result = 1;
inline bool Boat_SC_SkinChangeResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Boat_SC_SkinChangeResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Boat_SC_SkinChangeResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Boat_SC_SkinChangeResult::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 Boat_SC_SkinChangeResult::result() const {
  return result_;
}
inline void Boat_SC_SkinChangeResult::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// Boat_CS_UpBoatPart

// optional int32 partid = 1;
inline bool Boat_CS_UpBoatPart::has_partid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Boat_CS_UpBoatPart::set_has_partid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Boat_CS_UpBoatPart::clear_has_partid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Boat_CS_UpBoatPart::clear_partid() {
  partid_ = 0;
  clear_has_partid();
}
inline ::google::protobuf::int32 Boat_CS_UpBoatPart::partid() const {
  return partid_;
}
inline void Boat_CS_UpBoatPart::set_partid(::google::protobuf::int32 value) {
  set_has_partid();
  partid_ = value;
}

// -------------------------------------------------------------------

// Boat_SC_UpBoatPartResult

// optional int32 result = 1;
inline bool Boat_SC_UpBoatPartResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Boat_SC_UpBoatPartResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Boat_SC_UpBoatPartResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Boat_SC_UpBoatPartResult::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 Boat_SC_UpBoatPartResult::result() const {
  return result_;
}
inline void Boat_SC_UpBoatPartResult::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional int32 partid = 2;
inline bool Boat_SC_UpBoatPartResult::has_partid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Boat_SC_UpBoatPartResult::set_has_partid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Boat_SC_UpBoatPartResult::clear_has_partid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Boat_SC_UpBoatPartResult::clear_partid() {
  partid_ = 0;
  clear_has_partid();
}
inline ::google::protobuf::int32 Boat_SC_UpBoatPartResult::partid() const {
  return partid_;
}
inline void Boat_SC_UpBoatPartResult::set_partid(::google::protobuf::int32 value) {
  set_has_partid();
  partid_ = value;
}

// -------------------------------------------------------------------

// Boat_CS_ActiveFashion

// optional int32 skinid = 1;
inline bool Boat_CS_ActiveFashion::has_skinid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Boat_CS_ActiveFashion::set_has_skinid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Boat_CS_ActiveFashion::clear_has_skinid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Boat_CS_ActiveFashion::clear_skinid() {
  skinid_ = 0;
  clear_has_skinid();
}
inline ::google::protobuf::int32 Boat_CS_ActiveFashion::skinid() const {
  return skinid_;
}
inline void Boat_CS_ActiveFashion::set_skinid(::google::protobuf::int32 value) {
  set_has_skinid();
  skinid_ = value;
}

// optional int32 timetype = 2;
inline bool Boat_CS_ActiveFashion::has_timetype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Boat_CS_ActiveFashion::set_has_timetype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Boat_CS_ActiveFashion::clear_has_timetype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Boat_CS_ActiveFashion::clear_timetype() {
  timetype_ = 0;
  clear_has_timetype();
}
inline ::google::protobuf::int32 Boat_CS_ActiveFashion::timetype() const {
  return timetype_;
}
inline void Boat_CS_ActiveFashion::set_timetype(::google::protobuf::int32 value) {
  set_has_timetype();
  timetype_ = value;
}

// -------------------------------------------------------------------

// Boat_SC_ActiveFashionResult

// optional int32 result = 1;
inline bool Boat_SC_ActiveFashionResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Boat_SC_ActiveFashionResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Boat_SC_ActiveFashionResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Boat_SC_ActiveFashionResult::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 Boat_SC_ActiveFashionResult::result() const {
  return result_;
}
inline void Boat_SC_ActiveFashionResult::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// Boat_SC_UpdateBoatInfo

// optional .proto.message.BoatAllData data = 1;
inline bool Boat_SC_UpdateBoatInfo::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Boat_SC_UpdateBoatInfo::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Boat_SC_UpdateBoatInfo::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Boat_SC_UpdateBoatInfo::clear_data() {
  if (data_ != NULL) data_->::proto::message::BoatAllData::Clear();
  clear_has_data();
}
inline const ::proto::message::BoatAllData& Boat_SC_UpdateBoatInfo::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::proto::message::BoatAllData* Boat_SC_UpdateBoatInfo::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::proto::message::BoatAllData;
  return data_;
}
inline ::proto::message::BoatAllData* Boat_SC_UpdateBoatInfo::release_data() {
  clear_has_data();
  ::proto::message::BoatAllData* temp = data_;
  data_ = NULL;
  return temp;
}
inline void Boat_SC_UpdateBoatInfo::set_allocated_data(::proto::message::BoatAllData* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace proto

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_boat_2eproto__INCLUDED
