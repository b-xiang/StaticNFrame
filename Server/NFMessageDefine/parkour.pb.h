// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: parkour.proto

#ifndef PROTOBUF_parkour_2eproto__INCLUDED
#define PROTOBUF_parkour_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "dungeon.pb.h"
// @@protoc_insertion_point(includes)

namespace proto {
namespace message {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_parkour_2eproto();
void protobuf_AssignDesc_parkour_2eproto();
void protobuf_ShutdownFile_parkour_2eproto();

class Parkour_CS_GetInfo;
class Parkour_CS_ReqBegin;
class ParkourRank;
class ParkourRank_RecordItem;
class Parkour_SC_GetInfo;
class Parkour_SC_GetInfo_Path;
class Parkour_SC_ReqBegin;
class Parkour_CS_Finish;
class ParkourInfo;
class Parkour_CS_UsePotion;
class Parkour_SC_UsePotion;

// ===================================================================

class Parkour_CS_GetInfo : public ::google::protobuf::Message {
 public:
  Parkour_CS_GetInfo();
  virtual ~Parkour_CS_GetInfo();

  Parkour_CS_GetInfo(const Parkour_CS_GetInfo& from);

  inline Parkour_CS_GetInfo& operator=(const Parkour_CS_GetInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Parkour_CS_GetInfo& default_instance();

  void Swap(Parkour_CS_GetInfo* other);

  // implements Message ----------------------------------------------

  Parkour_CS_GetInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Parkour_CS_GetInfo& from);
  void MergeFrom(const Parkour_CS_GetInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.message.Parkour_CS_GetInfo)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_parkour_2eproto();
  friend void protobuf_AssignDesc_parkour_2eproto();
  friend void protobuf_ShutdownFile_parkour_2eproto();

  void InitAsDefaultInstance();
  static Parkour_CS_GetInfo* default_instance_;
};
// -------------------------------------------------------------------

class Parkour_CS_ReqBegin : public ::google::protobuf::Message {
 public:
  Parkour_CS_ReqBegin();
  virtual ~Parkour_CS_ReqBegin();

  Parkour_CS_ReqBegin(const Parkour_CS_ReqBegin& from);

  inline Parkour_CS_ReqBegin& operator=(const Parkour_CS_ReqBegin& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Parkour_CS_ReqBegin& default_instance();

  void Swap(Parkour_CS_ReqBegin* other);

  // implements Message ----------------------------------------------

  Parkour_CS_ReqBegin* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Parkour_CS_ReqBegin& from);
  void MergeFrom(const Parkour_CS_ReqBegin& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.message.Parkour_CS_ReqBegin)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_parkour_2eproto();
  friend void protobuf_AssignDesc_parkour_2eproto();
  friend void protobuf_ShutdownFile_parkour_2eproto();

  void InitAsDefaultInstance();
  static Parkour_CS_ReqBegin* default_instance_;
};
// -------------------------------------------------------------------

class ParkourRank_RecordItem : public ::google::protobuf::Message {
 public:
  ParkourRank_RecordItem();
  virtual ~ParkourRank_RecordItem();

  ParkourRank_RecordItem(const ParkourRank_RecordItem& from);

  inline ParkourRank_RecordItem& operator=(const ParkourRank_RecordItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ParkourRank_RecordItem& default_instance();

  void Swap(ParkourRank_RecordItem* other);

  // implements Message ----------------------------------------------

  ParkourRank_RecordItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ParkourRank_RecordItem& from);
  void MergeFrom(const ParkourRank_RecordItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ranking = 1;
  inline bool has_ranking() const;
  inline void clear_ranking();
  static const int kRankingFieldNumber = 1;
  inline ::google::protobuf::int32 ranking() const;
  inline void set_ranking(::google::protobuf::int32 value);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required int32 score = 3;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 3;
  inline ::google::protobuf::int32 score() const;
  inline void set_score(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.message.ParkourRank.RecordItem)
 private:
  inline void set_has_ranking();
  inline void clear_has_ranking();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_score();
  inline void clear_has_score();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::int32 ranking_;
  ::google::protobuf::int32 score_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_parkour_2eproto();
  friend void protobuf_AssignDesc_parkour_2eproto();
  friend void protobuf_ShutdownFile_parkour_2eproto();

  void InitAsDefaultInstance();
  static ParkourRank_RecordItem* default_instance_;
};
// -------------------------------------------------------------------

class ParkourRank : public ::google::protobuf::Message {
 public:
  ParkourRank();
  virtual ~ParkourRank();

  ParkourRank(const ParkourRank& from);

  inline ParkourRank& operator=(const ParkourRank& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ParkourRank& default_instance();

  void Swap(ParkourRank* other);

  // implements Message ----------------------------------------------

  ParkourRank* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ParkourRank& from);
  void MergeFrom(const ParkourRank& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ParkourRank_RecordItem RecordItem;

  // accessors -------------------------------------------------------

  // repeated .proto.message.ParkourRank.RecordItem item = 1;
  inline int item_size() const;
  inline void clear_item();
  static const int kItemFieldNumber = 1;
  inline const ::proto::message::ParkourRank_RecordItem& item(int index) const;
  inline ::proto::message::ParkourRank_RecordItem* mutable_item(int index);
  inline ::proto::message::ParkourRank_RecordItem* add_item();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::message::ParkourRank_RecordItem >&
      item() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::message::ParkourRank_RecordItem >*
      mutable_item();

  // @@protoc_insertion_point(class_scope:proto.message.ParkourRank)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto::message::ParkourRank_RecordItem > item_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_parkour_2eproto();
  friend void protobuf_AssignDesc_parkour_2eproto();
  friend void protobuf_ShutdownFile_parkour_2eproto();

  void InitAsDefaultInstance();
  static ParkourRank* default_instance_;
};
// -------------------------------------------------------------------

class Parkour_SC_GetInfo_Path : public ::google::protobuf::Message {
 public:
  Parkour_SC_GetInfo_Path();
  virtual ~Parkour_SC_GetInfo_Path();

  Parkour_SC_GetInfo_Path(const Parkour_SC_GetInfo_Path& from);

  inline Parkour_SC_GetInfo_Path& operator=(const Parkour_SC_GetInfo_Path& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Parkour_SC_GetInfo_Path& default_instance();

  void Swap(Parkour_SC_GetInfo_Path* other);

  // implements Message ----------------------------------------------

  Parkour_SC_GetInfo_Path* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Parkour_SC_GetInfo_Path& from);
  void MergeFrom(const Parkour_SC_GetInfo_Path& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 check = 1;
  inline int check_size() const;
  inline void clear_check();
  static const int kCheckFieldNumber = 1;
  inline ::google::protobuf::int32 check(int index) const;
  inline void set_check(int index, ::google::protobuf::int32 value);
  inline void add_check(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      check() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_check();

  // @@protoc_insertion_point(class_scope:proto.message.Parkour_SC_GetInfo.Path)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > check_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_parkour_2eproto();
  friend void protobuf_AssignDesc_parkour_2eproto();
  friend void protobuf_ShutdownFile_parkour_2eproto();

  void InitAsDefaultInstance();
  static Parkour_SC_GetInfo_Path* default_instance_;
};
// -------------------------------------------------------------------

class Parkour_SC_GetInfo : public ::google::protobuf::Message {
 public:
  Parkour_SC_GetInfo();
  virtual ~Parkour_SC_GetInfo();

  Parkour_SC_GetInfo(const Parkour_SC_GetInfo& from);

  inline Parkour_SC_GetInfo& operator=(const Parkour_SC_GetInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Parkour_SC_GetInfo& default_instance();

  void Swap(Parkour_SC_GetInfo* other);

  // implements Message ----------------------------------------------

  Parkour_SC_GetInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Parkour_SC_GetInfo& from);
  void MergeFrom(const Parkour_SC_GetInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Parkour_SC_GetInfo_Path Path;

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional int32 weekday = 2;
  inline bool has_weekday() const;
  inline void clear_weekday();
  static const int kWeekdayFieldNumber = 2;
  inline ::google::protobuf::int32 weekday() const;
  inline void set_weekday(::google::protobuf::int32 value);

  // optional .proto.message.ParkourInfo parkour = 3;
  inline bool has_parkour() const;
  inline void clear_parkour();
  static const int kParkourFieldNumber = 3;
  inline const ::proto::message::ParkourInfo& parkour() const;
  inline ::proto::message::ParkourInfo* mutable_parkour();
  inline ::proto::message::ParkourInfo* release_parkour();
  inline void set_allocated_parkour(::proto::message::ParkourInfo* parkour);

  // optional int32 leftTime = 4;
  inline bool has_lefttime() const;
  inline void clear_lefttime();
  static const int kLeftTimeFieldNumber = 4;
  inline ::google::protobuf::int32 lefttime() const;
  inline void set_lefttime(::google::protobuf::int32 value);

  // optional int32 dungonid1 = 5;
  inline bool has_dungonid1() const;
  inline void clear_dungonid1();
  static const int kDungonid1FieldNumber = 5;
  inline ::google::protobuf::int32 dungonid1() const;
  inline void set_dungonid1(::google::protobuf::int32 value);

  // optional int32 dungonid2 = 6;
  inline bool has_dungonid2() const;
  inline void clear_dungonid2();
  static const int kDungonid2FieldNumber = 6;
  inline ::google::protobuf::int32 dungonid2() const;
  inline void set_dungonid2(::google::protobuf::int32 value);

  // optional .proto.message.ParkourRank rank = 7;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 7;
  inline const ::proto::message::ParkourRank& rank() const;
  inline ::proto::message::ParkourRank* mutable_rank();
  inline ::proto::message::ParkourRank* release_rank();
  inline void set_allocated_rank(::proto::message::ParkourRank* rank);

  // @@protoc_insertion_point(class_scope:proto.message.Parkour_SC_GetInfo)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_weekday();
  inline void clear_has_weekday();
  inline void set_has_parkour();
  inline void clear_has_parkour();
  inline void set_has_lefttime();
  inline void clear_has_lefttime();
  inline void set_has_dungonid1();
  inline void clear_has_dungonid1();
  inline void set_has_dungonid2();
  inline void clear_has_dungonid2();
  inline void set_has_rank();
  inline void clear_has_rank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 weekday_;
  ::proto::message::ParkourInfo* parkour_;
  ::google::protobuf::int32 lefttime_;
  ::google::protobuf::int32 dungonid1_;
  ::proto::message::ParkourRank* rank_;
  ::google::protobuf::int32 dungonid2_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_parkour_2eproto();
  friend void protobuf_AssignDesc_parkour_2eproto();
  friend void protobuf_ShutdownFile_parkour_2eproto();

  void InitAsDefaultInstance();
  static Parkour_SC_GetInfo* default_instance_;
};
// -------------------------------------------------------------------

class Parkour_SC_ReqBegin : public ::google::protobuf::Message {
 public:
  Parkour_SC_ReqBegin();
  virtual ~Parkour_SC_ReqBegin();

  Parkour_SC_ReqBegin(const Parkour_SC_ReqBegin& from);

  inline Parkour_SC_ReqBegin& operator=(const Parkour_SC_ReqBegin& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Parkour_SC_ReqBegin& default_instance();

  void Swap(Parkour_SC_ReqBegin* other);

  // implements Message ----------------------------------------------

  Parkour_SC_ReqBegin* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Parkour_SC_ReqBegin& from);
  void MergeFrom(const Parkour_SC_ReqBegin& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Parkour_SC_ReqBegin)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_parkour_2eproto();
  friend void protobuf_AssignDesc_parkour_2eproto();
  friend void protobuf_ShutdownFile_parkour_2eproto();

  void InitAsDefaultInstance();
  static Parkour_SC_ReqBegin* default_instance_;
};
// -------------------------------------------------------------------

class Parkour_CS_Finish : public ::google::protobuf::Message {
 public:
  Parkour_CS_Finish();
  virtual ~Parkour_CS_Finish();

  Parkour_CS_Finish(const Parkour_CS_Finish& from);

  inline Parkour_CS_Finish& operator=(const Parkour_CS_Finish& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Parkour_CS_Finish& default_instance();

  void Swap(Parkour_CS_Finish* other);

  // implements Message ----------------------------------------------

  Parkour_CS_Finish* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Parkour_CS_Finish& from);
  void MergeFrom(const Parkour_CS_Finish& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 point = 1;
  inline bool has_point() const;
  inline void clear_point();
  static const int kPointFieldNumber = 1;
  inline ::google::protobuf::int32 point() const;
  inline void set_point(::google::protobuf::int32 value);

  // required int32 parkourType = 2;
  inline bool has_parkourtype() const;
  inline void clear_parkourtype();
  static const int kParkourTypeFieldNumber = 2;
  inline ::google::protobuf::int32 parkourtype() const;
  inline void set_parkourtype(::google::protobuf::int32 value);

  // optional int32 item1num = 3;
  inline bool has_item1num() const;
  inline void clear_item1num();
  static const int kItem1NumFieldNumber = 3;
  inline ::google::protobuf::int32 item1num() const;
  inline void set_item1num(::google::protobuf::int32 value);

  // optional int32 item2num = 4;
  inline bool has_item2num() const;
  inline void clear_item2num();
  static const int kItem2NumFieldNumber = 4;
  inline ::google::protobuf::int32 item2num() const;
  inline void set_item2num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Parkour_CS_Finish)
 private:
  inline void set_has_point();
  inline void clear_has_point();
  inline void set_has_parkourtype();
  inline void clear_has_parkourtype();
  inline void set_has_item1num();
  inline void clear_has_item1num();
  inline void set_has_item2num();
  inline void clear_has_item2num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 point_;
  ::google::protobuf::int32 parkourtype_;
  ::google::protobuf::int32 item1num_;
  ::google::protobuf::int32 item2num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_parkour_2eproto();
  friend void protobuf_AssignDesc_parkour_2eproto();
  friend void protobuf_ShutdownFile_parkour_2eproto();

  void InitAsDefaultInstance();
  static Parkour_CS_Finish* default_instance_;
};
// -------------------------------------------------------------------

class ParkourInfo : public ::google::protobuf::Message {
 public:
  ParkourInfo();
  virtual ~ParkourInfo();

  ParkourInfo(const ParkourInfo& from);

  inline ParkourInfo& operator=(const ParkourInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ParkourInfo& default_instance();

  void Swap(ParkourInfo* other);

  // implements Message ----------------------------------------------

  ParkourInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ParkourInfo& from);
  void MergeFrom(const ParkourInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 dayTimes = 1;
  inline bool has_daytimes() const;
  inline void clear_daytimes();
  static const int kDayTimesFieldNumber = 1;
  inline ::google::protobuf::int32 daytimes() const;
  inline void set_daytimes(::google::protobuf::int32 value);

  // optional int32 item1Num = 2;
  inline bool has_item1num() const;
  inline void clear_item1num();
  static const int kItem1NumFieldNumber = 2;
  inline ::google::protobuf::int32 item1num() const;
  inline void set_item1num(::google::protobuf::int32 value);

  // optional int32 item2Num = 3;
  inline bool has_item2num() const;
  inline void clear_item2num();
  static const int kItem2NumFieldNumber = 3;
  inline ::google::protobuf::int32 item2num() const;
  inline void set_item2num(::google::protobuf::int32 value);

  // optional int32 highest1 = 4;
  inline bool has_highest1() const;
  inline void clear_highest1();
  static const int kHighest1FieldNumber = 4;
  inline ::google::protobuf::int32 highest1() const;
  inline void set_highest1(::google::protobuf::int32 value);

  // optional int32 highest2 = 5;
  inline bool has_highest2() const;
  inline void clear_highest2();
  static const int kHighest2FieldNumber = 5;
  inline ::google::protobuf::int32 highest2() const;
  inline void set_highest2(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.message.ParkourInfo)
 private:
  inline void set_has_daytimes();
  inline void clear_has_daytimes();
  inline void set_has_item1num();
  inline void clear_has_item1num();
  inline void set_has_item2num();
  inline void clear_has_item2num();
  inline void set_has_highest1();
  inline void clear_has_highest1();
  inline void set_has_highest2();
  inline void clear_has_highest2();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 daytimes_;
  ::google::protobuf::int32 item1num_;
  ::google::protobuf::int32 item2num_;
  ::google::protobuf::int32 highest1_;
  ::google::protobuf::int32 highest2_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_parkour_2eproto();
  friend void protobuf_AssignDesc_parkour_2eproto();
  friend void protobuf_ShutdownFile_parkour_2eproto();

  void InitAsDefaultInstance();
  static ParkourInfo* default_instance_;
};
// -------------------------------------------------------------------

class Parkour_CS_UsePotion : public ::google::protobuf::Message {
 public:
  Parkour_CS_UsePotion();
  virtual ~Parkour_CS_UsePotion();

  Parkour_CS_UsePotion(const Parkour_CS_UsePotion& from);

  inline Parkour_CS_UsePotion& operator=(const Parkour_CS_UsePotion& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Parkour_CS_UsePotion& default_instance();

  void Swap(Parkour_CS_UsePotion* other);

  // implements Message ----------------------------------------------

  Parkour_CS_UsePotion* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Parkour_CS_UsePotion& from);
  void MergeFrom(const Parkour_CS_UsePotion& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 potionindex = 1;
  inline bool has_potionindex() const;
  inline void clear_potionindex();
  static const int kPotionindexFieldNumber = 1;
  inline ::google::protobuf::int32 potionindex() const;
  inline void set_potionindex(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Parkour_CS_UsePotion)
 private:
  inline void set_has_potionindex();
  inline void clear_has_potionindex();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 potionindex_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_parkour_2eproto();
  friend void protobuf_AssignDesc_parkour_2eproto();
  friend void protobuf_ShutdownFile_parkour_2eproto();

  void InitAsDefaultInstance();
  static Parkour_CS_UsePotion* default_instance_;
};
// -------------------------------------------------------------------

class Parkour_SC_UsePotion : public ::google::protobuf::Message {
 public:
  Parkour_SC_UsePotion();
  virtual ~Parkour_SC_UsePotion();

  Parkour_SC_UsePotion(const Parkour_SC_UsePotion& from);

  inline Parkour_SC_UsePotion& operator=(const Parkour_SC_UsePotion& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Parkour_SC_UsePotion& default_instance();

  void Swap(Parkour_SC_UsePotion* other);

  // implements Message ----------------------------------------------

  Parkour_SC_UsePotion* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Parkour_SC_UsePotion& from);
  void MergeFrom(const Parkour_SC_UsePotion& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Parkour_SC_UsePotion)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_parkour_2eproto();
  friend void protobuf_AssignDesc_parkour_2eproto();
  friend void protobuf_ShutdownFile_parkour_2eproto();

  void InitAsDefaultInstance();
  static Parkour_SC_UsePotion* default_instance_;
};
// ===================================================================


// ===================================================================

// Parkour_CS_GetInfo

// -------------------------------------------------------------------

// Parkour_CS_ReqBegin

// -------------------------------------------------------------------

// ParkourRank_RecordItem

// required int32 ranking = 1;
inline bool ParkourRank_RecordItem::has_ranking() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ParkourRank_RecordItem::set_has_ranking() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ParkourRank_RecordItem::clear_has_ranking() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ParkourRank_RecordItem::clear_ranking() {
  ranking_ = 0;
  clear_has_ranking();
}
inline ::google::protobuf::int32 ParkourRank_RecordItem::ranking() const {
  return ranking_;
}
inline void ParkourRank_RecordItem::set_ranking(::google::protobuf::int32 value) {
  set_has_ranking();
  ranking_ = value;
}

// required string name = 2;
inline bool ParkourRank_RecordItem::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ParkourRank_RecordItem::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ParkourRank_RecordItem::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ParkourRank_RecordItem::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ParkourRank_RecordItem::name() const {
  return *name_;
}
inline void ParkourRank_RecordItem::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ParkourRank_RecordItem::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ParkourRank_RecordItem::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ParkourRank_RecordItem::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* ParkourRank_RecordItem::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ParkourRank_RecordItem::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 score = 3;
inline bool ParkourRank_RecordItem::has_score() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ParkourRank_RecordItem::set_has_score() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ParkourRank_RecordItem::clear_has_score() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ParkourRank_RecordItem::clear_score() {
  score_ = 0;
  clear_has_score();
}
inline ::google::protobuf::int32 ParkourRank_RecordItem::score() const {
  return score_;
}
inline void ParkourRank_RecordItem::set_score(::google::protobuf::int32 value) {
  set_has_score();
  score_ = value;
}

// -------------------------------------------------------------------

// ParkourRank

// repeated .proto.message.ParkourRank.RecordItem item = 1;
inline int ParkourRank::item_size() const {
  return item_.size();
}
inline void ParkourRank::clear_item() {
  item_.Clear();
}
inline const ::proto::message::ParkourRank_RecordItem& ParkourRank::item(int index) const {
  return item_.Get(index);
}
inline ::proto::message::ParkourRank_RecordItem* ParkourRank::mutable_item(int index) {
  return item_.Mutable(index);
}
inline ::proto::message::ParkourRank_RecordItem* ParkourRank::add_item() {
  return item_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::message::ParkourRank_RecordItem >&
ParkourRank::item() const {
  return item_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::message::ParkourRank_RecordItem >*
ParkourRank::mutable_item() {
  return &item_;
}

// -------------------------------------------------------------------

// Parkour_SC_GetInfo_Path

// repeated int32 check = 1;
inline int Parkour_SC_GetInfo_Path::check_size() const {
  return check_.size();
}
inline void Parkour_SC_GetInfo_Path::clear_check() {
  check_.Clear();
}
inline ::google::protobuf::int32 Parkour_SC_GetInfo_Path::check(int index) const {
  return check_.Get(index);
}
inline void Parkour_SC_GetInfo_Path::set_check(int index, ::google::protobuf::int32 value) {
  check_.Set(index, value);
}
inline void Parkour_SC_GetInfo_Path::add_check(::google::protobuf::int32 value) {
  check_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Parkour_SC_GetInfo_Path::check() const {
  return check_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Parkour_SC_GetInfo_Path::mutable_check() {
  return &check_;
}

// -------------------------------------------------------------------

// Parkour_SC_GetInfo

// required int32 result = 1;
inline bool Parkour_SC_GetInfo::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Parkour_SC_GetInfo::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Parkour_SC_GetInfo::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Parkour_SC_GetInfo::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 Parkour_SC_GetInfo::result() const {
  return result_;
}
inline void Parkour_SC_GetInfo::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional int32 weekday = 2;
inline bool Parkour_SC_GetInfo::has_weekday() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Parkour_SC_GetInfo::set_has_weekday() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Parkour_SC_GetInfo::clear_has_weekday() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Parkour_SC_GetInfo::clear_weekday() {
  weekday_ = 0;
  clear_has_weekday();
}
inline ::google::protobuf::int32 Parkour_SC_GetInfo::weekday() const {
  return weekday_;
}
inline void Parkour_SC_GetInfo::set_weekday(::google::protobuf::int32 value) {
  set_has_weekday();
  weekday_ = value;
}

// optional .proto.message.ParkourInfo parkour = 3;
inline bool Parkour_SC_GetInfo::has_parkour() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Parkour_SC_GetInfo::set_has_parkour() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Parkour_SC_GetInfo::clear_has_parkour() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Parkour_SC_GetInfo::clear_parkour() {
  if (parkour_ != NULL) parkour_->::proto::message::ParkourInfo::Clear();
  clear_has_parkour();
}
inline const ::proto::message::ParkourInfo& Parkour_SC_GetInfo::parkour() const {
  return parkour_ != NULL ? *parkour_ : *default_instance_->parkour_;
}
inline ::proto::message::ParkourInfo* Parkour_SC_GetInfo::mutable_parkour() {
  set_has_parkour();
  if (parkour_ == NULL) parkour_ = new ::proto::message::ParkourInfo;
  return parkour_;
}
inline ::proto::message::ParkourInfo* Parkour_SC_GetInfo::release_parkour() {
  clear_has_parkour();
  ::proto::message::ParkourInfo* temp = parkour_;
  parkour_ = NULL;
  return temp;
}
inline void Parkour_SC_GetInfo::set_allocated_parkour(::proto::message::ParkourInfo* parkour) {
  delete parkour_;
  parkour_ = parkour;
  if (parkour) {
    set_has_parkour();
  } else {
    clear_has_parkour();
  }
}

// optional int32 leftTime = 4;
inline bool Parkour_SC_GetInfo::has_lefttime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Parkour_SC_GetInfo::set_has_lefttime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Parkour_SC_GetInfo::clear_has_lefttime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Parkour_SC_GetInfo::clear_lefttime() {
  lefttime_ = 0;
  clear_has_lefttime();
}
inline ::google::protobuf::int32 Parkour_SC_GetInfo::lefttime() const {
  return lefttime_;
}
inline void Parkour_SC_GetInfo::set_lefttime(::google::protobuf::int32 value) {
  set_has_lefttime();
  lefttime_ = value;
}

// optional int32 dungonid1 = 5;
inline bool Parkour_SC_GetInfo::has_dungonid1() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Parkour_SC_GetInfo::set_has_dungonid1() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Parkour_SC_GetInfo::clear_has_dungonid1() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Parkour_SC_GetInfo::clear_dungonid1() {
  dungonid1_ = 0;
  clear_has_dungonid1();
}
inline ::google::protobuf::int32 Parkour_SC_GetInfo::dungonid1() const {
  return dungonid1_;
}
inline void Parkour_SC_GetInfo::set_dungonid1(::google::protobuf::int32 value) {
  set_has_dungonid1();
  dungonid1_ = value;
}

// optional int32 dungonid2 = 6;
inline bool Parkour_SC_GetInfo::has_dungonid2() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Parkour_SC_GetInfo::set_has_dungonid2() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Parkour_SC_GetInfo::clear_has_dungonid2() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Parkour_SC_GetInfo::clear_dungonid2() {
  dungonid2_ = 0;
  clear_has_dungonid2();
}
inline ::google::protobuf::int32 Parkour_SC_GetInfo::dungonid2() const {
  return dungonid2_;
}
inline void Parkour_SC_GetInfo::set_dungonid2(::google::protobuf::int32 value) {
  set_has_dungonid2();
  dungonid2_ = value;
}

// optional .proto.message.ParkourRank rank = 7;
inline bool Parkour_SC_GetInfo::has_rank() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Parkour_SC_GetInfo::set_has_rank() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Parkour_SC_GetInfo::clear_has_rank() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Parkour_SC_GetInfo::clear_rank() {
  if (rank_ != NULL) rank_->::proto::message::ParkourRank::Clear();
  clear_has_rank();
}
inline const ::proto::message::ParkourRank& Parkour_SC_GetInfo::rank() const {
  return rank_ != NULL ? *rank_ : *default_instance_->rank_;
}
inline ::proto::message::ParkourRank* Parkour_SC_GetInfo::mutable_rank() {
  set_has_rank();
  if (rank_ == NULL) rank_ = new ::proto::message::ParkourRank;
  return rank_;
}
inline ::proto::message::ParkourRank* Parkour_SC_GetInfo::release_rank() {
  clear_has_rank();
  ::proto::message::ParkourRank* temp = rank_;
  rank_ = NULL;
  return temp;
}
inline void Parkour_SC_GetInfo::set_allocated_rank(::proto::message::ParkourRank* rank) {
  delete rank_;
  rank_ = rank;
  if (rank) {
    set_has_rank();
  } else {
    clear_has_rank();
  }
}

// -------------------------------------------------------------------

// Parkour_SC_ReqBegin

// required int32 result = 1;
inline bool Parkour_SC_ReqBegin::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Parkour_SC_ReqBegin::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Parkour_SC_ReqBegin::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Parkour_SC_ReqBegin::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 Parkour_SC_ReqBegin::result() const {
  return result_;
}
inline void Parkour_SC_ReqBegin::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// Parkour_CS_Finish

// required int32 point = 1;
inline bool Parkour_CS_Finish::has_point() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Parkour_CS_Finish::set_has_point() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Parkour_CS_Finish::clear_has_point() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Parkour_CS_Finish::clear_point() {
  point_ = 0;
  clear_has_point();
}
inline ::google::protobuf::int32 Parkour_CS_Finish::point() const {
  return point_;
}
inline void Parkour_CS_Finish::set_point(::google::protobuf::int32 value) {
  set_has_point();
  point_ = value;
}

// required int32 parkourType = 2;
inline bool Parkour_CS_Finish::has_parkourtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Parkour_CS_Finish::set_has_parkourtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Parkour_CS_Finish::clear_has_parkourtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Parkour_CS_Finish::clear_parkourtype() {
  parkourtype_ = 0;
  clear_has_parkourtype();
}
inline ::google::protobuf::int32 Parkour_CS_Finish::parkourtype() const {
  return parkourtype_;
}
inline void Parkour_CS_Finish::set_parkourtype(::google::protobuf::int32 value) {
  set_has_parkourtype();
  parkourtype_ = value;
}

// optional int32 item1num = 3;
inline bool Parkour_CS_Finish::has_item1num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Parkour_CS_Finish::set_has_item1num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Parkour_CS_Finish::clear_has_item1num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Parkour_CS_Finish::clear_item1num() {
  item1num_ = 0;
  clear_has_item1num();
}
inline ::google::protobuf::int32 Parkour_CS_Finish::item1num() const {
  return item1num_;
}
inline void Parkour_CS_Finish::set_item1num(::google::protobuf::int32 value) {
  set_has_item1num();
  item1num_ = value;
}

// optional int32 item2num = 4;
inline bool Parkour_CS_Finish::has_item2num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Parkour_CS_Finish::set_has_item2num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Parkour_CS_Finish::clear_has_item2num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Parkour_CS_Finish::clear_item2num() {
  item2num_ = 0;
  clear_has_item2num();
}
inline ::google::protobuf::int32 Parkour_CS_Finish::item2num() const {
  return item2num_;
}
inline void Parkour_CS_Finish::set_item2num(::google::protobuf::int32 value) {
  set_has_item2num();
  item2num_ = value;
}

// -------------------------------------------------------------------

// ParkourInfo

// required int32 dayTimes = 1;
inline bool ParkourInfo::has_daytimes() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ParkourInfo::set_has_daytimes() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ParkourInfo::clear_has_daytimes() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ParkourInfo::clear_daytimes() {
  daytimes_ = 0;
  clear_has_daytimes();
}
inline ::google::protobuf::int32 ParkourInfo::daytimes() const {
  return daytimes_;
}
inline void ParkourInfo::set_daytimes(::google::protobuf::int32 value) {
  set_has_daytimes();
  daytimes_ = value;
}

// optional int32 item1Num = 2;
inline bool ParkourInfo::has_item1num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ParkourInfo::set_has_item1num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ParkourInfo::clear_has_item1num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ParkourInfo::clear_item1num() {
  item1num_ = 0;
  clear_has_item1num();
}
inline ::google::protobuf::int32 ParkourInfo::item1num() const {
  return item1num_;
}
inline void ParkourInfo::set_item1num(::google::protobuf::int32 value) {
  set_has_item1num();
  item1num_ = value;
}

// optional int32 item2Num = 3;
inline bool ParkourInfo::has_item2num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ParkourInfo::set_has_item2num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ParkourInfo::clear_has_item2num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ParkourInfo::clear_item2num() {
  item2num_ = 0;
  clear_has_item2num();
}
inline ::google::protobuf::int32 ParkourInfo::item2num() const {
  return item2num_;
}
inline void ParkourInfo::set_item2num(::google::protobuf::int32 value) {
  set_has_item2num();
  item2num_ = value;
}

// optional int32 highest1 = 4;
inline bool ParkourInfo::has_highest1() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ParkourInfo::set_has_highest1() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ParkourInfo::clear_has_highest1() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ParkourInfo::clear_highest1() {
  highest1_ = 0;
  clear_has_highest1();
}
inline ::google::protobuf::int32 ParkourInfo::highest1() const {
  return highest1_;
}
inline void ParkourInfo::set_highest1(::google::protobuf::int32 value) {
  set_has_highest1();
  highest1_ = value;
}

// optional int32 highest2 = 5;
inline bool ParkourInfo::has_highest2() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ParkourInfo::set_has_highest2() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ParkourInfo::clear_has_highest2() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ParkourInfo::clear_highest2() {
  highest2_ = 0;
  clear_has_highest2();
}
inline ::google::protobuf::int32 ParkourInfo::highest2() const {
  return highest2_;
}
inline void ParkourInfo::set_highest2(::google::protobuf::int32 value) {
  set_has_highest2();
  highest2_ = value;
}

// -------------------------------------------------------------------

// Parkour_CS_UsePotion

// required int32 potionindex = 1;
inline bool Parkour_CS_UsePotion::has_potionindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Parkour_CS_UsePotion::set_has_potionindex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Parkour_CS_UsePotion::clear_has_potionindex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Parkour_CS_UsePotion::clear_potionindex() {
  potionindex_ = 0;
  clear_has_potionindex();
}
inline ::google::protobuf::int32 Parkour_CS_UsePotion::potionindex() const {
  return potionindex_;
}
inline void Parkour_CS_UsePotion::set_potionindex(::google::protobuf::int32 value) {
  set_has_potionindex();
  potionindex_ = value;
}

// -------------------------------------------------------------------

// Parkour_SC_UsePotion

// required int32 result = 1;
inline bool Parkour_SC_UsePotion::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Parkour_SC_UsePotion::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Parkour_SC_UsePotion::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Parkour_SC_UsePotion::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 Parkour_SC_UsePotion::result() const {
  return result_;
}
inline void Parkour_SC_UsePotion::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace proto

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_parkour_2eproto__INCLUDED
