// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: db_friend.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "db_friend.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace message {

namespace {

const ::google::protobuf::Descriptor* ProtoDbFriendDayShip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoDbFriendDayShip_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoDbFriendShip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoDbFriendShip_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoAllFriendInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoAllFriendInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_db_5ffriend_2eproto() {
  protobuf_AddDesc_db_5ffriend_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "db_friend.proto");
  GOOGLE_CHECK(file != NULL);
  ProtoDbFriendDayShip_descriptor_ = file->message_type(0);
  static const int ProtoDbFriendDayShip_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoDbFriendDayShip, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoDbFriendDayShip, count_),
  };
  ProtoDbFriendDayShip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoDbFriendDayShip_descriptor_,
      ProtoDbFriendDayShip::default_instance_,
      ProtoDbFriendDayShip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoDbFriendDayShip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoDbFriendDayShip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoDbFriendDayShip));
  ProtoDbFriendShip_descriptor_ = file->message_type(1);
  static const int ProtoDbFriendShip_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoDbFriendShip, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoDbFriendShip, friendship_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoDbFriendShip, deltime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoDbFriendShip, dayship_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoDbFriendShip, friendlev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoDbFriendShip, friendpro_),
  };
  ProtoDbFriendShip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoDbFriendShip_descriptor_,
      ProtoDbFriendShip::default_instance_,
      ProtoDbFriendShip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoDbFriendShip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoDbFriendShip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoDbFriendShip));
  ProtoAllFriendInfo_descriptor_ = file->message_type(2);
  static const int ProtoAllFriendInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAllFriendInfo, friendlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAllFriendInfo, blacklist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAllFriendInfo, friendshiplist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAllFriendInfo, cleantime_),
  };
  ProtoAllFriendInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoAllFriendInfo_descriptor_,
      ProtoAllFriendInfo::default_instance_,
      ProtoAllFriendInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAllFriendInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAllFriendInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoAllFriendInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_db_5ffriend_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoDbFriendDayShip_descriptor_, &ProtoDbFriendDayShip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoDbFriendShip_descriptor_, &ProtoDbFriendShip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoAllFriendInfo_descriptor_, &ProtoAllFriendInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_db_5ffriend_2eproto() {
  delete ProtoDbFriendDayShip::default_instance_;
  delete ProtoDbFriendDayShip_reflection_;
  delete ProtoDbFriendShip::default_instance_;
  delete ProtoDbFriendShip_reflection_;
  delete ProtoAllFriendInfo::default_instance_;
  delete ProtoAllFriendInfo_reflection_;
}

void protobuf_AddDesc_db_5ffriend_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017db_friend.proto\022\rproto.message\"3\n\024Prot"
    "oDbFriendDayShip\022\014\n\004type\030\001 \001(\005\022\r\n\005count\030"
    "\002 \001(\005\"\244\001\n\021ProtoDbFriendShip\022\016\n\006charId\030\001 "
    "\001(\004\022\022\n\nfriendShip\030\002 \001(\005\022\017\n\007delTime\030\003 \001(\005"
    "\0224\n\007dayShip\030\004 \003(\0132#.proto.message.ProtoD"
    "bFriendDayShip\022\021\n\tfriendlev\030\005 \001(\005\022\021\n\tfri"
    "endpro\030\006 \001(\005\"\210\001\n\022ProtoAllFriendInfo\022\022\n\nf"
    "riendList\030\001 \003(\004\022\021\n\tblackList\030\002 \003(\004\0228\n\016fr"
    "iendShipList\030\003 \003(\0132 .proto.message.Proto"
    "DbFriendShip\022\021\n\tcleanTime\030\004 \001(\005", 391);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "db_friend.proto", &protobuf_RegisterTypes);
  ProtoDbFriendDayShip::default_instance_ = new ProtoDbFriendDayShip();
  ProtoDbFriendShip::default_instance_ = new ProtoDbFriendShip();
  ProtoAllFriendInfo::default_instance_ = new ProtoAllFriendInfo();
  ProtoDbFriendDayShip::default_instance_->InitAsDefaultInstance();
  ProtoDbFriendShip::default_instance_->InitAsDefaultInstance();
  ProtoAllFriendInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_db_5ffriend_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_db_5ffriend_2eproto {
  StaticDescriptorInitializer_db_5ffriend_2eproto() {
    protobuf_AddDesc_db_5ffriend_2eproto();
  }
} static_descriptor_initializer_db_5ffriend_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ProtoDbFriendDayShip::kTypeFieldNumber;
const int ProtoDbFriendDayShip::kCountFieldNumber;
#endif  // !_MSC_VER

ProtoDbFriendDayShip::ProtoDbFriendDayShip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoDbFriendDayShip::InitAsDefaultInstance() {
}

ProtoDbFriendDayShip::ProtoDbFriendDayShip(const ProtoDbFriendDayShip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoDbFriendDayShip::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoDbFriendDayShip::~ProtoDbFriendDayShip() {
  SharedDtor();
}

void ProtoDbFriendDayShip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoDbFriendDayShip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoDbFriendDayShip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoDbFriendDayShip_descriptor_;
}

const ProtoDbFriendDayShip& ProtoDbFriendDayShip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_5ffriend_2eproto();
  return *default_instance_;
}

ProtoDbFriendDayShip* ProtoDbFriendDayShip::default_instance_ = NULL;

ProtoDbFriendDayShip* ProtoDbFriendDayShip::New() const {
  return new ProtoDbFriendDayShip;
}

void ProtoDbFriendDayShip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoDbFriendDayShip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // optional int32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoDbFriendDayShip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoDbFriendDayShip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoDbFriendDayShip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoDbFriendDayShip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoDbFriendDayShip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoDbFriendDayShip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoDbFriendDayShip::MergeFrom(const ProtoDbFriendDayShip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoDbFriendDayShip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoDbFriendDayShip::CopyFrom(const ProtoDbFriendDayShip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoDbFriendDayShip::IsInitialized() const {

  return true;
}

void ProtoDbFriendDayShip::Swap(ProtoDbFriendDayShip* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoDbFriendDayShip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoDbFriendDayShip_descriptor_;
  metadata.reflection = ProtoDbFriendDayShip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoDbFriendShip::kCharIdFieldNumber;
const int ProtoDbFriendShip::kFriendShipFieldNumber;
const int ProtoDbFriendShip::kDelTimeFieldNumber;
const int ProtoDbFriendShip::kDayShipFieldNumber;
const int ProtoDbFriendShip::kFriendlevFieldNumber;
const int ProtoDbFriendShip::kFriendproFieldNumber;
#endif  // !_MSC_VER

ProtoDbFriendShip::ProtoDbFriendShip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoDbFriendShip::InitAsDefaultInstance() {
}

ProtoDbFriendShip::ProtoDbFriendShip(const ProtoDbFriendShip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoDbFriendShip::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  friendship_ = 0;
  deltime_ = 0;
  friendlev_ = 0;
  friendpro_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoDbFriendShip::~ProtoDbFriendShip() {
  SharedDtor();
}

void ProtoDbFriendShip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoDbFriendShip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoDbFriendShip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoDbFriendShip_descriptor_;
}

const ProtoDbFriendShip& ProtoDbFriendShip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_5ffriend_2eproto();
  return *default_instance_;
}

ProtoDbFriendShip* ProtoDbFriendShip::default_instance_ = NULL;

ProtoDbFriendShip* ProtoDbFriendShip::New() const {
  return new ProtoDbFriendShip;
}

void ProtoDbFriendShip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_ULONGLONG(0);
    friendship_ = 0;
    deltime_ = 0;
    friendlev_ = 0;
    friendpro_ = 0;
  }
  dayship_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoDbFriendShip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 charId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_friendShip;
        break;
      }

      // optional int32 friendShip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_friendShip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &friendship_)));
          set_has_friendship();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_delTime;
        break;
      }

      // optional int32 delTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_delTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deltime_)));
          set_has_deltime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_dayShip;
        break;
      }

      // repeated .proto.message.ProtoDbFriendDayShip dayShip = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dayShip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dayship()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_dayShip;
        if (input->ExpectTag(40)) goto parse_friendlev;
        break;
      }

      // optional int32 friendlev = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_friendlev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &friendlev_)));
          set_has_friendlev();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_friendpro;
        break;
      }

      // optional int32 friendpro = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_friendpro:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &friendpro_)));
          set_has_friendpro();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoDbFriendShip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 charId = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  // optional int32 friendShip = 2;
  if (has_friendship()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->friendship(), output);
  }

  // optional int32 delTime = 3;
  if (has_deltime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->deltime(), output);
  }

  // repeated .proto.message.ProtoDbFriendDayShip dayShip = 4;
  for (int i = 0; i < this->dayship_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->dayship(i), output);
  }

  // optional int32 friendlev = 5;
  if (has_friendlev()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->friendlev(), output);
  }

  // optional int32 friendpro = 6;
  if (has_friendpro()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->friendpro(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoDbFriendShip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 charId = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  // optional int32 friendShip = 2;
  if (has_friendship()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->friendship(), target);
  }

  // optional int32 delTime = 3;
  if (has_deltime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->deltime(), target);
  }

  // repeated .proto.message.ProtoDbFriendDayShip dayShip = 4;
  for (int i = 0; i < this->dayship_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->dayship(i), target);
  }

  // optional int32 friendlev = 5;
  if (has_friendlev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->friendlev(), target);
  }

  // optional int32 friendpro = 6;
  if (has_friendpro()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->friendpro(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoDbFriendShip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 charId = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional int32 friendShip = 2;
    if (has_friendship()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->friendship());
    }

    // optional int32 delTime = 3;
    if (has_deltime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->deltime());
    }

    // optional int32 friendlev = 5;
    if (has_friendlev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->friendlev());
    }

    // optional int32 friendpro = 6;
    if (has_friendpro()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->friendpro());
    }

  }
  // repeated .proto.message.ProtoDbFriendDayShip dayShip = 4;
  total_size += 1 * this->dayship_size();
  for (int i = 0; i < this->dayship_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dayship(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoDbFriendShip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoDbFriendShip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoDbFriendShip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoDbFriendShip::MergeFrom(const ProtoDbFriendShip& from) {
  GOOGLE_CHECK_NE(&from, this);
  dayship_.MergeFrom(from.dayship_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_friendship()) {
      set_friendship(from.friendship());
    }
    if (from.has_deltime()) {
      set_deltime(from.deltime());
    }
    if (from.has_friendlev()) {
      set_friendlev(from.friendlev());
    }
    if (from.has_friendpro()) {
      set_friendpro(from.friendpro());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoDbFriendShip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoDbFriendShip::CopyFrom(const ProtoDbFriendShip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoDbFriendShip::IsInitialized() const {

  return true;
}

void ProtoDbFriendShip::Swap(ProtoDbFriendShip* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(friendship_, other->friendship_);
    std::swap(deltime_, other->deltime_);
    dayship_.Swap(&other->dayship_);
    std::swap(friendlev_, other->friendlev_);
    std::swap(friendpro_, other->friendpro_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoDbFriendShip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoDbFriendShip_descriptor_;
  metadata.reflection = ProtoDbFriendShip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoAllFriendInfo::kFriendListFieldNumber;
const int ProtoAllFriendInfo::kBlackListFieldNumber;
const int ProtoAllFriendInfo::kFriendShipListFieldNumber;
const int ProtoAllFriendInfo::kCleanTimeFieldNumber;
#endif  // !_MSC_VER

ProtoAllFriendInfo::ProtoAllFriendInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoAllFriendInfo::InitAsDefaultInstance() {
}

ProtoAllFriendInfo::ProtoAllFriendInfo(const ProtoAllFriendInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoAllFriendInfo::SharedCtor() {
  _cached_size_ = 0;
  cleantime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoAllFriendInfo::~ProtoAllFriendInfo() {
  SharedDtor();
}

void ProtoAllFriendInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoAllFriendInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoAllFriendInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoAllFriendInfo_descriptor_;
}

const ProtoAllFriendInfo& ProtoAllFriendInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_5ffriend_2eproto();
  return *default_instance_;
}

ProtoAllFriendInfo* ProtoAllFriendInfo::default_instance_ = NULL;

ProtoAllFriendInfo* ProtoAllFriendInfo::New() const {
  return new ProtoAllFriendInfo;
}

void ProtoAllFriendInfo::Clear() {
  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    cleantime_ = 0;
  }
  friendlist_.Clear();
  blacklist_.Clear();
  friendshiplist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoAllFriendInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 friendList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_friendList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_friendlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_friendlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_friendList;
        if (input->ExpectTag(16)) goto parse_blackList;
        break;
      }

      // repeated uint64 blackList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blackList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_blacklist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_blacklist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_blackList;
        if (input->ExpectTag(26)) goto parse_friendShipList;
        break;
      }

      // repeated .proto.message.ProtoDbFriendShip friendShipList = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friendShipList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_friendshiplist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_friendShipList;
        if (input->ExpectTag(32)) goto parse_cleanTime;
        break;
      }

      // optional int32 cleanTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cleanTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cleantime_)));
          set_has_cleantime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoAllFriendInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint64 friendList = 1;
  for (int i = 0; i < this->friendlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->friendlist(i), output);
  }

  // repeated uint64 blackList = 2;
  for (int i = 0; i < this->blacklist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->blacklist(i), output);
  }

  // repeated .proto.message.ProtoDbFriendShip friendShipList = 3;
  for (int i = 0; i < this->friendshiplist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->friendshiplist(i), output);
  }

  // optional int32 cleanTime = 4;
  if (has_cleantime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cleantime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoAllFriendInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint64 friendList = 1;
  for (int i = 0; i < this->friendlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->friendlist(i), target);
  }

  // repeated uint64 blackList = 2;
  for (int i = 0; i < this->blacklist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->blacklist(i), target);
  }

  // repeated .proto.message.ProtoDbFriendShip friendShipList = 3;
  for (int i = 0; i < this->friendshiplist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->friendshiplist(i), target);
  }

  // optional int32 cleanTime = 4;
  if (has_cleantime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cleantime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoAllFriendInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    // optional int32 cleanTime = 4;
    if (has_cleantime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cleantime());
    }

  }
  // repeated uint64 friendList = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->friendlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->friendlist(i));
    }
    total_size += 1 * this->friendlist_size() + data_size;
  }

  // repeated uint64 blackList = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->blacklist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->blacklist(i));
    }
    total_size += 1 * this->blacklist_size() + data_size;
  }

  // repeated .proto.message.ProtoDbFriendShip friendShipList = 3;
  total_size += 1 * this->friendshiplist_size();
  for (int i = 0; i < this->friendshiplist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->friendshiplist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoAllFriendInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoAllFriendInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoAllFriendInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoAllFriendInfo::MergeFrom(const ProtoAllFriendInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  friendlist_.MergeFrom(from.friendlist_);
  blacklist_.MergeFrom(from.blacklist_);
  friendshiplist_.MergeFrom(from.friendshiplist_);
  if (from._has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    if (from.has_cleantime()) {
      set_cleantime(from.cleantime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoAllFriendInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoAllFriendInfo::CopyFrom(const ProtoAllFriendInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoAllFriendInfo::IsInitialized() const {

  return true;
}

void ProtoAllFriendInfo::Swap(ProtoAllFriendInfo* other) {
  if (other != this) {
    friendlist_.Swap(&other->friendlist_);
    blacklist_.Swap(&other->blacklist_);
    friendshiplist_.Swap(&other->friendshiplist_);
    std::swap(cleantime_, other->cleantime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoAllFriendInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoAllFriendInfo_descriptor_;
  metadata.reflection = ProtoAllFriendInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace proto

// @@protoc_insertion_point(global_scope)
