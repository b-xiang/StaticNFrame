// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: serverdata.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "serverdata.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace message {

namespace {

const ::google::protobuf::Descriptor* ServerDataContent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerDataContent_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerCommonData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerCommonData_reflection_ = NULL;
const ::google::protobuf::Descriptor* OffrankDataList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OffrankDataList_reflection_ = NULL;
const ::google::protobuf::Descriptor* OffPVPRankingData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OffPVPRankingData_reflection_ = NULL;
const ::google::protobuf::Descriptor* NoticeData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NoticeData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBDataList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBDataList_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerConfigData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerConfigData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_serverdata_2eproto() {
  protobuf_AddDesc_serverdata_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "serverdata.proto");
  GOOGLE_CHECK(file != NULL);
  ServerDataContent_descriptor_ = file->message_type(0);
  static const int ServerDataContent_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerDataContent, numdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerDataContent, strdata_),
  };
  ServerDataContent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerDataContent_descriptor_,
      ServerDataContent::default_instance_,
      ServerDataContent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerDataContent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerDataContent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerDataContent));
  ServerCommonData_descriptor_ = file->message_type(1);
  static const int ServerCommonData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerCommonData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerCommonData, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerCommonData, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerCommonData, saleditem_),
  };
  ServerCommonData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerCommonData_descriptor_,
      ServerCommonData::default_instance_,
      ServerCommonData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerCommonData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerCommonData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerCommonData));
  OffrankDataList_descriptor_ = file->message_type(2);
  static const int OffrankDataList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OffrankDataList, datalist_),
  };
  OffrankDataList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OffrankDataList_descriptor_,
      OffrankDataList::default_instance_,
      OffrankDataList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OffrankDataList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OffrankDataList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OffrankDataList));
  OffPVPRankingData_descriptor_ = file->message_type(3);
  static const int OffPVPRankingData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OffPVPRankingData, content_),
  };
  OffPVPRankingData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OffPVPRankingData_descriptor_,
      OffPVPRankingData::default_instance_,
      OffPVPRankingData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OffPVPRankingData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OffPVPRankingData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OffPVPRankingData));
  NoticeData_descriptor_ = file->message_type(4);
  static const int NoticeData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoticeData, noticeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoticeData, notecontext_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoticeData, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoticeData, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoticeData, interval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoticeData, tableid_),
  };
  NoticeData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NoticeData_descriptor_,
      NoticeData::default_instance_,
      NoticeData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoticeData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoticeData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NoticeData));
  ServerNotice_descriptor_ = file->message_type(5);
  static const int ServerNotice_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerNotice, content_),
  };
  ServerNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerNotice_descriptor_,
      ServerNotice::default_instance_,
      ServerNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerNotice));
  TBDataList_descriptor_ = file->message_type(6);
  static const int TBDataList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBDataList, infolist_),
  };
  TBDataList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBDataList_descriptor_,
      TBDataList::default_instance_,
      TBDataList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBDataList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBDataList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBDataList));
  TBData_descriptor_ = file->message_type(7);
  static const int TBData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBData, content_),
  };
  TBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBData_descriptor_,
      TBData::default_instance_,
      TBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBData));
  ServerConfigData_descriptor_ = file->message_type(8);
  static const int ServerConfigData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConfigData, opentime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConfigData, opengm_),
  };
  ServerConfigData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerConfigData_descriptor_,
      ServerConfigData::default_instance_,
      ServerConfigData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConfigData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConfigData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerConfigData));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_serverdata_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerDataContent_descriptor_, &ServerDataContent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerCommonData_descriptor_, &ServerCommonData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OffrankDataList_descriptor_, &OffrankDataList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OffPVPRankingData_descriptor_, &OffPVPRankingData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NoticeData_descriptor_, &NoticeData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerNotice_descriptor_, &ServerNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBDataList_descriptor_, &TBDataList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBData_descriptor_, &TBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerConfigData_descriptor_, &ServerConfigData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_serverdata_2eproto() {
  delete ServerDataContent::default_instance_;
  delete ServerDataContent_reflection_;
  delete ServerCommonData::default_instance_;
  delete ServerCommonData_reflection_;
  delete OffrankDataList::default_instance_;
  delete OffrankDataList_reflection_;
  delete OffPVPRankingData::default_instance_;
  delete OffPVPRankingData_reflection_;
  delete NoticeData::default_instance_;
  delete NoticeData_reflection_;
  delete ServerNotice::default_instance_;
  delete ServerNotice_reflection_;
  delete TBDataList::default_instance_;
  delete TBDataList_reflection_;
  delete TBData::default_instance_;
  delete TBData_reflection_;
  delete ServerConfigData::default_instance_;
  delete ServerConfigData_reflection_;
}

void protobuf_AddDesc_serverdata_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::proto::message::protobuf_AddDesc_common_2eproto();
  ::proto::message::protobuf_AddDesc_offpvp_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020serverdata.proto\022\rproto.message\032\014commo"
    "n.proto\032\014offpvp.proto\"5\n\021ServerDataConte"
    "nt\022\017\n\007numData\030\001 \003(\004\022\017\n\007strData\030\002 \003(\t\"\225\001\n"
    "\020ServerCommonData\022\n\n\002id\030\001 \001(\r\0221\n\007content"
    "\030\002 \001(\0132 .proto.message.ServerDataContent"
    "\022\014\n\004time\030\003 \001(\004\0224\n\tsaleditem\030\004 \003(\0132!.prot"
    "o.message.WolrdBossSaledItem\"\?\n\017OffrankD"
    "ataList\022,\n\010datalist\030\001 \003(\0132\032.proto.messag"
    "e.FighterInfo\"D\n\021OffPVPRankingData\022/\n\007co"
    "ntent\030\001 \001(\0132\036.proto.message.OffrankDataL"
    "ist\"z\n\nNoticeData\022\020\n\010noticeid\030\001 \003(\004\022\023\n\013n"
    "otecontext\030\002 \003(\t\022\021\n\tstarttime\030\003 \003(\004\022\017\n\007e"
    "ndtime\030\004 \003(\004\022\020\n\010interval\030\005 \003(\r\022\017\n\007tablei"
    "d\030\006 \003(\r\":\n\014ServerNotice\022*\n\007content\030\001 \001(\013"
    "2\031.proto.message.NoticeData\":\n\nTBDataLis"
    "t\022,\n\010infolist\030\001 \003(\0132\032.proto.message.TBFi"
    "eldInfo\"4\n\006TBData\022*\n\007content\030\001 \001(\0132\031.pro"
    "to.message.TBDataList\"4\n\020ServerConfigDat"
    "a\022\020\n\010opentime\030\001 \001(\t\022\016\n\006opengm\030\002 \001(\005B\017\n\rp"
    "roto.message", 772);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "serverdata.proto", &protobuf_RegisterTypes);
  ServerDataContent::default_instance_ = new ServerDataContent();
  ServerCommonData::default_instance_ = new ServerCommonData();
  OffrankDataList::default_instance_ = new OffrankDataList();
  OffPVPRankingData::default_instance_ = new OffPVPRankingData();
  NoticeData::default_instance_ = new NoticeData();
  ServerNotice::default_instance_ = new ServerNotice();
  TBDataList::default_instance_ = new TBDataList();
  TBData::default_instance_ = new TBData();
  ServerConfigData::default_instance_ = new ServerConfigData();
  ServerDataContent::default_instance_->InitAsDefaultInstance();
  ServerCommonData::default_instance_->InitAsDefaultInstance();
  OffrankDataList::default_instance_->InitAsDefaultInstance();
  OffPVPRankingData::default_instance_->InitAsDefaultInstance();
  NoticeData::default_instance_->InitAsDefaultInstance();
  ServerNotice::default_instance_->InitAsDefaultInstance();
  TBDataList::default_instance_->InitAsDefaultInstance();
  TBData::default_instance_->InitAsDefaultInstance();
  ServerConfigData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_serverdata_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_serverdata_2eproto {
  StaticDescriptorInitializer_serverdata_2eproto() {
    protobuf_AddDesc_serverdata_2eproto();
  }
} static_descriptor_initializer_serverdata_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ServerDataContent::kNumDataFieldNumber;
const int ServerDataContent::kStrDataFieldNumber;
#endif  // !_MSC_VER

ServerDataContent::ServerDataContent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerDataContent::InitAsDefaultInstance() {
}

ServerDataContent::ServerDataContent(const ServerDataContent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerDataContent::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerDataContent::~ServerDataContent() {
  SharedDtor();
}

void ServerDataContent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServerDataContent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerDataContent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerDataContent_descriptor_;
}

const ServerDataContent& ServerDataContent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serverdata_2eproto();
  return *default_instance_;
}

ServerDataContent* ServerDataContent::default_instance_ = NULL;

ServerDataContent* ServerDataContent::New() const {
  return new ServerDataContent;
}

void ServerDataContent::Clear() {
  numdata_.Clear();
  strdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerDataContent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 numData = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_numData:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_numdata())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_numdata())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_numData;
        if (input->ExpectTag(18)) goto parse_strData;
        break;
      }

      // repeated string strData = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_strdata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strdata(this->strdata_size() - 1).data(),
            this->strdata(this->strdata_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_strData;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerDataContent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint64 numData = 1;
  for (int i = 0; i < this->numdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->numdata(i), output);
  }

  // repeated string strData = 2;
  for (int i = 0; i < this->strdata_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->strdata(i).data(), this->strdata(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->strdata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerDataContent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint64 numData = 1;
  for (int i = 0; i < this->numdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->numdata(i), target);
  }

  // repeated string strData = 2;
  for (int i = 0; i < this->strdata_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strdata(i).data(), this->strdata(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->strdata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerDataContent::ByteSize() const {
  int total_size = 0;

  // repeated uint64 numData = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->numdata_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->numdata(i));
    }
    total_size += 1 * this->numdata_size() + data_size;
  }

  // repeated string strData = 2;
  total_size += 1 * this->strdata_size();
  for (int i = 0; i < this->strdata_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->strdata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerDataContent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerDataContent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerDataContent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerDataContent::MergeFrom(const ServerDataContent& from) {
  GOOGLE_CHECK_NE(&from, this);
  numdata_.MergeFrom(from.numdata_);
  strdata_.MergeFrom(from.strdata_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerDataContent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerDataContent::CopyFrom(const ServerDataContent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerDataContent::IsInitialized() const {

  return true;
}

void ServerDataContent::Swap(ServerDataContent* other) {
  if (other != this) {
    numdata_.Swap(&other->numdata_);
    strdata_.Swap(&other->strdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerDataContent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerDataContent_descriptor_;
  metadata.reflection = ServerDataContent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerCommonData::kIdFieldNumber;
const int ServerCommonData::kContentFieldNumber;
const int ServerCommonData::kTimeFieldNumber;
const int ServerCommonData::kSaleditemFieldNumber;
#endif  // !_MSC_VER

ServerCommonData::ServerCommonData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerCommonData::InitAsDefaultInstance() {
  content_ = const_cast< ::proto::message::ServerDataContent*>(&::proto::message::ServerDataContent::default_instance());
}

ServerCommonData::ServerCommonData(const ServerCommonData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerCommonData::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  content_ = NULL;
  time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerCommonData::~ServerCommonData() {
  SharedDtor();
}

void ServerCommonData::SharedDtor() {
  if (this != default_instance_) {
    delete content_;
  }
}

void ServerCommonData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerCommonData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerCommonData_descriptor_;
}

const ServerCommonData& ServerCommonData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serverdata_2eproto();
  return *default_instance_;
}

ServerCommonData* ServerCommonData::default_instance_ = NULL;

ServerCommonData* ServerCommonData::New() const {
  return new ServerCommonData;
}

void ServerCommonData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    if (has_content()) {
      if (content_ != NULL) content_->::proto::message::ServerDataContent::Clear();
    }
    time_ = GOOGLE_ULONGLONG(0);
  }
  saleditem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerCommonData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_content;
        break;
      }

      // optional .proto.message.ServerDataContent content = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // optional uint64 time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_saleditem;
        break;
      }

      // repeated .proto.message.WolrdBossSaledItem saleditem = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_saleditem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_saleditem()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_saleditem;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerCommonData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional .proto.message.ServerDataContent content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->content(), output);
  }

  // optional uint64 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->time(), output);
  }

  // repeated .proto.message.WolrdBossSaledItem saleditem = 4;
  for (int i = 0; i < this->saleditem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->saleditem(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerCommonData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional .proto.message.ServerDataContent content = 2;
  if (has_content()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->content(), target);
  }

  // optional uint64 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->time(), target);
  }

  // repeated .proto.message.WolrdBossSaledItem saleditem = 4;
  for (int i = 0; i < this->saleditem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->saleditem(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerCommonData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional .proto.message.ServerDataContent content = 2;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->content());
    }

    // optional uint64 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

  }
  // repeated .proto.message.WolrdBossSaledItem saleditem = 4;
  total_size += 1 * this->saleditem_size();
  for (int i = 0; i < this->saleditem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->saleditem(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerCommonData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerCommonData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerCommonData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerCommonData::MergeFrom(const ServerCommonData& from) {
  GOOGLE_CHECK_NE(&from, this);
  saleditem_.MergeFrom(from.saleditem_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_content()) {
      mutable_content()->::proto::message::ServerDataContent::MergeFrom(from.content());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerCommonData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerCommonData::CopyFrom(const ServerCommonData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerCommonData::IsInitialized() const {

  return true;
}

void ServerCommonData::Swap(ServerCommonData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(content_, other->content_);
    std::swap(time_, other->time_);
    saleditem_.Swap(&other->saleditem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerCommonData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerCommonData_descriptor_;
  metadata.reflection = ServerCommonData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OffrankDataList::kDatalistFieldNumber;
#endif  // !_MSC_VER

OffrankDataList::OffrankDataList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OffrankDataList::InitAsDefaultInstance() {
}

OffrankDataList::OffrankDataList(const OffrankDataList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OffrankDataList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OffrankDataList::~OffrankDataList() {
  SharedDtor();
}

void OffrankDataList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OffrankDataList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OffrankDataList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OffrankDataList_descriptor_;
}

const OffrankDataList& OffrankDataList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serverdata_2eproto();
  return *default_instance_;
}

OffrankDataList* OffrankDataList::default_instance_ = NULL;

OffrankDataList* OffrankDataList::New() const {
  return new OffrankDataList;
}

void OffrankDataList::Clear() {
  datalist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OffrankDataList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.message.FighterInfo datalist = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_datalist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_datalist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_datalist;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OffrankDataList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.message.FighterInfo datalist = 1;
  for (int i = 0; i < this->datalist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->datalist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OffrankDataList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.message.FighterInfo datalist = 1;
  for (int i = 0; i < this->datalist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->datalist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OffrankDataList::ByteSize() const {
  int total_size = 0;

  // repeated .proto.message.FighterInfo datalist = 1;
  total_size += 1 * this->datalist_size();
  for (int i = 0; i < this->datalist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->datalist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OffrankDataList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OffrankDataList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OffrankDataList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OffrankDataList::MergeFrom(const OffrankDataList& from) {
  GOOGLE_CHECK_NE(&from, this);
  datalist_.MergeFrom(from.datalist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OffrankDataList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OffrankDataList::CopyFrom(const OffrankDataList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OffrankDataList::IsInitialized() const {

  return true;
}

void OffrankDataList::Swap(OffrankDataList* other) {
  if (other != this) {
    datalist_.Swap(&other->datalist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OffrankDataList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OffrankDataList_descriptor_;
  metadata.reflection = OffrankDataList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OffPVPRankingData::kContentFieldNumber;
#endif  // !_MSC_VER

OffPVPRankingData::OffPVPRankingData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OffPVPRankingData::InitAsDefaultInstance() {
  content_ = const_cast< ::proto::message::OffrankDataList*>(&::proto::message::OffrankDataList::default_instance());
}

OffPVPRankingData::OffPVPRankingData(const OffPVPRankingData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OffPVPRankingData::SharedCtor() {
  _cached_size_ = 0;
  content_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OffPVPRankingData::~OffPVPRankingData() {
  SharedDtor();
}

void OffPVPRankingData::SharedDtor() {
  if (this != default_instance_) {
    delete content_;
  }
}

void OffPVPRankingData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OffPVPRankingData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OffPVPRankingData_descriptor_;
}

const OffPVPRankingData& OffPVPRankingData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serverdata_2eproto();
  return *default_instance_;
}

OffPVPRankingData* OffPVPRankingData::default_instance_ = NULL;

OffPVPRankingData* OffPVPRankingData::New() const {
  return new OffPVPRankingData;
}

void OffPVPRankingData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_content()) {
      if (content_ != NULL) content_->::proto::message::OffrankDataList::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OffPVPRankingData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.message.OffrankDataList content = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OffPVPRankingData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto.message.OffrankDataList content = 1;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OffPVPRankingData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto.message.OffrankDataList content = 1;
  if (has_content()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OffPVPRankingData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto.message.OffrankDataList content = 1;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OffPVPRankingData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OffPVPRankingData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OffPVPRankingData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OffPVPRankingData::MergeFrom(const OffPVPRankingData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_content()) {
      mutable_content()->::proto::message::OffrankDataList::MergeFrom(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OffPVPRankingData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OffPVPRankingData::CopyFrom(const OffPVPRankingData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OffPVPRankingData::IsInitialized() const {

  return true;
}

void OffPVPRankingData::Swap(OffPVPRankingData* other) {
  if (other != this) {
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OffPVPRankingData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OffPVPRankingData_descriptor_;
  metadata.reflection = OffPVPRankingData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NoticeData::kNoticeidFieldNumber;
const int NoticeData::kNotecontextFieldNumber;
const int NoticeData::kStarttimeFieldNumber;
const int NoticeData::kEndtimeFieldNumber;
const int NoticeData::kIntervalFieldNumber;
const int NoticeData::kTableidFieldNumber;
#endif  // !_MSC_VER

NoticeData::NoticeData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NoticeData::InitAsDefaultInstance() {
}

NoticeData::NoticeData(const NoticeData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NoticeData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NoticeData::~NoticeData() {
  SharedDtor();
}

void NoticeData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NoticeData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NoticeData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NoticeData_descriptor_;
}

const NoticeData& NoticeData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serverdata_2eproto();
  return *default_instance_;
}

NoticeData* NoticeData::default_instance_ = NULL;

NoticeData* NoticeData::New() const {
  return new NoticeData;
}

void NoticeData::Clear() {
  noticeid_.Clear();
  notecontext_.Clear();
  starttime_.Clear();
  endtime_.Clear();
  interval_.Clear();
  tableid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NoticeData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 noticeid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_noticeid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_noticeid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_noticeid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_noticeid;
        if (input->ExpectTag(18)) goto parse_notecontext;
        break;
      }

      // repeated string notecontext = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_notecontext:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_notecontext()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->notecontext(this->notecontext_size() - 1).data(),
            this->notecontext(this->notecontext_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_notecontext;
        if (input->ExpectTag(24)) goto parse_starttime;
        break;
      }

      // repeated uint64 starttime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_starttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 24, input, this->mutable_starttime())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_starttime())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_starttime;
        if (input->ExpectTag(32)) goto parse_endtime;
        break;
      }

      // repeated uint64 endtime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 32, input, this->mutable_endtime())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_endtime())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_endtime;
        if (input->ExpectTag(40)) goto parse_interval;
        break;
      }

      // repeated uint32 interval = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_interval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_interval())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_interval())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_interval;
        if (input->ExpectTag(48)) goto parse_tableid;
        break;
      }

      // repeated uint32 tableid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tableid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48, input, this->mutable_tableid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_tableid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_tableid;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NoticeData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint64 noticeid = 1;
  for (int i = 0; i < this->noticeid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->noticeid(i), output);
  }

  // repeated string notecontext = 2;
  for (int i = 0; i < this->notecontext_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->notecontext(i).data(), this->notecontext(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->notecontext(i), output);
  }

  // repeated uint64 starttime = 3;
  for (int i = 0; i < this->starttime_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      3, this->starttime(i), output);
  }

  // repeated uint64 endtime = 4;
  for (int i = 0; i < this->endtime_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      4, this->endtime(i), output);
  }

  // repeated uint32 interval = 5;
  for (int i = 0; i < this->interval_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->interval(i), output);
  }

  // repeated uint32 tableid = 6;
  for (int i = 0; i < this->tableid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->tableid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NoticeData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint64 noticeid = 1;
  for (int i = 0; i < this->noticeid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->noticeid(i), target);
  }

  // repeated string notecontext = 2;
  for (int i = 0; i < this->notecontext_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notecontext(i).data(), this->notecontext(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->notecontext(i), target);
  }

  // repeated uint64 starttime = 3;
  for (int i = 0; i < this->starttime_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(3, this->starttime(i), target);
  }

  // repeated uint64 endtime = 4;
  for (int i = 0; i < this->endtime_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(4, this->endtime(i), target);
  }

  // repeated uint32 interval = 5;
  for (int i = 0; i < this->interval_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->interval(i), target);
  }

  // repeated uint32 tableid = 6;
  for (int i = 0; i < this->tableid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(6, this->tableid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NoticeData::ByteSize() const {
  int total_size = 0;

  // repeated uint64 noticeid = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->noticeid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->noticeid(i));
    }
    total_size += 1 * this->noticeid_size() + data_size;
  }

  // repeated string notecontext = 2;
  total_size += 1 * this->notecontext_size();
  for (int i = 0; i < this->notecontext_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->notecontext(i));
  }

  // repeated uint64 starttime = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->starttime_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->starttime(i));
    }
    total_size += 1 * this->starttime_size() + data_size;
  }

  // repeated uint64 endtime = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->endtime_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->endtime(i));
    }
    total_size += 1 * this->endtime_size() + data_size;
  }

  // repeated uint32 interval = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->interval_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->interval(i));
    }
    total_size += 1 * this->interval_size() + data_size;
  }

  // repeated uint32 tableid = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->tableid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->tableid(i));
    }
    total_size += 1 * this->tableid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NoticeData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NoticeData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NoticeData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NoticeData::MergeFrom(const NoticeData& from) {
  GOOGLE_CHECK_NE(&from, this);
  noticeid_.MergeFrom(from.noticeid_);
  notecontext_.MergeFrom(from.notecontext_);
  starttime_.MergeFrom(from.starttime_);
  endtime_.MergeFrom(from.endtime_);
  interval_.MergeFrom(from.interval_);
  tableid_.MergeFrom(from.tableid_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NoticeData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NoticeData::CopyFrom(const NoticeData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NoticeData::IsInitialized() const {

  return true;
}

void NoticeData::Swap(NoticeData* other) {
  if (other != this) {
    noticeid_.Swap(&other->noticeid_);
    notecontext_.Swap(&other->notecontext_);
    starttime_.Swap(&other->starttime_);
    endtime_.Swap(&other->endtime_);
    interval_.Swap(&other->interval_);
    tableid_.Swap(&other->tableid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NoticeData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NoticeData_descriptor_;
  metadata.reflection = NoticeData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerNotice::kContentFieldNumber;
#endif  // !_MSC_VER

ServerNotice::ServerNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerNotice::InitAsDefaultInstance() {
  content_ = const_cast< ::proto::message::NoticeData*>(&::proto::message::NoticeData::default_instance());
}

ServerNotice::ServerNotice(const ServerNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerNotice::SharedCtor() {
  _cached_size_ = 0;
  content_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerNotice::~ServerNotice() {
  SharedDtor();
}

void ServerNotice::SharedDtor() {
  if (this != default_instance_) {
    delete content_;
  }
}

void ServerNotice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerNotice_descriptor_;
}

const ServerNotice& ServerNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serverdata_2eproto();
  return *default_instance_;
}

ServerNotice* ServerNotice::default_instance_ = NULL;

ServerNotice* ServerNotice::New() const {
  return new ServerNotice;
}

void ServerNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_content()) {
      if (content_ != NULL) content_->::proto::message::NoticeData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.message.NoticeData content = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto.message.NoticeData content = 1;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto.message.NoticeData content = 1;
  if (has_content()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerNotice::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto.message.NoticeData content = 1;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerNotice::MergeFrom(const ServerNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_content()) {
      mutable_content()->::proto::message::NoticeData::MergeFrom(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerNotice::CopyFrom(const ServerNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerNotice::IsInitialized() const {

  return true;
}

void ServerNotice::Swap(ServerNotice* other) {
  if (other != this) {
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerNotice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerNotice_descriptor_;
  metadata.reflection = ServerNotice_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBDataList::kInfolistFieldNumber;
#endif  // !_MSC_VER

TBDataList::TBDataList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TBDataList::InitAsDefaultInstance() {
}

TBDataList::TBDataList(const TBDataList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TBDataList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBDataList::~TBDataList() {
  SharedDtor();
}

void TBDataList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TBDataList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBDataList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBDataList_descriptor_;
}

const TBDataList& TBDataList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serverdata_2eproto();
  return *default_instance_;
}

TBDataList* TBDataList::default_instance_ = NULL;

TBDataList* TBDataList::New() const {
  return new TBDataList;
}

void TBDataList::Clear() {
  infolist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBDataList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.message.TBFieldInfo infolist = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infolist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infolist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_infolist;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TBDataList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.message.TBFieldInfo infolist = 1;
  for (int i = 0; i < this->infolist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->infolist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TBDataList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.message.TBFieldInfo infolist = 1;
  for (int i = 0; i < this->infolist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->infolist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TBDataList::ByteSize() const {
  int total_size = 0;

  // repeated .proto.message.TBFieldInfo infolist = 1;
  total_size += 1 * this->infolist_size();
  for (int i = 0; i < this->infolist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infolist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBDataList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBDataList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBDataList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBDataList::MergeFrom(const TBDataList& from) {
  GOOGLE_CHECK_NE(&from, this);
  infolist_.MergeFrom(from.infolist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBDataList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBDataList::CopyFrom(const TBDataList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBDataList::IsInitialized() const {

  return true;
}

void TBDataList::Swap(TBDataList* other) {
  if (other != this) {
    infolist_.Swap(&other->infolist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBDataList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBDataList_descriptor_;
  metadata.reflection = TBDataList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBData::kContentFieldNumber;
#endif  // !_MSC_VER

TBData::TBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TBData::InitAsDefaultInstance() {
  content_ = const_cast< ::proto::message::TBDataList*>(&::proto::message::TBDataList::default_instance());
}

TBData::TBData(const TBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TBData::SharedCtor() {
  _cached_size_ = 0;
  content_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBData::~TBData() {
  SharedDtor();
}

void TBData::SharedDtor() {
  if (this != default_instance_) {
    delete content_;
  }
}

void TBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBData_descriptor_;
}

const TBData& TBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serverdata_2eproto();
  return *default_instance_;
}

TBData* TBData::default_instance_ = NULL;

TBData* TBData::New() const {
  return new TBData;
}

void TBData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_content()) {
      if (content_ != NULL) content_->::proto::message::TBDataList::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.message.TBDataList content = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto.message.TBDataList content = 1;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto.message.TBDataList content = 1;
  if (has_content()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TBData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto.message.TBDataList content = 1;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBData::MergeFrom(const TBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_content()) {
      mutable_content()->::proto::message::TBDataList::MergeFrom(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBData::CopyFrom(const TBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBData::IsInitialized() const {

  return true;
}

void TBData::Swap(TBData* other) {
  if (other != this) {
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBData_descriptor_;
  metadata.reflection = TBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerConfigData::kOpentimeFieldNumber;
const int ServerConfigData::kOpengmFieldNumber;
#endif  // !_MSC_VER

ServerConfigData::ServerConfigData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerConfigData::InitAsDefaultInstance() {
}

ServerConfigData::ServerConfigData(const ServerConfigData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerConfigData::SharedCtor() {
  _cached_size_ = 0;
  opentime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  opengm_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerConfigData::~ServerConfigData() {
  SharedDtor();
}

void ServerConfigData::SharedDtor() {
  if (opentime_ != &::google::protobuf::internal::kEmptyString) {
    delete opentime_;
  }
  if (this != default_instance_) {
  }
}

void ServerConfigData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerConfigData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerConfigData_descriptor_;
}

const ServerConfigData& ServerConfigData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serverdata_2eproto();
  return *default_instance_;
}

ServerConfigData* ServerConfigData::default_instance_ = NULL;

ServerConfigData* ServerConfigData::New() const {
  return new ServerConfigData;
}

void ServerConfigData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_opentime()) {
      if (opentime_ != &::google::protobuf::internal::kEmptyString) {
        opentime_->clear();
      }
    }
    opengm_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerConfigData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string opentime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_opentime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->opentime().data(), this->opentime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_opengm;
        break;
      }

      // optional int32 opengm = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opengm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opengm_)));
          set_has_opengm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerConfigData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string opentime = 1;
  if (has_opentime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->opentime().data(), this->opentime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->opentime(), output);
  }

  // optional int32 opengm = 2;
  if (has_opengm()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->opengm(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerConfigData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string opentime = 1;
  if (has_opentime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->opentime().data(), this->opentime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->opentime(), target);
  }

  // optional int32 opengm = 2;
  if (has_opengm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->opengm(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerConfigData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string opentime = 1;
    if (has_opentime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->opentime());
    }

    // optional int32 opengm = 2;
    if (has_opengm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opengm());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerConfigData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerConfigData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerConfigData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerConfigData::MergeFrom(const ServerConfigData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opentime()) {
      set_opentime(from.opentime());
    }
    if (from.has_opengm()) {
      set_opengm(from.opengm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerConfigData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerConfigData::CopyFrom(const ServerConfigData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerConfigData::IsInitialized() const {

  return true;
}

void ServerConfigData::Swap(ServerConfigData* other) {
  if (other != this) {
    std::swap(opentime_, other->opentime_);
    std::swap(opengm_, other->opengm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerConfigData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerConfigData_descriptor_;
  metadata.reflection = ServerConfigData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace proto

// @@protoc_insertion_point(global_scope)
