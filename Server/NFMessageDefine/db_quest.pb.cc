// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: db_quest.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "db_quest.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace message {

namespace {

const ::google::protobuf::Descriptor* ProtoItemAndNum_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoItemAndNum_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoSingleQuestReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoSingleQuestReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoAllQuestInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoAllQuestInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_db_5fquest_2eproto() {
  protobuf_AddDesc_db_5fquest_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "db_quest.proto");
  GOOGLE_CHECK(file != NULL);
  ProtoItemAndNum_descriptor_ = file->message_type(0);
  static const int ProtoItemAndNum_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoItemAndNum, nid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoItemAndNum, nnum_),
  };
  ProtoItemAndNum_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoItemAndNum_descriptor_,
      ProtoItemAndNum::default_instance_,
      ProtoItemAndNum_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoItemAndNum, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoItemAndNum, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoItemAndNum));
  ProtoSingleQuestReward_descriptor_ = file->message_type(1);
  static const int ProtoSingleQuestReward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSingleQuestReward, nkind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSingleQuestReward, item_),
  };
  ProtoSingleQuestReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoSingleQuestReward_descriptor_,
      ProtoSingleQuestReward::default_instance_,
      ProtoSingleQuestReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSingleQuestReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSingleQuestReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoSingleQuestReward));
  ProtoAllQuestInfo_descriptor_ = file->message_type(2);
  static const int ProtoAllQuestInfo_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAllQuestInfo, questmain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAllQuestInfo, questactive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAllQuestInfo, questfuben_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAllQuestInfo, questdailykillmonster_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAllQuestInfo, questbranch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAllQuestInfo, questcycle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAllQuestInfo, completelist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAllQuestInfo, questdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAllQuestInfo, killmontertodropitemquestid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAllQuestInfo, killmontertodropitemquesttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAllQuestInfo, rewards_),
  };
  ProtoAllQuestInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoAllQuestInfo_descriptor_,
      ProtoAllQuestInfo::default_instance_,
      ProtoAllQuestInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAllQuestInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAllQuestInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoAllQuestInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_db_5fquest_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoItemAndNum_descriptor_, &ProtoItemAndNum::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoSingleQuestReward_descriptor_, &ProtoSingleQuestReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoAllQuestInfo_descriptor_, &ProtoAllQuestInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_db_5fquest_2eproto() {
  delete ProtoItemAndNum::default_instance_;
  delete ProtoItemAndNum_reflection_;
  delete ProtoSingleQuestReward::default_instance_;
  delete ProtoSingleQuestReward_reflection_;
  delete ProtoAllQuestInfo::default_instance_;
  delete ProtoAllQuestInfo_reflection_;
}

void protobuf_AddDesc_db_5fquest_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::proto::message::protobuf_AddDesc_quest_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016db_quest.proto\022\rproto.message\032\013quest.p"
    "roto\",\n\017ProtoItemAndNum\022\013\n\003nid\030\001 \001(\005\022\014\n\004"
    "nNum\030\002 \001(\004\"U\n\026ProtoSingleQuestReward\022\r\n\005"
    "nkind\030\001 \001(\005\022,\n\004item\030\002 \003(\0132\036.proto.messag"
    "e.ProtoItemAndNum\"\257\004\n\021ProtoAllQuestInfo\022"
    "0\n\tquestMain\030\001 \001(\0132\035.proto.message.Proto"
    "QuestMain\0224\n\013questActive\030\002 \001(\0132\037.proto.m"
    "essage.ProtoQuestActive\0222\n\nquestFuben\030\003 "
    "\001(\0132\036.proto.message.ProtoQuestFuben\022H\n\025q"
    "uestDailyKillMonster\030\004 \001(\0132).proto.messa"
    "ge.ProtoQuestDailyKillMonster\0224\n\013questBr"
    "anch\030\005 \001(\0132\037.proto.message.ProtoQuestBra"
    "nch\0222\n\nquestCycle\030\006 \003(\0132\036.proto.message."
    "ProtoQuestCycle\022\024\n\014completeList\030\007 \003(\005\0220\n"
    "\tquestData\030\010 \003(\0132\035.proto.message.ProtoQu"
    "estData\022#\n\033killmontertodropitemquestid\030\t"
    " \001(\005\022%\n\035killmontertodropitemquesttime\030\n "
    "\001(\r\0226\n\007rewards\030\013 \003(\0132%.proto.message.Pro"
    "toSingleQuestRewardB\017\n\rproto.message", 756);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "db_quest.proto", &protobuf_RegisterTypes);
  ProtoItemAndNum::default_instance_ = new ProtoItemAndNum();
  ProtoSingleQuestReward::default_instance_ = new ProtoSingleQuestReward();
  ProtoAllQuestInfo::default_instance_ = new ProtoAllQuestInfo();
  ProtoItemAndNum::default_instance_->InitAsDefaultInstance();
  ProtoSingleQuestReward::default_instance_->InitAsDefaultInstance();
  ProtoAllQuestInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_db_5fquest_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_db_5fquest_2eproto {
  StaticDescriptorInitializer_db_5fquest_2eproto() {
    protobuf_AddDesc_db_5fquest_2eproto();
  }
} static_descriptor_initializer_db_5fquest_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ProtoItemAndNum::kNidFieldNumber;
const int ProtoItemAndNum::kNNumFieldNumber;
#endif  // !_MSC_VER

ProtoItemAndNum::ProtoItemAndNum()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoItemAndNum::InitAsDefaultInstance() {
}

ProtoItemAndNum::ProtoItemAndNum(const ProtoItemAndNum& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoItemAndNum::SharedCtor() {
  _cached_size_ = 0;
  nid_ = 0;
  nnum_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoItemAndNum::~ProtoItemAndNum() {
  SharedDtor();
}

void ProtoItemAndNum::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoItemAndNum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoItemAndNum::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoItemAndNum_descriptor_;
}

const ProtoItemAndNum& ProtoItemAndNum::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_5fquest_2eproto();
  return *default_instance_;
}

ProtoItemAndNum* ProtoItemAndNum::default_instance_ = NULL;

ProtoItemAndNum* ProtoItemAndNum::New() const {
  return new ProtoItemAndNum;
}

void ProtoItemAndNum::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nid_ = 0;
    nnum_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoItemAndNum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 nid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nid_)));
          set_has_nid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nNum;
        break;
      }

      // optional uint64 nNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nnum_)));
          set_has_nnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoItemAndNum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 nid = 1;
  if (has_nid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nid(), output);
  }

  // optional uint64 nNum = 2;
  if (has_nnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->nnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoItemAndNum::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 nid = 1;
  if (has_nid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nid(), target);
  }

  // optional uint64 nNum = 2;
  if (has_nnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->nnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoItemAndNum::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 nid = 1;
    if (has_nid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nid());
    }

    // optional uint64 nNum = 2;
    if (has_nnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->nnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoItemAndNum::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoItemAndNum* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoItemAndNum*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoItemAndNum::MergeFrom(const ProtoItemAndNum& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nid()) {
      set_nid(from.nid());
    }
    if (from.has_nnum()) {
      set_nnum(from.nnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoItemAndNum::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoItemAndNum::CopyFrom(const ProtoItemAndNum& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoItemAndNum::IsInitialized() const {

  return true;
}

void ProtoItemAndNum::Swap(ProtoItemAndNum* other) {
  if (other != this) {
    std::swap(nid_, other->nid_);
    std::swap(nnum_, other->nnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoItemAndNum::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoItemAndNum_descriptor_;
  metadata.reflection = ProtoItemAndNum_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoSingleQuestReward::kNkindFieldNumber;
const int ProtoSingleQuestReward::kItemFieldNumber;
#endif  // !_MSC_VER

ProtoSingleQuestReward::ProtoSingleQuestReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoSingleQuestReward::InitAsDefaultInstance() {
}

ProtoSingleQuestReward::ProtoSingleQuestReward(const ProtoSingleQuestReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoSingleQuestReward::SharedCtor() {
  _cached_size_ = 0;
  nkind_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoSingleQuestReward::~ProtoSingleQuestReward() {
  SharedDtor();
}

void ProtoSingleQuestReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoSingleQuestReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoSingleQuestReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoSingleQuestReward_descriptor_;
}

const ProtoSingleQuestReward& ProtoSingleQuestReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_5fquest_2eproto();
  return *default_instance_;
}

ProtoSingleQuestReward* ProtoSingleQuestReward::default_instance_ = NULL;

ProtoSingleQuestReward* ProtoSingleQuestReward::New() const {
  return new ProtoSingleQuestReward;
}

void ProtoSingleQuestReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nkind_ = 0;
  }
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoSingleQuestReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 nkind = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nkind_)));
          set_has_nkind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item;
        break;
      }

      // repeated .proto.message.ProtoItemAndNum item = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoSingleQuestReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 nkind = 1;
  if (has_nkind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nkind(), output);
  }

  // repeated .proto.message.ProtoItemAndNum item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoSingleQuestReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 nkind = 1;
  if (has_nkind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nkind(), target);
  }

  // repeated .proto.message.ProtoItemAndNum item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoSingleQuestReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 nkind = 1;
    if (has_nkind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nkind());
    }

  }
  // repeated .proto.message.ProtoItemAndNum item = 2;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoSingleQuestReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoSingleQuestReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoSingleQuestReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoSingleQuestReward::MergeFrom(const ProtoSingleQuestReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nkind()) {
      set_nkind(from.nkind());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoSingleQuestReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoSingleQuestReward::CopyFrom(const ProtoSingleQuestReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoSingleQuestReward::IsInitialized() const {

  return true;
}

void ProtoSingleQuestReward::Swap(ProtoSingleQuestReward* other) {
  if (other != this) {
    std::swap(nkind_, other->nkind_);
    item_.Swap(&other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoSingleQuestReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoSingleQuestReward_descriptor_;
  metadata.reflection = ProtoSingleQuestReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoAllQuestInfo::kQuestMainFieldNumber;
const int ProtoAllQuestInfo::kQuestActiveFieldNumber;
const int ProtoAllQuestInfo::kQuestFubenFieldNumber;
const int ProtoAllQuestInfo::kQuestDailyKillMonsterFieldNumber;
const int ProtoAllQuestInfo::kQuestBranchFieldNumber;
const int ProtoAllQuestInfo::kQuestCycleFieldNumber;
const int ProtoAllQuestInfo::kCompleteListFieldNumber;
const int ProtoAllQuestInfo::kQuestDataFieldNumber;
const int ProtoAllQuestInfo::kKillmontertodropitemquestidFieldNumber;
const int ProtoAllQuestInfo::kKillmontertodropitemquesttimeFieldNumber;
const int ProtoAllQuestInfo::kRewardsFieldNumber;
#endif  // !_MSC_VER

ProtoAllQuestInfo::ProtoAllQuestInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoAllQuestInfo::InitAsDefaultInstance() {
  questmain_ = const_cast< ::proto::message::ProtoQuestMain*>(&::proto::message::ProtoQuestMain::default_instance());
  questactive_ = const_cast< ::proto::message::ProtoQuestActive*>(&::proto::message::ProtoQuestActive::default_instance());
  questfuben_ = const_cast< ::proto::message::ProtoQuestFuben*>(&::proto::message::ProtoQuestFuben::default_instance());
  questdailykillmonster_ = const_cast< ::proto::message::ProtoQuestDailyKillMonster*>(&::proto::message::ProtoQuestDailyKillMonster::default_instance());
  questbranch_ = const_cast< ::proto::message::ProtoQuestBranch*>(&::proto::message::ProtoQuestBranch::default_instance());
}

ProtoAllQuestInfo::ProtoAllQuestInfo(const ProtoAllQuestInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoAllQuestInfo::SharedCtor() {
  _cached_size_ = 0;
  questmain_ = NULL;
  questactive_ = NULL;
  questfuben_ = NULL;
  questdailykillmonster_ = NULL;
  questbranch_ = NULL;
  killmontertodropitemquestid_ = 0;
  killmontertodropitemquesttime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoAllQuestInfo::~ProtoAllQuestInfo() {
  SharedDtor();
}

void ProtoAllQuestInfo::SharedDtor() {
  if (this != default_instance_) {
    delete questmain_;
    delete questactive_;
    delete questfuben_;
    delete questdailykillmonster_;
    delete questbranch_;
  }
}

void ProtoAllQuestInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoAllQuestInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoAllQuestInfo_descriptor_;
}

const ProtoAllQuestInfo& ProtoAllQuestInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_5fquest_2eproto();
  return *default_instance_;
}

ProtoAllQuestInfo* ProtoAllQuestInfo::default_instance_ = NULL;

ProtoAllQuestInfo* ProtoAllQuestInfo::New() const {
  return new ProtoAllQuestInfo;
}

void ProtoAllQuestInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_questmain()) {
      if (questmain_ != NULL) questmain_->::proto::message::ProtoQuestMain::Clear();
    }
    if (has_questactive()) {
      if (questactive_ != NULL) questactive_->::proto::message::ProtoQuestActive::Clear();
    }
    if (has_questfuben()) {
      if (questfuben_ != NULL) questfuben_->::proto::message::ProtoQuestFuben::Clear();
    }
    if (has_questdailykillmonster()) {
      if (questdailykillmonster_ != NULL) questdailykillmonster_->::proto::message::ProtoQuestDailyKillMonster::Clear();
    }
    if (has_questbranch()) {
      if (questbranch_ != NULL) questbranch_->::proto::message::ProtoQuestBranch::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    killmontertodropitemquestid_ = 0;
    killmontertodropitemquesttime_ = 0u;
  }
  questcycle_.Clear();
  completelist_.Clear();
  questdata_.Clear();
  rewards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoAllQuestInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.message.ProtoQuestMain questMain = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_questmain()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_questActive;
        break;
      }

      // optional .proto.message.ProtoQuestActive questActive = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_questActive:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_questactive()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_questFuben;
        break;
      }

      // optional .proto.message.ProtoQuestFuben questFuben = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_questFuben:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_questfuben()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_questDailyKillMonster;
        break;
      }

      // optional .proto.message.ProtoQuestDailyKillMonster questDailyKillMonster = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_questDailyKillMonster:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_questdailykillmonster()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_questBranch;
        break;
      }

      // optional .proto.message.ProtoQuestBranch questBranch = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_questBranch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_questbranch()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_questCycle;
        break;
      }

      // repeated .proto.message.ProtoQuestCycle questCycle = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_questCycle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_questcycle()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_questCycle;
        if (input->ExpectTag(56)) goto parse_completeList;
        break;
      }

      // repeated int32 completeList = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_completeList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_completelist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_completelist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_completeList;
        if (input->ExpectTag(66)) goto parse_questData;
        break;
      }

      // repeated .proto.message.ProtoQuestData questData = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_questData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_questdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_questData;
        if (input->ExpectTag(72)) goto parse_killmontertodropitemquestid;
        break;
      }

      // optional int32 killmontertodropitemquestid = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_killmontertodropitemquestid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &killmontertodropitemquestid_)));
          set_has_killmontertodropitemquestid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_killmontertodropitemquesttime;
        break;
      }

      // optional uint32 killmontertodropitemquesttime = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_killmontertodropitemquesttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killmontertodropitemquesttime_)));
          set_has_killmontertodropitemquesttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_rewards;
        break;
      }

      // repeated .proto.message.ProtoSingleQuestReward rewards = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_rewards;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoAllQuestInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto.message.ProtoQuestMain questMain = 1;
  if (has_questmain()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->questmain(), output);
  }

  // optional .proto.message.ProtoQuestActive questActive = 2;
  if (has_questactive()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->questactive(), output);
  }

  // optional .proto.message.ProtoQuestFuben questFuben = 3;
  if (has_questfuben()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->questfuben(), output);
  }

  // optional .proto.message.ProtoQuestDailyKillMonster questDailyKillMonster = 4;
  if (has_questdailykillmonster()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->questdailykillmonster(), output);
  }

  // optional .proto.message.ProtoQuestBranch questBranch = 5;
  if (has_questbranch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->questbranch(), output);
  }

  // repeated .proto.message.ProtoQuestCycle questCycle = 6;
  for (int i = 0; i < this->questcycle_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->questcycle(i), output);
  }

  // repeated int32 completeList = 7;
  for (int i = 0; i < this->completelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->completelist(i), output);
  }

  // repeated .proto.message.ProtoQuestData questData = 8;
  for (int i = 0; i < this->questdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->questdata(i), output);
  }

  // optional int32 killmontertodropitemquestid = 9;
  if (has_killmontertodropitemquestid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->killmontertodropitemquestid(), output);
  }

  // optional uint32 killmontertodropitemquesttime = 10;
  if (has_killmontertodropitemquesttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->killmontertodropitemquesttime(), output);
  }

  // repeated .proto.message.ProtoSingleQuestReward rewards = 11;
  for (int i = 0; i < this->rewards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->rewards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoAllQuestInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto.message.ProtoQuestMain questMain = 1;
  if (has_questmain()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->questmain(), target);
  }

  // optional .proto.message.ProtoQuestActive questActive = 2;
  if (has_questactive()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->questactive(), target);
  }

  // optional .proto.message.ProtoQuestFuben questFuben = 3;
  if (has_questfuben()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->questfuben(), target);
  }

  // optional .proto.message.ProtoQuestDailyKillMonster questDailyKillMonster = 4;
  if (has_questdailykillmonster()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->questdailykillmonster(), target);
  }

  // optional .proto.message.ProtoQuestBranch questBranch = 5;
  if (has_questbranch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->questbranch(), target);
  }

  // repeated .proto.message.ProtoQuestCycle questCycle = 6;
  for (int i = 0; i < this->questcycle_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->questcycle(i), target);
  }

  // repeated int32 completeList = 7;
  for (int i = 0; i < this->completelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->completelist(i), target);
  }

  // repeated .proto.message.ProtoQuestData questData = 8;
  for (int i = 0; i < this->questdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->questdata(i), target);
  }

  // optional int32 killmontertodropitemquestid = 9;
  if (has_killmontertodropitemquestid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->killmontertodropitemquestid(), target);
  }

  // optional uint32 killmontertodropitemquesttime = 10;
  if (has_killmontertodropitemquesttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->killmontertodropitemquesttime(), target);
  }

  // repeated .proto.message.ProtoSingleQuestReward rewards = 11;
  for (int i = 0; i < this->rewards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->rewards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoAllQuestInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto.message.ProtoQuestMain questMain = 1;
    if (has_questmain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->questmain());
    }

    // optional .proto.message.ProtoQuestActive questActive = 2;
    if (has_questactive()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->questactive());
    }

    // optional .proto.message.ProtoQuestFuben questFuben = 3;
    if (has_questfuben()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->questfuben());
    }

    // optional .proto.message.ProtoQuestDailyKillMonster questDailyKillMonster = 4;
    if (has_questdailykillmonster()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->questdailykillmonster());
    }

    // optional .proto.message.ProtoQuestBranch questBranch = 5;
    if (has_questbranch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->questbranch());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 killmontertodropitemquestid = 9;
    if (has_killmontertodropitemquestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->killmontertodropitemquestid());
    }

    // optional uint32 killmontertodropitemquesttime = 10;
    if (has_killmontertodropitemquesttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->killmontertodropitemquesttime());
    }

  }
  // repeated .proto.message.ProtoQuestCycle questCycle = 6;
  total_size += 1 * this->questcycle_size();
  for (int i = 0; i < this->questcycle_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->questcycle(i));
  }

  // repeated int32 completeList = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->completelist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->completelist(i));
    }
    total_size += 1 * this->completelist_size() + data_size;
  }

  // repeated .proto.message.ProtoQuestData questData = 8;
  total_size += 1 * this->questdata_size();
  for (int i = 0; i < this->questdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->questdata(i));
  }

  // repeated .proto.message.ProtoSingleQuestReward rewards = 11;
  total_size += 1 * this->rewards_size();
  for (int i = 0; i < this->rewards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewards(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoAllQuestInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoAllQuestInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoAllQuestInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoAllQuestInfo::MergeFrom(const ProtoAllQuestInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  questcycle_.MergeFrom(from.questcycle_);
  completelist_.MergeFrom(from.completelist_);
  questdata_.MergeFrom(from.questdata_);
  rewards_.MergeFrom(from.rewards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_questmain()) {
      mutable_questmain()->::proto::message::ProtoQuestMain::MergeFrom(from.questmain());
    }
    if (from.has_questactive()) {
      mutable_questactive()->::proto::message::ProtoQuestActive::MergeFrom(from.questactive());
    }
    if (from.has_questfuben()) {
      mutable_questfuben()->::proto::message::ProtoQuestFuben::MergeFrom(from.questfuben());
    }
    if (from.has_questdailykillmonster()) {
      mutable_questdailykillmonster()->::proto::message::ProtoQuestDailyKillMonster::MergeFrom(from.questdailykillmonster());
    }
    if (from.has_questbranch()) {
      mutable_questbranch()->::proto::message::ProtoQuestBranch::MergeFrom(from.questbranch());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_killmontertodropitemquestid()) {
      set_killmontertodropitemquestid(from.killmontertodropitemquestid());
    }
    if (from.has_killmontertodropitemquesttime()) {
      set_killmontertodropitemquesttime(from.killmontertodropitemquesttime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoAllQuestInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoAllQuestInfo::CopyFrom(const ProtoAllQuestInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoAllQuestInfo::IsInitialized() const {

  if (has_questactive()) {
    if (!this->questactive().IsInitialized()) return false;
  }
  if (has_questfuben()) {
    if (!this->questfuben().IsInitialized()) return false;
  }
  if (has_questdailykillmonster()) {
    if (!this->questdailykillmonster().IsInitialized()) return false;
  }
  for (int i = 0; i < questcycle_size(); i++) {
    if (!this->questcycle(i).IsInitialized()) return false;
  }
  for (int i = 0; i < questdata_size(); i++) {
    if (!this->questdata(i).IsInitialized()) return false;
  }
  return true;
}

void ProtoAllQuestInfo::Swap(ProtoAllQuestInfo* other) {
  if (other != this) {
    std::swap(questmain_, other->questmain_);
    std::swap(questactive_, other->questactive_);
    std::swap(questfuben_, other->questfuben_);
    std::swap(questdailykillmonster_, other->questdailykillmonster_);
    std::swap(questbranch_, other->questbranch_);
    questcycle_.Swap(&other->questcycle_);
    completelist_.Swap(&other->completelist_);
    questdata_.Swap(&other->questdata_);
    std::swap(killmontertodropitemquestid_, other->killmontertodropitemquestid_);
    std::swap(killmontertodropitemquesttime_, other->killmontertodropitemquesttime_);
    rewards_.Swap(&other->rewards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoAllQuestInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoAllQuestInfo_descriptor_;
  metadata.reflection = ProtoAllQuestInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace proto

// @@protoc_insertion_point(global_scope)
