// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: redpoint.proto

#ifndef PROTOBUF_redpoint_2eproto__INCLUDED
#define PROTOBUF_redpoint_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace message {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_redpoint_2eproto();
void protobuf_AssignDesc_redpoint_2eproto();
void protobuf_ShutdownFile_redpoint_2eproto();

class RedPointInfo;
class RedPoint_SC_UpdateRedPointData;

// ===================================================================

class RedPointInfo : public ::google::protobuf::Message {
 public:
  RedPointInfo();
  virtual ~RedPointInfo();

  RedPointInfo(const RedPointInfo& from);

  inline RedPointInfo& operator=(const RedPointInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RedPointInfo& default_instance();

  void Swap(RedPointInfo* other);

  // implements Message ----------------------------------------------

  RedPointInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RedPointInfo& from);
  void MergeFrom(const RedPointInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 nIncID = 1;
  inline bool has_nincid() const;
  inline void clear_nincid();
  static const int kNIncIDFieldNumber = 1;
  inline ::google::protobuf::int32 nincid() const;
  inline void set_nincid(::google::protobuf::int32 value);

  // required int32 nID = 2;
  inline bool has_nid() const;
  inline void clear_nid();
  static const int kNIDFieldNumber = 2;
  inline ::google::protobuf::int32 nid() const;
  inline void set_nid(::google::protobuf::int32 value);

  // optional int32 nStatus = 3;
  inline bool has_nstatus() const;
  inline void clear_nstatus();
  static const int kNStatusFieldNumber = 3;
  inline ::google::protobuf::int32 nstatus() const;
  inline void set_nstatus(::google::protobuf::int32 value);

  // optional int32 nType = 4;
  inline bool has_ntype() const;
  inline void clear_ntype();
  static const int kNTypeFieldNumber = 4;
  inline ::google::protobuf::int32 ntype() const;
  inline void set_ntype(::google::protobuf::int32 value);

  // optional string nStrParam = 5;
  inline bool has_nstrparam() const;
  inline void clear_nstrparam();
  static const int kNStrParamFieldNumber = 5;
  inline const ::std::string& nstrparam() const;
  inline void set_nstrparam(const ::std::string& value);
  inline void set_nstrparam(const char* value);
  inline void set_nstrparam(const char* value, size_t size);
  inline ::std::string* mutable_nstrparam();
  inline ::std::string* release_nstrparam();
  inline void set_allocated_nstrparam(::std::string* nstrparam);

  // @@protoc_insertion_point(class_scope:proto.message.RedPointInfo)
 private:
  inline void set_has_nincid();
  inline void clear_has_nincid();
  inline void set_has_nid();
  inline void clear_has_nid();
  inline void set_has_nstatus();
  inline void clear_has_nstatus();
  inline void set_has_ntype();
  inline void clear_has_ntype();
  inline void set_has_nstrparam();
  inline void clear_has_nstrparam();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 nincid_;
  ::google::protobuf::int32 nid_;
  ::google::protobuf::int32 nstatus_;
  ::google::protobuf::int32 ntype_;
  ::std::string* nstrparam_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_redpoint_2eproto();
  friend void protobuf_AssignDesc_redpoint_2eproto();
  friend void protobuf_ShutdownFile_redpoint_2eproto();

  void InitAsDefaultInstance();
  static RedPointInfo* default_instance_;
};
// -------------------------------------------------------------------

class RedPoint_SC_UpdateRedPointData : public ::google::protobuf::Message {
 public:
  RedPoint_SC_UpdateRedPointData();
  virtual ~RedPoint_SC_UpdateRedPointData();

  RedPoint_SC_UpdateRedPointData(const RedPoint_SC_UpdateRedPointData& from);

  inline RedPoint_SC_UpdateRedPointData& operator=(const RedPoint_SC_UpdateRedPointData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RedPoint_SC_UpdateRedPointData& default_instance();

  void Swap(RedPoint_SC_UpdateRedPointData* other);

  // implements Message ----------------------------------------------

  RedPoint_SC_UpdateRedPointData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RedPoint_SC_UpdateRedPointData& from);
  void MergeFrom(const RedPoint_SC_UpdateRedPointData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.message.RedPointInfo infoList = 1;
  inline int infolist_size() const;
  inline void clear_infolist();
  static const int kInfoListFieldNumber = 1;
  inline const ::proto::message::RedPointInfo& infolist(int index) const;
  inline ::proto::message::RedPointInfo* mutable_infolist(int index);
  inline ::proto::message::RedPointInfo* add_infolist();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::message::RedPointInfo >&
      infolist() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::message::RedPointInfo >*
      mutable_infolist();

  // @@protoc_insertion_point(class_scope:proto.message.RedPoint_SC_UpdateRedPointData)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto::message::RedPointInfo > infolist_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_redpoint_2eproto();
  friend void protobuf_AssignDesc_redpoint_2eproto();
  friend void protobuf_ShutdownFile_redpoint_2eproto();

  void InitAsDefaultInstance();
  static RedPoint_SC_UpdateRedPointData* default_instance_;
};
// ===================================================================


// ===================================================================

// RedPointInfo

// required int32 nIncID = 1;
inline bool RedPointInfo::has_nincid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RedPointInfo::set_has_nincid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RedPointInfo::clear_has_nincid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RedPointInfo::clear_nincid() {
  nincid_ = 0;
  clear_has_nincid();
}
inline ::google::protobuf::int32 RedPointInfo::nincid() const {
  return nincid_;
}
inline void RedPointInfo::set_nincid(::google::protobuf::int32 value) {
  set_has_nincid();
  nincid_ = value;
}

// required int32 nID = 2;
inline bool RedPointInfo::has_nid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RedPointInfo::set_has_nid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RedPointInfo::clear_has_nid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RedPointInfo::clear_nid() {
  nid_ = 0;
  clear_has_nid();
}
inline ::google::protobuf::int32 RedPointInfo::nid() const {
  return nid_;
}
inline void RedPointInfo::set_nid(::google::protobuf::int32 value) {
  set_has_nid();
  nid_ = value;
}

// optional int32 nStatus = 3;
inline bool RedPointInfo::has_nstatus() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RedPointInfo::set_has_nstatus() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RedPointInfo::clear_has_nstatus() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RedPointInfo::clear_nstatus() {
  nstatus_ = 0;
  clear_has_nstatus();
}
inline ::google::protobuf::int32 RedPointInfo::nstatus() const {
  return nstatus_;
}
inline void RedPointInfo::set_nstatus(::google::protobuf::int32 value) {
  set_has_nstatus();
  nstatus_ = value;
}

// optional int32 nType = 4;
inline bool RedPointInfo::has_ntype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RedPointInfo::set_has_ntype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RedPointInfo::clear_has_ntype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RedPointInfo::clear_ntype() {
  ntype_ = 0;
  clear_has_ntype();
}
inline ::google::protobuf::int32 RedPointInfo::ntype() const {
  return ntype_;
}
inline void RedPointInfo::set_ntype(::google::protobuf::int32 value) {
  set_has_ntype();
  ntype_ = value;
}

// optional string nStrParam = 5;
inline bool RedPointInfo::has_nstrparam() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RedPointInfo::set_has_nstrparam() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RedPointInfo::clear_has_nstrparam() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RedPointInfo::clear_nstrparam() {
  if (nstrparam_ != &::google::protobuf::internal::kEmptyString) {
    nstrparam_->clear();
  }
  clear_has_nstrparam();
}
inline const ::std::string& RedPointInfo::nstrparam() const {
  return *nstrparam_;
}
inline void RedPointInfo::set_nstrparam(const ::std::string& value) {
  set_has_nstrparam();
  if (nstrparam_ == &::google::protobuf::internal::kEmptyString) {
    nstrparam_ = new ::std::string;
  }
  nstrparam_->assign(value);
}
inline void RedPointInfo::set_nstrparam(const char* value) {
  set_has_nstrparam();
  if (nstrparam_ == &::google::protobuf::internal::kEmptyString) {
    nstrparam_ = new ::std::string;
  }
  nstrparam_->assign(value);
}
inline void RedPointInfo::set_nstrparam(const char* value, size_t size) {
  set_has_nstrparam();
  if (nstrparam_ == &::google::protobuf::internal::kEmptyString) {
    nstrparam_ = new ::std::string;
  }
  nstrparam_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RedPointInfo::mutable_nstrparam() {
  set_has_nstrparam();
  if (nstrparam_ == &::google::protobuf::internal::kEmptyString) {
    nstrparam_ = new ::std::string;
  }
  return nstrparam_;
}
inline ::std::string* RedPointInfo::release_nstrparam() {
  clear_has_nstrparam();
  if (nstrparam_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nstrparam_;
    nstrparam_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RedPointInfo::set_allocated_nstrparam(::std::string* nstrparam) {
  if (nstrparam_ != &::google::protobuf::internal::kEmptyString) {
    delete nstrparam_;
  }
  if (nstrparam) {
    set_has_nstrparam();
    nstrparam_ = nstrparam;
  } else {
    clear_has_nstrparam();
    nstrparam_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// RedPoint_SC_UpdateRedPointData

// repeated .proto.message.RedPointInfo infoList = 1;
inline int RedPoint_SC_UpdateRedPointData::infolist_size() const {
  return infolist_.size();
}
inline void RedPoint_SC_UpdateRedPointData::clear_infolist() {
  infolist_.Clear();
}
inline const ::proto::message::RedPointInfo& RedPoint_SC_UpdateRedPointData::infolist(int index) const {
  return infolist_.Get(index);
}
inline ::proto::message::RedPointInfo* RedPoint_SC_UpdateRedPointData::mutable_infolist(int index) {
  return infolist_.Mutable(index);
}
inline ::proto::message::RedPointInfo* RedPoint_SC_UpdateRedPointData::add_infolist() {
  return infolist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::message::RedPointInfo >&
RedPoint_SC_UpdateRedPointData::infolist() const {
  return infolist_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::message::RedPointInfo >*
RedPoint_SC_UpdateRedPointData::mutable_infolist() {
  return &infolist_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace proto

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_redpoint_2eproto__INCLUDED
