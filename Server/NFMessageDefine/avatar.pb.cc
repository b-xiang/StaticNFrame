// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: avatar.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "avatar.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace message {

namespace {

const ::google::protobuf::Descriptor* Avatar_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Avatar_reflection_ = NULL;
const ::google::protobuf::Descriptor* Avatar_CS_GetAvatarInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Avatar_CS_GetAvatarInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Avatar_SC_GetAvatarInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Avatar_SC_GetAvatarInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Avatar_CS_ActivateAvatar_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Avatar_CS_ActivateAvatar_reflection_ = NULL;
const ::google::protobuf::Descriptor* Avatar_SC_ActivateAvatar_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Avatar_SC_ActivateAvatar_reflection_ = NULL;
const ::google::protobuf::Descriptor* Avatar_CS_PutOnAvatar_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Avatar_CS_PutOnAvatar_reflection_ = NULL;
const ::google::protobuf::Descriptor* Avatar_SC_PutOnAvatar_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Avatar_SC_PutOnAvatar_reflection_ = NULL;
const ::google::protobuf::Descriptor* Avatar_CS_GetOffAvatar_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Avatar_CS_GetOffAvatar_reflection_ = NULL;
const ::google::protobuf::Descriptor* Avatar_SC_GetOffAvatar_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Avatar_SC_GetOffAvatar_reflection_ = NULL;
const ::google::protobuf::Descriptor* Avatar_CS_ActivateColour_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Avatar_CS_ActivateColour_reflection_ = NULL;
const ::google::protobuf::Descriptor* Avatar_SC_ActivateColour_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Avatar_SC_ActivateColour_reflection_ = NULL;
const ::google::protobuf::Descriptor* Avatar_CS_SelectColour_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Avatar_CS_SelectColour_reflection_ = NULL;
const ::google::protobuf::Descriptor* Avatar_SC_SelectColour_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Avatar_SC_SelectColour_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_avatar_2eproto() {
  protobuf_AddDesc_avatar_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "avatar.proto");
  GOOGLE_CHECK(file != NULL);
  Avatar_descriptor_ = file->message_type(0);
  static const int Avatar_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Avatar, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Avatar, deadline_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Avatar, colour_list_),
  };
  Avatar_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Avatar_descriptor_,
      Avatar::default_instance_,
      Avatar_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Avatar, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Avatar, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Avatar));
  Avatar_CS_GetAvatarInfo_descriptor_ = file->message_type(1);
  static const int Avatar_CS_GetAvatarInfo_offsets_[1] = {
  };
  Avatar_CS_GetAvatarInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Avatar_CS_GetAvatarInfo_descriptor_,
      Avatar_CS_GetAvatarInfo::default_instance_,
      Avatar_CS_GetAvatarInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Avatar_CS_GetAvatarInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Avatar_CS_GetAvatarInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Avatar_CS_GetAvatarInfo));
  Avatar_SC_GetAvatarInfo_descriptor_ = file->message_type(2);
  static const int Avatar_SC_GetAvatarInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Avatar_SC_GetAvatarInfo, avatar_id_on_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Avatar_SC_GetAvatarInfo, colour_id_on_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Avatar_SC_GetAvatarInfo, avatar_list_),
  };
  Avatar_SC_GetAvatarInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Avatar_SC_GetAvatarInfo_descriptor_,
      Avatar_SC_GetAvatarInfo::default_instance_,
      Avatar_SC_GetAvatarInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Avatar_SC_GetAvatarInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Avatar_SC_GetAvatarInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Avatar_SC_GetAvatarInfo));
  Avatar_CS_ActivateAvatar_descriptor_ = file->message_type(3);
  static const int Avatar_CS_ActivateAvatar_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Avatar_CS_ActivateAvatar, id_),
  };
  Avatar_CS_ActivateAvatar_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Avatar_CS_ActivateAvatar_descriptor_,
      Avatar_CS_ActivateAvatar::default_instance_,
      Avatar_CS_ActivateAvatar_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Avatar_CS_ActivateAvatar, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Avatar_CS_ActivateAvatar, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Avatar_CS_ActivateAvatar));
  Avatar_SC_ActivateAvatar_descriptor_ = file->message_type(4);
  static const int Avatar_SC_ActivateAvatar_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Avatar_SC_ActivateAvatar, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Avatar_SC_ActivateAvatar, avatar_info_),
  };
  Avatar_SC_ActivateAvatar_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Avatar_SC_ActivateAvatar_descriptor_,
      Avatar_SC_ActivateAvatar::default_instance_,
      Avatar_SC_ActivateAvatar_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Avatar_SC_ActivateAvatar, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Avatar_SC_ActivateAvatar, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Avatar_SC_ActivateAvatar));
  Avatar_CS_PutOnAvatar_descriptor_ = file->message_type(5);
  static const int Avatar_CS_PutOnAvatar_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Avatar_CS_PutOnAvatar, avatar_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Avatar_CS_PutOnAvatar, colour_id_),
  };
  Avatar_CS_PutOnAvatar_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Avatar_CS_PutOnAvatar_descriptor_,
      Avatar_CS_PutOnAvatar::default_instance_,
      Avatar_CS_PutOnAvatar_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Avatar_CS_PutOnAvatar, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Avatar_CS_PutOnAvatar, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Avatar_CS_PutOnAvatar));
  Avatar_SC_PutOnAvatar_descriptor_ = file->message_type(6);
  static const int Avatar_SC_PutOnAvatar_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Avatar_SC_PutOnAvatar, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Avatar_SC_PutOnAvatar, avatar_id_on_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Avatar_SC_PutOnAvatar, colour_id_on_),
  };
  Avatar_SC_PutOnAvatar_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Avatar_SC_PutOnAvatar_descriptor_,
      Avatar_SC_PutOnAvatar::default_instance_,
      Avatar_SC_PutOnAvatar_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Avatar_SC_PutOnAvatar, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Avatar_SC_PutOnAvatar, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Avatar_SC_PutOnAvatar));
  Avatar_CS_GetOffAvatar_descriptor_ = file->message_type(7);
  static const int Avatar_CS_GetOffAvatar_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Avatar_CS_GetOffAvatar, avatar_id_),
  };
  Avatar_CS_GetOffAvatar_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Avatar_CS_GetOffAvatar_descriptor_,
      Avatar_CS_GetOffAvatar::default_instance_,
      Avatar_CS_GetOffAvatar_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Avatar_CS_GetOffAvatar, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Avatar_CS_GetOffAvatar, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Avatar_CS_GetOffAvatar));
  Avatar_SC_GetOffAvatar_descriptor_ = file->message_type(8);
  static const int Avatar_SC_GetOffAvatar_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Avatar_SC_GetOffAvatar, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Avatar_SC_GetOffAvatar, avatar_id_),
  };
  Avatar_SC_GetOffAvatar_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Avatar_SC_GetOffAvatar_descriptor_,
      Avatar_SC_GetOffAvatar::default_instance_,
      Avatar_SC_GetOffAvatar_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Avatar_SC_GetOffAvatar, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Avatar_SC_GetOffAvatar, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Avatar_SC_GetOffAvatar));
  Avatar_CS_ActivateColour_descriptor_ = file->message_type(9);
  static const int Avatar_CS_ActivateColour_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Avatar_CS_ActivateColour, avatar_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Avatar_CS_ActivateColour, colour_id_),
  };
  Avatar_CS_ActivateColour_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Avatar_CS_ActivateColour_descriptor_,
      Avatar_CS_ActivateColour::default_instance_,
      Avatar_CS_ActivateColour_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Avatar_CS_ActivateColour, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Avatar_CS_ActivateColour, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Avatar_CS_ActivateColour));
  Avatar_SC_ActivateColour_descriptor_ = file->message_type(10);
  static const int Avatar_SC_ActivateColour_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Avatar_SC_ActivateColour, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Avatar_SC_ActivateColour, avatar_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Avatar_SC_ActivateColour, colour_id_),
  };
  Avatar_SC_ActivateColour_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Avatar_SC_ActivateColour_descriptor_,
      Avatar_SC_ActivateColour::default_instance_,
      Avatar_SC_ActivateColour_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Avatar_SC_ActivateColour, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Avatar_SC_ActivateColour, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Avatar_SC_ActivateColour));
  Avatar_CS_SelectColour_descriptor_ = file->message_type(11);
  static const int Avatar_CS_SelectColour_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Avatar_CS_SelectColour, avatar_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Avatar_CS_SelectColour, colour_id_),
  };
  Avatar_CS_SelectColour_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Avatar_CS_SelectColour_descriptor_,
      Avatar_CS_SelectColour::default_instance_,
      Avatar_CS_SelectColour_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Avatar_CS_SelectColour, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Avatar_CS_SelectColour, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Avatar_CS_SelectColour));
  Avatar_SC_SelectColour_descriptor_ = file->message_type(12);
  static const int Avatar_SC_SelectColour_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Avatar_SC_SelectColour, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Avatar_SC_SelectColour, avatar_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Avatar_SC_SelectColour, colour_id_),
  };
  Avatar_SC_SelectColour_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Avatar_SC_SelectColour_descriptor_,
      Avatar_SC_SelectColour::default_instance_,
      Avatar_SC_SelectColour_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Avatar_SC_SelectColour, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Avatar_SC_SelectColour, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Avatar_SC_SelectColour));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_avatar_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Avatar_descriptor_, &Avatar::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Avatar_CS_GetAvatarInfo_descriptor_, &Avatar_CS_GetAvatarInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Avatar_SC_GetAvatarInfo_descriptor_, &Avatar_SC_GetAvatarInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Avatar_CS_ActivateAvatar_descriptor_, &Avatar_CS_ActivateAvatar::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Avatar_SC_ActivateAvatar_descriptor_, &Avatar_SC_ActivateAvatar::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Avatar_CS_PutOnAvatar_descriptor_, &Avatar_CS_PutOnAvatar::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Avatar_SC_PutOnAvatar_descriptor_, &Avatar_SC_PutOnAvatar::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Avatar_CS_GetOffAvatar_descriptor_, &Avatar_CS_GetOffAvatar::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Avatar_SC_GetOffAvatar_descriptor_, &Avatar_SC_GetOffAvatar::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Avatar_CS_ActivateColour_descriptor_, &Avatar_CS_ActivateColour::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Avatar_SC_ActivateColour_descriptor_, &Avatar_SC_ActivateColour::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Avatar_CS_SelectColour_descriptor_, &Avatar_CS_SelectColour::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Avatar_SC_SelectColour_descriptor_, &Avatar_SC_SelectColour::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_avatar_2eproto() {
  delete Avatar::default_instance_;
  delete Avatar_reflection_;
  delete Avatar_CS_GetAvatarInfo::default_instance_;
  delete Avatar_CS_GetAvatarInfo_reflection_;
  delete Avatar_SC_GetAvatarInfo::default_instance_;
  delete Avatar_SC_GetAvatarInfo_reflection_;
  delete Avatar_CS_ActivateAvatar::default_instance_;
  delete Avatar_CS_ActivateAvatar_reflection_;
  delete Avatar_SC_ActivateAvatar::default_instance_;
  delete Avatar_SC_ActivateAvatar_reflection_;
  delete Avatar_CS_PutOnAvatar::default_instance_;
  delete Avatar_CS_PutOnAvatar_reflection_;
  delete Avatar_SC_PutOnAvatar::default_instance_;
  delete Avatar_SC_PutOnAvatar_reflection_;
  delete Avatar_CS_GetOffAvatar::default_instance_;
  delete Avatar_CS_GetOffAvatar_reflection_;
  delete Avatar_SC_GetOffAvatar::default_instance_;
  delete Avatar_SC_GetOffAvatar_reflection_;
  delete Avatar_CS_ActivateColour::default_instance_;
  delete Avatar_CS_ActivateColour_reflection_;
  delete Avatar_SC_ActivateColour::default_instance_;
  delete Avatar_SC_ActivateColour_reflection_;
  delete Avatar_CS_SelectColour::default_instance_;
  delete Avatar_CS_SelectColour_reflection_;
  delete Avatar_SC_SelectColour::default_instance_;
  delete Avatar_SC_SelectColour_reflection_;
}

void protobuf_AddDesc_avatar_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014avatar.proto\022\rproto.message\"@\n\006Avatar\022"
    "\n\n\002id\030\001 \001(\005\022\025\n\rdeadline_time\030\002 \001(\004\022\023\n\013co"
    "lour_list\030\003 \003(\005\"\031\n\027Avatar_CS_GetAvatarIn"
    "fo\"q\n\027Avatar_SC_GetAvatarInfo\022\024\n\014avatar_"
    "id_on\030\001 \001(\005\022\024\n\014colour_id_on\030\002 \001(\005\022*\n\013ava"
    "tar_list\030\003 \003(\0132\025.proto.message.Avatar\"&\n"
    "\030Avatar_CS_ActivateAvatar\022\n\n\002id\030\001 \001(\005\"V\n"
    "\030Avatar_SC_ActivateAvatar\022\016\n\006result\030\001 \001("
    "\005\022*\n\013avatar_info\030\002 \001(\0132\025.proto.message.A"
    "vatar\"=\n\025Avatar_CS_PutOnAvatar\022\021\n\tavatar"
    "_id\030\001 \001(\005\022\021\n\tcolour_id\030\003 \001(\005\"S\n\025Avatar_S"
    "C_PutOnAvatar\022\016\n\006result\030\001 \001(\005\022\024\n\014avatar_"
    "id_on\030\002 \001(\005\022\024\n\014colour_id_on\030\003 \001(\005\"+\n\026Ava"
    "tar_CS_GetOffAvatar\022\021\n\tavatar_id\030\001 \001(\005\";"
    "\n\026Avatar_SC_GetOffAvatar\022\016\n\006result\030\001 \001(\005"
    "\022\021\n\tavatar_id\030\002 \001(\005\"@\n\030Avatar_CS_Activat"
    "eColour\022\021\n\tavatar_id\030\001 \001(\005\022\021\n\tcolour_id\030"
    "\002 \001(\005\"P\n\030Avatar_SC_ActivateColour\022\016\n\006res"
    "ult\030\001 \001(\005\022\021\n\tavatar_id\030\002 \001(\005\022\021\n\tcolour_i"
    "d\030\003 \001(\005\">\n\026Avatar_CS_SelectColour\022\021\n\tava"
    "tar_id\030\001 \001(\005\022\021\n\tcolour_id\030\002 \001(\005\"N\n\026Avata"
    "r_SC_SelectColour\022\016\n\006result\030\001 \001(\005\022\021\n\tava"
    "tar_id\030\002 \001(\005\022\021\n\tcolour_id\030\003 \001(\005B\017\n\rproto"
    ".message", 928);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "avatar.proto", &protobuf_RegisterTypes);
  Avatar::default_instance_ = new Avatar();
  Avatar_CS_GetAvatarInfo::default_instance_ = new Avatar_CS_GetAvatarInfo();
  Avatar_SC_GetAvatarInfo::default_instance_ = new Avatar_SC_GetAvatarInfo();
  Avatar_CS_ActivateAvatar::default_instance_ = new Avatar_CS_ActivateAvatar();
  Avatar_SC_ActivateAvatar::default_instance_ = new Avatar_SC_ActivateAvatar();
  Avatar_CS_PutOnAvatar::default_instance_ = new Avatar_CS_PutOnAvatar();
  Avatar_SC_PutOnAvatar::default_instance_ = new Avatar_SC_PutOnAvatar();
  Avatar_CS_GetOffAvatar::default_instance_ = new Avatar_CS_GetOffAvatar();
  Avatar_SC_GetOffAvatar::default_instance_ = new Avatar_SC_GetOffAvatar();
  Avatar_CS_ActivateColour::default_instance_ = new Avatar_CS_ActivateColour();
  Avatar_SC_ActivateColour::default_instance_ = new Avatar_SC_ActivateColour();
  Avatar_CS_SelectColour::default_instance_ = new Avatar_CS_SelectColour();
  Avatar_SC_SelectColour::default_instance_ = new Avatar_SC_SelectColour();
  Avatar::default_instance_->InitAsDefaultInstance();
  Avatar_CS_GetAvatarInfo::default_instance_->InitAsDefaultInstance();
  Avatar_SC_GetAvatarInfo::default_instance_->InitAsDefaultInstance();
  Avatar_CS_ActivateAvatar::default_instance_->InitAsDefaultInstance();
  Avatar_SC_ActivateAvatar::default_instance_->InitAsDefaultInstance();
  Avatar_CS_PutOnAvatar::default_instance_->InitAsDefaultInstance();
  Avatar_SC_PutOnAvatar::default_instance_->InitAsDefaultInstance();
  Avatar_CS_GetOffAvatar::default_instance_->InitAsDefaultInstance();
  Avatar_SC_GetOffAvatar::default_instance_->InitAsDefaultInstance();
  Avatar_CS_ActivateColour::default_instance_->InitAsDefaultInstance();
  Avatar_SC_ActivateColour::default_instance_->InitAsDefaultInstance();
  Avatar_CS_SelectColour::default_instance_->InitAsDefaultInstance();
  Avatar_SC_SelectColour::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_avatar_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_avatar_2eproto {
  StaticDescriptorInitializer_avatar_2eproto() {
    protobuf_AddDesc_avatar_2eproto();
  }
} static_descriptor_initializer_avatar_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Avatar::kIdFieldNumber;
const int Avatar::kDeadlineTimeFieldNumber;
const int Avatar::kColourListFieldNumber;
#endif  // !_MSC_VER

Avatar::Avatar()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Avatar::InitAsDefaultInstance() {
}

Avatar::Avatar(const Avatar& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Avatar::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  deadline_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Avatar::~Avatar() {
  SharedDtor();
}

void Avatar::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Avatar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Avatar::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Avatar_descriptor_;
}

const Avatar& Avatar::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_avatar_2eproto();
  return *default_instance_;
}

Avatar* Avatar::default_instance_ = NULL;

Avatar* Avatar::New() const {
  return new Avatar;
}

void Avatar::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    deadline_time_ = GOOGLE_ULONGLONG(0);
  }
  colour_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Avatar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_deadline_time;
        break;
      }

      // optional uint64 deadline_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deadline_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &deadline_time_)));
          set_has_deadline_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_colour_list;
        break;
      }

      // repeated int32 colour_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_colour_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_colour_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_colour_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_colour_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Avatar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional uint64 deadline_time = 2;
  if (has_deadline_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->deadline_time(), output);
  }

  // repeated int32 colour_list = 3;
  for (int i = 0; i < this->colour_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->colour_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Avatar::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional uint64 deadline_time = 2;
  if (has_deadline_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->deadline_time(), target);
  }

  // repeated int32 colour_list = 3;
  for (int i = 0; i < this->colour_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->colour_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Avatar::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional uint64 deadline_time = 2;
    if (has_deadline_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->deadline_time());
    }

  }
  // repeated int32 colour_list = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->colour_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->colour_list(i));
    }
    total_size += 1 * this->colour_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Avatar::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Avatar* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Avatar*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Avatar::MergeFrom(const Avatar& from) {
  GOOGLE_CHECK_NE(&from, this);
  colour_list_.MergeFrom(from.colour_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_deadline_time()) {
      set_deadline_time(from.deadline_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Avatar::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Avatar::CopyFrom(const Avatar& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Avatar::IsInitialized() const {

  return true;
}

void Avatar::Swap(Avatar* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(deadline_time_, other->deadline_time_);
    colour_list_.Swap(&other->colour_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Avatar::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Avatar_descriptor_;
  metadata.reflection = Avatar_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Avatar_CS_GetAvatarInfo::Avatar_CS_GetAvatarInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Avatar_CS_GetAvatarInfo::InitAsDefaultInstance() {
}

Avatar_CS_GetAvatarInfo::Avatar_CS_GetAvatarInfo(const Avatar_CS_GetAvatarInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Avatar_CS_GetAvatarInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Avatar_CS_GetAvatarInfo::~Avatar_CS_GetAvatarInfo() {
  SharedDtor();
}

void Avatar_CS_GetAvatarInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Avatar_CS_GetAvatarInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Avatar_CS_GetAvatarInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Avatar_CS_GetAvatarInfo_descriptor_;
}

const Avatar_CS_GetAvatarInfo& Avatar_CS_GetAvatarInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_avatar_2eproto();
  return *default_instance_;
}

Avatar_CS_GetAvatarInfo* Avatar_CS_GetAvatarInfo::default_instance_ = NULL;

Avatar_CS_GetAvatarInfo* Avatar_CS_GetAvatarInfo::New() const {
  return new Avatar_CS_GetAvatarInfo;
}

void Avatar_CS_GetAvatarInfo::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Avatar_CS_GetAvatarInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Avatar_CS_GetAvatarInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Avatar_CS_GetAvatarInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Avatar_CS_GetAvatarInfo::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Avatar_CS_GetAvatarInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Avatar_CS_GetAvatarInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Avatar_CS_GetAvatarInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Avatar_CS_GetAvatarInfo::MergeFrom(const Avatar_CS_GetAvatarInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Avatar_CS_GetAvatarInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Avatar_CS_GetAvatarInfo::CopyFrom(const Avatar_CS_GetAvatarInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Avatar_CS_GetAvatarInfo::IsInitialized() const {

  return true;
}

void Avatar_CS_GetAvatarInfo::Swap(Avatar_CS_GetAvatarInfo* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Avatar_CS_GetAvatarInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Avatar_CS_GetAvatarInfo_descriptor_;
  metadata.reflection = Avatar_CS_GetAvatarInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Avatar_SC_GetAvatarInfo::kAvatarIdOnFieldNumber;
const int Avatar_SC_GetAvatarInfo::kColourIdOnFieldNumber;
const int Avatar_SC_GetAvatarInfo::kAvatarListFieldNumber;
#endif  // !_MSC_VER

Avatar_SC_GetAvatarInfo::Avatar_SC_GetAvatarInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Avatar_SC_GetAvatarInfo::InitAsDefaultInstance() {
}

Avatar_SC_GetAvatarInfo::Avatar_SC_GetAvatarInfo(const Avatar_SC_GetAvatarInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Avatar_SC_GetAvatarInfo::SharedCtor() {
  _cached_size_ = 0;
  avatar_id_on_ = 0;
  colour_id_on_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Avatar_SC_GetAvatarInfo::~Avatar_SC_GetAvatarInfo() {
  SharedDtor();
}

void Avatar_SC_GetAvatarInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Avatar_SC_GetAvatarInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Avatar_SC_GetAvatarInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Avatar_SC_GetAvatarInfo_descriptor_;
}

const Avatar_SC_GetAvatarInfo& Avatar_SC_GetAvatarInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_avatar_2eproto();
  return *default_instance_;
}

Avatar_SC_GetAvatarInfo* Avatar_SC_GetAvatarInfo::default_instance_ = NULL;

Avatar_SC_GetAvatarInfo* Avatar_SC_GetAvatarInfo::New() const {
  return new Avatar_SC_GetAvatarInfo;
}

void Avatar_SC_GetAvatarInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    avatar_id_on_ = 0;
    colour_id_on_ = 0;
  }
  avatar_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Avatar_SC_GetAvatarInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 avatar_id_on = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &avatar_id_on_)));
          set_has_avatar_id_on();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_colour_id_on;
        break;
      }

      // optional int32 colour_id_on = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_colour_id_on:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &colour_id_on_)));
          set_has_colour_id_on();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_avatar_list;
        break;
      }

      // repeated .proto.message.Avatar avatar_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_avatar_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_avatar_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_avatar_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Avatar_SC_GetAvatarInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 avatar_id_on = 1;
  if (has_avatar_id_on()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->avatar_id_on(), output);
  }

  // optional int32 colour_id_on = 2;
  if (has_colour_id_on()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->colour_id_on(), output);
  }

  // repeated .proto.message.Avatar avatar_list = 3;
  for (int i = 0; i < this->avatar_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->avatar_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Avatar_SC_GetAvatarInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 avatar_id_on = 1;
  if (has_avatar_id_on()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->avatar_id_on(), target);
  }

  // optional int32 colour_id_on = 2;
  if (has_colour_id_on()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->colour_id_on(), target);
  }

  // repeated .proto.message.Avatar avatar_list = 3;
  for (int i = 0; i < this->avatar_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->avatar_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Avatar_SC_GetAvatarInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 avatar_id_on = 1;
    if (has_avatar_id_on()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->avatar_id_on());
    }

    // optional int32 colour_id_on = 2;
    if (has_colour_id_on()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->colour_id_on());
    }

  }
  // repeated .proto.message.Avatar avatar_list = 3;
  total_size += 1 * this->avatar_list_size();
  for (int i = 0; i < this->avatar_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->avatar_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Avatar_SC_GetAvatarInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Avatar_SC_GetAvatarInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Avatar_SC_GetAvatarInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Avatar_SC_GetAvatarInfo::MergeFrom(const Avatar_SC_GetAvatarInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  avatar_list_.MergeFrom(from.avatar_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_avatar_id_on()) {
      set_avatar_id_on(from.avatar_id_on());
    }
    if (from.has_colour_id_on()) {
      set_colour_id_on(from.colour_id_on());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Avatar_SC_GetAvatarInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Avatar_SC_GetAvatarInfo::CopyFrom(const Avatar_SC_GetAvatarInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Avatar_SC_GetAvatarInfo::IsInitialized() const {

  return true;
}

void Avatar_SC_GetAvatarInfo::Swap(Avatar_SC_GetAvatarInfo* other) {
  if (other != this) {
    std::swap(avatar_id_on_, other->avatar_id_on_);
    std::swap(colour_id_on_, other->colour_id_on_);
    avatar_list_.Swap(&other->avatar_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Avatar_SC_GetAvatarInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Avatar_SC_GetAvatarInfo_descriptor_;
  metadata.reflection = Avatar_SC_GetAvatarInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Avatar_CS_ActivateAvatar::kIdFieldNumber;
#endif  // !_MSC_VER

Avatar_CS_ActivateAvatar::Avatar_CS_ActivateAvatar()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Avatar_CS_ActivateAvatar::InitAsDefaultInstance() {
}

Avatar_CS_ActivateAvatar::Avatar_CS_ActivateAvatar(const Avatar_CS_ActivateAvatar& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Avatar_CS_ActivateAvatar::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Avatar_CS_ActivateAvatar::~Avatar_CS_ActivateAvatar() {
  SharedDtor();
}

void Avatar_CS_ActivateAvatar::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Avatar_CS_ActivateAvatar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Avatar_CS_ActivateAvatar::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Avatar_CS_ActivateAvatar_descriptor_;
}

const Avatar_CS_ActivateAvatar& Avatar_CS_ActivateAvatar::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_avatar_2eproto();
  return *default_instance_;
}

Avatar_CS_ActivateAvatar* Avatar_CS_ActivateAvatar::default_instance_ = NULL;

Avatar_CS_ActivateAvatar* Avatar_CS_ActivateAvatar::New() const {
  return new Avatar_CS_ActivateAvatar;
}

void Avatar_CS_ActivateAvatar::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Avatar_CS_ActivateAvatar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Avatar_CS_ActivateAvatar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Avatar_CS_ActivateAvatar::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Avatar_CS_ActivateAvatar::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Avatar_CS_ActivateAvatar::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Avatar_CS_ActivateAvatar* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Avatar_CS_ActivateAvatar*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Avatar_CS_ActivateAvatar::MergeFrom(const Avatar_CS_ActivateAvatar& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Avatar_CS_ActivateAvatar::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Avatar_CS_ActivateAvatar::CopyFrom(const Avatar_CS_ActivateAvatar& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Avatar_CS_ActivateAvatar::IsInitialized() const {

  return true;
}

void Avatar_CS_ActivateAvatar::Swap(Avatar_CS_ActivateAvatar* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Avatar_CS_ActivateAvatar::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Avatar_CS_ActivateAvatar_descriptor_;
  metadata.reflection = Avatar_CS_ActivateAvatar_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Avatar_SC_ActivateAvatar::kResultFieldNumber;
const int Avatar_SC_ActivateAvatar::kAvatarInfoFieldNumber;
#endif  // !_MSC_VER

Avatar_SC_ActivateAvatar::Avatar_SC_ActivateAvatar()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Avatar_SC_ActivateAvatar::InitAsDefaultInstance() {
  avatar_info_ = const_cast< ::proto::message::Avatar*>(&::proto::message::Avatar::default_instance());
}

Avatar_SC_ActivateAvatar::Avatar_SC_ActivateAvatar(const Avatar_SC_ActivateAvatar& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Avatar_SC_ActivateAvatar::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  avatar_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Avatar_SC_ActivateAvatar::~Avatar_SC_ActivateAvatar() {
  SharedDtor();
}

void Avatar_SC_ActivateAvatar::SharedDtor() {
  if (this != default_instance_) {
    delete avatar_info_;
  }
}

void Avatar_SC_ActivateAvatar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Avatar_SC_ActivateAvatar::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Avatar_SC_ActivateAvatar_descriptor_;
}

const Avatar_SC_ActivateAvatar& Avatar_SC_ActivateAvatar::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_avatar_2eproto();
  return *default_instance_;
}

Avatar_SC_ActivateAvatar* Avatar_SC_ActivateAvatar::default_instance_ = NULL;

Avatar_SC_ActivateAvatar* Avatar_SC_ActivateAvatar::New() const {
  return new Avatar_SC_ActivateAvatar;
}

void Avatar_SC_ActivateAvatar::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_avatar_info()) {
      if (avatar_info_ != NULL) avatar_info_->::proto::message::Avatar::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Avatar_SC_ActivateAvatar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_avatar_info;
        break;
      }

      // optional .proto.message.Avatar avatar_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_avatar_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_avatar_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Avatar_SC_ActivateAvatar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .proto.message.Avatar avatar_info = 2;
  if (has_avatar_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->avatar_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Avatar_SC_ActivateAvatar::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .proto.message.Avatar avatar_info = 2;
  if (has_avatar_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->avatar_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Avatar_SC_ActivateAvatar::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .proto.message.Avatar avatar_info = 2;
    if (has_avatar_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->avatar_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Avatar_SC_ActivateAvatar::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Avatar_SC_ActivateAvatar* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Avatar_SC_ActivateAvatar*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Avatar_SC_ActivateAvatar::MergeFrom(const Avatar_SC_ActivateAvatar& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_avatar_info()) {
      mutable_avatar_info()->::proto::message::Avatar::MergeFrom(from.avatar_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Avatar_SC_ActivateAvatar::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Avatar_SC_ActivateAvatar::CopyFrom(const Avatar_SC_ActivateAvatar& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Avatar_SC_ActivateAvatar::IsInitialized() const {

  return true;
}

void Avatar_SC_ActivateAvatar::Swap(Avatar_SC_ActivateAvatar* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(avatar_info_, other->avatar_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Avatar_SC_ActivateAvatar::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Avatar_SC_ActivateAvatar_descriptor_;
  metadata.reflection = Avatar_SC_ActivateAvatar_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Avatar_CS_PutOnAvatar::kAvatarIdFieldNumber;
const int Avatar_CS_PutOnAvatar::kColourIdFieldNumber;
#endif  // !_MSC_VER

Avatar_CS_PutOnAvatar::Avatar_CS_PutOnAvatar()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Avatar_CS_PutOnAvatar::InitAsDefaultInstance() {
}

Avatar_CS_PutOnAvatar::Avatar_CS_PutOnAvatar(const Avatar_CS_PutOnAvatar& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Avatar_CS_PutOnAvatar::SharedCtor() {
  _cached_size_ = 0;
  avatar_id_ = 0;
  colour_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Avatar_CS_PutOnAvatar::~Avatar_CS_PutOnAvatar() {
  SharedDtor();
}

void Avatar_CS_PutOnAvatar::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Avatar_CS_PutOnAvatar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Avatar_CS_PutOnAvatar::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Avatar_CS_PutOnAvatar_descriptor_;
}

const Avatar_CS_PutOnAvatar& Avatar_CS_PutOnAvatar::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_avatar_2eproto();
  return *default_instance_;
}

Avatar_CS_PutOnAvatar* Avatar_CS_PutOnAvatar::default_instance_ = NULL;

Avatar_CS_PutOnAvatar* Avatar_CS_PutOnAvatar::New() const {
  return new Avatar_CS_PutOnAvatar;
}

void Avatar_CS_PutOnAvatar::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    avatar_id_ = 0;
    colour_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Avatar_CS_PutOnAvatar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 avatar_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &avatar_id_)));
          set_has_avatar_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_colour_id;
        break;
      }

      // optional int32 colour_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_colour_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &colour_id_)));
          set_has_colour_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Avatar_CS_PutOnAvatar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 avatar_id = 1;
  if (has_avatar_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->avatar_id(), output);
  }

  // optional int32 colour_id = 3;
  if (has_colour_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->colour_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Avatar_CS_PutOnAvatar::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 avatar_id = 1;
  if (has_avatar_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->avatar_id(), target);
  }

  // optional int32 colour_id = 3;
  if (has_colour_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->colour_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Avatar_CS_PutOnAvatar::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 avatar_id = 1;
    if (has_avatar_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->avatar_id());
    }

    // optional int32 colour_id = 3;
    if (has_colour_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->colour_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Avatar_CS_PutOnAvatar::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Avatar_CS_PutOnAvatar* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Avatar_CS_PutOnAvatar*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Avatar_CS_PutOnAvatar::MergeFrom(const Avatar_CS_PutOnAvatar& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_avatar_id()) {
      set_avatar_id(from.avatar_id());
    }
    if (from.has_colour_id()) {
      set_colour_id(from.colour_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Avatar_CS_PutOnAvatar::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Avatar_CS_PutOnAvatar::CopyFrom(const Avatar_CS_PutOnAvatar& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Avatar_CS_PutOnAvatar::IsInitialized() const {

  return true;
}

void Avatar_CS_PutOnAvatar::Swap(Avatar_CS_PutOnAvatar* other) {
  if (other != this) {
    std::swap(avatar_id_, other->avatar_id_);
    std::swap(colour_id_, other->colour_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Avatar_CS_PutOnAvatar::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Avatar_CS_PutOnAvatar_descriptor_;
  metadata.reflection = Avatar_CS_PutOnAvatar_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Avatar_SC_PutOnAvatar::kResultFieldNumber;
const int Avatar_SC_PutOnAvatar::kAvatarIdOnFieldNumber;
const int Avatar_SC_PutOnAvatar::kColourIdOnFieldNumber;
#endif  // !_MSC_VER

Avatar_SC_PutOnAvatar::Avatar_SC_PutOnAvatar()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Avatar_SC_PutOnAvatar::InitAsDefaultInstance() {
}

Avatar_SC_PutOnAvatar::Avatar_SC_PutOnAvatar(const Avatar_SC_PutOnAvatar& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Avatar_SC_PutOnAvatar::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  avatar_id_on_ = 0;
  colour_id_on_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Avatar_SC_PutOnAvatar::~Avatar_SC_PutOnAvatar() {
  SharedDtor();
}

void Avatar_SC_PutOnAvatar::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Avatar_SC_PutOnAvatar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Avatar_SC_PutOnAvatar::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Avatar_SC_PutOnAvatar_descriptor_;
}

const Avatar_SC_PutOnAvatar& Avatar_SC_PutOnAvatar::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_avatar_2eproto();
  return *default_instance_;
}

Avatar_SC_PutOnAvatar* Avatar_SC_PutOnAvatar::default_instance_ = NULL;

Avatar_SC_PutOnAvatar* Avatar_SC_PutOnAvatar::New() const {
  return new Avatar_SC_PutOnAvatar;
}

void Avatar_SC_PutOnAvatar::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    avatar_id_on_ = 0;
    colour_id_on_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Avatar_SC_PutOnAvatar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_avatar_id_on;
        break;
      }

      // optional int32 avatar_id_on = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_avatar_id_on:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &avatar_id_on_)));
          set_has_avatar_id_on();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_colour_id_on;
        break;
      }

      // optional int32 colour_id_on = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_colour_id_on:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &colour_id_on_)));
          set_has_colour_id_on();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Avatar_SC_PutOnAvatar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 avatar_id_on = 2;
  if (has_avatar_id_on()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->avatar_id_on(), output);
  }

  // optional int32 colour_id_on = 3;
  if (has_colour_id_on()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->colour_id_on(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Avatar_SC_PutOnAvatar::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 avatar_id_on = 2;
  if (has_avatar_id_on()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->avatar_id_on(), target);
  }

  // optional int32 colour_id_on = 3;
  if (has_colour_id_on()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->colour_id_on(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Avatar_SC_PutOnAvatar::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 avatar_id_on = 2;
    if (has_avatar_id_on()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->avatar_id_on());
    }

    // optional int32 colour_id_on = 3;
    if (has_colour_id_on()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->colour_id_on());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Avatar_SC_PutOnAvatar::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Avatar_SC_PutOnAvatar* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Avatar_SC_PutOnAvatar*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Avatar_SC_PutOnAvatar::MergeFrom(const Avatar_SC_PutOnAvatar& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_avatar_id_on()) {
      set_avatar_id_on(from.avatar_id_on());
    }
    if (from.has_colour_id_on()) {
      set_colour_id_on(from.colour_id_on());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Avatar_SC_PutOnAvatar::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Avatar_SC_PutOnAvatar::CopyFrom(const Avatar_SC_PutOnAvatar& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Avatar_SC_PutOnAvatar::IsInitialized() const {

  return true;
}

void Avatar_SC_PutOnAvatar::Swap(Avatar_SC_PutOnAvatar* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(avatar_id_on_, other->avatar_id_on_);
    std::swap(colour_id_on_, other->colour_id_on_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Avatar_SC_PutOnAvatar::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Avatar_SC_PutOnAvatar_descriptor_;
  metadata.reflection = Avatar_SC_PutOnAvatar_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Avatar_CS_GetOffAvatar::kAvatarIdFieldNumber;
#endif  // !_MSC_VER

Avatar_CS_GetOffAvatar::Avatar_CS_GetOffAvatar()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Avatar_CS_GetOffAvatar::InitAsDefaultInstance() {
}

Avatar_CS_GetOffAvatar::Avatar_CS_GetOffAvatar(const Avatar_CS_GetOffAvatar& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Avatar_CS_GetOffAvatar::SharedCtor() {
  _cached_size_ = 0;
  avatar_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Avatar_CS_GetOffAvatar::~Avatar_CS_GetOffAvatar() {
  SharedDtor();
}

void Avatar_CS_GetOffAvatar::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Avatar_CS_GetOffAvatar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Avatar_CS_GetOffAvatar::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Avatar_CS_GetOffAvatar_descriptor_;
}

const Avatar_CS_GetOffAvatar& Avatar_CS_GetOffAvatar::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_avatar_2eproto();
  return *default_instance_;
}

Avatar_CS_GetOffAvatar* Avatar_CS_GetOffAvatar::default_instance_ = NULL;

Avatar_CS_GetOffAvatar* Avatar_CS_GetOffAvatar::New() const {
  return new Avatar_CS_GetOffAvatar;
}

void Avatar_CS_GetOffAvatar::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    avatar_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Avatar_CS_GetOffAvatar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 avatar_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &avatar_id_)));
          set_has_avatar_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Avatar_CS_GetOffAvatar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 avatar_id = 1;
  if (has_avatar_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->avatar_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Avatar_CS_GetOffAvatar::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 avatar_id = 1;
  if (has_avatar_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->avatar_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Avatar_CS_GetOffAvatar::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 avatar_id = 1;
    if (has_avatar_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->avatar_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Avatar_CS_GetOffAvatar::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Avatar_CS_GetOffAvatar* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Avatar_CS_GetOffAvatar*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Avatar_CS_GetOffAvatar::MergeFrom(const Avatar_CS_GetOffAvatar& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_avatar_id()) {
      set_avatar_id(from.avatar_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Avatar_CS_GetOffAvatar::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Avatar_CS_GetOffAvatar::CopyFrom(const Avatar_CS_GetOffAvatar& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Avatar_CS_GetOffAvatar::IsInitialized() const {

  return true;
}

void Avatar_CS_GetOffAvatar::Swap(Avatar_CS_GetOffAvatar* other) {
  if (other != this) {
    std::swap(avatar_id_, other->avatar_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Avatar_CS_GetOffAvatar::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Avatar_CS_GetOffAvatar_descriptor_;
  metadata.reflection = Avatar_CS_GetOffAvatar_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Avatar_SC_GetOffAvatar::kResultFieldNumber;
const int Avatar_SC_GetOffAvatar::kAvatarIdFieldNumber;
#endif  // !_MSC_VER

Avatar_SC_GetOffAvatar::Avatar_SC_GetOffAvatar()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Avatar_SC_GetOffAvatar::InitAsDefaultInstance() {
}

Avatar_SC_GetOffAvatar::Avatar_SC_GetOffAvatar(const Avatar_SC_GetOffAvatar& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Avatar_SC_GetOffAvatar::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  avatar_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Avatar_SC_GetOffAvatar::~Avatar_SC_GetOffAvatar() {
  SharedDtor();
}

void Avatar_SC_GetOffAvatar::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Avatar_SC_GetOffAvatar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Avatar_SC_GetOffAvatar::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Avatar_SC_GetOffAvatar_descriptor_;
}

const Avatar_SC_GetOffAvatar& Avatar_SC_GetOffAvatar::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_avatar_2eproto();
  return *default_instance_;
}

Avatar_SC_GetOffAvatar* Avatar_SC_GetOffAvatar::default_instance_ = NULL;

Avatar_SC_GetOffAvatar* Avatar_SC_GetOffAvatar::New() const {
  return new Avatar_SC_GetOffAvatar;
}

void Avatar_SC_GetOffAvatar::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    avatar_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Avatar_SC_GetOffAvatar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_avatar_id;
        break;
      }

      // optional int32 avatar_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_avatar_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &avatar_id_)));
          set_has_avatar_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Avatar_SC_GetOffAvatar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 avatar_id = 2;
  if (has_avatar_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->avatar_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Avatar_SC_GetOffAvatar::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 avatar_id = 2;
  if (has_avatar_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->avatar_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Avatar_SC_GetOffAvatar::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 avatar_id = 2;
    if (has_avatar_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->avatar_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Avatar_SC_GetOffAvatar::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Avatar_SC_GetOffAvatar* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Avatar_SC_GetOffAvatar*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Avatar_SC_GetOffAvatar::MergeFrom(const Avatar_SC_GetOffAvatar& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_avatar_id()) {
      set_avatar_id(from.avatar_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Avatar_SC_GetOffAvatar::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Avatar_SC_GetOffAvatar::CopyFrom(const Avatar_SC_GetOffAvatar& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Avatar_SC_GetOffAvatar::IsInitialized() const {

  return true;
}

void Avatar_SC_GetOffAvatar::Swap(Avatar_SC_GetOffAvatar* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(avatar_id_, other->avatar_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Avatar_SC_GetOffAvatar::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Avatar_SC_GetOffAvatar_descriptor_;
  metadata.reflection = Avatar_SC_GetOffAvatar_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Avatar_CS_ActivateColour::kAvatarIdFieldNumber;
const int Avatar_CS_ActivateColour::kColourIdFieldNumber;
#endif  // !_MSC_VER

Avatar_CS_ActivateColour::Avatar_CS_ActivateColour()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Avatar_CS_ActivateColour::InitAsDefaultInstance() {
}

Avatar_CS_ActivateColour::Avatar_CS_ActivateColour(const Avatar_CS_ActivateColour& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Avatar_CS_ActivateColour::SharedCtor() {
  _cached_size_ = 0;
  avatar_id_ = 0;
  colour_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Avatar_CS_ActivateColour::~Avatar_CS_ActivateColour() {
  SharedDtor();
}

void Avatar_CS_ActivateColour::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Avatar_CS_ActivateColour::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Avatar_CS_ActivateColour::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Avatar_CS_ActivateColour_descriptor_;
}

const Avatar_CS_ActivateColour& Avatar_CS_ActivateColour::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_avatar_2eproto();
  return *default_instance_;
}

Avatar_CS_ActivateColour* Avatar_CS_ActivateColour::default_instance_ = NULL;

Avatar_CS_ActivateColour* Avatar_CS_ActivateColour::New() const {
  return new Avatar_CS_ActivateColour;
}

void Avatar_CS_ActivateColour::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    avatar_id_ = 0;
    colour_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Avatar_CS_ActivateColour::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 avatar_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &avatar_id_)));
          set_has_avatar_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_colour_id;
        break;
      }

      // optional int32 colour_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_colour_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &colour_id_)));
          set_has_colour_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Avatar_CS_ActivateColour::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 avatar_id = 1;
  if (has_avatar_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->avatar_id(), output);
  }

  // optional int32 colour_id = 2;
  if (has_colour_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->colour_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Avatar_CS_ActivateColour::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 avatar_id = 1;
  if (has_avatar_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->avatar_id(), target);
  }

  // optional int32 colour_id = 2;
  if (has_colour_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->colour_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Avatar_CS_ActivateColour::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 avatar_id = 1;
    if (has_avatar_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->avatar_id());
    }

    // optional int32 colour_id = 2;
    if (has_colour_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->colour_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Avatar_CS_ActivateColour::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Avatar_CS_ActivateColour* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Avatar_CS_ActivateColour*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Avatar_CS_ActivateColour::MergeFrom(const Avatar_CS_ActivateColour& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_avatar_id()) {
      set_avatar_id(from.avatar_id());
    }
    if (from.has_colour_id()) {
      set_colour_id(from.colour_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Avatar_CS_ActivateColour::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Avatar_CS_ActivateColour::CopyFrom(const Avatar_CS_ActivateColour& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Avatar_CS_ActivateColour::IsInitialized() const {

  return true;
}

void Avatar_CS_ActivateColour::Swap(Avatar_CS_ActivateColour* other) {
  if (other != this) {
    std::swap(avatar_id_, other->avatar_id_);
    std::swap(colour_id_, other->colour_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Avatar_CS_ActivateColour::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Avatar_CS_ActivateColour_descriptor_;
  metadata.reflection = Avatar_CS_ActivateColour_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Avatar_SC_ActivateColour::kResultFieldNumber;
const int Avatar_SC_ActivateColour::kAvatarIdFieldNumber;
const int Avatar_SC_ActivateColour::kColourIdFieldNumber;
#endif  // !_MSC_VER

Avatar_SC_ActivateColour::Avatar_SC_ActivateColour()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Avatar_SC_ActivateColour::InitAsDefaultInstance() {
}

Avatar_SC_ActivateColour::Avatar_SC_ActivateColour(const Avatar_SC_ActivateColour& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Avatar_SC_ActivateColour::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  avatar_id_ = 0;
  colour_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Avatar_SC_ActivateColour::~Avatar_SC_ActivateColour() {
  SharedDtor();
}

void Avatar_SC_ActivateColour::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Avatar_SC_ActivateColour::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Avatar_SC_ActivateColour::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Avatar_SC_ActivateColour_descriptor_;
}

const Avatar_SC_ActivateColour& Avatar_SC_ActivateColour::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_avatar_2eproto();
  return *default_instance_;
}

Avatar_SC_ActivateColour* Avatar_SC_ActivateColour::default_instance_ = NULL;

Avatar_SC_ActivateColour* Avatar_SC_ActivateColour::New() const {
  return new Avatar_SC_ActivateColour;
}

void Avatar_SC_ActivateColour::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    avatar_id_ = 0;
    colour_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Avatar_SC_ActivateColour::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_avatar_id;
        break;
      }

      // optional int32 avatar_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_avatar_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &avatar_id_)));
          set_has_avatar_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_colour_id;
        break;
      }

      // optional int32 colour_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_colour_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &colour_id_)));
          set_has_colour_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Avatar_SC_ActivateColour::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 avatar_id = 2;
  if (has_avatar_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->avatar_id(), output);
  }

  // optional int32 colour_id = 3;
  if (has_colour_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->colour_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Avatar_SC_ActivateColour::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 avatar_id = 2;
  if (has_avatar_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->avatar_id(), target);
  }

  // optional int32 colour_id = 3;
  if (has_colour_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->colour_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Avatar_SC_ActivateColour::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 avatar_id = 2;
    if (has_avatar_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->avatar_id());
    }

    // optional int32 colour_id = 3;
    if (has_colour_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->colour_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Avatar_SC_ActivateColour::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Avatar_SC_ActivateColour* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Avatar_SC_ActivateColour*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Avatar_SC_ActivateColour::MergeFrom(const Avatar_SC_ActivateColour& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_avatar_id()) {
      set_avatar_id(from.avatar_id());
    }
    if (from.has_colour_id()) {
      set_colour_id(from.colour_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Avatar_SC_ActivateColour::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Avatar_SC_ActivateColour::CopyFrom(const Avatar_SC_ActivateColour& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Avatar_SC_ActivateColour::IsInitialized() const {

  return true;
}

void Avatar_SC_ActivateColour::Swap(Avatar_SC_ActivateColour* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(avatar_id_, other->avatar_id_);
    std::swap(colour_id_, other->colour_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Avatar_SC_ActivateColour::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Avatar_SC_ActivateColour_descriptor_;
  metadata.reflection = Avatar_SC_ActivateColour_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Avatar_CS_SelectColour::kAvatarIdFieldNumber;
const int Avatar_CS_SelectColour::kColourIdFieldNumber;
#endif  // !_MSC_VER

Avatar_CS_SelectColour::Avatar_CS_SelectColour()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Avatar_CS_SelectColour::InitAsDefaultInstance() {
}

Avatar_CS_SelectColour::Avatar_CS_SelectColour(const Avatar_CS_SelectColour& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Avatar_CS_SelectColour::SharedCtor() {
  _cached_size_ = 0;
  avatar_id_ = 0;
  colour_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Avatar_CS_SelectColour::~Avatar_CS_SelectColour() {
  SharedDtor();
}

void Avatar_CS_SelectColour::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Avatar_CS_SelectColour::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Avatar_CS_SelectColour::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Avatar_CS_SelectColour_descriptor_;
}

const Avatar_CS_SelectColour& Avatar_CS_SelectColour::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_avatar_2eproto();
  return *default_instance_;
}

Avatar_CS_SelectColour* Avatar_CS_SelectColour::default_instance_ = NULL;

Avatar_CS_SelectColour* Avatar_CS_SelectColour::New() const {
  return new Avatar_CS_SelectColour;
}

void Avatar_CS_SelectColour::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    avatar_id_ = 0;
    colour_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Avatar_CS_SelectColour::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 avatar_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &avatar_id_)));
          set_has_avatar_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_colour_id;
        break;
      }

      // optional int32 colour_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_colour_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &colour_id_)));
          set_has_colour_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Avatar_CS_SelectColour::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 avatar_id = 1;
  if (has_avatar_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->avatar_id(), output);
  }

  // optional int32 colour_id = 2;
  if (has_colour_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->colour_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Avatar_CS_SelectColour::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 avatar_id = 1;
  if (has_avatar_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->avatar_id(), target);
  }

  // optional int32 colour_id = 2;
  if (has_colour_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->colour_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Avatar_CS_SelectColour::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 avatar_id = 1;
    if (has_avatar_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->avatar_id());
    }

    // optional int32 colour_id = 2;
    if (has_colour_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->colour_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Avatar_CS_SelectColour::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Avatar_CS_SelectColour* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Avatar_CS_SelectColour*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Avatar_CS_SelectColour::MergeFrom(const Avatar_CS_SelectColour& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_avatar_id()) {
      set_avatar_id(from.avatar_id());
    }
    if (from.has_colour_id()) {
      set_colour_id(from.colour_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Avatar_CS_SelectColour::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Avatar_CS_SelectColour::CopyFrom(const Avatar_CS_SelectColour& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Avatar_CS_SelectColour::IsInitialized() const {

  return true;
}

void Avatar_CS_SelectColour::Swap(Avatar_CS_SelectColour* other) {
  if (other != this) {
    std::swap(avatar_id_, other->avatar_id_);
    std::swap(colour_id_, other->colour_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Avatar_CS_SelectColour::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Avatar_CS_SelectColour_descriptor_;
  metadata.reflection = Avatar_CS_SelectColour_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Avatar_SC_SelectColour::kResultFieldNumber;
const int Avatar_SC_SelectColour::kAvatarIdFieldNumber;
const int Avatar_SC_SelectColour::kColourIdFieldNumber;
#endif  // !_MSC_VER

Avatar_SC_SelectColour::Avatar_SC_SelectColour()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Avatar_SC_SelectColour::InitAsDefaultInstance() {
}

Avatar_SC_SelectColour::Avatar_SC_SelectColour(const Avatar_SC_SelectColour& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Avatar_SC_SelectColour::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  avatar_id_ = 0;
  colour_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Avatar_SC_SelectColour::~Avatar_SC_SelectColour() {
  SharedDtor();
}

void Avatar_SC_SelectColour::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Avatar_SC_SelectColour::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Avatar_SC_SelectColour::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Avatar_SC_SelectColour_descriptor_;
}

const Avatar_SC_SelectColour& Avatar_SC_SelectColour::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_avatar_2eproto();
  return *default_instance_;
}

Avatar_SC_SelectColour* Avatar_SC_SelectColour::default_instance_ = NULL;

Avatar_SC_SelectColour* Avatar_SC_SelectColour::New() const {
  return new Avatar_SC_SelectColour;
}

void Avatar_SC_SelectColour::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    avatar_id_ = 0;
    colour_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Avatar_SC_SelectColour::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_avatar_id;
        break;
      }

      // optional int32 avatar_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_avatar_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &avatar_id_)));
          set_has_avatar_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_colour_id;
        break;
      }

      // optional int32 colour_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_colour_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &colour_id_)));
          set_has_colour_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Avatar_SC_SelectColour::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 avatar_id = 2;
  if (has_avatar_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->avatar_id(), output);
  }

  // optional int32 colour_id = 3;
  if (has_colour_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->colour_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Avatar_SC_SelectColour::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 avatar_id = 2;
  if (has_avatar_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->avatar_id(), target);
  }

  // optional int32 colour_id = 3;
  if (has_colour_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->colour_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Avatar_SC_SelectColour::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 avatar_id = 2;
    if (has_avatar_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->avatar_id());
    }

    // optional int32 colour_id = 3;
    if (has_colour_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->colour_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Avatar_SC_SelectColour::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Avatar_SC_SelectColour* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Avatar_SC_SelectColour*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Avatar_SC_SelectColour::MergeFrom(const Avatar_SC_SelectColour& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_avatar_id()) {
      set_avatar_id(from.avatar_id());
    }
    if (from.has_colour_id()) {
      set_colour_id(from.colour_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Avatar_SC_SelectColour::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Avatar_SC_SelectColour::CopyFrom(const Avatar_SC_SelectColour& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Avatar_SC_SelectColour::IsInitialized() const {

  return true;
}

void Avatar_SC_SelectColour::Swap(Avatar_SC_SelectColour* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(avatar_id_, other->avatar_id_);
    std::swap(colour_id_, other->colour_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Avatar_SC_SelectColour::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Avatar_SC_SelectColour_descriptor_;
  metadata.reflection = Avatar_SC_SelectColour_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace proto

// @@protoc_insertion_point(global_scope)
