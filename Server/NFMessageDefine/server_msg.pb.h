// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server_msg.proto

#ifndef PROTOBUF_INCLUDED_server_5fmsg_2eproto
#define PROTOBUF_INCLUDED_server_5fmsg_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_server_5fmsg_2eproto 

namespace protobuf_server_5fmsg_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_server_5fmsg_2eproto
namespace NFMsg {
class ServerInfoReport;
class ServerInfoReportDefaultTypeInternal;
extern ServerInfoReportDefaultTypeInternal _ServerInfoReport_default_instance_;
class ServerInfoReportList;
class ServerInfoReportListDefaultTypeInternal;
extern ServerInfoReportListDefaultTypeInternal _ServerInfoReportList_default_instance_;
}  // namespace NFMsg
namespace google {
namespace protobuf {
template<> ::NFMsg::ServerInfoReport* Arena::CreateMaybeMessage<::NFMsg::ServerInfoReport>(Arena*);
template<> ::NFMsg::ServerInfoReportList* Arena::CreateMaybeMessage<::NFMsg::ServerInfoReportList>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace NFMsg {

enum EServerState {
  EST_CRASH = 0,
  EST_NARMAL = 1,
  EST_BUSY = 2,
  EST_FIRE = 3,
  EST_MAINTEN = 4
};
bool EServerState_IsValid(int value);
const EServerState EServerState_MIN = EST_CRASH;
const EServerState EServerState_MAX = EST_MAINTEN;
const int EServerState_ARRAYSIZE = EServerState_MAX + 1;

const ::google::protobuf::EnumDescriptor* EServerState_descriptor();
inline const ::std::string& EServerState_Name(EServerState value) {
  return ::google::protobuf::internal::NameOfEnum(
    EServerState_descriptor(), value);
}
inline bool EServerState_Parse(
    const ::std::string& name, EServerState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EServerState>(
    EServerState_descriptor(), name, value);
}
// ===================================================================

class ServerInfoReport : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.ServerInfoReport) */ {
 public:
  ServerInfoReport();
  virtual ~ServerInfoReport();

  ServerInfoReport(const ServerInfoReport& from);

  inline ServerInfoReport& operator=(const ServerInfoReport& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServerInfoReport(ServerInfoReport&& from) noexcept
    : ServerInfoReport() {
    *this = ::std::move(from);
  }

  inline ServerInfoReport& operator=(ServerInfoReport&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerInfoReport& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerInfoReport* internal_default_instance() {
    return reinterpret_cast<const ServerInfoReport*>(
               &_ServerInfoReport_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ServerInfoReport* other);
  friend void swap(ServerInfoReport& a, ServerInfoReport& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServerInfoReport* New() const final {
    return CreateMaybeMessage<ServerInfoReport>(NULL);
  }

  ServerInfoReport* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ServerInfoReport>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ServerInfoReport& from);
  void MergeFrom(const ServerInfoReport& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerInfoReport* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string server_name = 2;
  bool has_server_name() const;
  void clear_server_name();
  static const int kServerNameFieldNumber = 2;
  const ::std::string& server_name() const;
  void set_server_name(const ::std::string& value);
  #if LANG_CXX11
  void set_server_name(::std::string&& value);
  #endif
  void set_server_name(const char* value);
  void set_server_name(const char* value, size_t size);
  ::std::string* mutable_server_name();
  ::std::string* release_server_name();
  void set_allocated_server_name(::std::string* server_name);

  // optional string server_ip = 3;
  bool has_server_ip() const;
  void clear_server_ip();
  static const int kServerIpFieldNumber = 3;
  const ::std::string& server_ip() const;
  void set_server_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_server_ip(::std::string&& value);
  #endif
  void set_server_ip(const char* value);
  void set_server_ip(const char* value, size_t size);
  ::std::string* mutable_server_ip();
  ::std::string* release_server_ip();
  void set_allocated_server_ip(::std::string* server_ip);

  // optional int32 server_id = 1;
  bool has_server_id() const;
  void clear_server_id();
  static const int kServerIdFieldNumber = 1;
  ::google::protobuf::int32 server_id() const;
  void set_server_id(::google::protobuf::int32 value);

  // optional int32 server_port = 4;
  bool has_server_port() const;
  void clear_server_port();
  static const int kServerPortFieldNumber = 4;
  ::google::protobuf::int32 server_port() const;
  void set_server_port(::google::protobuf::int32 value);

  // optional int32 server_max_online = 5;
  bool has_server_max_online() const;
  void clear_server_max_online();
  static const int kServerMaxOnlineFieldNumber = 5;
  ::google::protobuf::int32 server_max_online() const;
  void set_server_max_online(::google::protobuf::int32 value);

  // optional int32 server_cur_count = 6;
  bool has_server_cur_count() const;
  void clear_server_cur_count();
  static const int kServerCurCountFieldNumber = 6;
  ::google::protobuf::int32 server_cur_count() const;
  void set_server_cur_count(::google::protobuf::int32 value);

  // optional uint32 server_state = 7;
  bool has_server_state() const;
  void clear_server_state();
  static const int kServerStateFieldNumber = 7;
  ::google::protobuf::uint32 server_state() const;
  void set_server_state(::google::protobuf::uint32 value);

  // optional int32 server_type = 8;
  bool has_server_type() const;
  void clear_server_type();
  static const int kServerTypeFieldNumber = 8;
  ::google::protobuf::int32 server_type() const;
  void set_server_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFMsg.ServerInfoReport)
 private:
  void set_has_server_id();
  void clear_has_server_id();
  void set_has_server_name();
  void clear_has_server_name();
  void set_has_server_ip();
  void clear_has_server_ip();
  void set_has_server_port();
  void clear_has_server_port();
  void set_has_server_max_online();
  void clear_has_server_max_online();
  void set_has_server_cur_count();
  void clear_has_server_cur_count();
  void set_has_server_state();
  void clear_has_server_state();
  void set_has_server_type();
  void clear_has_server_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr server_name_;
  ::google::protobuf::internal::ArenaStringPtr server_ip_;
  ::google::protobuf::int32 server_id_;
  ::google::protobuf::int32 server_port_;
  ::google::protobuf::int32 server_max_online_;
  ::google::protobuf::int32 server_cur_count_;
  ::google::protobuf::uint32 server_state_;
  ::google::protobuf::int32 server_type_;
  friend struct ::protobuf_server_5fmsg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ServerInfoReportList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.ServerInfoReportList) */ {
 public:
  ServerInfoReportList();
  virtual ~ServerInfoReportList();

  ServerInfoReportList(const ServerInfoReportList& from);

  inline ServerInfoReportList& operator=(const ServerInfoReportList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServerInfoReportList(ServerInfoReportList&& from) noexcept
    : ServerInfoReportList() {
    *this = ::std::move(from);
  }

  inline ServerInfoReportList& operator=(ServerInfoReportList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerInfoReportList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerInfoReportList* internal_default_instance() {
    return reinterpret_cast<const ServerInfoReportList*>(
               &_ServerInfoReportList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ServerInfoReportList* other);
  friend void swap(ServerInfoReportList& a, ServerInfoReportList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServerInfoReportList* New() const final {
    return CreateMaybeMessage<ServerInfoReportList>(NULL);
  }

  ServerInfoReportList* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ServerInfoReportList>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ServerInfoReportList& from);
  void MergeFrom(const ServerInfoReportList& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerInfoReportList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .NFMsg.ServerInfoReport server_list = 1;
  int server_list_size() const;
  void clear_server_list();
  static const int kServerListFieldNumber = 1;
  ::NFMsg::ServerInfoReport* mutable_server_list(int index);
  ::google::protobuf::RepeatedPtrField< ::NFMsg::ServerInfoReport >*
      mutable_server_list();
  const ::NFMsg::ServerInfoReport& server_list(int index) const;
  ::NFMsg::ServerInfoReport* add_server_list();
  const ::google::protobuf::RepeatedPtrField< ::NFMsg::ServerInfoReport >&
      server_list() const;

  // @@protoc_insertion_point(class_scope:NFMsg.ServerInfoReportList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::NFMsg::ServerInfoReport > server_list_;
  friend struct ::protobuf_server_5fmsg_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ServerInfoReport

// optional int32 server_id = 1;
inline bool ServerInfoReport::has_server_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ServerInfoReport::set_has_server_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ServerInfoReport::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ServerInfoReport::clear_server_id() {
  server_id_ = 0;
  clear_has_server_id();
}
inline ::google::protobuf::int32 ServerInfoReport::server_id() const {
  // @@protoc_insertion_point(field_get:NFMsg.ServerInfoReport.server_id)
  return server_id_;
}
inline void ServerInfoReport::set_server_id(::google::protobuf::int32 value) {
  set_has_server_id();
  server_id_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.ServerInfoReport.server_id)
}

// optional string server_name = 2;
inline bool ServerInfoReport::has_server_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerInfoReport::set_has_server_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServerInfoReport::clear_has_server_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServerInfoReport::clear_server_name() {
  server_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_server_name();
}
inline const ::std::string& ServerInfoReport::server_name() const {
  // @@protoc_insertion_point(field_get:NFMsg.ServerInfoReport.server_name)
  return server_name_.GetNoArena();
}
inline void ServerInfoReport::set_server_name(const ::std::string& value) {
  set_has_server_name();
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.ServerInfoReport.server_name)
}
#if LANG_CXX11
inline void ServerInfoReport::set_server_name(::std::string&& value) {
  set_has_server_name();
  server_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.ServerInfoReport.server_name)
}
#endif
inline void ServerInfoReport::set_server_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_server_name();
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.ServerInfoReport.server_name)
}
inline void ServerInfoReport::set_server_name(const char* value, size_t size) {
  set_has_server_name();
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.ServerInfoReport.server_name)
}
inline ::std::string* ServerInfoReport::mutable_server_name() {
  set_has_server_name();
  // @@protoc_insertion_point(field_mutable:NFMsg.ServerInfoReport.server_name)
  return server_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerInfoReport::release_server_name() {
  // @@protoc_insertion_point(field_release:NFMsg.ServerInfoReport.server_name)
  if (!has_server_name()) {
    return NULL;
  }
  clear_has_server_name();
  return server_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerInfoReport::set_allocated_server_name(::std::string* server_name) {
  if (server_name != NULL) {
    set_has_server_name();
  } else {
    clear_has_server_name();
  }
  server_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_name);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ServerInfoReport.server_name)
}

// optional string server_ip = 3;
inline bool ServerInfoReport::has_server_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServerInfoReport::set_has_server_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServerInfoReport::clear_has_server_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServerInfoReport::clear_server_ip() {
  server_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_server_ip();
}
inline const ::std::string& ServerInfoReport::server_ip() const {
  // @@protoc_insertion_point(field_get:NFMsg.ServerInfoReport.server_ip)
  return server_ip_.GetNoArena();
}
inline void ServerInfoReport::set_server_ip(const ::std::string& value) {
  set_has_server_ip();
  server_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.ServerInfoReport.server_ip)
}
#if LANG_CXX11
inline void ServerInfoReport::set_server_ip(::std::string&& value) {
  set_has_server_ip();
  server_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.ServerInfoReport.server_ip)
}
#endif
inline void ServerInfoReport::set_server_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_server_ip();
  server_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.ServerInfoReport.server_ip)
}
inline void ServerInfoReport::set_server_ip(const char* value, size_t size) {
  set_has_server_ip();
  server_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.ServerInfoReport.server_ip)
}
inline ::std::string* ServerInfoReport::mutable_server_ip() {
  set_has_server_ip();
  // @@protoc_insertion_point(field_mutable:NFMsg.ServerInfoReport.server_ip)
  return server_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerInfoReport::release_server_ip() {
  // @@protoc_insertion_point(field_release:NFMsg.ServerInfoReport.server_ip)
  if (!has_server_ip()) {
    return NULL;
  }
  clear_has_server_ip();
  return server_ip_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerInfoReport::set_allocated_server_ip(::std::string* server_ip) {
  if (server_ip != NULL) {
    set_has_server_ip();
  } else {
    clear_has_server_ip();
  }
  server_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_ip);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ServerInfoReport.server_ip)
}

// optional int32 server_port = 4;
inline bool ServerInfoReport::has_server_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ServerInfoReport::set_has_server_port() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ServerInfoReport::clear_has_server_port() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ServerInfoReport::clear_server_port() {
  server_port_ = 0;
  clear_has_server_port();
}
inline ::google::protobuf::int32 ServerInfoReport::server_port() const {
  // @@protoc_insertion_point(field_get:NFMsg.ServerInfoReport.server_port)
  return server_port_;
}
inline void ServerInfoReport::set_server_port(::google::protobuf::int32 value) {
  set_has_server_port();
  server_port_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.ServerInfoReport.server_port)
}

// optional int32 server_max_online = 5;
inline bool ServerInfoReport::has_server_max_online() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ServerInfoReport::set_has_server_max_online() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ServerInfoReport::clear_has_server_max_online() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ServerInfoReport::clear_server_max_online() {
  server_max_online_ = 0;
  clear_has_server_max_online();
}
inline ::google::protobuf::int32 ServerInfoReport::server_max_online() const {
  // @@protoc_insertion_point(field_get:NFMsg.ServerInfoReport.server_max_online)
  return server_max_online_;
}
inline void ServerInfoReport::set_server_max_online(::google::protobuf::int32 value) {
  set_has_server_max_online();
  server_max_online_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.ServerInfoReport.server_max_online)
}

// optional int32 server_cur_count = 6;
inline bool ServerInfoReport::has_server_cur_count() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ServerInfoReport::set_has_server_cur_count() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ServerInfoReport::clear_has_server_cur_count() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ServerInfoReport::clear_server_cur_count() {
  server_cur_count_ = 0;
  clear_has_server_cur_count();
}
inline ::google::protobuf::int32 ServerInfoReport::server_cur_count() const {
  // @@protoc_insertion_point(field_get:NFMsg.ServerInfoReport.server_cur_count)
  return server_cur_count_;
}
inline void ServerInfoReport::set_server_cur_count(::google::protobuf::int32 value) {
  set_has_server_cur_count();
  server_cur_count_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.ServerInfoReport.server_cur_count)
}

// optional uint32 server_state = 7;
inline bool ServerInfoReport::has_server_state() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ServerInfoReport::set_has_server_state() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ServerInfoReport::clear_has_server_state() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ServerInfoReport::clear_server_state() {
  server_state_ = 0u;
  clear_has_server_state();
}
inline ::google::protobuf::uint32 ServerInfoReport::server_state() const {
  // @@protoc_insertion_point(field_get:NFMsg.ServerInfoReport.server_state)
  return server_state_;
}
inline void ServerInfoReport::set_server_state(::google::protobuf::uint32 value) {
  set_has_server_state();
  server_state_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.ServerInfoReport.server_state)
}

// optional int32 server_type = 8;
inline bool ServerInfoReport::has_server_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ServerInfoReport::set_has_server_type() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ServerInfoReport::clear_has_server_type() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ServerInfoReport::clear_server_type() {
  server_type_ = 0;
  clear_has_server_type();
}
inline ::google::protobuf::int32 ServerInfoReport::server_type() const {
  // @@protoc_insertion_point(field_get:NFMsg.ServerInfoReport.server_type)
  return server_type_;
}
inline void ServerInfoReport::set_server_type(::google::protobuf::int32 value) {
  set_has_server_type();
  server_type_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.ServerInfoReport.server_type)
}

// -------------------------------------------------------------------

// ServerInfoReportList

// repeated .NFMsg.ServerInfoReport server_list = 1;
inline int ServerInfoReportList::server_list_size() const {
  return server_list_.size();
}
inline void ServerInfoReportList::clear_server_list() {
  server_list_.Clear();
}
inline ::NFMsg::ServerInfoReport* ServerInfoReportList::mutable_server_list(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.ServerInfoReportList.server_list)
  return server_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::NFMsg::ServerInfoReport >*
ServerInfoReportList::mutable_server_list() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.ServerInfoReportList.server_list)
  return &server_list_;
}
inline const ::NFMsg::ServerInfoReport& ServerInfoReportList::server_list(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.ServerInfoReportList.server_list)
  return server_list_.Get(index);
}
inline ::NFMsg::ServerInfoReport* ServerInfoReportList::add_server_list() {
  // @@protoc_insertion_point(field_add:NFMsg.ServerInfoReportList.server_list)
  return server_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NFMsg::ServerInfoReport >&
ServerInfoReportList::server_list() const {
  // @@protoc_insertion_point(field_list:NFMsg.ServerInfoReportList.server_list)
  return server_list_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace NFMsg

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::NFMsg::EServerState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFMsg::EServerState>() {
  return ::NFMsg::EServerState_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_server_5fmsg_2eproto
