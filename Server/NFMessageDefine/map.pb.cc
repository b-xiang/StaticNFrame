// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: map.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "map.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace message {

namespace {

const ::google::protobuf::Descriptor* Map_SC_NavPaths_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Map_SC_NavPaths_reflection_ = NULL;
const ::google::protobuf::Descriptor* Map_CS_PlayerPositionSync_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Map_CS_PlayerPositionSync_reflection_ = NULL;
const ::google::protobuf::Descriptor* Map_SC_AddSyncPlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Map_SC_AddSyncPlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* Map_SC_ChangeTttle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Map_SC_ChangeTttle_reflection_ = NULL;
const ::google::protobuf::Descriptor* Map_SC_ChangeEquip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Map_SC_ChangeEquip_reflection_ = NULL;
const ::google::protobuf::Descriptor* Map_SC_DelSync_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Map_SC_DelSync_reflection_ = NULL;
const ::google::protobuf::Descriptor* Map_SC_Move_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Map_SC_Move_reflection_ = NULL;
const ::google::protobuf::Descriptor* Map_SC_CheckPosition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Map_SC_CheckPosition_reflection_ = NULL;
const ::google::protobuf::Descriptor* Map_SC_AddSyncMonster_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Map_SC_AddSyncMonster_reflection_ = NULL;
const ::google::protobuf::Descriptor* Map_CS_SpeelBegin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Map_CS_SpeelBegin_reflection_ = NULL;
const ::google::protobuf::Descriptor* Map_CS_SpeelEnd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Map_CS_SpeelEnd_reflection_ = NULL;
const ::google::protobuf::Descriptor* Map_SC_SpeelBegin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Map_SC_SpeelBegin_reflection_ = NULL;
const ::google::protobuf::Descriptor* Map_CS_ClientLoadOK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Map_CS_ClientLoadOK_reflection_ = NULL;
const ::google::protobuf::Descriptor* Map_SC_ChangeMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Map_SC_ChangeMap_reflection_ = NULL;
const ::google::protobuf::Descriptor* Map_CS_ChangeMapOK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Map_CS_ChangeMapOK_reflection_ = NULL;
const ::google::protobuf::Descriptor* Map_CS_ReqChangeMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Map_CS_ReqChangeMap_reflection_ = NULL;
const ::google::protobuf::Descriptor* Map_CS_EnterSceneArea_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Map_CS_EnterSceneArea_reflection_ = NULL;
const ::google::protobuf::Descriptor* Map_CS_LeaveSceneArea_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Map_CS_LeaveSceneArea_reflection_ = NULL;
const ::google::protobuf::Descriptor* Map_SC_TriggerEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Map_SC_TriggerEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* Map_CS_TriggerEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Map_CS_TriggerEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* Map_SC_SyncAreaStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Map_SC_SyncAreaStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* Map_SC_MonsterStopMove_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Map_SC_MonsterStopMove_reflection_ = NULL;
const ::google::protobuf::Descriptor* Map_CS_TeamerLocationSyn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Map_CS_TeamerLocationSyn_reflection_ = NULL;
const ::google::protobuf::Descriptor* Location_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Location_reflection_ = NULL;
const ::google::protobuf::Descriptor* Map_SC_TeamerLocationSyn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Map_SC_TeamerLocationSyn_reflection_ = NULL;
const ::google::protobuf::Descriptor* Map_CS_StartParkour_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Map_CS_StartParkour_reflection_ = NULL;
const ::google::protobuf::Descriptor* Map_CS_EndParkour_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Map_CS_EndParkour_reflection_ = NULL;
const ::google::protobuf::Descriptor* Map_CS_PickUpChest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Map_CS_PickUpChest_reflection_ = NULL;
const ::google::protobuf::Descriptor* Map_SC_PickUpChest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Map_SC_PickUpChest_reflection_ = NULL;
const ::google::protobuf::Descriptor* Map_SC_StartParkour_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Map_SC_StartParkour_reflection_ = NULL;
const ::google::protobuf::Descriptor* Map_SC_PlayerCheckPosition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Map_SC_PlayerCheckPosition_reflection_ = NULL;
const ::google::protobuf::Descriptor* Map_SC_PlayerStopMove_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Map_SC_PlayerStopMove_reflection_ = NULL;
const ::google::protobuf::Descriptor* Map_SC_PlayerStateSync_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Map_SC_PlayerStateSync_reflection_ = NULL;
const ::google::protobuf::Descriptor* Map_CS_PlayerCheckPosition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Map_CS_PlayerCheckPosition_reflection_ = NULL;
const ::google::protobuf::Descriptor* Map_CS_PlayerStopMove_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Map_CS_PlayerStopMove_reflection_ = NULL;
const ::google::protobuf::Descriptor* Map_CS_PlayerStateSync_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Map_CS_PlayerStateSync_reflection_ = NULL;
const ::google::protobuf::Descriptor* Map_SC_AddSyncRandomChest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Map_SC_AddSyncRandomChest_reflection_ = NULL;
const ::google::protobuf::Descriptor* Map_SC_UpdateDir_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Map_SC_UpdateDir_reflection_ = NULL;
const ::google::protobuf::Descriptor* Map_CS_GetMapBranch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Map_CS_GetMapBranch_reflection_ = NULL;
const ::google::protobuf::Descriptor* Map_CS_ChangeBranch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Map_CS_ChangeBranch_reflection_ = NULL;
const ::google::protobuf::Descriptor* BranchInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BranchInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Map_SC_GetMapBranch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Map_SC_GetMapBranch_reflection_ = NULL;
const ::google::protobuf::Descriptor* Map_SC_ChangeBranch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Map_SC_ChangeBranch_reflection_ = NULL;
const ::google::protobuf::Descriptor* Map_CS_GameStoryStart_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Map_CS_GameStoryStart_reflection_ = NULL;
const ::google::protobuf::Descriptor* Map_CS_GameStoryEnd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Map_CS_GameStoryEnd_reflection_ = NULL;
const ::google::protobuf::Descriptor* Map_CS_NPCStopAI_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Map_CS_NPCStopAI_reflection_ = NULL;
const ::google::protobuf::Descriptor* Map_CS_NPCActiveAI_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Map_CS_NPCActiveAI_reflection_ = NULL;
const ::google::protobuf::Descriptor* Map_SC_MonsterTalk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Map_SC_MonsterTalk_reflection_ = NULL;
const ::google::protobuf::Descriptor* Map_SC_MonsterTurnBackSync_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Map_SC_MonsterTurnBackSync_reflection_ = NULL;
const ::google::protobuf::Descriptor* Map_SC_ChangeMapResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Map_SC_ChangeMapResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* Game2Match_PVPMatch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Game2Match_PVPMatch_reflection_ = NULL;
const ::google::protobuf::Descriptor* Game2Match_TeamMatch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Game2Match_TeamMatch_reflection_ = NULL;
const ::google::protobuf::Descriptor* Game2Match_CancelMatch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Game2Match_CancelMatch_reflection_ = NULL;
const ::google::protobuf::Descriptor* Game2Client_WorldBossInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Game2Client_WorldBossInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Game2Battle_WorldBossStart_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Game2Battle_WorldBossStart_reflection_ = NULL;
const ::google::protobuf::Descriptor* Client2Game_WorldBossBid_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Client2Game_WorldBossBid_reflection_ = NULL;
const ::google::protobuf::Descriptor* Game2Battle_WorldBossBid_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Game2Battle_WorldBossBid_reflection_ = NULL;
const ::google::protobuf::Descriptor* Game2Client_WolrdBoss_SaleHistory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Game2Client_WolrdBoss_SaleHistory_reflection_ = NULL;
const ::google::protobuf::Descriptor* Map_CS_TicketBossInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Map_CS_TicketBossInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Map_SC_TicketBossInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Map_SC_TicketBossInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Map_CS_TicketBossChallenge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Map_CS_TicketBossChallenge_reflection_ = NULL;
const ::google::protobuf::Descriptor* Map_SC_TicketBossChallenge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Map_SC_TicketBossChallenge_reflection_ = NULL;
const ::google::protobuf::Descriptor* Map_CS_ChatMark_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Map_CS_ChatMark_reflection_ = NULL;
const ::google::protobuf::Descriptor* Map_CS_TakeDropItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Map_CS_TakeDropItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* Map_SC_TakeDropItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Map_SC_TakeDropItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* Game2Battle_TicketBossChallenge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Game2Battle_TicketBossChallenge_reflection_ = NULL;
const ::google::protobuf::Descriptor* Game2Battle_TakeDropItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Game2Battle_TakeDropItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* Game2Match_CreateRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Game2Match_CreateRoom_reflection_ = NULL;
const ::google::protobuf::Descriptor* Game2Match_GetRoomList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Game2Match_GetRoomList_reflection_ = NULL;
const ::google::protobuf::Descriptor* Game2Battle_UpdateHeadInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Game2Battle_UpdateHeadInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Game2Match_CreateTerritoryBattle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Game2Match_CreateTerritoryBattle_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_map_2eproto() {
  protobuf_AddDesc_map_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "map.proto");
  GOOGLE_CHECK(file != NULL);
  Map_SC_NavPaths_descriptor_ = file->message_type(0);
  static const int Map_SC_NavPaths_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_NavPaths, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_NavPaths, velocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_NavPaths, paths_),
  };
  Map_SC_NavPaths_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Map_SC_NavPaths_descriptor_,
      Map_SC_NavPaths::default_instance_,
      Map_SC_NavPaths_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_NavPaths, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_NavPaths, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Map_SC_NavPaths));
  Map_CS_PlayerPositionSync_descriptor_ = file->message_type(1);
  static const int Map_CS_PlayerPositionSync_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_CS_PlayerPositionSync, pt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_CS_PlayerPositionSync, dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_CS_PlayerPositionSync, arrival_),
  };
  Map_CS_PlayerPositionSync_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Map_CS_PlayerPositionSync_descriptor_,
      Map_CS_PlayerPositionSync::default_instance_,
      Map_CS_PlayerPositionSync_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_CS_PlayerPositionSync, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_CS_PlayerPositionSync, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Map_CS_PlayerPositionSync));
  Map_SC_AddSyncPlayer_descriptor_ = file->message_type(2);
  static const int Map_SC_AddSyncPlayer_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_AddSyncPlayer, nplayerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_AddSyncPlayer, pt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_AddSyncPlayer, dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_AddSyncPlayer, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_AddSyncPlayer, maxhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_AddSyncPlayer, curhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_AddSyncPlayer, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_AddSyncPlayer, equip_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_AddSyncPlayer, career_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_AddSyncPlayer, velocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_AddSyncPlayer, titleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_AddSyncPlayer, layer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_AddSyncPlayer, titlename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_AddSyncPlayer, titleishide_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_AddSyncPlayer, skill_id_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_AddSyncPlayer, nplayeruuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_AddSyncPlayer, nguildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_AddSyncPlayer, guildname_),
  };
  Map_SC_AddSyncPlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Map_SC_AddSyncPlayer_descriptor_,
      Map_SC_AddSyncPlayer::default_instance_,
      Map_SC_AddSyncPlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_AddSyncPlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_AddSyncPlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Map_SC_AddSyncPlayer));
  Map_SC_ChangeTttle_descriptor_ = file->message_type(3);
  static const int Map_SC_ChangeTttle_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_ChangeTttle, nid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_ChangeTttle, titleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_ChangeTttle, titlename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_ChangeTttle, ishide_),
  };
  Map_SC_ChangeTttle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Map_SC_ChangeTttle_descriptor_,
      Map_SC_ChangeTttle::default_instance_,
      Map_SC_ChangeTttle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_ChangeTttle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_ChangeTttle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Map_SC_ChangeTttle));
  Map_SC_ChangeEquip_descriptor_ = file->message_type(4);
  static const int Map_SC_ChangeEquip_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_ChangeEquip, nid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_ChangeEquip, equip_list_),
  };
  Map_SC_ChangeEquip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Map_SC_ChangeEquip_descriptor_,
      Map_SC_ChangeEquip::default_instance_,
      Map_SC_ChangeEquip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_ChangeEquip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_ChangeEquip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Map_SC_ChangeEquip));
  Map_SC_DelSync_descriptor_ = file->message_type(5);
  static const int Map_SC_DelSync_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_DelSync, nplayerid_),
  };
  Map_SC_DelSync_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Map_SC_DelSync_descriptor_,
      Map_SC_DelSync::default_instance_,
      Map_SC_DelSync_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_DelSync, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_DelSync, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Map_SC_DelSync));
  Map_SC_Move_descriptor_ = file->message_type(6);
  static const int Map_SC_Move_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_Move, nid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_Move, pt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_Move, dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_Move, velocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_Move, arrival_),
  };
  Map_SC_Move_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Map_SC_Move_descriptor_,
      Map_SC_Move::default_instance_,
      Map_SC_Move_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_Move, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_Move, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Map_SC_Move));
  Map_SC_CheckPosition_descriptor_ = file->message_type(7);
  static const int Map_SC_CheckPosition_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_CheckPosition, nid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_CheckPosition, pt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_CheckPosition, dir_),
  };
  Map_SC_CheckPosition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Map_SC_CheckPosition_descriptor_,
      Map_SC_CheckPosition::default_instance_,
      Map_SC_CheckPosition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_CheckPosition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_CheckPosition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Map_SC_CheckPosition));
  Map_SC_AddSyncMonster_descriptor_ = file->message_type(8);
  static const int Map_SC_AddSyncMonster_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_AddSyncMonster, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_AddSyncMonster, proid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_AddSyncMonster, pt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_AddSyncMonster, dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_AddSyncMonster, velocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_AddSyncMonster, maxhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_AddSyncMonster, curhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_AddSyncMonster, max_tp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_AddSyncMonster, cur_tp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_AddSyncMonster, cmap_),
  };
  Map_SC_AddSyncMonster_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Map_SC_AddSyncMonster_descriptor_,
      Map_SC_AddSyncMonster::default_instance_,
      Map_SC_AddSyncMonster_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_AddSyncMonster, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_AddSyncMonster, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Map_SC_AddSyncMonster));
  Map_CS_SpeelBegin_descriptor_ = file->message_type(9);
  static const int Map_CS_SpeelBegin_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_CS_SpeelBegin, layer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_CS_SpeelBegin, triggerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_CS_SpeelBegin, triggertype_),
  };
  Map_CS_SpeelBegin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Map_CS_SpeelBegin_descriptor_,
      Map_CS_SpeelBegin::default_instance_,
      Map_CS_SpeelBegin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_CS_SpeelBegin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_CS_SpeelBegin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Map_CS_SpeelBegin));
  Map_CS_SpeelEnd_descriptor_ = file->message_type(10);
  static const int Map_CS_SpeelEnd_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_CS_SpeelEnd, pt_),
  };
  Map_CS_SpeelEnd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Map_CS_SpeelEnd_descriptor_,
      Map_CS_SpeelEnd::default_instance_,
      Map_CS_SpeelEnd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_CS_SpeelEnd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_CS_SpeelEnd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Map_CS_SpeelEnd));
  Map_SC_SpeelBegin_descriptor_ = file->message_type(11);
  static const int Map_SC_SpeelBegin_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_SpeelBegin, plyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_SpeelBegin, layer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_SpeelBegin, triggerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_SpeelBegin, triggertype_),
  };
  Map_SC_SpeelBegin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Map_SC_SpeelBegin_descriptor_,
      Map_SC_SpeelBegin::default_instance_,
      Map_SC_SpeelBegin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_SpeelBegin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_SpeelBegin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Map_SC_SpeelBegin));
  Map_CS_ClientLoadOK_descriptor_ = file->message_type(12);
  static const int Map_CS_ClientLoadOK_offsets_[1] = {
  };
  Map_CS_ClientLoadOK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Map_CS_ClientLoadOK_descriptor_,
      Map_CS_ClientLoadOK::default_instance_,
      Map_CS_ClientLoadOK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_CS_ClientLoadOK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_CS_ClientLoadOK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Map_CS_ClientLoadOK));
  Map_SC_ChangeMap_descriptor_ = file->message_type(13);
  static const int Map_SC_ChangeMap_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_ChangeMap, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_ChangeMap, pt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_ChangeMap, dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_ChangeMap, layer_),
  };
  Map_SC_ChangeMap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Map_SC_ChangeMap_descriptor_,
      Map_SC_ChangeMap::default_instance_,
      Map_SC_ChangeMap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_ChangeMap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_ChangeMap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Map_SC_ChangeMap));
  Map_CS_ChangeMapOK_descriptor_ = file->message_type(14);
  static const int Map_CS_ChangeMapOK_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_CS_ChangeMapOK, mapid_),
  };
  Map_CS_ChangeMapOK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Map_CS_ChangeMapOK_descriptor_,
      Map_CS_ChangeMapOK::default_instance_,
      Map_CS_ChangeMapOK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_CS_ChangeMapOK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_CS_ChangeMapOK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Map_CS_ChangeMapOK));
  Map_CS_ReqChangeMap_descriptor_ = file->message_type(15);
  static const int Map_CS_ReqChangeMap_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_CS_ReqChangeMap, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_CS_ReqChangeMap, branchid_),
  };
  Map_CS_ReqChangeMap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Map_CS_ReqChangeMap_descriptor_,
      Map_CS_ReqChangeMap::default_instance_,
      Map_CS_ReqChangeMap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_CS_ReqChangeMap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_CS_ReqChangeMap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Map_CS_ReqChangeMap));
  Map_CS_EnterSceneArea_descriptor_ = file->message_type(16);
  static const int Map_CS_EnterSceneArea_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_CS_EnterSceneArea, sceneareaid_),
  };
  Map_CS_EnterSceneArea_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Map_CS_EnterSceneArea_descriptor_,
      Map_CS_EnterSceneArea::default_instance_,
      Map_CS_EnterSceneArea_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_CS_EnterSceneArea, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_CS_EnterSceneArea, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Map_CS_EnterSceneArea));
  Map_CS_LeaveSceneArea_descriptor_ = file->message_type(17);
  static const int Map_CS_LeaveSceneArea_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_CS_LeaveSceneArea, sceneareaid_),
  };
  Map_CS_LeaveSceneArea_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Map_CS_LeaveSceneArea_descriptor_,
      Map_CS_LeaveSceneArea::default_instance_,
      Map_CS_LeaveSceneArea_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_CS_LeaveSceneArea, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_CS_LeaveSceneArea, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Map_CS_LeaveSceneArea));
  Map_SC_TriggerEvent_descriptor_ = file->message_type(18);
  static const int Map_SC_TriggerEvent_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_TriggerEvent, plyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_TriggerEvent, triggertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_TriggerEvent, triggerid_),
  };
  Map_SC_TriggerEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Map_SC_TriggerEvent_descriptor_,
      Map_SC_TriggerEvent::default_instance_,
      Map_SC_TriggerEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_TriggerEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_TriggerEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Map_SC_TriggerEvent));
  Map_CS_TriggerEvent_descriptor_ = file->message_type(19);
  static const int Map_CS_TriggerEvent_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_CS_TriggerEvent, triggertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_CS_TriggerEvent, triggerid_),
  };
  Map_CS_TriggerEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Map_CS_TriggerEvent_descriptor_,
      Map_CS_TriggerEvent::default_instance_,
      Map_CS_TriggerEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_CS_TriggerEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_CS_TriggerEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Map_CS_TriggerEvent));
  Map_SC_SyncAreaStatus_descriptor_ = file->message_type(20);
  static const int Map_SC_SyncAreaStatus_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_SyncAreaStatus, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_SyncAreaStatus, sceneareatype_),
  };
  Map_SC_SyncAreaStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Map_SC_SyncAreaStatus_descriptor_,
      Map_SC_SyncAreaStatus::default_instance_,
      Map_SC_SyncAreaStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_SyncAreaStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_SyncAreaStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Map_SC_SyncAreaStatus));
  Map_SC_MonsterStopMove_descriptor_ = file->message_type(21);
  static const int Map_SC_MonsterStopMove_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_MonsterStopMove, nid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_MonsterStopMove, pt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_MonsterStopMove, dir_),
  };
  Map_SC_MonsterStopMove_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Map_SC_MonsterStopMove_descriptor_,
      Map_SC_MonsterStopMove::default_instance_,
      Map_SC_MonsterStopMove_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_MonsterStopMove, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_MonsterStopMove, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Map_SC_MonsterStopMove));
  Map_CS_TeamerLocationSyn_descriptor_ = file->message_type(22);
  static const int Map_CS_TeamerLocationSyn_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_CS_TeamerLocationSyn, opened_),
  };
  Map_CS_TeamerLocationSyn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Map_CS_TeamerLocationSyn_descriptor_,
      Map_CS_TeamerLocationSyn::default_instance_,
      Map_CS_TeamerLocationSyn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_CS_TeamerLocationSyn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_CS_TeamerLocationSyn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Map_CS_TeamerLocationSyn));
  Location_descriptor_ = file->message_type(23);
  static const int Location_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location, plyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location, pt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location, layer_),
  };
  Location_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Location_descriptor_,
      Location::default_instance_,
      Location_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Location));
  Map_SC_TeamerLocationSyn_descriptor_ = file->message_type(24);
  static const int Map_SC_TeamerLocationSyn_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_TeamerLocationSyn, loc_),
  };
  Map_SC_TeamerLocationSyn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Map_SC_TeamerLocationSyn_descriptor_,
      Map_SC_TeamerLocationSyn::default_instance_,
      Map_SC_TeamerLocationSyn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_TeamerLocationSyn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_TeamerLocationSyn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Map_SC_TeamerLocationSyn));
  Map_CS_StartParkour_descriptor_ = file->message_type(25);
  static const int Map_CS_StartParkour_offsets_[1] = {
  };
  Map_CS_StartParkour_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Map_CS_StartParkour_descriptor_,
      Map_CS_StartParkour::default_instance_,
      Map_CS_StartParkour_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_CS_StartParkour, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_CS_StartParkour, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Map_CS_StartParkour));
  Map_CS_EndParkour_descriptor_ = file->message_type(26);
  static const int Map_CS_EndParkour_offsets_[1] = {
  };
  Map_CS_EndParkour_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Map_CS_EndParkour_descriptor_,
      Map_CS_EndParkour::default_instance_,
      Map_CS_EndParkour_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_CS_EndParkour, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_CS_EndParkour, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Map_CS_EndParkour));
  Map_CS_PickUpChest_descriptor_ = file->message_type(27);
  static const int Map_CS_PickUpChest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_CS_PickUpChest, nid_),
  };
  Map_CS_PickUpChest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Map_CS_PickUpChest_descriptor_,
      Map_CS_PickUpChest::default_instance_,
      Map_CS_PickUpChest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_CS_PickUpChest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_CS_PickUpChest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Map_CS_PickUpChest));
  Map_SC_PickUpChest_descriptor_ = file->message_type(28);
  static const int Map_SC_PickUpChest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_PickUpChest, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_PickUpChest, id_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_PickUpChest, item_list_),
  };
  Map_SC_PickUpChest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Map_SC_PickUpChest_descriptor_,
      Map_SC_PickUpChest::default_instance_,
      Map_SC_PickUpChest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_PickUpChest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_PickUpChest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Map_SC_PickUpChest));
  Map_SC_StartParkour_descriptor_ = file->message_type(29);
  static const int Map_SC_StartParkour_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_StartParkour, res_),
  };
  Map_SC_StartParkour_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Map_SC_StartParkour_descriptor_,
      Map_SC_StartParkour::default_instance_,
      Map_SC_StartParkour_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_StartParkour, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_StartParkour, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Map_SC_StartParkour));
  Map_SC_PlayerCheckPosition_descriptor_ = file->message_type(30);
  static const int Map_SC_PlayerCheckPosition_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_PlayerCheckPosition, plyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_PlayerCheckPosition, pt_),
  };
  Map_SC_PlayerCheckPosition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Map_SC_PlayerCheckPosition_descriptor_,
      Map_SC_PlayerCheckPosition::default_instance_,
      Map_SC_PlayerCheckPosition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_PlayerCheckPosition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_PlayerCheckPosition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Map_SC_PlayerCheckPosition));
  Map_SC_PlayerStopMove_descriptor_ = file->message_type(31);
  static const int Map_SC_PlayerStopMove_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_PlayerStopMove, plyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_PlayerStopMove, pt_),
  };
  Map_SC_PlayerStopMove_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Map_SC_PlayerStopMove_descriptor_,
      Map_SC_PlayerStopMove::default_instance_,
      Map_SC_PlayerStopMove_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_PlayerStopMove, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_PlayerStopMove, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Map_SC_PlayerStopMove));
  Map_SC_PlayerStateSync_descriptor_ = file->message_type(32);
  static const int Map_SC_PlayerStateSync_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_PlayerStateSync, plyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_PlayerStateSync, syncstate_),
  };
  Map_SC_PlayerStateSync_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Map_SC_PlayerStateSync_descriptor_,
      Map_SC_PlayerStateSync::default_instance_,
      Map_SC_PlayerStateSync_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_PlayerStateSync, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_PlayerStateSync, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Map_SC_PlayerStateSync));
  Map_CS_PlayerCheckPosition_descriptor_ = file->message_type(33);
  static const int Map_CS_PlayerCheckPosition_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_CS_PlayerCheckPosition, pt_),
  };
  Map_CS_PlayerCheckPosition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Map_CS_PlayerCheckPosition_descriptor_,
      Map_CS_PlayerCheckPosition::default_instance_,
      Map_CS_PlayerCheckPosition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_CS_PlayerCheckPosition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_CS_PlayerCheckPosition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Map_CS_PlayerCheckPosition));
  Map_CS_PlayerStopMove_descriptor_ = file->message_type(34);
  static const int Map_CS_PlayerStopMove_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_CS_PlayerStopMove, pt_),
  };
  Map_CS_PlayerStopMove_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Map_CS_PlayerStopMove_descriptor_,
      Map_CS_PlayerStopMove::default_instance_,
      Map_CS_PlayerStopMove_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_CS_PlayerStopMove, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_CS_PlayerStopMove, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Map_CS_PlayerStopMove));
  Map_CS_PlayerStateSync_descriptor_ = file->message_type(35);
  static const int Map_CS_PlayerStateSync_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_CS_PlayerStateSync, syncstate_),
  };
  Map_CS_PlayerStateSync_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Map_CS_PlayerStateSync_descriptor_,
      Map_CS_PlayerStateSync::default_instance_,
      Map_CS_PlayerStateSync_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_CS_PlayerStateSync, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_CS_PlayerStateSync, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Map_CS_PlayerStateSync));
  Map_SC_AddSyncRandomChest_descriptor_ = file->message_type(36);
  static const int Map_SC_AddSyncRandomChest_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_AddSyncRandomChest, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_AddSyncRandomChest, proid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_AddSyncRandomChest, pt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_AddSyncRandomChest, dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_AddSyncRandomChest, createuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_AddSyncRandomChest, createname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_AddSyncRandomChest, velocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_AddSyncRandomChest, maxhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_AddSyncRandomChest, curhp_),
  };
  Map_SC_AddSyncRandomChest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Map_SC_AddSyncRandomChest_descriptor_,
      Map_SC_AddSyncRandomChest::default_instance_,
      Map_SC_AddSyncRandomChest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_AddSyncRandomChest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_AddSyncRandomChest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Map_SC_AddSyncRandomChest));
  Map_SC_UpdateDir_descriptor_ = file->message_type(37);
  static const int Map_SC_UpdateDir_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_UpdateDir, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_UpdateDir, dir_),
  };
  Map_SC_UpdateDir_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Map_SC_UpdateDir_descriptor_,
      Map_SC_UpdateDir::default_instance_,
      Map_SC_UpdateDir_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_UpdateDir, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_UpdateDir, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Map_SC_UpdateDir));
  Map_CS_GetMapBranch_descriptor_ = file->message_type(38);
  static const int Map_CS_GetMapBranch_offsets_[1] = {
  };
  Map_CS_GetMapBranch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Map_CS_GetMapBranch_descriptor_,
      Map_CS_GetMapBranch::default_instance_,
      Map_CS_GetMapBranch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_CS_GetMapBranch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_CS_GetMapBranch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Map_CS_GetMapBranch));
  Map_CS_ChangeBranch_descriptor_ = file->message_type(39);
  static const int Map_CS_ChangeBranch_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_CS_ChangeBranch, branchid_),
  };
  Map_CS_ChangeBranch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Map_CS_ChangeBranch_descriptor_,
      Map_CS_ChangeBranch::default_instance_,
      Map_CS_ChangeBranch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_CS_ChangeBranch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_CS_ChangeBranch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Map_CS_ChangeBranch));
  BranchInfo_descriptor_ = file->message_type(40);
  static const int BranchInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BranchInfo, branchid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BranchInfo, playernum_),
  };
  BranchInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BranchInfo_descriptor_,
      BranchInfo::default_instance_,
      BranchInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BranchInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BranchInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BranchInfo));
  Map_SC_GetMapBranch_descriptor_ = file->message_type(41);
  static const int Map_SC_GetMapBranch_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_GetMapBranch, branch_list_),
  };
  Map_SC_GetMapBranch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Map_SC_GetMapBranch_descriptor_,
      Map_SC_GetMapBranch::default_instance_,
      Map_SC_GetMapBranch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_GetMapBranch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_GetMapBranch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Map_SC_GetMapBranch));
  Map_SC_ChangeBranch_descriptor_ = file->message_type(42);
  static const int Map_SC_ChangeBranch_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_ChangeBranch, rt_),
  };
  Map_SC_ChangeBranch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Map_SC_ChangeBranch_descriptor_,
      Map_SC_ChangeBranch::default_instance_,
      Map_SC_ChangeBranch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_ChangeBranch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_ChangeBranch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Map_SC_ChangeBranch));
  Map_CS_GameStoryStart_descriptor_ = file->message_type(43);
  static const int Map_CS_GameStoryStart_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_CS_GameStoryStart, gamestoryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_CS_GameStoryStart, npcid_),
  };
  Map_CS_GameStoryStart_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Map_CS_GameStoryStart_descriptor_,
      Map_CS_GameStoryStart::default_instance_,
      Map_CS_GameStoryStart_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_CS_GameStoryStart, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_CS_GameStoryStart, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Map_CS_GameStoryStart));
  Map_CS_GameStoryEnd_descriptor_ = file->message_type(44);
  static const int Map_CS_GameStoryEnd_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_CS_GameStoryEnd, gamestoryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_CS_GameStoryEnd, npcid_),
  };
  Map_CS_GameStoryEnd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Map_CS_GameStoryEnd_descriptor_,
      Map_CS_GameStoryEnd::default_instance_,
      Map_CS_GameStoryEnd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_CS_GameStoryEnd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_CS_GameStoryEnd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Map_CS_GameStoryEnd));
  Map_CS_NPCStopAI_descriptor_ = file->message_type(45);
  static const int Map_CS_NPCStopAI_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_CS_NPCStopAI, npcid_),
  };
  Map_CS_NPCStopAI_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Map_CS_NPCStopAI_descriptor_,
      Map_CS_NPCStopAI::default_instance_,
      Map_CS_NPCStopAI_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_CS_NPCStopAI, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_CS_NPCStopAI, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Map_CS_NPCStopAI));
  Map_CS_NPCActiveAI_descriptor_ = file->message_type(46);
  static const int Map_CS_NPCActiveAI_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_CS_NPCActiveAI, npcid_),
  };
  Map_CS_NPCActiveAI_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Map_CS_NPCActiveAI_descriptor_,
      Map_CS_NPCActiveAI::default_instance_,
      Map_CS_NPCActiveAI_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_CS_NPCActiveAI, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_CS_NPCActiveAI, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Map_CS_NPCActiveAI));
  Map_SC_MonsterTalk_descriptor_ = file->message_type(47);
  static const int Map_SC_MonsterTalk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_MonsterTalk, talkid_),
  };
  Map_SC_MonsterTalk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Map_SC_MonsterTalk_descriptor_,
      Map_SC_MonsterTalk::default_instance_,
      Map_SC_MonsterTalk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_MonsterTalk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_MonsterTalk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Map_SC_MonsterTalk));
  Map_SC_MonsterTurnBackSync_descriptor_ = file->message_type(48);
  static const int Map_SC_MonsterTurnBackSync_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_MonsterTurnBackSync, monsterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_MonsterTurnBackSync, endtick_),
  };
  Map_SC_MonsterTurnBackSync_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Map_SC_MonsterTurnBackSync_descriptor_,
      Map_SC_MonsterTurnBackSync::default_instance_,
      Map_SC_MonsterTurnBackSync_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_MonsterTurnBackSync, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_MonsterTurnBackSync, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Map_SC_MonsterTurnBackSync));
  Map_SC_ChangeMapResult_descriptor_ = file->message_type(49);
  static const int Map_SC_ChangeMapResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_ChangeMapResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_ChangeMapResult, map_table_id_),
  };
  Map_SC_ChangeMapResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Map_SC_ChangeMapResult_descriptor_,
      Map_SC_ChangeMapResult::default_instance_,
      Map_SC_ChangeMapResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_ChangeMapResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_ChangeMapResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Map_SC_ChangeMapResult));
  Game2Match_PVPMatch_descriptor_ = file->message_type(50);
  static const int Game2Match_PVPMatch_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Match_PVPMatch, itableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Match_PVPMatch, smatchplyinfo_),
  };
  Game2Match_PVPMatch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Game2Match_PVPMatch_descriptor_,
      Game2Match_PVPMatch::default_instance_,
      Game2Match_PVPMatch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Match_PVPMatch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Match_PVPMatch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Game2Match_PVPMatch));
  Game2Match_TeamMatch_descriptor_ = file->message_type(51);
  static const int Game2Match_TeamMatch_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Match_TeamMatch, itableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Match_TeamMatch, uihostid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Match_TeamMatch, vecmatchplyinfo_),
  };
  Game2Match_TeamMatch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Game2Match_TeamMatch_descriptor_,
      Game2Match_TeamMatch::default_instance_,
      Game2Match_TeamMatch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Match_TeamMatch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Match_TeamMatch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Game2Match_TeamMatch));
  Game2Match_CancelMatch_descriptor_ = file->message_type(52);
  static const int Game2Match_CancelMatch_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Match_CancelMatch, uuid_),
  };
  Game2Match_CancelMatch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Game2Match_CancelMatch_descriptor_,
      Game2Match_CancelMatch::default_instance_,
      Game2Match_CancelMatch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Match_CancelMatch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Match_CancelMatch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Game2Match_CancelMatch));
  Game2Client_WorldBossInfo_descriptor_ = file->message_type(53);
  static const int Game2Client_WorldBossInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Client_WorldBossInfo, uibossid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Client_WorldBossInfo, uibosslevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Client_WorldBossInfo, uiexpirytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Client_WorldBossInfo, uibosshp_),
  };
  Game2Client_WorldBossInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Game2Client_WorldBossInfo_descriptor_,
      Game2Client_WorldBossInfo::default_instance_,
      Game2Client_WorldBossInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Client_WorldBossInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Client_WorldBossInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Game2Client_WorldBossInfo));
  Game2Battle_WorldBossStart_descriptor_ = file->message_type(54);
  static const int Game2Battle_WorldBossStart_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_WorldBossStart, uibossid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_WorldBossStart, uibosslevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_WorldBossStart, uiexpirytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_WorldBossStart, uihp_),
  };
  Game2Battle_WorldBossStart_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Game2Battle_WorldBossStart_descriptor_,
      Game2Battle_WorldBossStart::default_instance_,
      Game2Battle_WorldBossStart_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_WorldBossStart, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_WorldBossStart, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Game2Battle_WorldBossStart));
  Client2Game_WorldBossBid_descriptor_ = file->message_type(55);
  static const int Client2Game_WorldBossBid_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client2Game_WorldBossBid, uiitemindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client2Game_WorldBossBid, uiprice_),
  };
  Client2Game_WorldBossBid_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Client2Game_WorldBossBid_descriptor_,
      Client2Game_WorldBossBid::default_instance_,
      Client2Game_WorldBossBid_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client2Game_WorldBossBid, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client2Game_WorldBossBid, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Client2Game_WorldBossBid));
  Game2Battle_WorldBossBid_descriptor_ = file->message_type(56);
  static const int Game2Battle_WorldBossBid_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_WorldBossBid, uiitemindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_WorldBossBid, uiprice_),
  };
  Game2Battle_WorldBossBid_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Game2Battle_WorldBossBid_descriptor_,
      Game2Battle_WorldBossBid::default_instance_,
      Game2Battle_WorldBossBid_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_WorldBossBid, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_WorldBossBid, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Game2Battle_WorldBossBid));
  Game2Client_WolrdBoss_SaleHistory_descriptor_ = file->message_type(57);
  static const int Game2Client_WolrdBoss_SaleHistory_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Client_WolrdBoss_SaleHistory, item_),
  };
  Game2Client_WolrdBoss_SaleHistory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Game2Client_WolrdBoss_SaleHistory_descriptor_,
      Game2Client_WolrdBoss_SaleHistory::default_instance_,
      Game2Client_WolrdBoss_SaleHistory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Client_WolrdBoss_SaleHistory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Client_WolrdBoss_SaleHistory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Game2Client_WolrdBoss_SaleHistory));
  Map_CS_TicketBossInfo_descriptor_ = file->message_type(58);
  static const int Map_CS_TicketBossInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_CS_TicketBossInfo, uitableid_),
  };
  Map_CS_TicketBossInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Map_CS_TicketBossInfo_descriptor_,
      Map_CS_TicketBossInfo::default_instance_,
      Map_CS_TicketBossInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_CS_TicketBossInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_CS_TicketBossInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Map_CS_TicketBossInfo));
  Map_SC_TicketBossInfo_descriptor_ = file->message_type(59);
  static const int Map_SC_TicketBossInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_TicketBossInfo, uitableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_TicketBossInfo, uibossid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_TicketBossInfo, uibosshp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_TicketBossInfo, uirefreshtime_),
  };
  Map_SC_TicketBossInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Map_SC_TicketBossInfo_descriptor_,
      Map_SC_TicketBossInfo::default_instance_,
      Map_SC_TicketBossInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_TicketBossInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_TicketBossInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Map_SC_TicketBossInfo));
  Map_CS_TicketBossChallenge_descriptor_ = file->message_type(60);
  static const int Map_CS_TicketBossChallenge_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_CS_TicketBossChallenge, uitableid_),
  };
  Map_CS_TicketBossChallenge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Map_CS_TicketBossChallenge_descriptor_,
      Map_CS_TicketBossChallenge::default_instance_,
      Map_CS_TicketBossChallenge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_CS_TicketBossChallenge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_CS_TicketBossChallenge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Map_CS_TicketBossChallenge));
  Map_SC_TicketBossChallenge_descriptor_ = file->message_type(61);
  static const int Map_SC_TicketBossChallenge_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_TicketBossChallenge, uitableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_TicketBossChallenge, uiresult_),
  };
  Map_SC_TicketBossChallenge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Map_SC_TicketBossChallenge_descriptor_,
      Map_SC_TicketBossChallenge::default_instance_,
      Map_SC_TicketBossChallenge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_TicketBossChallenge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_TicketBossChallenge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Map_SC_TicketBossChallenge));
  Map_CS_ChatMark_descriptor_ = file->message_type(62);
  static const int Map_CS_ChatMark_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_CS_ChatMark, channel_),
  };
  Map_CS_ChatMark_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Map_CS_ChatMark_descriptor_,
      Map_CS_ChatMark::default_instance_,
      Map_CS_ChatMark_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_CS_ChatMark, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_CS_ChatMark, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Map_CS_ChatMark));
  Map_CS_TakeDropItem_descriptor_ = file->message_type(63);
  static const int Map_CS_TakeDropItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_CS_TakeDropItem, uikey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_CS_TakeDropItem, uitableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_CS_TakeDropItem, uiindex_),
  };
  Map_CS_TakeDropItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Map_CS_TakeDropItem_descriptor_,
      Map_CS_TakeDropItem::default_instance_,
      Map_CS_TakeDropItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_CS_TakeDropItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_CS_TakeDropItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Map_CS_TakeDropItem));
  Map_SC_TakeDropItem_descriptor_ = file->message_type(64);
  static const int Map_SC_TakeDropItem_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_TakeDropItem, uiresult_),
  };
  Map_SC_TakeDropItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Map_SC_TakeDropItem_descriptor_,
      Map_SC_TakeDropItem::default_instance_,
      Map_SC_TakeDropItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_TakeDropItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_SC_TakeDropItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Map_SC_TakeDropItem));
  Game2Battle_TicketBossChallenge_descriptor_ = file->message_type(65);
  static const int Game2Battle_TicketBossChallenge_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_TicketBossChallenge, uitableid_),
  };
  Game2Battle_TicketBossChallenge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Game2Battle_TicketBossChallenge_descriptor_,
      Game2Battle_TicketBossChallenge::default_instance_,
      Game2Battle_TicketBossChallenge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_TicketBossChallenge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_TicketBossChallenge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Game2Battle_TicketBossChallenge));
  Game2Battle_TakeDropItem_descriptor_ = file->message_type(66);
  static const int Game2Battle_TakeDropItem_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_TakeDropItem, uikey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_TakeDropItem, uitableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_TakeDropItem, uiindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_TakeDropItem, uinullgirdnum_),
  };
  Game2Battle_TakeDropItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Game2Battle_TakeDropItem_descriptor_,
      Game2Battle_TakeDropItem::default_instance_,
      Game2Battle_TakeDropItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_TakeDropItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_TakeDropItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Game2Battle_TakeDropItem));
  Game2Match_CreateRoom_descriptor_ = file->message_type(67);
  static const int Game2Match_CreateRoom_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Match_CreateRoom, obj_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Match_CreateRoom, splyinfo_),
  };
  Game2Match_CreateRoom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Game2Match_CreateRoom_descriptor_,
      Game2Match_CreateRoom::default_instance_,
      Game2Match_CreateRoom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Match_CreateRoom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Match_CreateRoom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Game2Match_CreateRoom));
  Game2Match_GetRoomList_descriptor_ = file->message_type(68);
  static const int Game2Match_GetRoomList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Match_GetRoomList, obj_),
  };
  Game2Match_GetRoomList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Game2Match_GetRoomList_descriptor_,
      Game2Match_GetRoomList::default_instance_,
      Game2Match_GetRoomList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Match_GetRoomList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Match_GetRoomList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Game2Match_GetRoomList));
  Game2Battle_UpdateHeadInfo_descriptor_ = file->message_type(69);
  static const int Game2Battle_UpdateHeadInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_UpdateHeadInfo, info_),
  };
  Game2Battle_UpdateHeadInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Game2Battle_UpdateHeadInfo_descriptor_,
      Game2Battle_UpdateHeadInfo::default_instance_,
      Game2Battle_UpdateHeadInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_UpdateHeadInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_UpdateHeadInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Game2Battle_UpdateHeadInfo));
  Game2Match_CreateTerritoryBattle_descriptor_ = file->message_type(70);
  static const int Game2Match_CreateTerritoryBattle_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Match_CreateTerritoryBattle, info_),
  };
  Game2Match_CreateTerritoryBattle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Game2Match_CreateTerritoryBattle_descriptor_,
      Game2Match_CreateTerritoryBattle::default_instance_,
      Game2Match_CreateTerritoryBattle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Match_CreateTerritoryBattle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Match_CreateTerritoryBattle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Game2Match_CreateTerritoryBattle));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_map_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Map_SC_NavPaths_descriptor_, &Map_SC_NavPaths::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Map_CS_PlayerPositionSync_descriptor_, &Map_CS_PlayerPositionSync::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Map_SC_AddSyncPlayer_descriptor_, &Map_SC_AddSyncPlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Map_SC_ChangeTttle_descriptor_, &Map_SC_ChangeTttle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Map_SC_ChangeEquip_descriptor_, &Map_SC_ChangeEquip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Map_SC_DelSync_descriptor_, &Map_SC_DelSync::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Map_SC_Move_descriptor_, &Map_SC_Move::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Map_SC_CheckPosition_descriptor_, &Map_SC_CheckPosition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Map_SC_AddSyncMonster_descriptor_, &Map_SC_AddSyncMonster::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Map_CS_SpeelBegin_descriptor_, &Map_CS_SpeelBegin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Map_CS_SpeelEnd_descriptor_, &Map_CS_SpeelEnd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Map_SC_SpeelBegin_descriptor_, &Map_SC_SpeelBegin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Map_CS_ClientLoadOK_descriptor_, &Map_CS_ClientLoadOK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Map_SC_ChangeMap_descriptor_, &Map_SC_ChangeMap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Map_CS_ChangeMapOK_descriptor_, &Map_CS_ChangeMapOK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Map_CS_ReqChangeMap_descriptor_, &Map_CS_ReqChangeMap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Map_CS_EnterSceneArea_descriptor_, &Map_CS_EnterSceneArea::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Map_CS_LeaveSceneArea_descriptor_, &Map_CS_LeaveSceneArea::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Map_SC_TriggerEvent_descriptor_, &Map_SC_TriggerEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Map_CS_TriggerEvent_descriptor_, &Map_CS_TriggerEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Map_SC_SyncAreaStatus_descriptor_, &Map_SC_SyncAreaStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Map_SC_MonsterStopMove_descriptor_, &Map_SC_MonsterStopMove::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Map_CS_TeamerLocationSyn_descriptor_, &Map_CS_TeamerLocationSyn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Location_descriptor_, &Location::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Map_SC_TeamerLocationSyn_descriptor_, &Map_SC_TeamerLocationSyn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Map_CS_StartParkour_descriptor_, &Map_CS_StartParkour::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Map_CS_EndParkour_descriptor_, &Map_CS_EndParkour::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Map_CS_PickUpChest_descriptor_, &Map_CS_PickUpChest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Map_SC_PickUpChest_descriptor_, &Map_SC_PickUpChest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Map_SC_StartParkour_descriptor_, &Map_SC_StartParkour::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Map_SC_PlayerCheckPosition_descriptor_, &Map_SC_PlayerCheckPosition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Map_SC_PlayerStopMove_descriptor_, &Map_SC_PlayerStopMove::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Map_SC_PlayerStateSync_descriptor_, &Map_SC_PlayerStateSync::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Map_CS_PlayerCheckPosition_descriptor_, &Map_CS_PlayerCheckPosition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Map_CS_PlayerStopMove_descriptor_, &Map_CS_PlayerStopMove::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Map_CS_PlayerStateSync_descriptor_, &Map_CS_PlayerStateSync::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Map_SC_AddSyncRandomChest_descriptor_, &Map_SC_AddSyncRandomChest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Map_SC_UpdateDir_descriptor_, &Map_SC_UpdateDir::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Map_CS_GetMapBranch_descriptor_, &Map_CS_GetMapBranch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Map_CS_ChangeBranch_descriptor_, &Map_CS_ChangeBranch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BranchInfo_descriptor_, &BranchInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Map_SC_GetMapBranch_descriptor_, &Map_SC_GetMapBranch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Map_SC_ChangeBranch_descriptor_, &Map_SC_ChangeBranch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Map_CS_GameStoryStart_descriptor_, &Map_CS_GameStoryStart::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Map_CS_GameStoryEnd_descriptor_, &Map_CS_GameStoryEnd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Map_CS_NPCStopAI_descriptor_, &Map_CS_NPCStopAI::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Map_CS_NPCActiveAI_descriptor_, &Map_CS_NPCActiveAI::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Map_SC_MonsterTalk_descriptor_, &Map_SC_MonsterTalk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Map_SC_MonsterTurnBackSync_descriptor_, &Map_SC_MonsterTurnBackSync::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Map_SC_ChangeMapResult_descriptor_, &Map_SC_ChangeMapResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Game2Match_PVPMatch_descriptor_, &Game2Match_PVPMatch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Game2Match_TeamMatch_descriptor_, &Game2Match_TeamMatch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Game2Match_CancelMatch_descriptor_, &Game2Match_CancelMatch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Game2Client_WorldBossInfo_descriptor_, &Game2Client_WorldBossInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Game2Battle_WorldBossStart_descriptor_, &Game2Battle_WorldBossStart::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Client2Game_WorldBossBid_descriptor_, &Client2Game_WorldBossBid::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Game2Battle_WorldBossBid_descriptor_, &Game2Battle_WorldBossBid::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Game2Client_WolrdBoss_SaleHistory_descriptor_, &Game2Client_WolrdBoss_SaleHistory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Map_CS_TicketBossInfo_descriptor_, &Map_CS_TicketBossInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Map_SC_TicketBossInfo_descriptor_, &Map_SC_TicketBossInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Map_CS_TicketBossChallenge_descriptor_, &Map_CS_TicketBossChallenge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Map_SC_TicketBossChallenge_descriptor_, &Map_SC_TicketBossChallenge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Map_CS_ChatMark_descriptor_, &Map_CS_ChatMark::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Map_CS_TakeDropItem_descriptor_, &Map_CS_TakeDropItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Map_SC_TakeDropItem_descriptor_, &Map_SC_TakeDropItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Game2Battle_TicketBossChallenge_descriptor_, &Game2Battle_TicketBossChallenge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Game2Battle_TakeDropItem_descriptor_, &Game2Battle_TakeDropItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Game2Match_CreateRoom_descriptor_, &Game2Match_CreateRoom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Game2Match_GetRoomList_descriptor_, &Game2Match_GetRoomList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Game2Battle_UpdateHeadInfo_descriptor_, &Game2Battle_UpdateHeadInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Game2Match_CreateTerritoryBattle_descriptor_, &Game2Match_CreateTerritoryBattle::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_map_2eproto() {
  delete Map_SC_NavPaths::default_instance_;
  delete Map_SC_NavPaths_reflection_;
  delete Map_CS_PlayerPositionSync::default_instance_;
  delete Map_CS_PlayerPositionSync_reflection_;
  delete Map_SC_AddSyncPlayer::default_instance_;
  delete Map_SC_AddSyncPlayer_reflection_;
  delete Map_SC_ChangeTttle::default_instance_;
  delete Map_SC_ChangeTttle_reflection_;
  delete Map_SC_ChangeEquip::default_instance_;
  delete Map_SC_ChangeEquip_reflection_;
  delete Map_SC_DelSync::default_instance_;
  delete Map_SC_DelSync_reflection_;
  delete Map_SC_Move::default_instance_;
  delete Map_SC_Move_reflection_;
  delete Map_SC_CheckPosition::default_instance_;
  delete Map_SC_CheckPosition_reflection_;
  delete Map_SC_AddSyncMonster::default_instance_;
  delete Map_SC_AddSyncMonster_reflection_;
  delete Map_CS_SpeelBegin::default_instance_;
  delete Map_CS_SpeelBegin_reflection_;
  delete Map_CS_SpeelEnd::default_instance_;
  delete Map_CS_SpeelEnd_reflection_;
  delete Map_SC_SpeelBegin::default_instance_;
  delete Map_SC_SpeelBegin_reflection_;
  delete Map_CS_ClientLoadOK::default_instance_;
  delete Map_CS_ClientLoadOK_reflection_;
  delete Map_SC_ChangeMap::default_instance_;
  delete Map_SC_ChangeMap_reflection_;
  delete Map_CS_ChangeMapOK::default_instance_;
  delete Map_CS_ChangeMapOK_reflection_;
  delete Map_CS_ReqChangeMap::default_instance_;
  delete Map_CS_ReqChangeMap_reflection_;
  delete Map_CS_EnterSceneArea::default_instance_;
  delete Map_CS_EnterSceneArea_reflection_;
  delete Map_CS_LeaveSceneArea::default_instance_;
  delete Map_CS_LeaveSceneArea_reflection_;
  delete Map_SC_TriggerEvent::default_instance_;
  delete Map_SC_TriggerEvent_reflection_;
  delete Map_CS_TriggerEvent::default_instance_;
  delete Map_CS_TriggerEvent_reflection_;
  delete Map_SC_SyncAreaStatus::default_instance_;
  delete Map_SC_SyncAreaStatus_reflection_;
  delete Map_SC_MonsterStopMove::default_instance_;
  delete Map_SC_MonsterStopMove_reflection_;
  delete Map_CS_TeamerLocationSyn::default_instance_;
  delete Map_CS_TeamerLocationSyn_reflection_;
  delete Location::default_instance_;
  delete Location_reflection_;
  delete Map_SC_TeamerLocationSyn::default_instance_;
  delete Map_SC_TeamerLocationSyn_reflection_;
  delete Map_CS_StartParkour::default_instance_;
  delete Map_CS_StartParkour_reflection_;
  delete Map_CS_EndParkour::default_instance_;
  delete Map_CS_EndParkour_reflection_;
  delete Map_CS_PickUpChest::default_instance_;
  delete Map_CS_PickUpChest_reflection_;
  delete Map_SC_PickUpChest::default_instance_;
  delete Map_SC_PickUpChest_reflection_;
  delete Map_SC_StartParkour::default_instance_;
  delete Map_SC_StartParkour_reflection_;
  delete Map_SC_PlayerCheckPosition::default_instance_;
  delete Map_SC_PlayerCheckPosition_reflection_;
  delete Map_SC_PlayerStopMove::default_instance_;
  delete Map_SC_PlayerStopMove_reflection_;
  delete Map_SC_PlayerStateSync::default_instance_;
  delete Map_SC_PlayerStateSync_reflection_;
  delete Map_CS_PlayerCheckPosition::default_instance_;
  delete Map_CS_PlayerCheckPosition_reflection_;
  delete Map_CS_PlayerStopMove::default_instance_;
  delete Map_CS_PlayerStopMove_reflection_;
  delete Map_CS_PlayerStateSync::default_instance_;
  delete Map_CS_PlayerStateSync_reflection_;
  delete Map_SC_AddSyncRandomChest::default_instance_;
  delete Map_SC_AddSyncRandomChest_reflection_;
  delete Map_SC_UpdateDir::default_instance_;
  delete Map_SC_UpdateDir_reflection_;
  delete Map_CS_GetMapBranch::default_instance_;
  delete Map_CS_GetMapBranch_reflection_;
  delete Map_CS_ChangeBranch::default_instance_;
  delete Map_CS_ChangeBranch_reflection_;
  delete BranchInfo::default_instance_;
  delete BranchInfo_reflection_;
  delete Map_SC_GetMapBranch::default_instance_;
  delete Map_SC_GetMapBranch_reflection_;
  delete Map_SC_ChangeBranch::default_instance_;
  delete Map_SC_ChangeBranch_reflection_;
  delete Map_CS_GameStoryStart::default_instance_;
  delete Map_CS_GameStoryStart_reflection_;
  delete Map_CS_GameStoryEnd::default_instance_;
  delete Map_CS_GameStoryEnd_reflection_;
  delete Map_CS_NPCStopAI::default_instance_;
  delete Map_CS_NPCStopAI_reflection_;
  delete Map_CS_NPCActiveAI::default_instance_;
  delete Map_CS_NPCActiveAI_reflection_;
  delete Map_SC_MonsterTalk::default_instance_;
  delete Map_SC_MonsterTalk_reflection_;
  delete Map_SC_MonsterTurnBackSync::default_instance_;
  delete Map_SC_MonsterTurnBackSync_reflection_;
  delete Map_SC_ChangeMapResult::default_instance_;
  delete Map_SC_ChangeMapResult_reflection_;
  delete Game2Match_PVPMatch::default_instance_;
  delete Game2Match_PVPMatch_reflection_;
  delete Game2Match_TeamMatch::default_instance_;
  delete Game2Match_TeamMatch_reflection_;
  delete Game2Match_CancelMatch::default_instance_;
  delete Game2Match_CancelMatch_reflection_;
  delete Game2Client_WorldBossInfo::default_instance_;
  delete Game2Client_WorldBossInfo_reflection_;
  delete Game2Battle_WorldBossStart::default_instance_;
  delete Game2Battle_WorldBossStart_reflection_;
  delete Client2Game_WorldBossBid::default_instance_;
  delete Client2Game_WorldBossBid_reflection_;
  delete Game2Battle_WorldBossBid::default_instance_;
  delete Game2Battle_WorldBossBid_reflection_;
  delete Game2Client_WolrdBoss_SaleHistory::default_instance_;
  delete Game2Client_WolrdBoss_SaleHistory_reflection_;
  delete Map_CS_TicketBossInfo::default_instance_;
  delete Map_CS_TicketBossInfo_reflection_;
  delete Map_SC_TicketBossInfo::default_instance_;
  delete Map_SC_TicketBossInfo_reflection_;
  delete Map_CS_TicketBossChallenge::default_instance_;
  delete Map_CS_TicketBossChallenge_reflection_;
  delete Map_SC_TicketBossChallenge::default_instance_;
  delete Map_SC_TicketBossChallenge_reflection_;
  delete Map_CS_ChatMark::default_instance_;
  delete Map_CS_ChatMark_reflection_;
  delete Map_CS_TakeDropItem::default_instance_;
  delete Map_CS_TakeDropItem_reflection_;
  delete Map_SC_TakeDropItem::default_instance_;
  delete Map_SC_TakeDropItem_reflection_;
  delete Game2Battle_TicketBossChallenge::default_instance_;
  delete Game2Battle_TicketBossChallenge_reflection_;
  delete Game2Battle_TakeDropItem::default_instance_;
  delete Game2Battle_TakeDropItem_reflection_;
  delete Game2Match_CreateRoom::default_instance_;
  delete Game2Match_CreateRoom_reflection_;
  delete Game2Match_GetRoomList::default_instance_;
  delete Game2Match_GetRoomList_reflection_;
  delete Game2Battle_UpdateHeadInfo::default_instance_;
  delete Game2Battle_UpdateHeadInfo_reflection_;
  delete Game2Match_CreateTerritoryBattle::default_instance_;
  delete Game2Match_CreateTerritoryBattle_reflection_;
}

void protobuf_AddDesc_map_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::proto::message::protobuf_AddDesc_common_2eproto();
  ::proto::message::protobuf_AddDesc_item_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tmap.proto\022\rproto.message\032\014common.proto"
    "\032\nitem.proto\"V\n\017Map_SC_NavPaths\022\n\n\002ID\030\001 "
    "\002(\r\022\020\n\010Velocity\030\002 \002(\002\022%\n\005paths\030\003 \003(\0132\026.p"
    "roto.message.Point3D\"]\n\031Map_CS_PlayerPos"
    "itionSync\022\"\n\002pt\030\001 \002(\0132\026.proto.message.Po"
    "int3D\022\013\n\003dir\030\002 \002(\002\022\017\n\007arrival\030\003 \001(\010\"\372\002\n\024"
    "Map_SC_AddSyncPlayer\022\021\n\tnPlayerId\030\001 \002(\r\022"
    "\"\n\002pt\030\002 \002(\0132\026.proto.message.Point3D\022\013\n\003d"
    "ir\030\003 \002(\002\022\014\n\004Name\030\004 \001(\t\022\r\n\005MaxHP\030\005 \001(\005\022\r\n"
    "\005CurHP\030\006 \001(\005\022\r\n\005Level\030\007 \001(\005\022(\n\nequip_lis"
    "t\030\010 \003(\0132\024.proto.message.Equip\022\016\n\006career\030"
    "\t \001(\005\022\020\n\010Velocity\030\n \001(\005\022\017\n\007titleID\030\013 \001(\005"
    "\022\r\n\005layer\030\014 \001(\005\022\021\n\ttitlename\030\r \001(\t\022\023\n\013ti"
    "tleishide\030\016 \001(\005\022\025\n\rskill_id_list\030\017 \003(\005\022\023"
    "\n\013nPlayeruuid\030\020 \001(\004\022\020\n\010nGuildid\030\021 \001(\004\022\021\n"
    "\tGuildName\030\022 \001(\t\"U\n\022Map_SC_ChangeTttle\022\013"
    "\n\003nId\030\001 \002(\r\022\017\n\007titleID\030\002 \002(\005\022\021\n\ttitlenam"
    "e\030\003 \001(\t\022\016\n\006ishide\030\004 \001(\005\"K\n\022Map_SC_Change"
    "Equip\022\013\n\003nId\030\001 \002(\r\022(\n\nequip_list\030\002 \003(\0132\024"
    ".proto.message.Equip\"#\n\016Map_SC_DelSync\022\021"
    "\n\tnPlayerId\030\001 \002(\r\"n\n\013Map_SC_Move\022\013\n\003nId\030"
    "\001 \002(\r\022\"\n\002pt\030\002 \002(\0132\026.proto.message.Point3"
    "D\022\013\n\003dir\030\003 \002(\002\022\020\n\010velocity\030\004 \002(\002\022\017\n\007arri"
    "val\030\005 \001(\010\"T\n\024Map_SC_CheckPosition\022\013\n\003nId"
    "\030\001 \002(\r\022\"\n\002pt\030\002 \002(\0132\026.proto.message.Point"
    "3D\022\013\n\003dir\030\003 \002(\002\"\301\001\n\025Map_SC_AddSyncMonste"
    "r\022\n\n\002ID\030\001 \002(\r\022\r\n\005ProID\030\002 \002(\r\022\"\n\002pt\030\003 \002(\013"
    "2\026.proto.message.Point3D\022\013\n\003dir\030\004 \002(\002\022\020\n"
    "\010Velocity\030\005 \001(\005\022\r\n\005MaxHP\030\006 \001(\005\022\r\n\005CurHP\030"
    "\007 \001(\005\022\016\n\006max_tp\030\010 \001(\005\022\016\n\006cur_tp\030\t \001(\005\022\014\n"
    "\004cmap\030\n \001(\005\"J\n\021Map_CS_SpeelBegin\022\r\n\005Laye"
    "r\030\001 \002(\r\022\021\n\tTriggerId\030\002 \001(\005\022\023\n\013TriggerTyp"
    "e\030\003 \001(\r\"5\n\017Map_CS_SpeelEnd\022\"\n\002pt\030\001 \002(\0132\026"
    ".proto.message.Point3D\"Y\n\021Map_SC_SpeelBe"
    "gin\022\r\n\005PlyId\030\001 \002(\r\022\r\n\005Layer\030\002 \002(\r\022\021\n\tTri"
    "ggerId\030\003 \001(\005\022\023\n\013TriggerType\030\004 \001(\r\"\025\n\023Map"
    "_CS_ClientLoadOK\"a\n\020Map_SC_ChangeMap\022\r\n\005"
    "MapID\030\001 \002(\r\022\"\n\002Pt\030\003 \001(\0132\026.proto.message."
    "Point3D\022\013\n\003Dir\030\004 \001(\002\022\r\n\005Layer\030\005 \001(\005\"#\n\022M"
    "ap_CS_ChangeMapOK\022\r\n\005MapID\030\001 \001(\r\"6\n\023Map_"
    "CS_ReqChangeMap\022\r\n\005MapID\030\001 \001(\r\022\020\n\010Branch"
    "Id\030\002 \001(\r\",\n\025Map_CS_EnterSceneArea\022\023\n\013Sce"
    "neAreaId\030\001 \002(\r\",\n\025Map_CS_LeaveSceneArea\022"
    "\023\n\013SceneAreaId\030\001 \002(\r\"L\n\023Map_SC_TriggerEv"
    "ent\022\r\n\005PlyId\030\001 \002(\r\022\023\n\013TriggerType\030\002 \002(\r\022"
    "\021\n\tTriggerId\030\003 \002(\r\"=\n\023Map_CS_TriggerEven"
    "t\022\023\n\013TriggerType\030\001 \002(\r\022\021\n\tTriggerId\030\002 \002("
    "\r\">\n\025Map_SC_SyncAreaStatus\022\016\n\006CharId\030\001 \002"
    "(\r\022\025\n\rSceneAreaType\030\002 \001(\r\"V\n\026Map_SC_Mons"
    "terStopMove\022\013\n\003nId\030\001 \002(\r\022\"\n\002pt\030\002 \002(\0132\026.p"
    "roto.message.Point3D\022\013\n\003dir\030\003 \002(\002\"*\n\030Map"
    "_CS_TeamerLocationSyn\022\016\n\006opened\030\001 \002(\005\"[\n"
    "\010Location\022\r\n\005plyId\030\001 \002(\r\022\"\n\002pt\030\002 \002(\0132\026.p"
    "roto.message.Point3D\022\r\n\005MapID\030\003 \002(\r\022\r\n\005L"
    "ayer\030\004 \001(\r\"@\n\030Map_SC_TeamerLocationSyn\022$"
    "\n\003loc\030\001 \003(\0132\027.proto.message.Location\"\025\n\023"
    "Map_CS_StartParkour\"\023\n\021Map_CS_EndParkour"
    "\"!\n\022Map_CS_PickUpChest\022\013\n\003nID\030\001 \002(\r\"}\n\022M"
    "ap_SC_PickUpChest\022\016\n\006result\030\001 \001(\005\022(\n\010id_"
    "times\030\002 \001(\0132\026.proto.message.IDTimes\022-\n\ti"
    "tem_list\030\003 \003(\0132\032.proto.message.DropItemN"
    "um\"\"\n\023Map_SC_StartParkour\022\013\n\003res\030\001 \002(\005\"O"
    "\n\032Map_SC_PlayerCheckPosition\022\r\n\005plyId\030\001 "
    "\002(\r\022\"\n\002pt\030\002 \002(\0132\026.proto.message.Point3D\""
    "J\n\025Map_SC_PlayerStopMove\022\r\n\005plyId\030\001 \002(\r\022"
    "\"\n\002pt\030\002 \002(\0132\026.proto.message.Point3D\":\n\026M"
    "ap_SC_PlayerStateSync\022\r\n\005plyId\030\001 \002(\r\022\021\n\t"
    "SyncState\030\002 \002(\r\"@\n\032Map_CS_PlayerCheckPos"
    "ition\022\"\n\002pt\030\001 \002(\0132\026.proto.message.Point3"
    "D\";\n\025Map_CS_PlayerStopMove\022\"\n\002pt\030\001 \002(\0132\026"
    ".proto.message.Point3D\"+\n\026Map_CS_PlayerS"
    "tateSync\022\021\n\tSyncState\030\001 \002(\r\"\276\001\n\031Map_SC_A"
    "ddSyncRandomChest\022\n\n\002ID\030\001 \002(\r\022\r\n\005ProID\030\002"
    " \002(\r\022\"\n\002pt\030\003 \002(\0132\026.proto.message.Point3D"
    "\022\013\n\003dir\030\004 \002(\002\022\021\n\tCreateUid\030\005 \002(\004\022\022\n\nCrea"
    "teName\030\006 \002(\t\022\020\n\010Velocity\030\007 \001(\005\022\r\n\005MaxHP\030"
    "\010 \001(\005\022\r\n\005CurHP\030\t \001(\005\"+\n\020Map_SC_UpdateDir"
    "\022\n\n\002Id\030\001 \002(\r\022\013\n\003dir\030\002 \001(\002\"\025\n\023Map_CS_GetM"
    "apBranch\"\'\n\023Map_CS_ChangeBranch\022\020\n\010Branc"
    "hId\030\001 \002(\005\"1\n\nBranchInfo\022\020\n\010BranchId\030\001 \002("
    "\005\022\021\n\tPlayerNum\030\002 \002(\005\"E\n\023Map_SC_GetMapBra"
    "nch\022.\n\013branch_list\030\003 \003(\0132\031.proto.message"
    ".BranchInfo\"!\n\023Map_SC_ChangeBranch\022\n\n\002rt"
    "\030\001 \002(\005\";\n\025Map_CS_GameStoryStart\022\023\n\013GameS"
    "toryID\030\001 \002(\r\022\r\n\005NPCID\030\002 \001(\r\"9\n\023Map_CS_Ga"
    "meStoryEnd\022\023\n\013GameStoryID\030\001 \002(\r\022\r\n\005NPCID"
    "\030\002 \001(\r\"!\n\020Map_CS_NPCStopAI\022\r\n\005NPCID\030\001 \001("
    "\r\"#\n\022Map_CS_NPCActiveAI\022\r\n\005NPCID\030\001 \001(\r\"$"
    "\n\022Map_SC_MonsterTalk\022\016\n\006talkID\030\002 \001(\r\"@\n\032"
    "Map_SC_MonsterTurnBackSync\022\021\n\tMonsterID\030"
    "\001 \002(\r\022\017\n\007EndTick\030\002 \002(\004\">\n\026Map_SC_ChangeM"
    "apResult\022\016\n\006result\030\001 \001(\005\022\024\n\014map_table_id"
    "\030\002 \001(\005\"^\n\023Game2Match_PVPMatch\022\020\n\010iTableI"
    "d\030\001 \002(\005\0225\n\rsMatchPlyInfo\030\002 \002(\0132\036.proto.m"
    "essage.MatchPlayerInfo\"s\n\024Game2Match_Tea"
    "mMatch\022\020\n\010iTableId\030\001 \002(\005\022\020\n\010uiHostId\030\002 \002"
    "(\004\0227\n\017vecMatchPlyInfo\030\003 \003(\0132\036.proto.mess"
    "age.MatchPlayerInfo\"&\n\026Game2Match_Cancel"
    "Match\022\014\n\004uuid\030\001 \001(\004\"j\n\031Game2Client_World"
    "BossInfo\022\020\n\010uiBossId\030\001 \002(\r\022\023\n\013uiBossLeve"
    "l\030\002 \002(\r\022\024\n\014uiExpiryTime\030\003 \002(\r\022\020\n\010uiBossH"
    "p\030\004 \002(\004\"g\n\032Game2Battle_WorldBossStart\022\020\n"
    "\010uiBossId\030\001 \002(\r\022\023\n\013uiBossLevel\030\002 \002(\r\022\024\n\014"
    "uiExpiryTime\030\003 \002(\r\022\014\n\004uiHp\030\004 \002(\004\"@\n\030Clie"
    "nt2Game_WorldBossBid\022\023\n\013uiItemIndex\030\001 \002("
    "\r\022\017\n\007uiPrice\030\002 \002(\r\"@\n\030Game2Battle_WorldB"
    "ossBid\022\023\n\013uiItemIndex\030\001 \002(\r\022\017\n\007uiPrice\030\002"
    " \002(\r\"T\n!Game2Client_WolrdBoss_SaleHistor"
    "y\022/\n\004item\030\001 \003(\0132!.proto.message.WolrdBos"
    "sSaledItem\"*\n\025Map_CS_TicketBossInfo\022\021\n\tu"
    "iTableId\030\001 \002(\r\"e\n\025Map_SC_TicketBossInfo\022"
    "\021\n\tuiTableId\030\001 \003(\r\022\020\n\010uiBossId\030\002 \003(\r\022\020\n\010"
    "uiBossHp\030\003 \003(\004\022\025\n\ruiRefreshTime\030\004 \003(\r\"/\n"
    "\032Map_CS_TicketBossChallenge\022\021\n\tuiTableId"
    "\030\001 \002(\r\"A\n\032Map_SC_TicketBossChallenge\022\021\n\t"
    "uiTableId\030\001 \002(\r\022\020\n\010uiResult\030\002 \002(\r\"\"\n\017Map"
    "_CS_ChatMark\022\017\n\007channel\030\001 \002(\005\"H\n\023Map_CS_"
    "TakeDropItem\022\r\n\005uiKey\030\001 \002(\r\022\021\n\tuiTableId"
    "\030\002 \002(\r\022\017\n\007uiIndex\030\003 \002(\r\"\'\n\023Map_SC_TakeDr"
    "opItem\022\020\n\010uiResult\030\001 \002(\r\"4\n\037Game2Battle_"
    "TicketBossChallenge\022\021\n\tuiTableId\030\001 \002(\r\"d"
    "\n\030Game2Battle_TakeDropItem\022\r\n\005uiKey\030\001 \002("
    "\r\022\021\n\tuiTableId\030\002 \002(\r\022\017\n\007uiIndex\030\003 \002(\r\022\025\n"
    "\ruiNullGirdNum\030\004 \002(\r\"V\n\025Game2Match_Creat"
    "eRoom\022\013\n\003obj\030\001 \001(\005\0220\n\010sPlyInfo\030\002 \001(\0132\036.p"
    "roto.message.MatchPlayerInfo\"%\n\026Game2Mat"
    "ch_GetRoomList\022\013\n\003obj\030\001 \001(\005\"O\n\032Game2Batt"
    "le_UpdateHeadInfo\0221\n\004info\030\001 \001(\0132#.proto."
    "message.BattleSingleHeadInfo\"L\n Game2Mat"
    "ch_CreateTerritoryBattle\022(\n\004info\030\001 \003(\0132\032"
    ".proto.message.TBFieldInfoB\017\n\rproto.mess"
    "age", 5243);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "map.proto", &protobuf_RegisterTypes);
  Map_SC_NavPaths::default_instance_ = new Map_SC_NavPaths();
  Map_CS_PlayerPositionSync::default_instance_ = new Map_CS_PlayerPositionSync();
  Map_SC_AddSyncPlayer::default_instance_ = new Map_SC_AddSyncPlayer();
  Map_SC_ChangeTttle::default_instance_ = new Map_SC_ChangeTttle();
  Map_SC_ChangeEquip::default_instance_ = new Map_SC_ChangeEquip();
  Map_SC_DelSync::default_instance_ = new Map_SC_DelSync();
  Map_SC_Move::default_instance_ = new Map_SC_Move();
  Map_SC_CheckPosition::default_instance_ = new Map_SC_CheckPosition();
  Map_SC_AddSyncMonster::default_instance_ = new Map_SC_AddSyncMonster();
  Map_CS_SpeelBegin::default_instance_ = new Map_CS_SpeelBegin();
  Map_CS_SpeelEnd::default_instance_ = new Map_CS_SpeelEnd();
  Map_SC_SpeelBegin::default_instance_ = new Map_SC_SpeelBegin();
  Map_CS_ClientLoadOK::default_instance_ = new Map_CS_ClientLoadOK();
  Map_SC_ChangeMap::default_instance_ = new Map_SC_ChangeMap();
  Map_CS_ChangeMapOK::default_instance_ = new Map_CS_ChangeMapOK();
  Map_CS_ReqChangeMap::default_instance_ = new Map_CS_ReqChangeMap();
  Map_CS_EnterSceneArea::default_instance_ = new Map_CS_EnterSceneArea();
  Map_CS_LeaveSceneArea::default_instance_ = new Map_CS_LeaveSceneArea();
  Map_SC_TriggerEvent::default_instance_ = new Map_SC_TriggerEvent();
  Map_CS_TriggerEvent::default_instance_ = new Map_CS_TriggerEvent();
  Map_SC_SyncAreaStatus::default_instance_ = new Map_SC_SyncAreaStatus();
  Map_SC_MonsterStopMove::default_instance_ = new Map_SC_MonsterStopMove();
  Map_CS_TeamerLocationSyn::default_instance_ = new Map_CS_TeamerLocationSyn();
  Location::default_instance_ = new Location();
  Map_SC_TeamerLocationSyn::default_instance_ = new Map_SC_TeamerLocationSyn();
  Map_CS_StartParkour::default_instance_ = new Map_CS_StartParkour();
  Map_CS_EndParkour::default_instance_ = new Map_CS_EndParkour();
  Map_CS_PickUpChest::default_instance_ = new Map_CS_PickUpChest();
  Map_SC_PickUpChest::default_instance_ = new Map_SC_PickUpChest();
  Map_SC_StartParkour::default_instance_ = new Map_SC_StartParkour();
  Map_SC_PlayerCheckPosition::default_instance_ = new Map_SC_PlayerCheckPosition();
  Map_SC_PlayerStopMove::default_instance_ = new Map_SC_PlayerStopMove();
  Map_SC_PlayerStateSync::default_instance_ = new Map_SC_PlayerStateSync();
  Map_CS_PlayerCheckPosition::default_instance_ = new Map_CS_PlayerCheckPosition();
  Map_CS_PlayerStopMove::default_instance_ = new Map_CS_PlayerStopMove();
  Map_CS_PlayerStateSync::default_instance_ = new Map_CS_PlayerStateSync();
  Map_SC_AddSyncRandomChest::default_instance_ = new Map_SC_AddSyncRandomChest();
  Map_SC_UpdateDir::default_instance_ = new Map_SC_UpdateDir();
  Map_CS_GetMapBranch::default_instance_ = new Map_CS_GetMapBranch();
  Map_CS_ChangeBranch::default_instance_ = new Map_CS_ChangeBranch();
  BranchInfo::default_instance_ = new BranchInfo();
  Map_SC_GetMapBranch::default_instance_ = new Map_SC_GetMapBranch();
  Map_SC_ChangeBranch::default_instance_ = new Map_SC_ChangeBranch();
  Map_CS_GameStoryStart::default_instance_ = new Map_CS_GameStoryStart();
  Map_CS_GameStoryEnd::default_instance_ = new Map_CS_GameStoryEnd();
  Map_CS_NPCStopAI::default_instance_ = new Map_CS_NPCStopAI();
  Map_CS_NPCActiveAI::default_instance_ = new Map_CS_NPCActiveAI();
  Map_SC_MonsterTalk::default_instance_ = new Map_SC_MonsterTalk();
  Map_SC_MonsterTurnBackSync::default_instance_ = new Map_SC_MonsterTurnBackSync();
  Map_SC_ChangeMapResult::default_instance_ = new Map_SC_ChangeMapResult();
  Game2Match_PVPMatch::default_instance_ = new Game2Match_PVPMatch();
  Game2Match_TeamMatch::default_instance_ = new Game2Match_TeamMatch();
  Game2Match_CancelMatch::default_instance_ = new Game2Match_CancelMatch();
  Game2Client_WorldBossInfo::default_instance_ = new Game2Client_WorldBossInfo();
  Game2Battle_WorldBossStart::default_instance_ = new Game2Battle_WorldBossStart();
  Client2Game_WorldBossBid::default_instance_ = new Client2Game_WorldBossBid();
  Game2Battle_WorldBossBid::default_instance_ = new Game2Battle_WorldBossBid();
  Game2Client_WolrdBoss_SaleHistory::default_instance_ = new Game2Client_WolrdBoss_SaleHistory();
  Map_CS_TicketBossInfo::default_instance_ = new Map_CS_TicketBossInfo();
  Map_SC_TicketBossInfo::default_instance_ = new Map_SC_TicketBossInfo();
  Map_CS_TicketBossChallenge::default_instance_ = new Map_CS_TicketBossChallenge();
  Map_SC_TicketBossChallenge::default_instance_ = new Map_SC_TicketBossChallenge();
  Map_CS_ChatMark::default_instance_ = new Map_CS_ChatMark();
  Map_CS_TakeDropItem::default_instance_ = new Map_CS_TakeDropItem();
  Map_SC_TakeDropItem::default_instance_ = new Map_SC_TakeDropItem();
  Game2Battle_TicketBossChallenge::default_instance_ = new Game2Battle_TicketBossChallenge();
  Game2Battle_TakeDropItem::default_instance_ = new Game2Battle_TakeDropItem();
  Game2Match_CreateRoom::default_instance_ = new Game2Match_CreateRoom();
  Game2Match_GetRoomList::default_instance_ = new Game2Match_GetRoomList();
  Game2Battle_UpdateHeadInfo::default_instance_ = new Game2Battle_UpdateHeadInfo();
  Game2Match_CreateTerritoryBattle::default_instance_ = new Game2Match_CreateTerritoryBattle();
  Map_SC_NavPaths::default_instance_->InitAsDefaultInstance();
  Map_CS_PlayerPositionSync::default_instance_->InitAsDefaultInstance();
  Map_SC_AddSyncPlayer::default_instance_->InitAsDefaultInstance();
  Map_SC_ChangeTttle::default_instance_->InitAsDefaultInstance();
  Map_SC_ChangeEquip::default_instance_->InitAsDefaultInstance();
  Map_SC_DelSync::default_instance_->InitAsDefaultInstance();
  Map_SC_Move::default_instance_->InitAsDefaultInstance();
  Map_SC_CheckPosition::default_instance_->InitAsDefaultInstance();
  Map_SC_AddSyncMonster::default_instance_->InitAsDefaultInstance();
  Map_CS_SpeelBegin::default_instance_->InitAsDefaultInstance();
  Map_CS_SpeelEnd::default_instance_->InitAsDefaultInstance();
  Map_SC_SpeelBegin::default_instance_->InitAsDefaultInstance();
  Map_CS_ClientLoadOK::default_instance_->InitAsDefaultInstance();
  Map_SC_ChangeMap::default_instance_->InitAsDefaultInstance();
  Map_CS_ChangeMapOK::default_instance_->InitAsDefaultInstance();
  Map_CS_ReqChangeMap::default_instance_->InitAsDefaultInstance();
  Map_CS_EnterSceneArea::default_instance_->InitAsDefaultInstance();
  Map_CS_LeaveSceneArea::default_instance_->InitAsDefaultInstance();
  Map_SC_TriggerEvent::default_instance_->InitAsDefaultInstance();
  Map_CS_TriggerEvent::default_instance_->InitAsDefaultInstance();
  Map_SC_SyncAreaStatus::default_instance_->InitAsDefaultInstance();
  Map_SC_MonsterStopMove::default_instance_->InitAsDefaultInstance();
  Map_CS_TeamerLocationSyn::default_instance_->InitAsDefaultInstance();
  Location::default_instance_->InitAsDefaultInstance();
  Map_SC_TeamerLocationSyn::default_instance_->InitAsDefaultInstance();
  Map_CS_StartParkour::default_instance_->InitAsDefaultInstance();
  Map_CS_EndParkour::default_instance_->InitAsDefaultInstance();
  Map_CS_PickUpChest::default_instance_->InitAsDefaultInstance();
  Map_SC_PickUpChest::default_instance_->InitAsDefaultInstance();
  Map_SC_StartParkour::default_instance_->InitAsDefaultInstance();
  Map_SC_PlayerCheckPosition::default_instance_->InitAsDefaultInstance();
  Map_SC_PlayerStopMove::default_instance_->InitAsDefaultInstance();
  Map_SC_PlayerStateSync::default_instance_->InitAsDefaultInstance();
  Map_CS_PlayerCheckPosition::default_instance_->InitAsDefaultInstance();
  Map_CS_PlayerStopMove::default_instance_->InitAsDefaultInstance();
  Map_CS_PlayerStateSync::default_instance_->InitAsDefaultInstance();
  Map_SC_AddSyncRandomChest::default_instance_->InitAsDefaultInstance();
  Map_SC_UpdateDir::default_instance_->InitAsDefaultInstance();
  Map_CS_GetMapBranch::default_instance_->InitAsDefaultInstance();
  Map_CS_ChangeBranch::default_instance_->InitAsDefaultInstance();
  BranchInfo::default_instance_->InitAsDefaultInstance();
  Map_SC_GetMapBranch::default_instance_->InitAsDefaultInstance();
  Map_SC_ChangeBranch::default_instance_->InitAsDefaultInstance();
  Map_CS_GameStoryStart::default_instance_->InitAsDefaultInstance();
  Map_CS_GameStoryEnd::default_instance_->InitAsDefaultInstance();
  Map_CS_NPCStopAI::default_instance_->InitAsDefaultInstance();
  Map_CS_NPCActiveAI::default_instance_->InitAsDefaultInstance();
  Map_SC_MonsterTalk::default_instance_->InitAsDefaultInstance();
  Map_SC_MonsterTurnBackSync::default_instance_->InitAsDefaultInstance();
  Map_SC_ChangeMapResult::default_instance_->InitAsDefaultInstance();
  Game2Match_PVPMatch::default_instance_->InitAsDefaultInstance();
  Game2Match_TeamMatch::default_instance_->InitAsDefaultInstance();
  Game2Match_CancelMatch::default_instance_->InitAsDefaultInstance();
  Game2Client_WorldBossInfo::default_instance_->InitAsDefaultInstance();
  Game2Battle_WorldBossStart::default_instance_->InitAsDefaultInstance();
  Client2Game_WorldBossBid::default_instance_->InitAsDefaultInstance();
  Game2Battle_WorldBossBid::default_instance_->InitAsDefaultInstance();
  Game2Client_WolrdBoss_SaleHistory::default_instance_->InitAsDefaultInstance();
  Map_CS_TicketBossInfo::default_instance_->InitAsDefaultInstance();
  Map_SC_TicketBossInfo::default_instance_->InitAsDefaultInstance();
  Map_CS_TicketBossChallenge::default_instance_->InitAsDefaultInstance();
  Map_SC_TicketBossChallenge::default_instance_->InitAsDefaultInstance();
  Map_CS_ChatMark::default_instance_->InitAsDefaultInstance();
  Map_CS_TakeDropItem::default_instance_->InitAsDefaultInstance();
  Map_SC_TakeDropItem::default_instance_->InitAsDefaultInstance();
  Game2Battle_TicketBossChallenge::default_instance_->InitAsDefaultInstance();
  Game2Battle_TakeDropItem::default_instance_->InitAsDefaultInstance();
  Game2Match_CreateRoom::default_instance_->InitAsDefaultInstance();
  Game2Match_GetRoomList::default_instance_->InitAsDefaultInstance();
  Game2Battle_UpdateHeadInfo::default_instance_->InitAsDefaultInstance();
  Game2Match_CreateTerritoryBattle::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_map_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_map_2eproto {
  StaticDescriptorInitializer_map_2eproto() {
    protobuf_AddDesc_map_2eproto();
  }
} static_descriptor_initializer_map_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Map_SC_NavPaths::kIDFieldNumber;
const int Map_SC_NavPaths::kVelocityFieldNumber;
const int Map_SC_NavPaths::kPathsFieldNumber;
#endif  // !_MSC_VER

Map_SC_NavPaths::Map_SC_NavPaths()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Map_SC_NavPaths::InitAsDefaultInstance() {
}

Map_SC_NavPaths::Map_SC_NavPaths(const Map_SC_NavPaths& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Map_SC_NavPaths::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  velocity_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Map_SC_NavPaths::~Map_SC_NavPaths() {
  SharedDtor();
}

void Map_SC_NavPaths::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Map_SC_NavPaths::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Map_SC_NavPaths::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Map_SC_NavPaths_descriptor_;
}

const Map_SC_NavPaths& Map_SC_NavPaths::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

Map_SC_NavPaths* Map_SC_NavPaths::default_instance_ = NULL;

Map_SC_NavPaths* Map_SC_NavPaths::New() const {
  return new Map_SC_NavPaths;
}

void Map_SC_NavPaths::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    velocity_ = 0;
  }
  paths_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Map_SC_NavPaths::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_Velocity;
        break;
      }

      // required float Velocity = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Velocity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &velocity_)));
          set_has_velocity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_paths;
        break;
      }

      // repeated .proto.message.Point3D paths = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_paths:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_paths()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_paths;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Map_SC_NavPaths::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required float Velocity = 2;
  if (has_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->velocity(), output);
  }

  // repeated .proto.message.Point3D paths = 3;
  for (int i = 0; i < this->paths_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->paths(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Map_SC_NavPaths::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required float Velocity = 2;
  if (has_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->velocity(), target);
  }

  // repeated .proto.message.Point3D paths = 3;
  for (int i = 0; i < this->paths_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->paths(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Map_SC_NavPaths::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required float Velocity = 2;
    if (has_velocity()) {
      total_size += 1 + 4;
    }

  }
  // repeated .proto.message.Point3D paths = 3;
  total_size += 1 * this->paths_size();
  for (int i = 0; i < this->paths_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->paths(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Map_SC_NavPaths::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Map_SC_NavPaths* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Map_SC_NavPaths*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Map_SC_NavPaths::MergeFrom(const Map_SC_NavPaths& from) {
  GOOGLE_CHECK_NE(&from, this);
  paths_.MergeFrom(from.paths_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_velocity()) {
      set_velocity(from.velocity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Map_SC_NavPaths::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Map_SC_NavPaths::CopyFrom(const Map_SC_NavPaths& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Map_SC_NavPaths::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Map_SC_NavPaths::Swap(Map_SC_NavPaths* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(velocity_, other->velocity_);
    paths_.Swap(&other->paths_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Map_SC_NavPaths::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Map_SC_NavPaths_descriptor_;
  metadata.reflection = Map_SC_NavPaths_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Map_CS_PlayerPositionSync::kPtFieldNumber;
const int Map_CS_PlayerPositionSync::kDirFieldNumber;
const int Map_CS_PlayerPositionSync::kArrivalFieldNumber;
#endif  // !_MSC_VER

Map_CS_PlayerPositionSync::Map_CS_PlayerPositionSync()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Map_CS_PlayerPositionSync::InitAsDefaultInstance() {
  pt_ = const_cast< ::proto::message::Point3D*>(&::proto::message::Point3D::default_instance());
}

Map_CS_PlayerPositionSync::Map_CS_PlayerPositionSync(const Map_CS_PlayerPositionSync& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Map_CS_PlayerPositionSync::SharedCtor() {
  _cached_size_ = 0;
  pt_ = NULL;
  dir_ = 0;
  arrival_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Map_CS_PlayerPositionSync::~Map_CS_PlayerPositionSync() {
  SharedDtor();
}

void Map_CS_PlayerPositionSync::SharedDtor() {
  if (this != default_instance_) {
    delete pt_;
  }
}

void Map_CS_PlayerPositionSync::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Map_CS_PlayerPositionSync::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Map_CS_PlayerPositionSync_descriptor_;
}

const Map_CS_PlayerPositionSync& Map_CS_PlayerPositionSync::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

Map_CS_PlayerPositionSync* Map_CS_PlayerPositionSync::default_instance_ = NULL;

Map_CS_PlayerPositionSync* Map_CS_PlayerPositionSync::New() const {
  return new Map_CS_PlayerPositionSync;
}

void Map_CS_PlayerPositionSync::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_pt()) {
      if (pt_ != NULL) pt_->::proto::message::Point3D::Clear();
    }
    dir_ = 0;
    arrival_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Map_CS_PlayerPositionSync::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .proto.message.Point3D pt = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_dir;
        break;
      }

      // required float dir = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dir_)));
          set_has_dir();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_arrival;
        break;
      }

      // optional bool arrival = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_arrival:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &arrival_)));
          set_has_arrival();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Map_CS_PlayerPositionSync::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .proto.message.Point3D pt = 1;
  if (has_pt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pt(), output);
  }

  // required float dir = 2;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->dir(), output);
  }

  // optional bool arrival = 3;
  if (has_arrival()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->arrival(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Map_CS_PlayerPositionSync::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .proto.message.Point3D pt = 1;
  if (has_pt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pt(), target);
  }

  // required float dir = 2;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->dir(), target);
  }

  // optional bool arrival = 3;
  if (has_arrival()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->arrival(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Map_CS_PlayerPositionSync::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .proto.message.Point3D pt = 1;
    if (has_pt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pt());
    }

    // required float dir = 2;
    if (has_dir()) {
      total_size += 1 + 4;
    }

    // optional bool arrival = 3;
    if (has_arrival()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Map_CS_PlayerPositionSync::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Map_CS_PlayerPositionSync* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Map_CS_PlayerPositionSync*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Map_CS_PlayerPositionSync::MergeFrom(const Map_CS_PlayerPositionSync& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pt()) {
      mutable_pt()->::proto::message::Point3D::MergeFrom(from.pt());
    }
    if (from.has_dir()) {
      set_dir(from.dir());
    }
    if (from.has_arrival()) {
      set_arrival(from.arrival());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Map_CS_PlayerPositionSync::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Map_CS_PlayerPositionSync::CopyFrom(const Map_CS_PlayerPositionSync& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Map_CS_PlayerPositionSync::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Map_CS_PlayerPositionSync::Swap(Map_CS_PlayerPositionSync* other) {
  if (other != this) {
    std::swap(pt_, other->pt_);
    std::swap(dir_, other->dir_);
    std::swap(arrival_, other->arrival_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Map_CS_PlayerPositionSync::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Map_CS_PlayerPositionSync_descriptor_;
  metadata.reflection = Map_CS_PlayerPositionSync_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Map_SC_AddSyncPlayer::kNPlayerIdFieldNumber;
const int Map_SC_AddSyncPlayer::kPtFieldNumber;
const int Map_SC_AddSyncPlayer::kDirFieldNumber;
const int Map_SC_AddSyncPlayer::kNameFieldNumber;
const int Map_SC_AddSyncPlayer::kMaxHPFieldNumber;
const int Map_SC_AddSyncPlayer::kCurHPFieldNumber;
const int Map_SC_AddSyncPlayer::kLevelFieldNumber;
const int Map_SC_AddSyncPlayer::kEquipListFieldNumber;
const int Map_SC_AddSyncPlayer::kCareerFieldNumber;
const int Map_SC_AddSyncPlayer::kVelocityFieldNumber;
const int Map_SC_AddSyncPlayer::kTitleIDFieldNumber;
const int Map_SC_AddSyncPlayer::kLayerFieldNumber;
const int Map_SC_AddSyncPlayer::kTitlenameFieldNumber;
const int Map_SC_AddSyncPlayer::kTitleishideFieldNumber;
const int Map_SC_AddSyncPlayer::kSkillIdListFieldNumber;
const int Map_SC_AddSyncPlayer::kNPlayeruuidFieldNumber;
const int Map_SC_AddSyncPlayer::kNGuildidFieldNumber;
const int Map_SC_AddSyncPlayer::kGuildNameFieldNumber;
#endif  // !_MSC_VER

Map_SC_AddSyncPlayer::Map_SC_AddSyncPlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Map_SC_AddSyncPlayer::InitAsDefaultInstance() {
  pt_ = const_cast< ::proto::message::Point3D*>(&::proto::message::Point3D::default_instance());
}

Map_SC_AddSyncPlayer::Map_SC_AddSyncPlayer(const Map_SC_AddSyncPlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Map_SC_AddSyncPlayer::SharedCtor() {
  _cached_size_ = 0;
  nplayerid_ = 0u;
  pt_ = NULL;
  dir_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  maxhp_ = 0;
  curhp_ = 0;
  level_ = 0;
  career_ = 0;
  velocity_ = 0;
  titleid_ = 0;
  layer_ = 0;
  titlename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  titleishide_ = 0;
  nplayeruuid_ = GOOGLE_ULONGLONG(0);
  nguildid_ = GOOGLE_ULONGLONG(0);
  guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Map_SC_AddSyncPlayer::~Map_SC_AddSyncPlayer() {
  SharedDtor();
}

void Map_SC_AddSyncPlayer::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (titlename_ != &::google::protobuf::internal::kEmptyString) {
    delete titlename_;
  }
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    delete guildname_;
  }
  if (this != default_instance_) {
    delete pt_;
  }
}

void Map_SC_AddSyncPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Map_SC_AddSyncPlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Map_SC_AddSyncPlayer_descriptor_;
}

const Map_SC_AddSyncPlayer& Map_SC_AddSyncPlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

Map_SC_AddSyncPlayer* Map_SC_AddSyncPlayer::default_instance_ = NULL;

Map_SC_AddSyncPlayer* Map_SC_AddSyncPlayer::New() const {
  return new Map_SC_AddSyncPlayer;
}

void Map_SC_AddSyncPlayer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nplayerid_ = 0u;
    if (has_pt()) {
      if (pt_ != NULL) pt_->::proto::message::Point3D::Clear();
    }
    dir_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    maxhp_ = 0;
    curhp_ = 0;
    level_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    career_ = 0;
    velocity_ = 0;
    titleid_ = 0;
    layer_ = 0;
    if (has_titlename()) {
      if (titlename_ != &::google::protobuf::internal::kEmptyString) {
        titlename_->clear();
      }
    }
    titleishide_ = 0;
    nplayeruuid_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    nguildid_ = GOOGLE_ULONGLONG(0);
    if (has_guildname()) {
      if (guildname_ != &::google::protobuf::internal::kEmptyString) {
        guildname_->clear();
      }
    }
  }
  equip_list_.Clear();
  skill_id_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Map_SC_AddSyncPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 nPlayerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nplayerid_)));
          set_has_nplayerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pt;
        break;
      }

      // required .proto.message.Point3D pt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_dir;
        break;
      }

      // required float dir = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dir_)));
          set_has_dir();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_Name;
        break;
      }

      // optional string Name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_MaxHP;
        break;
      }

      // optional int32 MaxHP = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MaxHP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxhp_)));
          set_has_maxhp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_CurHP;
        break;
      }

      // optional int32 CurHP = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CurHP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curhp_)));
          set_has_curhp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_Level;
        break;
      }

      // optional int32 Level = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_equip_list;
        break;
      }

      // repeated .proto.message.Equip equip_list = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equip_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_equip_list;
        if (input->ExpectTag(72)) goto parse_career;
        break;
      }

      // optional int32 career = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_career:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &career_)));
          set_has_career();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_Velocity;
        break;
      }

      // optional int32 Velocity = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Velocity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &velocity_)));
          set_has_velocity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_titleID;
        break;
      }

      // optional int32 titleID = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_titleID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &titleid_)));
          set_has_titleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_layer;
        break;
      }

      // optional int32 layer = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_layer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &layer_)));
          set_has_layer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_titlename;
        break;
      }

      // optional string titlename = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_titlename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_titlename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->titlename().data(), this->titlename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_titleishide;
        break;
      }

      // optional int32 titleishide = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_titleishide:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &titleishide_)));
          set_has_titleishide();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_skill_id_list;
        break;
      }

      // repeated int32 skill_id_list = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_id_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 120, input, this->mutable_skill_id_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_skill_id_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_skill_id_list;
        if (input->ExpectTag(128)) goto parse_nPlayeruuid;
        break;
      }

      // optional uint64 nPlayeruuid = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nPlayeruuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nplayeruuid_)));
          set_has_nplayeruuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_nGuildid;
        break;
      }

      // optional uint64 nGuildid = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nGuildid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nguildid_)));
          set_has_nguildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_GuildName;
        break;
      }

      // optional string GuildName = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GuildName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guildname().data(), this->guildname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Map_SC_AddSyncPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 nPlayerId = 1;
  if (has_nplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->nplayerid(), output);
  }

  // required .proto.message.Point3D pt = 2;
  if (has_pt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pt(), output);
  }

  // required float dir = 3;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->dir(), output);
  }

  // optional string Name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->name(), output);
  }

  // optional int32 MaxHP = 5;
  if (has_maxhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->maxhp(), output);
  }

  // optional int32 CurHP = 6;
  if (has_curhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->curhp(), output);
  }

  // optional int32 Level = 7;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->level(), output);
  }

  // repeated .proto.message.Equip equip_list = 8;
  for (int i = 0; i < this->equip_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->equip_list(i), output);
  }

  // optional int32 career = 9;
  if (has_career()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->career(), output);
  }

  // optional int32 Velocity = 10;
  if (has_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->velocity(), output);
  }

  // optional int32 titleID = 11;
  if (has_titleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->titleid(), output);
  }

  // optional int32 layer = 12;
  if (has_layer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->layer(), output);
  }

  // optional string titlename = 13;
  if (has_titlename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->titlename().data(), this->titlename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->titlename(), output);
  }

  // optional int32 titleishide = 14;
  if (has_titleishide()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->titleishide(), output);
  }

  // repeated int32 skill_id_list = 15;
  for (int i = 0; i < this->skill_id_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      15, this->skill_id_list(i), output);
  }

  // optional uint64 nPlayeruuid = 16;
  if (has_nplayeruuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(16, this->nplayeruuid(), output);
  }

  // optional uint64 nGuildid = 17;
  if (has_nguildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(17, this->nguildid(), output);
  }

  // optional string GuildName = 18;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->guildname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Map_SC_AddSyncPlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 nPlayerId = 1;
  if (has_nplayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->nplayerid(), target);
  }

  // required .proto.message.Point3D pt = 2;
  if (has_pt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pt(), target);
  }

  // required float dir = 3;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->dir(), target);
  }

  // optional string Name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // optional int32 MaxHP = 5;
  if (has_maxhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->maxhp(), target);
  }

  // optional int32 CurHP = 6;
  if (has_curhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->curhp(), target);
  }

  // optional int32 Level = 7;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->level(), target);
  }

  // repeated .proto.message.Equip equip_list = 8;
  for (int i = 0; i < this->equip_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->equip_list(i), target);
  }

  // optional int32 career = 9;
  if (has_career()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->career(), target);
  }

  // optional int32 Velocity = 10;
  if (has_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->velocity(), target);
  }

  // optional int32 titleID = 11;
  if (has_titleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->titleid(), target);
  }

  // optional int32 layer = 12;
  if (has_layer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->layer(), target);
  }

  // optional string titlename = 13;
  if (has_titlename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->titlename().data(), this->titlename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->titlename(), target);
  }

  // optional int32 titleishide = 14;
  if (has_titleishide()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->titleishide(), target);
  }

  // repeated int32 skill_id_list = 15;
  for (int i = 0; i < this->skill_id_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(15, this->skill_id_list(i), target);
  }

  // optional uint64 nPlayeruuid = 16;
  if (has_nplayeruuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(16, this->nplayeruuid(), target);
  }

  // optional uint64 nGuildid = 17;
  if (has_nguildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(17, this->nguildid(), target);
  }

  // optional string GuildName = 18;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->guildname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Map_SC_AddSyncPlayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 nPlayerId = 1;
    if (has_nplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nplayerid());
    }

    // required .proto.message.Point3D pt = 2;
    if (has_pt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pt());
    }

    // required float dir = 3;
    if (has_dir()) {
      total_size += 1 + 4;
    }

    // optional string Name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 MaxHP = 5;
    if (has_maxhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxhp());
    }

    // optional int32 CurHP = 6;
    if (has_curhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curhp());
    }

    // optional int32 Level = 7;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 career = 9;
    if (has_career()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->career());
    }

    // optional int32 Velocity = 10;
    if (has_velocity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->velocity());
    }

    // optional int32 titleID = 11;
    if (has_titleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->titleid());
    }

    // optional int32 layer = 12;
    if (has_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->layer());
    }

    // optional string titlename = 13;
    if (has_titlename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->titlename());
    }

    // optional int32 titleishide = 14;
    if (has_titleishide()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->titleishide());
    }

    // optional uint64 nPlayeruuid = 16;
    if (has_nplayeruuid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->nplayeruuid());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint64 nGuildid = 17;
    if (has_nguildid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->nguildid());
    }

    // optional string GuildName = 18;
    if (has_guildname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildname());
    }

  }
  // repeated .proto.message.Equip equip_list = 8;
  total_size += 1 * this->equip_list_size();
  for (int i = 0; i < this->equip_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equip_list(i));
  }

  // repeated int32 skill_id_list = 15;
  {
    int data_size = 0;
    for (int i = 0; i < this->skill_id_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->skill_id_list(i));
    }
    total_size += 1 * this->skill_id_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Map_SC_AddSyncPlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Map_SC_AddSyncPlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Map_SC_AddSyncPlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Map_SC_AddSyncPlayer::MergeFrom(const Map_SC_AddSyncPlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  equip_list_.MergeFrom(from.equip_list_);
  skill_id_list_.MergeFrom(from.skill_id_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nplayerid()) {
      set_nplayerid(from.nplayerid());
    }
    if (from.has_pt()) {
      mutable_pt()->::proto::message::Point3D::MergeFrom(from.pt());
    }
    if (from.has_dir()) {
      set_dir(from.dir());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_maxhp()) {
      set_maxhp(from.maxhp());
    }
    if (from.has_curhp()) {
      set_curhp(from.curhp());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_career()) {
      set_career(from.career());
    }
    if (from.has_velocity()) {
      set_velocity(from.velocity());
    }
    if (from.has_titleid()) {
      set_titleid(from.titleid());
    }
    if (from.has_layer()) {
      set_layer(from.layer());
    }
    if (from.has_titlename()) {
      set_titlename(from.titlename());
    }
    if (from.has_titleishide()) {
      set_titleishide(from.titleishide());
    }
    if (from.has_nplayeruuid()) {
      set_nplayeruuid(from.nplayeruuid());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_nguildid()) {
      set_nguildid(from.nguildid());
    }
    if (from.has_guildname()) {
      set_guildname(from.guildname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Map_SC_AddSyncPlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Map_SC_AddSyncPlayer::CopyFrom(const Map_SC_AddSyncPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Map_SC_AddSyncPlayer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Map_SC_AddSyncPlayer::Swap(Map_SC_AddSyncPlayer* other) {
  if (other != this) {
    std::swap(nplayerid_, other->nplayerid_);
    std::swap(pt_, other->pt_);
    std::swap(dir_, other->dir_);
    std::swap(name_, other->name_);
    std::swap(maxhp_, other->maxhp_);
    std::swap(curhp_, other->curhp_);
    std::swap(level_, other->level_);
    equip_list_.Swap(&other->equip_list_);
    std::swap(career_, other->career_);
    std::swap(velocity_, other->velocity_);
    std::swap(titleid_, other->titleid_);
    std::swap(layer_, other->layer_);
    std::swap(titlename_, other->titlename_);
    std::swap(titleishide_, other->titleishide_);
    skill_id_list_.Swap(&other->skill_id_list_);
    std::swap(nplayeruuid_, other->nplayeruuid_);
    std::swap(nguildid_, other->nguildid_);
    std::swap(guildname_, other->guildname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Map_SC_AddSyncPlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Map_SC_AddSyncPlayer_descriptor_;
  metadata.reflection = Map_SC_AddSyncPlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Map_SC_ChangeTttle::kNIdFieldNumber;
const int Map_SC_ChangeTttle::kTitleIDFieldNumber;
const int Map_SC_ChangeTttle::kTitlenameFieldNumber;
const int Map_SC_ChangeTttle::kIshideFieldNumber;
#endif  // !_MSC_VER

Map_SC_ChangeTttle::Map_SC_ChangeTttle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Map_SC_ChangeTttle::InitAsDefaultInstance() {
}

Map_SC_ChangeTttle::Map_SC_ChangeTttle(const Map_SC_ChangeTttle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Map_SC_ChangeTttle::SharedCtor() {
  _cached_size_ = 0;
  nid_ = 0u;
  titleid_ = 0;
  titlename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ishide_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Map_SC_ChangeTttle::~Map_SC_ChangeTttle() {
  SharedDtor();
}

void Map_SC_ChangeTttle::SharedDtor() {
  if (titlename_ != &::google::protobuf::internal::kEmptyString) {
    delete titlename_;
  }
  if (this != default_instance_) {
  }
}

void Map_SC_ChangeTttle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Map_SC_ChangeTttle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Map_SC_ChangeTttle_descriptor_;
}

const Map_SC_ChangeTttle& Map_SC_ChangeTttle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

Map_SC_ChangeTttle* Map_SC_ChangeTttle::default_instance_ = NULL;

Map_SC_ChangeTttle* Map_SC_ChangeTttle::New() const {
  return new Map_SC_ChangeTttle;
}

void Map_SC_ChangeTttle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nid_ = 0u;
    titleid_ = 0;
    if (has_titlename()) {
      if (titlename_ != &::google::protobuf::internal::kEmptyString) {
        titlename_->clear();
      }
    }
    ishide_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Map_SC_ChangeTttle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 nId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nid_)));
          set_has_nid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_titleID;
        break;
      }

      // required int32 titleID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_titleID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &titleid_)));
          set_has_titleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_titlename;
        break;
      }

      // optional string titlename = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_titlename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_titlename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->titlename().data(), this->titlename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ishide;
        break;
      }

      // optional int32 ishide = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ishide:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ishide_)));
          set_has_ishide();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Map_SC_ChangeTttle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 nId = 1;
  if (has_nid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->nid(), output);
  }

  // required int32 titleID = 2;
  if (has_titleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->titleid(), output);
  }

  // optional string titlename = 3;
  if (has_titlename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->titlename().data(), this->titlename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->titlename(), output);
  }

  // optional int32 ishide = 4;
  if (has_ishide()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ishide(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Map_SC_ChangeTttle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 nId = 1;
  if (has_nid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->nid(), target);
  }

  // required int32 titleID = 2;
  if (has_titleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->titleid(), target);
  }

  // optional string titlename = 3;
  if (has_titlename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->titlename().data(), this->titlename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->titlename(), target);
  }

  // optional int32 ishide = 4;
  if (has_ishide()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ishide(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Map_SC_ChangeTttle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 nId = 1;
    if (has_nid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nid());
    }

    // required int32 titleID = 2;
    if (has_titleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->titleid());
    }

    // optional string titlename = 3;
    if (has_titlename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->titlename());
    }

    // optional int32 ishide = 4;
    if (has_ishide()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ishide());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Map_SC_ChangeTttle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Map_SC_ChangeTttle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Map_SC_ChangeTttle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Map_SC_ChangeTttle::MergeFrom(const Map_SC_ChangeTttle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nid()) {
      set_nid(from.nid());
    }
    if (from.has_titleid()) {
      set_titleid(from.titleid());
    }
    if (from.has_titlename()) {
      set_titlename(from.titlename());
    }
    if (from.has_ishide()) {
      set_ishide(from.ishide());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Map_SC_ChangeTttle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Map_SC_ChangeTttle::CopyFrom(const Map_SC_ChangeTttle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Map_SC_ChangeTttle::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Map_SC_ChangeTttle::Swap(Map_SC_ChangeTttle* other) {
  if (other != this) {
    std::swap(nid_, other->nid_);
    std::swap(titleid_, other->titleid_);
    std::swap(titlename_, other->titlename_);
    std::swap(ishide_, other->ishide_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Map_SC_ChangeTttle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Map_SC_ChangeTttle_descriptor_;
  metadata.reflection = Map_SC_ChangeTttle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Map_SC_ChangeEquip::kNIdFieldNumber;
const int Map_SC_ChangeEquip::kEquipListFieldNumber;
#endif  // !_MSC_VER

Map_SC_ChangeEquip::Map_SC_ChangeEquip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Map_SC_ChangeEquip::InitAsDefaultInstance() {
}

Map_SC_ChangeEquip::Map_SC_ChangeEquip(const Map_SC_ChangeEquip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Map_SC_ChangeEquip::SharedCtor() {
  _cached_size_ = 0;
  nid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Map_SC_ChangeEquip::~Map_SC_ChangeEquip() {
  SharedDtor();
}

void Map_SC_ChangeEquip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Map_SC_ChangeEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Map_SC_ChangeEquip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Map_SC_ChangeEquip_descriptor_;
}

const Map_SC_ChangeEquip& Map_SC_ChangeEquip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

Map_SC_ChangeEquip* Map_SC_ChangeEquip::default_instance_ = NULL;

Map_SC_ChangeEquip* Map_SC_ChangeEquip::New() const {
  return new Map_SC_ChangeEquip;
}

void Map_SC_ChangeEquip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nid_ = 0u;
  }
  equip_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Map_SC_ChangeEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 nId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nid_)));
          set_has_nid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_equip_list;
        break;
      }

      // repeated .proto.message.Equip equip_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equip_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_equip_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Map_SC_ChangeEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 nId = 1;
  if (has_nid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->nid(), output);
  }

  // repeated .proto.message.Equip equip_list = 2;
  for (int i = 0; i < this->equip_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->equip_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Map_SC_ChangeEquip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 nId = 1;
  if (has_nid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->nid(), target);
  }

  // repeated .proto.message.Equip equip_list = 2;
  for (int i = 0; i < this->equip_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->equip_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Map_SC_ChangeEquip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 nId = 1;
    if (has_nid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nid());
    }

  }
  // repeated .proto.message.Equip equip_list = 2;
  total_size += 1 * this->equip_list_size();
  for (int i = 0; i < this->equip_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equip_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Map_SC_ChangeEquip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Map_SC_ChangeEquip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Map_SC_ChangeEquip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Map_SC_ChangeEquip::MergeFrom(const Map_SC_ChangeEquip& from) {
  GOOGLE_CHECK_NE(&from, this);
  equip_list_.MergeFrom(from.equip_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nid()) {
      set_nid(from.nid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Map_SC_ChangeEquip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Map_SC_ChangeEquip::CopyFrom(const Map_SC_ChangeEquip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Map_SC_ChangeEquip::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Map_SC_ChangeEquip::Swap(Map_SC_ChangeEquip* other) {
  if (other != this) {
    std::swap(nid_, other->nid_);
    equip_list_.Swap(&other->equip_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Map_SC_ChangeEquip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Map_SC_ChangeEquip_descriptor_;
  metadata.reflection = Map_SC_ChangeEquip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Map_SC_DelSync::kNPlayerIdFieldNumber;
#endif  // !_MSC_VER

Map_SC_DelSync::Map_SC_DelSync()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Map_SC_DelSync::InitAsDefaultInstance() {
}

Map_SC_DelSync::Map_SC_DelSync(const Map_SC_DelSync& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Map_SC_DelSync::SharedCtor() {
  _cached_size_ = 0;
  nplayerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Map_SC_DelSync::~Map_SC_DelSync() {
  SharedDtor();
}

void Map_SC_DelSync::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Map_SC_DelSync::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Map_SC_DelSync::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Map_SC_DelSync_descriptor_;
}

const Map_SC_DelSync& Map_SC_DelSync::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

Map_SC_DelSync* Map_SC_DelSync::default_instance_ = NULL;

Map_SC_DelSync* Map_SC_DelSync::New() const {
  return new Map_SC_DelSync;
}

void Map_SC_DelSync::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nplayerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Map_SC_DelSync::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 nPlayerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nplayerid_)));
          set_has_nplayerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Map_SC_DelSync::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 nPlayerId = 1;
  if (has_nplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->nplayerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Map_SC_DelSync::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 nPlayerId = 1;
  if (has_nplayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->nplayerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Map_SC_DelSync::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 nPlayerId = 1;
    if (has_nplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nplayerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Map_SC_DelSync::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Map_SC_DelSync* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Map_SC_DelSync*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Map_SC_DelSync::MergeFrom(const Map_SC_DelSync& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nplayerid()) {
      set_nplayerid(from.nplayerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Map_SC_DelSync::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Map_SC_DelSync::CopyFrom(const Map_SC_DelSync& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Map_SC_DelSync::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Map_SC_DelSync::Swap(Map_SC_DelSync* other) {
  if (other != this) {
    std::swap(nplayerid_, other->nplayerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Map_SC_DelSync::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Map_SC_DelSync_descriptor_;
  metadata.reflection = Map_SC_DelSync_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Map_SC_Move::kNIdFieldNumber;
const int Map_SC_Move::kPtFieldNumber;
const int Map_SC_Move::kDirFieldNumber;
const int Map_SC_Move::kVelocityFieldNumber;
const int Map_SC_Move::kArrivalFieldNumber;
#endif  // !_MSC_VER

Map_SC_Move::Map_SC_Move()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Map_SC_Move::InitAsDefaultInstance() {
  pt_ = const_cast< ::proto::message::Point3D*>(&::proto::message::Point3D::default_instance());
}

Map_SC_Move::Map_SC_Move(const Map_SC_Move& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Map_SC_Move::SharedCtor() {
  _cached_size_ = 0;
  nid_ = 0u;
  pt_ = NULL;
  dir_ = 0;
  velocity_ = 0;
  arrival_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Map_SC_Move::~Map_SC_Move() {
  SharedDtor();
}

void Map_SC_Move::SharedDtor() {
  if (this != default_instance_) {
    delete pt_;
  }
}

void Map_SC_Move::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Map_SC_Move::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Map_SC_Move_descriptor_;
}

const Map_SC_Move& Map_SC_Move::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

Map_SC_Move* Map_SC_Move::default_instance_ = NULL;

Map_SC_Move* Map_SC_Move::New() const {
  return new Map_SC_Move;
}

void Map_SC_Move::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nid_ = 0u;
    if (has_pt()) {
      if (pt_ != NULL) pt_->::proto::message::Point3D::Clear();
    }
    dir_ = 0;
    velocity_ = 0;
    arrival_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Map_SC_Move::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 nId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nid_)));
          set_has_nid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pt;
        break;
      }

      // required .proto.message.Point3D pt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_dir;
        break;
      }

      // required float dir = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dir_)));
          set_has_dir();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_velocity;
        break;
      }

      // required float velocity = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_velocity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &velocity_)));
          set_has_velocity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_arrival;
        break;
      }

      // optional bool arrival = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_arrival:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &arrival_)));
          set_has_arrival();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Map_SC_Move::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 nId = 1;
  if (has_nid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->nid(), output);
  }

  // required .proto.message.Point3D pt = 2;
  if (has_pt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pt(), output);
  }

  // required float dir = 3;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->dir(), output);
  }

  // required float velocity = 4;
  if (has_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->velocity(), output);
  }

  // optional bool arrival = 5;
  if (has_arrival()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->arrival(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Map_SC_Move::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 nId = 1;
  if (has_nid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->nid(), target);
  }

  // required .proto.message.Point3D pt = 2;
  if (has_pt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pt(), target);
  }

  // required float dir = 3;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->dir(), target);
  }

  // required float velocity = 4;
  if (has_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->velocity(), target);
  }

  // optional bool arrival = 5;
  if (has_arrival()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->arrival(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Map_SC_Move::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 nId = 1;
    if (has_nid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nid());
    }

    // required .proto.message.Point3D pt = 2;
    if (has_pt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pt());
    }

    // required float dir = 3;
    if (has_dir()) {
      total_size += 1 + 4;
    }

    // required float velocity = 4;
    if (has_velocity()) {
      total_size += 1 + 4;
    }

    // optional bool arrival = 5;
    if (has_arrival()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Map_SC_Move::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Map_SC_Move* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Map_SC_Move*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Map_SC_Move::MergeFrom(const Map_SC_Move& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nid()) {
      set_nid(from.nid());
    }
    if (from.has_pt()) {
      mutable_pt()->::proto::message::Point3D::MergeFrom(from.pt());
    }
    if (from.has_dir()) {
      set_dir(from.dir());
    }
    if (from.has_velocity()) {
      set_velocity(from.velocity());
    }
    if (from.has_arrival()) {
      set_arrival(from.arrival());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Map_SC_Move::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Map_SC_Move::CopyFrom(const Map_SC_Move& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Map_SC_Move::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Map_SC_Move::Swap(Map_SC_Move* other) {
  if (other != this) {
    std::swap(nid_, other->nid_);
    std::swap(pt_, other->pt_);
    std::swap(dir_, other->dir_);
    std::swap(velocity_, other->velocity_);
    std::swap(arrival_, other->arrival_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Map_SC_Move::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Map_SC_Move_descriptor_;
  metadata.reflection = Map_SC_Move_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Map_SC_CheckPosition::kNIdFieldNumber;
const int Map_SC_CheckPosition::kPtFieldNumber;
const int Map_SC_CheckPosition::kDirFieldNumber;
#endif  // !_MSC_VER

Map_SC_CheckPosition::Map_SC_CheckPosition()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Map_SC_CheckPosition::InitAsDefaultInstance() {
  pt_ = const_cast< ::proto::message::Point3D*>(&::proto::message::Point3D::default_instance());
}

Map_SC_CheckPosition::Map_SC_CheckPosition(const Map_SC_CheckPosition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Map_SC_CheckPosition::SharedCtor() {
  _cached_size_ = 0;
  nid_ = 0u;
  pt_ = NULL;
  dir_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Map_SC_CheckPosition::~Map_SC_CheckPosition() {
  SharedDtor();
}

void Map_SC_CheckPosition::SharedDtor() {
  if (this != default_instance_) {
    delete pt_;
  }
}

void Map_SC_CheckPosition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Map_SC_CheckPosition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Map_SC_CheckPosition_descriptor_;
}

const Map_SC_CheckPosition& Map_SC_CheckPosition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

Map_SC_CheckPosition* Map_SC_CheckPosition::default_instance_ = NULL;

Map_SC_CheckPosition* Map_SC_CheckPosition::New() const {
  return new Map_SC_CheckPosition;
}

void Map_SC_CheckPosition::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nid_ = 0u;
    if (has_pt()) {
      if (pt_ != NULL) pt_->::proto::message::Point3D::Clear();
    }
    dir_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Map_SC_CheckPosition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 nId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nid_)));
          set_has_nid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pt;
        break;
      }

      // required .proto.message.Point3D pt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_dir;
        break;
      }

      // required float dir = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dir_)));
          set_has_dir();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Map_SC_CheckPosition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 nId = 1;
  if (has_nid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->nid(), output);
  }

  // required .proto.message.Point3D pt = 2;
  if (has_pt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pt(), output);
  }

  // required float dir = 3;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->dir(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Map_SC_CheckPosition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 nId = 1;
  if (has_nid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->nid(), target);
  }

  // required .proto.message.Point3D pt = 2;
  if (has_pt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pt(), target);
  }

  // required float dir = 3;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->dir(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Map_SC_CheckPosition::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 nId = 1;
    if (has_nid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nid());
    }

    // required .proto.message.Point3D pt = 2;
    if (has_pt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pt());
    }

    // required float dir = 3;
    if (has_dir()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Map_SC_CheckPosition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Map_SC_CheckPosition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Map_SC_CheckPosition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Map_SC_CheckPosition::MergeFrom(const Map_SC_CheckPosition& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nid()) {
      set_nid(from.nid());
    }
    if (from.has_pt()) {
      mutable_pt()->::proto::message::Point3D::MergeFrom(from.pt());
    }
    if (from.has_dir()) {
      set_dir(from.dir());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Map_SC_CheckPosition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Map_SC_CheckPosition::CopyFrom(const Map_SC_CheckPosition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Map_SC_CheckPosition::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Map_SC_CheckPosition::Swap(Map_SC_CheckPosition* other) {
  if (other != this) {
    std::swap(nid_, other->nid_);
    std::swap(pt_, other->pt_);
    std::swap(dir_, other->dir_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Map_SC_CheckPosition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Map_SC_CheckPosition_descriptor_;
  metadata.reflection = Map_SC_CheckPosition_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Map_SC_AddSyncMonster::kIDFieldNumber;
const int Map_SC_AddSyncMonster::kProIDFieldNumber;
const int Map_SC_AddSyncMonster::kPtFieldNumber;
const int Map_SC_AddSyncMonster::kDirFieldNumber;
const int Map_SC_AddSyncMonster::kVelocityFieldNumber;
const int Map_SC_AddSyncMonster::kMaxHPFieldNumber;
const int Map_SC_AddSyncMonster::kCurHPFieldNumber;
const int Map_SC_AddSyncMonster::kMaxTpFieldNumber;
const int Map_SC_AddSyncMonster::kCurTpFieldNumber;
const int Map_SC_AddSyncMonster::kCmapFieldNumber;
#endif  // !_MSC_VER

Map_SC_AddSyncMonster::Map_SC_AddSyncMonster()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Map_SC_AddSyncMonster::InitAsDefaultInstance() {
  pt_ = const_cast< ::proto::message::Point3D*>(&::proto::message::Point3D::default_instance());
}

Map_SC_AddSyncMonster::Map_SC_AddSyncMonster(const Map_SC_AddSyncMonster& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Map_SC_AddSyncMonster::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  proid_ = 0u;
  pt_ = NULL;
  dir_ = 0;
  velocity_ = 0;
  maxhp_ = 0;
  curhp_ = 0;
  max_tp_ = 0;
  cur_tp_ = 0;
  cmap_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Map_SC_AddSyncMonster::~Map_SC_AddSyncMonster() {
  SharedDtor();
}

void Map_SC_AddSyncMonster::SharedDtor() {
  if (this != default_instance_) {
    delete pt_;
  }
}

void Map_SC_AddSyncMonster::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Map_SC_AddSyncMonster::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Map_SC_AddSyncMonster_descriptor_;
}

const Map_SC_AddSyncMonster& Map_SC_AddSyncMonster::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

Map_SC_AddSyncMonster* Map_SC_AddSyncMonster::default_instance_ = NULL;

Map_SC_AddSyncMonster* Map_SC_AddSyncMonster::New() const {
  return new Map_SC_AddSyncMonster;
}

void Map_SC_AddSyncMonster::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    proid_ = 0u;
    if (has_pt()) {
      if (pt_ != NULL) pt_->::proto::message::Point3D::Clear();
    }
    dir_ = 0;
    velocity_ = 0;
    maxhp_ = 0;
    curhp_ = 0;
    max_tp_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    cur_tp_ = 0;
    cmap_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Map_SC_AddSyncMonster::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ProID;
        break;
      }

      // required uint32 ProID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ProID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &proid_)));
          set_has_proid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pt;
        break;
      }

      // required .proto.message.Point3D pt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_dir;
        break;
      }

      // required float dir = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dir_)));
          set_has_dir();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_Velocity;
        break;
      }

      // optional int32 Velocity = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Velocity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &velocity_)));
          set_has_velocity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_MaxHP;
        break;
      }

      // optional int32 MaxHP = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MaxHP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxhp_)));
          set_has_maxhp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_CurHP;
        break;
      }

      // optional int32 CurHP = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CurHP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curhp_)));
          set_has_curhp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_max_tp;
        break;
      }

      // optional int32 max_tp = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_tp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_tp_)));
          set_has_max_tp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_cur_tp;
        break;
      }

      // optional int32 cur_tp = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_tp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_tp_)));
          set_has_cur_tp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_cmap;
        break;
      }

      // optional int32 cmap = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cmap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmap_)));
          set_has_cmap();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Map_SC_AddSyncMonster::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 ProID = 2;
  if (has_proid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->proid(), output);
  }

  // required .proto.message.Point3D pt = 3;
  if (has_pt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pt(), output);
  }

  // required float dir = 4;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->dir(), output);
  }

  // optional int32 Velocity = 5;
  if (has_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->velocity(), output);
  }

  // optional int32 MaxHP = 6;
  if (has_maxhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->maxhp(), output);
  }

  // optional int32 CurHP = 7;
  if (has_curhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->curhp(), output);
  }

  // optional int32 max_tp = 8;
  if (has_max_tp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->max_tp(), output);
  }

  // optional int32 cur_tp = 9;
  if (has_cur_tp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->cur_tp(), output);
  }

  // optional int32 cmap = 10;
  if (has_cmap()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->cmap(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Map_SC_AddSyncMonster::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 ProID = 2;
  if (has_proid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->proid(), target);
  }

  // required .proto.message.Point3D pt = 3;
  if (has_pt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pt(), target);
  }

  // required float dir = 4;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->dir(), target);
  }

  // optional int32 Velocity = 5;
  if (has_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->velocity(), target);
  }

  // optional int32 MaxHP = 6;
  if (has_maxhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->maxhp(), target);
  }

  // optional int32 CurHP = 7;
  if (has_curhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->curhp(), target);
  }

  // optional int32 max_tp = 8;
  if (has_max_tp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->max_tp(), target);
  }

  // optional int32 cur_tp = 9;
  if (has_cur_tp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->cur_tp(), target);
  }

  // optional int32 cmap = 10;
  if (has_cmap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->cmap(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Map_SC_AddSyncMonster::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 ProID = 2;
    if (has_proid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->proid());
    }

    // required .proto.message.Point3D pt = 3;
    if (has_pt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pt());
    }

    // required float dir = 4;
    if (has_dir()) {
      total_size += 1 + 4;
    }

    // optional int32 Velocity = 5;
    if (has_velocity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->velocity());
    }

    // optional int32 MaxHP = 6;
    if (has_maxhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxhp());
    }

    // optional int32 CurHP = 7;
    if (has_curhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curhp());
    }

    // optional int32 max_tp = 8;
    if (has_max_tp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_tp());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 cur_tp = 9;
    if (has_cur_tp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_tp());
    }

    // optional int32 cmap = 10;
    if (has_cmap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmap());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Map_SC_AddSyncMonster::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Map_SC_AddSyncMonster* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Map_SC_AddSyncMonster*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Map_SC_AddSyncMonster::MergeFrom(const Map_SC_AddSyncMonster& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_proid()) {
      set_proid(from.proid());
    }
    if (from.has_pt()) {
      mutable_pt()->::proto::message::Point3D::MergeFrom(from.pt());
    }
    if (from.has_dir()) {
      set_dir(from.dir());
    }
    if (from.has_velocity()) {
      set_velocity(from.velocity());
    }
    if (from.has_maxhp()) {
      set_maxhp(from.maxhp());
    }
    if (from.has_curhp()) {
      set_curhp(from.curhp());
    }
    if (from.has_max_tp()) {
      set_max_tp(from.max_tp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_cur_tp()) {
      set_cur_tp(from.cur_tp());
    }
    if (from.has_cmap()) {
      set_cmap(from.cmap());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Map_SC_AddSyncMonster::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Map_SC_AddSyncMonster::CopyFrom(const Map_SC_AddSyncMonster& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Map_SC_AddSyncMonster::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Map_SC_AddSyncMonster::Swap(Map_SC_AddSyncMonster* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(proid_, other->proid_);
    std::swap(pt_, other->pt_);
    std::swap(dir_, other->dir_);
    std::swap(velocity_, other->velocity_);
    std::swap(maxhp_, other->maxhp_);
    std::swap(curhp_, other->curhp_);
    std::swap(max_tp_, other->max_tp_);
    std::swap(cur_tp_, other->cur_tp_);
    std::swap(cmap_, other->cmap_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Map_SC_AddSyncMonster::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Map_SC_AddSyncMonster_descriptor_;
  metadata.reflection = Map_SC_AddSyncMonster_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Map_CS_SpeelBegin::kLayerFieldNumber;
const int Map_CS_SpeelBegin::kTriggerIdFieldNumber;
const int Map_CS_SpeelBegin::kTriggerTypeFieldNumber;
#endif  // !_MSC_VER

Map_CS_SpeelBegin::Map_CS_SpeelBegin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Map_CS_SpeelBegin::InitAsDefaultInstance() {
}

Map_CS_SpeelBegin::Map_CS_SpeelBegin(const Map_CS_SpeelBegin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Map_CS_SpeelBegin::SharedCtor() {
  _cached_size_ = 0;
  layer_ = 0u;
  triggerid_ = 0;
  triggertype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Map_CS_SpeelBegin::~Map_CS_SpeelBegin() {
  SharedDtor();
}

void Map_CS_SpeelBegin::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Map_CS_SpeelBegin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Map_CS_SpeelBegin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Map_CS_SpeelBegin_descriptor_;
}

const Map_CS_SpeelBegin& Map_CS_SpeelBegin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

Map_CS_SpeelBegin* Map_CS_SpeelBegin::default_instance_ = NULL;

Map_CS_SpeelBegin* Map_CS_SpeelBegin::New() const {
  return new Map_CS_SpeelBegin;
}

void Map_CS_SpeelBegin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    layer_ = 0u;
    triggerid_ = 0;
    triggertype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Map_CS_SpeelBegin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Layer = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &layer_)));
          set_has_layer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_TriggerId;
        break;
      }

      // optional int32 TriggerId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TriggerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &triggerid_)));
          set_has_triggerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_TriggerType;
        break;
      }

      // optional uint32 TriggerType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TriggerType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &triggertype_)));
          set_has_triggertype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Map_CS_SpeelBegin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 Layer = 1;
  if (has_layer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->layer(), output);
  }

  // optional int32 TriggerId = 2;
  if (has_triggerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->triggerid(), output);
  }

  // optional uint32 TriggerType = 3;
  if (has_triggertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->triggertype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Map_CS_SpeelBegin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 Layer = 1;
  if (has_layer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->layer(), target);
  }

  // optional int32 TriggerId = 2;
  if (has_triggerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->triggerid(), target);
  }

  // optional uint32 TriggerType = 3;
  if (has_triggertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->triggertype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Map_CS_SpeelBegin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 Layer = 1;
    if (has_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->layer());
    }

    // optional int32 TriggerId = 2;
    if (has_triggerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->triggerid());
    }

    // optional uint32 TriggerType = 3;
    if (has_triggertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->triggertype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Map_CS_SpeelBegin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Map_CS_SpeelBegin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Map_CS_SpeelBegin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Map_CS_SpeelBegin::MergeFrom(const Map_CS_SpeelBegin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_layer()) {
      set_layer(from.layer());
    }
    if (from.has_triggerid()) {
      set_triggerid(from.triggerid());
    }
    if (from.has_triggertype()) {
      set_triggertype(from.triggertype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Map_CS_SpeelBegin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Map_CS_SpeelBegin::CopyFrom(const Map_CS_SpeelBegin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Map_CS_SpeelBegin::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Map_CS_SpeelBegin::Swap(Map_CS_SpeelBegin* other) {
  if (other != this) {
    std::swap(layer_, other->layer_);
    std::swap(triggerid_, other->triggerid_);
    std::swap(triggertype_, other->triggertype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Map_CS_SpeelBegin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Map_CS_SpeelBegin_descriptor_;
  metadata.reflection = Map_CS_SpeelBegin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Map_CS_SpeelEnd::kPtFieldNumber;
#endif  // !_MSC_VER

Map_CS_SpeelEnd::Map_CS_SpeelEnd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Map_CS_SpeelEnd::InitAsDefaultInstance() {
  pt_ = const_cast< ::proto::message::Point3D*>(&::proto::message::Point3D::default_instance());
}

Map_CS_SpeelEnd::Map_CS_SpeelEnd(const Map_CS_SpeelEnd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Map_CS_SpeelEnd::SharedCtor() {
  _cached_size_ = 0;
  pt_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Map_CS_SpeelEnd::~Map_CS_SpeelEnd() {
  SharedDtor();
}

void Map_CS_SpeelEnd::SharedDtor() {
  if (this != default_instance_) {
    delete pt_;
  }
}

void Map_CS_SpeelEnd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Map_CS_SpeelEnd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Map_CS_SpeelEnd_descriptor_;
}

const Map_CS_SpeelEnd& Map_CS_SpeelEnd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

Map_CS_SpeelEnd* Map_CS_SpeelEnd::default_instance_ = NULL;

Map_CS_SpeelEnd* Map_CS_SpeelEnd::New() const {
  return new Map_CS_SpeelEnd;
}

void Map_CS_SpeelEnd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_pt()) {
      if (pt_ != NULL) pt_->::proto::message::Point3D::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Map_CS_SpeelEnd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .proto.message.Point3D pt = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Map_CS_SpeelEnd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .proto.message.Point3D pt = 1;
  if (has_pt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Map_CS_SpeelEnd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .proto.message.Point3D pt = 1;
  if (has_pt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Map_CS_SpeelEnd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .proto.message.Point3D pt = 1;
    if (has_pt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Map_CS_SpeelEnd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Map_CS_SpeelEnd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Map_CS_SpeelEnd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Map_CS_SpeelEnd::MergeFrom(const Map_CS_SpeelEnd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pt()) {
      mutable_pt()->::proto::message::Point3D::MergeFrom(from.pt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Map_CS_SpeelEnd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Map_CS_SpeelEnd::CopyFrom(const Map_CS_SpeelEnd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Map_CS_SpeelEnd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Map_CS_SpeelEnd::Swap(Map_CS_SpeelEnd* other) {
  if (other != this) {
    std::swap(pt_, other->pt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Map_CS_SpeelEnd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Map_CS_SpeelEnd_descriptor_;
  metadata.reflection = Map_CS_SpeelEnd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Map_SC_SpeelBegin::kPlyIdFieldNumber;
const int Map_SC_SpeelBegin::kLayerFieldNumber;
const int Map_SC_SpeelBegin::kTriggerIdFieldNumber;
const int Map_SC_SpeelBegin::kTriggerTypeFieldNumber;
#endif  // !_MSC_VER

Map_SC_SpeelBegin::Map_SC_SpeelBegin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Map_SC_SpeelBegin::InitAsDefaultInstance() {
}

Map_SC_SpeelBegin::Map_SC_SpeelBegin(const Map_SC_SpeelBegin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Map_SC_SpeelBegin::SharedCtor() {
  _cached_size_ = 0;
  plyid_ = 0u;
  layer_ = 0u;
  triggerid_ = 0;
  triggertype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Map_SC_SpeelBegin::~Map_SC_SpeelBegin() {
  SharedDtor();
}

void Map_SC_SpeelBegin::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Map_SC_SpeelBegin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Map_SC_SpeelBegin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Map_SC_SpeelBegin_descriptor_;
}

const Map_SC_SpeelBegin& Map_SC_SpeelBegin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

Map_SC_SpeelBegin* Map_SC_SpeelBegin::default_instance_ = NULL;

Map_SC_SpeelBegin* Map_SC_SpeelBegin::New() const {
  return new Map_SC_SpeelBegin;
}

void Map_SC_SpeelBegin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    plyid_ = 0u;
    layer_ = 0u;
    triggerid_ = 0;
    triggertype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Map_SC_SpeelBegin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 PlyId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &plyid_)));
          set_has_plyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Layer;
        break;
      }

      // required uint32 Layer = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Layer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &layer_)));
          set_has_layer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_TriggerId;
        break;
      }

      // optional int32 TriggerId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TriggerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &triggerid_)));
          set_has_triggerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_TriggerType;
        break;
      }

      // optional uint32 TriggerType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TriggerType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &triggertype_)));
          set_has_triggertype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Map_SC_SpeelBegin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 PlyId = 1;
  if (has_plyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->plyid(), output);
  }

  // required uint32 Layer = 2;
  if (has_layer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->layer(), output);
  }

  // optional int32 TriggerId = 3;
  if (has_triggerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->triggerid(), output);
  }

  // optional uint32 TriggerType = 4;
  if (has_triggertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->triggertype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Map_SC_SpeelBegin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 PlyId = 1;
  if (has_plyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->plyid(), target);
  }

  // required uint32 Layer = 2;
  if (has_layer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->layer(), target);
  }

  // optional int32 TriggerId = 3;
  if (has_triggerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->triggerid(), target);
  }

  // optional uint32 TriggerType = 4;
  if (has_triggertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->triggertype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Map_SC_SpeelBegin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 PlyId = 1;
    if (has_plyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->plyid());
    }

    // required uint32 Layer = 2;
    if (has_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->layer());
    }

    // optional int32 TriggerId = 3;
    if (has_triggerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->triggerid());
    }

    // optional uint32 TriggerType = 4;
    if (has_triggertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->triggertype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Map_SC_SpeelBegin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Map_SC_SpeelBegin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Map_SC_SpeelBegin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Map_SC_SpeelBegin::MergeFrom(const Map_SC_SpeelBegin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_plyid()) {
      set_plyid(from.plyid());
    }
    if (from.has_layer()) {
      set_layer(from.layer());
    }
    if (from.has_triggerid()) {
      set_triggerid(from.triggerid());
    }
    if (from.has_triggertype()) {
      set_triggertype(from.triggertype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Map_SC_SpeelBegin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Map_SC_SpeelBegin::CopyFrom(const Map_SC_SpeelBegin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Map_SC_SpeelBegin::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Map_SC_SpeelBegin::Swap(Map_SC_SpeelBegin* other) {
  if (other != this) {
    std::swap(plyid_, other->plyid_);
    std::swap(layer_, other->layer_);
    std::swap(triggerid_, other->triggerid_);
    std::swap(triggertype_, other->triggertype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Map_SC_SpeelBegin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Map_SC_SpeelBegin_descriptor_;
  metadata.reflection = Map_SC_SpeelBegin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Map_CS_ClientLoadOK::Map_CS_ClientLoadOK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Map_CS_ClientLoadOK::InitAsDefaultInstance() {
}

Map_CS_ClientLoadOK::Map_CS_ClientLoadOK(const Map_CS_ClientLoadOK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Map_CS_ClientLoadOK::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Map_CS_ClientLoadOK::~Map_CS_ClientLoadOK() {
  SharedDtor();
}

void Map_CS_ClientLoadOK::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Map_CS_ClientLoadOK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Map_CS_ClientLoadOK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Map_CS_ClientLoadOK_descriptor_;
}

const Map_CS_ClientLoadOK& Map_CS_ClientLoadOK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

Map_CS_ClientLoadOK* Map_CS_ClientLoadOK::default_instance_ = NULL;

Map_CS_ClientLoadOK* Map_CS_ClientLoadOK::New() const {
  return new Map_CS_ClientLoadOK;
}

void Map_CS_ClientLoadOK::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Map_CS_ClientLoadOK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Map_CS_ClientLoadOK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Map_CS_ClientLoadOK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Map_CS_ClientLoadOK::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Map_CS_ClientLoadOK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Map_CS_ClientLoadOK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Map_CS_ClientLoadOK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Map_CS_ClientLoadOK::MergeFrom(const Map_CS_ClientLoadOK& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Map_CS_ClientLoadOK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Map_CS_ClientLoadOK::CopyFrom(const Map_CS_ClientLoadOK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Map_CS_ClientLoadOK::IsInitialized() const {

  return true;
}

void Map_CS_ClientLoadOK::Swap(Map_CS_ClientLoadOK* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Map_CS_ClientLoadOK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Map_CS_ClientLoadOK_descriptor_;
  metadata.reflection = Map_CS_ClientLoadOK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Map_SC_ChangeMap::kMapIDFieldNumber;
const int Map_SC_ChangeMap::kPtFieldNumber;
const int Map_SC_ChangeMap::kDirFieldNumber;
const int Map_SC_ChangeMap::kLayerFieldNumber;
#endif  // !_MSC_VER

Map_SC_ChangeMap::Map_SC_ChangeMap()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Map_SC_ChangeMap::InitAsDefaultInstance() {
  pt_ = const_cast< ::proto::message::Point3D*>(&::proto::message::Point3D::default_instance());
}

Map_SC_ChangeMap::Map_SC_ChangeMap(const Map_SC_ChangeMap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Map_SC_ChangeMap::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = 0u;
  pt_ = NULL;
  dir_ = 0;
  layer_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Map_SC_ChangeMap::~Map_SC_ChangeMap() {
  SharedDtor();
}

void Map_SC_ChangeMap::SharedDtor() {
  if (this != default_instance_) {
    delete pt_;
  }
}

void Map_SC_ChangeMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Map_SC_ChangeMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Map_SC_ChangeMap_descriptor_;
}

const Map_SC_ChangeMap& Map_SC_ChangeMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

Map_SC_ChangeMap* Map_SC_ChangeMap::default_instance_ = NULL;

Map_SC_ChangeMap* Map_SC_ChangeMap::New() const {
  return new Map_SC_ChangeMap;
}

void Map_SC_ChangeMap::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mapid_ = 0u;
    if (has_pt()) {
      if (pt_ != NULL) pt_->::proto::message::Point3D::Clear();
    }
    dir_ = 0;
    layer_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Map_SC_ChangeMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 MapID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Pt;
        break;
      }

      // optional .proto.message.Point3D Pt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Pt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_Dir;
        break;
      }

      // optional float Dir = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Dir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dir_)));
          set_has_dir();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_Layer;
        break;
      }

      // optional int32 Layer = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Layer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &layer_)));
          set_has_layer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Map_SC_ChangeMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 MapID = 1;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mapid(), output);
  }

  // optional .proto.message.Point3D Pt = 3;
  if (has_pt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pt(), output);
  }

  // optional float Dir = 4;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->dir(), output);
  }

  // optional int32 Layer = 5;
  if (has_layer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->layer(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Map_SC_ChangeMap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 MapID = 1;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mapid(), target);
  }

  // optional .proto.message.Point3D Pt = 3;
  if (has_pt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pt(), target);
  }

  // optional float Dir = 4;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->dir(), target);
  }

  // optional int32 Layer = 5;
  if (has_layer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->layer(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Map_SC_ChangeMap::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 MapID = 1;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }

    // optional .proto.message.Point3D Pt = 3;
    if (has_pt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pt());
    }

    // optional float Dir = 4;
    if (has_dir()) {
      total_size += 1 + 4;
    }

    // optional int32 Layer = 5;
    if (has_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->layer());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Map_SC_ChangeMap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Map_SC_ChangeMap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Map_SC_ChangeMap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Map_SC_ChangeMap::MergeFrom(const Map_SC_ChangeMap& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_pt()) {
      mutable_pt()->::proto::message::Point3D::MergeFrom(from.pt());
    }
    if (from.has_dir()) {
      set_dir(from.dir());
    }
    if (from.has_layer()) {
      set_layer(from.layer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Map_SC_ChangeMap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Map_SC_ChangeMap::CopyFrom(const Map_SC_ChangeMap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Map_SC_ChangeMap::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Map_SC_ChangeMap::Swap(Map_SC_ChangeMap* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    std::swap(pt_, other->pt_);
    std::swap(dir_, other->dir_);
    std::swap(layer_, other->layer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Map_SC_ChangeMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Map_SC_ChangeMap_descriptor_;
  metadata.reflection = Map_SC_ChangeMap_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Map_CS_ChangeMapOK::kMapIDFieldNumber;
#endif  // !_MSC_VER

Map_CS_ChangeMapOK::Map_CS_ChangeMapOK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Map_CS_ChangeMapOK::InitAsDefaultInstance() {
}

Map_CS_ChangeMapOK::Map_CS_ChangeMapOK(const Map_CS_ChangeMapOK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Map_CS_ChangeMapOK::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Map_CS_ChangeMapOK::~Map_CS_ChangeMapOK() {
  SharedDtor();
}

void Map_CS_ChangeMapOK::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Map_CS_ChangeMapOK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Map_CS_ChangeMapOK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Map_CS_ChangeMapOK_descriptor_;
}

const Map_CS_ChangeMapOK& Map_CS_ChangeMapOK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

Map_CS_ChangeMapOK* Map_CS_ChangeMapOK::default_instance_ = NULL;

Map_CS_ChangeMapOK* Map_CS_ChangeMapOK::New() const {
  return new Map_CS_ChangeMapOK;
}

void Map_CS_ChangeMapOK::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mapid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Map_CS_ChangeMapOK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 MapID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Map_CS_ChangeMapOK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 MapID = 1;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mapid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Map_CS_ChangeMapOK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 MapID = 1;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mapid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Map_CS_ChangeMapOK::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 MapID = 1;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Map_CS_ChangeMapOK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Map_CS_ChangeMapOK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Map_CS_ChangeMapOK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Map_CS_ChangeMapOK::MergeFrom(const Map_CS_ChangeMapOK& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Map_CS_ChangeMapOK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Map_CS_ChangeMapOK::CopyFrom(const Map_CS_ChangeMapOK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Map_CS_ChangeMapOK::IsInitialized() const {

  return true;
}

void Map_CS_ChangeMapOK::Swap(Map_CS_ChangeMapOK* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Map_CS_ChangeMapOK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Map_CS_ChangeMapOK_descriptor_;
  metadata.reflection = Map_CS_ChangeMapOK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Map_CS_ReqChangeMap::kMapIDFieldNumber;
const int Map_CS_ReqChangeMap::kBranchIdFieldNumber;
#endif  // !_MSC_VER

Map_CS_ReqChangeMap::Map_CS_ReqChangeMap()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Map_CS_ReqChangeMap::InitAsDefaultInstance() {
}

Map_CS_ReqChangeMap::Map_CS_ReqChangeMap(const Map_CS_ReqChangeMap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Map_CS_ReqChangeMap::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = 0u;
  branchid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Map_CS_ReqChangeMap::~Map_CS_ReqChangeMap() {
  SharedDtor();
}

void Map_CS_ReqChangeMap::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Map_CS_ReqChangeMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Map_CS_ReqChangeMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Map_CS_ReqChangeMap_descriptor_;
}

const Map_CS_ReqChangeMap& Map_CS_ReqChangeMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

Map_CS_ReqChangeMap* Map_CS_ReqChangeMap::default_instance_ = NULL;

Map_CS_ReqChangeMap* Map_CS_ReqChangeMap::New() const {
  return new Map_CS_ReqChangeMap;
}

void Map_CS_ReqChangeMap::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mapid_ = 0u;
    branchid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Map_CS_ReqChangeMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 MapID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_BranchId;
        break;
      }

      // optional uint32 BranchId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BranchId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &branchid_)));
          set_has_branchid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Map_CS_ReqChangeMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 MapID = 1;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mapid(), output);
  }

  // optional uint32 BranchId = 2;
  if (has_branchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->branchid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Map_CS_ReqChangeMap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 MapID = 1;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mapid(), target);
  }

  // optional uint32 BranchId = 2;
  if (has_branchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->branchid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Map_CS_ReqChangeMap::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 MapID = 1;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }

    // optional uint32 BranchId = 2;
    if (has_branchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->branchid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Map_CS_ReqChangeMap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Map_CS_ReqChangeMap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Map_CS_ReqChangeMap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Map_CS_ReqChangeMap::MergeFrom(const Map_CS_ReqChangeMap& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_branchid()) {
      set_branchid(from.branchid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Map_CS_ReqChangeMap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Map_CS_ReqChangeMap::CopyFrom(const Map_CS_ReqChangeMap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Map_CS_ReqChangeMap::IsInitialized() const {

  return true;
}

void Map_CS_ReqChangeMap::Swap(Map_CS_ReqChangeMap* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    std::swap(branchid_, other->branchid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Map_CS_ReqChangeMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Map_CS_ReqChangeMap_descriptor_;
  metadata.reflection = Map_CS_ReqChangeMap_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Map_CS_EnterSceneArea::kSceneAreaIdFieldNumber;
#endif  // !_MSC_VER

Map_CS_EnterSceneArea::Map_CS_EnterSceneArea()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Map_CS_EnterSceneArea::InitAsDefaultInstance() {
}

Map_CS_EnterSceneArea::Map_CS_EnterSceneArea(const Map_CS_EnterSceneArea& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Map_CS_EnterSceneArea::SharedCtor() {
  _cached_size_ = 0;
  sceneareaid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Map_CS_EnterSceneArea::~Map_CS_EnterSceneArea() {
  SharedDtor();
}

void Map_CS_EnterSceneArea::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Map_CS_EnterSceneArea::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Map_CS_EnterSceneArea::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Map_CS_EnterSceneArea_descriptor_;
}

const Map_CS_EnterSceneArea& Map_CS_EnterSceneArea::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

Map_CS_EnterSceneArea* Map_CS_EnterSceneArea::default_instance_ = NULL;

Map_CS_EnterSceneArea* Map_CS_EnterSceneArea::New() const {
  return new Map_CS_EnterSceneArea;
}

void Map_CS_EnterSceneArea::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sceneareaid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Map_CS_EnterSceneArea::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 SceneAreaId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sceneareaid_)));
          set_has_sceneareaid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Map_CS_EnterSceneArea::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 SceneAreaId = 1;
  if (has_sceneareaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sceneareaid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Map_CS_EnterSceneArea::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 SceneAreaId = 1;
  if (has_sceneareaid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sceneareaid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Map_CS_EnterSceneArea::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 SceneAreaId = 1;
    if (has_sceneareaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sceneareaid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Map_CS_EnterSceneArea::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Map_CS_EnterSceneArea* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Map_CS_EnterSceneArea*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Map_CS_EnterSceneArea::MergeFrom(const Map_CS_EnterSceneArea& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sceneareaid()) {
      set_sceneareaid(from.sceneareaid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Map_CS_EnterSceneArea::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Map_CS_EnterSceneArea::CopyFrom(const Map_CS_EnterSceneArea& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Map_CS_EnterSceneArea::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Map_CS_EnterSceneArea::Swap(Map_CS_EnterSceneArea* other) {
  if (other != this) {
    std::swap(sceneareaid_, other->sceneareaid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Map_CS_EnterSceneArea::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Map_CS_EnterSceneArea_descriptor_;
  metadata.reflection = Map_CS_EnterSceneArea_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Map_CS_LeaveSceneArea::kSceneAreaIdFieldNumber;
#endif  // !_MSC_VER

Map_CS_LeaveSceneArea::Map_CS_LeaveSceneArea()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Map_CS_LeaveSceneArea::InitAsDefaultInstance() {
}

Map_CS_LeaveSceneArea::Map_CS_LeaveSceneArea(const Map_CS_LeaveSceneArea& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Map_CS_LeaveSceneArea::SharedCtor() {
  _cached_size_ = 0;
  sceneareaid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Map_CS_LeaveSceneArea::~Map_CS_LeaveSceneArea() {
  SharedDtor();
}

void Map_CS_LeaveSceneArea::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Map_CS_LeaveSceneArea::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Map_CS_LeaveSceneArea::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Map_CS_LeaveSceneArea_descriptor_;
}

const Map_CS_LeaveSceneArea& Map_CS_LeaveSceneArea::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

Map_CS_LeaveSceneArea* Map_CS_LeaveSceneArea::default_instance_ = NULL;

Map_CS_LeaveSceneArea* Map_CS_LeaveSceneArea::New() const {
  return new Map_CS_LeaveSceneArea;
}

void Map_CS_LeaveSceneArea::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sceneareaid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Map_CS_LeaveSceneArea::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 SceneAreaId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sceneareaid_)));
          set_has_sceneareaid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Map_CS_LeaveSceneArea::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 SceneAreaId = 1;
  if (has_sceneareaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sceneareaid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Map_CS_LeaveSceneArea::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 SceneAreaId = 1;
  if (has_sceneareaid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sceneareaid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Map_CS_LeaveSceneArea::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 SceneAreaId = 1;
    if (has_sceneareaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sceneareaid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Map_CS_LeaveSceneArea::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Map_CS_LeaveSceneArea* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Map_CS_LeaveSceneArea*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Map_CS_LeaveSceneArea::MergeFrom(const Map_CS_LeaveSceneArea& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sceneareaid()) {
      set_sceneareaid(from.sceneareaid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Map_CS_LeaveSceneArea::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Map_CS_LeaveSceneArea::CopyFrom(const Map_CS_LeaveSceneArea& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Map_CS_LeaveSceneArea::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Map_CS_LeaveSceneArea::Swap(Map_CS_LeaveSceneArea* other) {
  if (other != this) {
    std::swap(sceneareaid_, other->sceneareaid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Map_CS_LeaveSceneArea::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Map_CS_LeaveSceneArea_descriptor_;
  metadata.reflection = Map_CS_LeaveSceneArea_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Map_SC_TriggerEvent::kPlyIdFieldNumber;
const int Map_SC_TriggerEvent::kTriggerTypeFieldNumber;
const int Map_SC_TriggerEvent::kTriggerIdFieldNumber;
#endif  // !_MSC_VER

Map_SC_TriggerEvent::Map_SC_TriggerEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Map_SC_TriggerEvent::InitAsDefaultInstance() {
}

Map_SC_TriggerEvent::Map_SC_TriggerEvent(const Map_SC_TriggerEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Map_SC_TriggerEvent::SharedCtor() {
  _cached_size_ = 0;
  plyid_ = 0u;
  triggertype_ = 0u;
  triggerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Map_SC_TriggerEvent::~Map_SC_TriggerEvent() {
  SharedDtor();
}

void Map_SC_TriggerEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Map_SC_TriggerEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Map_SC_TriggerEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Map_SC_TriggerEvent_descriptor_;
}

const Map_SC_TriggerEvent& Map_SC_TriggerEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

Map_SC_TriggerEvent* Map_SC_TriggerEvent::default_instance_ = NULL;

Map_SC_TriggerEvent* Map_SC_TriggerEvent::New() const {
  return new Map_SC_TriggerEvent;
}

void Map_SC_TriggerEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    plyid_ = 0u;
    triggertype_ = 0u;
    triggerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Map_SC_TriggerEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 PlyId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &plyid_)));
          set_has_plyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_TriggerType;
        break;
      }

      // required uint32 TriggerType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TriggerType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &triggertype_)));
          set_has_triggertype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_TriggerId;
        break;
      }

      // required uint32 TriggerId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TriggerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &triggerid_)));
          set_has_triggerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Map_SC_TriggerEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 PlyId = 1;
  if (has_plyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->plyid(), output);
  }

  // required uint32 TriggerType = 2;
  if (has_triggertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->triggertype(), output);
  }

  // required uint32 TriggerId = 3;
  if (has_triggerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->triggerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Map_SC_TriggerEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 PlyId = 1;
  if (has_plyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->plyid(), target);
  }

  // required uint32 TriggerType = 2;
  if (has_triggertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->triggertype(), target);
  }

  // required uint32 TriggerId = 3;
  if (has_triggerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->triggerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Map_SC_TriggerEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 PlyId = 1;
    if (has_plyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->plyid());
    }

    // required uint32 TriggerType = 2;
    if (has_triggertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->triggertype());
    }

    // required uint32 TriggerId = 3;
    if (has_triggerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->triggerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Map_SC_TriggerEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Map_SC_TriggerEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Map_SC_TriggerEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Map_SC_TriggerEvent::MergeFrom(const Map_SC_TriggerEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_plyid()) {
      set_plyid(from.plyid());
    }
    if (from.has_triggertype()) {
      set_triggertype(from.triggertype());
    }
    if (from.has_triggerid()) {
      set_triggerid(from.triggerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Map_SC_TriggerEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Map_SC_TriggerEvent::CopyFrom(const Map_SC_TriggerEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Map_SC_TriggerEvent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Map_SC_TriggerEvent::Swap(Map_SC_TriggerEvent* other) {
  if (other != this) {
    std::swap(plyid_, other->plyid_);
    std::swap(triggertype_, other->triggertype_);
    std::swap(triggerid_, other->triggerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Map_SC_TriggerEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Map_SC_TriggerEvent_descriptor_;
  metadata.reflection = Map_SC_TriggerEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Map_CS_TriggerEvent::kTriggerTypeFieldNumber;
const int Map_CS_TriggerEvent::kTriggerIdFieldNumber;
#endif  // !_MSC_VER

Map_CS_TriggerEvent::Map_CS_TriggerEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Map_CS_TriggerEvent::InitAsDefaultInstance() {
}

Map_CS_TriggerEvent::Map_CS_TriggerEvent(const Map_CS_TriggerEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Map_CS_TriggerEvent::SharedCtor() {
  _cached_size_ = 0;
  triggertype_ = 0u;
  triggerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Map_CS_TriggerEvent::~Map_CS_TriggerEvent() {
  SharedDtor();
}

void Map_CS_TriggerEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Map_CS_TriggerEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Map_CS_TriggerEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Map_CS_TriggerEvent_descriptor_;
}

const Map_CS_TriggerEvent& Map_CS_TriggerEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

Map_CS_TriggerEvent* Map_CS_TriggerEvent::default_instance_ = NULL;

Map_CS_TriggerEvent* Map_CS_TriggerEvent::New() const {
  return new Map_CS_TriggerEvent;
}

void Map_CS_TriggerEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    triggertype_ = 0u;
    triggerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Map_CS_TriggerEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 TriggerType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &triggertype_)));
          set_has_triggertype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_TriggerId;
        break;
      }

      // required uint32 TriggerId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TriggerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &triggerid_)));
          set_has_triggerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Map_CS_TriggerEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 TriggerType = 1;
  if (has_triggertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->triggertype(), output);
  }

  // required uint32 TriggerId = 2;
  if (has_triggerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->triggerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Map_CS_TriggerEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 TriggerType = 1;
  if (has_triggertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->triggertype(), target);
  }

  // required uint32 TriggerId = 2;
  if (has_triggerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->triggerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Map_CS_TriggerEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 TriggerType = 1;
    if (has_triggertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->triggertype());
    }

    // required uint32 TriggerId = 2;
    if (has_triggerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->triggerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Map_CS_TriggerEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Map_CS_TriggerEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Map_CS_TriggerEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Map_CS_TriggerEvent::MergeFrom(const Map_CS_TriggerEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_triggertype()) {
      set_triggertype(from.triggertype());
    }
    if (from.has_triggerid()) {
      set_triggerid(from.triggerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Map_CS_TriggerEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Map_CS_TriggerEvent::CopyFrom(const Map_CS_TriggerEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Map_CS_TriggerEvent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Map_CS_TriggerEvent::Swap(Map_CS_TriggerEvent* other) {
  if (other != this) {
    std::swap(triggertype_, other->triggertype_);
    std::swap(triggerid_, other->triggerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Map_CS_TriggerEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Map_CS_TriggerEvent_descriptor_;
  metadata.reflection = Map_CS_TriggerEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Map_SC_SyncAreaStatus::kCharIdFieldNumber;
const int Map_SC_SyncAreaStatus::kSceneAreaTypeFieldNumber;
#endif  // !_MSC_VER

Map_SC_SyncAreaStatus::Map_SC_SyncAreaStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Map_SC_SyncAreaStatus::InitAsDefaultInstance() {
}

Map_SC_SyncAreaStatus::Map_SC_SyncAreaStatus(const Map_SC_SyncAreaStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Map_SC_SyncAreaStatus::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  sceneareatype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Map_SC_SyncAreaStatus::~Map_SC_SyncAreaStatus() {
  SharedDtor();
}

void Map_SC_SyncAreaStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Map_SC_SyncAreaStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Map_SC_SyncAreaStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Map_SC_SyncAreaStatus_descriptor_;
}

const Map_SC_SyncAreaStatus& Map_SC_SyncAreaStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

Map_SC_SyncAreaStatus* Map_SC_SyncAreaStatus::default_instance_ = NULL;

Map_SC_SyncAreaStatus* Map_SC_SyncAreaStatus::New() const {
  return new Map_SC_SyncAreaStatus;
}

void Map_SC_SyncAreaStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    sceneareatype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Map_SC_SyncAreaStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 CharId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_SceneAreaType;
        break;
      }

      // optional uint32 SceneAreaType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SceneAreaType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sceneareatype_)));
          set_has_sceneareatype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Map_SC_SyncAreaStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 CharId = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 SceneAreaType = 2;
  if (has_sceneareatype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sceneareatype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Map_SC_SyncAreaStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 CharId = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 SceneAreaType = 2;
  if (has_sceneareatype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sceneareatype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Map_SC_SyncAreaStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 CharId = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 SceneAreaType = 2;
    if (has_sceneareatype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sceneareatype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Map_SC_SyncAreaStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Map_SC_SyncAreaStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Map_SC_SyncAreaStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Map_SC_SyncAreaStatus::MergeFrom(const Map_SC_SyncAreaStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_sceneareatype()) {
      set_sceneareatype(from.sceneareatype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Map_SC_SyncAreaStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Map_SC_SyncAreaStatus::CopyFrom(const Map_SC_SyncAreaStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Map_SC_SyncAreaStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Map_SC_SyncAreaStatus::Swap(Map_SC_SyncAreaStatus* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(sceneareatype_, other->sceneareatype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Map_SC_SyncAreaStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Map_SC_SyncAreaStatus_descriptor_;
  metadata.reflection = Map_SC_SyncAreaStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Map_SC_MonsterStopMove::kNIdFieldNumber;
const int Map_SC_MonsterStopMove::kPtFieldNumber;
const int Map_SC_MonsterStopMove::kDirFieldNumber;
#endif  // !_MSC_VER

Map_SC_MonsterStopMove::Map_SC_MonsterStopMove()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Map_SC_MonsterStopMove::InitAsDefaultInstance() {
  pt_ = const_cast< ::proto::message::Point3D*>(&::proto::message::Point3D::default_instance());
}

Map_SC_MonsterStopMove::Map_SC_MonsterStopMove(const Map_SC_MonsterStopMove& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Map_SC_MonsterStopMove::SharedCtor() {
  _cached_size_ = 0;
  nid_ = 0u;
  pt_ = NULL;
  dir_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Map_SC_MonsterStopMove::~Map_SC_MonsterStopMove() {
  SharedDtor();
}

void Map_SC_MonsterStopMove::SharedDtor() {
  if (this != default_instance_) {
    delete pt_;
  }
}

void Map_SC_MonsterStopMove::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Map_SC_MonsterStopMove::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Map_SC_MonsterStopMove_descriptor_;
}

const Map_SC_MonsterStopMove& Map_SC_MonsterStopMove::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

Map_SC_MonsterStopMove* Map_SC_MonsterStopMove::default_instance_ = NULL;

Map_SC_MonsterStopMove* Map_SC_MonsterStopMove::New() const {
  return new Map_SC_MonsterStopMove;
}

void Map_SC_MonsterStopMove::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nid_ = 0u;
    if (has_pt()) {
      if (pt_ != NULL) pt_->::proto::message::Point3D::Clear();
    }
    dir_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Map_SC_MonsterStopMove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 nId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nid_)));
          set_has_nid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pt;
        break;
      }

      // required .proto.message.Point3D pt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_dir;
        break;
      }

      // required float dir = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dir_)));
          set_has_dir();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Map_SC_MonsterStopMove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 nId = 1;
  if (has_nid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->nid(), output);
  }

  // required .proto.message.Point3D pt = 2;
  if (has_pt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pt(), output);
  }

  // required float dir = 3;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->dir(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Map_SC_MonsterStopMove::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 nId = 1;
  if (has_nid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->nid(), target);
  }

  // required .proto.message.Point3D pt = 2;
  if (has_pt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pt(), target);
  }

  // required float dir = 3;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->dir(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Map_SC_MonsterStopMove::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 nId = 1;
    if (has_nid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nid());
    }

    // required .proto.message.Point3D pt = 2;
    if (has_pt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pt());
    }

    // required float dir = 3;
    if (has_dir()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Map_SC_MonsterStopMove::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Map_SC_MonsterStopMove* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Map_SC_MonsterStopMove*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Map_SC_MonsterStopMove::MergeFrom(const Map_SC_MonsterStopMove& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nid()) {
      set_nid(from.nid());
    }
    if (from.has_pt()) {
      mutable_pt()->::proto::message::Point3D::MergeFrom(from.pt());
    }
    if (from.has_dir()) {
      set_dir(from.dir());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Map_SC_MonsterStopMove::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Map_SC_MonsterStopMove::CopyFrom(const Map_SC_MonsterStopMove& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Map_SC_MonsterStopMove::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Map_SC_MonsterStopMove::Swap(Map_SC_MonsterStopMove* other) {
  if (other != this) {
    std::swap(nid_, other->nid_);
    std::swap(pt_, other->pt_);
    std::swap(dir_, other->dir_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Map_SC_MonsterStopMove::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Map_SC_MonsterStopMove_descriptor_;
  metadata.reflection = Map_SC_MonsterStopMove_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Map_CS_TeamerLocationSyn::kOpenedFieldNumber;
#endif  // !_MSC_VER

Map_CS_TeamerLocationSyn::Map_CS_TeamerLocationSyn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Map_CS_TeamerLocationSyn::InitAsDefaultInstance() {
}

Map_CS_TeamerLocationSyn::Map_CS_TeamerLocationSyn(const Map_CS_TeamerLocationSyn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Map_CS_TeamerLocationSyn::SharedCtor() {
  _cached_size_ = 0;
  opened_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Map_CS_TeamerLocationSyn::~Map_CS_TeamerLocationSyn() {
  SharedDtor();
}

void Map_CS_TeamerLocationSyn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Map_CS_TeamerLocationSyn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Map_CS_TeamerLocationSyn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Map_CS_TeamerLocationSyn_descriptor_;
}

const Map_CS_TeamerLocationSyn& Map_CS_TeamerLocationSyn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

Map_CS_TeamerLocationSyn* Map_CS_TeamerLocationSyn::default_instance_ = NULL;

Map_CS_TeamerLocationSyn* Map_CS_TeamerLocationSyn::New() const {
  return new Map_CS_TeamerLocationSyn;
}

void Map_CS_TeamerLocationSyn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opened_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Map_CS_TeamerLocationSyn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opened = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opened_)));
          set_has_opened();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Map_CS_TeamerLocationSyn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opened = 1;
  if (has_opened()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opened(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Map_CS_TeamerLocationSyn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opened = 1;
  if (has_opened()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->opened(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Map_CS_TeamerLocationSyn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opened = 1;
    if (has_opened()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opened());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Map_CS_TeamerLocationSyn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Map_CS_TeamerLocationSyn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Map_CS_TeamerLocationSyn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Map_CS_TeamerLocationSyn::MergeFrom(const Map_CS_TeamerLocationSyn& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opened()) {
      set_opened(from.opened());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Map_CS_TeamerLocationSyn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Map_CS_TeamerLocationSyn::CopyFrom(const Map_CS_TeamerLocationSyn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Map_CS_TeamerLocationSyn::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Map_CS_TeamerLocationSyn::Swap(Map_CS_TeamerLocationSyn* other) {
  if (other != this) {
    std::swap(opened_, other->opened_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Map_CS_TeamerLocationSyn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Map_CS_TeamerLocationSyn_descriptor_;
  metadata.reflection = Map_CS_TeamerLocationSyn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Location::kPlyIdFieldNumber;
const int Location::kPtFieldNumber;
const int Location::kMapIDFieldNumber;
const int Location::kLayerFieldNumber;
#endif  // !_MSC_VER

Location::Location()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Location::InitAsDefaultInstance() {
  pt_ = const_cast< ::proto::message::Point3D*>(&::proto::message::Point3D::default_instance());
}

Location::Location(const Location& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Location::SharedCtor() {
  _cached_size_ = 0;
  plyid_ = 0u;
  pt_ = NULL;
  mapid_ = 0u;
  layer_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Location::~Location() {
  SharedDtor();
}

void Location::SharedDtor() {
  if (this != default_instance_) {
    delete pt_;
  }
}

void Location::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Location::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Location_descriptor_;
}

const Location& Location::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

Location* Location::default_instance_ = NULL;

Location* Location::New() const {
  return new Location;
}

void Location::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    plyid_ = 0u;
    if (has_pt()) {
      if (pt_ != NULL) pt_->::proto::message::Point3D::Clear();
    }
    mapid_ = 0u;
    layer_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Location::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 plyId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &plyid_)));
          set_has_plyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pt;
        break;
      }

      // required .proto.message.Point3D pt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_MapID;
        break;
      }

      // required uint32 MapID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MapID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Layer;
        break;
      }

      // optional uint32 Layer = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Layer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &layer_)));
          set_has_layer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Location::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 plyId = 1;
  if (has_plyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->plyid(), output);
  }

  // required .proto.message.Point3D pt = 2;
  if (has_pt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pt(), output);
  }

  // required uint32 MapID = 3;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mapid(), output);
  }

  // optional uint32 Layer = 4;
  if (has_layer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->layer(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Location::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 plyId = 1;
  if (has_plyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->plyid(), target);
  }

  // required .proto.message.Point3D pt = 2;
  if (has_pt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pt(), target);
  }

  // required uint32 MapID = 3;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mapid(), target);
  }

  // optional uint32 Layer = 4;
  if (has_layer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->layer(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Location::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 plyId = 1;
    if (has_plyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->plyid());
    }

    // required .proto.message.Point3D pt = 2;
    if (has_pt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pt());
    }

    // required uint32 MapID = 3;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }

    // optional uint32 Layer = 4;
    if (has_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->layer());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Location::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Location* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Location*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Location::MergeFrom(const Location& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_plyid()) {
      set_plyid(from.plyid());
    }
    if (from.has_pt()) {
      mutable_pt()->::proto::message::Point3D::MergeFrom(from.pt());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_layer()) {
      set_layer(from.layer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Location::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Location::CopyFrom(const Location& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Location::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Location::Swap(Location* other) {
  if (other != this) {
    std::swap(plyid_, other->plyid_);
    std::swap(pt_, other->pt_);
    std::swap(mapid_, other->mapid_);
    std::swap(layer_, other->layer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Location::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Location_descriptor_;
  metadata.reflection = Location_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Map_SC_TeamerLocationSyn::kLocFieldNumber;
#endif  // !_MSC_VER

Map_SC_TeamerLocationSyn::Map_SC_TeamerLocationSyn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Map_SC_TeamerLocationSyn::InitAsDefaultInstance() {
}

Map_SC_TeamerLocationSyn::Map_SC_TeamerLocationSyn(const Map_SC_TeamerLocationSyn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Map_SC_TeamerLocationSyn::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Map_SC_TeamerLocationSyn::~Map_SC_TeamerLocationSyn() {
  SharedDtor();
}

void Map_SC_TeamerLocationSyn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Map_SC_TeamerLocationSyn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Map_SC_TeamerLocationSyn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Map_SC_TeamerLocationSyn_descriptor_;
}

const Map_SC_TeamerLocationSyn& Map_SC_TeamerLocationSyn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

Map_SC_TeamerLocationSyn* Map_SC_TeamerLocationSyn::default_instance_ = NULL;

Map_SC_TeamerLocationSyn* Map_SC_TeamerLocationSyn::New() const {
  return new Map_SC_TeamerLocationSyn;
}

void Map_SC_TeamerLocationSyn::Clear() {
  loc_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Map_SC_TeamerLocationSyn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.message.Location loc = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_loc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_loc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_loc;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Map_SC_TeamerLocationSyn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.message.Location loc = 1;
  for (int i = 0; i < this->loc_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->loc(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Map_SC_TeamerLocationSyn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.message.Location loc = 1;
  for (int i = 0; i < this->loc_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->loc(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Map_SC_TeamerLocationSyn::ByteSize() const {
  int total_size = 0;

  // repeated .proto.message.Location loc = 1;
  total_size += 1 * this->loc_size();
  for (int i = 0; i < this->loc_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->loc(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Map_SC_TeamerLocationSyn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Map_SC_TeamerLocationSyn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Map_SC_TeamerLocationSyn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Map_SC_TeamerLocationSyn::MergeFrom(const Map_SC_TeamerLocationSyn& from) {
  GOOGLE_CHECK_NE(&from, this);
  loc_.MergeFrom(from.loc_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Map_SC_TeamerLocationSyn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Map_SC_TeamerLocationSyn::CopyFrom(const Map_SC_TeamerLocationSyn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Map_SC_TeamerLocationSyn::IsInitialized() const {

  for (int i = 0; i < loc_size(); i++) {
    if (!this->loc(i).IsInitialized()) return false;
  }
  return true;
}

void Map_SC_TeamerLocationSyn::Swap(Map_SC_TeamerLocationSyn* other) {
  if (other != this) {
    loc_.Swap(&other->loc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Map_SC_TeamerLocationSyn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Map_SC_TeamerLocationSyn_descriptor_;
  metadata.reflection = Map_SC_TeamerLocationSyn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Map_CS_StartParkour::Map_CS_StartParkour()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Map_CS_StartParkour::InitAsDefaultInstance() {
}

Map_CS_StartParkour::Map_CS_StartParkour(const Map_CS_StartParkour& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Map_CS_StartParkour::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Map_CS_StartParkour::~Map_CS_StartParkour() {
  SharedDtor();
}

void Map_CS_StartParkour::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Map_CS_StartParkour::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Map_CS_StartParkour::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Map_CS_StartParkour_descriptor_;
}

const Map_CS_StartParkour& Map_CS_StartParkour::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

Map_CS_StartParkour* Map_CS_StartParkour::default_instance_ = NULL;

Map_CS_StartParkour* Map_CS_StartParkour::New() const {
  return new Map_CS_StartParkour;
}

void Map_CS_StartParkour::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Map_CS_StartParkour::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Map_CS_StartParkour::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Map_CS_StartParkour::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Map_CS_StartParkour::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Map_CS_StartParkour::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Map_CS_StartParkour* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Map_CS_StartParkour*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Map_CS_StartParkour::MergeFrom(const Map_CS_StartParkour& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Map_CS_StartParkour::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Map_CS_StartParkour::CopyFrom(const Map_CS_StartParkour& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Map_CS_StartParkour::IsInitialized() const {

  return true;
}

void Map_CS_StartParkour::Swap(Map_CS_StartParkour* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Map_CS_StartParkour::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Map_CS_StartParkour_descriptor_;
  metadata.reflection = Map_CS_StartParkour_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Map_CS_EndParkour::Map_CS_EndParkour()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Map_CS_EndParkour::InitAsDefaultInstance() {
}

Map_CS_EndParkour::Map_CS_EndParkour(const Map_CS_EndParkour& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Map_CS_EndParkour::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Map_CS_EndParkour::~Map_CS_EndParkour() {
  SharedDtor();
}

void Map_CS_EndParkour::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Map_CS_EndParkour::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Map_CS_EndParkour::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Map_CS_EndParkour_descriptor_;
}

const Map_CS_EndParkour& Map_CS_EndParkour::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

Map_CS_EndParkour* Map_CS_EndParkour::default_instance_ = NULL;

Map_CS_EndParkour* Map_CS_EndParkour::New() const {
  return new Map_CS_EndParkour;
}

void Map_CS_EndParkour::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Map_CS_EndParkour::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Map_CS_EndParkour::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Map_CS_EndParkour::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Map_CS_EndParkour::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Map_CS_EndParkour::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Map_CS_EndParkour* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Map_CS_EndParkour*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Map_CS_EndParkour::MergeFrom(const Map_CS_EndParkour& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Map_CS_EndParkour::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Map_CS_EndParkour::CopyFrom(const Map_CS_EndParkour& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Map_CS_EndParkour::IsInitialized() const {

  return true;
}

void Map_CS_EndParkour::Swap(Map_CS_EndParkour* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Map_CS_EndParkour::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Map_CS_EndParkour_descriptor_;
  metadata.reflection = Map_CS_EndParkour_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Map_CS_PickUpChest::kNIDFieldNumber;
#endif  // !_MSC_VER

Map_CS_PickUpChest::Map_CS_PickUpChest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Map_CS_PickUpChest::InitAsDefaultInstance() {
}

Map_CS_PickUpChest::Map_CS_PickUpChest(const Map_CS_PickUpChest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Map_CS_PickUpChest::SharedCtor() {
  _cached_size_ = 0;
  nid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Map_CS_PickUpChest::~Map_CS_PickUpChest() {
  SharedDtor();
}

void Map_CS_PickUpChest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Map_CS_PickUpChest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Map_CS_PickUpChest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Map_CS_PickUpChest_descriptor_;
}

const Map_CS_PickUpChest& Map_CS_PickUpChest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

Map_CS_PickUpChest* Map_CS_PickUpChest::default_instance_ = NULL;

Map_CS_PickUpChest* Map_CS_PickUpChest::New() const {
  return new Map_CS_PickUpChest;
}

void Map_CS_PickUpChest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Map_CS_PickUpChest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 nID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nid_)));
          set_has_nid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Map_CS_PickUpChest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 nID = 1;
  if (has_nid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->nid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Map_CS_PickUpChest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 nID = 1;
  if (has_nid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->nid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Map_CS_PickUpChest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 nID = 1;
    if (has_nid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Map_CS_PickUpChest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Map_CS_PickUpChest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Map_CS_PickUpChest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Map_CS_PickUpChest::MergeFrom(const Map_CS_PickUpChest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nid()) {
      set_nid(from.nid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Map_CS_PickUpChest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Map_CS_PickUpChest::CopyFrom(const Map_CS_PickUpChest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Map_CS_PickUpChest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Map_CS_PickUpChest::Swap(Map_CS_PickUpChest* other) {
  if (other != this) {
    std::swap(nid_, other->nid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Map_CS_PickUpChest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Map_CS_PickUpChest_descriptor_;
  metadata.reflection = Map_CS_PickUpChest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Map_SC_PickUpChest::kResultFieldNumber;
const int Map_SC_PickUpChest::kIdTimesFieldNumber;
const int Map_SC_PickUpChest::kItemListFieldNumber;
#endif  // !_MSC_VER

Map_SC_PickUpChest::Map_SC_PickUpChest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Map_SC_PickUpChest::InitAsDefaultInstance() {
  id_times_ = const_cast< ::proto::message::IDTimes*>(&::proto::message::IDTimes::default_instance());
}

Map_SC_PickUpChest::Map_SC_PickUpChest(const Map_SC_PickUpChest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Map_SC_PickUpChest::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  id_times_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Map_SC_PickUpChest::~Map_SC_PickUpChest() {
  SharedDtor();
}

void Map_SC_PickUpChest::SharedDtor() {
  if (this != default_instance_) {
    delete id_times_;
  }
}

void Map_SC_PickUpChest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Map_SC_PickUpChest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Map_SC_PickUpChest_descriptor_;
}

const Map_SC_PickUpChest& Map_SC_PickUpChest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

Map_SC_PickUpChest* Map_SC_PickUpChest::default_instance_ = NULL;

Map_SC_PickUpChest* Map_SC_PickUpChest::New() const {
  return new Map_SC_PickUpChest;
}

void Map_SC_PickUpChest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_id_times()) {
      if (id_times_ != NULL) id_times_->::proto::message::IDTimes::Clear();
    }
  }
  item_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Map_SC_PickUpChest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_id_times;
        break;
      }

      // optional .proto.message.IDTimes id_times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_id_times:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id_times()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_item_list;
        break;
      }

      // repeated .proto.message.DropItemNum item_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_item_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Map_SC_PickUpChest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .proto.message.IDTimes id_times = 2;
  if (has_id_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->id_times(), output);
  }

  // repeated .proto.message.DropItemNum item_list = 3;
  for (int i = 0; i < this->item_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->item_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Map_SC_PickUpChest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .proto.message.IDTimes id_times = 2;
  if (has_id_times()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->id_times(), target);
  }

  // repeated .proto.message.DropItemNum item_list = 3;
  for (int i = 0; i < this->item_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->item_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Map_SC_PickUpChest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .proto.message.IDTimes id_times = 2;
    if (has_id_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->id_times());
    }

  }
  // repeated .proto.message.DropItemNum item_list = 3;
  total_size += 1 * this->item_list_size();
  for (int i = 0; i < this->item_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Map_SC_PickUpChest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Map_SC_PickUpChest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Map_SC_PickUpChest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Map_SC_PickUpChest::MergeFrom(const Map_SC_PickUpChest& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_list_.MergeFrom(from.item_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_id_times()) {
      mutable_id_times()->::proto::message::IDTimes::MergeFrom(from.id_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Map_SC_PickUpChest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Map_SC_PickUpChest::CopyFrom(const Map_SC_PickUpChest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Map_SC_PickUpChest::IsInitialized() const {

  return true;
}

void Map_SC_PickUpChest::Swap(Map_SC_PickUpChest* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(id_times_, other->id_times_);
    item_list_.Swap(&other->item_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Map_SC_PickUpChest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Map_SC_PickUpChest_descriptor_;
  metadata.reflection = Map_SC_PickUpChest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Map_SC_StartParkour::kResFieldNumber;
#endif  // !_MSC_VER

Map_SC_StartParkour::Map_SC_StartParkour()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Map_SC_StartParkour::InitAsDefaultInstance() {
}

Map_SC_StartParkour::Map_SC_StartParkour(const Map_SC_StartParkour& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Map_SC_StartParkour::SharedCtor() {
  _cached_size_ = 0;
  res_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Map_SC_StartParkour::~Map_SC_StartParkour() {
  SharedDtor();
}

void Map_SC_StartParkour::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Map_SC_StartParkour::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Map_SC_StartParkour::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Map_SC_StartParkour_descriptor_;
}

const Map_SC_StartParkour& Map_SC_StartParkour::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

Map_SC_StartParkour* Map_SC_StartParkour::default_instance_ = NULL;

Map_SC_StartParkour* Map_SC_StartParkour::New() const {
  return new Map_SC_StartParkour;
}

void Map_SC_StartParkour::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    res_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Map_SC_StartParkour::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 res = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &res_)));
          set_has_res();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Map_SC_StartParkour::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 res = 1;
  if (has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->res(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Map_SC_StartParkour::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 res = 1;
  if (has_res()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->res(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Map_SC_StartParkour::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 res = 1;
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->res());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Map_SC_StartParkour::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Map_SC_StartParkour* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Map_SC_StartParkour*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Map_SC_StartParkour::MergeFrom(const Map_SC_StartParkour& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_res()) {
      set_res(from.res());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Map_SC_StartParkour::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Map_SC_StartParkour::CopyFrom(const Map_SC_StartParkour& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Map_SC_StartParkour::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Map_SC_StartParkour::Swap(Map_SC_StartParkour* other) {
  if (other != this) {
    std::swap(res_, other->res_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Map_SC_StartParkour::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Map_SC_StartParkour_descriptor_;
  metadata.reflection = Map_SC_StartParkour_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Map_SC_PlayerCheckPosition::kPlyIdFieldNumber;
const int Map_SC_PlayerCheckPosition::kPtFieldNumber;
#endif  // !_MSC_VER

Map_SC_PlayerCheckPosition::Map_SC_PlayerCheckPosition()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Map_SC_PlayerCheckPosition::InitAsDefaultInstance() {
  pt_ = const_cast< ::proto::message::Point3D*>(&::proto::message::Point3D::default_instance());
}

Map_SC_PlayerCheckPosition::Map_SC_PlayerCheckPosition(const Map_SC_PlayerCheckPosition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Map_SC_PlayerCheckPosition::SharedCtor() {
  _cached_size_ = 0;
  plyid_ = 0u;
  pt_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Map_SC_PlayerCheckPosition::~Map_SC_PlayerCheckPosition() {
  SharedDtor();
}

void Map_SC_PlayerCheckPosition::SharedDtor() {
  if (this != default_instance_) {
    delete pt_;
  }
}

void Map_SC_PlayerCheckPosition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Map_SC_PlayerCheckPosition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Map_SC_PlayerCheckPosition_descriptor_;
}

const Map_SC_PlayerCheckPosition& Map_SC_PlayerCheckPosition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

Map_SC_PlayerCheckPosition* Map_SC_PlayerCheckPosition::default_instance_ = NULL;

Map_SC_PlayerCheckPosition* Map_SC_PlayerCheckPosition::New() const {
  return new Map_SC_PlayerCheckPosition;
}

void Map_SC_PlayerCheckPosition::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    plyid_ = 0u;
    if (has_pt()) {
      if (pt_ != NULL) pt_->::proto::message::Point3D::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Map_SC_PlayerCheckPosition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 plyId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &plyid_)));
          set_has_plyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pt;
        break;
      }

      // required .proto.message.Point3D pt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Map_SC_PlayerCheckPosition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 plyId = 1;
  if (has_plyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->plyid(), output);
  }

  // required .proto.message.Point3D pt = 2;
  if (has_pt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Map_SC_PlayerCheckPosition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 plyId = 1;
  if (has_plyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->plyid(), target);
  }

  // required .proto.message.Point3D pt = 2;
  if (has_pt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Map_SC_PlayerCheckPosition::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 plyId = 1;
    if (has_plyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->plyid());
    }

    // required .proto.message.Point3D pt = 2;
    if (has_pt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Map_SC_PlayerCheckPosition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Map_SC_PlayerCheckPosition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Map_SC_PlayerCheckPosition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Map_SC_PlayerCheckPosition::MergeFrom(const Map_SC_PlayerCheckPosition& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_plyid()) {
      set_plyid(from.plyid());
    }
    if (from.has_pt()) {
      mutable_pt()->::proto::message::Point3D::MergeFrom(from.pt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Map_SC_PlayerCheckPosition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Map_SC_PlayerCheckPosition::CopyFrom(const Map_SC_PlayerCheckPosition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Map_SC_PlayerCheckPosition::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Map_SC_PlayerCheckPosition::Swap(Map_SC_PlayerCheckPosition* other) {
  if (other != this) {
    std::swap(plyid_, other->plyid_);
    std::swap(pt_, other->pt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Map_SC_PlayerCheckPosition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Map_SC_PlayerCheckPosition_descriptor_;
  metadata.reflection = Map_SC_PlayerCheckPosition_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Map_SC_PlayerStopMove::kPlyIdFieldNumber;
const int Map_SC_PlayerStopMove::kPtFieldNumber;
#endif  // !_MSC_VER

Map_SC_PlayerStopMove::Map_SC_PlayerStopMove()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Map_SC_PlayerStopMove::InitAsDefaultInstance() {
  pt_ = const_cast< ::proto::message::Point3D*>(&::proto::message::Point3D::default_instance());
}

Map_SC_PlayerStopMove::Map_SC_PlayerStopMove(const Map_SC_PlayerStopMove& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Map_SC_PlayerStopMove::SharedCtor() {
  _cached_size_ = 0;
  plyid_ = 0u;
  pt_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Map_SC_PlayerStopMove::~Map_SC_PlayerStopMove() {
  SharedDtor();
}

void Map_SC_PlayerStopMove::SharedDtor() {
  if (this != default_instance_) {
    delete pt_;
  }
}

void Map_SC_PlayerStopMove::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Map_SC_PlayerStopMove::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Map_SC_PlayerStopMove_descriptor_;
}

const Map_SC_PlayerStopMove& Map_SC_PlayerStopMove::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

Map_SC_PlayerStopMove* Map_SC_PlayerStopMove::default_instance_ = NULL;

Map_SC_PlayerStopMove* Map_SC_PlayerStopMove::New() const {
  return new Map_SC_PlayerStopMove;
}

void Map_SC_PlayerStopMove::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    plyid_ = 0u;
    if (has_pt()) {
      if (pt_ != NULL) pt_->::proto::message::Point3D::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Map_SC_PlayerStopMove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 plyId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &plyid_)));
          set_has_plyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pt;
        break;
      }

      // required .proto.message.Point3D pt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Map_SC_PlayerStopMove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 plyId = 1;
  if (has_plyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->plyid(), output);
  }

  // required .proto.message.Point3D pt = 2;
  if (has_pt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Map_SC_PlayerStopMove::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 plyId = 1;
  if (has_plyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->plyid(), target);
  }

  // required .proto.message.Point3D pt = 2;
  if (has_pt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Map_SC_PlayerStopMove::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 plyId = 1;
    if (has_plyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->plyid());
    }

    // required .proto.message.Point3D pt = 2;
    if (has_pt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Map_SC_PlayerStopMove::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Map_SC_PlayerStopMove* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Map_SC_PlayerStopMove*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Map_SC_PlayerStopMove::MergeFrom(const Map_SC_PlayerStopMove& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_plyid()) {
      set_plyid(from.plyid());
    }
    if (from.has_pt()) {
      mutable_pt()->::proto::message::Point3D::MergeFrom(from.pt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Map_SC_PlayerStopMove::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Map_SC_PlayerStopMove::CopyFrom(const Map_SC_PlayerStopMove& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Map_SC_PlayerStopMove::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Map_SC_PlayerStopMove::Swap(Map_SC_PlayerStopMove* other) {
  if (other != this) {
    std::swap(plyid_, other->plyid_);
    std::swap(pt_, other->pt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Map_SC_PlayerStopMove::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Map_SC_PlayerStopMove_descriptor_;
  metadata.reflection = Map_SC_PlayerStopMove_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Map_SC_PlayerStateSync::kPlyIdFieldNumber;
const int Map_SC_PlayerStateSync::kSyncStateFieldNumber;
#endif  // !_MSC_VER

Map_SC_PlayerStateSync::Map_SC_PlayerStateSync()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Map_SC_PlayerStateSync::InitAsDefaultInstance() {
}

Map_SC_PlayerStateSync::Map_SC_PlayerStateSync(const Map_SC_PlayerStateSync& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Map_SC_PlayerStateSync::SharedCtor() {
  _cached_size_ = 0;
  plyid_ = 0u;
  syncstate_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Map_SC_PlayerStateSync::~Map_SC_PlayerStateSync() {
  SharedDtor();
}

void Map_SC_PlayerStateSync::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Map_SC_PlayerStateSync::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Map_SC_PlayerStateSync::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Map_SC_PlayerStateSync_descriptor_;
}

const Map_SC_PlayerStateSync& Map_SC_PlayerStateSync::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

Map_SC_PlayerStateSync* Map_SC_PlayerStateSync::default_instance_ = NULL;

Map_SC_PlayerStateSync* Map_SC_PlayerStateSync::New() const {
  return new Map_SC_PlayerStateSync;
}

void Map_SC_PlayerStateSync::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    plyid_ = 0u;
    syncstate_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Map_SC_PlayerStateSync::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 plyId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &plyid_)));
          set_has_plyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_SyncState;
        break;
      }

      // required uint32 SyncState = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SyncState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &syncstate_)));
          set_has_syncstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Map_SC_PlayerStateSync::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 plyId = 1;
  if (has_plyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->plyid(), output);
  }

  // required uint32 SyncState = 2;
  if (has_syncstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->syncstate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Map_SC_PlayerStateSync::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 plyId = 1;
  if (has_plyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->plyid(), target);
  }

  // required uint32 SyncState = 2;
  if (has_syncstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->syncstate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Map_SC_PlayerStateSync::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 plyId = 1;
    if (has_plyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->plyid());
    }

    // required uint32 SyncState = 2;
    if (has_syncstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->syncstate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Map_SC_PlayerStateSync::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Map_SC_PlayerStateSync* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Map_SC_PlayerStateSync*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Map_SC_PlayerStateSync::MergeFrom(const Map_SC_PlayerStateSync& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_plyid()) {
      set_plyid(from.plyid());
    }
    if (from.has_syncstate()) {
      set_syncstate(from.syncstate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Map_SC_PlayerStateSync::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Map_SC_PlayerStateSync::CopyFrom(const Map_SC_PlayerStateSync& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Map_SC_PlayerStateSync::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Map_SC_PlayerStateSync::Swap(Map_SC_PlayerStateSync* other) {
  if (other != this) {
    std::swap(plyid_, other->plyid_);
    std::swap(syncstate_, other->syncstate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Map_SC_PlayerStateSync::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Map_SC_PlayerStateSync_descriptor_;
  metadata.reflection = Map_SC_PlayerStateSync_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Map_CS_PlayerCheckPosition::kPtFieldNumber;
#endif  // !_MSC_VER

Map_CS_PlayerCheckPosition::Map_CS_PlayerCheckPosition()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Map_CS_PlayerCheckPosition::InitAsDefaultInstance() {
  pt_ = const_cast< ::proto::message::Point3D*>(&::proto::message::Point3D::default_instance());
}

Map_CS_PlayerCheckPosition::Map_CS_PlayerCheckPosition(const Map_CS_PlayerCheckPosition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Map_CS_PlayerCheckPosition::SharedCtor() {
  _cached_size_ = 0;
  pt_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Map_CS_PlayerCheckPosition::~Map_CS_PlayerCheckPosition() {
  SharedDtor();
}

void Map_CS_PlayerCheckPosition::SharedDtor() {
  if (this != default_instance_) {
    delete pt_;
  }
}

void Map_CS_PlayerCheckPosition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Map_CS_PlayerCheckPosition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Map_CS_PlayerCheckPosition_descriptor_;
}

const Map_CS_PlayerCheckPosition& Map_CS_PlayerCheckPosition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

Map_CS_PlayerCheckPosition* Map_CS_PlayerCheckPosition::default_instance_ = NULL;

Map_CS_PlayerCheckPosition* Map_CS_PlayerCheckPosition::New() const {
  return new Map_CS_PlayerCheckPosition;
}

void Map_CS_PlayerCheckPosition::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_pt()) {
      if (pt_ != NULL) pt_->::proto::message::Point3D::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Map_CS_PlayerCheckPosition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .proto.message.Point3D pt = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Map_CS_PlayerCheckPosition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .proto.message.Point3D pt = 1;
  if (has_pt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Map_CS_PlayerCheckPosition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .proto.message.Point3D pt = 1;
  if (has_pt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Map_CS_PlayerCheckPosition::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .proto.message.Point3D pt = 1;
    if (has_pt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Map_CS_PlayerCheckPosition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Map_CS_PlayerCheckPosition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Map_CS_PlayerCheckPosition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Map_CS_PlayerCheckPosition::MergeFrom(const Map_CS_PlayerCheckPosition& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pt()) {
      mutable_pt()->::proto::message::Point3D::MergeFrom(from.pt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Map_CS_PlayerCheckPosition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Map_CS_PlayerCheckPosition::CopyFrom(const Map_CS_PlayerCheckPosition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Map_CS_PlayerCheckPosition::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Map_CS_PlayerCheckPosition::Swap(Map_CS_PlayerCheckPosition* other) {
  if (other != this) {
    std::swap(pt_, other->pt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Map_CS_PlayerCheckPosition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Map_CS_PlayerCheckPosition_descriptor_;
  metadata.reflection = Map_CS_PlayerCheckPosition_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Map_CS_PlayerStopMove::kPtFieldNumber;
#endif  // !_MSC_VER

Map_CS_PlayerStopMove::Map_CS_PlayerStopMove()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Map_CS_PlayerStopMove::InitAsDefaultInstance() {
  pt_ = const_cast< ::proto::message::Point3D*>(&::proto::message::Point3D::default_instance());
}

Map_CS_PlayerStopMove::Map_CS_PlayerStopMove(const Map_CS_PlayerStopMove& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Map_CS_PlayerStopMove::SharedCtor() {
  _cached_size_ = 0;
  pt_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Map_CS_PlayerStopMove::~Map_CS_PlayerStopMove() {
  SharedDtor();
}

void Map_CS_PlayerStopMove::SharedDtor() {
  if (this != default_instance_) {
    delete pt_;
  }
}

void Map_CS_PlayerStopMove::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Map_CS_PlayerStopMove::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Map_CS_PlayerStopMove_descriptor_;
}

const Map_CS_PlayerStopMove& Map_CS_PlayerStopMove::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

Map_CS_PlayerStopMove* Map_CS_PlayerStopMove::default_instance_ = NULL;

Map_CS_PlayerStopMove* Map_CS_PlayerStopMove::New() const {
  return new Map_CS_PlayerStopMove;
}

void Map_CS_PlayerStopMove::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_pt()) {
      if (pt_ != NULL) pt_->::proto::message::Point3D::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Map_CS_PlayerStopMove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .proto.message.Point3D pt = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Map_CS_PlayerStopMove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .proto.message.Point3D pt = 1;
  if (has_pt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Map_CS_PlayerStopMove::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .proto.message.Point3D pt = 1;
  if (has_pt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Map_CS_PlayerStopMove::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .proto.message.Point3D pt = 1;
    if (has_pt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Map_CS_PlayerStopMove::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Map_CS_PlayerStopMove* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Map_CS_PlayerStopMove*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Map_CS_PlayerStopMove::MergeFrom(const Map_CS_PlayerStopMove& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pt()) {
      mutable_pt()->::proto::message::Point3D::MergeFrom(from.pt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Map_CS_PlayerStopMove::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Map_CS_PlayerStopMove::CopyFrom(const Map_CS_PlayerStopMove& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Map_CS_PlayerStopMove::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Map_CS_PlayerStopMove::Swap(Map_CS_PlayerStopMove* other) {
  if (other != this) {
    std::swap(pt_, other->pt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Map_CS_PlayerStopMove::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Map_CS_PlayerStopMove_descriptor_;
  metadata.reflection = Map_CS_PlayerStopMove_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Map_CS_PlayerStateSync::kSyncStateFieldNumber;
#endif  // !_MSC_VER

Map_CS_PlayerStateSync::Map_CS_PlayerStateSync()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Map_CS_PlayerStateSync::InitAsDefaultInstance() {
}

Map_CS_PlayerStateSync::Map_CS_PlayerStateSync(const Map_CS_PlayerStateSync& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Map_CS_PlayerStateSync::SharedCtor() {
  _cached_size_ = 0;
  syncstate_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Map_CS_PlayerStateSync::~Map_CS_PlayerStateSync() {
  SharedDtor();
}

void Map_CS_PlayerStateSync::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Map_CS_PlayerStateSync::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Map_CS_PlayerStateSync::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Map_CS_PlayerStateSync_descriptor_;
}

const Map_CS_PlayerStateSync& Map_CS_PlayerStateSync::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

Map_CS_PlayerStateSync* Map_CS_PlayerStateSync::default_instance_ = NULL;

Map_CS_PlayerStateSync* Map_CS_PlayerStateSync::New() const {
  return new Map_CS_PlayerStateSync;
}

void Map_CS_PlayerStateSync::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    syncstate_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Map_CS_PlayerStateSync::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 SyncState = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &syncstate_)));
          set_has_syncstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Map_CS_PlayerStateSync::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 SyncState = 1;
  if (has_syncstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->syncstate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Map_CS_PlayerStateSync::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 SyncState = 1;
  if (has_syncstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->syncstate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Map_CS_PlayerStateSync::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 SyncState = 1;
    if (has_syncstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->syncstate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Map_CS_PlayerStateSync::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Map_CS_PlayerStateSync* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Map_CS_PlayerStateSync*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Map_CS_PlayerStateSync::MergeFrom(const Map_CS_PlayerStateSync& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_syncstate()) {
      set_syncstate(from.syncstate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Map_CS_PlayerStateSync::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Map_CS_PlayerStateSync::CopyFrom(const Map_CS_PlayerStateSync& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Map_CS_PlayerStateSync::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Map_CS_PlayerStateSync::Swap(Map_CS_PlayerStateSync* other) {
  if (other != this) {
    std::swap(syncstate_, other->syncstate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Map_CS_PlayerStateSync::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Map_CS_PlayerStateSync_descriptor_;
  metadata.reflection = Map_CS_PlayerStateSync_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Map_SC_AddSyncRandomChest::kIDFieldNumber;
const int Map_SC_AddSyncRandomChest::kProIDFieldNumber;
const int Map_SC_AddSyncRandomChest::kPtFieldNumber;
const int Map_SC_AddSyncRandomChest::kDirFieldNumber;
const int Map_SC_AddSyncRandomChest::kCreateUidFieldNumber;
const int Map_SC_AddSyncRandomChest::kCreateNameFieldNumber;
const int Map_SC_AddSyncRandomChest::kVelocityFieldNumber;
const int Map_SC_AddSyncRandomChest::kMaxHPFieldNumber;
const int Map_SC_AddSyncRandomChest::kCurHPFieldNumber;
#endif  // !_MSC_VER

Map_SC_AddSyncRandomChest::Map_SC_AddSyncRandomChest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Map_SC_AddSyncRandomChest::InitAsDefaultInstance() {
  pt_ = const_cast< ::proto::message::Point3D*>(&::proto::message::Point3D::default_instance());
}

Map_SC_AddSyncRandomChest::Map_SC_AddSyncRandomChest(const Map_SC_AddSyncRandomChest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Map_SC_AddSyncRandomChest::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  proid_ = 0u;
  pt_ = NULL;
  dir_ = 0;
  createuid_ = GOOGLE_ULONGLONG(0);
  createname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  velocity_ = 0;
  maxhp_ = 0;
  curhp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Map_SC_AddSyncRandomChest::~Map_SC_AddSyncRandomChest() {
  SharedDtor();
}

void Map_SC_AddSyncRandomChest::SharedDtor() {
  if (createname_ != &::google::protobuf::internal::kEmptyString) {
    delete createname_;
  }
  if (this != default_instance_) {
    delete pt_;
  }
}

void Map_SC_AddSyncRandomChest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Map_SC_AddSyncRandomChest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Map_SC_AddSyncRandomChest_descriptor_;
}

const Map_SC_AddSyncRandomChest& Map_SC_AddSyncRandomChest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

Map_SC_AddSyncRandomChest* Map_SC_AddSyncRandomChest::default_instance_ = NULL;

Map_SC_AddSyncRandomChest* Map_SC_AddSyncRandomChest::New() const {
  return new Map_SC_AddSyncRandomChest;
}

void Map_SC_AddSyncRandomChest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    proid_ = 0u;
    if (has_pt()) {
      if (pt_ != NULL) pt_->::proto::message::Point3D::Clear();
    }
    dir_ = 0;
    createuid_ = GOOGLE_ULONGLONG(0);
    if (has_createname()) {
      if (createname_ != &::google::protobuf::internal::kEmptyString) {
        createname_->clear();
      }
    }
    velocity_ = 0;
    maxhp_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    curhp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Map_SC_AddSyncRandomChest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ProID;
        break;
      }

      // required uint32 ProID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ProID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &proid_)));
          set_has_proid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pt;
        break;
      }

      // required .proto.message.Point3D pt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_dir;
        break;
      }

      // required float dir = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dir_)));
          set_has_dir();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_CreateUid;
        break;
      }

      // required uint64 CreateUid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreateUid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &createuid_)));
          set_has_createuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_CreateName;
        break;
      }

      // required string CreateName = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CreateName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_createname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->createname().data(), this->createname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_Velocity;
        break;
      }

      // optional int32 Velocity = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Velocity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &velocity_)));
          set_has_velocity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_MaxHP;
        break;
      }

      // optional int32 MaxHP = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MaxHP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxhp_)));
          set_has_maxhp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_CurHP;
        break;
      }

      // optional int32 CurHP = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CurHP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curhp_)));
          set_has_curhp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Map_SC_AddSyncRandomChest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 ProID = 2;
  if (has_proid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->proid(), output);
  }

  // required .proto.message.Point3D pt = 3;
  if (has_pt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pt(), output);
  }

  // required float dir = 4;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->dir(), output);
  }

  // required uint64 CreateUid = 5;
  if (has_createuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->createuid(), output);
  }

  // required string CreateName = 6;
  if (has_createname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->createname().data(), this->createname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->createname(), output);
  }

  // optional int32 Velocity = 7;
  if (has_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->velocity(), output);
  }

  // optional int32 MaxHP = 8;
  if (has_maxhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->maxhp(), output);
  }

  // optional int32 CurHP = 9;
  if (has_curhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->curhp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Map_SC_AddSyncRandomChest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 ProID = 2;
  if (has_proid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->proid(), target);
  }

  // required .proto.message.Point3D pt = 3;
  if (has_pt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pt(), target);
  }

  // required float dir = 4;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->dir(), target);
  }

  // required uint64 CreateUid = 5;
  if (has_createuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->createuid(), target);
  }

  // required string CreateName = 6;
  if (has_createname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->createname().data(), this->createname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->createname(), target);
  }

  // optional int32 Velocity = 7;
  if (has_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->velocity(), target);
  }

  // optional int32 MaxHP = 8;
  if (has_maxhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->maxhp(), target);
  }

  // optional int32 CurHP = 9;
  if (has_curhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->curhp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Map_SC_AddSyncRandomChest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 ProID = 2;
    if (has_proid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->proid());
    }

    // required .proto.message.Point3D pt = 3;
    if (has_pt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pt());
    }

    // required float dir = 4;
    if (has_dir()) {
      total_size += 1 + 4;
    }

    // required uint64 CreateUid = 5;
    if (has_createuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->createuid());
    }

    // required string CreateName = 6;
    if (has_createname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->createname());
    }

    // optional int32 Velocity = 7;
    if (has_velocity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->velocity());
    }

    // optional int32 MaxHP = 8;
    if (has_maxhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxhp());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 CurHP = 9;
    if (has_curhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curhp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Map_SC_AddSyncRandomChest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Map_SC_AddSyncRandomChest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Map_SC_AddSyncRandomChest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Map_SC_AddSyncRandomChest::MergeFrom(const Map_SC_AddSyncRandomChest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_proid()) {
      set_proid(from.proid());
    }
    if (from.has_pt()) {
      mutable_pt()->::proto::message::Point3D::MergeFrom(from.pt());
    }
    if (from.has_dir()) {
      set_dir(from.dir());
    }
    if (from.has_createuid()) {
      set_createuid(from.createuid());
    }
    if (from.has_createname()) {
      set_createname(from.createname());
    }
    if (from.has_velocity()) {
      set_velocity(from.velocity());
    }
    if (from.has_maxhp()) {
      set_maxhp(from.maxhp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_curhp()) {
      set_curhp(from.curhp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Map_SC_AddSyncRandomChest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Map_SC_AddSyncRandomChest::CopyFrom(const Map_SC_AddSyncRandomChest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Map_SC_AddSyncRandomChest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void Map_SC_AddSyncRandomChest::Swap(Map_SC_AddSyncRandomChest* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(proid_, other->proid_);
    std::swap(pt_, other->pt_);
    std::swap(dir_, other->dir_);
    std::swap(createuid_, other->createuid_);
    std::swap(createname_, other->createname_);
    std::swap(velocity_, other->velocity_);
    std::swap(maxhp_, other->maxhp_);
    std::swap(curhp_, other->curhp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Map_SC_AddSyncRandomChest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Map_SC_AddSyncRandomChest_descriptor_;
  metadata.reflection = Map_SC_AddSyncRandomChest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Map_SC_UpdateDir::kIdFieldNumber;
const int Map_SC_UpdateDir::kDirFieldNumber;
#endif  // !_MSC_VER

Map_SC_UpdateDir::Map_SC_UpdateDir()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Map_SC_UpdateDir::InitAsDefaultInstance() {
}

Map_SC_UpdateDir::Map_SC_UpdateDir(const Map_SC_UpdateDir& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Map_SC_UpdateDir::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  dir_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Map_SC_UpdateDir::~Map_SC_UpdateDir() {
  SharedDtor();
}

void Map_SC_UpdateDir::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Map_SC_UpdateDir::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Map_SC_UpdateDir::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Map_SC_UpdateDir_descriptor_;
}

const Map_SC_UpdateDir& Map_SC_UpdateDir::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

Map_SC_UpdateDir* Map_SC_UpdateDir::default_instance_ = NULL;

Map_SC_UpdateDir* Map_SC_UpdateDir::New() const {
  return new Map_SC_UpdateDir;
}

void Map_SC_UpdateDir::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    dir_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Map_SC_UpdateDir::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_dir;
        break;
      }

      // optional float dir = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dir_)));
          set_has_dir();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Map_SC_UpdateDir::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional float dir = 2;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->dir(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Map_SC_UpdateDir::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional float dir = 2;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->dir(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Map_SC_UpdateDir::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional float dir = 2;
    if (has_dir()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Map_SC_UpdateDir::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Map_SC_UpdateDir* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Map_SC_UpdateDir*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Map_SC_UpdateDir::MergeFrom(const Map_SC_UpdateDir& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_dir()) {
      set_dir(from.dir());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Map_SC_UpdateDir::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Map_SC_UpdateDir::CopyFrom(const Map_SC_UpdateDir& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Map_SC_UpdateDir::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Map_SC_UpdateDir::Swap(Map_SC_UpdateDir* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(dir_, other->dir_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Map_SC_UpdateDir::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Map_SC_UpdateDir_descriptor_;
  metadata.reflection = Map_SC_UpdateDir_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Map_CS_GetMapBranch::Map_CS_GetMapBranch()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Map_CS_GetMapBranch::InitAsDefaultInstance() {
}

Map_CS_GetMapBranch::Map_CS_GetMapBranch(const Map_CS_GetMapBranch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Map_CS_GetMapBranch::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Map_CS_GetMapBranch::~Map_CS_GetMapBranch() {
  SharedDtor();
}

void Map_CS_GetMapBranch::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Map_CS_GetMapBranch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Map_CS_GetMapBranch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Map_CS_GetMapBranch_descriptor_;
}

const Map_CS_GetMapBranch& Map_CS_GetMapBranch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

Map_CS_GetMapBranch* Map_CS_GetMapBranch::default_instance_ = NULL;

Map_CS_GetMapBranch* Map_CS_GetMapBranch::New() const {
  return new Map_CS_GetMapBranch;
}

void Map_CS_GetMapBranch::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Map_CS_GetMapBranch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Map_CS_GetMapBranch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Map_CS_GetMapBranch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Map_CS_GetMapBranch::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Map_CS_GetMapBranch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Map_CS_GetMapBranch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Map_CS_GetMapBranch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Map_CS_GetMapBranch::MergeFrom(const Map_CS_GetMapBranch& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Map_CS_GetMapBranch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Map_CS_GetMapBranch::CopyFrom(const Map_CS_GetMapBranch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Map_CS_GetMapBranch::IsInitialized() const {

  return true;
}

void Map_CS_GetMapBranch::Swap(Map_CS_GetMapBranch* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Map_CS_GetMapBranch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Map_CS_GetMapBranch_descriptor_;
  metadata.reflection = Map_CS_GetMapBranch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Map_CS_ChangeBranch::kBranchIdFieldNumber;
#endif  // !_MSC_VER

Map_CS_ChangeBranch::Map_CS_ChangeBranch()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Map_CS_ChangeBranch::InitAsDefaultInstance() {
}

Map_CS_ChangeBranch::Map_CS_ChangeBranch(const Map_CS_ChangeBranch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Map_CS_ChangeBranch::SharedCtor() {
  _cached_size_ = 0;
  branchid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Map_CS_ChangeBranch::~Map_CS_ChangeBranch() {
  SharedDtor();
}

void Map_CS_ChangeBranch::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Map_CS_ChangeBranch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Map_CS_ChangeBranch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Map_CS_ChangeBranch_descriptor_;
}

const Map_CS_ChangeBranch& Map_CS_ChangeBranch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

Map_CS_ChangeBranch* Map_CS_ChangeBranch::default_instance_ = NULL;

Map_CS_ChangeBranch* Map_CS_ChangeBranch::New() const {
  return new Map_CS_ChangeBranch;
}

void Map_CS_ChangeBranch::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    branchid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Map_CS_ChangeBranch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 BranchId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &branchid_)));
          set_has_branchid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Map_CS_ChangeBranch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 BranchId = 1;
  if (has_branchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->branchid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Map_CS_ChangeBranch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 BranchId = 1;
  if (has_branchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->branchid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Map_CS_ChangeBranch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 BranchId = 1;
    if (has_branchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->branchid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Map_CS_ChangeBranch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Map_CS_ChangeBranch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Map_CS_ChangeBranch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Map_CS_ChangeBranch::MergeFrom(const Map_CS_ChangeBranch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_branchid()) {
      set_branchid(from.branchid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Map_CS_ChangeBranch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Map_CS_ChangeBranch::CopyFrom(const Map_CS_ChangeBranch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Map_CS_ChangeBranch::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Map_CS_ChangeBranch::Swap(Map_CS_ChangeBranch* other) {
  if (other != this) {
    std::swap(branchid_, other->branchid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Map_CS_ChangeBranch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Map_CS_ChangeBranch_descriptor_;
  metadata.reflection = Map_CS_ChangeBranch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BranchInfo::kBranchIdFieldNumber;
const int BranchInfo::kPlayerNumFieldNumber;
#endif  // !_MSC_VER

BranchInfo::BranchInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BranchInfo::InitAsDefaultInstance() {
}

BranchInfo::BranchInfo(const BranchInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BranchInfo::SharedCtor() {
  _cached_size_ = 0;
  branchid_ = 0;
  playernum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BranchInfo::~BranchInfo() {
  SharedDtor();
}

void BranchInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BranchInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BranchInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BranchInfo_descriptor_;
}

const BranchInfo& BranchInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

BranchInfo* BranchInfo::default_instance_ = NULL;

BranchInfo* BranchInfo::New() const {
  return new BranchInfo;
}

void BranchInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    branchid_ = 0;
    playernum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BranchInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 BranchId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &branchid_)));
          set_has_branchid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_PlayerNum;
        break;
      }

      // required int32 PlayerNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PlayerNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playernum_)));
          set_has_playernum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BranchInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 BranchId = 1;
  if (has_branchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->branchid(), output);
  }

  // required int32 PlayerNum = 2;
  if (has_playernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->playernum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BranchInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 BranchId = 1;
  if (has_branchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->branchid(), target);
  }

  // required int32 PlayerNum = 2;
  if (has_playernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->playernum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BranchInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 BranchId = 1;
    if (has_branchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->branchid());
    }

    // required int32 PlayerNum = 2;
    if (has_playernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playernum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BranchInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BranchInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BranchInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BranchInfo::MergeFrom(const BranchInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_branchid()) {
      set_branchid(from.branchid());
    }
    if (from.has_playernum()) {
      set_playernum(from.playernum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BranchInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BranchInfo::CopyFrom(const BranchInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BranchInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void BranchInfo::Swap(BranchInfo* other) {
  if (other != this) {
    std::swap(branchid_, other->branchid_);
    std::swap(playernum_, other->playernum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BranchInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BranchInfo_descriptor_;
  metadata.reflection = BranchInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Map_SC_GetMapBranch::kBranchListFieldNumber;
#endif  // !_MSC_VER

Map_SC_GetMapBranch::Map_SC_GetMapBranch()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Map_SC_GetMapBranch::InitAsDefaultInstance() {
}

Map_SC_GetMapBranch::Map_SC_GetMapBranch(const Map_SC_GetMapBranch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Map_SC_GetMapBranch::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Map_SC_GetMapBranch::~Map_SC_GetMapBranch() {
  SharedDtor();
}

void Map_SC_GetMapBranch::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Map_SC_GetMapBranch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Map_SC_GetMapBranch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Map_SC_GetMapBranch_descriptor_;
}

const Map_SC_GetMapBranch& Map_SC_GetMapBranch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

Map_SC_GetMapBranch* Map_SC_GetMapBranch::default_instance_ = NULL;

Map_SC_GetMapBranch* Map_SC_GetMapBranch::New() const {
  return new Map_SC_GetMapBranch;
}

void Map_SC_GetMapBranch::Clear() {
  branch_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Map_SC_GetMapBranch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.message.BranchInfo branch_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_branch_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_branch_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_branch_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Map_SC_GetMapBranch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.message.BranchInfo branch_list = 3;
  for (int i = 0; i < this->branch_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->branch_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Map_SC_GetMapBranch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.message.BranchInfo branch_list = 3;
  for (int i = 0; i < this->branch_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->branch_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Map_SC_GetMapBranch::ByteSize() const {
  int total_size = 0;

  // repeated .proto.message.BranchInfo branch_list = 3;
  total_size += 1 * this->branch_list_size();
  for (int i = 0; i < this->branch_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->branch_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Map_SC_GetMapBranch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Map_SC_GetMapBranch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Map_SC_GetMapBranch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Map_SC_GetMapBranch::MergeFrom(const Map_SC_GetMapBranch& from) {
  GOOGLE_CHECK_NE(&from, this);
  branch_list_.MergeFrom(from.branch_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Map_SC_GetMapBranch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Map_SC_GetMapBranch::CopyFrom(const Map_SC_GetMapBranch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Map_SC_GetMapBranch::IsInitialized() const {

  for (int i = 0; i < branch_list_size(); i++) {
    if (!this->branch_list(i).IsInitialized()) return false;
  }
  return true;
}

void Map_SC_GetMapBranch::Swap(Map_SC_GetMapBranch* other) {
  if (other != this) {
    branch_list_.Swap(&other->branch_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Map_SC_GetMapBranch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Map_SC_GetMapBranch_descriptor_;
  metadata.reflection = Map_SC_GetMapBranch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Map_SC_ChangeBranch::kRtFieldNumber;
#endif  // !_MSC_VER

Map_SC_ChangeBranch::Map_SC_ChangeBranch()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Map_SC_ChangeBranch::InitAsDefaultInstance() {
}

Map_SC_ChangeBranch::Map_SC_ChangeBranch(const Map_SC_ChangeBranch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Map_SC_ChangeBranch::SharedCtor() {
  _cached_size_ = 0;
  rt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Map_SC_ChangeBranch::~Map_SC_ChangeBranch() {
  SharedDtor();
}

void Map_SC_ChangeBranch::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Map_SC_ChangeBranch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Map_SC_ChangeBranch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Map_SC_ChangeBranch_descriptor_;
}

const Map_SC_ChangeBranch& Map_SC_ChangeBranch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

Map_SC_ChangeBranch* Map_SC_ChangeBranch::default_instance_ = NULL;

Map_SC_ChangeBranch* Map_SC_ChangeBranch::New() const {
  return new Map_SC_ChangeBranch;
}

void Map_SC_ChangeBranch::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rt_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Map_SC_ChangeBranch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 rt = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rt_)));
          set_has_rt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Map_SC_ChangeBranch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 rt = 1;
  if (has_rt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Map_SC_ChangeBranch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 rt = 1;
  if (has_rt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Map_SC_ChangeBranch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 rt = 1;
    if (has_rt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Map_SC_ChangeBranch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Map_SC_ChangeBranch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Map_SC_ChangeBranch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Map_SC_ChangeBranch::MergeFrom(const Map_SC_ChangeBranch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rt()) {
      set_rt(from.rt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Map_SC_ChangeBranch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Map_SC_ChangeBranch::CopyFrom(const Map_SC_ChangeBranch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Map_SC_ChangeBranch::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Map_SC_ChangeBranch::Swap(Map_SC_ChangeBranch* other) {
  if (other != this) {
    std::swap(rt_, other->rt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Map_SC_ChangeBranch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Map_SC_ChangeBranch_descriptor_;
  metadata.reflection = Map_SC_ChangeBranch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Map_CS_GameStoryStart::kGameStoryIDFieldNumber;
const int Map_CS_GameStoryStart::kNPCIDFieldNumber;
#endif  // !_MSC_VER

Map_CS_GameStoryStart::Map_CS_GameStoryStart()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Map_CS_GameStoryStart::InitAsDefaultInstance() {
}

Map_CS_GameStoryStart::Map_CS_GameStoryStart(const Map_CS_GameStoryStart& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Map_CS_GameStoryStart::SharedCtor() {
  _cached_size_ = 0;
  gamestoryid_ = 0u;
  npcid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Map_CS_GameStoryStart::~Map_CS_GameStoryStart() {
  SharedDtor();
}

void Map_CS_GameStoryStart::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Map_CS_GameStoryStart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Map_CS_GameStoryStart::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Map_CS_GameStoryStart_descriptor_;
}

const Map_CS_GameStoryStart& Map_CS_GameStoryStart::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

Map_CS_GameStoryStart* Map_CS_GameStoryStart::default_instance_ = NULL;

Map_CS_GameStoryStart* Map_CS_GameStoryStart::New() const {
  return new Map_CS_GameStoryStart;
}

void Map_CS_GameStoryStart::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gamestoryid_ = 0u;
    npcid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Map_CS_GameStoryStart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 GameStoryID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gamestoryid_)));
          set_has_gamestoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_NPCID;
        break;
      }

      // optional uint32 NPCID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_NPCID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &npcid_)));
          set_has_npcid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Map_CS_GameStoryStart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 GameStoryID = 1;
  if (has_gamestoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gamestoryid(), output);
  }

  // optional uint32 NPCID = 2;
  if (has_npcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->npcid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Map_CS_GameStoryStart::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 GameStoryID = 1;
  if (has_gamestoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gamestoryid(), target);
  }

  // optional uint32 NPCID = 2;
  if (has_npcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->npcid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Map_CS_GameStoryStart::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 GameStoryID = 1;
    if (has_gamestoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gamestoryid());
    }

    // optional uint32 NPCID = 2;
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->npcid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Map_CS_GameStoryStart::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Map_CS_GameStoryStart* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Map_CS_GameStoryStart*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Map_CS_GameStoryStart::MergeFrom(const Map_CS_GameStoryStart& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gamestoryid()) {
      set_gamestoryid(from.gamestoryid());
    }
    if (from.has_npcid()) {
      set_npcid(from.npcid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Map_CS_GameStoryStart::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Map_CS_GameStoryStart::CopyFrom(const Map_CS_GameStoryStart& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Map_CS_GameStoryStart::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Map_CS_GameStoryStart::Swap(Map_CS_GameStoryStart* other) {
  if (other != this) {
    std::swap(gamestoryid_, other->gamestoryid_);
    std::swap(npcid_, other->npcid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Map_CS_GameStoryStart::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Map_CS_GameStoryStart_descriptor_;
  metadata.reflection = Map_CS_GameStoryStart_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Map_CS_GameStoryEnd::kGameStoryIDFieldNumber;
const int Map_CS_GameStoryEnd::kNPCIDFieldNumber;
#endif  // !_MSC_VER

Map_CS_GameStoryEnd::Map_CS_GameStoryEnd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Map_CS_GameStoryEnd::InitAsDefaultInstance() {
}

Map_CS_GameStoryEnd::Map_CS_GameStoryEnd(const Map_CS_GameStoryEnd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Map_CS_GameStoryEnd::SharedCtor() {
  _cached_size_ = 0;
  gamestoryid_ = 0u;
  npcid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Map_CS_GameStoryEnd::~Map_CS_GameStoryEnd() {
  SharedDtor();
}

void Map_CS_GameStoryEnd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Map_CS_GameStoryEnd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Map_CS_GameStoryEnd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Map_CS_GameStoryEnd_descriptor_;
}

const Map_CS_GameStoryEnd& Map_CS_GameStoryEnd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

Map_CS_GameStoryEnd* Map_CS_GameStoryEnd::default_instance_ = NULL;

Map_CS_GameStoryEnd* Map_CS_GameStoryEnd::New() const {
  return new Map_CS_GameStoryEnd;
}

void Map_CS_GameStoryEnd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gamestoryid_ = 0u;
    npcid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Map_CS_GameStoryEnd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 GameStoryID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gamestoryid_)));
          set_has_gamestoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_NPCID;
        break;
      }

      // optional uint32 NPCID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_NPCID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &npcid_)));
          set_has_npcid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Map_CS_GameStoryEnd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 GameStoryID = 1;
  if (has_gamestoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gamestoryid(), output);
  }

  // optional uint32 NPCID = 2;
  if (has_npcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->npcid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Map_CS_GameStoryEnd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 GameStoryID = 1;
  if (has_gamestoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gamestoryid(), target);
  }

  // optional uint32 NPCID = 2;
  if (has_npcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->npcid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Map_CS_GameStoryEnd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 GameStoryID = 1;
    if (has_gamestoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gamestoryid());
    }

    // optional uint32 NPCID = 2;
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->npcid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Map_CS_GameStoryEnd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Map_CS_GameStoryEnd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Map_CS_GameStoryEnd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Map_CS_GameStoryEnd::MergeFrom(const Map_CS_GameStoryEnd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gamestoryid()) {
      set_gamestoryid(from.gamestoryid());
    }
    if (from.has_npcid()) {
      set_npcid(from.npcid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Map_CS_GameStoryEnd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Map_CS_GameStoryEnd::CopyFrom(const Map_CS_GameStoryEnd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Map_CS_GameStoryEnd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Map_CS_GameStoryEnd::Swap(Map_CS_GameStoryEnd* other) {
  if (other != this) {
    std::swap(gamestoryid_, other->gamestoryid_);
    std::swap(npcid_, other->npcid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Map_CS_GameStoryEnd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Map_CS_GameStoryEnd_descriptor_;
  metadata.reflection = Map_CS_GameStoryEnd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Map_CS_NPCStopAI::kNPCIDFieldNumber;
#endif  // !_MSC_VER

Map_CS_NPCStopAI::Map_CS_NPCStopAI()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Map_CS_NPCStopAI::InitAsDefaultInstance() {
}

Map_CS_NPCStopAI::Map_CS_NPCStopAI(const Map_CS_NPCStopAI& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Map_CS_NPCStopAI::SharedCtor() {
  _cached_size_ = 0;
  npcid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Map_CS_NPCStopAI::~Map_CS_NPCStopAI() {
  SharedDtor();
}

void Map_CS_NPCStopAI::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Map_CS_NPCStopAI::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Map_CS_NPCStopAI::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Map_CS_NPCStopAI_descriptor_;
}

const Map_CS_NPCStopAI& Map_CS_NPCStopAI::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

Map_CS_NPCStopAI* Map_CS_NPCStopAI::default_instance_ = NULL;

Map_CS_NPCStopAI* Map_CS_NPCStopAI::New() const {
  return new Map_CS_NPCStopAI;
}

void Map_CS_NPCStopAI::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    npcid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Map_CS_NPCStopAI::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 NPCID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &npcid_)));
          set_has_npcid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Map_CS_NPCStopAI::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 NPCID = 1;
  if (has_npcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->npcid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Map_CS_NPCStopAI::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 NPCID = 1;
  if (has_npcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->npcid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Map_CS_NPCStopAI::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 NPCID = 1;
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->npcid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Map_CS_NPCStopAI::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Map_CS_NPCStopAI* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Map_CS_NPCStopAI*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Map_CS_NPCStopAI::MergeFrom(const Map_CS_NPCStopAI& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_npcid()) {
      set_npcid(from.npcid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Map_CS_NPCStopAI::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Map_CS_NPCStopAI::CopyFrom(const Map_CS_NPCStopAI& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Map_CS_NPCStopAI::IsInitialized() const {

  return true;
}

void Map_CS_NPCStopAI::Swap(Map_CS_NPCStopAI* other) {
  if (other != this) {
    std::swap(npcid_, other->npcid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Map_CS_NPCStopAI::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Map_CS_NPCStopAI_descriptor_;
  metadata.reflection = Map_CS_NPCStopAI_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Map_CS_NPCActiveAI::kNPCIDFieldNumber;
#endif  // !_MSC_VER

Map_CS_NPCActiveAI::Map_CS_NPCActiveAI()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Map_CS_NPCActiveAI::InitAsDefaultInstance() {
}

Map_CS_NPCActiveAI::Map_CS_NPCActiveAI(const Map_CS_NPCActiveAI& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Map_CS_NPCActiveAI::SharedCtor() {
  _cached_size_ = 0;
  npcid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Map_CS_NPCActiveAI::~Map_CS_NPCActiveAI() {
  SharedDtor();
}

void Map_CS_NPCActiveAI::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Map_CS_NPCActiveAI::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Map_CS_NPCActiveAI::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Map_CS_NPCActiveAI_descriptor_;
}

const Map_CS_NPCActiveAI& Map_CS_NPCActiveAI::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

Map_CS_NPCActiveAI* Map_CS_NPCActiveAI::default_instance_ = NULL;

Map_CS_NPCActiveAI* Map_CS_NPCActiveAI::New() const {
  return new Map_CS_NPCActiveAI;
}

void Map_CS_NPCActiveAI::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    npcid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Map_CS_NPCActiveAI::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 NPCID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &npcid_)));
          set_has_npcid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Map_CS_NPCActiveAI::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 NPCID = 1;
  if (has_npcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->npcid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Map_CS_NPCActiveAI::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 NPCID = 1;
  if (has_npcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->npcid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Map_CS_NPCActiveAI::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 NPCID = 1;
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->npcid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Map_CS_NPCActiveAI::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Map_CS_NPCActiveAI* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Map_CS_NPCActiveAI*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Map_CS_NPCActiveAI::MergeFrom(const Map_CS_NPCActiveAI& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_npcid()) {
      set_npcid(from.npcid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Map_CS_NPCActiveAI::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Map_CS_NPCActiveAI::CopyFrom(const Map_CS_NPCActiveAI& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Map_CS_NPCActiveAI::IsInitialized() const {

  return true;
}

void Map_CS_NPCActiveAI::Swap(Map_CS_NPCActiveAI* other) {
  if (other != this) {
    std::swap(npcid_, other->npcid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Map_CS_NPCActiveAI::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Map_CS_NPCActiveAI_descriptor_;
  metadata.reflection = Map_CS_NPCActiveAI_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Map_SC_MonsterTalk::kTalkIDFieldNumber;
#endif  // !_MSC_VER

Map_SC_MonsterTalk::Map_SC_MonsterTalk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Map_SC_MonsterTalk::InitAsDefaultInstance() {
}

Map_SC_MonsterTalk::Map_SC_MonsterTalk(const Map_SC_MonsterTalk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Map_SC_MonsterTalk::SharedCtor() {
  _cached_size_ = 0;
  talkid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Map_SC_MonsterTalk::~Map_SC_MonsterTalk() {
  SharedDtor();
}

void Map_SC_MonsterTalk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Map_SC_MonsterTalk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Map_SC_MonsterTalk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Map_SC_MonsterTalk_descriptor_;
}

const Map_SC_MonsterTalk& Map_SC_MonsterTalk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

Map_SC_MonsterTalk* Map_SC_MonsterTalk::default_instance_ = NULL;

Map_SC_MonsterTalk* Map_SC_MonsterTalk::New() const {
  return new Map_SC_MonsterTalk;
}

void Map_SC_MonsterTalk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    talkid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Map_SC_MonsterTalk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 talkID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &talkid_)));
          set_has_talkid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Map_SC_MonsterTalk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 talkID = 2;
  if (has_talkid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->talkid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Map_SC_MonsterTalk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 talkID = 2;
  if (has_talkid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->talkid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Map_SC_MonsterTalk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 talkID = 2;
    if (has_talkid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->talkid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Map_SC_MonsterTalk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Map_SC_MonsterTalk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Map_SC_MonsterTalk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Map_SC_MonsterTalk::MergeFrom(const Map_SC_MonsterTalk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_talkid()) {
      set_talkid(from.talkid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Map_SC_MonsterTalk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Map_SC_MonsterTalk::CopyFrom(const Map_SC_MonsterTalk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Map_SC_MonsterTalk::IsInitialized() const {

  return true;
}

void Map_SC_MonsterTalk::Swap(Map_SC_MonsterTalk* other) {
  if (other != this) {
    std::swap(talkid_, other->talkid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Map_SC_MonsterTalk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Map_SC_MonsterTalk_descriptor_;
  metadata.reflection = Map_SC_MonsterTalk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Map_SC_MonsterTurnBackSync::kMonsterIDFieldNumber;
const int Map_SC_MonsterTurnBackSync::kEndTickFieldNumber;
#endif  // !_MSC_VER

Map_SC_MonsterTurnBackSync::Map_SC_MonsterTurnBackSync()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Map_SC_MonsterTurnBackSync::InitAsDefaultInstance() {
}

Map_SC_MonsterTurnBackSync::Map_SC_MonsterTurnBackSync(const Map_SC_MonsterTurnBackSync& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Map_SC_MonsterTurnBackSync::SharedCtor() {
  _cached_size_ = 0;
  monsterid_ = 0u;
  endtick_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Map_SC_MonsterTurnBackSync::~Map_SC_MonsterTurnBackSync() {
  SharedDtor();
}

void Map_SC_MonsterTurnBackSync::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Map_SC_MonsterTurnBackSync::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Map_SC_MonsterTurnBackSync::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Map_SC_MonsterTurnBackSync_descriptor_;
}

const Map_SC_MonsterTurnBackSync& Map_SC_MonsterTurnBackSync::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

Map_SC_MonsterTurnBackSync* Map_SC_MonsterTurnBackSync::default_instance_ = NULL;

Map_SC_MonsterTurnBackSync* Map_SC_MonsterTurnBackSync::New() const {
  return new Map_SC_MonsterTurnBackSync;
}

void Map_SC_MonsterTurnBackSync::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    monsterid_ = 0u;
    endtick_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Map_SC_MonsterTurnBackSync::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 MonsterID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &monsterid_)));
          set_has_monsterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_EndTick;
        break;
      }

      // required uint64 EndTick = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_EndTick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &endtick_)));
          set_has_endtick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Map_SC_MonsterTurnBackSync::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 MonsterID = 1;
  if (has_monsterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->monsterid(), output);
  }

  // required uint64 EndTick = 2;
  if (has_endtick()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->endtick(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Map_SC_MonsterTurnBackSync::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 MonsterID = 1;
  if (has_monsterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->monsterid(), target);
  }

  // required uint64 EndTick = 2;
  if (has_endtick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->endtick(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Map_SC_MonsterTurnBackSync::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 MonsterID = 1;
    if (has_monsterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->monsterid());
    }

    // required uint64 EndTick = 2;
    if (has_endtick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->endtick());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Map_SC_MonsterTurnBackSync::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Map_SC_MonsterTurnBackSync* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Map_SC_MonsterTurnBackSync*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Map_SC_MonsterTurnBackSync::MergeFrom(const Map_SC_MonsterTurnBackSync& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_monsterid()) {
      set_monsterid(from.monsterid());
    }
    if (from.has_endtick()) {
      set_endtick(from.endtick());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Map_SC_MonsterTurnBackSync::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Map_SC_MonsterTurnBackSync::CopyFrom(const Map_SC_MonsterTurnBackSync& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Map_SC_MonsterTurnBackSync::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Map_SC_MonsterTurnBackSync::Swap(Map_SC_MonsterTurnBackSync* other) {
  if (other != this) {
    std::swap(monsterid_, other->monsterid_);
    std::swap(endtick_, other->endtick_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Map_SC_MonsterTurnBackSync::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Map_SC_MonsterTurnBackSync_descriptor_;
  metadata.reflection = Map_SC_MonsterTurnBackSync_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Map_SC_ChangeMapResult::kResultFieldNumber;
const int Map_SC_ChangeMapResult::kMapTableIdFieldNumber;
#endif  // !_MSC_VER

Map_SC_ChangeMapResult::Map_SC_ChangeMapResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Map_SC_ChangeMapResult::InitAsDefaultInstance() {
}

Map_SC_ChangeMapResult::Map_SC_ChangeMapResult(const Map_SC_ChangeMapResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Map_SC_ChangeMapResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  map_table_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Map_SC_ChangeMapResult::~Map_SC_ChangeMapResult() {
  SharedDtor();
}

void Map_SC_ChangeMapResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Map_SC_ChangeMapResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Map_SC_ChangeMapResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Map_SC_ChangeMapResult_descriptor_;
}

const Map_SC_ChangeMapResult& Map_SC_ChangeMapResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

Map_SC_ChangeMapResult* Map_SC_ChangeMapResult::default_instance_ = NULL;

Map_SC_ChangeMapResult* Map_SC_ChangeMapResult::New() const {
  return new Map_SC_ChangeMapResult;
}

void Map_SC_ChangeMapResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    map_table_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Map_SC_ChangeMapResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_map_table_id;
        break;
      }

      // optional int32 map_table_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_table_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_table_id_)));
          set_has_map_table_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Map_SC_ChangeMapResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 map_table_id = 2;
  if (has_map_table_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->map_table_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Map_SC_ChangeMapResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 map_table_id = 2;
  if (has_map_table_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->map_table_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Map_SC_ChangeMapResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 map_table_id = 2;
    if (has_map_table_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->map_table_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Map_SC_ChangeMapResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Map_SC_ChangeMapResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Map_SC_ChangeMapResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Map_SC_ChangeMapResult::MergeFrom(const Map_SC_ChangeMapResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_map_table_id()) {
      set_map_table_id(from.map_table_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Map_SC_ChangeMapResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Map_SC_ChangeMapResult::CopyFrom(const Map_SC_ChangeMapResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Map_SC_ChangeMapResult::IsInitialized() const {

  return true;
}

void Map_SC_ChangeMapResult::Swap(Map_SC_ChangeMapResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(map_table_id_, other->map_table_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Map_SC_ChangeMapResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Map_SC_ChangeMapResult_descriptor_;
  metadata.reflection = Map_SC_ChangeMapResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Game2Match_PVPMatch::kITableIdFieldNumber;
const int Game2Match_PVPMatch::kSMatchPlyInfoFieldNumber;
#endif  // !_MSC_VER

Game2Match_PVPMatch::Game2Match_PVPMatch()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Game2Match_PVPMatch::InitAsDefaultInstance() {
  smatchplyinfo_ = const_cast< ::proto::message::MatchPlayerInfo*>(&::proto::message::MatchPlayerInfo::default_instance());
}

Game2Match_PVPMatch::Game2Match_PVPMatch(const Game2Match_PVPMatch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Game2Match_PVPMatch::SharedCtor() {
  _cached_size_ = 0;
  itableid_ = 0;
  smatchplyinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Game2Match_PVPMatch::~Game2Match_PVPMatch() {
  SharedDtor();
}

void Game2Match_PVPMatch::SharedDtor() {
  if (this != default_instance_) {
    delete smatchplyinfo_;
  }
}

void Game2Match_PVPMatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Game2Match_PVPMatch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Game2Match_PVPMatch_descriptor_;
}

const Game2Match_PVPMatch& Game2Match_PVPMatch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

Game2Match_PVPMatch* Game2Match_PVPMatch::default_instance_ = NULL;

Game2Match_PVPMatch* Game2Match_PVPMatch::New() const {
  return new Game2Match_PVPMatch;
}

void Game2Match_PVPMatch::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itableid_ = 0;
    if (has_smatchplyinfo()) {
      if (smatchplyinfo_ != NULL) smatchplyinfo_->::proto::message::MatchPlayerInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Game2Match_PVPMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 iTableId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itableid_)));
          set_has_itableid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sMatchPlyInfo;
        break;
      }

      // required .proto.message.MatchPlayerInfo sMatchPlyInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sMatchPlyInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_smatchplyinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Game2Match_PVPMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 iTableId = 1;
  if (has_itableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itableid(), output);
  }

  // required .proto.message.MatchPlayerInfo sMatchPlyInfo = 2;
  if (has_smatchplyinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->smatchplyinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Game2Match_PVPMatch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 iTableId = 1;
  if (has_itableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itableid(), target);
  }

  // required .proto.message.MatchPlayerInfo sMatchPlyInfo = 2;
  if (has_smatchplyinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->smatchplyinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Game2Match_PVPMatch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 iTableId = 1;
    if (has_itableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itableid());
    }

    // required .proto.message.MatchPlayerInfo sMatchPlyInfo = 2;
    if (has_smatchplyinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->smatchplyinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Game2Match_PVPMatch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Game2Match_PVPMatch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Game2Match_PVPMatch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Game2Match_PVPMatch::MergeFrom(const Game2Match_PVPMatch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itableid()) {
      set_itableid(from.itableid());
    }
    if (from.has_smatchplyinfo()) {
      mutable_smatchplyinfo()->::proto::message::MatchPlayerInfo::MergeFrom(from.smatchplyinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Game2Match_PVPMatch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Game2Match_PVPMatch::CopyFrom(const Game2Match_PVPMatch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Game2Match_PVPMatch::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_smatchplyinfo()) {
    if (!this->smatchplyinfo().IsInitialized()) return false;
  }
  return true;
}

void Game2Match_PVPMatch::Swap(Game2Match_PVPMatch* other) {
  if (other != this) {
    std::swap(itableid_, other->itableid_);
    std::swap(smatchplyinfo_, other->smatchplyinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Game2Match_PVPMatch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Game2Match_PVPMatch_descriptor_;
  metadata.reflection = Game2Match_PVPMatch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Game2Match_TeamMatch::kITableIdFieldNumber;
const int Game2Match_TeamMatch::kUiHostIdFieldNumber;
const int Game2Match_TeamMatch::kVecMatchPlyInfoFieldNumber;
#endif  // !_MSC_VER

Game2Match_TeamMatch::Game2Match_TeamMatch()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Game2Match_TeamMatch::InitAsDefaultInstance() {
}

Game2Match_TeamMatch::Game2Match_TeamMatch(const Game2Match_TeamMatch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Game2Match_TeamMatch::SharedCtor() {
  _cached_size_ = 0;
  itableid_ = 0;
  uihostid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Game2Match_TeamMatch::~Game2Match_TeamMatch() {
  SharedDtor();
}

void Game2Match_TeamMatch::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Game2Match_TeamMatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Game2Match_TeamMatch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Game2Match_TeamMatch_descriptor_;
}

const Game2Match_TeamMatch& Game2Match_TeamMatch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

Game2Match_TeamMatch* Game2Match_TeamMatch::default_instance_ = NULL;

Game2Match_TeamMatch* Game2Match_TeamMatch::New() const {
  return new Game2Match_TeamMatch;
}

void Game2Match_TeamMatch::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itableid_ = 0;
    uihostid_ = GOOGLE_ULONGLONG(0);
  }
  vecmatchplyinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Game2Match_TeamMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 iTableId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itableid_)));
          set_has_itableid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uiHostId;
        break;
      }

      // required uint64 uiHostId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiHostId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uihostid_)));
          set_has_uihostid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_vecMatchPlyInfo;
        break;
      }

      // repeated .proto.message.MatchPlayerInfo vecMatchPlyInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vecMatchPlyInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vecmatchplyinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_vecMatchPlyInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Game2Match_TeamMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 iTableId = 1;
  if (has_itableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itableid(), output);
  }

  // required uint64 uiHostId = 2;
  if (has_uihostid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uihostid(), output);
  }

  // repeated .proto.message.MatchPlayerInfo vecMatchPlyInfo = 3;
  for (int i = 0; i < this->vecmatchplyinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->vecmatchplyinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Game2Match_TeamMatch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 iTableId = 1;
  if (has_itableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itableid(), target);
  }

  // required uint64 uiHostId = 2;
  if (has_uihostid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uihostid(), target);
  }

  // repeated .proto.message.MatchPlayerInfo vecMatchPlyInfo = 3;
  for (int i = 0; i < this->vecmatchplyinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->vecmatchplyinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Game2Match_TeamMatch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 iTableId = 1;
    if (has_itableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itableid());
    }

    // required uint64 uiHostId = 2;
    if (has_uihostid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uihostid());
    }

  }
  // repeated .proto.message.MatchPlayerInfo vecMatchPlyInfo = 3;
  total_size += 1 * this->vecmatchplyinfo_size();
  for (int i = 0; i < this->vecmatchplyinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vecmatchplyinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Game2Match_TeamMatch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Game2Match_TeamMatch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Game2Match_TeamMatch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Game2Match_TeamMatch::MergeFrom(const Game2Match_TeamMatch& from) {
  GOOGLE_CHECK_NE(&from, this);
  vecmatchplyinfo_.MergeFrom(from.vecmatchplyinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itableid()) {
      set_itableid(from.itableid());
    }
    if (from.has_uihostid()) {
      set_uihostid(from.uihostid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Game2Match_TeamMatch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Game2Match_TeamMatch::CopyFrom(const Game2Match_TeamMatch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Game2Match_TeamMatch::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < vecmatchplyinfo_size(); i++) {
    if (!this->vecmatchplyinfo(i).IsInitialized()) return false;
  }
  return true;
}

void Game2Match_TeamMatch::Swap(Game2Match_TeamMatch* other) {
  if (other != this) {
    std::swap(itableid_, other->itableid_);
    std::swap(uihostid_, other->uihostid_);
    vecmatchplyinfo_.Swap(&other->vecmatchplyinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Game2Match_TeamMatch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Game2Match_TeamMatch_descriptor_;
  metadata.reflection = Game2Match_TeamMatch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Game2Match_CancelMatch::kUuidFieldNumber;
#endif  // !_MSC_VER

Game2Match_CancelMatch::Game2Match_CancelMatch()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Game2Match_CancelMatch::InitAsDefaultInstance() {
}

Game2Match_CancelMatch::Game2Match_CancelMatch(const Game2Match_CancelMatch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Game2Match_CancelMatch::SharedCtor() {
  _cached_size_ = 0;
  uuid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Game2Match_CancelMatch::~Game2Match_CancelMatch() {
  SharedDtor();
}

void Game2Match_CancelMatch::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Game2Match_CancelMatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Game2Match_CancelMatch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Game2Match_CancelMatch_descriptor_;
}

const Game2Match_CancelMatch& Game2Match_CancelMatch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

Game2Match_CancelMatch* Game2Match_CancelMatch::default_instance_ = NULL;

Game2Match_CancelMatch* Game2Match_CancelMatch::New() const {
  return new Game2Match_CancelMatch;
}

void Game2Match_CancelMatch::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uuid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Game2Match_CancelMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Game2Match_CancelMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Game2Match_CancelMatch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 uuid = 1;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Game2Match_CancelMatch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 uuid = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Game2Match_CancelMatch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Game2Match_CancelMatch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Game2Match_CancelMatch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Game2Match_CancelMatch::MergeFrom(const Game2Match_CancelMatch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Game2Match_CancelMatch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Game2Match_CancelMatch::CopyFrom(const Game2Match_CancelMatch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Game2Match_CancelMatch::IsInitialized() const {

  return true;
}

void Game2Match_CancelMatch::Swap(Game2Match_CancelMatch* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Game2Match_CancelMatch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Game2Match_CancelMatch_descriptor_;
  metadata.reflection = Game2Match_CancelMatch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Game2Client_WorldBossInfo::kUiBossIdFieldNumber;
const int Game2Client_WorldBossInfo::kUiBossLevelFieldNumber;
const int Game2Client_WorldBossInfo::kUiExpiryTimeFieldNumber;
const int Game2Client_WorldBossInfo::kUiBossHpFieldNumber;
#endif  // !_MSC_VER

Game2Client_WorldBossInfo::Game2Client_WorldBossInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Game2Client_WorldBossInfo::InitAsDefaultInstance() {
}

Game2Client_WorldBossInfo::Game2Client_WorldBossInfo(const Game2Client_WorldBossInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Game2Client_WorldBossInfo::SharedCtor() {
  _cached_size_ = 0;
  uibossid_ = 0u;
  uibosslevel_ = 0u;
  uiexpirytime_ = 0u;
  uibosshp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Game2Client_WorldBossInfo::~Game2Client_WorldBossInfo() {
  SharedDtor();
}

void Game2Client_WorldBossInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Game2Client_WorldBossInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Game2Client_WorldBossInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Game2Client_WorldBossInfo_descriptor_;
}

const Game2Client_WorldBossInfo& Game2Client_WorldBossInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

Game2Client_WorldBossInfo* Game2Client_WorldBossInfo::default_instance_ = NULL;

Game2Client_WorldBossInfo* Game2Client_WorldBossInfo::New() const {
  return new Game2Client_WorldBossInfo;
}

void Game2Client_WorldBossInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uibossid_ = 0u;
    uibosslevel_ = 0u;
    uiexpirytime_ = 0u;
    uibosshp_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Game2Client_WorldBossInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uiBossId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uibossid_)));
          set_has_uibossid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uiBossLevel;
        break;
      }

      // required uint32 uiBossLevel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiBossLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uibosslevel_)));
          set_has_uibosslevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uiExpiryTime;
        break;
      }

      // required uint32 uiExpiryTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiExpiryTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiexpirytime_)));
          set_has_uiexpirytime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_uiBossHp;
        break;
      }

      // required uint64 uiBossHp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiBossHp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uibosshp_)));
          set_has_uibosshp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Game2Client_WorldBossInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uiBossId = 1;
  if (has_uibossid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uibossid(), output);
  }

  // required uint32 uiBossLevel = 2;
  if (has_uibosslevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uibosslevel(), output);
  }

  // required uint32 uiExpiryTime = 3;
  if (has_uiexpirytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->uiexpirytime(), output);
  }

  // required uint64 uiBossHp = 4;
  if (has_uibosshp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->uibosshp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Game2Client_WorldBossInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uiBossId = 1;
  if (has_uibossid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uibossid(), target);
  }

  // required uint32 uiBossLevel = 2;
  if (has_uibosslevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uibosslevel(), target);
  }

  // required uint32 uiExpiryTime = 3;
  if (has_uiexpirytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->uiexpirytime(), target);
  }

  // required uint64 uiBossHp = 4;
  if (has_uibosshp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->uibosshp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Game2Client_WorldBossInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uiBossId = 1;
    if (has_uibossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uibossid());
    }

    // required uint32 uiBossLevel = 2;
    if (has_uibosslevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uibosslevel());
    }

    // required uint32 uiExpiryTime = 3;
    if (has_uiexpirytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiexpirytime());
    }

    // required uint64 uiBossHp = 4;
    if (has_uibosshp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uibosshp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Game2Client_WorldBossInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Game2Client_WorldBossInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Game2Client_WorldBossInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Game2Client_WorldBossInfo::MergeFrom(const Game2Client_WorldBossInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uibossid()) {
      set_uibossid(from.uibossid());
    }
    if (from.has_uibosslevel()) {
      set_uibosslevel(from.uibosslevel());
    }
    if (from.has_uiexpirytime()) {
      set_uiexpirytime(from.uiexpirytime());
    }
    if (from.has_uibosshp()) {
      set_uibosshp(from.uibosshp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Game2Client_WorldBossInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Game2Client_WorldBossInfo::CopyFrom(const Game2Client_WorldBossInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Game2Client_WorldBossInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Game2Client_WorldBossInfo::Swap(Game2Client_WorldBossInfo* other) {
  if (other != this) {
    std::swap(uibossid_, other->uibossid_);
    std::swap(uibosslevel_, other->uibosslevel_);
    std::swap(uiexpirytime_, other->uiexpirytime_);
    std::swap(uibosshp_, other->uibosshp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Game2Client_WorldBossInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Game2Client_WorldBossInfo_descriptor_;
  metadata.reflection = Game2Client_WorldBossInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Game2Battle_WorldBossStart::kUiBossIdFieldNumber;
const int Game2Battle_WorldBossStart::kUiBossLevelFieldNumber;
const int Game2Battle_WorldBossStart::kUiExpiryTimeFieldNumber;
const int Game2Battle_WorldBossStart::kUiHpFieldNumber;
#endif  // !_MSC_VER

Game2Battle_WorldBossStart::Game2Battle_WorldBossStart()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Game2Battle_WorldBossStart::InitAsDefaultInstance() {
}

Game2Battle_WorldBossStart::Game2Battle_WorldBossStart(const Game2Battle_WorldBossStart& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Game2Battle_WorldBossStart::SharedCtor() {
  _cached_size_ = 0;
  uibossid_ = 0u;
  uibosslevel_ = 0u;
  uiexpirytime_ = 0u;
  uihp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Game2Battle_WorldBossStart::~Game2Battle_WorldBossStart() {
  SharedDtor();
}

void Game2Battle_WorldBossStart::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Game2Battle_WorldBossStart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Game2Battle_WorldBossStart::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Game2Battle_WorldBossStart_descriptor_;
}

const Game2Battle_WorldBossStart& Game2Battle_WorldBossStart::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

Game2Battle_WorldBossStart* Game2Battle_WorldBossStart::default_instance_ = NULL;

Game2Battle_WorldBossStart* Game2Battle_WorldBossStart::New() const {
  return new Game2Battle_WorldBossStart;
}

void Game2Battle_WorldBossStart::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uibossid_ = 0u;
    uibosslevel_ = 0u;
    uiexpirytime_ = 0u;
    uihp_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Game2Battle_WorldBossStart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uiBossId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uibossid_)));
          set_has_uibossid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uiBossLevel;
        break;
      }

      // required uint32 uiBossLevel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiBossLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uibosslevel_)));
          set_has_uibosslevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uiExpiryTime;
        break;
      }

      // required uint32 uiExpiryTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiExpiryTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiexpirytime_)));
          set_has_uiexpirytime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_uiHp;
        break;
      }

      // required uint64 uiHp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiHp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uihp_)));
          set_has_uihp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Game2Battle_WorldBossStart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uiBossId = 1;
  if (has_uibossid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uibossid(), output);
  }

  // required uint32 uiBossLevel = 2;
  if (has_uibosslevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uibosslevel(), output);
  }

  // required uint32 uiExpiryTime = 3;
  if (has_uiexpirytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->uiexpirytime(), output);
  }

  // required uint64 uiHp = 4;
  if (has_uihp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->uihp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Game2Battle_WorldBossStart::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uiBossId = 1;
  if (has_uibossid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uibossid(), target);
  }

  // required uint32 uiBossLevel = 2;
  if (has_uibosslevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uibosslevel(), target);
  }

  // required uint32 uiExpiryTime = 3;
  if (has_uiexpirytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->uiexpirytime(), target);
  }

  // required uint64 uiHp = 4;
  if (has_uihp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->uihp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Game2Battle_WorldBossStart::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uiBossId = 1;
    if (has_uibossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uibossid());
    }

    // required uint32 uiBossLevel = 2;
    if (has_uibosslevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uibosslevel());
    }

    // required uint32 uiExpiryTime = 3;
    if (has_uiexpirytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiexpirytime());
    }

    // required uint64 uiHp = 4;
    if (has_uihp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uihp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Game2Battle_WorldBossStart::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Game2Battle_WorldBossStart* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Game2Battle_WorldBossStart*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Game2Battle_WorldBossStart::MergeFrom(const Game2Battle_WorldBossStart& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uibossid()) {
      set_uibossid(from.uibossid());
    }
    if (from.has_uibosslevel()) {
      set_uibosslevel(from.uibosslevel());
    }
    if (from.has_uiexpirytime()) {
      set_uiexpirytime(from.uiexpirytime());
    }
    if (from.has_uihp()) {
      set_uihp(from.uihp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Game2Battle_WorldBossStart::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Game2Battle_WorldBossStart::CopyFrom(const Game2Battle_WorldBossStart& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Game2Battle_WorldBossStart::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Game2Battle_WorldBossStart::Swap(Game2Battle_WorldBossStart* other) {
  if (other != this) {
    std::swap(uibossid_, other->uibossid_);
    std::swap(uibosslevel_, other->uibosslevel_);
    std::swap(uiexpirytime_, other->uiexpirytime_);
    std::swap(uihp_, other->uihp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Game2Battle_WorldBossStart::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Game2Battle_WorldBossStart_descriptor_;
  metadata.reflection = Game2Battle_WorldBossStart_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Client2Game_WorldBossBid::kUiItemIndexFieldNumber;
const int Client2Game_WorldBossBid::kUiPriceFieldNumber;
#endif  // !_MSC_VER

Client2Game_WorldBossBid::Client2Game_WorldBossBid()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Client2Game_WorldBossBid::InitAsDefaultInstance() {
}

Client2Game_WorldBossBid::Client2Game_WorldBossBid(const Client2Game_WorldBossBid& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Client2Game_WorldBossBid::SharedCtor() {
  _cached_size_ = 0;
  uiitemindex_ = 0u;
  uiprice_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Client2Game_WorldBossBid::~Client2Game_WorldBossBid() {
  SharedDtor();
}

void Client2Game_WorldBossBid::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Client2Game_WorldBossBid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Client2Game_WorldBossBid::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Client2Game_WorldBossBid_descriptor_;
}

const Client2Game_WorldBossBid& Client2Game_WorldBossBid::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

Client2Game_WorldBossBid* Client2Game_WorldBossBid::default_instance_ = NULL;

Client2Game_WorldBossBid* Client2Game_WorldBossBid::New() const {
  return new Client2Game_WorldBossBid;
}

void Client2Game_WorldBossBid::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uiitemindex_ = 0u;
    uiprice_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Client2Game_WorldBossBid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uiItemIndex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiitemindex_)));
          set_has_uiitemindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uiPrice;
        break;
      }

      // required uint32 uiPrice = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiprice_)));
          set_has_uiprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Client2Game_WorldBossBid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uiItemIndex = 1;
  if (has_uiitemindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uiitemindex(), output);
  }

  // required uint32 uiPrice = 2;
  if (has_uiprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uiprice(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Client2Game_WorldBossBid::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uiItemIndex = 1;
  if (has_uiitemindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uiitemindex(), target);
  }

  // required uint32 uiPrice = 2;
  if (has_uiprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uiprice(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Client2Game_WorldBossBid::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uiItemIndex = 1;
    if (has_uiitemindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiitemindex());
    }

    // required uint32 uiPrice = 2;
    if (has_uiprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiprice());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Client2Game_WorldBossBid::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Client2Game_WorldBossBid* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Client2Game_WorldBossBid*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Client2Game_WorldBossBid::MergeFrom(const Client2Game_WorldBossBid& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uiitemindex()) {
      set_uiitemindex(from.uiitemindex());
    }
    if (from.has_uiprice()) {
      set_uiprice(from.uiprice());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Client2Game_WorldBossBid::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Client2Game_WorldBossBid::CopyFrom(const Client2Game_WorldBossBid& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Client2Game_WorldBossBid::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Client2Game_WorldBossBid::Swap(Client2Game_WorldBossBid* other) {
  if (other != this) {
    std::swap(uiitemindex_, other->uiitemindex_);
    std::swap(uiprice_, other->uiprice_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Client2Game_WorldBossBid::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Client2Game_WorldBossBid_descriptor_;
  metadata.reflection = Client2Game_WorldBossBid_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Game2Battle_WorldBossBid::kUiItemIndexFieldNumber;
const int Game2Battle_WorldBossBid::kUiPriceFieldNumber;
#endif  // !_MSC_VER

Game2Battle_WorldBossBid::Game2Battle_WorldBossBid()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Game2Battle_WorldBossBid::InitAsDefaultInstance() {
}

Game2Battle_WorldBossBid::Game2Battle_WorldBossBid(const Game2Battle_WorldBossBid& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Game2Battle_WorldBossBid::SharedCtor() {
  _cached_size_ = 0;
  uiitemindex_ = 0u;
  uiprice_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Game2Battle_WorldBossBid::~Game2Battle_WorldBossBid() {
  SharedDtor();
}

void Game2Battle_WorldBossBid::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Game2Battle_WorldBossBid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Game2Battle_WorldBossBid::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Game2Battle_WorldBossBid_descriptor_;
}

const Game2Battle_WorldBossBid& Game2Battle_WorldBossBid::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

Game2Battle_WorldBossBid* Game2Battle_WorldBossBid::default_instance_ = NULL;

Game2Battle_WorldBossBid* Game2Battle_WorldBossBid::New() const {
  return new Game2Battle_WorldBossBid;
}

void Game2Battle_WorldBossBid::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uiitemindex_ = 0u;
    uiprice_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Game2Battle_WorldBossBid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uiItemIndex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiitemindex_)));
          set_has_uiitemindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uiPrice;
        break;
      }

      // required uint32 uiPrice = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiprice_)));
          set_has_uiprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Game2Battle_WorldBossBid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uiItemIndex = 1;
  if (has_uiitemindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uiitemindex(), output);
  }

  // required uint32 uiPrice = 2;
  if (has_uiprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uiprice(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Game2Battle_WorldBossBid::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uiItemIndex = 1;
  if (has_uiitemindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uiitemindex(), target);
  }

  // required uint32 uiPrice = 2;
  if (has_uiprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uiprice(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Game2Battle_WorldBossBid::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uiItemIndex = 1;
    if (has_uiitemindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiitemindex());
    }

    // required uint32 uiPrice = 2;
    if (has_uiprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiprice());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Game2Battle_WorldBossBid::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Game2Battle_WorldBossBid* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Game2Battle_WorldBossBid*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Game2Battle_WorldBossBid::MergeFrom(const Game2Battle_WorldBossBid& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uiitemindex()) {
      set_uiitemindex(from.uiitemindex());
    }
    if (from.has_uiprice()) {
      set_uiprice(from.uiprice());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Game2Battle_WorldBossBid::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Game2Battle_WorldBossBid::CopyFrom(const Game2Battle_WorldBossBid& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Game2Battle_WorldBossBid::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Game2Battle_WorldBossBid::Swap(Game2Battle_WorldBossBid* other) {
  if (other != this) {
    std::swap(uiitemindex_, other->uiitemindex_);
    std::swap(uiprice_, other->uiprice_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Game2Battle_WorldBossBid::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Game2Battle_WorldBossBid_descriptor_;
  metadata.reflection = Game2Battle_WorldBossBid_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Game2Client_WolrdBoss_SaleHistory::kItemFieldNumber;
#endif  // !_MSC_VER

Game2Client_WolrdBoss_SaleHistory::Game2Client_WolrdBoss_SaleHistory()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Game2Client_WolrdBoss_SaleHistory::InitAsDefaultInstance() {
}

Game2Client_WolrdBoss_SaleHistory::Game2Client_WolrdBoss_SaleHistory(const Game2Client_WolrdBoss_SaleHistory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Game2Client_WolrdBoss_SaleHistory::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Game2Client_WolrdBoss_SaleHistory::~Game2Client_WolrdBoss_SaleHistory() {
  SharedDtor();
}

void Game2Client_WolrdBoss_SaleHistory::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Game2Client_WolrdBoss_SaleHistory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Game2Client_WolrdBoss_SaleHistory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Game2Client_WolrdBoss_SaleHistory_descriptor_;
}

const Game2Client_WolrdBoss_SaleHistory& Game2Client_WolrdBoss_SaleHistory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

Game2Client_WolrdBoss_SaleHistory* Game2Client_WolrdBoss_SaleHistory::default_instance_ = NULL;

Game2Client_WolrdBoss_SaleHistory* Game2Client_WolrdBoss_SaleHistory::New() const {
  return new Game2Client_WolrdBoss_SaleHistory;
}

void Game2Client_WolrdBoss_SaleHistory::Clear() {
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Game2Client_WolrdBoss_SaleHistory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.message.WolrdBossSaledItem item = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_item;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Game2Client_WolrdBoss_SaleHistory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.message.WolrdBossSaledItem item = 1;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Game2Client_WolrdBoss_SaleHistory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.message.WolrdBossSaledItem item = 1;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Game2Client_WolrdBoss_SaleHistory::ByteSize() const {
  int total_size = 0;

  // repeated .proto.message.WolrdBossSaledItem item = 1;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Game2Client_WolrdBoss_SaleHistory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Game2Client_WolrdBoss_SaleHistory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Game2Client_WolrdBoss_SaleHistory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Game2Client_WolrdBoss_SaleHistory::MergeFrom(const Game2Client_WolrdBoss_SaleHistory& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Game2Client_WolrdBoss_SaleHistory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Game2Client_WolrdBoss_SaleHistory::CopyFrom(const Game2Client_WolrdBoss_SaleHistory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Game2Client_WolrdBoss_SaleHistory::IsInitialized() const {

  return true;
}

void Game2Client_WolrdBoss_SaleHistory::Swap(Game2Client_WolrdBoss_SaleHistory* other) {
  if (other != this) {
    item_.Swap(&other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Game2Client_WolrdBoss_SaleHistory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Game2Client_WolrdBoss_SaleHistory_descriptor_;
  metadata.reflection = Game2Client_WolrdBoss_SaleHistory_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Map_CS_TicketBossInfo::kUiTableIdFieldNumber;
#endif  // !_MSC_VER

Map_CS_TicketBossInfo::Map_CS_TicketBossInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Map_CS_TicketBossInfo::InitAsDefaultInstance() {
}

Map_CS_TicketBossInfo::Map_CS_TicketBossInfo(const Map_CS_TicketBossInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Map_CS_TicketBossInfo::SharedCtor() {
  _cached_size_ = 0;
  uitableid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Map_CS_TicketBossInfo::~Map_CS_TicketBossInfo() {
  SharedDtor();
}

void Map_CS_TicketBossInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Map_CS_TicketBossInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Map_CS_TicketBossInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Map_CS_TicketBossInfo_descriptor_;
}

const Map_CS_TicketBossInfo& Map_CS_TicketBossInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

Map_CS_TicketBossInfo* Map_CS_TicketBossInfo::default_instance_ = NULL;

Map_CS_TicketBossInfo* Map_CS_TicketBossInfo::New() const {
  return new Map_CS_TicketBossInfo;
}

void Map_CS_TicketBossInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uitableid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Map_CS_TicketBossInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uiTableId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uitableid_)));
          set_has_uitableid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Map_CS_TicketBossInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uiTableId = 1;
  if (has_uitableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uitableid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Map_CS_TicketBossInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uiTableId = 1;
  if (has_uitableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uitableid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Map_CS_TicketBossInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uiTableId = 1;
    if (has_uitableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uitableid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Map_CS_TicketBossInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Map_CS_TicketBossInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Map_CS_TicketBossInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Map_CS_TicketBossInfo::MergeFrom(const Map_CS_TicketBossInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uitableid()) {
      set_uitableid(from.uitableid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Map_CS_TicketBossInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Map_CS_TicketBossInfo::CopyFrom(const Map_CS_TicketBossInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Map_CS_TicketBossInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Map_CS_TicketBossInfo::Swap(Map_CS_TicketBossInfo* other) {
  if (other != this) {
    std::swap(uitableid_, other->uitableid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Map_CS_TicketBossInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Map_CS_TicketBossInfo_descriptor_;
  metadata.reflection = Map_CS_TicketBossInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Map_SC_TicketBossInfo::kUiTableIdFieldNumber;
const int Map_SC_TicketBossInfo::kUiBossIdFieldNumber;
const int Map_SC_TicketBossInfo::kUiBossHpFieldNumber;
const int Map_SC_TicketBossInfo::kUiRefreshTimeFieldNumber;
#endif  // !_MSC_VER

Map_SC_TicketBossInfo::Map_SC_TicketBossInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Map_SC_TicketBossInfo::InitAsDefaultInstance() {
}

Map_SC_TicketBossInfo::Map_SC_TicketBossInfo(const Map_SC_TicketBossInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Map_SC_TicketBossInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Map_SC_TicketBossInfo::~Map_SC_TicketBossInfo() {
  SharedDtor();
}

void Map_SC_TicketBossInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Map_SC_TicketBossInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Map_SC_TicketBossInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Map_SC_TicketBossInfo_descriptor_;
}

const Map_SC_TicketBossInfo& Map_SC_TicketBossInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

Map_SC_TicketBossInfo* Map_SC_TicketBossInfo::default_instance_ = NULL;

Map_SC_TicketBossInfo* Map_SC_TicketBossInfo::New() const {
  return new Map_SC_TicketBossInfo;
}

void Map_SC_TicketBossInfo::Clear() {
  uitableid_.Clear();
  uibossid_.Clear();
  uibosshp_.Clear();
  uirefreshtime_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Map_SC_TicketBossInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 uiTableId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiTableId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_uitableid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_uitableid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_uiTableId;
        if (input->ExpectTag(16)) goto parse_uiBossId;
        break;
      }

      // repeated uint32 uiBossId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiBossId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_uibossid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_uibossid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uiBossId;
        if (input->ExpectTag(24)) goto parse_uiBossHp;
        break;
      }

      // repeated uint64 uiBossHp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiBossHp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 24, input, this->mutable_uibosshp())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_uibosshp())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uiBossHp;
        if (input->ExpectTag(32)) goto parse_uiRefreshTime;
        break;
      }

      // repeated uint32 uiRefreshTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiRefreshTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_uirefreshtime())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_uirefreshtime())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_uiRefreshTime;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Map_SC_TicketBossInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 uiTableId = 1;
  for (int i = 0; i < this->uitableid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->uitableid(i), output);
  }

  // repeated uint32 uiBossId = 2;
  for (int i = 0; i < this->uibossid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->uibossid(i), output);
  }

  // repeated uint64 uiBossHp = 3;
  for (int i = 0; i < this->uibosshp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      3, this->uibosshp(i), output);
  }

  // repeated uint32 uiRefreshTime = 4;
  for (int i = 0; i < this->uirefreshtime_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->uirefreshtime(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Map_SC_TicketBossInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 uiTableId = 1;
  for (int i = 0; i < this->uitableid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->uitableid(i), target);
  }

  // repeated uint32 uiBossId = 2;
  for (int i = 0; i < this->uibossid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->uibossid(i), target);
  }

  // repeated uint64 uiBossHp = 3;
  for (int i = 0; i < this->uibosshp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(3, this->uibosshp(i), target);
  }

  // repeated uint32 uiRefreshTime = 4;
  for (int i = 0; i < this->uirefreshtime_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->uirefreshtime(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Map_SC_TicketBossInfo::ByteSize() const {
  int total_size = 0;

  // repeated uint32 uiTableId = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->uitableid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->uitableid(i));
    }
    total_size += 1 * this->uitableid_size() + data_size;
  }

  // repeated uint32 uiBossId = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->uibossid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->uibossid(i));
    }
    total_size += 1 * this->uibossid_size() + data_size;
  }

  // repeated uint64 uiBossHp = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->uibosshp_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->uibosshp(i));
    }
    total_size += 1 * this->uibosshp_size() + data_size;
  }

  // repeated uint32 uiRefreshTime = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->uirefreshtime_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->uirefreshtime(i));
    }
    total_size += 1 * this->uirefreshtime_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Map_SC_TicketBossInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Map_SC_TicketBossInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Map_SC_TicketBossInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Map_SC_TicketBossInfo::MergeFrom(const Map_SC_TicketBossInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  uitableid_.MergeFrom(from.uitableid_);
  uibossid_.MergeFrom(from.uibossid_);
  uibosshp_.MergeFrom(from.uibosshp_);
  uirefreshtime_.MergeFrom(from.uirefreshtime_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Map_SC_TicketBossInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Map_SC_TicketBossInfo::CopyFrom(const Map_SC_TicketBossInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Map_SC_TicketBossInfo::IsInitialized() const {

  return true;
}

void Map_SC_TicketBossInfo::Swap(Map_SC_TicketBossInfo* other) {
  if (other != this) {
    uitableid_.Swap(&other->uitableid_);
    uibossid_.Swap(&other->uibossid_);
    uibosshp_.Swap(&other->uibosshp_);
    uirefreshtime_.Swap(&other->uirefreshtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Map_SC_TicketBossInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Map_SC_TicketBossInfo_descriptor_;
  metadata.reflection = Map_SC_TicketBossInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Map_CS_TicketBossChallenge::kUiTableIdFieldNumber;
#endif  // !_MSC_VER

Map_CS_TicketBossChallenge::Map_CS_TicketBossChallenge()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Map_CS_TicketBossChallenge::InitAsDefaultInstance() {
}

Map_CS_TicketBossChallenge::Map_CS_TicketBossChallenge(const Map_CS_TicketBossChallenge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Map_CS_TicketBossChallenge::SharedCtor() {
  _cached_size_ = 0;
  uitableid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Map_CS_TicketBossChallenge::~Map_CS_TicketBossChallenge() {
  SharedDtor();
}

void Map_CS_TicketBossChallenge::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Map_CS_TicketBossChallenge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Map_CS_TicketBossChallenge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Map_CS_TicketBossChallenge_descriptor_;
}

const Map_CS_TicketBossChallenge& Map_CS_TicketBossChallenge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

Map_CS_TicketBossChallenge* Map_CS_TicketBossChallenge::default_instance_ = NULL;

Map_CS_TicketBossChallenge* Map_CS_TicketBossChallenge::New() const {
  return new Map_CS_TicketBossChallenge;
}

void Map_CS_TicketBossChallenge::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uitableid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Map_CS_TicketBossChallenge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uiTableId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uitableid_)));
          set_has_uitableid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Map_CS_TicketBossChallenge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uiTableId = 1;
  if (has_uitableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uitableid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Map_CS_TicketBossChallenge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uiTableId = 1;
  if (has_uitableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uitableid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Map_CS_TicketBossChallenge::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uiTableId = 1;
    if (has_uitableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uitableid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Map_CS_TicketBossChallenge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Map_CS_TicketBossChallenge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Map_CS_TicketBossChallenge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Map_CS_TicketBossChallenge::MergeFrom(const Map_CS_TicketBossChallenge& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uitableid()) {
      set_uitableid(from.uitableid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Map_CS_TicketBossChallenge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Map_CS_TicketBossChallenge::CopyFrom(const Map_CS_TicketBossChallenge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Map_CS_TicketBossChallenge::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Map_CS_TicketBossChallenge::Swap(Map_CS_TicketBossChallenge* other) {
  if (other != this) {
    std::swap(uitableid_, other->uitableid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Map_CS_TicketBossChallenge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Map_CS_TicketBossChallenge_descriptor_;
  metadata.reflection = Map_CS_TicketBossChallenge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Map_SC_TicketBossChallenge::kUiTableIdFieldNumber;
const int Map_SC_TicketBossChallenge::kUiResultFieldNumber;
#endif  // !_MSC_VER

Map_SC_TicketBossChallenge::Map_SC_TicketBossChallenge()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Map_SC_TicketBossChallenge::InitAsDefaultInstance() {
}

Map_SC_TicketBossChallenge::Map_SC_TicketBossChallenge(const Map_SC_TicketBossChallenge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Map_SC_TicketBossChallenge::SharedCtor() {
  _cached_size_ = 0;
  uitableid_ = 0u;
  uiresult_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Map_SC_TicketBossChallenge::~Map_SC_TicketBossChallenge() {
  SharedDtor();
}

void Map_SC_TicketBossChallenge::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Map_SC_TicketBossChallenge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Map_SC_TicketBossChallenge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Map_SC_TicketBossChallenge_descriptor_;
}

const Map_SC_TicketBossChallenge& Map_SC_TicketBossChallenge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

Map_SC_TicketBossChallenge* Map_SC_TicketBossChallenge::default_instance_ = NULL;

Map_SC_TicketBossChallenge* Map_SC_TicketBossChallenge::New() const {
  return new Map_SC_TicketBossChallenge;
}

void Map_SC_TicketBossChallenge::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uitableid_ = 0u;
    uiresult_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Map_SC_TicketBossChallenge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uiTableId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uitableid_)));
          set_has_uitableid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uiResult;
        break;
      }

      // required uint32 uiResult = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiResult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiresult_)));
          set_has_uiresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Map_SC_TicketBossChallenge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uiTableId = 1;
  if (has_uitableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uitableid(), output);
  }

  // required uint32 uiResult = 2;
  if (has_uiresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uiresult(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Map_SC_TicketBossChallenge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uiTableId = 1;
  if (has_uitableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uitableid(), target);
  }

  // required uint32 uiResult = 2;
  if (has_uiresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uiresult(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Map_SC_TicketBossChallenge::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uiTableId = 1;
    if (has_uitableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uitableid());
    }

    // required uint32 uiResult = 2;
    if (has_uiresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiresult());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Map_SC_TicketBossChallenge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Map_SC_TicketBossChallenge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Map_SC_TicketBossChallenge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Map_SC_TicketBossChallenge::MergeFrom(const Map_SC_TicketBossChallenge& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uitableid()) {
      set_uitableid(from.uitableid());
    }
    if (from.has_uiresult()) {
      set_uiresult(from.uiresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Map_SC_TicketBossChallenge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Map_SC_TicketBossChallenge::CopyFrom(const Map_SC_TicketBossChallenge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Map_SC_TicketBossChallenge::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Map_SC_TicketBossChallenge::Swap(Map_SC_TicketBossChallenge* other) {
  if (other != this) {
    std::swap(uitableid_, other->uitableid_);
    std::swap(uiresult_, other->uiresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Map_SC_TicketBossChallenge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Map_SC_TicketBossChallenge_descriptor_;
  metadata.reflection = Map_SC_TicketBossChallenge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Map_CS_ChatMark::kChannelFieldNumber;
#endif  // !_MSC_VER

Map_CS_ChatMark::Map_CS_ChatMark()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Map_CS_ChatMark::InitAsDefaultInstance() {
}

Map_CS_ChatMark::Map_CS_ChatMark(const Map_CS_ChatMark& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Map_CS_ChatMark::SharedCtor() {
  _cached_size_ = 0;
  channel_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Map_CS_ChatMark::~Map_CS_ChatMark() {
  SharedDtor();
}

void Map_CS_ChatMark::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Map_CS_ChatMark::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Map_CS_ChatMark::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Map_CS_ChatMark_descriptor_;
}

const Map_CS_ChatMark& Map_CS_ChatMark::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

Map_CS_ChatMark* Map_CS_ChatMark::default_instance_ = NULL;

Map_CS_ChatMark* Map_CS_ChatMark::New() const {
  return new Map_CS_ChatMark;
}

void Map_CS_ChatMark::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    channel_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Map_CS_ChatMark::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 channel = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Map_CS_ChatMark::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 channel = 1;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->channel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Map_CS_ChatMark::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 channel = 1;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->channel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Map_CS_ChatMark::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 channel = 1;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Map_CS_ChatMark::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Map_CS_ChatMark* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Map_CS_ChatMark*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Map_CS_ChatMark::MergeFrom(const Map_CS_ChatMark& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channel()) {
      set_channel(from.channel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Map_CS_ChatMark::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Map_CS_ChatMark::CopyFrom(const Map_CS_ChatMark& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Map_CS_ChatMark::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Map_CS_ChatMark::Swap(Map_CS_ChatMark* other) {
  if (other != this) {
    std::swap(channel_, other->channel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Map_CS_ChatMark::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Map_CS_ChatMark_descriptor_;
  metadata.reflection = Map_CS_ChatMark_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Map_CS_TakeDropItem::kUiKeyFieldNumber;
const int Map_CS_TakeDropItem::kUiTableIdFieldNumber;
const int Map_CS_TakeDropItem::kUiIndexFieldNumber;
#endif  // !_MSC_VER

Map_CS_TakeDropItem::Map_CS_TakeDropItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Map_CS_TakeDropItem::InitAsDefaultInstance() {
}

Map_CS_TakeDropItem::Map_CS_TakeDropItem(const Map_CS_TakeDropItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Map_CS_TakeDropItem::SharedCtor() {
  _cached_size_ = 0;
  uikey_ = 0u;
  uitableid_ = 0u;
  uiindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Map_CS_TakeDropItem::~Map_CS_TakeDropItem() {
  SharedDtor();
}

void Map_CS_TakeDropItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Map_CS_TakeDropItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Map_CS_TakeDropItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Map_CS_TakeDropItem_descriptor_;
}

const Map_CS_TakeDropItem& Map_CS_TakeDropItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

Map_CS_TakeDropItem* Map_CS_TakeDropItem::default_instance_ = NULL;

Map_CS_TakeDropItem* Map_CS_TakeDropItem::New() const {
  return new Map_CS_TakeDropItem;
}

void Map_CS_TakeDropItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uikey_ = 0u;
    uitableid_ = 0u;
    uiindex_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Map_CS_TakeDropItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uiKey = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uikey_)));
          set_has_uikey();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uiTableId;
        break;
      }

      // required uint32 uiTableId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiTableId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uitableid_)));
          set_has_uitableid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uiIndex;
        break;
      }

      // required uint32 uiIndex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiindex_)));
          set_has_uiindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Map_CS_TakeDropItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uiKey = 1;
  if (has_uikey()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uikey(), output);
  }

  // required uint32 uiTableId = 2;
  if (has_uitableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uitableid(), output);
  }

  // required uint32 uiIndex = 3;
  if (has_uiindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->uiindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Map_CS_TakeDropItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uiKey = 1;
  if (has_uikey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uikey(), target);
  }

  // required uint32 uiTableId = 2;
  if (has_uitableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uitableid(), target);
  }

  // required uint32 uiIndex = 3;
  if (has_uiindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->uiindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Map_CS_TakeDropItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uiKey = 1;
    if (has_uikey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uikey());
    }

    // required uint32 uiTableId = 2;
    if (has_uitableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uitableid());
    }

    // required uint32 uiIndex = 3;
    if (has_uiindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Map_CS_TakeDropItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Map_CS_TakeDropItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Map_CS_TakeDropItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Map_CS_TakeDropItem::MergeFrom(const Map_CS_TakeDropItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uikey()) {
      set_uikey(from.uikey());
    }
    if (from.has_uitableid()) {
      set_uitableid(from.uitableid());
    }
    if (from.has_uiindex()) {
      set_uiindex(from.uiindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Map_CS_TakeDropItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Map_CS_TakeDropItem::CopyFrom(const Map_CS_TakeDropItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Map_CS_TakeDropItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Map_CS_TakeDropItem::Swap(Map_CS_TakeDropItem* other) {
  if (other != this) {
    std::swap(uikey_, other->uikey_);
    std::swap(uitableid_, other->uitableid_);
    std::swap(uiindex_, other->uiindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Map_CS_TakeDropItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Map_CS_TakeDropItem_descriptor_;
  metadata.reflection = Map_CS_TakeDropItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Map_SC_TakeDropItem::kUiResultFieldNumber;
#endif  // !_MSC_VER

Map_SC_TakeDropItem::Map_SC_TakeDropItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Map_SC_TakeDropItem::InitAsDefaultInstance() {
}

Map_SC_TakeDropItem::Map_SC_TakeDropItem(const Map_SC_TakeDropItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Map_SC_TakeDropItem::SharedCtor() {
  _cached_size_ = 0;
  uiresult_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Map_SC_TakeDropItem::~Map_SC_TakeDropItem() {
  SharedDtor();
}

void Map_SC_TakeDropItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Map_SC_TakeDropItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Map_SC_TakeDropItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Map_SC_TakeDropItem_descriptor_;
}

const Map_SC_TakeDropItem& Map_SC_TakeDropItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

Map_SC_TakeDropItem* Map_SC_TakeDropItem::default_instance_ = NULL;

Map_SC_TakeDropItem* Map_SC_TakeDropItem::New() const {
  return new Map_SC_TakeDropItem;
}

void Map_SC_TakeDropItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uiresult_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Map_SC_TakeDropItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uiResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiresult_)));
          set_has_uiresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Map_SC_TakeDropItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uiResult = 1;
  if (has_uiresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uiresult(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Map_SC_TakeDropItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uiResult = 1;
  if (has_uiresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uiresult(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Map_SC_TakeDropItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uiResult = 1;
    if (has_uiresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiresult());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Map_SC_TakeDropItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Map_SC_TakeDropItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Map_SC_TakeDropItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Map_SC_TakeDropItem::MergeFrom(const Map_SC_TakeDropItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uiresult()) {
      set_uiresult(from.uiresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Map_SC_TakeDropItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Map_SC_TakeDropItem::CopyFrom(const Map_SC_TakeDropItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Map_SC_TakeDropItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Map_SC_TakeDropItem::Swap(Map_SC_TakeDropItem* other) {
  if (other != this) {
    std::swap(uiresult_, other->uiresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Map_SC_TakeDropItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Map_SC_TakeDropItem_descriptor_;
  metadata.reflection = Map_SC_TakeDropItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Game2Battle_TicketBossChallenge::kUiTableIdFieldNumber;
#endif  // !_MSC_VER

Game2Battle_TicketBossChallenge::Game2Battle_TicketBossChallenge()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Game2Battle_TicketBossChallenge::InitAsDefaultInstance() {
}

Game2Battle_TicketBossChallenge::Game2Battle_TicketBossChallenge(const Game2Battle_TicketBossChallenge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Game2Battle_TicketBossChallenge::SharedCtor() {
  _cached_size_ = 0;
  uitableid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Game2Battle_TicketBossChallenge::~Game2Battle_TicketBossChallenge() {
  SharedDtor();
}

void Game2Battle_TicketBossChallenge::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Game2Battle_TicketBossChallenge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Game2Battle_TicketBossChallenge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Game2Battle_TicketBossChallenge_descriptor_;
}

const Game2Battle_TicketBossChallenge& Game2Battle_TicketBossChallenge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

Game2Battle_TicketBossChallenge* Game2Battle_TicketBossChallenge::default_instance_ = NULL;

Game2Battle_TicketBossChallenge* Game2Battle_TicketBossChallenge::New() const {
  return new Game2Battle_TicketBossChallenge;
}

void Game2Battle_TicketBossChallenge::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uitableid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Game2Battle_TicketBossChallenge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uiTableId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uitableid_)));
          set_has_uitableid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Game2Battle_TicketBossChallenge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uiTableId = 1;
  if (has_uitableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uitableid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Game2Battle_TicketBossChallenge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uiTableId = 1;
  if (has_uitableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uitableid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Game2Battle_TicketBossChallenge::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uiTableId = 1;
    if (has_uitableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uitableid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Game2Battle_TicketBossChallenge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Game2Battle_TicketBossChallenge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Game2Battle_TicketBossChallenge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Game2Battle_TicketBossChallenge::MergeFrom(const Game2Battle_TicketBossChallenge& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uitableid()) {
      set_uitableid(from.uitableid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Game2Battle_TicketBossChallenge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Game2Battle_TicketBossChallenge::CopyFrom(const Game2Battle_TicketBossChallenge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Game2Battle_TicketBossChallenge::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Game2Battle_TicketBossChallenge::Swap(Game2Battle_TicketBossChallenge* other) {
  if (other != this) {
    std::swap(uitableid_, other->uitableid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Game2Battle_TicketBossChallenge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Game2Battle_TicketBossChallenge_descriptor_;
  metadata.reflection = Game2Battle_TicketBossChallenge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Game2Battle_TakeDropItem::kUiKeyFieldNumber;
const int Game2Battle_TakeDropItem::kUiTableIdFieldNumber;
const int Game2Battle_TakeDropItem::kUiIndexFieldNumber;
const int Game2Battle_TakeDropItem::kUiNullGirdNumFieldNumber;
#endif  // !_MSC_VER

Game2Battle_TakeDropItem::Game2Battle_TakeDropItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Game2Battle_TakeDropItem::InitAsDefaultInstance() {
}

Game2Battle_TakeDropItem::Game2Battle_TakeDropItem(const Game2Battle_TakeDropItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Game2Battle_TakeDropItem::SharedCtor() {
  _cached_size_ = 0;
  uikey_ = 0u;
  uitableid_ = 0u;
  uiindex_ = 0u;
  uinullgirdnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Game2Battle_TakeDropItem::~Game2Battle_TakeDropItem() {
  SharedDtor();
}

void Game2Battle_TakeDropItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Game2Battle_TakeDropItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Game2Battle_TakeDropItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Game2Battle_TakeDropItem_descriptor_;
}

const Game2Battle_TakeDropItem& Game2Battle_TakeDropItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

Game2Battle_TakeDropItem* Game2Battle_TakeDropItem::default_instance_ = NULL;

Game2Battle_TakeDropItem* Game2Battle_TakeDropItem::New() const {
  return new Game2Battle_TakeDropItem;
}

void Game2Battle_TakeDropItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uikey_ = 0u;
    uitableid_ = 0u;
    uiindex_ = 0u;
    uinullgirdnum_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Game2Battle_TakeDropItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uiKey = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uikey_)));
          set_has_uikey();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uiTableId;
        break;
      }

      // required uint32 uiTableId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiTableId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uitableid_)));
          set_has_uitableid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uiIndex;
        break;
      }

      // required uint32 uiIndex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiindex_)));
          set_has_uiindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_uiNullGirdNum;
        break;
      }

      // required uint32 uiNullGirdNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiNullGirdNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uinullgirdnum_)));
          set_has_uinullgirdnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Game2Battle_TakeDropItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uiKey = 1;
  if (has_uikey()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uikey(), output);
  }

  // required uint32 uiTableId = 2;
  if (has_uitableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uitableid(), output);
  }

  // required uint32 uiIndex = 3;
  if (has_uiindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->uiindex(), output);
  }

  // required uint32 uiNullGirdNum = 4;
  if (has_uinullgirdnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->uinullgirdnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Game2Battle_TakeDropItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uiKey = 1;
  if (has_uikey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uikey(), target);
  }

  // required uint32 uiTableId = 2;
  if (has_uitableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uitableid(), target);
  }

  // required uint32 uiIndex = 3;
  if (has_uiindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->uiindex(), target);
  }

  // required uint32 uiNullGirdNum = 4;
  if (has_uinullgirdnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->uinullgirdnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Game2Battle_TakeDropItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uiKey = 1;
    if (has_uikey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uikey());
    }

    // required uint32 uiTableId = 2;
    if (has_uitableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uitableid());
    }

    // required uint32 uiIndex = 3;
    if (has_uiindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiindex());
    }

    // required uint32 uiNullGirdNum = 4;
    if (has_uinullgirdnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uinullgirdnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Game2Battle_TakeDropItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Game2Battle_TakeDropItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Game2Battle_TakeDropItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Game2Battle_TakeDropItem::MergeFrom(const Game2Battle_TakeDropItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uikey()) {
      set_uikey(from.uikey());
    }
    if (from.has_uitableid()) {
      set_uitableid(from.uitableid());
    }
    if (from.has_uiindex()) {
      set_uiindex(from.uiindex());
    }
    if (from.has_uinullgirdnum()) {
      set_uinullgirdnum(from.uinullgirdnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Game2Battle_TakeDropItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Game2Battle_TakeDropItem::CopyFrom(const Game2Battle_TakeDropItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Game2Battle_TakeDropItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Game2Battle_TakeDropItem::Swap(Game2Battle_TakeDropItem* other) {
  if (other != this) {
    std::swap(uikey_, other->uikey_);
    std::swap(uitableid_, other->uitableid_);
    std::swap(uiindex_, other->uiindex_);
    std::swap(uinullgirdnum_, other->uinullgirdnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Game2Battle_TakeDropItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Game2Battle_TakeDropItem_descriptor_;
  metadata.reflection = Game2Battle_TakeDropItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Game2Match_CreateRoom::kObjFieldNumber;
const int Game2Match_CreateRoom::kSPlyInfoFieldNumber;
#endif  // !_MSC_VER

Game2Match_CreateRoom::Game2Match_CreateRoom()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Game2Match_CreateRoom::InitAsDefaultInstance() {
  splyinfo_ = const_cast< ::proto::message::MatchPlayerInfo*>(&::proto::message::MatchPlayerInfo::default_instance());
}

Game2Match_CreateRoom::Game2Match_CreateRoom(const Game2Match_CreateRoom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Game2Match_CreateRoom::SharedCtor() {
  _cached_size_ = 0;
  obj_ = 0;
  splyinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Game2Match_CreateRoom::~Game2Match_CreateRoom() {
  SharedDtor();
}

void Game2Match_CreateRoom::SharedDtor() {
  if (this != default_instance_) {
    delete splyinfo_;
  }
}

void Game2Match_CreateRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Game2Match_CreateRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Game2Match_CreateRoom_descriptor_;
}

const Game2Match_CreateRoom& Game2Match_CreateRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

Game2Match_CreateRoom* Game2Match_CreateRoom::default_instance_ = NULL;

Game2Match_CreateRoom* Game2Match_CreateRoom::New() const {
  return new Game2Match_CreateRoom;
}

void Game2Match_CreateRoom::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    obj_ = 0;
    if (has_splyinfo()) {
      if (splyinfo_ != NULL) splyinfo_->::proto::message::MatchPlayerInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Game2Match_CreateRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 obj = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &obj_)));
          set_has_obj();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sPlyInfo;
        break;
      }

      // optional .proto.message.MatchPlayerInfo sPlyInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sPlyInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_splyinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Game2Match_CreateRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 obj = 1;
  if (has_obj()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->obj(), output);
  }

  // optional .proto.message.MatchPlayerInfo sPlyInfo = 2;
  if (has_splyinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->splyinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Game2Match_CreateRoom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 obj = 1;
  if (has_obj()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->obj(), target);
  }

  // optional .proto.message.MatchPlayerInfo sPlyInfo = 2;
  if (has_splyinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->splyinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Game2Match_CreateRoom::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 obj = 1;
    if (has_obj()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->obj());
    }

    // optional .proto.message.MatchPlayerInfo sPlyInfo = 2;
    if (has_splyinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->splyinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Game2Match_CreateRoom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Game2Match_CreateRoom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Game2Match_CreateRoom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Game2Match_CreateRoom::MergeFrom(const Game2Match_CreateRoom& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_obj()) {
      set_obj(from.obj());
    }
    if (from.has_splyinfo()) {
      mutable_splyinfo()->::proto::message::MatchPlayerInfo::MergeFrom(from.splyinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Game2Match_CreateRoom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Game2Match_CreateRoom::CopyFrom(const Game2Match_CreateRoom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Game2Match_CreateRoom::IsInitialized() const {

  if (has_splyinfo()) {
    if (!this->splyinfo().IsInitialized()) return false;
  }
  return true;
}

void Game2Match_CreateRoom::Swap(Game2Match_CreateRoom* other) {
  if (other != this) {
    std::swap(obj_, other->obj_);
    std::swap(splyinfo_, other->splyinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Game2Match_CreateRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Game2Match_CreateRoom_descriptor_;
  metadata.reflection = Game2Match_CreateRoom_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Game2Match_GetRoomList::kObjFieldNumber;
#endif  // !_MSC_VER

Game2Match_GetRoomList::Game2Match_GetRoomList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Game2Match_GetRoomList::InitAsDefaultInstance() {
}

Game2Match_GetRoomList::Game2Match_GetRoomList(const Game2Match_GetRoomList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Game2Match_GetRoomList::SharedCtor() {
  _cached_size_ = 0;
  obj_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Game2Match_GetRoomList::~Game2Match_GetRoomList() {
  SharedDtor();
}

void Game2Match_GetRoomList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Game2Match_GetRoomList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Game2Match_GetRoomList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Game2Match_GetRoomList_descriptor_;
}

const Game2Match_GetRoomList& Game2Match_GetRoomList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

Game2Match_GetRoomList* Game2Match_GetRoomList::default_instance_ = NULL;

Game2Match_GetRoomList* Game2Match_GetRoomList::New() const {
  return new Game2Match_GetRoomList;
}

void Game2Match_GetRoomList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    obj_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Game2Match_GetRoomList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 obj = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &obj_)));
          set_has_obj();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Game2Match_GetRoomList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 obj = 1;
  if (has_obj()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->obj(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Game2Match_GetRoomList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 obj = 1;
  if (has_obj()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->obj(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Game2Match_GetRoomList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 obj = 1;
    if (has_obj()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->obj());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Game2Match_GetRoomList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Game2Match_GetRoomList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Game2Match_GetRoomList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Game2Match_GetRoomList::MergeFrom(const Game2Match_GetRoomList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_obj()) {
      set_obj(from.obj());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Game2Match_GetRoomList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Game2Match_GetRoomList::CopyFrom(const Game2Match_GetRoomList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Game2Match_GetRoomList::IsInitialized() const {

  return true;
}

void Game2Match_GetRoomList::Swap(Game2Match_GetRoomList* other) {
  if (other != this) {
    std::swap(obj_, other->obj_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Game2Match_GetRoomList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Game2Match_GetRoomList_descriptor_;
  metadata.reflection = Game2Match_GetRoomList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Game2Battle_UpdateHeadInfo::kInfoFieldNumber;
#endif  // !_MSC_VER

Game2Battle_UpdateHeadInfo::Game2Battle_UpdateHeadInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Game2Battle_UpdateHeadInfo::InitAsDefaultInstance() {
  info_ = const_cast< ::proto::message::BattleSingleHeadInfo*>(&::proto::message::BattleSingleHeadInfo::default_instance());
}

Game2Battle_UpdateHeadInfo::Game2Battle_UpdateHeadInfo(const Game2Battle_UpdateHeadInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Game2Battle_UpdateHeadInfo::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Game2Battle_UpdateHeadInfo::~Game2Battle_UpdateHeadInfo() {
  SharedDtor();
}

void Game2Battle_UpdateHeadInfo::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void Game2Battle_UpdateHeadInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Game2Battle_UpdateHeadInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Game2Battle_UpdateHeadInfo_descriptor_;
}

const Game2Battle_UpdateHeadInfo& Game2Battle_UpdateHeadInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

Game2Battle_UpdateHeadInfo* Game2Battle_UpdateHeadInfo::default_instance_ = NULL;

Game2Battle_UpdateHeadInfo* Game2Battle_UpdateHeadInfo::New() const {
  return new Game2Battle_UpdateHeadInfo;
}

void Game2Battle_UpdateHeadInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != NULL) info_->::proto::message::BattleSingleHeadInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Game2Battle_UpdateHeadInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.message.BattleSingleHeadInfo info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Game2Battle_UpdateHeadInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto.message.BattleSingleHeadInfo info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Game2Battle_UpdateHeadInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto.message.BattleSingleHeadInfo info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Game2Battle_UpdateHeadInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto.message.BattleSingleHeadInfo info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Game2Battle_UpdateHeadInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Game2Battle_UpdateHeadInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Game2Battle_UpdateHeadInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Game2Battle_UpdateHeadInfo::MergeFrom(const Game2Battle_UpdateHeadInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::proto::message::BattleSingleHeadInfo::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Game2Battle_UpdateHeadInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Game2Battle_UpdateHeadInfo::CopyFrom(const Game2Battle_UpdateHeadInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Game2Battle_UpdateHeadInfo::IsInitialized() const {

  return true;
}

void Game2Battle_UpdateHeadInfo::Swap(Game2Battle_UpdateHeadInfo* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Game2Battle_UpdateHeadInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Game2Battle_UpdateHeadInfo_descriptor_;
  metadata.reflection = Game2Battle_UpdateHeadInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Game2Match_CreateTerritoryBattle::kInfoFieldNumber;
#endif  // !_MSC_VER

Game2Match_CreateTerritoryBattle::Game2Match_CreateTerritoryBattle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Game2Match_CreateTerritoryBattle::InitAsDefaultInstance() {
}

Game2Match_CreateTerritoryBattle::Game2Match_CreateTerritoryBattle(const Game2Match_CreateTerritoryBattle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Game2Match_CreateTerritoryBattle::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Game2Match_CreateTerritoryBattle::~Game2Match_CreateTerritoryBattle() {
  SharedDtor();
}

void Game2Match_CreateTerritoryBattle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Game2Match_CreateTerritoryBattle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Game2Match_CreateTerritoryBattle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Game2Match_CreateTerritoryBattle_descriptor_;
}

const Game2Match_CreateTerritoryBattle& Game2Match_CreateTerritoryBattle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

Game2Match_CreateTerritoryBattle* Game2Match_CreateTerritoryBattle::default_instance_ = NULL;

Game2Match_CreateTerritoryBattle* Game2Match_CreateTerritoryBattle::New() const {
  return new Game2Match_CreateTerritoryBattle;
}

void Game2Match_CreateTerritoryBattle::Clear() {
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Game2Match_CreateTerritoryBattle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.message.TBFieldInfo info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Game2Match_CreateTerritoryBattle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.message.TBFieldInfo info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Game2Match_CreateTerritoryBattle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.message.TBFieldInfo info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Game2Match_CreateTerritoryBattle::ByteSize() const {
  int total_size = 0;

  // repeated .proto.message.TBFieldInfo info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Game2Match_CreateTerritoryBattle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Game2Match_CreateTerritoryBattle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Game2Match_CreateTerritoryBattle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Game2Match_CreateTerritoryBattle::MergeFrom(const Game2Match_CreateTerritoryBattle& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Game2Match_CreateTerritoryBattle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Game2Match_CreateTerritoryBattle::CopyFrom(const Game2Match_CreateTerritoryBattle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Game2Match_CreateTerritoryBattle::IsInitialized() const {

  return true;
}

void Game2Match_CreateTerritoryBattle::Swap(Game2Match_CreateTerritoryBattle* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Game2Match_CreateTerritoryBattle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Game2Match_CreateTerritoryBattle_descriptor_;
  metadata.reflection = Game2Match_CreateTerritoryBattle_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace proto

// @@protoc_insertion_point(global_scope)
