// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: login.proto

#ifndef PROTOBUF_login_2eproto__INCLUDED
#define PROTOBUF_login_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
#include "item.pb.h"
#include "activity.pb.h"
// @@protoc_insertion_point(includes)

namespace proto {
namespace message {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_login_2eproto();
void protobuf_AssignDesc_login_2eproto();
void protobuf_ShutdownFile_login_2eproto();

class CharShow;
class CharShowInfo;
class AccountInfo;
class Login_CTS_ReqServerList;
class Login_STC_ReqPlayerList;
class Login_ServerList;
class Login_STC_ServerList;
class Login_CTS_CheckAccount;
class Login_STC_CheckAccountRe;
class Login_CTS_SelectServer;
class Login_STC_SelectServer;
class Login_CTS_Register;
class Login_STC_Register;
class Login_CTS_Version;
class Login_STC_Version;
class Login_CTS_QueryPlayerData;
class Login_STC_QueryPlayerData;
class Login_CTS_CreateChar;
class Login_STC_CreateChar;
class Login_STC_PlayerData;
class Login_STC_EnterScene;
class player_sync_data;
class Login_STC_Sync_Self;
class Login_STC_Sync_Other;
class Login_STC_AnotherLogin;
class Login_STC_ClientLoadOK;
class Login_CS_ChangePlayerName;
class Login_STC_ChangePlayerName;
class Login_STC_NotifyActivity;

// ===================================================================

class CharShow : public ::google::protobuf::Message {
 public:
  CharShow();
  virtual ~CharShow();

  CharShow(const CharShow& from);

  inline CharShow& operator=(const CharShow& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CharShow& default_instance();

  void Swap(CharShow* other);

  // implements Message ----------------------------------------------

  CharShow* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CharShow& from);
  void MergeFrom(const CharShow& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 server_id = 1;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 1;
  inline ::google::protobuf::int32 server_id() const;
  inline void set_server_id(::google::protobuf::int32 value);

  // optional int32 career = 2;
  inline bool has_career() const;
  inline void clear_career();
  static const int kCareerFieldNumber = 2;
  inline ::google::protobuf::int32 career() const;
  inline void set_career(::google::protobuf::int32 value);

  // optional int32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 dhlevel = 4;
  inline bool has_dhlevel() const;
  inline void clear_dhlevel();
  static const int kDhlevelFieldNumber = 4;
  inline ::google::protobuf::int32 dhlevel() const;
  inline void set_dhlevel(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.message.CharShow)
 private:
  inline void set_has_server_id();
  inline void clear_has_server_id();
  inline void set_has_career();
  inline void clear_has_career();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_dhlevel();
  inline void clear_has_dhlevel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 server_id_;
  ::google::protobuf::int32 career_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 dhlevel_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();

  void InitAsDefaultInstance();
  static CharShow* default_instance_;
};
// -------------------------------------------------------------------

class CharShowInfo : public ::google::protobuf::Message {
 public:
  CharShowInfo();
  virtual ~CharShowInfo();

  CharShowInfo(const CharShowInfo& from);

  inline CharShowInfo& operator=(const CharShowInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CharShowInfo& default_instance();

  void Swap(CharShowInfo* other);

  // implements Message ----------------------------------------------

  CharShowInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CharShowInfo& from);
  void MergeFrom(const CharShowInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 last_server_id = 1;
  inline bool has_last_server_id() const;
  inline void clear_last_server_id();
  static const int kLastServerIdFieldNumber = 1;
  inline ::google::protobuf::int32 last_server_id() const;
  inline void set_last_server_id(::google::protobuf::int32 value);

  // repeated .proto.message.CharShow char_list = 2;
  inline int char_list_size() const;
  inline void clear_char_list();
  static const int kCharListFieldNumber = 2;
  inline const ::proto::message::CharShow& char_list(int index) const;
  inline ::proto::message::CharShow* mutable_char_list(int index);
  inline ::proto::message::CharShow* add_char_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::message::CharShow >&
      char_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::message::CharShow >*
      mutable_char_list();

  // @@protoc_insertion_point(class_scope:proto.message.CharShowInfo)
 private:
  inline void set_has_last_server_id();
  inline void clear_has_last_server_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto::message::CharShow > char_list_;
  ::google::protobuf::int32 last_server_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();

  void InitAsDefaultInstance();
  static CharShowInfo* default_instance_;
};
// -------------------------------------------------------------------

class AccountInfo : public ::google::protobuf::Message {
 public:
  AccountInfo();
  virtual ~AccountInfo();

  AccountInfo(const AccountInfo& from);

  inline AccountInfo& operator=(const AccountInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AccountInfo& default_instance();

  void Swap(AccountInfo* other);

  // implements Message ----------------------------------------------

  AccountInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AccountInfo& from);
  void MergeFrom(const AccountInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string account = 1;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 1;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional string password = 2;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 2;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // optional .proto.message.CharShowInfo char_show_info = 3;
  inline bool has_char_show_info() const;
  inline void clear_char_show_info();
  static const int kCharShowInfoFieldNumber = 3;
  inline const ::proto::message::CharShowInfo& char_show_info() const;
  inline ::proto::message::CharShowInfo* mutable_char_show_info();
  inline ::proto::message::CharShowInfo* release_char_show_info();
  inline void set_allocated_char_show_info(::proto::message::CharShowInfo* char_show_info);

  // @@protoc_insertion_point(class_scope:proto.message.AccountInfo)
 private:
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_char_show_info();
  inline void clear_has_char_show_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* account_;
  ::std::string* password_;
  ::proto::message::CharShowInfo* char_show_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();

  void InitAsDefaultInstance();
  static AccountInfo* default_instance_;
};
// -------------------------------------------------------------------

class Login_CTS_ReqServerList : public ::google::protobuf::Message {
 public:
  Login_CTS_ReqServerList();
  virtual ~Login_CTS_ReqServerList();

  Login_CTS_ReqServerList(const Login_CTS_ReqServerList& from);

  inline Login_CTS_ReqServerList& operator=(const Login_CTS_ReqServerList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Login_CTS_ReqServerList& default_instance();

  void Swap(Login_CTS_ReqServerList* other);

  // implements Message ----------------------------------------------

  Login_CTS_ReqServerList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Login_CTS_ReqServerList& from);
  void MergeFrom(const Login_CTS_ReqServerList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string account = 1;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 1;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // required string pwd = 2;
  inline bool has_pwd() const;
  inline void clear_pwd();
  static const int kPwdFieldNumber = 2;
  inline const ::std::string& pwd() const;
  inline void set_pwd(const ::std::string& value);
  inline void set_pwd(const char* value);
  inline void set_pwd(const char* value, size_t size);
  inline ::std::string* mutable_pwd();
  inline ::std::string* release_pwd();
  inline void set_allocated_pwd(::std::string* pwd);

  // @@protoc_insertion_point(class_scope:proto.message.Login_CTS_ReqServerList)
 private:
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_pwd();
  inline void clear_has_pwd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* account_;
  ::std::string* pwd_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();

  void InitAsDefaultInstance();
  static Login_CTS_ReqServerList* default_instance_;
};
// -------------------------------------------------------------------

class Login_STC_ReqPlayerList : public ::google::protobuf::Message {
 public:
  Login_STC_ReqPlayerList();
  virtual ~Login_STC_ReqPlayerList();

  Login_STC_ReqPlayerList(const Login_STC_ReqPlayerList& from);

  inline Login_STC_ReqPlayerList& operator=(const Login_STC_ReqPlayerList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Login_STC_ReqPlayerList& default_instance();

  void Swap(Login_STC_ReqPlayerList* other);

  // implements Message ----------------------------------------------

  Login_STC_ReqPlayerList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Login_STC_ReqPlayerList& from);
  void MergeFrom(const Login_STC_ReqPlayerList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.message.CharShow datalist = 1;
  inline int datalist_size() const;
  inline void clear_datalist();
  static const int kDatalistFieldNumber = 1;
  inline const ::proto::message::CharShow& datalist(int index) const;
  inline ::proto::message::CharShow* mutable_datalist(int index);
  inline ::proto::message::CharShow* add_datalist();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::message::CharShow >&
      datalist() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::message::CharShow >*
      mutable_datalist();

  // @@protoc_insertion_point(class_scope:proto.message.Login_STC_ReqPlayerList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto::message::CharShow > datalist_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();

  void InitAsDefaultInstance();
  static Login_STC_ReqPlayerList* default_instance_;
};
// -------------------------------------------------------------------

class Login_ServerList : public ::google::protobuf::Message {
 public:
  Login_ServerList();
  virtual ~Login_ServerList();

  Login_ServerList(const Login_ServerList& from);

  inline Login_ServerList& operator=(const Login_ServerList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Login_ServerList& default_instance();

  void Swap(Login_ServerList* other);

  // implements Message ----------------------------------------------

  Login_ServerList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Login_ServerList& from);
  void MergeFrom(const Login_ServerList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string ServerName = 1;
  inline bool has_servername() const;
  inline void clear_servername();
  static const int kServerNameFieldNumber = 1;
  inline const ::std::string& servername() const;
  inline void set_servername(const ::std::string& value);
  inline void set_servername(const char* value);
  inline void set_servername(const char* value, size_t size);
  inline ::std::string* mutable_servername();
  inline ::std::string* release_servername();
  inline void set_allocated_servername(::std::string* servername);

  // required int32 ServerID = 2;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServerIDFieldNumber = 2;
  inline ::google::protobuf::int32 serverid() const;
  inline void set_serverid(::google::protobuf::int32 value);

  // required int32 Status = 3;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 3;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);

  // required int32 start_time = 4;
  inline bool has_start_time() const;
  inline void clear_start_time();
  static const int kStartTimeFieldNumber = 4;
  inline ::google::protobuf::int32 start_time() const;
  inline void set_start_time(::google::protobuf::int32 value);

  // required .proto.message.CharShow char_show = 5;
  inline bool has_char_show() const;
  inline void clear_char_show();
  static const int kCharShowFieldNumber = 5;
  inline const ::proto::message::CharShow& char_show() const;
  inline ::proto::message::CharShow* mutable_char_show();
  inline ::proto::message::CharShow* release_char_show();
  inline void set_allocated_char_show(::proto::message::CharShow* char_show);

  // required int32 area_id = 6;
  inline bool has_area_id() const;
  inline void clear_area_id();
  static const int kAreaIdFieldNumber = 6;
  inline ::google::protobuf::int32 area_id() const;
  inline void set_area_id(::google::protobuf::int32 value);

  // required string area_name = 7;
  inline bool has_area_name() const;
  inline void clear_area_name();
  static const int kAreaNameFieldNumber = 7;
  inline const ::std::string& area_name() const;
  inline void set_area_name(const ::std::string& value);
  inline void set_area_name(const char* value);
  inline void set_area_name(const char* value, size_t size);
  inline ::std::string* mutable_area_name();
  inline ::std::string* release_area_name();
  inline void set_allocated_area_name(::std::string* area_name);

  // required int32 is_recommend = 8;
  inline bool has_is_recommend() const;
  inline void clear_is_recommend();
  static const int kIsRecommendFieldNumber = 8;
  inline ::google::protobuf::int32 is_recommend() const;
  inline void set_is_recommend(::google::protobuf::int32 value);

  // optional int32 is_newserver = 9;
  inline bool has_is_newserver() const;
  inline void clear_is_newserver();
  static const int kIsNewserverFieldNumber = 9;
  inline ::google::protobuf::int32 is_newserver() const;
  inline void set_is_newserver(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Login_ServerList)
 private:
  inline void set_has_servername();
  inline void clear_has_servername();
  inline void set_has_serverid();
  inline void clear_has_serverid();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_start_time();
  inline void clear_has_start_time();
  inline void set_has_char_show();
  inline void clear_has_char_show();
  inline void set_has_area_id();
  inline void clear_has_area_id();
  inline void set_has_area_name();
  inline void clear_has_area_name();
  inline void set_has_is_recommend();
  inline void clear_has_is_recommend();
  inline void set_has_is_newserver();
  inline void clear_has_is_newserver();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* servername_;
  ::google::protobuf::int32 serverid_;
  ::google::protobuf::int32 status_;
  ::proto::message::CharShow* char_show_;
  ::google::protobuf::int32 start_time_;
  ::google::protobuf::int32 area_id_;
  ::std::string* area_name_;
  ::google::protobuf::int32 is_recommend_;
  ::google::protobuf::int32 is_newserver_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();

  void InitAsDefaultInstance();
  static Login_ServerList* default_instance_;
};
// -------------------------------------------------------------------

class Login_STC_ServerList : public ::google::protobuf::Message {
 public:
  Login_STC_ServerList();
  virtual ~Login_STC_ServerList();

  Login_STC_ServerList(const Login_STC_ServerList& from);

  inline Login_STC_ServerList& operator=(const Login_STC_ServerList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Login_STC_ServerList& default_instance();

  void Swap(Login_STC_ServerList* other);

  // implements Message ----------------------------------------------

  Login_STC_ServerList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Login_STC_ServerList& from);
  void MergeFrom(const Login_STC_ServerList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.message.Login_ServerList listSev = 1;
  inline int listsev_size() const;
  inline void clear_listsev();
  static const int kListSevFieldNumber = 1;
  inline const ::proto::message::Login_ServerList& listsev(int index) const;
  inline ::proto::message::Login_ServerList* mutable_listsev(int index);
  inline ::proto::message::Login_ServerList* add_listsev();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::message::Login_ServerList >&
      listsev() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::message::Login_ServerList >*
      mutable_listsev();

  // required int32 last_server_id = 2;
  inline bool has_last_server_id() const;
  inline void clear_last_server_id();
  static const int kLastServerIdFieldNumber = 2;
  inline ::google::protobuf::int32 last_server_id() const;
  inline void set_last_server_id(::google::protobuf::int32 value);

  // required int32 cur_time = 3;
  inline bool has_cur_time() const;
  inline void clear_cur_time();
  static const int kCurTimeFieldNumber = 3;
  inline ::google::protobuf::int32 cur_time() const;
  inline void set_cur_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Login_STC_ServerList)
 private:
  inline void set_has_last_server_id();
  inline void clear_has_last_server_id();
  inline void set_has_cur_time();
  inline void clear_has_cur_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto::message::Login_ServerList > listsev_;
  ::google::protobuf::int32 last_server_id_;
  ::google::protobuf::int32 cur_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();

  void InitAsDefaultInstance();
  static Login_STC_ServerList* default_instance_;
};
// -------------------------------------------------------------------

class Login_CTS_CheckAccount : public ::google::protobuf::Message {
 public:
  Login_CTS_CheckAccount();
  virtual ~Login_CTS_CheckAccount();

  Login_CTS_CheckAccount(const Login_CTS_CheckAccount& from);

  inline Login_CTS_CheckAccount& operator=(const Login_CTS_CheckAccount& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Login_CTS_CheckAccount& default_instance();

  void Swap(Login_CTS_CheckAccount* other);

  // implements Message ----------------------------------------------

  Login_CTS_CheckAccount* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Login_CTS_CheckAccount& from);
  void MergeFrom(const Login_CTS_CheckAccount& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string account = 1;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 1;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // required string pwd = 2;
  inline bool has_pwd() const;
  inline void clear_pwd();
  static const int kPwdFieldNumber = 2;
  inline const ::std::string& pwd() const;
  inline void set_pwd(const ::std::string& value);
  inline void set_pwd(const char* value);
  inline void set_pwd(const char* value, size_t size);
  inline ::std::string* mutable_pwd();
  inline ::std::string* release_pwd();
  inline void set_allocated_pwd(::std::string* pwd);

  // @@protoc_insertion_point(class_scope:proto.message.Login_CTS_CheckAccount)
 private:
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_pwd();
  inline void clear_has_pwd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* account_;
  ::std::string* pwd_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();

  void InitAsDefaultInstance();
  static Login_CTS_CheckAccount* default_instance_;
};
// -------------------------------------------------------------------

class Login_STC_CheckAccountRe : public ::google::protobuf::Message {
 public:
  Login_STC_CheckAccountRe();
  virtual ~Login_STC_CheckAccountRe();

  Login_STC_CheckAccountRe(const Login_STC_CheckAccountRe& from);

  inline Login_STC_CheckAccountRe& operator=(const Login_STC_CheckAccountRe& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Login_STC_CheckAccountRe& default_instance();

  void Swap(Login_STC_CheckAccountRe* other);

  // implements Message ----------------------------------------------

  Login_STC_CheckAccountRe* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Login_STC_CheckAccountRe& from);
  void MergeFrom(const Login_STC_CheckAccountRe& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 nErr = 1;
  inline bool has_nerr() const;
  inline void clear_nerr();
  static const int kNErrFieldNumber = 1;
  inline ::google::protobuf::int32 nerr() const;
  inline void set_nerr(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Login_STC_CheckAccountRe)
 private:
  inline void set_has_nerr();
  inline void clear_has_nerr();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 nerr_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();

  void InitAsDefaultInstance();
  static Login_STC_CheckAccountRe* default_instance_;
};
// -------------------------------------------------------------------

class Login_CTS_SelectServer : public ::google::protobuf::Message {
 public:
  Login_CTS_SelectServer();
  virtual ~Login_CTS_SelectServer();

  Login_CTS_SelectServer(const Login_CTS_SelectServer& from);

  inline Login_CTS_SelectServer& operator=(const Login_CTS_SelectServer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Login_CTS_SelectServer& default_instance();

  void Swap(Login_CTS_SelectServer* other);

  // implements Message ----------------------------------------------

  Login_CTS_SelectServer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Login_CTS_SelectServer& from);
  void MergeFrom(const Login_CTS_SelectServer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ServerID = 1;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServerIDFieldNumber = 1;
  inline ::google::protobuf::int32 serverid() const;
  inline void set_serverid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Login_CTS_SelectServer)
 private:
  inline void set_has_serverid();
  inline void clear_has_serverid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 serverid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();

  void InitAsDefaultInstance();
  static Login_CTS_SelectServer* default_instance_;
};
// -------------------------------------------------------------------

class Login_STC_SelectServer : public ::google::protobuf::Message {
 public:
  Login_STC_SelectServer();
  virtual ~Login_STC_SelectServer();

  Login_STC_SelectServer(const Login_STC_SelectServer& from);

  inline Login_STC_SelectServer& operator=(const Login_STC_SelectServer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Login_STC_SelectServer& default_instance();

  void Swap(Login_STC_SelectServer* other);

  // implements Message ----------------------------------------------

  Login_STC_SelectServer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Login_STC_SelectServer& from);
  void MergeFrom(const Login_STC_SelectServer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional string ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional int32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Login_STC_SelectServer)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* ip_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 port_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();

  void InitAsDefaultInstance();
  static Login_STC_SelectServer* default_instance_;
};
// -------------------------------------------------------------------

class Login_CTS_Register : public ::google::protobuf::Message {
 public:
  Login_CTS_Register();
  virtual ~Login_CTS_Register();

  Login_CTS_Register(const Login_CTS_Register& from);

  inline Login_CTS_Register& operator=(const Login_CTS_Register& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Login_CTS_Register& default_instance();

  void Swap(Login_CTS_Register* other);

  // implements Message ----------------------------------------------

  Login_CTS_Register* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Login_CTS_Register& from);
  void MergeFrom(const Login_CTS_Register& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string account = 1;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 1;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional string password = 2;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 2;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // @@protoc_insertion_point(class_scope:proto.message.Login_CTS_Register)
 private:
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_password();
  inline void clear_has_password();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* account_;
  ::std::string* password_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();

  void InitAsDefaultInstance();
  static Login_CTS_Register* default_instance_;
};
// -------------------------------------------------------------------

class Login_STC_Register : public ::google::protobuf::Message {
 public:
  Login_STC_Register();
  virtual ~Login_STC_Register();

  Login_STC_Register(const Login_STC_Register& from);

  inline Login_STC_Register& operator=(const Login_STC_Register& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Login_STC_Register& default_instance();

  void Swap(Login_STC_Register* other);

  // implements Message ----------------------------------------------

  Login_STC_Register* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Login_STC_Register& from);
  void MergeFrom(const Login_STC_Register& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Login_STC_Register)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();

  void InitAsDefaultInstance();
  static Login_STC_Register* default_instance_;
};
// -------------------------------------------------------------------

class Login_CTS_Version : public ::google::protobuf::Message {
 public:
  Login_CTS_Version();
  virtual ~Login_CTS_Version();

  Login_CTS_Version(const Login_CTS_Version& from);

  inline Login_CTS_Version& operator=(const Login_CTS_Version& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Login_CTS_Version& default_instance();

  void Swap(Login_CTS_Version* other);

  // implements Message ----------------------------------------------

  Login_CTS_Version* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Login_CTS_Version& from);
  void MergeFrom(const Login_CTS_Version& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.message.Login_CTS_Version)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();

  void InitAsDefaultInstance();
  static Login_CTS_Version* default_instance_;
};
// -------------------------------------------------------------------

class Login_STC_Version : public ::google::protobuf::Message {
 public:
  Login_STC_Version();
  virtual ~Login_STC_Version();

  Login_STC_Version(const Login_STC_Version& from);

  inline Login_STC_Version& operator=(const Login_STC_Version& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Login_STC_Version& default_instance();

  void Swap(Login_STC_Version* other);

  // implements Message ----------------------------------------------

  Login_STC_Version* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Login_STC_Version& from);
  void MergeFrom(const Login_STC_Version& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string version = 1;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 1;
  inline const ::std::string& version() const;
  inline void set_version(const ::std::string& value);
  inline void set_version(const char* value);
  inline void set_version(const char* value, size_t size);
  inline ::std::string* mutable_version();
  inline ::std::string* release_version();
  inline void set_allocated_version(::std::string* version);

  // @@protoc_insertion_point(class_scope:proto.message.Login_STC_Version)
 private:
  inline void set_has_version();
  inline void clear_has_version();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* version_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();

  void InitAsDefaultInstance();
  static Login_STC_Version* default_instance_;
};
// -------------------------------------------------------------------

class Login_CTS_QueryPlayerData : public ::google::protobuf::Message {
 public:
  Login_CTS_QueryPlayerData();
  virtual ~Login_CTS_QueryPlayerData();

  Login_CTS_QueryPlayerData(const Login_CTS_QueryPlayerData& from);

  inline Login_CTS_QueryPlayerData& operator=(const Login_CTS_QueryPlayerData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Login_CTS_QueryPlayerData& default_instance();

  void Swap(Login_CTS_QueryPlayerData* other);

  // implements Message ----------------------------------------------

  Login_CTS_QueryPlayerData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Login_CTS_QueryPlayerData& from);
  void MergeFrom(const Login_CTS_QueryPlayerData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string Account = 1;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 1;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // required int32 ServerId = 2;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServerIdFieldNumber = 2;
  inline ::google::protobuf::int32 serverid() const;
  inline void set_serverid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Login_CTS_QueryPlayerData)
 private:
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_serverid();
  inline void clear_has_serverid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* account_;
  ::google::protobuf::int32 serverid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();

  void InitAsDefaultInstance();
  static Login_CTS_QueryPlayerData* default_instance_;
};
// -------------------------------------------------------------------

class Login_STC_QueryPlayerData : public ::google::protobuf::Message {
 public:
  Login_STC_QueryPlayerData();
  virtual ~Login_STC_QueryPlayerData();

  Login_STC_QueryPlayerData(const Login_STC_QueryPlayerData& from);

  inline Login_STC_QueryPlayerData& operator=(const Login_STC_QueryPlayerData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Login_STC_QueryPlayerData& default_instance();

  void Swap(Login_STC_QueryPlayerData* other);

  // implements Message ----------------------------------------------

  Login_STC_QueryPlayerData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Login_STC_QueryPlayerData& from);
  void MergeFrom(const Login_STC_QueryPlayerData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 rt = 1;
  inline bool has_rt() const;
  inline void clear_rt();
  static const int kRtFieldNumber = 1;
  inline ::google::protobuf::int32 rt() const;
  inline void set_rt(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Login_STC_QueryPlayerData)
 private:
  inline void set_has_rt();
  inline void clear_has_rt();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 rt_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();

  void InitAsDefaultInstance();
  static Login_STC_QueryPlayerData* default_instance_;
};
// -------------------------------------------------------------------

class Login_CTS_CreateChar : public ::google::protobuf::Message {
 public:
  Login_CTS_CreateChar();
  virtual ~Login_CTS_CreateChar();

  Login_CTS_CreateChar(const Login_CTS_CreateChar& from);

  inline Login_CTS_CreateChar& operator=(const Login_CTS_CreateChar& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Login_CTS_CreateChar& default_instance();

  void Swap(Login_CTS_CreateChar* other);

  // implements Message ----------------------------------------------

  Login_CTS_CreateChar* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Login_CTS_CreateChar& from);
  void MergeFrom(const Login_CTS_CreateChar& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ServerId = 1;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServerIdFieldNumber = 1;
  inline ::google::protobuf::int32 serverid() const;
  inline void set_serverid(::google::protobuf::int32 value);

  // required int32 sex = 2;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 2;
  inline ::google::protobuf::int32 sex() const;
  inline void set_sex(::google::protobuf::int32 value);

  // required int32 weapon = 3;
  inline bool has_weapon() const;
  inline void clear_weapon();
  static const int kWeaponFieldNumber = 3;
  inline ::google::protobuf::int32 weapon() const;
  inline void set_weapon(::google::protobuf::int32 value);

  // required string CharName = 4;
  inline bool has_charname() const;
  inline void clear_charname();
  static const int kCharNameFieldNumber = 4;
  inline const ::std::string& charname() const;
  inline void set_charname(const ::std::string& value);
  inline void set_charname(const char* value);
  inline void set_charname(const char* value, size_t size);
  inline ::std::string* mutable_charname();
  inline ::std::string* release_charname();
  inline void set_allocated_charname(::std::string* charname);

  // required string account = 5;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 5;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // @@protoc_insertion_point(class_scope:proto.message.Login_CTS_CreateChar)
 private:
  inline void set_has_serverid();
  inline void clear_has_serverid();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_weapon();
  inline void clear_has_weapon();
  inline void set_has_charname();
  inline void clear_has_charname();
  inline void set_has_account();
  inline void clear_has_account();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 serverid_;
  ::google::protobuf::int32 sex_;
  ::std::string* charname_;
  ::std::string* account_;
  ::google::protobuf::int32 weapon_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();

  void InitAsDefaultInstance();
  static Login_CTS_CreateChar* default_instance_;
};
// -------------------------------------------------------------------

class Login_STC_CreateChar : public ::google::protobuf::Message {
 public:
  Login_STC_CreateChar();
  virtual ~Login_STC_CreateChar();

  Login_STC_CreateChar(const Login_STC_CreateChar& from);

  inline Login_STC_CreateChar& operator=(const Login_STC_CreateChar& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Login_STC_CreateChar& default_instance();

  void Swap(Login_STC_CreateChar* other);

  // implements Message ----------------------------------------------

  Login_STC_CreateChar* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Login_STC_CreateChar& from);
  void MergeFrom(const Login_STC_CreateChar& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 rt = 1;
  inline bool has_rt() const;
  inline void clear_rt();
  static const int kRtFieldNumber = 1;
  inline ::google::protobuf::int32 rt() const;
  inline void set_rt(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Login_STC_CreateChar)
 private:
  inline void set_has_rt();
  inline void clear_has_rt();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 rt_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();

  void InitAsDefaultInstance();
  static Login_STC_CreateChar* default_instance_;
};
// -------------------------------------------------------------------

class Login_STC_PlayerData : public ::google::protobuf::Message {
 public:
  Login_STC_PlayerData();
  virtual ~Login_STC_PlayerData();

  Login_STC_PlayerData(const Login_STC_PlayerData& from);

  inline Login_STC_PlayerData& operator=(const Login_STC_PlayerData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Login_STC_PlayerData& default_instance();

  void Swap(Login_STC_PlayerData* other);

  // implements Message ----------------------------------------------

  Login_STC_PlayerData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Login_STC_PlayerData& from);
  void MergeFrom(const Login_STC_PlayerData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 charid = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 1;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // required int32 sex = 2;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 2;
  inline ::google::protobuf::int32 sex() const;
  inline void set_sex(::google::protobuf::int32 value);

  // required int32 weapon = 3;
  inline bool has_weapon() const;
  inline void clear_weapon();
  static const int kWeaponFieldNumber = 3;
  inline ::google::protobuf::int32 weapon() const;
  inline void set_weapon(::google::protobuf::int32 value);

  // required string charname = 4;
  inline bool has_charname() const;
  inline void clear_charname();
  static const int kCharnameFieldNumber = 4;
  inline const ::std::string& charname() const;
  inline void set_charname(const ::std::string& value);
  inline void set_charname(const char* value);
  inline void set_charname(const char* value, size_t size);
  inline ::std::string* mutable_charname();
  inline ::std::string* release_charname();
  inline void set_allocated_charname(::std::string* charname);

  // required uint32 playerid = 5;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 5;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // required int32 level = 6;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 6;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // required .proto.message.MoneyItem money_item = 7;
  inline bool has_money_item() const;
  inline void clear_money_item();
  static const int kMoneyItemFieldNumber = 7;
  inline const ::proto::message::MoneyItem& money_item() const;
  inline ::proto::message::MoneyItem* mutable_money_item();
  inline ::proto::message::MoneyItem* release_money_item();
  inline void set_allocated_money_item(::proto::message::MoneyItem* money_item);

  // repeated .proto.message.Equip equip_list = 8;
  inline int equip_list_size() const;
  inline void clear_equip_list();
  static const int kEquipListFieldNumber = 8;
  inline const ::proto::message::Equip& equip_list(int index) const;
  inline ::proto::message::Equip* mutable_equip_list(int index);
  inline ::proto::message::Equip* add_equip_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::message::Equip >&
      equip_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::message::Equip >*
      mutable_equip_list();

  // optional int32 cur_time = 9;
  inline bool has_cur_time() const;
  inline void clear_cur_time();
  static const int kCurTimeFieldNumber = 9;
  inline ::google::protobuf::int32 cur_time() const;
  inline void set_cur_time(::google::protobuf::int32 value);

  // optional uint32 questioncounts = 10;
  inline bool has_questioncounts() const;
  inline void clear_questioncounts();
  static const int kQuestioncountsFieldNumber = 10;
  inline ::google::protobuf::uint32 questioncounts() const;
  inline void set_questioncounts(::google::protobuf::uint32 value);

  // optional uint32 rightcounts = 11;
  inline bool has_rightcounts() const;
  inline void clear_rightcounts();
  static const int kRightcountsFieldNumber = 11;
  inline ::google::protobuf::uint32 rightcounts() const;
  inline void set_rightcounts(::google::protobuf::uint32 value);

  // optional uint32 rewardstate = 12;
  inline bool has_rewardstate() const;
  inline void clear_rewardstate();
  static const int kRewardstateFieldNumber = 12;
  inline ::google::protobuf::uint32 rewardstate() const;
  inline void set_rewardstate(::google::protobuf::uint32 value);

  // repeated .proto.message.IDNum button_id_list = 13;
  inline int button_id_list_size() const;
  inline void clear_button_id_list();
  static const int kButtonIdListFieldNumber = 13;
  inline const ::proto::message::IDNum& button_id_list(int index) const;
  inline ::proto::message::IDNum* mutable_button_id_list(int index);
  inline ::proto::message::IDNum* add_button_id_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::message::IDNum >&
      button_id_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::message::IDNum >*
      mutable_button_id_list();

  // repeated .proto.message.ActivityIDTimes activity_list = 14;
  inline int activity_list_size() const;
  inline void clear_activity_list();
  static const int kActivityListFieldNumber = 14;
  inline const ::proto::message::ActivityIDTimes& activity_list(int index) const;
  inline ::proto::message::ActivityIDTimes* mutable_activity_list(int index);
  inline ::proto::message::ActivityIDTimes* add_activity_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::message::ActivityIDTimes >&
      activity_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::message::ActivityIDTimes >*
      mutable_activity_list();

  // optional uint64 guildid = 15;
  inline bool has_guildid() const;
  inline void clear_guildid();
  static const int kGuildidFieldNumber = 15;
  inline ::google::protobuf::uint64 guildid() const;
  inline void set_guildid(::google::protobuf::uint64 value);

  // optional uint32 MoveSpeed = 16;
  inline bool has_movespeed() const;
  inline void clear_movespeed();
  static const int kMoveSpeedFieldNumber = 16;
  inline ::google::protobuf::uint32 movespeed() const;
  inline void set_movespeed(::google::protobuf::uint32 value);

  // repeated uint32 jewelry_id_list = 17;
  inline int jewelry_id_list_size() const;
  inline void clear_jewelry_id_list();
  static const int kJewelryIdListFieldNumber = 17;
  inline ::google::protobuf::uint32 jewelry_id_list(int index) const;
  inline void set_jewelry_id_list(int index, ::google::protobuf::uint32 value);
  inline void add_jewelry_id_list(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      jewelry_id_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_jewelry_id_list();

  // optional int32 titleID = 18;
  inline bool has_titleid() const;
  inline void clear_titleid();
  static const int kTitleIDFieldNumber = 18;
  inline ::google::protobuf::int32 titleid() const;
  inline void set_titleid(::google::protobuf::int32 value);

  // optional int32 activity_loop = 19;
  inline bool has_activity_loop() const;
  inline void clear_activity_loop();
  static const int kActivityLoopFieldNumber = 19;
  inline ::google::protobuf::int32 activity_loop() const;
  inline void set_activity_loop(::google::protobuf::int32 value);

  // optional int32 vip_level = 20;
  inline bool has_vip_level() const;
  inline void clear_vip_level();
  static const int kVipLevelFieldNumber = 20;
  inline ::google::protobuf::int32 vip_level() const;
  inline void set_vip_level(::google::protobuf::int32 value);

  // optional int32 relive_times = 21;
  inline bool has_relive_times() const;
  inline void clear_relive_times();
  static const int kReliveTimesFieldNumber = 21;
  inline ::google::protobuf::int32 relive_times() const;
  inline void set_relive_times(::google::protobuf::int32 value);

  // optional string titlename = 22;
  inline bool has_titlename() const;
  inline void clear_titlename();
  static const int kTitlenameFieldNumber = 22;
  inline const ::std::string& titlename() const;
  inline void set_titlename(const ::std::string& value);
  inline void set_titlename(const char* value);
  inline void set_titlename(const char* value, size_t size);
  inline ::std::string* mutable_titlename();
  inline ::std::string* release_titlename();
  inline void set_allocated_titlename(::std::string* titlename);

  // optional int32 titleishide = 23;
  inline bool has_titleishide() const;
  inline void clear_titleishide();
  static const int kTitleishideFieldNumber = 23;
  inline ::google::protobuf::int32 titleishide() const;
  inline void set_titleishide(::google::protobuf::int32 value);

  // repeated int32 posid_list = 24;
  inline int posid_list_size() const;
  inline void clear_posid_list();
  static const int kPosidListFieldNumber = 24;
  inline ::google::protobuf::int32 posid_list(int index) const;
  inline void set_posid_list(int index, ::google::protobuf::int32 value);
  inline void add_posid_list(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      posid_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_posid_list();

  // optional int32 guild_office = 25;
  inline bool has_guild_office() const;
  inline void clear_guild_office();
  static const int kGuildOfficeFieldNumber = 25;
  inline ::google::protobuf::int32 guild_office() const;
  inline void set_guild_office(::google::protobuf::int32 value);

  // optional int32 trial_dungeon_id = 26;
  inline bool has_trial_dungeon_id() const;
  inline void clear_trial_dungeon_id();
  static const int kTrialDungeonIdFieldNumber = 26;
  inline ::google::protobuf::int32 trial_dungeon_id() const;
  inline void set_trial_dungeon_id(::google::protobuf::int32 value);

  // optional int32 cur_identity = 27;
  inline bool has_cur_identity() const;
  inline void clear_cur_identity();
  static const int kCurIdentityFieldNumber = 27;
  inline ::google::protobuf::int32 cur_identity() const;
  inline void set_cur_identity(::google::protobuf::int32 value);

  // optional int32 cur_MultiChivalrous = 28;
  inline bool has_cur_multichivalrous() const;
  inline void clear_cur_multichivalrous();
  static const int kCurMultiChivalrousFieldNumber = 28;
  inline ::google::protobuf::int32 cur_multichivalrous() const;
  inline void set_cur_multichivalrous(::google::protobuf::int32 value);

  // optional int32 cur_EpicChivalrous = 29;
  inline bool has_cur_epicchivalrous() const;
  inline void clear_cur_epicchivalrous();
  static const int kCurEpicChivalrousFieldNumber = 29;
  inline ::google::protobuf::int32 cur_epicchivalrous() const;
  inline void set_cur_epicchivalrous(::google::protobuf::int32 value);

  // optional uint32 uiSuitId = 30;
  inline bool has_uisuitid() const;
  inline void clear_uisuitid();
  static const int kUiSuitIdFieldNumber = 30;
  inline ::google::protobuf::uint32 uisuitid() const;
  inline void set_uisuitid(::google::protobuf::uint32 value);

  // optional .proto.message.BattleBoatInfo boat_info = 31;
  inline bool has_boat_info() const;
  inline void clear_boat_info();
  static const int kBoatInfoFieldNumber = 31;
  inline const ::proto::message::BattleBoatInfo& boat_info() const;
  inline ::proto::message::BattleBoatInfo* mutable_boat_info();
  inline ::proto::message::BattleBoatInfo* release_boat_info();
  inline void set_allocated_boat_info(::proto::message::BattleBoatInfo* boat_info);

  // optional uint32 uiAttackMode = 32;
  inline bool has_uiattackmode() const;
  inline void clear_uiattackmode();
  static const int kUiAttackModeFieldNumber = 32;
  inline ::google::protobuf::uint32 uiattackmode() const;
  inline void set_uiattackmode(::google::protobuf::uint32 value);

  // optional string finishkey = 33;
  inline bool has_finishkey() const;
  inline void clear_finishkey();
  static const int kFinishkeyFieldNumber = 33;
  inline const ::std::string& finishkey() const;
  inline void set_finishkey(const ::std::string& value);
  inline void set_finishkey(const char* value);
  inline void set_finishkey(const char* value, size_t size);
  inline ::std::string* mutable_finishkey();
  inline ::std::string* release_finishkey();
  inline void set_allocated_finishkey(::std::string* finishkey);

  // optional uint32 guidepart = 34;
  inline bool has_guidepart() const;
  inline void clear_guidepart();
  static const int kGuidepartFieldNumber = 34;
  inline ::google::protobuf::uint32 guidepart() const;
  inline void set_guidepart(::google::protobuf::uint32 value);

  // optional uint32 createtime = 35;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreatetimeFieldNumber = 35;
  inline ::google::protobuf::uint32 createtime() const;
  inline void set_createtime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Login_STC_PlayerData)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_weapon();
  inline void clear_has_weapon();
  inline void set_has_charname();
  inline void clear_has_charname();
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_money_item();
  inline void clear_has_money_item();
  inline void set_has_cur_time();
  inline void clear_has_cur_time();
  inline void set_has_questioncounts();
  inline void clear_has_questioncounts();
  inline void set_has_rightcounts();
  inline void clear_has_rightcounts();
  inline void set_has_rewardstate();
  inline void clear_has_rewardstate();
  inline void set_has_guildid();
  inline void clear_has_guildid();
  inline void set_has_movespeed();
  inline void clear_has_movespeed();
  inline void set_has_titleid();
  inline void clear_has_titleid();
  inline void set_has_activity_loop();
  inline void clear_has_activity_loop();
  inline void set_has_vip_level();
  inline void clear_has_vip_level();
  inline void set_has_relive_times();
  inline void clear_has_relive_times();
  inline void set_has_titlename();
  inline void clear_has_titlename();
  inline void set_has_titleishide();
  inline void clear_has_titleishide();
  inline void set_has_guild_office();
  inline void clear_has_guild_office();
  inline void set_has_trial_dungeon_id();
  inline void clear_has_trial_dungeon_id();
  inline void set_has_cur_identity();
  inline void clear_has_cur_identity();
  inline void set_has_cur_multichivalrous();
  inline void clear_has_cur_multichivalrous();
  inline void set_has_cur_epicchivalrous();
  inline void clear_has_cur_epicchivalrous();
  inline void set_has_uisuitid();
  inline void clear_has_uisuitid();
  inline void set_has_boat_info();
  inline void clear_has_boat_info();
  inline void set_has_uiattackmode();
  inline void clear_has_uiattackmode();
  inline void set_has_finishkey();
  inline void clear_has_finishkey();
  inline void set_has_guidepart();
  inline void clear_has_guidepart();
  inline void set_has_createtime();
  inline void clear_has_createtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 charid_;
  ::google::protobuf::int32 sex_;
  ::google::protobuf::int32 weapon_;
  ::std::string* charname_;
  ::google::protobuf::uint32 playerid_;
  ::google::protobuf::int32 level_;
  ::proto::message::MoneyItem* money_item_;
  ::google::protobuf::RepeatedPtrField< ::proto::message::Equip > equip_list_;
  ::google::protobuf::int32 cur_time_;
  ::google::protobuf::uint32 questioncounts_;
  ::google::protobuf::uint32 rightcounts_;
  ::google::protobuf::uint32 rewardstate_;
  ::google::protobuf::RepeatedPtrField< ::proto::message::IDNum > button_id_list_;
  ::google::protobuf::RepeatedPtrField< ::proto::message::ActivityIDTimes > activity_list_;
  ::google::protobuf::uint64 guildid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > jewelry_id_list_;
  ::google::protobuf::uint32 movespeed_;
  ::google::protobuf::int32 titleid_;
  ::google::protobuf::int32 activity_loop_;
  ::google::protobuf::int32 vip_level_;
  ::std::string* titlename_;
  ::google::protobuf::int32 relive_times_;
  ::google::protobuf::int32 titleishide_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > posid_list_;
  ::google::protobuf::int32 guild_office_;
  ::google::protobuf::int32 trial_dungeon_id_;
  ::google::protobuf::int32 cur_identity_;
  ::google::protobuf::int32 cur_multichivalrous_;
  ::google::protobuf::int32 cur_epicchivalrous_;
  ::google::protobuf::uint32 uisuitid_;
  ::proto::message::BattleBoatInfo* boat_info_;
  ::std::string* finishkey_;
  ::google::protobuf::uint32 uiattackmode_;
  ::google::protobuf::uint32 guidepart_;
  ::google::protobuf::uint32 createtime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(35 + 31) / 32];

  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();

  void InitAsDefaultInstance();
  static Login_STC_PlayerData* default_instance_;
};
// -------------------------------------------------------------------

class Login_STC_EnterScene : public ::google::protobuf::Message {
 public:
  Login_STC_EnterScene();
  virtual ~Login_STC_EnterScene();

  Login_STC_EnterScene(const Login_STC_EnterScene& from);

  inline Login_STC_EnterScene& operator=(const Login_STC_EnterScene& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Login_STC_EnterScene& default_instance();

  void Swap(Login_STC_EnterScene* other);

  // implements Message ----------------------------------------------

  Login_STC_EnterScene* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Login_STC_EnterScene& from);
  void MergeFrom(const Login_STC_EnterScene& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 mapid = 1;
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapidFieldNumber = 1;
  inline ::google::protobuf::int32 mapid() const;
  inline void set_mapid(::google::protobuf::int32 value);

  // required .proto.message.Point3D pt = 2;
  inline bool has_pt() const;
  inline void clear_pt();
  static const int kPtFieldNumber = 2;
  inline const ::proto::message::Point3D& pt() const;
  inline ::proto::message::Point3D* mutable_pt();
  inline ::proto::message::Point3D* release_pt();
  inline void set_allocated_pt(::proto::message::Point3D* pt);

  // required float dir = 3;
  inline bool has_dir() const;
  inline void clear_dir();
  static const int kDirFieldNumber = 3;
  inline float dir() const;
  inline void set_dir(float value);

  // optional int32 layer = 4;
  inline bool has_layer() const;
  inline void clear_layer();
  static const int kLayerFieldNumber = 4;
  inline ::google::protobuf::int32 layer() const;
  inline void set_layer(::google::protobuf::int32 value);

  // optional string ip = 5;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 5;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional int32 port = 6;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 6;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Login_STC_EnterScene)
 private:
  inline void set_has_mapid();
  inline void clear_has_mapid();
  inline void set_has_pt();
  inline void clear_has_pt();
  inline void set_has_dir();
  inline void clear_has_dir();
  inline void set_has_layer();
  inline void clear_has_layer();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::message::Point3D* pt_;
  ::google::protobuf::int32 mapid_;
  float dir_;
  ::std::string* ip_;
  ::google::protobuf::int32 layer_;
  ::google::protobuf::int32 port_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();

  void InitAsDefaultInstance();
  static Login_STC_EnterScene* default_instance_;
};
// -------------------------------------------------------------------

class player_sync_data : public ::google::protobuf::Message {
 public:
  player_sync_data();
  virtual ~player_sync_data();

  player_sync_data(const player_sync_data& from);

  inline player_sync_data& operator=(const player_sync_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const player_sync_data& default_instance();

  void Swap(player_sync_data* other);

  // implements Message ----------------------------------------------

  player_sync_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const player_sync_data& from);
  void MergeFrom(const player_sync_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 sex = 1;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 1;
  inline ::google::protobuf::int32 sex() const;
  inline void set_sex(::google::protobuf::int32 value);

  // required int32 weapon = 2;
  inline bool has_weapon() const;
  inline void clear_weapon();
  static const int kWeaponFieldNumber = 2;
  inline ::google::protobuf::int32 weapon() const;
  inline void set_weapon(::google::protobuf::int32 value);

  // required string CharName = 3;
  inline bool has_charname() const;
  inline void clear_charname();
  static const int kCharNameFieldNumber = 3;
  inline const ::std::string& charname() const;
  inline void set_charname(const ::std::string& value);
  inline void set_charname(const char* value);
  inline void set_charname(const char* value, size_t size);
  inline ::std::string* mutable_charname();
  inline ::std::string* release_charname();
  inline void set_allocated_charname(::std::string* charname);

  // @@protoc_insertion_point(class_scope:proto.message.player_sync_data)
 private:
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_weapon();
  inline void clear_has_weapon();
  inline void set_has_charname();
  inline void clear_has_charname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 sex_;
  ::google::protobuf::int32 weapon_;
  ::std::string* charname_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();

  void InitAsDefaultInstance();
  static player_sync_data* default_instance_;
};
// -------------------------------------------------------------------

class Login_STC_Sync_Self : public ::google::protobuf::Message {
 public:
  Login_STC_Sync_Self();
  virtual ~Login_STC_Sync_Self();

  Login_STC_Sync_Self(const Login_STC_Sync_Self& from);

  inline Login_STC_Sync_Self& operator=(const Login_STC_Sync_Self& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Login_STC_Sync_Self& default_instance();

  void Swap(Login_STC_Sync_Self* other);

  // implements Message ----------------------------------------------

  Login_STC_Sync_Self* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Login_STC_Sync_Self& from);
  void MergeFrom(const Login_STC_Sync_Self& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.message.player_sync_data otherData = 1;
  inline int otherdata_size() const;
  inline void clear_otherdata();
  static const int kOtherDataFieldNumber = 1;
  inline const ::proto::message::player_sync_data& otherdata(int index) const;
  inline ::proto::message::player_sync_data* mutable_otherdata(int index);
  inline ::proto::message::player_sync_data* add_otherdata();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::message::player_sync_data >&
      otherdata() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::message::player_sync_data >*
      mutable_otherdata();

  // @@protoc_insertion_point(class_scope:proto.message.Login_STC_Sync_Self)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto::message::player_sync_data > otherdata_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();

  void InitAsDefaultInstance();
  static Login_STC_Sync_Self* default_instance_;
};
// -------------------------------------------------------------------

class Login_STC_Sync_Other : public ::google::protobuf::Message {
 public:
  Login_STC_Sync_Other();
  virtual ~Login_STC_Sync_Other();

  Login_STC_Sync_Other(const Login_STC_Sync_Other& from);

  inline Login_STC_Sync_Other& operator=(const Login_STC_Sync_Other& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Login_STC_Sync_Other& default_instance();

  void Swap(Login_STC_Sync_Other* other);

  // implements Message ----------------------------------------------

  Login_STC_Sync_Other* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Login_STC_Sync_Other& from);
  void MergeFrom(const Login_STC_Sync_Other& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .proto.message.player_sync_data LoginData = 2;
  inline bool has_logindata() const;
  inline void clear_logindata();
  static const int kLoginDataFieldNumber = 2;
  inline const ::proto::message::player_sync_data& logindata() const;
  inline ::proto::message::player_sync_data* mutable_logindata();
  inline ::proto::message::player_sync_data* release_logindata();
  inline void set_allocated_logindata(::proto::message::player_sync_data* logindata);

  // @@protoc_insertion_point(class_scope:proto.message.Login_STC_Sync_Other)
 private:
  inline void set_has_logindata();
  inline void clear_has_logindata();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::message::player_sync_data* logindata_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();

  void InitAsDefaultInstance();
  static Login_STC_Sync_Other* default_instance_;
};
// -------------------------------------------------------------------

class Login_STC_AnotherLogin : public ::google::protobuf::Message {
 public:
  Login_STC_AnotherLogin();
  virtual ~Login_STC_AnotherLogin();

  Login_STC_AnotherLogin(const Login_STC_AnotherLogin& from);

  inline Login_STC_AnotherLogin& operator=(const Login_STC_AnotherLogin& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Login_STC_AnotherLogin& default_instance();

  void Swap(Login_STC_AnotherLogin* other);

  // implements Message ----------------------------------------------

  Login_STC_AnotherLogin* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Login_STC_AnotherLogin& from);
  void MergeFrom(const Login_STC_AnotherLogin& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.message.Login_STC_AnotherLogin)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();

  void InitAsDefaultInstance();
  static Login_STC_AnotherLogin* default_instance_;
};
// -------------------------------------------------------------------

class Login_STC_ClientLoadOK : public ::google::protobuf::Message {
 public:
  Login_STC_ClientLoadOK();
  virtual ~Login_STC_ClientLoadOK();

  Login_STC_ClientLoadOK(const Login_STC_ClientLoadOK& from);

  inline Login_STC_ClientLoadOK& operator=(const Login_STC_ClientLoadOK& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Login_STC_ClientLoadOK& default_instance();

  void Swap(Login_STC_ClientLoadOK* other);

  // implements Message ----------------------------------------------

  Login_STC_ClientLoadOK* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Login_STC_ClientLoadOK& from);
  void MergeFrom(const Login_STC_ClientLoadOK& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 Branch = 1;
  inline bool has_branch() const;
  inline void clear_branch();
  static const int kBranchFieldNumber = 1;
  inline ::google::protobuf::int32 branch() const;
  inline void set_branch(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Login_STC_ClientLoadOK)
 private:
  inline void set_has_branch();
  inline void clear_has_branch();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 branch_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();

  void InitAsDefaultInstance();
  static Login_STC_ClientLoadOK* default_instance_;
};
// -------------------------------------------------------------------

class Login_CS_ChangePlayerName : public ::google::protobuf::Message {
 public:
  Login_CS_ChangePlayerName();
  virtual ~Login_CS_ChangePlayerName();

  Login_CS_ChangePlayerName(const Login_CS_ChangePlayerName& from);

  inline Login_CS_ChangePlayerName& operator=(const Login_CS_ChangePlayerName& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Login_CS_ChangePlayerName& default_instance();

  void Swap(Login_CS_ChangePlayerName* other);

  // implements Message ----------------------------------------------

  Login_CS_ChangePlayerName* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Login_CS_ChangePlayerName& from);
  void MergeFrom(const Login_CS_ChangePlayerName& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string charname = 1;
  inline bool has_charname() const;
  inline void clear_charname();
  static const int kCharnameFieldNumber = 1;
  inline const ::std::string& charname() const;
  inline void set_charname(const ::std::string& value);
  inline void set_charname(const char* value);
  inline void set_charname(const char* value, size_t size);
  inline ::std::string* mutable_charname();
  inline ::std::string* release_charname();
  inline void set_allocated_charname(::std::string* charname);

  // @@protoc_insertion_point(class_scope:proto.message.Login_CS_ChangePlayerName)
 private:
  inline void set_has_charname();
  inline void clear_has_charname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* charname_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();

  void InitAsDefaultInstance();
  static Login_CS_ChangePlayerName* default_instance_;
};
// -------------------------------------------------------------------

class Login_STC_ChangePlayerName : public ::google::protobuf::Message {
 public:
  Login_STC_ChangePlayerName();
  virtual ~Login_STC_ChangePlayerName();

  Login_STC_ChangePlayerName(const Login_STC_ChangePlayerName& from);

  inline Login_STC_ChangePlayerName& operator=(const Login_STC_ChangePlayerName& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Login_STC_ChangePlayerName& default_instance();

  void Swap(Login_STC_ChangePlayerName* other);

  // implements Message ----------------------------------------------

  Login_STC_ChangePlayerName* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Login_STC_ChangePlayerName& from);
  void MergeFrom(const Login_STC_ChangePlayerName& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 rt = 1;
  inline bool has_rt() const;
  inline void clear_rt();
  static const int kRtFieldNumber = 1;
  inline ::google::protobuf::int32 rt() const;
  inline void set_rt(::google::protobuf::int32 value);

  // optional string charname = 2;
  inline bool has_charname() const;
  inline void clear_charname();
  static const int kCharnameFieldNumber = 2;
  inline const ::std::string& charname() const;
  inline void set_charname(const ::std::string& value);
  inline void set_charname(const char* value);
  inline void set_charname(const char* value, size_t size);
  inline ::std::string* mutable_charname();
  inline ::std::string* release_charname();
  inline void set_allocated_charname(::std::string* charname);

  // @@protoc_insertion_point(class_scope:proto.message.Login_STC_ChangePlayerName)
 private:
  inline void set_has_rt();
  inline void clear_has_rt();
  inline void set_has_charname();
  inline void clear_has_charname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* charname_;
  ::google::protobuf::int32 rt_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();

  void InitAsDefaultInstance();
  static Login_STC_ChangePlayerName* default_instance_;
};
// -------------------------------------------------------------------

class Login_STC_NotifyActivity : public ::google::protobuf::Message {
 public:
  Login_STC_NotifyActivity();
  virtual ~Login_STC_NotifyActivity();

  Login_STC_NotifyActivity(const Login_STC_NotifyActivity& from);

  inline Login_STC_NotifyActivity& operator=(const Login_STC_NotifyActivity& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Login_STC_NotifyActivity& default_instance();

  void Swap(Login_STC_NotifyActivity* other);

  // implements Message ----------------------------------------------

  Login_STC_NotifyActivity* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Login_STC_NotifyActivity& from);
  void MergeFrom(const Login_STC_NotifyActivity& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ActivityHost = 1;
  inline bool has_activityhost() const;
  inline void clear_activityhost();
  static const int kActivityHostFieldNumber = 1;
  inline const ::std::string& activityhost() const;
  inline void set_activityhost(const ::std::string& value);
  inline void set_activityhost(const char* value);
  inline void set_activityhost(const char* value, size_t size);
  inline ::std::string* mutable_activityhost();
  inline ::std::string* release_activityhost();
  inline void set_allocated_activityhost(::std::string* activityhost);

  // optional string ActivityPath = 2;
  inline bool has_activitypath() const;
  inline void clear_activitypath();
  static const int kActivityPathFieldNumber = 2;
  inline const ::std::string& activitypath() const;
  inline void set_activitypath(const ::std::string& value);
  inline void set_activitypath(const char* value);
  inline void set_activitypath(const char* value, size_t size);
  inline ::std::string* mutable_activitypath();
  inline ::std::string* release_activitypath();
  inline void set_allocated_activitypath(::std::string* activitypath);

  // @@protoc_insertion_point(class_scope:proto.message.Login_STC_NotifyActivity)
 private:
  inline void set_has_activityhost();
  inline void clear_has_activityhost();
  inline void set_has_activitypath();
  inline void clear_has_activitypath();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* activityhost_;
  ::std::string* activitypath_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();

  void InitAsDefaultInstance();
  static Login_STC_NotifyActivity* default_instance_;
};
// ===================================================================


// ===================================================================

// CharShow

// optional int32 server_id = 1;
inline bool CharShow::has_server_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CharShow::set_has_server_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CharShow::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CharShow::clear_server_id() {
  server_id_ = 0;
  clear_has_server_id();
}
inline ::google::protobuf::int32 CharShow::server_id() const {
  return server_id_;
}
inline void CharShow::set_server_id(::google::protobuf::int32 value) {
  set_has_server_id();
  server_id_ = value;
}

// optional int32 career = 2;
inline bool CharShow::has_career() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CharShow::set_has_career() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CharShow::clear_has_career() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CharShow::clear_career() {
  career_ = 0;
  clear_has_career();
}
inline ::google::protobuf::int32 CharShow::career() const {
  return career_;
}
inline void CharShow::set_career(::google::protobuf::int32 value) {
  set_has_career();
  career_ = value;
}

// optional int32 level = 3;
inline bool CharShow::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CharShow::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CharShow::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CharShow::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 CharShow::level() const {
  return level_;
}
inline void CharShow::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 dhlevel = 4;
inline bool CharShow::has_dhlevel() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CharShow::set_has_dhlevel() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CharShow::clear_has_dhlevel() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CharShow::clear_dhlevel() {
  dhlevel_ = 0;
  clear_has_dhlevel();
}
inline ::google::protobuf::int32 CharShow::dhlevel() const {
  return dhlevel_;
}
inline void CharShow::set_dhlevel(::google::protobuf::int32 value) {
  set_has_dhlevel();
  dhlevel_ = value;
}

// -------------------------------------------------------------------

// CharShowInfo

// optional int32 last_server_id = 1;
inline bool CharShowInfo::has_last_server_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CharShowInfo::set_has_last_server_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CharShowInfo::clear_has_last_server_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CharShowInfo::clear_last_server_id() {
  last_server_id_ = 0;
  clear_has_last_server_id();
}
inline ::google::protobuf::int32 CharShowInfo::last_server_id() const {
  return last_server_id_;
}
inline void CharShowInfo::set_last_server_id(::google::protobuf::int32 value) {
  set_has_last_server_id();
  last_server_id_ = value;
}

// repeated .proto.message.CharShow char_list = 2;
inline int CharShowInfo::char_list_size() const {
  return char_list_.size();
}
inline void CharShowInfo::clear_char_list() {
  char_list_.Clear();
}
inline const ::proto::message::CharShow& CharShowInfo::char_list(int index) const {
  return char_list_.Get(index);
}
inline ::proto::message::CharShow* CharShowInfo::mutable_char_list(int index) {
  return char_list_.Mutable(index);
}
inline ::proto::message::CharShow* CharShowInfo::add_char_list() {
  return char_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::message::CharShow >&
CharShowInfo::char_list() const {
  return char_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::message::CharShow >*
CharShowInfo::mutable_char_list() {
  return &char_list_;
}

// -------------------------------------------------------------------

// AccountInfo

// optional string account = 1;
inline bool AccountInfo::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AccountInfo::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AccountInfo::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AccountInfo::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& AccountInfo::account() const {
  return *account_;
}
inline void AccountInfo::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void AccountInfo::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void AccountInfo::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AccountInfo::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* AccountInfo::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AccountInfo::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string password = 2;
inline bool AccountInfo::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AccountInfo::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AccountInfo::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AccountInfo::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& AccountInfo::password() const {
  return *password_;
}
inline void AccountInfo::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void AccountInfo::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void AccountInfo::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AccountInfo::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* AccountInfo::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AccountInfo::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .proto.message.CharShowInfo char_show_info = 3;
inline bool AccountInfo::has_char_show_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AccountInfo::set_has_char_show_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AccountInfo::clear_has_char_show_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AccountInfo::clear_char_show_info() {
  if (char_show_info_ != NULL) char_show_info_->::proto::message::CharShowInfo::Clear();
  clear_has_char_show_info();
}
inline const ::proto::message::CharShowInfo& AccountInfo::char_show_info() const {
  return char_show_info_ != NULL ? *char_show_info_ : *default_instance_->char_show_info_;
}
inline ::proto::message::CharShowInfo* AccountInfo::mutable_char_show_info() {
  set_has_char_show_info();
  if (char_show_info_ == NULL) char_show_info_ = new ::proto::message::CharShowInfo;
  return char_show_info_;
}
inline ::proto::message::CharShowInfo* AccountInfo::release_char_show_info() {
  clear_has_char_show_info();
  ::proto::message::CharShowInfo* temp = char_show_info_;
  char_show_info_ = NULL;
  return temp;
}
inline void AccountInfo::set_allocated_char_show_info(::proto::message::CharShowInfo* char_show_info) {
  delete char_show_info_;
  char_show_info_ = char_show_info;
  if (char_show_info) {
    set_has_char_show_info();
  } else {
    clear_has_char_show_info();
  }
}

// -------------------------------------------------------------------

// Login_CTS_ReqServerList

// required string account = 1;
inline bool Login_CTS_ReqServerList::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Login_CTS_ReqServerList::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Login_CTS_ReqServerList::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Login_CTS_ReqServerList::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& Login_CTS_ReqServerList::account() const {
  return *account_;
}
inline void Login_CTS_ReqServerList::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void Login_CTS_ReqServerList::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void Login_CTS_ReqServerList::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Login_CTS_ReqServerList::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* Login_CTS_ReqServerList::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Login_CTS_ReqServerList::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string pwd = 2;
inline bool Login_CTS_ReqServerList::has_pwd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Login_CTS_ReqServerList::set_has_pwd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Login_CTS_ReqServerList::clear_has_pwd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Login_CTS_ReqServerList::clear_pwd() {
  if (pwd_ != &::google::protobuf::internal::kEmptyString) {
    pwd_->clear();
  }
  clear_has_pwd();
}
inline const ::std::string& Login_CTS_ReqServerList::pwd() const {
  return *pwd_;
}
inline void Login_CTS_ReqServerList::set_pwd(const ::std::string& value) {
  set_has_pwd();
  if (pwd_ == &::google::protobuf::internal::kEmptyString) {
    pwd_ = new ::std::string;
  }
  pwd_->assign(value);
}
inline void Login_CTS_ReqServerList::set_pwd(const char* value) {
  set_has_pwd();
  if (pwd_ == &::google::protobuf::internal::kEmptyString) {
    pwd_ = new ::std::string;
  }
  pwd_->assign(value);
}
inline void Login_CTS_ReqServerList::set_pwd(const char* value, size_t size) {
  set_has_pwd();
  if (pwd_ == &::google::protobuf::internal::kEmptyString) {
    pwd_ = new ::std::string;
  }
  pwd_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Login_CTS_ReqServerList::mutable_pwd() {
  set_has_pwd();
  if (pwd_ == &::google::protobuf::internal::kEmptyString) {
    pwd_ = new ::std::string;
  }
  return pwd_;
}
inline ::std::string* Login_CTS_ReqServerList::release_pwd() {
  clear_has_pwd();
  if (pwd_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pwd_;
    pwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Login_CTS_ReqServerList::set_allocated_pwd(::std::string* pwd) {
  if (pwd_ != &::google::protobuf::internal::kEmptyString) {
    delete pwd_;
  }
  if (pwd) {
    set_has_pwd();
    pwd_ = pwd;
  } else {
    clear_has_pwd();
    pwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Login_STC_ReqPlayerList

// repeated .proto.message.CharShow datalist = 1;
inline int Login_STC_ReqPlayerList::datalist_size() const {
  return datalist_.size();
}
inline void Login_STC_ReqPlayerList::clear_datalist() {
  datalist_.Clear();
}
inline const ::proto::message::CharShow& Login_STC_ReqPlayerList::datalist(int index) const {
  return datalist_.Get(index);
}
inline ::proto::message::CharShow* Login_STC_ReqPlayerList::mutable_datalist(int index) {
  return datalist_.Mutable(index);
}
inline ::proto::message::CharShow* Login_STC_ReqPlayerList::add_datalist() {
  return datalist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::message::CharShow >&
Login_STC_ReqPlayerList::datalist() const {
  return datalist_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::message::CharShow >*
Login_STC_ReqPlayerList::mutable_datalist() {
  return &datalist_;
}

// -------------------------------------------------------------------

// Login_ServerList

// required string ServerName = 1;
inline bool Login_ServerList::has_servername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Login_ServerList::set_has_servername() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Login_ServerList::clear_has_servername() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Login_ServerList::clear_servername() {
  if (servername_ != &::google::protobuf::internal::kEmptyString) {
    servername_->clear();
  }
  clear_has_servername();
}
inline const ::std::string& Login_ServerList::servername() const {
  return *servername_;
}
inline void Login_ServerList::set_servername(const ::std::string& value) {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    servername_ = new ::std::string;
  }
  servername_->assign(value);
}
inline void Login_ServerList::set_servername(const char* value) {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    servername_ = new ::std::string;
  }
  servername_->assign(value);
}
inline void Login_ServerList::set_servername(const char* value, size_t size) {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    servername_ = new ::std::string;
  }
  servername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Login_ServerList::mutable_servername() {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    servername_ = new ::std::string;
  }
  return servername_;
}
inline ::std::string* Login_ServerList::release_servername() {
  clear_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = servername_;
    servername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Login_ServerList::set_allocated_servername(::std::string* servername) {
  if (servername_ != &::google::protobuf::internal::kEmptyString) {
    delete servername_;
  }
  if (servername) {
    set_has_servername();
    servername_ = servername;
  } else {
    clear_has_servername();
    servername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 ServerID = 2;
inline bool Login_ServerList::has_serverid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Login_ServerList::set_has_serverid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Login_ServerList::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Login_ServerList::clear_serverid() {
  serverid_ = 0;
  clear_has_serverid();
}
inline ::google::protobuf::int32 Login_ServerList::serverid() const {
  return serverid_;
}
inline void Login_ServerList::set_serverid(::google::protobuf::int32 value) {
  set_has_serverid();
  serverid_ = value;
}

// required int32 Status = 3;
inline bool Login_ServerList::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Login_ServerList::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Login_ServerList::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Login_ServerList::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 Login_ServerList::status() const {
  return status_;
}
inline void Login_ServerList::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// required int32 start_time = 4;
inline bool Login_ServerList::has_start_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Login_ServerList::set_has_start_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Login_ServerList::clear_has_start_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Login_ServerList::clear_start_time() {
  start_time_ = 0;
  clear_has_start_time();
}
inline ::google::protobuf::int32 Login_ServerList::start_time() const {
  return start_time_;
}
inline void Login_ServerList::set_start_time(::google::protobuf::int32 value) {
  set_has_start_time();
  start_time_ = value;
}

// required .proto.message.CharShow char_show = 5;
inline bool Login_ServerList::has_char_show() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Login_ServerList::set_has_char_show() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Login_ServerList::clear_has_char_show() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Login_ServerList::clear_char_show() {
  if (char_show_ != NULL) char_show_->::proto::message::CharShow::Clear();
  clear_has_char_show();
}
inline const ::proto::message::CharShow& Login_ServerList::char_show() const {
  return char_show_ != NULL ? *char_show_ : *default_instance_->char_show_;
}
inline ::proto::message::CharShow* Login_ServerList::mutable_char_show() {
  set_has_char_show();
  if (char_show_ == NULL) char_show_ = new ::proto::message::CharShow;
  return char_show_;
}
inline ::proto::message::CharShow* Login_ServerList::release_char_show() {
  clear_has_char_show();
  ::proto::message::CharShow* temp = char_show_;
  char_show_ = NULL;
  return temp;
}
inline void Login_ServerList::set_allocated_char_show(::proto::message::CharShow* char_show) {
  delete char_show_;
  char_show_ = char_show;
  if (char_show) {
    set_has_char_show();
  } else {
    clear_has_char_show();
  }
}

// required int32 area_id = 6;
inline bool Login_ServerList::has_area_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Login_ServerList::set_has_area_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Login_ServerList::clear_has_area_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Login_ServerList::clear_area_id() {
  area_id_ = 0;
  clear_has_area_id();
}
inline ::google::protobuf::int32 Login_ServerList::area_id() const {
  return area_id_;
}
inline void Login_ServerList::set_area_id(::google::protobuf::int32 value) {
  set_has_area_id();
  area_id_ = value;
}

// required string area_name = 7;
inline bool Login_ServerList::has_area_name() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Login_ServerList::set_has_area_name() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Login_ServerList::clear_has_area_name() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Login_ServerList::clear_area_name() {
  if (area_name_ != &::google::protobuf::internal::kEmptyString) {
    area_name_->clear();
  }
  clear_has_area_name();
}
inline const ::std::string& Login_ServerList::area_name() const {
  return *area_name_;
}
inline void Login_ServerList::set_area_name(const ::std::string& value) {
  set_has_area_name();
  if (area_name_ == &::google::protobuf::internal::kEmptyString) {
    area_name_ = new ::std::string;
  }
  area_name_->assign(value);
}
inline void Login_ServerList::set_area_name(const char* value) {
  set_has_area_name();
  if (area_name_ == &::google::protobuf::internal::kEmptyString) {
    area_name_ = new ::std::string;
  }
  area_name_->assign(value);
}
inline void Login_ServerList::set_area_name(const char* value, size_t size) {
  set_has_area_name();
  if (area_name_ == &::google::protobuf::internal::kEmptyString) {
    area_name_ = new ::std::string;
  }
  area_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Login_ServerList::mutable_area_name() {
  set_has_area_name();
  if (area_name_ == &::google::protobuf::internal::kEmptyString) {
    area_name_ = new ::std::string;
  }
  return area_name_;
}
inline ::std::string* Login_ServerList::release_area_name() {
  clear_has_area_name();
  if (area_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = area_name_;
    area_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Login_ServerList::set_allocated_area_name(::std::string* area_name) {
  if (area_name_ != &::google::protobuf::internal::kEmptyString) {
    delete area_name_;
  }
  if (area_name) {
    set_has_area_name();
    area_name_ = area_name;
  } else {
    clear_has_area_name();
    area_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 is_recommend = 8;
inline bool Login_ServerList::has_is_recommend() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Login_ServerList::set_has_is_recommend() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Login_ServerList::clear_has_is_recommend() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Login_ServerList::clear_is_recommend() {
  is_recommend_ = 0;
  clear_has_is_recommend();
}
inline ::google::protobuf::int32 Login_ServerList::is_recommend() const {
  return is_recommend_;
}
inline void Login_ServerList::set_is_recommend(::google::protobuf::int32 value) {
  set_has_is_recommend();
  is_recommend_ = value;
}

// optional int32 is_newserver = 9;
inline bool Login_ServerList::has_is_newserver() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Login_ServerList::set_has_is_newserver() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Login_ServerList::clear_has_is_newserver() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Login_ServerList::clear_is_newserver() {
  is_newserver_ = 0;
  clear_has_is_newserver();
}
inline ::google::protobuf::int32 Login_ServerList::is_newserver() const {
  return is_newserver_;
}
inline void Login_ServerList::set_is_newserver(::google::protobuf::int32 value) {
  set_has_is_newserver();
  is_newserver_ = value;
}

// -------------------------------------------------------------------

// Login_STC_ServerList

// repeated .proto.message.Login_ServerList listSev = 1;
inline int Login_STC_ServerList::listsev_size() const {
  return listsev_.size();
}
inline void Login_STC_ServerList::clear_listsev() {
  listsev_.Clear();
}
inline const ::proto::message::Login_ServerList& Login_STC_ServerList::listsev(int index) const {
  return listsev_.Get(index);
}
inline ::proto::message::Login_ServerList* Login_STC_ServerList::mutable_listsev(int index) {
  return listsev_.Mutable(index);
}
inline ::proto::message::Login_ServerList* Login_STC_ServerList::add_listsev() {
  return listsev_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::message::Login_ServerList >&
Login_STC_ServerList::listsev() const {
  return listsev_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::message::Login_ServerList >*
Login_STC_ServerList::mutable_listsev() {
  return &listsev_;
}

// required int32 last_server_id = 2;
inline bool Login_STC_ServerList::has_last_server_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Login_STC_ServerList::set_has_last_server_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Login_STC_ServerList::clear_has_last_server_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Login_STC_ServerList::clear_last_server_id() {
  last_server_id_ = 0;
  clear_has_last_server_id();
}
inline ::google::protobuf::int32 Login_STC_ServerList::last_server_id() const {
  return last_server_id_;
}
inline void Login_STC_ServerList::set_last_server_id(::google::protobuf::int32 value) {
  set_has_last_server_id();
  last_server_id_ = value;
}

// required int32 cur_time = 3;
inline bool Login_STC_ServerList::has_cur_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Login_STC_ServerList::set_has_cur_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Login_STC_ServerList::clear_has_cur_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Login_STC_ServerList::clear_cur_time() {
  cur_time_ = 0;
  clear_has_cur_time();
}
inline ::google::protobuf::int32 Login_STC_ServerList::cur_time() const {
  return cur_time_;
}
inline void Login_STC_ServerList::set_cur_time(::google::protobuf::int32 value) {
  set_has_cur_time();
  cur_time_ = value;
}

// -------------------------------------------------------------------

// Login_CTS_CheckAccount

// required string account = 1;
inline bool Login_CTS_CheckAccount::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Login_CTS_CheckAccount::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Login_CTS_CheckAccount::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Login_CTS_CheckAccount::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& Login_CTS_CheckAccount::account() const {
  return *account_;
}
inline void Login_CTS_CheckAccount::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void Login_CTS_CheckAccount::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void Login_CTS_CheckAccount::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Login_CTS_CheckAccount::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* Login_CTS_CheckAccount::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Login_CTS_CheckAccount::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string pwd = 2;
inline bool Login_CTS_CheckAccount::has_pwd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Login_CTS_CheckAccount::set_has_pwd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Login_CTS_CheckAccount::clear_has_pwd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Login_CTS_CheckAccount::clear_pwd() {
  if (pwd_ != &::google::protobuf::internal::kEmptyString) {
    pwd_->clear();
  }
  clear_has_pwd();
}
inline const ::std::string& Login_CTS_CheckAccount::pwd() const {
  return *pwd_;
}
inline void Login_CTS_CheckAccount::set_pwd(const ::std::string& value) {
  set_has_pwd();
  if (pwd_ == &::google::protobuf::internal::kEmptyString) {
    pwd_ = new ::std::string;
  }
  pwd_->assign(value);
}
inline void Login_CTS_CheckAccount::set_pwd(const char* value) {
  set_has_pwd();
  if (pwd_ == &::google::protobuf::internal::kEmptyString) {
    pwd_ = new ::std::string;
  }
  pwd_->assign(value);
}
inline void Login_CTS_CheckAccount::set_pwd(const char* value, size_t size) {
  set_has_pwd();
  if (pwd_ == &::google::protobuf::internal::kEmptyString) {
    pwd_ = new ::std::string;
  }
  pwd_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Login_CTS_CheckAccount::mutable_pwd() {
  set_has_pwd();
  if (pwd_ == &::google::protobuf::internal::kEmptyString) {
    pwd_ = new ::std::string;
  }
  return pwd_;
}
inline ::std::string* Login_CTS_CheckAccount::release_pwd() {
  clear_has_pwd();
  if (pwd_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pwd_;
    pwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Login_CTS_CheckAccount::set_allocated_pwd(::std::string* pwd) {
  if (pwd_ != &::google::protobuf::internal::kEmptyString) {
    delete pwd_;
  }
  if (pwd) {
    set_has_pwd();
    pwd_ = pwd;
  } else {
    clear_has_pwd();
    pwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Login_STC_CheckAccountRe

// required int32 nErr = 1;
inline bool Login_STC_CheckAccountRe::has_nerr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Login_STC_CheckAccountRe::set_has_nerr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Login_STC_CheckAccountRe::clear_has_nerr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Login_STC_CheckAccountRe::clear_nerr() {
  nerr_ = 0;
  clear_has_nerr();
}
inline ::google::protobuf::int32 Login_STC_CheckAccountRe::nerr() const {
  return nerr_;
}
inline void Login_STC_CheckAccountRe::set_nerr(::google::protobuf::int32 value) {
  set_has_nerr();
  nerr_ = value;
}

// -------------------------------------------------------------------

// Login_CTS_SelectServer

// required int32 ServerID = 1;
inline bool Login_CTS_SelectServer::has_serverid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Login_CTS_SelectServer::set_has_serverid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Login_CTS_SelectServer::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Login_CTS_SelectServer::clear_serverid() {
  serverid_ = 0;
  clear_has_serverid();
}
inline ::google::protobuf::int32 Login_CTS_SelectServer::serverid() const {
  return serverid_;
}
inline void Login_CTS_SelectServer::set_serverid(::google::protobuf::int32 value) {
  set_has_serverid();
  serverid_ = value;
}

// -------------------------------------------------------------------

// Login_STC_SelectServer

// optional int32 result = 1;
inline bool Login_STC_SelectServer::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Login_STC_SelectServer::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Login_STC_SelectServer::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Login_STC_SelectServer::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 Login_STC_SelectServer::result() const {
  return result_;
}
inline void Login_STC_SelectServer::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional string ip = 2;
inline bool Login_STC_SelectServer::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Login_STC_SelectServer::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Login_STC_SelectServer::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Login_STC_SelectServer::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& Login_STC_SelectServer::ip() const {
  return *ip_;
}
inline void Login_STC_SelectServer::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void Login_STC_SelectServer::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void Login_STC_SelectServer::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Login_STC_SelectServer::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* Login_STC_SelectServer::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Login_STC_SelectServer::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 port = 3;
inline bool Login_STC_SelectServer::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Login_STC_SelectServer::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Login_STC_SelectServer::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Login_STC_SelectServer::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 Login_STC_SelectServer::port() const {
  return port_;
}
inline void Login_STC_SelectServer::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
}

// -------------------------------------------------------------------

// Login_CTS_Register

// optional string account = 1;
inline bool Login_CTS_Register::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Login_CTS_Register::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Login_CTS_Register::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Login_CTS_Register::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& Login_CTS_Register::account() const {
  return *account_;
}
inline void Login_CTS_Register::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void Login_CTS_Register::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void Login_CTS_Register::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Login_CTS_Register::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* Login_CTS_Register::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Login_CTS_Register::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string password = 2;
inline bool Login_CTS_Register::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Login_CTS_Register::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Login_CTS_Register::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Login_CTS_Register::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& Login_CTS_Register::password() const {
  return *password_;
}
inline void Login_CTS_Register::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void Login_CTS_Register::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void Login_CTS_Register::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Login_CTS_Register::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* Login_CTS_Register::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Login_CTS_Register::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Login_STC_Register

// optional int32 Result = 1;
inline bool Login_STC_Register::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Login_STC_Register::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Login_STC_Register::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Login_STC_Register::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 Login_STC_Register::result() const {
  return result_;
}
inline void Login_STC_Register::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// Login_CTS_Version

// -------------------------------------------------------------------

// Login_STC_Version

// optional string version = 1;
inline bool Login_STC_Version::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Login_STC_Version::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Login_STC_Version::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Login_STC_Version::clear_version() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    version_->clear();
  }
  clear_has_version();
}
inline const ::std::string& Login_STC_Version::version() const {
  return *version_;
}
inline void Login_STC_Version::set_version(const ::std::string& value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(value);
}
inline void Login_STC_Version::set_version(const char* value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(value);
}
inline void Login_STC_Version::set_version(const char* value, size_t size) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Login_STC_Version::mutable_version() {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  return version_;
}
inline ::std::string* Login_STC_Version::release_version() {
  clear_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = version_;
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Login_STC_Version::set_allocated_version(::std::string* version) {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (version) {
    set_has_version();
    version_ = version;
  } else {
    clear_has_version();
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Login_CTS_QueryPlayerData

// required string Account = 1;
inline bool Login_CTS_QueryPlayerData::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Login_CTS_QueryPlayerData::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Login_CTS_QueryPlayerData::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Login_CTS_QueryPlayerData::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& Login_CTS_QueryPlayerData::account() const {
  return *account_;
}
inline void Login_CTS_QueryPlayerData::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void Login_CTS_QueryPlayerData::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void Login_CTS_QueryPlayerData::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Login_CTS_QueryPlayerData::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* Login_CTS_QueryPlayerData::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Login_CTS_QueryPlayerData::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 ServerId = 2;
inline bool Login_CTS_QueryPlayerData::has_serverid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Login_CTS_QueryPlayerData::set_has_serverid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Login_CTS_QueryPlayerData::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Login_CTS_QueryPlayerData::clear_serverid() {
  serverid_ = 0;
  clear_has_serverid();
}
inline ::google::protobuf::int32 Login_CTS_QueryPlayerData::serverid() const {
  return serverid_;
}
inline void Login_CTS_QueryPlayerData::set_serverid(::google::protobuf::int32 value) {
  set_has_serverid();
  serverid_ = value;
}

// -------------------------------------------------------------------

// Login_STC_QueryPlayerData

// required int32 rt = 1;
inline bool Login_STC_QueryPlayerData::has_rt() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Login_STC_QueryPlayerData::set_has_rt() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Login_STC_QueryPlayerData::clear_has_rt() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Login_STC_QueryPlayerData::clear_rt() {
  rt_ = 0;
  clear_has_rt();
}
inline ::google::protobuf::int32 Login_STC_QueryPlayerData::rt() const {
  return rt_;
}
inline void Login_STC_QueryPlayerData::set_rt(::google::protobuf::int32 value) {
  set_has_rt();
  rt_ = value;
}

// -------------------------------------------------------------------

// Login_CTS_CreateChar

// required int32 ServerId = 1;
inline bool Login_CTS_CreateChar::has_serverid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Login_CTS_CreateChar::set_has_serverid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Login_CTS_CreateChar::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Login_CTS_CreateChar::clear_serverid() {
  serverid_ = 0;
  clear_has_serverid();
}
inline ::google::protobuf::int32 Login_CTS_CreateChar::serverid() const {
  return serverid_;
}
inline void Login_CTS_CreateChar::set_serverid(::google::protobuf::int32 value) {
  set_has_serverid();
  serverid_ = value;
}

// required int32 sex = 2;
inline bool Login_CTS_CreateChar::has_sex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Login_CTS_CreateChar::set_has_sex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Login_CTS_CreateChar::clear_has_sex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Login_CTS_CreateChar::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
inline ::google::protobuf::int32 Login_CTS_CreateChar::sex() const {
  return sex_;
}
inline void Login_CTS_CreateChar::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
}

// required int32 weapon = 3;
inline bool Login_CTS_CreateChar::has_weapon() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Login_CTS_CreateChar::set_has_weapon() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Login_CTS_CreateChar::clear_has_weapon() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Login_CTS_CreateChar::clear_weapon() {
  weapon_ = 0;
  clear_has_weapon();
}
inline ::google::protobuf::int32 Login_CTS_CreateChar::weapon() const {
  return weapon_;
}
inline void Login_CTS_CreateChar::set_weapon(::google::protobuf::int32 value) {
  set_has_weapon();
  weapon_ = value;
}

// required string CharName = 4;
inline bool Login_CTS_CreateChar::has_charname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Login_CTS_CreateChar::set_has_charname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Login_CTS_CreateChar::clear_has_charname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Login_CTS_CreateChar::clear_charname() {
  if (charname_ != &::google::protobuf::internal::kEmptyString) {
    charname_->clear();
  }
  clear_has_charname();
}
inline const ::std::string& Login_CTS_CreateChar::charname() const {
  return *charname_;
}
inline void Login_CTS_CreateChar::set_charname(const ::std::string& value) {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    charname_ = new ::std::string;
  }
  charname_->assign(value);
}
inline void Login_CTS_CreateChar::set_charname(const char* value) {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    charname_ = new ::std::string;
  }
  charname_->assign(value);
}
inline void Login_CTS_CreateChar::set_charname(const char* value, size_t size) {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    charname_ = new ::std::string;
  }
  charname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Login_CTS_CreateChar::mutable_charname() {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    charname_ = new ::std::string;
  }
  return charname_;
}
inline ::std::string* Login_CTS_CreateChar::release_charname() {
  clear_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = charname_;
    charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Login_CTS_CreateChar::set_allocated_charname(::std::string* charname) {
  if (charname_ != &::google::protobuf::internal::kEmptyString) {
    delete charname_;
  }
  if (charname) {
    set_has_charname();
    charname_ = charname;
  } else {
    clear_has_charname();
    charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string account = 5;
inline bool Login_CTS_CreateChar::has_account() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Login_CTS_CreateChar::set_has_account() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Login_CTS_CreateChar::clear_has_account() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Login_CTS_CreateChar::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& Login_CTS_CreateChar::account() const {
  return *account_;
}
inline void Login_CTS_CreateChar::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void Login_CTS_CreateChar::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void Login_CTS_CreateChar::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Login_CTS_CreateChar::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* Login_CTS_CreateChar::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Login_CTS_CreateChar::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Login_STC_CreateChar

// required int32 rt = 1;
inline bool Login_STC_CreateChar::has_rt() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Login_STC_CreateChar::set_has_rt() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Login_STC_CreateChar::clear_has_rt() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Login_STC_CreateChar::clear_rt() {
  rt_ = 0;
  clear_has_rt();
}
inline ::google::protobuf::int32 Login_STC_CreateChar::rt() const {
  return rt_;
}
inline void Login_STC_CreateChar::set_rt(::google::protobuf::int32 value) {
  set_has_rt();
  rt_ = value;
}

// -------------------------------------------------------------------

// Login_STC_PlayerData

// required uint64 charid = 1;
inline bool Login_STC_PlayerData::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Login_STC_PlayerData::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Login_STC_PlayerData::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Login_STC_PlayerData::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 Login_STC_PlayerData::charid() const {
  return charid_;
}
inline void Login_STC_PlayerData::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
}

// required int32 sex = 2;
inline bool Login_STC_PlayerData::has_sex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Login_STC_PlayerData::set_has_sex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Login_STC_PlayerData::clear_has_sex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Login_STC_PlayerData::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
inline ::google::protobuf::int32 Login_STC_PlayerData::sex() const {
  return sex_;
}
inline void Login_STC_PlayerData::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
}

// required int32 weapon = 3;
inline bool Login_STC_PlayerData::has_weapon() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Login_STC_PlayerData::set_has_weapon() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Login_STC_PlayerData::clear_has_weapon() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Login_STC_PlayerData::clear_weapon() {
  weapon_ = 0;
  clear_has_weapon();
}
inline ::google::protobuf::int32 Login_STC_PlayerData::weapon() const {
  return weapon_;
}
inline void Login_STC_PlayerData::set_weapon(::google::protobuf::int32 value) {
  set_has_weapon();
  weapon_ = value;
}

// required string charname = 4;
inline bool Login_STC_PlayerData::has_charname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Login_STC_PlayerData::set_has_charname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Login_STC_PlayerData::clear_has_charname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Login_STC_PlayerData::clear_charname() {
  if (charname_ != &::google::protobuf::internal::kEmptyString) {
    charname_->clear();
  }
  clear_has_charname();
}
inline const ::std::string& Login_STC_PlayerData::charname() const {
  return *charname_;
}
inline void Login_STC_PlayerData::set_charname(const ::std::string& value) {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    charname_ = new ::std::string;
  }
  charname_->assign(value);
}
inline void Login_STC_PlayerData::set_charname(const char* value) {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    charname_ = new ::std::string;
  }
  charname_->assign(value);
}
inline void Login_STC_PlayerData::set_charname(const char* value, size_t size) {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    charname_ = new ::std::string;
  }
  charname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Login_STC_PlayerData::mutable_charname() {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    charname_ = new ::std::string;
  }
  return charname_;
}
inline ::std::string* Login_STC_PlayerData::release_charname() {
  clear_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = charname_;
    charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Login_STC_PlayerData::set_allocated_charname(::std::string* charname) {
  if (charname_ != &::google::protobuf::internal::kEmptyString) {
    delete charname_;
  }
  if (charname) {
    set_has_charname();
    charname_ = charname;
  } else {
    clear_has_charname();
    charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 playerid = 5;
inline bool Login_STC_PlayerData::has_playerid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Login_STC_PlayerData::set_has_playerid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Login_STC_PlayerData::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Login_STC_PlayerData::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 Login_STC_PlayerData::playerid() const {
  return playerid_;
}
inline void Login_STC_PlayerData::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// required int32 level = 6;
inline bool Login_STC_PlayerData::has_level() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Login_STC_PlayerData::set_has_level() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Login_STC_PlayerData::clear_has_level() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Login_STC_PlayerData::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 Login_STC_PlayerData::level() const {
  return level_;
}
inline void Login_STC_PlayerData::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// required .proto.message.MoneyItem money_item = 7;
inline bool Login_STC_PlayerData::has_money_item() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Login_STC_PlayerData::set_has_money_item() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Login_STC_PlayerData::clear_has_money_item() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Login_STC_PlayerData::clear_money_item() {
  if (money_item_ != NULL) money_item_->::proto::message::MoneyItem::Clear();
  clear_has_money_item();
}
inline const ::proto::message::MoneyItem& Login_STC_PlayerData::money_item() const {
  return money_item_ != NULL ? *money_item_ : *default_instance_->money_item_;
}
inline ::proto::message::MoneyItem* Login_STC_PlayerData::mutable_money_item() {
  set_has_money_item();
  if (money_item_ == NULL) money_item_ = new ::proto::message::MoneyItem;
  return money_item_;
}
inline ::proto::message::MoneyItem* Login_STC_PlayerData::release_money_item() {
  clear_has_money_item();
  ::proto::message::MoneyItem* temp = money_item_;
  money_item_ = NULL;
  return temp;
}
inline void Login_STC_PlayerData::set_allocated_money_item(::proto::message::MoneyItem* money_item) {
  delete money_item_;
  money_item_ = money_item;
  if (money_item) {
    set_has_money_item();
  } else {
    clear_has_money_item();
  }
}

// repeated .proto.message.Equip equip_list = 8;
inline int Login_STC_PlayerData::equip_list_size() const {
  return equip_list_.size();
}
inline void Login_STC_PlayerData::clear_equip_list() {
  equip_list_.Clear();
}
inline const ::proto::message::Equip& Login_STC_PlayerData::equip_list(int index) const {
  return equip_list_.Get(index);
}
inline ::proto::message::Equip* Login_STC_PlayerData::mutable_equip_list(int index) {
  return equip_list_.Mutable(index);
}
inline ::proto::message::Equip* Login_STC_PlayerData::add_equip_list() {
  return equip_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::message::Equip >&
Login_STC_PlayerData::equip_list() const {
  return equip_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::message::Equip >*
Login_STC_PlayerData::mutable_equip_list() {
  return &equip_list_;
}

// optional int32 cur_time = 9;
inline bool Login_STC_PlayerData::has_cur_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Login_STC_PlayerData::set_has_cur_time() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Login_STC_PlayerData::clear_has_cur_time() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Login_STC_PlayerData::clear_cur_time() {
  cur_time_ = 0;
  clear_has_cur_time();
}
inline ::google::protobuf::int32 Login_STC_PlayerData::cur_time() const {
  return cur_time_;
}
inline void Login_STC_PlayerData::set_cur_time(::google::protobuf::int32 value) {
  set_has_cur_time();
  cur_time_ = value;
}

// optional uint32 questioncounts = 10;
inline bool Login_STC_PlayerData::has_questioncounts() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Login_STC_PlayerData::set_has_questioncounts() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Login_STC_PlayerData::clear_has_questioncounts() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Login_STC_PlayerData::clear_questioncounts() {
  questioncounts_ = 0u;
  clear_has_questioncounts();
}
inline ::google::protobuf::uint32 Login_STC_PlayerData::questioncounts() const {
  return questioncounts_;
}
inline void Login_STC_PlayerData::set_questioncounts(::google::protobuf::uint32 value) {
  set_has_questioncounts();
  questioncounts_ = value;
}

// optional uint32 rightcounts = 11;
inline bool Login_STC_PlayerData::has_rightcounts() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Login_STC_PlayerData::set_has_rightcounts() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Login_STC_PlayerData::clear_has_rightcounts() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Login_STC_PlayerData::clear_rightcounts() {
  rightcounts_ = 0u;
  clear_has_rightcounts();
}
inline ::google::protobuf::uint32 Login_STC_PlayerData::rightcounts() const {
  return rightcounts_;
}
inline void Login_STC_PlayerData::set_rightcounts(::google::protobuf::uint32 value) {
  set_has_rightcounts();
  rightcounts_ = value;
}

// optional uint32 rewardstate = 12;
inline bool Login_STC_PlayerData::has_rewardstate() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Login_STC_PlayerData::set_has_rewardstate() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Login_STC_PlayerData::clear_has_rewardstate() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Login_STC_PlayerData::clear_rewardstate() {
  rewardstate_ = 0u;
  clear_has_rewardstate();
}
inline ::google::protobuf::uint32 Login_STC_PlayerData::rewardstate() const {
  return rewardstate_;
}
inline void Login_STC_PlayerData::set_rewardstate(::google::protobuf::uint32 value) {
  set_has_rewardstate();
  rewardstate_ = value;
}

// repeated .proto.message.IDNum button_id_list = 13;
inline int Login_STC_PlayerData::button_id_list_size() const {
  return button_id_list_.size();
}
inline void Login_STC_PlayerData::clear_button_id_list() {
  button_id_list_.Clear();
}
inline const ::proto::message::IDNum& Login_STC_PlayerData::button_id_list(int index) const {
  return button_id_list_.Get(index);
}
inline ::proto::message::IDNum* Login_STC_PlayerData::mutable_button_id_list(int index) {
  return button_id_list_.Mutable(index);
}
inline ::proto::message::IDNum* Login_STC_PlayerData::add_button_id_list() {
  return button_id_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::message::IDNum >&
Login_STC_PlayerData::button_id_list() const {
  return button_id_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::message::IDNum >*
Login_STC_PlayerData::mutable_button_id_list() {
  return &button_id_list_;
}

// repeated .proto.message.ActivityIDTimes activity_list = 14;
inline int Login_STC_PlayerData::activity_list_size() const {
  return activity_list_.size();
}
inline void Login_STC_PlayerData::clear_activity_list() {
  activity_list_.Clear();
}
inline const ::proto::message::ActivityIDTimes& Login_STC_PlayerData::activity_list(int index) const {
  return activity_list_.Get(index);
}
inline ::proto::message::ActivityIDTimes* Login_STC_PlayerData::mutable_activity_list(int index) {
  return activity_list_.Mutable(index);
}
inline ::proto::message::ActivityIDTimes* Login_STC_PlayerData::add_activity_list() {
  return activity_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::message::ActivityIDTimes >&
Login_STC_PlayerData::activity_list() const {
  return activity_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::message::ActivityIDTimes >*
Login_STC_PlayerData::mutable_activity_list() {
  return &activity_list_;
}

// optional uint64 guildid = 15;
inline bool Login_STC_PlayerData::has_guildid() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Login_STC_PlayerData::set_has_guildid() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Login_STC_PlayerData::clear_has_guildid() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Login_STC_PlayerData::clear_guildid() {
  guildid_ = GOOGLE_ULONGLONG(0);
  clear_has_guildid();
}
inline ::google::protobuf::uint64 Login_STC_PlayerData::guildid() const {
  return guildid_;
}
inline void Login_STC_PlayerData::set_guildid(::google::protobuf::uint64 value) {
  set_has_guildid();
  guildid_ = value;
}

// optional uint32 MoveSpeed = 16;
inline bool Login_STC_PlayerData::has_movespeed() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Login_STC_PlayerData::set_has_movespeed() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Login_STC_PlayerData::clear_has_movespeed() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Login_STC_PlayerData::clear_movespeed() {
  movespeed_ = 0u;
  clear_has_movespeed();
}
inline ::google::protobuf::uint32 Login_STC_PlayerData::movespeed() const {
  return movespeed_;
}
inline void Login_STC_PlayerData::set_movespeed(::google::protobuf::uint32 value) {
  set_has_movespeed();
  movespeed_ = value;
}

// repeated uint32 jewelry_id_list = 17;
inline int Login_STC_PlayerData::jewelry_id_list_size() const {
  return jewelry_id_list_.size();
}
inline void Login_STC_PlayerData::clear_jewelry_id_list() {
  jewelry_id_list_.Clear();
}
inline ::google::protobuf::uint32 Login_STC_PlayerData::jewelry_id_list(int index) const {
  return jewelry_id_list_.Get(index);
}
inline void Login_STC_PlayerData::set_jewelry_id_list(int index, ::google::protobuf::uint32 value) {
  jewelry_id_list_.Set(index, value);
}
inline void Login_STC_PlayerData::add_jewelry_id_list(::google::protobuf::uint32 value) {
  jewelry_id_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Login_STC_PlayerData::jewelry_id_list() const {
  return jewelry_id_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Login_STC_PlayerData::mutable_jewelry_id_list() {
  return &jewelry_id_list_;
}

// optional int32 titleID = 18;
inline bool Login_STC_PlayerData::has_titleid() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Login_STC_PlayerData::set_has_titleid() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Login_STC_PlayerData::clear_has_titleid() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Login_STC_PlayerData::clear_titleid() {
  titleid_ = 0;
  clear_has_titleid();
}
inline ::google::protobuf::int32 Login_STC_PlayerData::titleid() const {
  return titleid_;
}
inline void Login_STC_PlayerData::set_titleid(::google::protobuf::int32 value) {
  set_has_titleid();
  titleid_ = value;
}

// optional int32 activity_loop = 19;
inline bool Login_STC_PlayerData::has_activity_loop() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Login_STC_PlayerData::set_has_activity_loop() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Login_STC_PlayerData::clear_has_activity_loop() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Login_STC_PlayerData::clear_activity_loop() {
  activity_loop_ = 0;
  clear_has_activity_loop();
}
inline ::google::protobuf::int32 Login_STC_PlayerData::activity_loop() const {
  return activity_loop_;
}
inline void Login_STC_PlayerData::set_activity_loop(::google::protobuf::int32 value) {
  set_has_activity_loop();
  activity_loop_ = value;
}

// optional int32 vip_level = 20;
inline bool Login_STC_PlayerData::has_vip_level() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Login_STC_PlayerData::set_has_vip_level() {
  _has_bits_[0] |= 0x00080000u;
}
inline void Login_STC_PlayerData::clear_has_vip_level() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void Login_STC_PlayerData::clear_vip_level() {
  vip_level_ = 0;
  clear_has_vip_level();
}
inline ::google::protobuf::int32 Login_STC_PlayerData::vip_level() const {
  return vip_level_;
}
inline void Login_STC_PlayerData::set_vip_level(::google::protobuf::int32 value) {
  set_has_vip_level();
  vip_level_ = value;
}

// optional int32 relive_times = 21;
inline bool Login_STC_PlayerData::has_relive_times() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void Login_STC_PlayerData::set_has_relive_times() {
  _has_bits_[0] |= 0x00100000u;
}
inline void Login_STC_PlayerData::clear_has_relive_times() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void Login_STC_PlayerData::clear_relive_times() {
  relive_times_ = 0;
  clear_has_relive_times();
}
inline ::google::protobuf::int32 Login_STC_PlayerData::relive_times() const {
  return relive_times_;
}
inline void Login_STC_PlayerData::set_relive_times(::google::protobuf::int32 value) {
  set_has_relive_times();
  relive_times_ = value;
}

// optional string titlename = 22;
inline bool Login_STC_PlayerData::has_titlename() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void Login_STC_PlayerData::set_has_titlename() {
  _has_bits_[0] |= 0x00200000u;
}
inline void Login_STC_PlayerData::clear_has_titlename() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void Login_STC_PlayerData::clear_titlename() {
  if (titlename_ != &::google::protobuf::internal::kEmptyString) {
    titlename_->clear();
  }
  clear_has_titlename();
}
inline const ::std::string& Login_STC_PlayerData::titlename() const {
  return *titlename_;
}
inline void Login_STC_PlayerData::set_titlename(const ::std::string& value) {
  set_has_titlename();
  if (titlename_ == &::google::protobuf::internal::kEmptyString) {
    titlename_ = new ::std::string;
  }
  titlename_->assign(value);
}
inline void Login_STC_PlayerData::set_titlename(const char* value) {
  set_has_titlename();
  if (titlename_ == &::google::protobuf::internal::kEmptyString) {
    titlename_ = new ::std::string;
  }
  titlename_->assign(value);
}
inline void Login_STC_PlayerData::set_titlename(const char* value, size_t size) {
  set_has_titlename();
  if (titlename_ == &::google::protobuf::internal::kEmptyString) {
    titlename_ = new ::std::string;
  }
  titlename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Login_STC_PlayerData::mutable_titlename() {
  set_has_titlename();
  if (titlename_ == &::google::protobuf::internal::kEmptyString) {
    titlename_ = new ::std::string;
  }
  return titlename_;
}
inline ::std::string* Login_STC_PlayerData::release_titlename() {
  clear_has_titlename();
  if (titlename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = titlename_;
    titlename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Login_STC_PlayerData::set_allocated_titlename(::std::string* titlename) {
  if (titlename_ != &::google::protobuf::internal::kEmptyString) {
    delete titlename_;
  }
  if (titlename) {
    set_has_titlename();
    titlename_ = titlename;
  } else {
    clear_has_titlename();
    titlename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 titleishide = 23;
inline bool Login_STC_PlayerData::has_titleishide() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void Login_STC_PlayerData::set_has_titleishide() {
  _has_bits_[0] |= 0x00400000u;
}
inline void Login_STC_PlayerData::clear_has_titleishide() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void Login_STC_PlayerData::clear_titleishide() {
  titleishide_ = 0;
  clear_has_titleishide();
}
inline ::google::protobuf::int32 Login_STC_PlayerData::titleishide() const {
  return titleishide_;
}
inline void Login_STC_PlayerData::set_titleishide(::google::protobuf::int32 value) {
  set_has_titleishide();
  titleishide_ = value;
}

// repeated int32 posid_list = 24;
inline int Login_STC_PlayerData::posid_list_size() const {
  return posid_list_.size();
}
inline void Login_STC_PlayerData::clear_posid_list() {
  posid_list_.Clear();
}
inline ::google::protobuf::int32 Login_STC_PlayerData::posid_list(int index) const {
  return posid_list_.Get(index);
}
inline void Login_STC_PlayerData::set_posid_list(int index, ::google::protobuf::int32 value) {
  posid_list_.Set(index, value);
}
inline void Login_STC_PlayerData::add_posid_list(::google::protobuf::int32 value) {
  posid_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Login_STC_PlayerData::posid_list() const {
  return posid_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Login_STC_PlayerData::mutable_posid_list() {
  return &posid_list_;
}

// optional int32 guild_office = 25;
inline bool Login_STC_PlayerData::has_guild_office() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void Login_STC_PlayerData::set_has_guild_office() {
  _has_bits_[0] |= 0x01000000u;
}
inline void Login_STC_PlayerData::clear_has_guild_office() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void Login_STC_PlayerData::clear_guild_office() {
  guild_office_ = 0;
  clear_has_guild_office();
}
inline ::google::protobuf::int32 Login_STC_PlayerData::guild_office() const {
  return guild_office_;
}
inline void Login_STC_PlayerData::set_guild_office(::google::protobuf::int32 value) {
  set_has_guild_office();
  guild_office_ = value;
}

// optional int32 trial_dungeon_id = 26;
inline bool Login_STC_PlayerData::has_trial_dungeon_id() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void Login_STC_PlayerData::set_has_trial_dungeon_id() {
  _has_bits_[0] |= 0x02000000u;
}
inline void Login_STC_PlayerData::clear_has_trial_dungeon_id() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void Login_STC_PlayerData::clear_trial_dungeon_id() {
  trial_dungeon_id_ = 0;
  clear_has_trial_dungeon_id();
}
inline ::google::protobuf::int32 Login_STC_PlayerData::trial_dungeon_id() const {
  return trial_dungeon_id_;
}
inline void Login_STC_PlayerData::set_trial_dungeon_id(::google::protobuf::int32 value) {
  set_has_trial_dungeon_id();
  trial_dungeon_id_ = value;
}

// optional int32 cur_identity = 27;
inline bool Login_STC_PlayerData::has_cur_identity() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void Login_STC_PlayerData::set_has_cur_identity() {
  _has_bits_[0] |= 0x04000000u;
}
inline void Login_STC_PlayerData::clear_has_cur_identity() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void Login_STC_PlayerData::clear_cur_identity() {
  cur_identity_ = 0;
  clear_has_cur_identity();
}
inline ::google::protobuf::int32 Login_STC_PlayerData::cur_identity() const {
  return cur_identity_;
}
inline void Login_STC_PlayerData::set_cur_identity(::google::protobuf::int32 value) {
  set_has_cur_identity();
  cur_identity_ = value;
}

// optional int32 cur_MultiChivalrous = 28;
inline bool Login_STC_PlayerData::has_cur_multichivalrous() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void Login_STC_PlayerData::set_has_cur_multichivalrous() {
  _has_bits_[0] |= 0x08000000u;
}
inline void Login_STC_PlayerData::clear_has_cur_multichivalrous() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void Login_STC_PlayerData::clear_cur_multichivalrous() {
  cur_multichivalrous_ = 0;
  clear_has_cur_multichivalrous();
}
inline ::google::protobuf::int32 Login_STC_PlayerData::cur_multichivalrous() const {
  return cur_multichivalrous_;
}
inline void Login_STC_PlayerData::set_cur_multichivalrous(::google::protobuf::int32 value) {
  set_has_cur_multichivalrous();
  cur_multichivalrous_ = value;
}

// optional int32 cur_EpicChivalrous = 29;
inline bool Login_STC_PlayerData::has_cur_epicchivalrous() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void Login_STC_PlayerData::set_has_cur_epicchivalrous() {
  _has_bits_[0] |= 0x10000000u;
}
inline void Login_STC_PlayerData::clear_has_cur_epicchivalrous() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void Login_STC_PlayerData::clear_cur_epicchivalrous() {
  cur_epicchivalrous_ = 0;
  clear_has_cur_epicchivalrous();
}
inline ::google::protobuf::int32 Login_STC_PlayerData::cur_epicchivalrous() const {
  return cur_epicchivalrous_;
}
inline void Login_STC_PlayerData::set_cur_epicchivalrous(::google::protobuf::int32 value) {
  set_has_cur_epicchivalrous();
  cur_epicchivalrous_ = value;
}

// optional uint32 uiSuitId = 30;
inline bool Login_STC_PlayerData::has_uisuitid() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void Login_STC_PlayerData::set_has_uisuitid() {
  _has_bits_[0] |= 0x20000000u;
}
inline void Login_STC_PlayerData::clear_has_uisuitid() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void Login_STC_PlayerData::clear_uisuitid() {
  uisuitid_ = 0u;
  clear_has_uisuitid();
}
inline ::google::protobuf::uint32 Login_STC_PlayerData::uisuitid() const {
  return uisuitid_;
}
inline void Login_STC_PlayerData::set_uisuitid(::google::protobuf::uint32 value) {
  set_has_uisuitid();
  uisuitid_ = value;
}

// optional .proto.message.BattleBoatInfo boat_info = 31;
inline bool Login_STC_PlayerData::has_boat_info() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void Login_STC_PlayerData::set_has_boat_info() {
  _has_bits_[0] |= 0x40000000u;
}
inline void Login_STC_PlayerData::clear_has_boat_info() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void Login_STC_PlayerData::clear_boat_info() {
  if (boat_info_ != NULL) boat_info_->::proto::message::BattleBoatInfo::Clear();
  clear_has_boat_info();
}
inline const ::proto::message::BattleBoatInfo& Login_STC_PlayerData::boat_info() const {
  return boat_info_ != NULL ? *boat_info_ : *default_instance_->boat_info_;
}
inline ::proto::message::BattleBoatInfo* Login_STC_PlayerData::mutable_boat_info() {
  set_has_boat_info();
  if (boat_info_ == NULL) boat_info_ = new ::proto::message::BattleBoatInfo;
  return boat_info_;
}
inline ::proto::message::BattleBoatInfo* Login_STC_PlayerData::release_boat_info() {
  clear_has_boat_info();
  ::proto::message::BattleBoatInfo* temp = boat_info_;
  boat_info_ = NULL;
  return temp;
}
inline void Login_STC_PlayerData::set_allocated_boat_info(::proto::message::BattleBoatInfo* boat_info) {
  delete boat_info_;
  boat_info_ = boat_info;
  if (boat_info) {
    set_has_boat_info();
  } else {
    clear_has_boat_info();
  }
}

// optional uint32 uiAttackMode = 32;
inline bool Login_STC_PlayerData::has_uiattackmode() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void Login_STC_PlayerData::set_has_uiattackmode() {
  _has_bits_[0] |= 0x80000000u;
}
inline void Login_STC_PlayerData::clear_has_uiattackmode() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void Login_STC_PlayerData::clear_uiattackmode() {
  uiattackmode_ = 0u;
  clear_has_uiattackmode();
}
inline ::google::protobuf::uint32 Login_STC_PlayerData::uiattackmode() const {
  return uiattackmode_;
}
inline void Login_STC_PlayerData::set_uiattackmode(::google::protobuf::uint32 value) {
  set_has_uiattackmode();
  uiattackmode_ = value;
}

// optional string finishkey = 33;
inline bool Login_STC_PlayerData::has_finishkey() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void Login_STC_PlayerData::set_has_finishkey() {
  _has_bits_[1] |= 0x00000001u;
}
inline void Login_STC_PlayerData::clear_has_finishkey() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void Login_STC_PlayerData::clear_finishkey() {
  if (finishkey_ != &::google::protobuf::internal::kEmptyString) {
    finishkey_->clear();
  }
  clear_has_finishkey();
}
inline const ::std::string& Login_STC_PlayerData::finishkey() const {
  return *finishkey_;
}
inline void Login_STC_PlayerData::set_finishkey(const ::std::string& value) {
  set_has_finishkey();
  if (finishkey_ == &::google::protobuf::internal::kEmptyString) {
    finishkey_ = new ::std::string;
  }
  finishkey_->assign(value);
}
inline void Login_STC_PlayerData::set_finishkey(const char* value) {
  set_has_finishkey();
  if (finishkey_ == &::google::protobuf::internal::kEmptyString) {
    finishkey_ = new ::std::string;
  }
  finishkey_->assign(value);
}
inline void Login_STC_PlayerData::set_finishkey(const char* value, size_t size) {
  set_has_finishkey();
  if (finishkey_ == &::google::protobuf::internal::kEmptyString) {
    finishkey_ = new ::std::string;
  }
  finishkey_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Login_STC_PlayerData::mutable_finishkey() {
  set_has_finishkey();
  if (finishkey_ == &::google::protobuf::internal::kEmptyString) {
    finishkey_ = new ::std::string;
  }
  return finishkey_;
}
inline ::std::string* Login_STC_PlayerData::release_finishkey() {
  clear_has_finishkey();
  if (finishkey_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = finishkey_;
    finishkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Login_STC_PlayerData::set_allocated_finishkey(::std::string* finishkey) {
  if (finishkey_ != &::google::protobuf::internal::kEmptyString) {
    delete finishkey_;
  }
  if (finishkey) {
    set_has_finishkey();
    finishkey_ = finishkey;
  } else {
    clear_has_finishkey();
    finishkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 guidepart = 34;
inline bool Login_STC_PlayerData::has_guidepart() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void Login_STC_PlayerData::set_has_guidepart() {
  _has_bits_[1] |= 0x00000002u;
}
inline void Login_STC_PlayerData::clear_has_guidepart() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void Login_STC_PlayerData::clear_guidepart() {
  guidepart_ = 0u;
  clear_has_guidepart();
}
inline ::google::protobuf::uint32 Login_STC_PlayerData::guidepart() const {
  return guidepart_;
}
inline void Login_STC_PlayerData::set_guidepart(::google::protobuf::uint32 value) {
  set_has_guidepart();
  guidepart_ = value;
}

// optional uint32 createtime = 35;
inline bool Login_STC_PlayerData::has_createtime() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void Login_STC_PlayerData::set_has_createtime() {
  _has_bits_[1] |= 0x00000004u;
}
inline void Login_STC_PlayerData::clear_has_createtime() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void Login_STC_PlayerData::clear_createtime() {
  createtime_ = 0u;
  clear_has_createtime();
}
inline ::google::protobuf::uint32 Login_STC_PlayerData::createtime() const {
  return createtime_;
}
inline void Login_STC_PlayerData::set_createtime(::google::protobuf::uint32 value) {
  set_has_createtime();
  createtime_ = value;
}

// -------------------------------------------------------------------

// Login_STC_EnterScene

// optional int32 mapid = 1;
inline bool Login_STC_EnterScene::has_mapid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Login_STC_EnterScene::set_has_mapid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Login_STC_EnterScene::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Login_STC_EnterScene::clear_mapid() {
  mapid_ = 0;
  clear_has_mapid();
}
inline ::google::protobuf::int32 Login_STC_EnterScene::mapid() const {
  return mapid_;
}
inline void Login_STC_EnterScene::set_mapid(::google::protobuf::int32 value) {
  set_has_mapid();
  mapid_ = value;
}

// required .proto.message.Point3D pt = 2;
inline bool Login_STC_EnterScene::has_pt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Login_STC_EnterScene::set_has_pt() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Login_STC_EnterScene::clear_has_pt() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Login_STC_EnterScene::clear_pt() {
  if (pt_ != NULL) pt_->::proto::message::Point3D::Clear();
  clear_has_pt();
}
inline const ::proto::message::Point3D& Login_STC_EnterScene::pt() const {
  return pt_ != NULL ? *pt_ : *default_instance_->pt_;
}
inline ::proto::message::Point3D* Login_STC_EnterScene::mutable_pt() {
  set_has_pt();
  if (pt_ == NULL) pt_ = new ::proto::message::Point3D;
  return pt_;
}
inline ::proto::message::Point3D* Login_STC_EnterScene::release_pt() {
  clear_has_pt();
  ::proto::message::Point3D* temp = pt_;
  pt_ = NULL;
  return temp;
}
inline void Login_STC_EnterScene::set_allocated_pt(::proto::message::Point3D* pt) {
  delete pt_;
  pt_ = pt;
  if (pt) {
    set_has_pt();
  } else {
    clear_has_pt();
  }
}

// required float dir = 3;
inline bool Login_STC_EnterScene::has_dir() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Login_STC_EnterScene::set_has_dir() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Login_STC_EnterScene::clear_has_dir() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Login_STC_EnterScene::clear_dir() {
  dir_ = 0;
  clear_has_dir();
}
inline float Login_STC_EnterScene::dir() const {
  return dir_;
}
inline void Login_STC_EnterScene::set_dir(float value) {
  set_has_dir();
  dir_ = value;
}

// optional int32 layer = 4;
inline bool Login_STC_EnterScene::has_layer() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Login_STC_EnterScene::set_has_layer() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Login_STC_EnterScene::clear_has_layer() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Login_STC_EnterScene::clear_layer() {
  layer_ = 0;
  clear_has_layer();
}
inline ::google::protobuf::int32 Login_STC_EnterScene::layer() const {
  return layer_;
}
inline void Login_STC_EnterScene::set_layer(::google::protobuf::int32 value) {
  set_has_layer();
  layer_ = value;
}

// optional string ip = 5;
inline bool Login_STC_EnterScene::has_ip() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Login_STC_EnterScene::set_has_ip() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Login_STC_EnterScene::clear_has_ip() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Login_STC_EnterScene::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& Login_STC_EnterScene::ip() const {
  return *ip_;
}
inline void Login_STC_EnterScene::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void Login_STC_EnterScene::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void Login_STC_EnterScene::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Login_STC_EnterScene::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* Login_STC_EnterScene::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Login_STC_EnterScene::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 port = 6;
inline bool Login_STC_EnterScene::has_port() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Login_STC_EnterScene::set_has_port() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Login_STC_EnterScene::clear_has_port() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Login_STC_EnterScene::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 Login_STC_EnterScene::port() const {
  return port_;
}
inline void Login_STC_EnterScene::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
}

// -------------------------------------------------------------------

// player_sync_data

// required int32 sex = 1;
inline bool player_sync_data::has_sex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void player_sync_data::set_has_sex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void player_sync_data::clear_has_sex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void player_sync_data::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
inline ::google::protobuf::int32 player_sync_data::sex() const {
  return sex_;
}
inline void player_sync_data::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
}

// required int32 weapon = 2;
inline bool player_sync_data::has_weapon() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void player_sync_data::set_has_weapon() {
  _has_bits_[0] |= 0x00000002u;
}
inline void player_sync_data::clear_has_weapon() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void player_sync_data::clear_weapon() {
  weapon_ = 0;
  clear_has_weapon();
}
inline ::google::protobuf::int32 player_sync_data::weapon() const {
  return weapon_;
}
inline void player_sync_data::set_weapon(::google::protobuf::int32 value) {
  set_has_weapon();
  weapon_ = value;
}

// required string CharName = 3;
inline bool player_sync_data::has_charname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void player_sync_data::set_has_charname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void player_sync_data::clear_has_charname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void player_sync_data::clear_charname() {
  if (charname_ != &::google::protobuf::internal::kEmptyString) {
    charname_->clear();
  }
  clear_has_charname();
}
inline const ::std::string& player_sync_data::charname() const {
  return *charname_;
}
inline void player_sync_data::set_charname(const ::std::string& value) {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    charname_ = new ::std::string;
  }
  charname_->assign(value);
}
inline void player_sync_data::set_charname(const char* value) {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    charname_ = new ::std::string;
  }
  charname_->assign(value);
}
inline void player_sync_data::set_charname(const char* value, size_t size) {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    charname_ = new ::std::string;
  }
  charname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* player_sync_data::mutable_charname() {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    charname_ = new ::std::string;
  }
  return charname_;
}
inline ::std::string* player_sync_data::release_charname() {
  clear_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = charname_;
    charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void player_sync_data::set_allocated_charname(::std::string* charname) {
  if (charname_ != &::google::protobuf::internal::kEmptyString) {
    delete charname_;
  }
  if (charname) {
    set_has_charname();
    charname_ = charname;
  } else {
    clear_has_charname();
    charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Login_STC_Sync_Self

// repeated .proto.message.player_sync_data otherData = 1;
inline int Login_STC_Sync_Self::otherdata_size() const {
  return otherdata_.size();
}
inline void Login_STC_Sync_Self::clear_otherdata() {
  otherdata_.Clear();
}
inline const ::proto::message::player_sync_data& Login_STC_Sync_Self::otherdata(int index) const {
  return otherdata_.Get(index);
}
inline ::proto::message::player_sync_data* Login_STC_Sync_Self::mutable_otherdata(int index) {
  return otherdata_.Mutable(index);
}
inline ::proto::message::player_sync_data* Login_STC_Sync_Self::add_otherdata() {
  return otherdata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::message::player_sync_data >&
Login_STC_Sync_Self::otherdata() const {
  return otherdata_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::message::player_sync_data >*
Login_STC_Sync_Self::mutable_otherdata() {
  return &otherdata_;
}

// -------------------------------------------------------------------

// Login_STC_Sync_Other

// required .proto.message.player_sync_data LoginData = 2;
inline bool Login_STC_Sync_Other::has_logindata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Login_STC_Sync_Other::set_has_logindata() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Login_STC_Sync_Other::clear_has_logindata() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Login_STC_Sync_Other::clear_logindata() {
  if (logindata_ != NULL) logindata_->::proto::message::player_sync_data::Clear();
  clear_has_logindata();
}
inline const ::proto::message::player_sync_data& Login_STC_Sync_Other::logindata() const {
  return logindata_ != NULL ? *logindata_ : *default_instance_->logindata_;
}
inline ::proto::message::player_sync_data* Login_STC_Sync_Other::mutable_logindata() {
  set_has_logindata();
  if (logindata_ == NULL) logindata_ = new ::proto::message::player_sync_data;
  return logindata_;
}
inline ::proto::message::player_sync_data* Login_STC_Sync_Other::release_logindata() {
  clear_has_logindata();
  ::proto::message::player_sync_data* temp = logindata_;
  logindata_ = NULL;
  return temp;
}
inline void Login_STC_Sync_Other::set_allocated_logindata(::proto::message::player_sync_data* logindata) {
  delete logindata_;
  logindata_ = logindata;
  if (logindata) {
    set_has_logindata();
  } else {
    clear_has_logindata();
  }
}

// -------------------------------------------------------------------

// Login_STC_AnotherLogin

// -------------------------------------------------------------------

// Login_STC_ClientLoadOK

// required int32 Branch = 1;
inline bool Login_STC_ClientLoadOK::has_branch() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Login_STC_ClientLoadOK::set_has_branch() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Login_STC_ClientLoadOK::clear_has_branch() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Login_STC_ClientLoadOK::clear_branch() {
  branch_ = 0;
  clear_has_branch();
}
inline ::google::protobuf::int32 Login_STC_ClientLoadOK::branch() const {
  return branch_;
}
inline void Login_STC_ClientLoadOK::set_branch(::google::protobuf::int32 value) {
  set_has_branch();
  branch_ = value;
}

// -------------------------------------------------------------------

// Login_CS_ChangePlayerName

// required string charname = 1;
inline bool Login_CS_ChangePlayerName::has_charname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Login_CS_ChangePlayerName::set_has_charname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Login_CS_ChangePlayerName::clear_has_charname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Login_CS_ChangePlayerName::clear_charname() {
  if (charname_ != &::google::protobuf::internal::kEmptyString) {
    charname_->clear();
  }
  clear_has_charname();
}
inline const ::std::string& Login_CS_ChangePlayerName::charname() const {
  return *charname_;
}
inline void Login_CS_ChangePlayerName::set_charname(const ::std::string& value) {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    charname_ = new ::std::string;
  }
  charname_->assign(value);
}
inline void Login_CS_ChangePlayerName::set_charname(const char* value) {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    charname_ = new ::std::string;
  }
  charname_->assign(value);
}
inline void Login_CS_ChangePlayerName::set_charname(const char* value, size_t size) {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    charname_ = new ::std::string;
  }
  charname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Login_CS_ChangePlayerName::mutable_charname() {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    charname_ = new ::std::string;
  }
  return charname_;
}
inline ::std::string* Login_CS_ChangePlayerName::release_charname() {
  clear_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = charname_;
    charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Login_CS_ChangePlayerName::set_allocated_charname(::std::string* charname) {
  if (charname_ != &::google::protobuf::internal::kEmptyString) {
    delete charname_;
  }
  if (charname) {
    set_has_charname();
    charname_ = charname;
  } else {
    clear_has_charname();
    charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Login_STC_ChangePlayerName

// required int32 rt = 1;
inline bool Login_STC_ChangePlayerName::has_rt() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Login_STC_ChangePlayerName::set_has_rt() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Login_STC_ChangePlayerName::clear_has_rt() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Login_STC_ChangePlayerName::clear_rt() {
  rt_ = 0;
  clear_has_rt();
}
inline ::google::protobuf::int32 Login_STC_ChangePlayerName::rt() const {
  return rt_;
}
inline void Login_STC_ChangePlayerName::set_rt(::google::protobuf::int32 value) {
  set_has_rt();
  rt_ = value;
}

// optional string charname = 2;
inline bool Login_STC_ChangePlayerName::has_charname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Login_STC_ChangePlayerName::set_has_charname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Login_STC_ChangePlayerName::clear_has_charname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Login_STC_ChangePlayerName::clear_charname() {
  if (charname_ != &::google::protobuf::internal::kEmptyString) {
    charname_->clear();
  }
  clear_has_charname();
}
inline const ::std::string& Login_STC_ChangePlayerName::charname() const {
  return *charname_;
}
inline void Login_STC_ChangePlayerName::set_charname(const ::std::string& value) {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    charname_ = new ::std::string;
  }
  charname_->assign(value);
}
inline void Login_STC_ChangePlayerName::set_charname(const char* value) {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    charname_ = new ::std::string;
  }
  charname_->assign(value);
}
inline void Login_STC_ChangePlayerName::set_charname(const char* value, size_t size) {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    charname_ = new ::std::string;
  }
  charname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Login_STC_ChangePlayerName::mutable_charname() {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    charname_ = new ::std::string;
  }
  return charname_;
}
inline ::std::string* Login_STC_ChangePlayerName::release_charname() {
  clear_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = charname_;
    charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Login_STC_ChangePlayerName::set_allocated_charname(::std::string* charname) {
  if (charname_ != &::google::protobuf::internal::kEmptyString) {
    delete charname_;
  }
  if (charname) {
    set_has_charname();
    charname_ = charname;
  } else {
    clear_has_charname();
    charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Login_STC_NotifyActivity

// optional string ActivityHost = 1;
inline bool Login_STC_NotifyActivity::has_activityhost() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Login_STC_NotifyActivity::set_has_activityhost() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Login_STC_NotifyActivity::clear_has_activityhost() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Login_STC_NotifyActivity::clear_activityhost() {
  if (activityhost_ != &::google::protobuf::internal::kEmptyString) {
    activityhost_->clear();
  }
  clear_has_activityhost();
}
inline const ::std::string& Login_STC_NotifyActivity::activityhost() const {
  return *activityhost_;
}
inline void Login_STC_NotifyActivity::set_activityhost(const ::std::string& value) {
  set_has_activityhost();
  if (activityhost_ == &::google::protobuf::internal::kEmptyString) {
    activityhost_ = new ::std::string;
  }
  activityhost_->assign(value);
}
inline void Login_STC_NotifyActivity::set_activityhost(const char* value) {
  set_has_activityhost();
  if (activityhost_ == &::google::protobuf::internal::kEmptyString) {
    activityhost_ = new ::std::string;
  }
  activityhost_->assign(value);
}
inline void Login_STC_NotifyActivity::set_activityhost(const char* value, size_t size) {
  set_has_activityhost();
  if (activityhost_ == &::google::protobuf::internal::kEmptyString) {
    activityhost_ = new ::std::string;
  }
  activityhost_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Login_STC_NotifyActivity::mutable_activityhost() {
  set_has_activityhost();
  if (activityhost_ == &::google::protobuf::internal::kEmptyString) {
    activityhost_ = new ::std::string;
  }
  return activityhost_;
}
inline ::std::string* Login_STC_NotifyActivity::release_activityhost() {
  clear_has_activityhost();
  if (activityhost_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = activityhost_;
    activityhost_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Login_STC_NotifyActivity::set_allocated_activityhost(::std::string* activityhost) {
  if (activityhost_ != &::google::protobuf::internal::kEmptyString) {
    delete activityhost_;
  }
  if (activityhost) {
    set_has_activityhost();
    activityhost_ = activityhost;
  } else {
    clear_has_activityhost();
    activityhost_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string ActivityPath = 2;
inline bool Login_STC_NotifyActivity::has_activitypath() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Login_STC_NotifyActivity::set_has_activitypath() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Login_STC_NotifyActivity::clear_has_activitypath() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Login_STC_NotifyActivity::clear_activitypath() {
  if (activitypath_ != &::google::protobuf::internal::kEmptyString) {
    activitypath_->clear();
  }
  clear_has_activitypath();
}
inline const ::std::string& Login_STC_NotifyActivity::activitypath() const {
  return *activitypath_;
}
inline void Login_STC_NotifyActivity::set_activitypath(const ::std::string& value) {
  set_has_activitypath();
  if (activitypath_ == &::google::protobuf::internal::kEmptyString) {
    activitypath_ = new ::std::string;
  }
  activitypath_->assign(value);
}
inline void Login_STC_NotifyActivity::set_activitypath(const char* value) {
  set_has_activitypath();
  if (activitypath_ == &::google::protobuf::internal::kEmptyString) {
    activitypath_ = new ::std::string;
  }
  activitypath_->assign(value);
}
inline void Login_STC_NotifyActivity::set_activitypath(const char* value, size_t size) {
  set_has_activitypath();
  if (activitypath_ == &::google::protobuf::internal::kEmptyString) {
    activitypath_ = new ::std::string;
  }
  activitypath_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Login_STC_NotifyActivity::mutable_activitypath() {
  set_has_activitypath();
  if (activitypath_ == &::google::protobuf::internal::kEmptyString) {
    activitypath_ = new ::std::string;
  }
  return activitypath_;
}
inline ::std::string* Login_STC_NotifyActivity::release_activitypath() {
  clear_has_activitypath();
  if (activitypath_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = activitypath_;
    activitypath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Login_STC_NotifyActivity::set_allocated_activitypath(::std::string* activitypath) {
  if (activitypath_ != &::google::protobuf::internal::kEmptyString) {
    delete activitypath_;
  }
  if (activitypath) {
    set_has_activitypath();
    activitypath_ = activitypath;
  } else {
    clear_has_activitypath();
    activitypath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace proto

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_login_2eproto__INCLUDED
