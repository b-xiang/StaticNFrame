// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chat.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "chat.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace message {

namespace {

const ::google::protobuf::Descriptor* ChatPlayerData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatPlayerData_reflection_ = NULL;
const ::google::protobuf::Descriptor* Chat_CTS_PrivateChat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Chat_CTS_PrivateChat_reflection_ = NULL;
const ::google::protobuf::Descriptor* Chat_CTS_Chat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Chat_CTS_Chat_reflection_ = NULL;
const ::google::protobuf::Descriptor* Chat_STC_Chat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Chat_STC_Chat_reflection_ = NULL;
const ::google::protobuf::Descriptor* Chat_STC_UpdateChatMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Chat_STC_UpdateChatMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* Chat_STC_GuildPublic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Chat_STC_GuildPublic_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_chat_2eproto() {
  protobuf_AddDesc_chat_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "chat.proto");
  GOOGLE_CHECK(file != NULL);
  ChatPlayerData_descriptor_ = file->message_type(0);
  static const int ChatPlayerData_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatPlayerData, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatPlayerData, link_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatPlayerData, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatPlayerData, weapon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatPlayerData, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatPlayerData, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatPlayerData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatPlayerData, guildid_),
  };
  ChatPlayerData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChatPlayerData_descriptor_,
      ChatPlayerData::default_instance_,
      ChatPlayerData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatPlayerData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatPlayerData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChatPlayerData));
  Chat_CTS_PrivateChat_descriptor_ = file->message_type(1);
  static const int Chat_CTS_PrivateChat_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chat_CTS_PrivateChat, tocharid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chat_CTS_PrivateChat, contenttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chat_CTS_PrivateChat, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chat_CTS_PrivateChat, appendcontent_),
  };
  Chat_CTS_PrivateChat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Chat_CTS_PrivateChat_descriptor_,
      Chat_CTS_PrivateChat::default_instance_,
      Chat_CTS_PrivateChat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chat_CTS_PrivateChat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chat_CTS_PrivateChat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Chat_CTS_PrivateChat));
  Chat_CTS_Chat_descriptor_ = file->message_type(2);
  static const int Chat_CTS_Chat_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chat_CTS_Chat, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chat_CTS_Chat, contenttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chat_CTS_Chat, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chat_CTS_Chat, appendcontent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chat_CTS_Chat, voicetime_),
  };
  Chat_CTS_Chat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Chat_CTS_Chat_descriptor_,
      Chat_CTS_Chat::default_instance_,
      Chat_CTS_Chat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chat_CTS_Chat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chat_CTS_Chat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Chat_CTS_Chat));
  Chat_STC_Chat_descriptor_ = file->message_type(3);
  static const int Chat_STC_Chat_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chat_STC_Chat, result_),
  };
  Chat_STC_Chat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Chat_STC_Chat_descriptor_,
      Chat_STC_Chat::default_instance_,
      Chat_STC_Chat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chat_STC_Chat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chat_STC_Chat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Chat_STC_Chat));
  Chat_STC_UpdateChatMsg_descriptor_ = file->message_type(4);
  static const int Chat_STC_UpdateChatMsg_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chat_STC_UpdateChatMsg, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chat_STC_UpdateChatMsg, fromcharid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chat_STC_UpdateChatMsg, weapon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chat_STC_UpdateChatMsg, viplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chat_STC_UpdateChatMsg, charname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chat_STC_UpdateChatMsg, contenttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chat_STC_UpdateChatMsg, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chat_STC_UpdateChatMsg, voicetime_),
  };
  Chat_STC_UpdateChatMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Chat_STC_UpdateChatMsg_descriptor_,
      Chat_STC_UpdateChatMsg::default_instance_,
      Chat_STC_UpdateChatMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chat_STC_UpdateChatMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chat_STC_UpdateChatMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Chat_STC_UpdateChatMsg));
  GuildMessage_descriptor_ = file->message_type(5);
  static const int GuildMessage_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMessage, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMessage, contextid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMessage, contextpar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMessage, isall_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMessage, playeridlist_),
  };
  GuildMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMessage_descriptor_,
      GuildMessage::default_instance_,
      GuildMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMessage));
  Chat_STC_GuildPublic_descriptor_ = file->message_type(6);
  static const int Chat_STC_GuildPublic_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chat_STC_GuildPublic, contextid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chat_STC_GuildPublic, contextpar_),
  };
  Chat_STC_GuildPublic_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Chat_STC_GuildPublic_descriptor_,
      Chat_STC_GuildPublic::default_instance_,
      Chat_STC_GuildPublic_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chat_STC_GuildPublic, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chat_STC_GuildPublic, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Chat_STC_GuildPublic));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_chat_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChatPlayerData_descriptor_, &ChatPlayerData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Chat_CTS_PrivateChat_descriptor_, &Chat_CTS_PrivateChat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Chat_CTS_Chat_descriptor_, &Chat_CTS_Chat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Chat_STC_Chat_descriptor_, &Chat_STC_Chat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Chat_STC_UpdateChatMsg_descriptor_, &Chat_STC_UpdateChatMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMessage_descriptor_, &GuildMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Chat_STC_GuildPublic_descriptor_, &Chat_STC_GuildPublic::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_chat_2eproto() {
  delete ChatPlayerData::default_instance_;
  delete ChatPlayerData_reflection_;
  delete Chat_CTS_PrivateChat::default_instance_;
  delete Chat_CTS_PrivateChat_reflection_;
  delete Chat_CTS_Chat::default_instance_;
  delete Chat_CTS_Chat_reflection_;
  delete Chat_STC_Chat::default_instance_;
  delete Chat_STC_Chat_reflection_;
  delete Chat_STC_UpdateChatMsg::default_instance_;
  delete Chat_STC_UpdateChatMsg_reflection_;
  delete GuildMessage::default_instance_;
  delete GuildMessage_reflection_;
  delete Chat_STC_GuildPublic::default_instance_;
  delete Chat_STC_GuildPublic_reflection_;
}

void protobuf_AddDesc_chat_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nchat.proto\022\rproto.message\"\215\001\n\016ChatPlay"
    "erData\022\020\n\010playerid\030\001 \002(\004\022\014\n\004link\030\002 \002(\r\022\r"
    "\n\005level\030\003 \002(\r\022\016\n\006weapon\030\004 \002(\r\022\r\n\005mapid\030\005"
    " \002(\r\022\016\n\006charid\030\006 \002(\004\022\014\n\004name\030\007 \002(\t\022\017\n\007gu"
    "ildid\030\010 \002(\004\"e\n\024Chat_CTS_PrivateChat\022\020\n\010t"
    "oCharId\030\001 \002(\004\022\023\n\013contentType\030\002 \002(\005\022\017\n\007co"
    "ntent\030\003 \002(\t\022\025\n\rappendContent\030\004 \001(\t\"p\n\rCh"
    "at_CTS_Chat\022\017\n\007channel\030\001 \002(\005\022\023\n\013contentT"
    "ype\030\002 \002(\005\022\017\n\007content\030\003 \002(\t\022\025\n\rappendCont"
    "ent\030\004 \001(\t\022\021\n\tvoiceTime\030\005 \001(\005\"\037\n\rChat_STC"
    "_Chat\022\016\n\006result\030\001 \002(\005\"\252\001\n\026Chat_STC_Updat"
    "eChatMsg\022\017\n\007channel\030\001 \002(\005\022\022\n\nfromCharId\030"
    "\002 \002(\004\022\016\n\006weapon\030\003 \002(\005\022\020\n\010vipLevel\030\004 \002(\005\022"
    "\020\n\010charName\030\005 \002(\t\022\023\n\013contentType\030\006 \002(\005\022\017"
    "\n\007content\030\007 \002(\t\022\021\n\tvoiceTime\030\010 \001(\005\"k\n\014Gu"
    "ildMessage\022\017\n\007guildid\030\001 \002(\004\022\021\n\tcontextid"
    "\030\002 \002(\r\022\022\n\ncontextpar\030\003 \002(\t\022\r\n\005isall\030\004 \002("
    "\010\022\024\n\014playeridlist\030\005 \003(\004\"=\n\024Chat_STC_Guil"
    "dPublic\022\021\n\tcontextid\030\001 \002(\r\022\022\n\ncontextpar"
    "\030\002 \002(\tB\017\n\rproto.message", 783);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "chat.proto", &protobuf_RegisterTypes);
  ChatPlayerData::default_instance_ = new ChatPlayerData();
  Chat_CTS_PrivateChat::default_instance_ = new Chat_CTS_PrivateChat();
  Chat_CTS_Chat::default_instance_ = new Chat_CTS_Chat();
  Chat_STC_Chat::default_instance_ = new Chat_STC_Chat();
  Chat_STC_UpdateChatMsg::default_instance_ = new Chat_STC_UpdateChatMsg();
  GuildMessage::default_instance_ = new GuildMessage();
  Chat_STC_GuildPublic::default_instance_ = new Chat_STC_GuildPublic();
  ChatPlayerData::default_instance_->InitAsDefaultInstance();
  Chat_CTS_PrivateChat::default_instance_->InitAsDefaultInstance();
  Chat_CTS_Chat::default_instance_->InitAsDefaultInstance();
  Chat_STC_Chat::default_instance_->InitAsDefaultInstance();
  Chat_STC_UpdateChatMsg::default_instance_->InitAsDefaultInstance();
  GuildMessage::default_instance_->InitAsDefaultInstance();
  Chat_STC_GuildPublic::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_chat_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_chat_2eproto {
  StaticDescriptorInitializer_chat_2eproto() {
    protobuf_AddDesc_chat_2eproto();
  }
} static_descriptor_initializer_chat_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ChatPlayerData::kPlayeridFieldNumber;
const int ChatPlayerData::kLinkFieldNumber;
const int ChatPlayerData::kLevelFieldNumber;
const int ChatPlayerData::kWeaponFieldNumber;
const int ChatPlayerData::kMapidFieldNumber;
const int ChatPlayerData::kCharidFieldNumber;
const int ChatPlayerData::kNameFieldNumber;
const int ChatPlayerData::kGuildidFieldNumber;
#endif  // !_MSC_VER

ChatPlayerData::ChatPlayerData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChatPlayerData::InitAsDefaultInstance() {
}

ChatPlayerData::ChatPlayerData(const ChatPlayerData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChatPlayerData::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_ULONGLONG(0);
  link_ = 0u;
  level_ = 0u;
  weapon_ = 0u;
  mapid_ = 0u;
  charid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  guildid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatPlayerData::~ChatPlayerData() {
  SharedDtor();
}

void ChatPlayerData::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ChatPlayerData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatPlayerData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatPlayerData_descriptor_;
}

const ChatPlayerData& ChatPlayerData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chat_2eproto();
  return *default_instance_;
}

ChatPlayerData* ChatPlayerData::default_instance_ = NULL;

ChatPlayerData* ChatPlayerData::New() const {
  return new ChatPlayerData;
}

void ChatPlayerData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = GOOGLE_ULONGLONG(0);
    link_ = 0u;
    level_ = 0u;
    weapon_ = 0u;
    mapid_ = 0u;
    charid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    guildid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChatPlayerData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_link;
        break;
      }

      // required uint32 link = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_link:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &link_)));
          set_has_link();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // required uint32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_weapon;
        break;
      }

      // required uint32 weapon = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weapon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weapon_)));
          set_has_weapon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_mapid;
        break;
      }

      // required uint32 mapid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_charid;
        break;
      }

      // required uint64 charid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_name;
        break;
      }

      // required string name = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_guildid;
        break;
      }

      // required uint64 guildid = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guildid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChatPlayerData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->playerid(), output);
  }

  // required uint32 link = 2;
  if (has_link()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->link(), output);
  }

  // required uint32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level(), output);
  }

  // required uint32 weapon = 4;
  if (has_weapon()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->weapon(), output);
  }

  // required uint32 mapid = 5;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->mapid(), output);
  }

  // required uint64 charid = 6;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->charid(), output);
  }

  // required string name = 7;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->name(), output);
  }

  // required uint64 guildid = 8;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->guildid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChatPlayerData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->playerid(), target);
  }

  // required uint32 link = 2;
  if (has_link()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->link(), target);
  }

  // required uint32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->level(), target);
  }

  // required uint32 weapon = 4;
  if (has_weapon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->weapon(), target);
  }

  // required uint32 mapid = 5;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->mapid(), target);
  }

  // required uint64 charid = 6;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->charid(), target);
  }

  // required string name = 7;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->name(), target);
  }

  // required uint64 guildid = 8;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->guildid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChatPlayerData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerid());
    }

    // required uint32 link = 2;
    if (has_link()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->link());
    }

    // required uint32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required uint32 weapon = 4;
    if (has_weapon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weapon());
    }

    // required uint32 mapid = 5;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }

    // required uint64 charid = 6;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // required string name = 7;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required uint64 guildid = 8;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatPlayerData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChatPlayerData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChatPlayerData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChatPlayerData::MergeFrom(const ChatPlayerData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_link()) {
      set_link(from.link());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_weapon()) {
      set_weapon(from.weapon());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChatPlayerData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatPlayerData::CopyFrom(const ChatPlayerData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatPlayerData::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void ChatPlayerData::Swap(ChatPlayerData* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(link_, other->link_);
    std::swap(level_, other->level_);
    std::swap(weapon_, other->weapon_);
    std::swap(mapid_, other->mapid_);
    std::swap(charid_, other->charid_);
    std::swap(name_, other->name_);
    std::swap(guildid_, other->guildid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChatPlayerData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatPlayerData_descriptor_;
  metadata.reflection = ChatPlayerData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Chat_CTS_PrivateChat::kToCharIdFieldNumber;
const int Chat_CTS_PrivateChat::kContentTypeFieldNumber;
const int Chat_CTS_PrivateChat::kContentFieldNumber;
const int Chat_CTS_PrivateChat::kAppendContentFieldNumber;
#endif  // !_MSC_VER

Chat_CTS_PrivateChat::Chat_CTS_PrivateChat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Chat_CTS_PrivateChat::InitAsDefaultInstance() {
}

Chat_CTS_PrivateChat::Chat_CTS_PrivateChat(const Chat_CTS_PrivateChat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Chat_CTS_PrivateChat::SharedCtor() {
  _cached_size_ = 0;
  tocharid_ = GOOGLE_ULONGLONG(0);
  contenttype_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  appendcontent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Chat_CTS_PrivateChat::~Chat_CTS_PrivateChat() {
  SharedDtor();
}

void Chat_CTS_PrivateChat::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (appendcontent_ != &::google::protobuf::internal::kEmptyString) {
    delete appendcontent_;
  }
  if (this != default_instance_) {
  }
}

void Chat_CTS_PrivateChat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Chat_CTS_PrivateChat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Chat_CTS_PrivateChat_descriptor_;
}

const Chat_CTS_PrivateChat& Chat_CTS_PrivateChat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chat_2eproto();
  return *default_instance_;
}

Chat_CTS_PrivateChat* Chat_CTS_PrivateChat::default_instance_ = NULL;

Chat_CTS_PrivateChat* Chat_CTS_PrivateChat::New() const {
  return new Chat_CTS_PrivateChat;
}

void Chat_CTS_PrivateChat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tocharid_ = GOOGLE_ULONGLONG(0);
    contenttype_ = 0;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    if (has_appendcontent()) {
      if (appendcontent_ != &::google::protobuf::internal::kEmptyString) {
        appendcontent_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Chat_CTS_PrivateChat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 toCharId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tocharid_)));
          set_has_tocharid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_contentType;
        break;
      }

      // required int32 contentType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_contentType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &contenttype_)));
          set_has_contenttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_content;
        break;
      }

      // required string content = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_appendContent;
        break;
      }

      // optional string appendContent = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_appendContent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_appendcontent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->appendcontent().data(), this->appendcontent().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Chat_CTS_PrivateChat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 toCharId = 1;
  if (has_tocharid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->tocharid(), output);
  }

  // required int32 contentType = 2;
  if (has_contenttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->contenttype(), output);
  }

  // required string content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->content(), output);
  }

  // optional string appendContent = 4;
  if (has_appendcontent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->appendcontent().data(), this->appendcontent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->appendcontent(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Chat_CTS_PrivateChat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 toCharId = 1;
  if (has_tocharid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->tocharid(), target);
  }

  // required int32 contentType = 2;
  if (has_contenttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->contenttype(), target);
  }

  // required string content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->content(), target);
  }

  // optional string appendContent = 4;
  if (has_appendcontent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->appendcontent().data(), this->appendcontent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->appendcontent(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Chat_CTS_PrivateChat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 toCharId = 1;
    if (has_tocharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tocharid());
    }

    // required int32 contentType = 2;
    if (has_contenttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->contenttype());
    }

    // required string content = 3;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional string appendContent = 4;
    if (has_appendcontent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->appendcontent());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Chat_CTS_PrivateChat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Chat_CTS_PrivateChat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Chat_CTS_PrivateChat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Chat_CTS_PrivateChat::MergeFrom(const Chat_CTS_PrivateChat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tocharid()) {
      set_tocharid(from.tocharid());
    }
    if (from.has_contenttype()) {
      set_contenttype(from.contenttype());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_appendcontent()) {
      set_appendcontent(from.appendcontent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Chat_CTS_PrivateChat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Chat_CTS_PrivateChat::CopyFrom(const Chat_CTS_PrivateChat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Chat_CTS_PrivateChat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Chat_CTS_PrivateChat::Swap(Chat_CTS_PrivateChat* other) {
  if (other != this) {
    std::swap(tocharid_, other->tocharid_);
    std::swap(contenttype_, other->contenttype_);
    std::swap(content_, other->content_);
    std::swap(appendcontent_, other->appendcontent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Chat_CTS_PrivateChat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Chat_CTS_PrivateChat_descriptor_;
  metadata.reflection = Chat_CTS_PrivateChat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Chat_CTS_Chat::kChannelFieldNumber;
const int Chat_CTS_Chat::kContentTypeFieldNumber;
const int Chat_CTS_Chat::kContentFieldNumber;
const int Chat_CTS_Chat::kAppendContentFieldNumber;
const int Chat_CTS_Chat::kVoiceTimeFieldNumber;
#endif  // !_MSC_VER

Chat_CTS_Chat::Chat_CTS_Chat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Chat_CTS_Chat::InitAsDefaultInstance() {
}

Chat_CTS_Chat::Chat_CTS_Chat(const Chat_CTS_Chat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Chat_CTS_Chat::SharedCtor() {
  _cached_size_ = 0;
  channel_ = 0;
  contenttype_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  appendcontent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  voicetime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Chat_CTS_Chat::~Chat_CTS_Chat() {
  SharedDtor();
}

void Chat_CTS_Chat::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (appendcontent_ != &::google::protobuf::internal::kEmptyString) {
    delete appendcontent_;
  }
  if (this != default_instance_) {
  }
}

void Chat_CTS_Chat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Chat_CTS_Chat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Chat_CTS_Chat_descriptor_;
}

const Chat_CTS_Chat& Chat_CTS_Chat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chat_2eproto();
  return *default_instance_;
}

Chat_CTS_Chat* Chat_CTS_Chat::default_instance_ = NULL;

Chat_CTS_Chat* Chat_CTS_Chat::New() const {
  return new Chat_CTS_Chat;
}

void Chat_CTS_Chat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    channel_ = 0;
    contenttype_ = 0;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    if (has_appendcontent()) {
      if (appendcontent_ != &::google::protobuf::internal::kEmptyString) {
        appendcontent_->clear();
      }
    }
    voicetime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Chat_CTS_Chat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 channel = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_contentType;
        break;
      }

      // required int32 contentType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_contentType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &contenttype_)));
          set_has_contenttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_content;
        break;
      }

      // required string content = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_appendContent;
        break;
      }

      // optional string appendContent = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_appendContent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_appendcontent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->appendcontent().data(), this->appendcontent().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_voiceTime;
        break;
      }

      // optional int32 voiceTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_voiceTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &voicetime_)));
          set_has_voicetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Chat_CTS_Chat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 channel = 1;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->channel(), output);
  }

  // required int32 contentType = 2;
  if (has_contenttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->contenttype(), output);
  }

  // required string content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->content(), output);
  }

  // optional string appendContent = 4;
  if (has_appendcontent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->appendcontent().data(), this->appendcontent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->appendcontent(), output);
  }

  // optional int32 voiceTime = 5;
  if (has_voicetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->voicetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Chat_CTS_Chat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 channel = 1;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->channel(), target);
  }

  // required int32 contentType = 2;
  if (has_contenttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->contenttype(), target);
  }

  // required string content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->content(), target);
  }

  // optional string appendContent = 4;
  if (has_appendcontent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->appendcontent().data(), this->appendcontent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->appendcontent(), target);
  }

  // optional int32 voiceTime = 5;
  if (has_voicetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->voicetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Chat_CTS_Chat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 channel = 1;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channel());
    }

    // required int32 contentType = 2;
    if (has_contenttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->contenttype());
    }

    // required string content = 3;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional string appendContent = 4;
    if (has_appendcontent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->appendcontent());
    }

    // optional int32 voiceTime = 5;
    if (has_voicetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->voicetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Chat_CTS_Chat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Chat_CTS_Chat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Chat_CTS_Chat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Chat_CTS_Chat::MergeFrom(const Chat_CTS_Chat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_contenttype()) {
      set_contenttype(from.contenttype());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_appendcontent()) {
      set_appendcontent(from.appendcontent());
    }
    if (from.has_voicetime()) {
      set_voicetime(from.voicetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Chat_CTS_Chat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Chat_CTS_Chat::CopyFrom(const Chat_CTS_Chat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Chat_CTS_Chat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Chat_CTS_Chat::Swap(Chat_CTS_Chat* other) {
  if (other != this) {
    std::swap(channel_, other->channel_);
    std::swap(contenttype_, other->contenttype_);
    std::swap(content_, other->content_);
    std::swap(appendcontent_, other->appendcontent_);
    std::swap(voicetime_, other->voicetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Chat_CTS_Chat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Chat_CTS_Chat_descriptor_;
  metadata.reflection = Chat_CTS_Chat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Chat_STC_Chat::kResultFieldNumber;
#endif  // !_MSC_VER

Chat_STC_Chat::Chat_STC_Chat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Chat_STC_Chat::InitAsDefaultInstance() {
}

Chat_STC_Chat::Chat_STC_Chat(const Chat_STC_Chat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Chat_STC_Chat::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Chat_STC_Chat::~Chat_STC_Chat() {
  SharedDtor();
}

void Chat_STC_Chat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Chat_STC_Chat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Chat_STC_Chat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Chat_STC_Chat_descriptor_;
}

const Chat_STC_Chat& Chat_STC_Chat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chat_2eproto();
  return *default_instance_;
}

Chat_STC_Chat* Chat_STC_Chat::default_instance_ = NULL;

Chat_STC_Chat* Chat_STC_Chat::New() const {
  return new Chat_STC_Chat;
}

void Chat_STC_Chat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Chat_STC_Chat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Chat_STC_Chat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Chat_STC_Chat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Chat_STC_Chat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Chat_STC_Chat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Chat_STC_Chat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Chat_STC_Chat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Chat_STC_Chat::MergeFrom(const Chat_STC_Chat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Chat_STC_Chat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Chat_STC_Chat::CopyFrom(const Chat_STC_Chat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Chat_STC_Chat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Chat_STC_Chat::Swap(Chat_STC_Chat* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Chat_STC_Chat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Chat_STC_Chat_descriptor_;
  metadata.reflection = Chat_STC_Chat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Chat_STC_UpdateChatMsg::kChannelFieldNumber;
const int Chat_STC_UpdateChatMsg::kFromCharIdFieldNumber;
const int Chat_STC_UpdateChatMsg::kWeaponFieldNumber;
const int Chat_STC_UpdateChatMsg::kVipLevelFieldNumber;
const int Chat_STC_UpdateChatMsg::kCharNameFieldNumber;
const int Chat_STC_UpdateChatMsg::kContentTypeFieldNumber;
const int Chat_STC_UpdateChatMsg::kContentFieldNumber;
const int Chat_STC_UpdateChatMsg::kVoiceTimeFieldNumber;
#endif  // !_MSC_VER

Chat_STC_UpdateChatMsg::Chat_STC_UpdateChatMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Chat_STC_UpdateChatMsg::InitAsDefaultInstance() {
}

Chat_STC_UpdateChatMsg::Chat_STC_UpdateChatMsg(const Chat_STC_UpdateChatMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Chat_STC_UpdateChatMsg::SharedCtor() {
  _cached_size_ = 0;
  channel_ = 0;
  fromcharid_ = GOOGLE_ULONGLONG(0);
  weapon_ = 0;
  viplevel_ = 0;
  charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  contenttype_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  voicetime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Chat_STC_UpdateChatMsg::~Chat_STC_UpdateChatMsg() {
  SharedDtor();
}

void Chat_STC_UpdateChatMsg::SharedDtor() {
  if (charname_ != &::google::protobuf::internal::kEmptyString) {
    delete charname_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void Chat_STC_UpdateChatMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Chat_STC_UpdateChatMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Chat_STC_UpdateChatMsg_descriptor_;
}

const Chat_STC_UpdateChatMsg& Chat_STC_UpdateChatMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chat_2eproto();
  return *default_instance_;
}

Chat_STC_UpdateChatMsg* Chat_STC_UpdateChatMsg::default_instance_ = NULL;

Chat_STC_UpdateChatMsg* Chat_STC_UpdateChatMsg::New() const {
  return new Chat_STC_UpdateChatMsg;
}

void Chat_STC_UpdateChatMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    channel_ = 0;
    fromcharid_ = GOOGLE_ULONGLONG(0);
    weapon_ = 0;
    viplevel_ = 0;
    if (has_charname()) {
      if (charname_ != &::google::protobuf::internal::kEmptyString) {
        charname_->clear();
      }
    }
    contenttype_ = 0;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    voicetime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Chat_STC_UpdateChatMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 channel = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fromCharId;
        break;
      }

      // required uint64 fromCharId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fromCharId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fromcharid_)));
          set_has_fromcharid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_weapon;
        break;
      }

      // required int32 weapon = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weapon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weapon_)));
          set_has_weapon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_vipLevel;
        break;
      }

      // required int32 vipLevel = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vipLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viplevel_)));
          set_has_viplevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_charName;
        break;
      }

      // required string charName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_charName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_charname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->charname().data(), this->charname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_contentType;
        break;
      }

      // required int32 contentType = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_contentType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &contenttype_)));
          set_has_contenttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_content;
        break;
      }

      // required string content = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_voiceTime;
        break;
      }

      // optional int32 voiceTime = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_voiceTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &voicetime_)));
          set_has_voicetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Chat_STC_UpdateChatMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 channel = 1;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->channel(), output);
  }

  // required uint64 fromCharId = 2;
  if (has_fromcharid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->fromcharid(), output);
  }

  // required int32 weapon = 3;
  if (has_weapon()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->weapon(), output);
  }

  // required int32 vipLevel = 4;
  if (has_viplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->viplevel(), output);
  }

  // required string charName = 5;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->charname(), output);
  }

  // required int32 contentType = 6;
  if (has_contenttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->contenttype(), output);
  }

  // required string content = 7;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->content(), output);
  }

  // optional int32 voiceTime = 8;
  if (has_voicetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->voicetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Chat_STC_UpdateChatMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 channel = 1;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->channel(), target);
  }

  // required uint64 fromCharId = 2;
  if (has_fromcharid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->fromcharid(), target);
  }

  // required int32 weapon = 3;
  if (has_weapon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->weapon(), target);
  }

  // required int32 vipLevel = 4;
  if (has_viplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->viplevel(), target);
  }

  // required string charName = 5;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->charname(), target);
  }

  // required int32 contentType = 6;
  if (has_contenttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->contenttype(), target);
  }

  // required string content = 7;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->content(), target);
  }

  // optional int32 voiceTime = 8;
  if (has_voicetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->voicetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Chat_STC_UpdateChatMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 channel = 1;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channel());
    }

    // required uint64 fromCharId = 2;
    if (has_fromcharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fromcharid());
    }

    // required int32 weapon = 3;
    if (has_weapon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->weapon());
    }

    // required int32 vipLevel = 4;
    if (has_viplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viplevel());
    }

    // required string charName = 5;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->charname());
    }

    // required int32 contentType = 6;
    if (has_contenttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->contenttype());
    }

    // required string content = 7;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional int32 voiceTime = 8;
    if (has_voicetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->voicetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Chat_STC_UpdateChatMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Chat_STC_UpdateChatMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Chat_STC_UpdateChatMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Chat_STC_UpdateChatMsg::MergeFrom(const Chat_STC_UpdateChatMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_fromcharid()) {
      set_fromcharid(from.fromcharid());
    }
    if (from.has_weapon()) {
      set_weapon(from.weapon());
    }
    if (from.has_viplevel()) {
      set_viplevel(from.viplevel());
    }
    if (from.has_charname()) {
      set_charname(from.charname());
    }
    if (from.has_contenttype()) {
      set_contenttype(from.contenttype());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_voicetime()) {
      set_voicetime(from.voicetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Chat_STC_UpdateChatMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Chat_STC_UpdateChatMsg::CopyFrom(const Chat_STC_UpdateChatMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Chat_STC_UpdateChatMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void Chat_STC_UpdateChatMsg::Swap(Chat_STC_UpdateChatMsg* other) {
  if (other != this) {
    std::swap(channel_, other->channel_);
    std::swap(fromcharid_, other->fromcharid_);
    std::swap(weapon_, other->weapon_);
    std::swap(viplevel_, other->viplevel_);
    std::swap(charname_, other->charname_);
    std::swap(contenttype_, other->contenttype_);
    std::swap(content_, other->content_);
    std::swap(voicetime_, other->voicetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Chat_STC_UpdateChatMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Chat_STC_UpdateChatMsg_descriptor_;
  metadata.reflection = Chat_STC_UpdateChatMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildMessage::kGuildidFieldNumber;
const int GuildMessage::kContextidFieldNumber;
const int GuildMessage::kContextparFieldNumber;
const int GuildMessage::kIsallFieldNumber;
const int GuildMessage::kPlayeridlistFieldNumber;
#endif  // !_MSC_VER

GuildMessage::GuildMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildMessage::InitAsDefaultInstance() {
}

GuildMessage::GuildMessage(const GuildMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildMessage::SharedCtor() {
  _cached_size_ = 0;
  guildid_ = GOOGLE_ULONGLONG(0);
  contextid_ = 0u;
  contextpar_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isall_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMessage::~GuildMessage() {
  SharedDtor();
}

void GuildMessage::SharedDtor() {
  if (contextpar_ != &::google::protobuf::internal::kEmptyString) {
    delete contextpar_;
  }
  if (this != default_instance_) {
  }
}

void GuildMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMessage_descriptor_;
}

const GuildMessage& GuildMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chat_2eproto();
  return *default_instance_;
}

GuildMessage* GuildMessage::default_instance_ = NULL;

GuildMessage* GuildMessage::New() const {
  return new GuildMessage;
}

void GuildMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guildid_ = GOOGLE_ULONGLONG(0);
    contextid_ = 0u;
    if (has_contextpar()) {
      if (contextpar_ != &::google::protobuf::internal::kEmptyString) {
        contextpar_->clear();
      }
    }
    isall_ = false;
  }
  playeridlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 guildid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_contextid;
        break;
      }

      // required uint32 contextid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_contextid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &contextid_)));
          set_has_contextid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_contextpar;
        break;
      }

      // required string contextpar = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_contextpar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contextpar()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->contextpar().data(), this->contextpar().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_isall;
        break;
      }

      // required bool isall = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isall:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isall_)));
          set_has_isall();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_playeridlist;
        break;
      }

      // repeated uint64 playeridlist = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playeridlist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 40, input, this->mutable_playeridlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_playeridlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_playeridlist;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 guildid = 1;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guildid(), output);
  }

  // required uint32 contextid = 2;
  if (has_contextid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->contextid(), output);
  }

  // required string contextpar = 3;
  if (has_contextpar()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contextpar().data(), this->contextpar().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->contextpar(), output);
  }

  // required bool isall = 4;
  if (has_isall()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isall(), output);
  }

  // repeated uint64 playeridlist = 5;
  for (int i = 0; i < this->playeridlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      5, this->playeridlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 guildid = 1;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guildid(), target);
  }

  // required uint32 contextid = 2;
  if (has_contextid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->contextid(), target);
  }

  // required string contextpar = 3;
  if (has_contextpar()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contextpar().data(), this->contextpar().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->contextpar(), target);
  }

  // required bool isall = 4;
  if (has_isall()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isall(), target);
  }

  // repeated uint64 playeridlist = 5;
  for (int i = 0; i < this->playeridlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(5, this->playeridlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 guildid = 1;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

    // required uint32 contextid = 2;
    if (has_contextid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->contextid());
    }

    // required string contextpar = 3;
    if (has_contextpar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contextpar());
    }

    // required bool isall = 4;
    if (has_isall()) {
      total_size += 1 + 1;
    }

  }
  // repeated uint64 playeridlist = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->playeridlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->playeridlist(i));
    }
    total_size += 1 * this->playeridlist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMessage::MergeFrom(const GuildMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  playeridlist_.MergeFrom(from.playeridlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_contextid()) {
      set_contextid(from.contextid());
    }
    if (from.has_contextpar()) {
      set_contextpar(from.contextpar());
    }
    if (from.has_isall()) {
      set_isall(from.isall());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMessage::CopyFrom(const GuildMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void GuildMessage::Swap(GuildMessage* other) {
  if (other != this) {
    std::swap(guildid_, other->guildid_);
    std::swap(contextid_, other->contextid_);
    std::swap(contextpar_, other->contextpar_);
    std::swap(isall_, other->isall_);
    playeridlist_.Swap(&other->playeridlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMessage_descriptor_;
  metadata.reflection = GuildMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Chat_STC_GuildPublic::kContextidFieldNumber;
const int Chat_STC_GuildPublic::kContextparFieldNumber;
#endif  // !_MSC_VER

Chat_STC_GuildPublic::Chat_STC_GuildPublic()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Chat_STC_GuildPublic::InitAsDefaultInstance() {
}

Chat_STC_GuildPublic::Chat_STC_GuildPublic(const Chat_STC_GuildPublic& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Chat_STC_GuildPublic::SharedCtor() {
  _cached_size_ = 0;
  contextid_ = 0u;
  contextpar_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Chat_STC_GuildPublic::~Chat_STC_GuildPublic() {
  SharedDtor();
}

void Chat_STC_GuildPublic::SharedDtor() {
  if (contextpar_ != &::google::protobuf::internal::kEmptyString) {
    delete contextpar_;
  }
  if (this != default_instance_) {
  }
}

void Chat_STC_GuildPublic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Chat_STC_GuildPublic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Chat_STC_GuildPublic_descriptor_;
}

const Chat_STC_GuildPublic& Chat_STC_GuildPublic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chat_2eproto();
  return *default_instance_;
}

Chat_STC_GuildPublic* Chat_STC_GuildPublic::default_instance_ = NULL;

Chat_STC_GuildPublic* Chat_STC_GuildPublic::New() const {
  return new Chat_STC_GuildPublic;
}

void Chat_STC_GuildPublic::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    contextid_ = 0u;
    if (has_contextpar()) {
      if (contextpar_ != &::google::protobuf::internal::kEmptyString) {
        contextpar_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Chat_STC_GuildPublic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 contextid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &contextid_)));
          set_has_contextid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_contextpar;
        break;
      }

      // required string contextpar = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_contextpar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contextpar()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->contextpar().data(), this->contextpar().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Chat_STC_GuildPublic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 contextid = 1;
  if (has_contextid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->contextid(), output);
  }

  // required string contextpar = 2;
  if (has_contextpar()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contextpar().data(), this->contextpar().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->contextpar(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Chat_STC_GuildPublic::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 contextid = 1;
  if (has_contextid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->contextid(), target);
  }

  // required string contextpar = 2;
  if (has_contextpar()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contextpar().data(), this->contextpar().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->contextpar(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Chat_STC_GuildPublic::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 contextid = 1;
    if (has_contextid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->contextid());
    }

    // required string contextpar = 2;
    if (has_contextpar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contextpar());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Chat_STC_GuildPublic::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Chat_STC_GuildPublic* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Chat_STC_GuildPublic*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Chat_STC_GuildPublic::MergeFrom(const Chat_STC_GuildPublic& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_contextid()) {
      set_contextid(from.contextid());
    }
    if (from.has_contextpar()) {
      set_contextpar(from.contextpar());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Chat_STC_GuildPublic::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Chat_STC_GuildPublic::CopyFrom(const Chat_STC_GuildPublic& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Chat_STC_GuildPublic::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Chat_STC_GuildPublic::Swap(Chat_STC_GuildPublic* other) {
  if (other != this) {
    std::swap(contextid_, other->contextid_);
    std::swap(contextpar_, other->contextpar_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Chat_STC_GuildPublic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Chat_STC_GuildPublic_descriptor_;
  metadata.reflection = Chat_STC_GuildPublic_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace proto

// @@protoc_insertion_point(global_scope)
