// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: room.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "room.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace message {

namespace {

const ::google::protobuf::Descriptor* ProtoRoomManInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoRoomManInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoRoomInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoRoomInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Room_SC_UpdateRoomLevelInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Room_SC_UpdateRoomLevelInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoRoomListRoomInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoRoomListRoomInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoRoomOutObj_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoRoomOutObj_reflection_ = NULL;
const ::google::protobuf::Descriptor* Room_CS_SetRoomOutObj_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Room_CS_SetRoomOutObj_reflection_ = NULL;
const ::google::protobuf::Descriptor* Room_SC_SetRoomOutObj_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Room_SC_SetRoomOutObj_reflection_ = NULL;
const ::google::protobuf::Descriptor* Room_CS_MatchingQueueInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Room_CS_MatchingQueueInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Room_SC_MatchingQueueInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Room_SC_MatchingQueueInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Room_CS_GetRoomList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Room_CS_GetRoomList_reflection_ = NULL;
const ::google::protobuf::Descriptor* Room_SC_GetRoomList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Room_SC_GetRoomList_reflection_ = NULL;
const ::google::protobuf::Descriptor* Room_CS_CreateRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Room_CS_CreateRoom_reflection_ = NULL;
const ::google::protobuf::Descriptor* Room_SC_CreateRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Room_SC_CreateRoom_reflection_ = NULL;
const ::google::protobuf::Descriptor* Room_CS_ApplyRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Room_CS_ApplyRoom_reflection_ = NULL;
const ::google::protobuf::Descriptor* Room_SC_ApplyRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Room_SC_ApplyRoom_reflection_ = NULL;
const ::google::protobuf::Descriptor* Room_CS_RoomQuit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Room_CS_RoomQuit_reflection_ = NULL;
const ::google::protobuf::Descriptor* Room_SC_RoomQuit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Room_SC_RoomQuit_reflection_ = NULL;
const ::google::protobuf::Descriptor* Room_CS_RoomAppoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Room_CS_RoomAppoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* Room_SC_RoomAppoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Room_SC_RoomAppoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* Room_CS_RoomKick_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Room_CS_RoomKick_reflection_ = NULL;
const ::google::protobuf::Descriptor* Room_SC_RoomKick_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Room_SC_RoomKick_reflection_ = NULL;
const ::google::protobuf::Descriptor* Room_CS_TempLeave_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Room_CS_TempLeave_reflection_ = NULL;
const ::google::protobuf::Descriptor* Room_SC_TempLeave_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Room_SC_TempLeave_reflection_ = NULL;
const ::google::protobuf::Descriptor* Room_CS_RoomAuto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Room_CS_RoomAuto_reflection_ = NULL;
const ::google::protobuf::Descriptor* Room_SC_RoomAuto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Room_SC_RoomAuto_reflection_ = NULL;
const ::google::protobuf::Descriptor* Room_CS_MemberAuto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Room_CS_MemberAuto_reflection_ = NULL;
const ::google::protobuf::Descriptor* Room_SC_MemberAuto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Room_SC_MemberAuto_reflection_ = NULL;
const ::google::protobuf::Descriptor* Room_CS_RoomInvite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Room_CS_RoomInvite_reflection_ = NULL;
const ::google::protobuf::Descriptor* Room_SC_RoomInvite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Room_SC_RoomInvite_reflection_ = NULL;
const ::google::protobuf::Descriptor* Room_CS_SetRoomBeInvite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Room_CS_SetRoomBeInvite_reflection_ = NULL;
const ::google::protobuf::Descriptor* Room_SC_SetRoomBeInvite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Room_SC_SetRoomBeInvite_reflection_ = NULL;
const ::google::protobuf::Descriptor* Room_CS_SetRoomAllow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Room_CS_SetRoomAllow_reflection_ = NULL;
const ::google::protobuf::Descriptor* Room_SC_SetRoomAllow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Room_SC_SetRoomAllow_reflection_ = NULL;
const ::google::protobuf::Descriptor* Room_CS_SetRoomAllowOneTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Room_CS_SetRoomAllowOneTime_reflection_ = NULL;
const ::google::protobuf::Descriptor* Room_SC_SetRoomAllowOneTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Room_SC_SetRoomAllowOneTime_reflection_ = NULL;
const ::google::protobuf::Descriptor* Room_CS_UpdateRoomInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Room_CS_UpdateRoomInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Room_SC_UpdateRoomInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Room_SC_UpdateRoomInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Room_SC_UpdateRoomBeInvite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Room_SC_UpdateRoomBeInvite_reflection_ = NULL;
const ::google::protobuf::Descriptor* Room_SC_UpdateApplyList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Room_SC_UpdateApplyList_reflection_ = NULL;
const ::google::protobuf::Descriptor* Room_SC_UpdateRoomMemberTick_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Room_SC_UpdateRoomMemberTick_reflection_ = NULL;
const ::google::protobuf::Descriptor* Room_CS_FollowLeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Room_CS_FollowLeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* Room_SC_FollowLeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Room_SC_FollowLeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* Room_CS_SummonFollower_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Room_CS_SummonFollower_reflection_ = NULL;
const ::google::protobuf::Descriptor* Room_SC_SummonFollower_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Room_SC_SummonFollower_reflection_ = NULL;
const ::google::protobuf::Descriptor* Room_SC_LeaderSummon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Room_SC_LeaderSummon_reflection_ = NULL;
const ::google::protobuf::Descriptor* Room_CS_SetIgnoreRoomInvite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Room_CS_SetIgnoreRoomInvite_reflection_ = NULL;
const ::google::protobuf::Descriptor* Room_SC_SetIgnoreRoomInvite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Room_SC_SetIgnoreRoomInvite_reflection_ = NULL;
const ::google::protobuf::Descriptor* Room_CS_QueryIgnoreRoomInvite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Room_CS_QueryIgnoreRoomInvite_reflection_ = NULL;
const ::google::protobuf::Descriptor* Room_SC_QueryIgnoreRoomInvite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Room_SC_QueryIgnoreRoomInvite_reflection_ = NULL;
const ::google::protobuf::Descriptor* Room_SC_ErrorInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Room_SC_ErrorInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoRoomManHPInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoRoomManHPInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Room_SC_UpdateCurrentHp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Room_SC_UpdateCurrentHp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Room_CS_RoomReady_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Room_CS_RoomReady_reflection_ = NULL;
const ::google::protobuf::Descriptor* Room_SC_RoomReady_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Room_SC_RoomReady_reflection_ = NULL;
const ::google::protobuf::Descriptor* Battle2Game_GetRoomList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Battle2Game_GetRoomList_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_room_2eproto() {
  protobuf_AddDesc_room_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "room.proto");
  GOOGLE_CHECK(file != NULL);
  ProtoRoomManInfo_descriptor_ = file->message_type(0);
  static const int ProtoRoomManInfo_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRoomManInfo, plyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRoomManInfo, job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRoomManInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRoomManInfo, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRoomManInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRoomManInfo, equipid_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRoomManInfo, plyuuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRoomManInfo, identity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRoomManInfo, combat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRoomManInfo, isready_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRoomManInfo, demonhunterlevel_),
  };
  ProtoRoomManInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoRoomManInfo_descriptor_,
      ProtoRoomManInfo::default_instance_,
      ProtoRoomManInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRoomManInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRoomManInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoRoomManInfo));
  ProtoRoomInfo_descriptor_ = file->message_type(1);
  static const int ProtoRoomInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRoomInfo, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRoomInfo, numlimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRoomInfo, leaderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRoomInfo, roomauto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRoomInfo, roomoutobj_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRoomInfo, roommanlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRoomInfo, needcombat_),
  };
  ProtoRoomInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoRoomInfo_descriptor_,
      ProtoRoomInfo::default_instance_,
      ProtoRoomInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRoomInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRoomInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoRoomInfo));
  Room_SC_UpdateRoomLevelInfo_descriptor_ = file->message_type(2);
  static const int Room_SC_UpdateRoomLevelInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_SC_UpdateRoomLevelInfo, plyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_SC_UpdateRoomLevelInfo, level_),
  };
  Room_SC_UpdateRoomLevelInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Room_SC_UpdateRoomLevelInfo_descriptor_,
      Room_SC_UpdateRoomLevelInfo::default_instance_,
      Room_SC_UpdateRoomLevelInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_SC_UpdateRoomLevelInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_SC_UpdateRoomLevelInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Room_SC_UpdateRoomLevelInfo));
  ProtoRoomListRoomInfo_descriptor_ = file->message_type(3);
  static const int ProtoRoomListRoomInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRoomListRoomInfo, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRoomListRoomInfo, peoplenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRoomListRoomInfo, numlimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRoomListRoomInfo, leaderinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRoomListRoomInfo, roomoutobj_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRoomListRoomInfo, totalcombat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRoomListRoomInfo, leadercombat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRoomListRoomInfo, needcombat_),
  };
  ProtoRoomListRoomInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoRoomListRoomInfo_descriptor_,
      ProtoRoomListRoomInfo::default_instance_,
      ProtoRoomListRoomInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRoomListRoomInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRoomListRoomInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoRoomListRoomInfo));
  ProtoRoomOutObj_descriptor_ = file->message_type(4);
  static const int ProtoRoomOutObj_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRoomOutObj, obj_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRoomOutObj, levelmin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRoomOutObj, levelmax_),
  };
  ProtoRoomOutObj_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoRoomOutObj_descriptor_,
      ProtoRoomOutObj::default_instance_,
      ProtoRoomOutObj_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRoomOutObj, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRoomOutObj, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoRoomOutObj));
  Room_CS_SetRoomOutObj_descriptor_ = file->message_type(5);
  static const int Room_CS_SetRoomOutObj_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_CS_SetRoomOutObj, obj_),
  };
  Room_CS_SetRoomOutObj_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Room_CS_SetRoomOutObj_descriptor_,
      Room_CS_SetRoomOutObj::default_instance_,
      Room_CS_SetRoomOutObj_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_CS_SetRoomOutObj, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_CS_SetRoomOutObj, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Room_CS_SetRoomOutObj));
  Room_SC_SetRoomOutObj_descriptor_ = file->message_type(6);
  static const int Room_SC_SetRoomOutObj_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_SC_SetRoomOutObj, result_),
  };
  Room_SC_SetRoomOutObj_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Room_SC_SetRoomOutObj_descriptor_,
      Room_SC_SetRoomOutObj::default_instance_,
      Room_SC_SetRoomOutObj_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_SC_SetRoomOutObj, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_SC_SetRoomOutObj, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Room_SC_SetRoomOutObj));
  Room_CS_MatchingQueueInfo_descriptor_ = file->message_type(7);
  static const int Room_CS_MatchingQueueInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_CS_MatchingQueueInfo, obj_),
  };
  Room_CS_MatchingQueueInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Room_CS_MatchingQueueInfo_descriptor_,
      Room_CS_MatchingQueueInfo::default_instance_,
      Room_CS_MatchingQueueInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_CS_MatchingQueueInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_CS_MatchingQueueInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Room_CS_MatchingQueueInfo));
  Room_SC_MatchingQueueInfo_descriptor_ = file->message_type(8);
  static const int Room_SC_MatchingQueueInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_SC_MatchingQueueInfo, nroomnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_SC_MatchingQueueInfo, nsinglenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_SC_MatchingQueueInfo, obj_),
  };
  Room_SC_MatchingQueueInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Room_SC_MatchingQueueInfo_descriptor_,
      Room_SC_MatchingQueueInfo::default_instance_,
      Room_SC_MatchingQueueInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_SC_MatchingQueueInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_SC_MatchingQueueInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Room_SC_MatchingQueueInfo));
  Room_CS_GetRoomList_descriptor_ = file->message_type(9);
  static const int Room_CS_GetRoomList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_CS_GetRoomList, obj_),
  };
  Room_CS_GetRoomList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Room_CS_GetRoomList_descriptor_,
      Room_CS_GetRoomList::default_instance_,
      Room_CS_GetRoomList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_CS_GetRoomList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_CS_GetRoomList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Room_CS_GetRoomList));
  Room_SC_GetRoomList_descriptor_ = file->message_type(10);
  static const int Room_SC_GetRoomList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_SC_GetRoomList, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_SC_GetRoomList, roominfo_),
  };
  Room_SC_GetRoomList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Room_SC_GetRoomList_descriptor_,
      Room_SC_GetRoomList::default_instance_,
      Room_SC_GetRoomList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_SC_GetRoomList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_SC_GetRoomList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Room_SC_GetRoomList));
  Room_CS_CreateRoom_descriptor_ = file->message_type(11);
  static const int Room_CS_CreateRoom_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_CS_CreateRoom, needcombat_),
  };
  Room_CS_CreateRoom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Room_CS_CreateRoom_descriptor_,
      Room_CS_CreateRoom::default_instance_,
      Room_CS_CreateRoom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_CS_CreateRoom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_CS_CreateRoom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Room_CS_CreateRoom));
  Room_SC_CreateRoom_descriptor_ = file->message_type(12);
  static const int Room_SC_CreateRoom_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_SC_CreateRoom, result_),
  };
  Room_SC_CreateRoom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Room_SC_CreateRoom_descriptor_,
      Room_SC_CreateRoom::default_instance_,
      Room_SC_CreateRoom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_SC_CreateRoom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_SC_CreateRoom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Room_SC_CreateRoom));
  Room_CS_ApplyRoom_descriptor_ = file->message_type(13);
  static const int Room_CS_ApplyRoom_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_CS_ApplyRoom, roomid_),
  };
  Room_CS_ApplyRoom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Room_CS_ApplyRoom_descriptor_,
      Room_CS_ApplyRoom::default_instance_,
      Room_CS_ApplyRoom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_CS_ApplyRoom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_CS_ApplyRoom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Room_CS_ApplyRoom));
  Room_SC_ApplyRoom_descriptor_ = file->message_type(14);
  static const int Room_SC_ApplyRoom_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_SC_ApplyRoom, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_SC_ApplyRoom, roomid_),
  };
  Room_SC_ApplyRoom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Room_SC_ApplyRoom_descriptor_,
      Room_SC_ApplyRoom::default_instance_,
      Room_SC_ApplyRoom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_SC_ApplyRoom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_SC_ApplyRoom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Room_SC_ApplyRoom));
  Room_CS_RoomQuit_descriptor_ = file->message_type(15);
  static const int Room_CS_RoomQuit_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_CS_RoomQuit, roomid_),
  };
  Room_CS_RoomQuit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Room_CS_RoomQuit_descriptor_,
      Room_CS_RoomQuit::default_instance_,
      Room_CS_RoomQuit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_CS_RoomQuit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_CS_RoomQuit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Room_CS_RoomQuit));
  Room_SC_RoomQuit_descriptor_ = file->message_type(16);
  static const int Room_SC_RoomQuit_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_SC_RoomQuit, result_),
  };
  Room_SC_RoomQuit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Room_SC_RoomQuit_descriptor_,
      Room_SC_RoomQuit::default_instance_,
      Room_SC_RoomQuit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_SC_RoomQuit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_SC_RoomQuit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Room_SC_RoomQuit));
  Room_CS_RoomAppoint_descriptor_ = file->message_type(17);
  static const int Room_CS_RoomAppoint_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_CS_RoomAppoint, plyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_CS_RoomAppoint, appoint_),
  };
  Room_CS_RoomAppoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Room_CS_RoomAppoint_descriptor_,
      Room_CS_RoomAppoint::default_instance_,
      Room_CS_RoomAppoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_CS_RoomAppoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_CS_RoomAppoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Room_CS_RoomAppoint));
  Room_SC_RoomAppoint_descriptor_ = file->message_type(18);
  static const int Room_SC_RoomAppoint_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_SC_RoomAppoint, result_),
  };
  Room_SC_RoomAppoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Room_SC_RoomAppoint_descriptor_,
      Room_SC_RoomAppoint::default_instance_,
      Room_SC_RoomAppoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_SC_RoomAppoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_SC_RoomAppoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Room_SC_RoomAppoint));
  Room_CS_RoomKick_descriptor_ = file->message_type(19);
  static const int Room_CS_RoomKick_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_CS_RoomKick, plyid_),
  };
  Room_CS_RoomKick_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Room_CS_RoomKick_descriptor_,
      Room_CS_RoomKick::default_instance_,
      Room_CS_RoomKick_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_CS_RoomKick, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_CS_RoomKick, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Room_CS_RoomKick));
  Room_SC_RoomKick_descriptor_ = file->message_type(20);
  static const int Room_SC_RoomKick_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_SC_RoomKick, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_SC_RoomKick, bekickname_),
  };
  Room_SC_RoomKick_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Room_SC_RoomKick_descriptor_,
      Room_SC_RoomKick::default_instance_,
      Room_SC_RoomKick_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_SC_RoomKick, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_SC_RoomKick, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Room_SC_RoomKick));
  Room_CS_TempLeave_descriptor_ = file->message_type(21);
  static const int Room_CS_TempLeave_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_CS_TempLeave, plyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_CS_TempLeave, status_),
  };
  Room_CS_TempLeave_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Room_CS_TempLeave_descriptor_,
      Room_CS_TempLeave::default_instance_,
      Room_CS_TempLeave_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_CS_TempLeave, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_CS_TempLeave, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Room_CS_TempLeave));
  Room_SC_TempLeave_descriptor_ = file->message_type(22);
  static const int Room_SC_TempLeave_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_SC_TempLeave, result_),
  };
  Room_SC_TempLeave_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Room_SC_TempLeave_descriptor_,
      Room_SC_TempLeave::default_instance_,
      Room_SC_TempLeave_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_SC_TempLeave, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_SC_TempLeave, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Room_SC_TempLeave));
  Room_CS_RoomAuto_descriptor_ = file->message_type(23);
  static const int Room_CS_RoomAuto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_CS_RoomAuto, isauto_),
  };
  Room_CS_RoomAuto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Room_CS_RoomAuto_descriptor_,
      Room_CS_RoomAuto::default_instance_,
      Room_CS_RoomAuto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_CS_RoomAuto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_CS_RoomAuto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Room_CS_RoomAuto));
  Room_SC_RoomAuto_descriptor_ = file->message_type(24);
  static const int Room_SC_RoomAuto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_SC_RoomAuto, result_),
  };
  Room_SC_RoomAuto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Room_SC_RoomAuto_descriptor_,
      Room_SC_RoomAuto::default_instance_,
      Room_SC_RoomAuto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_SC_RoomAuto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_SC_RoomAuto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Room_SC_RoomAuto));
  Room_CS_MemberAuto_descriptor_ = file->message_type(25);
  static const int Room_CS_MemberAuto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_CS_MemberAuto, isauto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_CS_MemberAuto, obj_),
  };
  Room_CS_MemberAuto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Room_CS_MemberAuto_descriptor_,
      Room_CS_MemberAuto::default_instance_,
      Room_CS_MemberAuto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_CS_MemberAuto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_CS_MemberAuto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Room_CS_MemberAuto));
  Room_SC_MemberAuto_descriptor_ = file->message_type(26);
  static const int Room_SC_MemberAuto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_SC_MemberAuto, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_SC_MemberAuto, isauto_),
  };
  Room_SC_MemberAuto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Room_SC_MemberAuto_descriptor_,
      Room_SC_MemberAuto::default_instance_,
      Room_SC_MemberAuto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_SC_MemberAuto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_SC_MemberAuto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Room_SC_MemberAuto));
  Room_CS_RoomInvite_descriptor_ = file->message_type(27);
  static const int Room_CS_RoomInvite_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_CS_RoomInvite, plyid_),
  };
  Room_CS_RoomInvite_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Room_CS_RoomInvite_descriptor_,
      Room_CS_RoomInvite::default_instance_,
      Room_CS_RoomInvite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_CS_RoomInvite, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_CS_RoomInvite, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Room_CS_RoomInvite));
  Room_SC_RoomInvite_descriptor_ = file->message_type(28);
  static const int Room_SC_RoomInvite_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_SC_RoomInvite, result_),
  };
  Room_SC_RoomInvite_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Room_SC_RoomInvite_descriptor_,
      Room_SC_RoomInvite::default_instance_,
      Room_SC_RoomInvite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_SC_RoomInvite, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_SC_RoomInvite, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Room_SC_RoomInvite));
  Room_CS_SetRoomBeInvite_descriptor_ = file->message_type(29);
  static const int Room_CS_SetRoomBeInvite_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_CS_SetRoomBeInvite, allow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_CS_SetRoomBeInvite, roomid_),
  };
  Room_CS_SetRoomBeInvite_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Room_CS_SetRoomBeInvite_descriptor_,
      Room_CS_SetRoomBeInvite::default_instance_,
      Room_CS_SetRoomBeInvite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_CS_SetRoomBeInvite, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_CS_SetRoomBeInvite, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Room_CS_SetRoomBeInvite));
  Room_SC_SetRoomBeInvite_descriptor_ = file->message_type(30);
  static const int Room_SC_SetRoomBeInvite_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_SC_SetRoomBeInvite, result_),
  };
  Room_SC_SetRoomBeInvite_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Room_SC_SetRoomBeInvite_descriptor_,
      Room_SC_SetRoomBeInvite::default_instance_,
      Room_SC_SetRoomBeInvite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_SC_SetRoomBeInvite, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_SC_SetRoomBeInvite, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Room_SC_SetRoomBeInvite));
  Room_CS_SetRoomAllow_descriptor_ = file->message_type(31);
  static const int Room_CS_SetRoomAllow_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_CS_SetRoomAllow, plyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_CS_SetRoomAllow, allow_),
  };
  Room_CS_SetRoomAllow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Room_CS_SetRoomAllow_descriptor_,
      Room_CS_SetRoomAllow::default_instance_,
      Room_CS_SetRoomAllow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_CS_SetRoomAllow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_CS_SetRoomAllow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Room_CS_SetRoomAllow));
  Room_SC_SetRoomAllow_descriptor_ = file->message_type(32);
  static const int Room_SC_SetRoomAllow_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_SC_SetRoomAllow, result_),
  };
  Room_SC_SetRoomAllow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Room_SC_SetRoomAllow_descriptor_,
      Room_SC_SetRoomAllow::default_instance_,
      Room_SC_SetRoomAllow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_SC_SetRoomAllow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_SC_SetRoomAllow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Room_SC_SetRoomAllow));
  Room_CS_SetRoomAllowOneTime_descriptor_ = file->message_type(33);
  static const int Room_CS_SetRoomAllowOneTime_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_CS_SetRoomAllowOneTime, allow_),
  };
  Room_CS_SetRoomAllowOneTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Room_CS_SetRoomAllowOneTime_descriptor_,
      Room_CS_SetRoomAllowOneTime::default_instance_,
      Room_CS_SetRoomAllowOneTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_CS_SetRoomAllowOneTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_CS_SetRoomAllowOneTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Room_CS_SetRoomAllowOneTime));
  Room_SC_SetRoomAllowOneTime_descriptor_ = file->message_type(34);
  static const int Room_SC_SetRoomAllowOneTime_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_SC_SetRoomAllowOneTime, result_),
  };
  Room_SC_SetRoomAllowOneTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Room_SC_SetRoomAllowOneTime_descriptor_,
      Room_SC_SetRoomAllowOneTime::default_instance_,
      Room_SC_SetRoomAllowOneTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_SC_SetRoomAllowOneTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_SC_SetRoomAllowOneTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Room_SC_SetRoomAllowOneTime));
  Room_CS_UpdateRoomInfo_descriptor_ = file->message_type(35);
  static const int Room_CS_UpdateRoomInfo_offsets_[1] = {
  };
  Room_CS_UpdateRoomInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Room_CS_UpdateRoomInfo_descriptor_,
      Room_CS_UpdateRoomInfo::default_instance_,
      Room_CS_UpdateRoomInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_CS_UpdateRoomInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_CS_UpdateRoomInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Room_CS_UpdateRoomInfo));
  Room_SC_UpdateRoomInfo_descriptor_ = file->message_type(36);
  static const int Room_SC_UpdateRoomInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_SC_UpdateRoomInfo, roominfo_),
  };
  Room_SC_UpdateRoomInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Room_SC_UpdateRoomInfo_descriptor_,
      Room_SC_UpdateRoomInfo::default_instance_,
      Room_SC_UpdateRoomInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_SC_UpdateRoomInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_SC_UpdateRoomInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Room_SC_UpdateRoomInfo));
  Room_SC_UpdateRoomBeInvite_descriptor_ = file->message_type(37);
  static const int Room_SC_UpdateRoomBeInvite_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_SC_UpdateRoomBeInvite, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_SC_UpdateRoomBeInvite, name_),
  };
  Room_SC_UpdateRoomBeInvite_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Room_SC_UpdateRoomBeInvite_descriptor_,
      Room_SC_UpdateRoomBeInvite::default_instance_,
      Room_SC_UpdateRoomBeInvite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_SC_UpdateRoomBeInvite, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_SC_UpdateRoomBeInvite, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Room_SC_UpdateRoomBeInvite));
  Room_SC_UpdateApplyList_descriptor_ = file->message_type(38);
  static const int Room_SC_UpdateApplyList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_SC_UpdateApplyList, roommanlist_),
  };
  Room_SC_UpdateApplyList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Room_SC_UpdateApplyList_descriptor_,
      Room_SC_UpdateApplyList::default_instance_,
      Room_SC_UpdateApplyList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_SC_UpdateApplyList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_SC_UpdateApplyList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Room_SC_UpdateApplyList));
  Room_SC_UpdateRoomMemberTick_descriptor_ = file->message_type(39);
  static const int Room_SC_UpdateRoomMemberTick_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_SC_UpdateRoomMemberTick, name_),
  };
  Room_SC_UpdateRoomMemberTick_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Room_SC_UpdateRoomMemberTick_descriptor_,
      Room_SC_UpdateRoomMemberTick::default_instance_,
      Room_SC_UpdateRoomMemberTick_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_SC_UpdateRoomMemberTick, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_SC_UpdateRoomMemberTick, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Room_SC_UpdateRoomMemberTick));
  Room_CS_FollowLeader_descriptor_ = file->message_type(40);
  static const int Room_CS_FollowLeader_offsets_[1] = {
  };
  Room_CS_FollowLeader_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Room_CS_FollowLeader_descriptor_,
      Room_CS_FollowLeader::default_instance_,
      Room_CS_FollowLeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_CS_FollowLeader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_CS_FollowLeader, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Room_CS_FollowLeader));
  Room_SC_FollowLeader_descriptor_ = file->message_type(41);
  static const int Room_SC_FollowLeader_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_SC_FollowLeader, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_SC_FollowLeader, changemap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_SC_FollowLeader, pt_),
  };
  Room_SC_FollowLeader_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Room_SC_FollowLeader_descriptor_,
      Room_SC_FollowLeader::default_instance_,
      Room_SC_FollowLeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_SC_FollowLeader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_SC_FollowLeader, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Room_SC_FollowLeader));
  Room_CS_SummonFollower_descriptor_ = file->message_type(42);
  static const int Room_CS_SummonFollower_offsets_[1] = {
  };
  Room_CS_SummonFollower_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Room_CS_SummonFollower_descriptor_,
      Room_CS_SummonFollower::default_instance_,
      Room_CS_SummonFollower_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_CS_SummonFollower, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_CS_SummonFollower, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Room_CS_SummonFollower));
  Room_SC_SummonFollower_descriptor_ = file->message_type(43);
  static const int Room_SC_SummonFollower_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_SC_SummonFollower, result_),
  };
  Room_SC_SummonFollower_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Room_SC_SummonFollower_descriptor_,
      Room_SC_SummonFollower::default_instance_,
      Room_SC_SummonFollower_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_SC_SummonFollower, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_SC_SummonFollower, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Room_SC_SummonFollower));
  Room_SC_LeaderSummon_descriptor_ = file->message_type(44);
  static const int Room_SC_LeaderSummon_offsets_[1] = {
  };
  Room_SC_LeaderSummon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Room_SC_LeaderSummon_descriptor_,
      Room_SC_LeaderSummon::default_instance_,
      Room_SC_LeaderSummon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_SC_LeaderSummon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_SC_LeaderSummon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Room_SC_LeaderSummon));
  Room_CS_SetIgnoreRoomInvite_descriptor_ = file->message_type(45);
  static const int Room_CS_SetIgnoreRoomInvite_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_CS_SetIgnoreRoomInvite, allow_),
  };
  Room_CS_SetIgnoreRoomInvite_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Room_CS_SetIgnoreRoomInvite_descriptor_,
      Room_CS_SetIgnoreRoomInvite::default_instance_,
      Room_CS_SetIgnoreRoomInvite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_CS_SetIgnoreRoomInvite, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_CS_SetIgnoreRoomInvite, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Room_CS_SetIgnoreRoomInvite));
  Room_SC_SetIgnoreRoomInvite_descriptor_ = file->message_type(46);
  static const int Room_SC_SetIgnoreRoomInvite_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_SC_SetIgnoreRoomInvite, result_),
  };
  Room_SC_SetIgnoreRoomInvite_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Room_SC_SetIgnoreRoomInvite_descriptor_,
      Room_SC_SetIgnoreRoomInvite::default_instance_,
      Room_SC_SetIgnoreRoomInvite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_SC_SetIgnoreRoomInvite, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_SC_SetIgnoreRoomInvite, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Room_SC_SetIgnoreRoomInvite));
  Room_CS_QueryIgnoreRoomInvite_descriptor_ = file->message_type(47);
  static const int Room_CS_QueryIgnoreRoomInvite_offsets_[1] = {
  };
  Room_CS_QueryIgnoreRoomInvite_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Room_CS_QueryIgnoreRoomInvite_descriptor_,
      Room_CS_QueryIgnoreRoomInvite::default_instance_,
      Room_CS_QueryIgnoreRoomInvite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_CS_QueryIgnoreRoomInvite, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_CS_QueryIgnoreRoomInvite, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Room_CS_QueryIgnoreRoomInvite));
  Room_SC_QueryIgnoreRoomInvite_descriptor_ = file->message_type(48);
  static const int Room_SC_QueryIgnoreRoomInvite_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_SC_QueryIgnoreRoomInvite, allow_),
  };
  Room_SC_QueryIgnoreRoomInvite_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Room_SC_QueryIgnoreRoomInvite_descriptor_,
      Room_SC_QueryIgnoreRoomInvite::default_instance_,
      Room_SC_QueryIgnoreRoomInvite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_SC_QueryIgnoreRoomInvite, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_SC_QueryIgnoreRoomInvite, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Room_SC_QueryIgnoreRoomInvite));
  Room_SC_ErrorInfo_descriptor_ = file->message_type(49);
  static const int Room_SC_ErrorInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_SC_ErrorInfo, result_),
  };
  Room_SC_ErrorInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Room_SC_ErrorInfo_descriptor_,
      Room_SC_ErrorInfo::default_instance_,
      Room_SC_ErrorInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_SC_ErrorInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_SC_ErrorInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Room_SC_ErrorInfo));
  ProtoRoomManHPInfo_descriptor_ = file->message_type(50);
  static const int ProtoRoomManHPInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRoomManHPInfo, plyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRoomManHPInfo, maxhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRoomManHPInfo, hp_),
  };
  ProtoRoomManHPInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoRoomManHPInfo_descriptor_,
      ProtoRoomManHPInfo::default_instance_,
      ProtoRoomManHPInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRoomManHPInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRoomManHPInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoRoomManHPInfo));
  Room_SC_UpdateCurrentHp_descriptor_ = file->message_type(51);
  static const int Room_SC_UpdateCurrentHp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_SC_UpdateCurrentHp, hplist_),
  };
  Room_SC_UpdateCurrentHp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Room_SC_UpdateCurrentHp_descriptor_,
      Room_SC_UpdateCurrentHp::default_instance_,
      Room_SC_UpdateCurrentHp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_SC_UpdateCurrentHp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_SC_UpdateCurrentHp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Room_SC_UpdateCurrentHp));
  Room_CS_RoomReady_descriptor_ = file->message_type(52);
  static const int Room_CS_RoomReady_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_CS_RoomReady, status_),
  };
  Room_CS_RoomReady_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Room_CS_RoomReady_descriptor_,
      Room_CS_RoomReady::default_instance_,
      Room_CS_RoomReady_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_CS_RoomReady, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_CS_RoomReady, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Room_CS_RoomReady));
  Room_SC_RoomReady_descriptor_ = file->message_type(53);
  static const int Room_SC_RoomReady_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_SC_RoomReady, result_),
  };
  Room_SC_RoomReady_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Room_SC_RoomReady_descriptor_,
      Room_SC_RoomReady::default_instance_,
      Room_SC_RoomReady_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_SC_RoomReady, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_SC_RoomReady, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Room_SC_RoomReady));
  Battle2Game_GetRoomList_descriptor_ = file->message_type(54);
  static const int Battle2Game_GetRoomList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Game_GetRoomList, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Game_GetRoomList, roominfo_),
  };
  Battle2Game_GetRoomList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Battle2Game_GetRoomList_descriptor_,
      Battle2Game_GetRoomList::default_instance_,
      Battle2Game_GetRoomList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Game_GetRoomList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Game_GetRoomList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Battle2Game_GetRoomList));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_room_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoRoomManInfo_descriptor_, &ProtoRoomManInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoRoomInfo_descriptor_, &ProtoRoomInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Room_SC_UpdateRoomLevelInfo_descriptor_, &Room_SC_UpdateRoomLevelInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoRoomListRoomInfo_descriptor_, &ProtoRoomListRoomInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoRoomOutObj_descriptor_, &ProtoRoomOutObj::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Room_CS_SetRoomOutObj_descriptor_, &Room_CS_SetRoomOutObj::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Room_SC_SetRoomOutObj_descriptor_, &Room_SC_SetRoomOutObj::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Room_CS_MatchingQueueInfo_descriptor_, &Room_CS_MatchingQueueInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Room_SC_MatchingQueueInfo_descriptor_, &Room_SC_MatchingQueueInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Room_CS_GetRoomList_descriptor_, &Room_CS_GetRoomList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Room_SC_GetRoomList_descriptor_, &Room_SC_GetRoomList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Room_CS_CreateRoom_descriptor_, &Room_CS_CreateRoom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Room_SC_CreateRoom_descriptor_, &Room_SC_CreateRoom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Room_CS_ApplyRoom_descriptor_, &Room_CS_ApplyRoom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Room_SC_ApplyRoom_descriptor_, &Room_SC_ApplyRoom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Room_CS_RoomQuit_descriptor_, &Room_CS_RoomQuit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Room_SC_RoomQuit_descriptor_, &Room_SC_RoomQuit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Room_CS_RoomAppoint_descriptor_, &Room_CS_RoomAppoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Room_SC_RoomAppoint_descriptor_, &Room_SC_RoomAppoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Room_CS_RoomKick_descriptor_, &Room_CS_RoomKick::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Room_SC_RoomKick_descriptor_, &Room_SC_RoomKick::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Room_CS_TempLeave_descriptor_, &Room_CS_TempLeave::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Room_SC_TempLeave_descriptor_, &Room_SC_TempLeave::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Room_CS_RoomAuto_descriptor_, &Room_CS_RoomAuto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Room_SC_RoomAuto_descriptor_, &Room_SC_RoomAuto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Room_CS_MemberAuto_descriptor_, &Room_CS_MemberAuto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Room_SC_MemberAuto_descriptor_, &Room_SC_MemberAuto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Room_CS_RoomInvite_descriptor_, &Room_CS_RoomInvite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Room_SC_RoomInvite_descriptor_, &Room_SC_RoomInvite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Room_CS_SetRoomBeInvite_descriptor_, &Room_CS_SetRoomBeInvite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Room_SC_SetRoomBeInvite_descriptor_, &Room_SC_SetRoomBeInvite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Room_CS_SetRoomAllow_descriptor_, &Room_CS_SetRoomAllow::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Room_SC_SetRoomAllow_descriptor_, &Room_SC_SetRoomAllow::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Room_CS_SetRoomAllowOneTime_descriptor_, &Room_CS_SetRoomAllowOneTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Room_SC_SetRoomAllowOneTime_descriptor_, &Room_SC_SetRoomAllowOneTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Room_CS_UpdateRoomInfo_descriptor_, &Room_CS_UpdateRoomInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Room_SC_UpdateRoomInfo_descriptor_, &Room_SC_UpdateRoomInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Room_SC_UpdateRoomBeInvite_descriptor_, &Room_SC_UpdateRoomBeInvite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Room_SC_UpdateApplyList_descriptor_, &Room_SC_UpdateApplyList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Room_SC_UpdateRoomMemberTick_descriptor_, &Room_SC_UpdateRoomMemberTick::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Room_CS_FollowLeader_descriptor_, &Room_CS_FollowLeader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Room_SC_FollowLeader_descriptor_, &Room_SC_FollowLeader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Room_CS_SummonFollower_descriptor_, &Room_CS_SummonFollower::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Room_SC_SummonFollower_descriptor_, &Room_SC_SummonFollower::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Room_SC_LeaderSummon_descriptor_, &Room_SC_LeaderSummon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Room_CS_SetIgnoreRoomInvite_descriptor_, &Room_CS_SetIgnoreRoomInvite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Room_SC_SetIgnoreRoomInvite_descriptor_, &Room_SC_SetIgnoreRoomInvite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Room_CS_QueryIgnoreRoomInvite_descriptor_, &Room_CS_QueryIgnoreRoomInvite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Room_SC_QueryIgnoreRoomInvite_descriptor_, &Room_SC_QueryIgnoreRoomInvite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Room_SC_ErrorInfo_descriptor_, &Room_SC_ErrorInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoRoomManHPInfo_descriptor_, &ProtoRoomManHPInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Room_SC_UpdateCurrentHp_descriptor_, &Room_SC_UpdateCurrentHp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Room_CS_RoomReady_descriptor_, &Room_CS_RoomReady::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Room_SC_RoomReady_descriptor_, &Room_SC_RoomReady::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Battle2Game_GetRoomList_descriptor_, &Battle2Game_GetRoomList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_room_2eproto() {
  delete ProtoRoomManInfo::default_instance_;
  delete ProtoRoomManInfo_reflection_;
  delete ProtoRoomInfo::default_instance_;
  delete ProtoRoomInfo_reflection_;
  delete Room_SC_UpdateRoomLevelInfo::default_instance_;
  delete Room_SC_UpdateRoomLevelInfo_reflection_;
  delete ProtoRoomListRoomInfo::default_instance_;
  delete ProtoRoomListRoomInfo_reflection_;
  delete ProtoRoomOutObj::default_instance_;
  delete ProtoRoomOutObj_reflection_;
  delete Room_CS_SetRoomOutObj::default_instance_;
  delete Room_CS_SetRoomOutObj_reflection_;
  delete Room_SC_SetRoomOutObj::default_instance_;
  delete Room_SC_SetRoomOutObj_reflection_;
  delete Room_CS_MatchingQueueInfo::default_instance_;
  delete Room_CS_MatchingQueueInfo_reflection_;
  delete Room_SC_MatchingQueueInfo::default_instance_;
  delete Room_SC_MatchingQueueInfo_reflection_;
  delete Room_CS_GetRoomList::default_instance_;
  delete Room_CS_GetRoomList_reflection_;
  delete Room_SC_GetRoomList::default_instance_;
  delete Room_SC_GetRoomList_reflection_;
  delete Room_CS_CreateRoom::default_instance_;
  delete Room_CS_CreateRoom_reflection_;
  delete Room_SC_CreateRoom::default_instance_;
  delete Room_SC_CreateRoom_reflection_;
  delete Room_CS_ApplyRoom::default_instance_;
  delete Room_CS_ApplyRoom_reflection_;
  delete Room_SC_ApplyRoom::default_instance_;
  delete Room_SC_ApplyRoom_reflection_;
  delete Room_CS_RoomQuit::default_instance_;
  delete Room_CS_RoomQuit_reflection_;
  delete Room_SC_RoomQuit::default_instance_;
  delete Room_SC_RoomQuit_reflection_;
  delete Room_CS_RoomAppoint::default_instance_;
  delete Room_CS_RoomAppoint_reflection_;
  delete Room_SC_RoomAppoint::default_instance_;
  delete Room_SC_RoomAppoint_reflection_;
  delete Room_CS_RoomKick::default_instance_;
  delete Room_CS_RoomKick_reflection_;
  delete Room_SC_RoomKick::default_instance_;
  delete Room_SC_RoomKick_reflection_;
  delete Room_CS_TempLeave::default_instance_;
  delete Room_CS_TempLeave_reflection_;
  delete Room_SC_TempLeave::default_instance_;
  delete Room_SC_TempLeave_reflection_;
  delete Room_CS_RoomAuto::default_instance_;
  delete Room_CS_RoomAuto_reflection_;
  delete Room_SC_RoomAuto::default_instance_;
  delete Room_SC_RoomAuto_reflection_;
  delete Room_CS_MemberAuto::default_instance_;
  delete Room_CS_MemberAuto_reflection_;
  delete Room_SC_MemberAuto::default_instance_;
  delete Room_SC_MemberAuto_reflection_;
  delete Room_CS_RoomInvite::default_instance_;
  delete Room_CS_RoomInvite_reflection_;
  delete Room_SC_RoomInvite::default_instance_;
  delete Room_SC_RoomInvite_reflection_;
  delete Room_CS_SetRoomBeInvite::default_instance_;
  delete Room_CS_SetRoomBeInvite_reflection_;
  delete Room_SC_SetRoomBeInvite::default_instance_;
  delete Room_SC_SetRoomBeInvite_reflection_;
  delete Room_CS_SetRoomAllow::default_instance_;
  delete Room_CS_SetRoomAllow_reflection_;
  delete Room_SC_SetRoomAllow::default_instance_;
  delete Room_SC_SetRoomAllow_reflection_;
  delete Room_CS_SetRoomAllowOneTime::default_instance_;
  delete Room_CS_SetRoomAllowOneTime_reflection_;
  delete Room_SC_SetRoomAllowOneTime::default_instance_;
  delete Room_SC_SetRoomAllowOneTime_reflection_;
  delete Room_CS_UpdateRoomInfo::default_instance_;
  delete Room_CS_UpdateRoomInfo_reflection_;
  delete Room_SC_UpdateRoomInfo::default_instance_;
  delete Room_SC_UpdateRoomInfo_reflection_;
  delete Room_SC_UpdateRoomBeInvite::default_instance_;
  delete Room_SC_UpdateRoomBeInvite_reflection_;
  delete Room_SC_UpdateApplyList::default_instance_;
  delete Room_SC_UpdateApplyList_reflection_;
  delete Room_SC_UpdateRoomMemberTick::default_instance_;
  delete Room_SC_UpdateRoomMemberTick_reflection_;
  delete Room_CS_FollowLeader::default_instance_;
  delete Room_CS_FollowLeader_reflection_;
  delete Room_SC_FollowLeader::default_instance_;
  delete Room_SC_FollowLeader_reflection_;
  delete Room_CS_SummonFollower::default_instance_;
  delete Room_CS_SummonFollower_reflection_;
  delete Room_SC_SummonFollower::default_instance_;
  delete Room_SC_SummonFollower_reflection_;
  delete Room_SC_LeaderSummon::default_instance_;
  delete Room_SC_LeaderSummon_reflection_;
  delete Room_CS_SetIgnoreRoomInvite::default_instance_;
  delete Room_CS_SetIgnoreRoomInvite_reflection_;
  delete Room_SC_SetIgnoreRoomInvite::default_instance_;
  delete Room_SC_SetIgnoreRoomInvite_reflection_;
  delete Room_CS_QueryIgnoreRoomInvite::default_instance_;
  delete Room_CS_QueryIgnoreRoomInvite_reflection_;
  delete Room_SC_QueryIgnoreRoomInvite::default_instance_;
  delete Room_SC_QueryIgnoreRoomInvite_reflection_;
  delete Room_SC_ErrorInfo::default_instance_;
  delete Room_SC_ErrorInfo_reflection_;
  delete ProtoRoomManHPInfo::default_instance_;
  delete ProtoRoomManHPInfo_reflection_;
  delete Room_SC_UpdateCurrentHp::default_instance_;
  delete Room_SC_UpdateCurrentHp_reflection_;
  delete Room_CS_RoomReady::default_instance_;
  delete Room_CS_RoomReady_reflection_;
  delete Room_SC_RoomReady::default_instance_;
  delete Room_SC_RoomReady_reflection_;
  delete Battle2Game_GetRoomList::default_instance_;
  delete Battle2Game_GetRoomList_reflection_;
}

void protobuf_AddDesc_room_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::proto::message::protobuf_AddDesc_common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nroom.proto\022\rproto.message\032\014common.prot"
    "o\"\317\001\n\020ProtoRoomManInfo\022\r\n\005plyId\030\001 \002(\r\022\013\n"
    "\003job\030\002 \002(\005\022\r\n\005level\030\003 \002(\005\022\016\n\006status\030\004 \001("
    "\005\022\014\n\004name\030\005 \002(\t\022\024\n\014equipID_list\030\006 \003(\005\022\017\n"
    "\007plyuuid\030\007 \001(\004\022\020\n\010identity\030\010 \001(\005\022\016\n\006comb"
    "at\030\t \001(\005\022\017\n\007isReady\030\n \001(\010\022\030\n\020Demonhunter"
    "level\030\013 \001(\005\"\323\001\n\rProtoRoomInfo\022\016\n\006roomId\030"
    "\001 \002(\005\022\020\n\010numLimit\030\002 \002(\005\022\020\n\010leaderId\030\003 \001("
    "\r\022\020\n\010roomAuto\030\004 \002(\005\0222\n\nroomOutObj\030\005 \001(\0132"
    "\036.proto.message.ProtoRoomOutObj\0224\n\013roomM"
    "anList\030\006 \003(\0132\037.proto.message.ProtoRoomMa"
    "nInfo\022\022\n\nneedCombat\030\007 \001(\005\";\n\033Room_SC_Upd"
    "ateRoomLevelInfo\022\r\n\005plyId\030\001 \002(\005\022\r\n\005level"
    "\030\002 \002(\005\"\364\001\n\025ProtoRoomListRoomInfo\022\016\n\006room"
    "Id\030\001 \002(\005\022\021\n\tpeopleNum\030\002 \002(\005\022\020\n\010numLimit\030"
    "\003 \002(\005\0223\n\nleaderInfo\030\004 \001(\0132\037.proto.messag"
    "e.ProtoRoomManInfo\0222\n\nroomOutObj\030\005 \001(\0132\036"
    ".proto.message.ProtoRoomOutObj\022\023\n\013totalC"
    "ombat\030\006 \001(\005\022\024\n\014leaderCombat\030\007 \001(\005\022\022\n\nnee"
    "dCombat\030\010 \001(\005\"B\n\017ProtoRoomOutObj\022\013\n\003obj\030"
    "\001 \002(\005\022\020\n\010levelMin\030\002 \002(\005\022\020\n\010levelMax\030\003 \002("
    "\005\"D\n\025Room_CS_SetRoomOutObj\022+\n\003obj\030\001 \002(\0132"
    "\036.proto.message.ProtoRoomOutObj\"\'\n\025Room_"
    "SC_SetRoomOutObj\022\016\n\006result\030\001 \002(\005\"(\n\031Room"
    "_CS_MatchingQueueInfo\022\013\n\003obj\030\001 \002(\005\"N\n\031Ro"
    "om_SC_MatchingQueueInfo\022\020\n\010nRoomNum\030\001 \002("
    "\005\022\022\n\nnSingleNum\030\002 \002(\005\022\013\n\003obj\030\003 \002(\005\"\"\n\023Ro"
    "om_CS_GetRoomList\022\013\n\003obj\030\001 \002(\005\"]\n\023Room_S"
    "C_GetRoomList\022\016\n\006result\030\001 \002(\005\0226\n\010roomInf"
    "o\030\002 \003(\0132$.proto.message.ProtoRoomListRoo"
    "mInfo\"(\n\022Room_CS_CreateRoom\022\022\n\nneedComba"
    "t\030\001 \001(\005\"$\n\022Room_SC_CreateRoom\022\016\n\006result\030"
    "\001 \002(\005\"#\n\021Room_CS_ApplyRoom\022\016\n\006roomId\030\001 \002"
    "(\005\"3\n\021Room_SC_ApplyRoom\022\016\n\006result\030\001 \002(\005\022"
    "\016\n\006roomId\030\002 \001(\005\"\"\n\020Room_CS_RoomQuit\022\016\n\006r"
    "oomId\030\001 \002(\005\"\"\n\020Room_SC_RoomQuit\022\016\n\006resul"
    "t\030\001 \002(\005\"5\n\023Room_CS_RoomAppoint\022\r\n\005plyId\030"
    "\001 \002(\r\022\017\n\007appoint\030\002 \002(\005\"%\n\023Room_SC_RoomAp"
    "point\022\016\n\006result\030\001 \002(\005\"!\n\020Room_CS_RoomKic"
    "k\022\r\n\005plyId\030\001 \002(\r\"6\n\020Room_SC_RoomKick\022\016\n\006"
    "result\030\001 \002(\005\022\022\n\nbeKickName\030\002 \001(\t\"2\n\021Room"
    "_CS_TempLeave\022\r\n\005plyId\030\001 \002(\r\022\016\n\006status\030\002"
    " \002(\005\"#\n\021Room_SC_TempLeave\022\016\n\006result\030\001 \002("
    "\005\"\"\n\020Room_CS_RoomAuto\022\016\n\006isAuto\030\001 \002(\005\"\"\n"
    "\020Room_SC_RoomAuto\022\016\n\006result\030\001 \002(\005\"1\n\022Roo"
    "m_CS_MemberAuto\022\016\n\006isAuto\030\001 \002(\005\022\013\n\003obj\030\002"
    " \002(\005\"4\n\022Room_SC_MemberAuto\022\016\n\006result\030\001 \002"
    "(\005\022\016\n\006isAuto\030\002 \002(\005\"#\n\022Room_CS_RoomInvite"
    "\022\r\n\005plyId\030\001 \002(\004\"$\n\022Room_SC_RoomInvite\022\016\n"
    "\006result\030\001 \002(\005\"8\n\027Room_CS_SetRoomBeInvite"
    "\022\r\n\005allow\030\001 \002(\010\022\016\n\006roomId\030\002 \002(\005\")\n\027Room_"
    "SC_SetRoomBeInvite\022\016\n\006result\030\001 \002(\005\"4\n\024Ro"
    "om_CS_SetRoomAllow\022\r\n\005plyId\030\001 \002(\r\022\r\n\005all"
    "ow\030\002 \002(\010\"&\n\024Room_SC_SetRoomAllow\022\016\n\006resu"
    "lt\030\001 \002(\005\",\n\033Room_CS_SetRoomAllowOneTime\022"
    "\r\n\005allow\030\001 \002(\010\"-\n\033Room_SC_SetRoomAllowOn"
    "eTime\022\016\n\006result\030\001 \002(\005\"\030\n\026Room_CS_UpdateR"
    "oomInfo\"H\n\026Room_SC_UpdateRoomInfo\022.\n\010roo"
    "mInfo\030\001 \001(\0132\034.proto.message.ProtoRoomInf"
    "o\":\n\032Room_SC_UpdateRoomBeInvite\022\016\n\006roomI"
    "d\030\001 \002(\005\022\014\n\004name\030\002 \001(\t\"O\n\027Room_SC_UpdateA"
    "pplyList\0224\n\013roomManList\030\001 \003(\0132\037.proto.me"
    "ssage.ProtoRoomManInfo\",\n\034Room_SC_Update"
    "RoomMemberTick\022\014\n\004name\030\001 \001(\t\"\026\n\024Room_CS_"
    "FollowLeader\"]\n\024Room_SC_FollowLeader\022\016\n\006"
    "result\030\001 \002(\005\022\021\n\tchangeMap\030\002 \001(\010\022\"\n\002pt\030\003 "
    "\001(\0132\026.proto.message.Point3D\"\030\n\026Room_CS_S"
    "ummonFollower\"(\n\026Room_SC_SummonFollower\022"
    "\016\n\006result\030\001 \002(\005\"\026\n\024Room_SC_LeaderSummon\""
    ",\n\033Room_CS_SetIgnoreRoomInvite\022\r\n\005allow\030"
    "\001 \002(\010\"-\n\033Room_SC_SetIgnoreRoomInvite\022\016\n\006"
    "result\030\001 \002(\005\"\037\n\035Room_CS_QueryIgnoreRoomI"
    "nvite\".\n\035Room_SC_QueryIgnoreRoomInvite\022\r"
    "\n\005allow\030\001 \002(\010\"#\n\021Room_SC_ErrorInfo\022\016\n\006re"
    "sult\030\001 \002(\005\">\n\022ProtoRoomManHPInfo\022\r\n\005plyI"
    "d\030\001 \002(\r\022\r\n\005maxHp\030\002 \002(\r\022\n\n\002Hp\030\003 \002(\r\"L\n\027Ro"
    "om_SC_UpdateCurrentHp\0221\n\006HpList\030\001 \003(\0132!."
    "proto.message.ProtoRoomManHPInfo\"#\n\021Room"
    "_CS_RoomReady\022\016\n\006status\030\001 \002(\010\"#\n\021Room_SC"
    "_RoomReady\022\016\n\006result\030\001 \002(\005\"a\n\027Battle2Gam"
    "e_GetRoomList\022\016\n\006result\030\001 \002(\005\0226\n\010roomInf"
    "o\030\002 \003(\0132$.proto.message.ProtoRoomListRoo"
    "mInfo", 3285);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "room.proto", &protobuf_RegisterTypes);
  ProtoRoomManInfo::default_instance_ = new ProtoRoomManInfo();
  ProtoRoomInfo::default_instance_ = new ProtoRoomInfo();
  Room_SC_UpdateRoomLevelInfo::default_instance_ = new Room_SC_UpdateRoomLevelInfo();
  ProtoRoomListRoomInfo::default_instance_ = new ProtoRoomListRoomInfo();
  ProtoRoomOutObj::default_instance_ = new ProtoRoomOutObj();
  Room_CS_SetRoomOutObj::default_instance_ = new Room_CS_SetRoomOutObj();
  Room_SC_SetRoomOutObj::default_instance_ = new Room_SC_SetRoomOutObj();
  Room_CS_MatchingQueueInfo::default_instance_ = new Room_CS_MatchingQueueInfo();
  Room_SC_MatchingQueueInfo::default_instance_ = new Room_SC_MatchingQueueInfo();
  Room_CS_GetRoomList::default_instance_ = new Room_CS_GetRoomList();
  Room_SC_GetRoomList::default_instance_ = new Room_SC_GetRoomList();
  Room_CS_CreateRoom::default_instance_ = new Room_CS_CreateRoom();
  Room_SC_CreateRoom::default_instance_ = new Room_SC_CreateRoom();
  Room_CS_ApplyRoom::default_instance_ = new Room_CS_ApplyRoom();
  Room_SC_ApplyRoom::default_instance_ = new Room_SC_ApplyRoom();
  Room_CS_RoomQuit::default_instance_ = new Room_CS_RoomQuit();
  Room_SC_RoomQuit::default_instance_ = new Room_SC_RoomQuit();
  Room_CS_RoomAppoint::default_instance_ = new Room_CS_RoomAppoint();
  Room_SC_RoomAppoint::default_instance_ = new Room_SC_RoomAppoint();
  Room_CS_RoomKick::default_instance_ = new Room_CS_RoomKick();
  Room_SC_RoomKick::default_instance_ = new Room_SC_RoomKick();
  Room_CS_TempLeave::default_instance_ = new Room_CS_TempLeave();
  Room_SC_TempLeave::default_instance_ = new Room_SC_TempLeave();
  Room_CS_RoomAuto::default_instance_ = new Room_CS_RoomAuto();
  Room_SC_RoomAuto::default_instance_ = new Room_SC_RoomAuto();
  Room_CS_MemberAuto::default_instance_ = new Room_CS_MemberAuto();
  Room_SC_MemberAuto::default_instance_ = new Room_SC_MemberAuto();
  Room_CS_RoomInvite::default_instance_ = new Room_CS_RoomInvite();
  Room_SC_RoomInvite::default_instance_ = new Room_SC_RoomInvite();
  Room_CS_SetRoomBeInvite::default_instance_ = new Room_CS_SetRoomBeInvite();
  Room_SC_SetRoomBeInvite::default_instance_ = new Room_SC_SetRoomBeInvite();
  Room_CS_SetRoomAllow::default_instance_ = new Room_CS_SetRoomAllow();
  Room_SC_SetRoomAllow::default_instance_ = new Room_SC_SetRoomAllow();
  Room_CS_SetRoomAllowOneTime::default_instance_ = new Room_CS_SetRoomAllowOneTime();
  Room_SC_SetRoomAllowOneTime::default_instance_ = new Room_SC_SetRoomAllowOneTime();
  Room_CS_UpdateRoomInfo::default_instance_ = new Room_CS_UpdateRoomInfo();
  Room_SC_UpdateRoomInfo::default_instance_ = new Room_SC_UpdateRoomInfo();
  Room_SC_UpdateRoomBeInvite::default_instance_ = new Room_SC_UpdateRoomBeInvite();
  Room_SC_UpdateApplyList::default_instance_ = new Room_SC_UpdateApplyList();
  Room_SC_UpdateRoomMemberTick::default_instance_ = new Room_SC_UpdateRoomMemberTick();
  Room_CS_FollowLeader::default_instance_ = new Room_CS_FollowLeader();
  Room_SC_FollowLeader::default_instance_ = new Room_SC_FollowLeader();
  Room_CS_SummonFollower::default_instance_ = new Room_CS_SummonFollower();
  Room_SC_SummonFollower::default_instance_ = new Room_SC_SummonFollower();
  Room_SC_LeaderSummon::default_instance_ = new Room_SC_LeaderSummon();
  Room_CS_SetIgnoreRoomInvite::default_instance_ = new Room_CS_SetIgnoreRoomInvite();
  Room_SC_SetIgnoreRoomInvite::default_instance_ = new Room_SC_SetIgnoreRoomInvite();
  Room_CS_QueryIgnoreRoomInvite::default_instance_ = new Room_CS_QueryIgnoreRoomInvite();
  Room_SC_QueryIgnoreRoomInvite::default_instance_ = new Room_SC_QueryIgnoreRoomInvite();
  Room_SC_ErrorInfo::default_instance_ = new Room_SC_ErrorInfo();
  ProtoRoomManHPInfo::default_instance_ = new ProtoRoomManHPInfo();
  Room_SC_UpdateCurrentHp::default_instance_ = new Room_SC_UpdateCurrentHp();
  Room_CS_RoomReady::default_instance_ = new Room_CS_RoomReady();
  Room_SC_RoomReady::default_instance_ = new Room_SC_RoomReady();
  Battle2Game_GetRoomList::default_instance_ = new Battle2Game_GetRoomList();
  ProtoRoomManInfo::default_instance_->InitAsDefaultInstance();
  ProtoRoomInfo::default_instance_->InitAsDefaultInstance();
  Room_SC_UpdateRoomLevelInfo::default_instance_->InitAsDefaultInstance();
  ProtoRoomListRoomInfo::default_instance_->InitAsDefaultInstance();
  ProtoRoomOutObj::default_instance_->InitAsDefaultInstance();
  Room_CS_SetRoomOutObj::default_instance_->InitAsDefaultInstance();
  Room_SC_SetRoomOutObj::default_instance_->InitAsDefaultInstance();
  Room_CS_MatchingQueueInfo::default_instance_->InitAsDefaultInstance();
  Room_SC_MatchingQueueInfo::default_instance_->InitAsDefaultInstance();
  Room_CS_GetRoomList::default_instance_->InitAsDefaultInstance();
  Room_SC_GetRoomList::default_instance_->InitAsDefaultInstance();
  Room_CS_CreateRoom::default_instance_->InitAsDefaultInstance();
  Room_SC_CreateRoom::default_instance_->InitAsDefaultInstance();
  Room_CS_ApplyRoom::default_instance_->InitAsDefaultInstance();
  Room_SC_ApplyRoom::default_instance_->InitAsDefaultInstance();
  Room_CS_RoomQuit::default_instance_->InitAsDefaultInstance();
  Room_SC_RoomQuit::default_instance_->InitAsDefaultInstance();
  Room_CS_RoomAppoint::default_instance_->InitAsDefaultInstance();
  Room_SC_RoomAppoint::default_instance_->InitAsDefaultInstance();
  Room_CS_RoomKick::default_instance_->InitAsDefaultInstance();
  Room_SC_RoomKick::default_instance_->InitAsDefaultInstance();
  Room_CS_TempLeave::default_instance_->InitAsDefaultInstance();
  Room_SC_TempLeave::default_instance_->InitAsDefaultInstance();
  Room_CS_RoomAuto::default_instance_->InitAsDefaultInstance();
  Room_SC_RoomAuto::default_instance_->InitAsDefaultInstance();
  Room_CS_MemberAuto::default_instance_->InitAsDefaultInstance();
  Room_SC_MemberAuto::default_instance_->InitAsDefaultInstance();
  Room_CS_RoomInvite::default_instance_->InitAsDefaultInstance();
  Room_SC_RoomInvite::default_instance_->InitAsDefaultInstance();
  Room_CS_SetRoomBeInvite::default_instance_->InitAsDefaultInstance();
  Room_SC_SetRoomBeInvite::default_instance_->InitAsDefaultInstance();
  Room_CS_SetRoomAllow::default_instance_->InitAsDefaultInstance();
  Room_SC_SetRoomAllow::default_instance_->InitAsDefaultInstance();
  Room_CS_SetRoomAllowOneTime::default_instance_->InitAsDefaultInstance();
  Room_SC_SetRoomAllowOneTime::default_instance_->InitAsDefaultInstance();
  Room_CS_UpdateRoomInfo::default_instance_->InitAsDefaultInstance();
  Room_SC_UpdateRoomInfo::default_instance_->InitAsDefaultInstance();
  Room_SC_UpdateRoomBeInvite::default_instance_->InitAsDefaultInstance();
  Room_SC_UpdateApplyList::default_instance_->InitAsDefaultInstance();
  Room_SC_UpdateRoomMemberTick::default_instance_->InitAsDefaultInstance();
  Room_CS_FollowLeader::default_instance_->InitAsDefaultInstance();
  Room_SC_FollowLeader::default_instance_->InitAsDefaultInstance();
  Room_CS_SummonFollower::default_instance_->InitAsDefaultInstance();
  Room_SC_SummonFollower::default_instance_->InitAsDefaultInstance();
  Room_SC_LeaderSummon::default_instance_->InitAsDefaultInstance();
  Room_CS_SetIgnoreRoomInvite::default_instance_->InitAsDefaultInstance();
  Room_SC_SetIgnoreRoomInvite::default_instance_->InitAsDefaultInstance();
  Room_CS_QueryIgnoreRoomInvite::default_instance_->InitAsDefaultInstance();
  Room_SC_QueryIgnoreRoomInvite::default_instance_->InitAsDefaultInstance();
  Room_SC_ErrorInfo::default_instance_->InitAsDefaultInstance();
  ProtoRoomManHPInfo::default_instance_->InitAsDefaultInstance();
  Room_SC_UpdateCurrentHp::default_instance_->InitAsDefaultInstance();
  Room_CS_RoomReady::default_instance_->InitAsDefaultInstance();
  Room_SC_RoomReady::default_instance_->InitAsDefaultInstance();
  Battle2Game_GetRoomList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_room_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_room_2eproto {
  StaticDescriptorInitializer_room_2eproto() {
    protobuf_AddDesc_room_2eproto();
  }
} static_descriptor_initializer_room_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ProtoRoomManInfo::kPlyIdFieldNumber;
const int ProtoRoomManInfo::kJobFieldNumber;
const int ProtoRoomManInfo::kLevelFieldNumber;
const int ProtoRoomManInfo::kStatusFieldNumber;
const int ProtoRoomManInfo::kNameFieldNumber;
const int ProtoRoomManInfo::kEquipIDListFieldNumber;
const int ProtoRoomManInfo::kPlyuuidFieldNumber;
const int ProtoRoomManInfo::kIdentityFieldNumber;
const int ProtoRoomManInfo::kCombatFieldNumber;
const int ProtoRoomManInfo::kIsReadyFieldNumber;
const int ProtoRoomManInfo::kDemonhunterlevelFieldNumber;
#endif  // !_MSC_VER

ProtoRoomManInfo::ProtoRoomManInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoRoomManInfo::InitAsDefaultInstance() {
}

ProtoRoomManInfo::ProtoRoomManInfo(const ProtoRoomManInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoRoomManInfo::SharedCtor() {
  _cached_size_ = 0;
  plyid_ = 0u;
  job_ = 0;
  level_ = 0;
  status_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  plyuuid_ = GOOGLE_ULONGLONG(0);
  identity_ = 0;
  combat_ = 0;
  isready_ = false;
  demonhunterlevel_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoRoomManInfo::~ProtoRoomManInfo() {
  SharedDtor();
}

void ProtoRoomManInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ProtoRoomManInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoRoomManInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoRoomManInfo_descriptor_;
}

const ProtoRoomManInfo& ProtoRoomManInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_room_2eproto();
  return *default_instance_;
}

ProtoRoomManInfo* ProtoRoomManInfo::default_instance_ = NULL;

ProtoRoomManInfo* ProtoRoomManInfo::New() const {
  return new ProtoRoomManInfo;
}

void ProtoRoomManInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    plyid_ = 0u;
    job_ = 0;
    level_ = 0;
    status_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    plyuuid_ = GOOGLE_ULONGLONG(0);
    identity_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    combat_ = 0;
    isready_ = false;
    demonhunterlevel_ = 0;
  }
  equipid_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoRoomManInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 plyId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &plyid_)));
          set_has_plyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_job;
        break;
      }

      // required int32 job = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &job_)));
          set_has_job();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // required int32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_status;
        break;
      }

      // optional int32 status = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }

      // required string name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_equipID_list;
        break;
      }

      // repeated int32 equipID_list = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equipID_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_equipid_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_equipid_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_equipID_list;
        if (input->ExpectTag(56)) goto parse_plyuuid;
        break;
      }

      // optional uint64 plyuuid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_plyuuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &plyuuid_)));
          set_has_plyuuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_identity;
        break;
      }

      // optional int32 identity = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_identity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &identity_)));
          set_has_identity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_combat;
        break;
      }

      // optional int32 combat = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_combat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &combat_)));
          set_has_combat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_isReady;
        break;
      }

      // optional bool isReady = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isReady:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isready_)));
          set_has_isready();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_Demonhunterlevel;
        break;
      }

      // optional int32 Demonhunterlevel = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Demonhunterlevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &demonhunterlevel_)));
          set_has_demonhunterlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoRoomManInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 plyId = 1;
  if (has_plyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->plyid(), output);
  }

  // required int32 job = 2;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->job(), output);
  }

  // required int32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }

  // optional int32 status = 4;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->status(), output);
  }

  // required string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->name(), output);
  }

  // repeated int32 equipID_list = 6;
  for (int i = 0; i < this->equipid_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->equipid_list(i), output);
  }

  // optional uint64 plyuuid = 7;
  if (has_plyuuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->plyuuid(), output);
  }

  // optional int32 identity = 8;
  if (has_identity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->identity(), output);
  }

  // optional int32 combat = 9;
  if (has_combat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->combat(), output);
  }

  // optional bool isReady = 10;
  if (has_isready()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->isready(), output);
  }

  // optional int32 Demonhunterlevel = 11;
  if (has_demonhunterlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->demonhunterlevel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoRoomManInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 plyId = 1;
  if (has_plyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->plyid(), target);
  }

  // required int32 job = 2;
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->job(), target);
  }

  // required int32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }

  // optional int32 status = 4;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->status(), target);
  }

  // required string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }

  // repeated int32 equipID_list = 6;
  for (int i = 0; i < this->equipid_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->equipid_list(i), target);
  }

  // optional uint64 plyuuid = 7;
  if (has_plyuuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->plyuuid(), target);
  }

  // optional int32 identity = 8;
  if (has_identity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->identity(), target);
  }

  // optional int32 combat = 9;
  if (has_combat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->combat(), target);
  }

  // optional bool isReady = 10;
  if (has_isready()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->isready(), target);
  }

  // optional int32 Demonhunterlevel = 11;
  if (has_demonhunterlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->demonhunterlevel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoRoomManInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 plyId = 1;
    if (has_plyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->plyid());
    }

    // required int32 job = 2;
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->job());
    }

    // required int32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 status = 4;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // required string name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint64 plyuuid = 7;
    if (has_plyuuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->plyuuid());
    }

    // optional int32 identity = 8;
    if (has_identity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->identity());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 combat = 9;
    if (has_combat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->combat());
    }

    // optional bool isReady = 10;
    if (has_isready()) {
      total_size += 1 + 1;
    }

    // optional int32 Demonhunterlevel = 11;
    if (has_demonhunterlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->demonhunterlevel());
    }

  }
  // repeated int32 equipID_list = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->equipid_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->equipid_list(i));
    }
    total_size += 1 * this->equipid_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoRoomManInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoRoomManInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoRoomManInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoRoomManInfo::MergeFrom(const ProtoRoomManInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  equipid_list_.MergeFrom(from.equipid_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_plyid()) {
      set_plyid(from.plyid());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_plyuuid()) {
      set_plyuuid(from.plyuuid());
    }
    if (from.has_identity()) {
      set_identity(from.identity());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_combat()) {
      set_combat(from.combat());
    }
    if (from.has_isready()) {
      set_isready(from.isready());
    }
    if (from.has_demonhunterlevel()) {
      set_demonhunterlevel(from.demonhunterlevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoRoomManInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoRoomManInfo::CopyFrom(const ProtoRoomManInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoRoomManInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000017) != 0x00000017) return false;

  return true;
}

void ProtoRoomManInfo::Swap(ProtoRoomManInfo* other) {
  if (other != this) {
    std::swap(plyid_, other->plyid_);
    std::swap(job_, other->job_);
    std::swap(level_, other->level_);
    std::swap(status_, other->status_);
    std::swap(name_, other->name_);
    equipid_list_.Swap(&other->equipid_list_);
    std::swap(plyuuid_, other->plyuuid_);
    std::swap(identity_, other->identity_);
    std::swap(combat_, other->combat_);
    std::swap(isready_, other->isready_);
    std::swap(demonhunterlevel_, other->demonhunterlevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoRoomManInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoRoomManInfo_descriptor_;
  metadata.reflection = ProtoRoomManInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoRoomInfo::kRoomIdFieldNumber;
const int ProtoRoomInfo::kNumLimitFieldNumber;
const int ProtoRoomInfo::kLeaderIdFieldNumber;
const int ProtoRoomInfo::kRoomAutoFieldNumber;
const int ProtoRoomInfo::kRoomOutObjFieldNumber;
const int ProtoRoomInfo::kRoomManListFieldNumber;
const int ProtoRoomInfo::kNeedCombatFieldNumber;
#endif  // !_MSC_VER

ProtoRoomInfo::ProtoRoomInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoRoomInfo::InitAsDefaultInstance() {
  roomoutobj_ = const_cast< ::proto::message::ProtoRoomOutObj*>(&::proto::message::ProtoRoomOutObj::default_instance());
}

ProtoRoomInfo::ProtoRoomInfo(const ProtoRoomInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoRoomInfo::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = 0;
  numlimit_ = 0;
  leaderid_ = 0u;
  roomauto_ = 0;
  roomoutobj_ = NULL;
  needcombat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoRoomInfo::~ProtoRoomInfo() {
  SharedDtor();
}

void ProtoRoomInfo::SharedDtor() {
  if (this != default_instance_) {
    delete roomoutobj_;
  }
}

void ProtoRoomInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoRoomInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoRoomInfo_descriptor_;
}

const ProtoRoomInfo& ProtoRoomInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_room_2eproto();
  return *default_instance_;
}

ProtoRoomInfo* ProtoRoomInfo::default_instance_ = NULL;

ProtoRoomInfo* ProtoRoomInfo::New() const {
  return new ProtoRoomInfo;
}

void ProtoRoomInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roomid_ = 0;
    numlimit_ = 0;
    leaderid_ = 0u;
    roomauto_ = 0;
    if (has_roomoutobj()) {
      if (roomoutobj_ != NULL) roomoutobj_->::proto::message::ProtoRoomOutObj::Clear();
    }
    needcombat_ = 0;
  }
  roommanlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoRoomInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roomId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_numLimit;
        break;
      }

      // required int32 numLimit = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_numLimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numlimit_)));
          set_has_numlimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_leaderId;
        break;
      }

      // optional uint32 leaderId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leaderId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leaderid_)));
          set_has_leaderid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_roomAuto;
        break;
      }

      // required int32 roomAuto = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomAuto:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomauto_)));
          set_has_roomauto();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_roomOutObj;
        break;
      }

      // optional .proto.message.ProtoRoomOutObj roomOutObj = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roomOutObj:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_roomoutobj()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_roomManList;
        break;
      }

      // repeated .proto.message.ProtoRoomManInfo roomManList = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roomManList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_roommanlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_roomManList;
        if (input->ExpectTag(56)) goto parse_needCombat;
        break;
      }

      // optional int32 needCombat = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_needCombat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &needcombat_)));
          set_has_needcombat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoRoomInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roomId = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }

  // required int32 numLimit = 2;
  if (has_numlimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->numlimit(), output);
  }

  // optional uint32 leaderId = 3;
  if (has_leaderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->leaderid(), output);
  }

  // required int32 roomAuto = 4;
  if (has_roomauto()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->roomauto(), output);
  }

  // optional .proto.message.ProtoRoomOutObj roomOutObj = 5;
  if (has_roomoutobj()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->roomoutobj(), output);
  }

  // repeated .proto.message.ProtoRoomManInfo roomManList = 6;
  for (int i = 0; i < this->roommanlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->roommanlist(i), output);
  }

  // optional int32 needCombat = 7;
  if (has_needcombat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->needcombat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoRoomInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roomId = 1;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
  }

  // required int32 numLimit = 2;
  if (has_numlimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->numlimit(), target);
  }

  // optional uint32 leaderId = 3;
  if (has_leaderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->leaderid(), target);
  }

  // required int32 roomAuto = 4;
  if (has_roomauto()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->roomauto(), target);
  }

  // optional .proto.message.ProtoRoomOutObj roomOutObj = 5;
  if (has_roomoutobj()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->roomoutobj(), target);
  }

  // repeated .proto.message.ProtoRoomManInfo roomManList = 6;
  for (int i = 0; i < this->roommanlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->roommanlist(i), target);
  }

  // optional int32 needCombat = 7;
  if (has_needcombat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->needcombat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoRoomInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roomId = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

    // required int32 numLimit = 2;
    if (has_numlimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->numlimit());
    }

    // optional uint32 leaderId = 3;
    if (has_leaderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leaderid());
    }

    // required int32 roomAuto = 4;
    if (has_roomauto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomauto());
    }

    // optional .proto.message.ProtoRoomOutObj roomOutObj = 5;
    if (has_roomoutobj()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->roomoutobj());
    }

    // optional int32 needCombat = 7;
    if (has_needcombat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->needcombat());
    }

  }
  // repeated .proto.message.ProtoRoomManInfo roomManList = 6;
  total_size += 1 * this->roommanlist_size();
  for (int i = 0; i < this->roommanlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->roommanlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoRoomInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoRoomInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoRoomInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoRoomInfo::MergeFrom(const ProtoRoomInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  roommanlist_.MergeFrom(from.roommanlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_numlimit()) {
      set_numlimit(from.numlimit());
    }
    if (from.has_leaderid()) {
      set_leaderid(from.leaderid());
    }
    if (from.has_roomauto()) {
      set_roomauto(from.roomauto());
    }
    if (from.has_roomoutobj()) {
      mutable_roomoutobj()->::proto::message::ProtoRoomOutObj::MergeFrom(from.roomoutobj());
    }
    if (from.has_needcombat()) {
      set_needcombat(from.needcombat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoRoomInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoRoomInfo::CopyFrom(const ProtoRoomInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoRoomInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  if (has_roomoutobj()) {
    if (!this->roomoutobj().IsInitialized()) return false;
  }
  for (int i = 0; i < roommanlist_size(); i++) {
    if (!this->roommanlist(i).IsInitialized()) return false;
  }
  return true;
}

void ProtoRoomInfo::Swap(ProtoRoomInfo* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(numlimit_, other->numlimit_);
    std::swap(leaderid_, other->leaderid_);
    std::swap(roomauto_, other->roomauto_);
    std::swap(roomoutobj_, other->roomoutobj_);
    roommanlist_.Swap(&other->roommanlist_);
    std::swap(needcombat_, other->needcombat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoRoomInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoRoomInfo_descriptor_;
  metadata.reflection = ProtoRoomInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Room_SC_UpdateRoomLevelInfo::kPlyIdFieldNumber;
const int Room_SC_UpdateRoomLevelInfo::kLevelFieldNumber;
#endif  // !_MSC_VER

Room_SC_UpdateRoomLevelInfo::Room_SC_UpdateRoomLevelInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Room_SC_UpdateRoomLevelInfo::InitAsDefaultInstance() {
}

Room_SC_UpdateRoomLevelInfo::Room_SC_UpdateRoomLevelInfo(const Room_SC_UpdateRoomLevelInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Room_SC_UpdateRoomLevelInfo::SharedCtor() {
  _cached_size_ = 0;
  plyid_ = 0;
  level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Room_SC_UpdateRoomLevelInfo::~Room_SC_UpdateRoomLevelInfo() {
  SharedDtor();
}

void Room_SC_UpdateRoomLevelInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Room_SC_UpdateRoomLevelInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Room_SC_UpdateRoomLevelInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Room_SC_UpdateRoomLevelInfo_descriptor_;
}

const Room_SC_UpdateRoomLevelInfo& Room_SC_UpdateRoomLevelInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_room_2eproto();
  return *default_instance_;
}

Room_SC_UpdateRoomLevelInfo* Room_SC_UpdateRoomLevelInfo::default_instance_ = NULL;

Room_SC_UpdateRoomLevelInfo* Room_SC_UpdateRoomLevelInfo::New() const {
  return new Room_SC_UpdateRoomLevelInfo;
}

void Room_SC_UpdateRoomLevelInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    plyid_ = 0;
    level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Room_SC_UpdateRoomLevelInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 plyId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &plyid_)));
          set_has_plyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // required int32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Room_SC_UpdateRoomLevelInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 plyId = 1;
  if (has_plyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->plyid(), output);
  }

  // required int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Room_SC_UpdateRoomLevelInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 plyId = 1;
  if (has_plyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->plyid(), target);
  }

  // required int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Room_SC_UpdateRoomLevelInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 plyId = 1;
    if (has_plyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->plyid());
    }

    // required int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Room_SC_UpdateRoomLevelInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Room_SC_UpdateRoomLevelInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Room_SC_UpdateRoomLevelInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Room_SC_UpdateRoomLevelInfo::MergeFrom(const Room_SC_UpdateRoomLevelInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_plyid()) {
      set_plyid(from.plyid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Room_SC_UpdateRoomLevelInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Room_SC_UpdateRoomLevelInfo::CopyFrom(const Room_SC_UpdateRoomLevelInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Room_SC_UpdateRoomLevelInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Room_SC_UpdateRoomLevelInfo::Swap(Room_SC_UpdateRoomLevelInfo* other) {
  if (other != this) {
    std::swap(plyid_, other->plyid_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Room_SC_UpdateRoomLevelInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Room_SC_UpdateRoomLevelInfo_descriptor_;
  metadata.reflection = Room_SC_UpdateRoomLevelInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoRoomListRoomInfo::kRoomIdFieldNumber;
const int ProtoRoomListRoomInfo::kPeopleNumFieldNumber;
const int ProtoRoomListRoomInfo::kNumLimitFieldNumber;
const int ProtoRoomListRoomInfo::kLeaderInfoFieldNumber;
const int ProtoRoomListRoomInfo::kRoomOutObjFieldNumber;
const int ProtoRoomListRoomInfo::kTotalCombatFieldNumber;
const int ProtoRoomListRoomInfo::kLeaderCombatFieldNumber;
const int ProtoRoomListRoomInfo::kNeedCombatFieldNumber;
#endif  // !_MSC_VER

ProtoRoomListRoomInfo::ProtoRoomListRoomInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoRoomListRoomInfo::InitAsDefaultInstance() {
  leaderinfo_ = const_cast< ::proto::message::ProtoRoomManInfo*>(&::proto::message::ProtoRoomManInfo::default_instance());
  roomoutobj_ = const_cast< ::proto::message::ProtoRoomOutObj*>(&::proto::message::ProtoRoomOutObj::default_instance());
}

ProtoRoomListRoomInfo::ProtoRoomListRoomInfo(const ProtoRoomListRoomInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoRoomListRoomInfo::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = 0;
  peoplenum_ = 0;
  numlimit_ = 0;
  leaderinfo_ = NULL;
  roomoutobj_ = NULL;
  totalcombat_ = 0;
  leadercombat_ = 0;
  needcombat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoRoomListRoomInfo::~ProtoRoomListRoomInfo() {
  SharedDtor();
}

void ProtoRoomListRoomInfo::SharedDtor() {
  if (this != default_instance_) {
    delete leaderinfo_;
    delete roomoutobj_;
  }
}

void ProtoRoomListRoomInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoRoomListRoomInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoRoomListRoomInfo_descriptor_;
}

const ProtoRoomListRoomInfo& ProtoRoomListRoomInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_room_2eproto();
  return *default_instance_;
}

ProtoRoomListRoomInfo* ProtoRoomListRoomInfo::default_instance_ = NULL;

ProtoRoomListRoomInfo* ProtoRoomListRoomInfo::New() const {
  return new ProtoRoomListRoomInfo;
}

void ProtoRoomListRoomInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roomid_ = 0;
    peoplenum_ = 0;
    numlimit_ = 0;
    if (has_leaderinfo()) {
      if (leaderinfo_ != NULL) leaderinfo_->::proto::message::ProtoRoomManInfo::Clear();
    }
    if (has_roomoutobj()) {
      if (roomoutobj_ != NULL) roomoutobj_->::proto::message::ProtoRoomOutObj::Clear();
    }
    totalcombat_ = 0;
    leadercombat_ = 0;
    needcombat_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoRoomListRoomInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roomId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_peopleNum;
        break;
      }

      // required int32 peopleNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_peopleNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &peoplenum_)));
          set_has_peoplenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_numLimit;
        break;
      }

      // required int32 numLimit = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_numLimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numlimit_)));
          set_has_numlimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_leaderInfo;
        break;
      }

      // optional .proto.message.ProtoRoomManInfo leaderInfo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leaderInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_leaderinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_roomOutObj;
        break;
      }

      // optional .proto.message.ProtoRoomOutObj roomOutObj = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roomOutObj:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_roomoutobj()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_totalCombat;
        break;
      }

      // optional int32 totalCombat = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalCombat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalcombat_)));
          set_has_totalcombat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_leaderCombat;
        break;
      }

      // optional int32 leaderCombat = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leaderCombat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leadercombat_)));
          set_has_leadercombat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_needCombat;
        break;
      }

      // optional int32 needCombat = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_needCombat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &needcombat_)));
          set_has_needcombat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoRoomListRoomInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roomId = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }

  // required int32 peopleNum = 2;
  if (has_peoplenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->peoplenum(), output);
  }

  // required int32 numLimit = 3;
  if (has_numlimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->numlimit(), output);
  }

  // optional .proto.message.ProtoRoomManInfo leaderInfo = 4;
  if (has_leaderinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->leaderinfo(), output);
  }

  // optional .proto.message.ProtoRoomOutObj roomOutObj = 5;
  if (has_roomoutobj()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->roomoutobj(), output);
  }

  // optional int32 totalCombat = 6;
  if (has_totalcombat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->totalcombat(), output);
  }

  // optional int32 leaderCombat = 7;
  if (has_leadercombat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->leadercombat(), output);
  }

  // optional int32 needCombat = 8;
  if (has_needcombat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->needcombat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoRoomListRoomInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roomId = 1;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
  }

  // required int32 peopleNum = 2;
  if (has_peoplenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->peoplenum(), target);
  }

  // required int32 numLimit = 3;
  if (has_numlimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->numlimit(), target);
  }

  // optional .proto.message.ProtoRoomManInfo leaderInfo = 4;
  if (has_leaderinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->leaderinfo(), target);
  }

  // optional .proto.message.ProtoRoomOutObj roomOutObj = 5;
  if (has_roomoutobj()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->roomoutobj(), target);
  }

  // optional int32 totalCombat = 6;
  if (has_totalcombat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->totalcombat(), target);
  }

  // optional int32 leaderCombat = 7;
  if (has_leadercombat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->leadercombat(), target);
  }

  // optional int32 needCombat = 8;
  if (has_needcombat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->needcombat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoRoomListRoomInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roomId = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

    // required int32 peopleNum = 2;
    if (has_peoplenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->peoplenum());
    }

    // required int32 numLimit = 3;
    if (has_numlimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->numlimit());
    }

    // optional .proto.message.ProtoRoomManInfo leaderInfo = 4;
    if (has_leaderinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->leaderinfo());
    }

    // optional .proto.message.ProtoRoomOutObj roomOutObj = 5;
    if (has_roomoutobj()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->roomoutobj());
    }

    // optional int32 totalCombat = 6;
    if (has_totalcombat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalcombat());
    }

    // optional int32 leaderCombat = 7;
    if (has_leadercombat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leadercombat());
    }

    // optional int32 needCombat = 8;
    if (has_needcombat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->needcombat());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoRoomListRoomInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoRoomListRoomInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoRoomListRoomInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoRoomListRoomInfo::MergeFrom(const ProtoRoomListRoomInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_peoplenum()) {
      set_peoplenum(from.peoplenum());
    }
    if (from.has_numlimit()) {
      set_numlimit(from.numlimit());
    }
    if (from.has_leaderinfo()) {
      mutable_leaderinfo()->::proto::message::ProtoRoomManInfo::MergeFrom(from.leaderinfo());
    }
    if (from.has_roomoutobj()) {
      mutable_roomoutobj()->::proto::message::ProtoRoomOutObj::MergeFrom(from.roomoutobj());
    }
    if (from.has_totalcombat()) {
      set_totalcombat(from.totalcombat());
    }
    if (from.has_leadercombat()) {
      set_leadercombat(from.leadercombat());
    }
    if (from.has_needcombat()) {
      set_needcombat(from.needcombat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoRoomListRoomInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoRoomListRoomInfo::CopyFrom(const ProtoRoomListRoomInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoRoomListRoomInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_leaderinfo()) {
    if (!this->leaderinfo().IsInitialized()) return false;
  }
  if (has_roomoutobj()) {
    if (!this->roomoutobj().IsInitialized()) return false;
  }
  return true;
}

void ProtoRoomListRoomInfo::Swap(ProtoRoomListRoomInfo* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(peoplenum_, other->peoplenum_);
    std::swap(numlimit_, other->numlimit_);
    std::swap(leaderinfo_, other->leaderinfo_);
    std::swap(roomoutobj_, other->roomoutobj_);
    std::swap(totalcombat_, other->totalcombat_);
    std::swap(leadercombat_, other->leadercombat_);
    std::swap(needcombat_, other->needcombat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoRoomListRoomInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoRoomListRoomInfo_descriptor_;
  metadata.reflection = ProtoRoomListRoomInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoRoomOutObj::kObjFieldNumber;
const int ProtoRoomOutObj::kLevelMinFieldNumber;
const int ProtoRoomOutObj::kLevelMaxFieldNumber;
#endif  // !_MSC_VER

ProtoRoomOutObj::ProtoRoomOutObj()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoRoomOutObj::InitAsDefaultInstance() {
}

ProtoRoomOutObj::ProtoRoomOutObj(const ProtoRoomOutObj& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoRoomOutObj::SharedCtor() {
  _cached_size_ = 0;
  obj_ = 0;
  levelmin_ = 0;
  levelmax_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoRoomOutObj::~ProtoRoomOutObj() {
  SharedDtor();
}

void ProtoRoomOutObj::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoRoomOutObj::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoRoomOutObj::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoRoomOutObj_descriptor_;
}

const ProtoRoomOutObj& ProtoRoomOutObj::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_room_2eproto();
  return *default_instance_;
}

ProtoRoomOutObj* ProtoRoomOutObj::default_instance_ = NULL;

ProtoRoomOutObj* ProtoRoomOutObj::New() const {
  return new ProtoRoomOutObj;
}

void ProtoRoomOutObj::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    obj_ = 0;
    levelmin_ = 0;
    levelmax_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoRoomOutObj::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 obj = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &obj_)));
          set_has_obj();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_levelMin;
        break;
      }

      // required int32 levelMin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_levelMin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &levelmin_)));
          set_has_levelmin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_levelMax;
        break;
      }

      // required int32 levelMax = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_levelMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &levelmax_)));
          set_has_levelmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoRoomOutObj::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 obj = 1;
  if (has_obj()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->obj(), output);
  }

  // required int32 levelMin = 2;
  if (has_levelmin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->levelmin(), output);
  }

  // required int32 levelMax = 3;
  if (has_levelmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->levelmax(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoRoomOutObj::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 obj = 1;
  if (has_obj()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->obj(), target);
  }

  // required int32 levelMin = 2;
  if (has_levelmin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->levelmin(), target);
  }

  // required int32 levelMax = 3;
  if (has_levelmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->levelmax(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoRoomOutObj::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 obj = 1;
    if (has_obj()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->obj());
    }

    // required int32 levelMin = 2;
    if (has_levelmin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->levelmin());
    }

    // required int32 levelMax = 3;
    if (has_levelmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->levelmax());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoRoomOutObj::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoRoomOutObj* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoRoomOutObj*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoRoomOutObj::MergeFrom(const ProtoRoomOutObj& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_obj()) {
      set_obj(from.obj());
    }
    if (from.has_levelmin()) {
      set_levelmin(from.levelmin());
    }
    if (from.has_levelmax()) {
      set_levelmax(from.levelmax());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoRoomOutObj::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoRoomOutObj::CopyFrom(const ProtoRoomOutObj& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoRoomOutObj::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ProtoRoomOutObj::Swap(ProtoRoomOutObj* other) {
  if (other != this) {
    std::swap(obj_, other->obj_);
    std::swap(levelmin_, other->levelmin_);
    std::swap(levelmax_, other->levelmax_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoRoomOutObj::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoRoomOutObj_descriptor_;
  metadata.reflection = ProtoRoomOutObj_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Room_CS_SetRoomOutObj::kObjFieldNumber;
#endif  // !_MSC_VER

Room_CS_SetRoomOutObj::Room_CS_SetRoomOutObj()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Room_CS_SetRoomOutObj::InitAsDefaultInstance() {
  obj_ = const_cast< ::proto::message::ProtoRoomOutObj*>(&::proto::message::ProtoRoomOutObj::default_instance());
}

Room_CS_SetRoomOutObj::Room_CS_SetRoomOutObj(const Room_CS_SetRoomOutObj& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Room_CS_SetRoomOutObj::SharedCtor() {
  _cached_size_ = 0;
  obj_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Room_CS_SetRoomOutObj::~Room_CS_SetRoomOutObj() {
  SharedDtor();
}

void Room_CS_SetRoomOutObj::SharedDtor() {
  if (this != default_instance_) {
    delete obj_;
  }
}

void Room_CS_SetRoomOutObj::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Room_CS_SetRoomOutObj::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Room_CS_SetRoomOutObj_descriptor_;
}

const Room_CS_SetRoomOutObj& Room_CS_SetRoomOutObj::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_room_2eproto();
  return *default_instance_;
}

Room_CS_SetRoomOutObj* Room_CS_SetRoomOutObj::default_instance_ = NULL;

Room_CS_SetRoomOutObj* Room_CS_SetRoomOutObj::New() const {
  return new Room_CS_SetRoomOutObj;
}

void Room_CS_SetRoomOutObj::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_obj()) {
      if (obj_ != NULL) obj_->::proto::message::ProtoRoomOutObj::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Room_CS_SetRoomOutObj::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .proto.message.ProtoRoomOutObj obj = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_obj()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Room_CS_SetRoomOutObj::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .proto.message.ProtoRoomOutObj obj = 1;
  if (has_obj()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->obj(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Room_CS_SetRoomOutObj::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .proto.message.ProtoRoomOutObj obj = 1;
  if (has_obj()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->obj(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Room_CS_SetRoomOutObj::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .proto.message.ProtoRoomOutObj obj = 1;
    if (has_obj()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->obj());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Room_CS_SetRoomOutObj::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Room_CS_SetRoomOutObj* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Room_CS_SetRoomOutObj*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Room_CS_SetRoomOutObj::MergeFrom(const Room_CS_SetRoomOutObj& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_obj()) {
      mutable_obj()->::proto::message::ProtoRoomOutObj::MergeFrom(from.obj());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Room_CS_SetRoomOutObj::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Room_CS_SetRoomOutObj::CopyFrom(const Room_CS_SetRoomOutObj& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Room_CS_SetRoomOutObj::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_obj()) {
    if (!this->obj().IsInitialized()) return false;
  }
  return true;
}

void Room_CS_SetRoomOutObj::Swap(Room_CS_SetRoomOutObj* other) {
  if (other != this) {
    std::swap(obj_, other->obj_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Room_CS_SetRoomOutObj::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Room_CS_SetRoomOutObj_descriptor_;
  metadata.reflection = Room_CS_SetRoomOutObj_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Room_SC_SetRoomOutObj::kResultFieldNumber;
#endif  // !_MSC_VER

Room_SC_SetRoomOutObj::Room_SC_SetRoomOutObj()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Room_SC_SetRoomOutObj::InitAsDefaultInstance() {
}

Room_SC_SetRoomOutObj::Room_SC_SetRoomOutObj(const Room_SC_SetRoomOutObj& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Room_SC_SetRoomOutObj::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Room_SC_SetRoomOutObj::~Room_SC_SetRoomOutObj() {
  SharedDtor();
}

void Room_SC_SetRoomOutObj::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Room_SC_SetRoomOutObj::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Room_SC_SetRoomOutObj::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Room_SC_SetRoomOutObj_descriptor_;
}

const Room_SC_SetRoomOutObj& Room_SC_SetRoomOutObj::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_room_2eproto();
  return *default_instance_;
}

Room_SC_SetRoomOutObj* Room_SC_SetRoomOutObj::default_instance_ = NULL;

Room_SC_SetRoomOutObj* Room_SC_SetRoomOutObj::New() const {
  return new Room_SC_SetRoomOutObj;
}

void Room_SC_SetRoomOutObj::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Room_SC_SetRoomOutObj::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Room_SC_SetRoomOutObj::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Room_SC_SetRoomOutObj::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Room_SC_SetRoomOutObj::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Room_SC_SetRoomOutObj::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Room_SC_SetRoomOutObj* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Room_SC_SetRoomOutObj*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Room_SC_SetRoomOutObj::MergeFrom(const Room_SC_SetRoomOutObj& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Room_SC_SetRoomOutObj::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Room_SC_SetRoomOutObj::CopyFrom(const Room_SC_SetRoomOutObj& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Room_SC_SetRoomOutObj::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Room_SC_SetRoomOutObj::Swap(Room_SC_SetRoomOutObj* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Room_SC_SetRoomOutObj::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Room_SC_SetRoomOutObj_descriptor_;
  metadata.reflection = Room_SC_SetRoomOutObj_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Room_CS_MatchingQueueInfo::kObjFieldNumber;
#endif  // !_MSC_VER

Room_CS_MatchingQueueInfo::Room_CS_MatchingQueueInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Room_CS_MatchingQueueInfo::InitAsDefaultInstance() {
}

Room_CS_MatchingQueueInfo::Room_CS_MatchingQueueInfo(const Room_CS_MatchingQueueInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Room_CS_MatchingQueueInfo::SharedCtor() {
  _cached_size_ = 0;
  obj_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Room_CS_MatchingQueueInfo::~Room_CS_MatchingQueueInfo() {
  SharedDtor();
}

void Room_CS_MatchingQueueInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Room_CS_MatchingQueueInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Room_CS_MatchingQueueInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Room_CS_MatchingQueueInfo_descriptor_;
}

const Room_CS_MatchingQueueInfo& Room_CS_MatchingQueueInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_room_2eproto();
  return *default_instance_;
}

Room_CS_MatchingQueueInfo* Room_CS_MatchingQueueInfo::default_instance_ = NULL;

Room_CS_MatchingQueueInfo* Room_CS_MatchingQueueInfo::New() const {
  return new Room_CS_MatchingQueueInfo;
}

void Room_CS_MatchingQueueInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    obj_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Room_CS_MatchingQueueInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 obj = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &obj_)));
          set_has_obj();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Room_CS_MatchingQueueInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 obj = 1;
  if (has_obj()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->obj(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Room_CS_MatchingQueueInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 obj = 1;
  if (has_obj()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->obj(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Room_CS_MatchingQueueInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 obj = 1;
    if (has_obj()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->obj());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Room_CS_MatchingQueueInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Room_CS_MatchingQueueInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Room_CS_MatchingQueueInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Room_CS_MatchingQueueInfo::MergeFrom(const Room_CS_MatchingQueueInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_obj()) {
      set_obj(from.obj());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Room_CS_MatchingQueueInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Room_CS_MatchingQueueInfo::CopyFrom(const Room_CS_MatchingQueueInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Room_CS_MatchingQueueInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Room_CS_MatchingQueueInfo::Swap(Room_CS_MatchingQueueInfo* other) {
  if (other != this) {
    std::swap(obj_, other->obj_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Room_CS_MatchingQueueInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Room_CS_MatchingQueueInfo_descriptor_;
  metadata.reflection = Room_CS_MatchingQueueInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Room_SC_MatchingQueueInfo::kNRoomNumFieldNumber;
const int Room_SC_MatchingQueueInfo::kNSingleNumFieldNumber;
const int Room_SC_MatchingQueueInfo::kObjFieldNumber;
#endif  // !_MSC_VER

Room_SC_MatchingQueueInfo::Room_SC_MatchingQueueInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Room_SC_MatchingQueueInfo::InitAsDefaultInstance() {
}

Room_SC_MatchingQueueInfo::Room_SC_MatchingQueueInfo(const Room_SC_MatchingQueueInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Room_SC_MatchingQueueInfo::SharedCtor() {
  _cached_size_ = 0;
  nroomnum_ = 0;
  nsinglenum_ = 0;
  obj_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Room_SC_MatchingQueueInfo::~Room_SC_MatchingQueueInfo() {
  SharedDtor();
}

void Room_SC_MatchingQueueInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Room_SC_MatchingQueueInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Room_SC_MatchingQueueInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Room_SC_MatchingQueueInfo_descriptor_;
}

const Room_SC_MatchingQueueInfo& Room_SC_MatchingQueueInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_room_2eproto();
  return *default_instance_;
}

Room_SC_MatchingQueueInfo* Room_SC_MatchingQueueInfo::default_instance_ = NULL;

Room_SC_MatchingQueueInfo* Room_SC_MatchingQueueInfo::New() const {
  return new Room_SC_MatchingQueueInfo;
}

void Room_SC_MatchingQueueInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nroomnum_ = 0;
    nsinglenum_ = 0;
    obj_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Room_SC_MatchingQueueInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 nRoomNum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nroomnum_)));
          set_has_nroomnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nSingleNum;
        break;
      }

      // required int32 nSingleNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nSingleNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nsinglenum_)));
          set_has_nsinglenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_obj;
        break;
      }

      // required int32 obj = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_obj:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &obj_)));
          set_has_obj();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Room_SC_MatchingQueueInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 nRoomNum = 1;
  if (has_nroomnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nroomnum(), output);
  }

  // required int32 nSingleNum = 2;
  if (has_nsinglenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nsinglenum(), output);
  }

  // required int32 obj = 3;
  if (has_obj()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->obj(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Room_SC_MatchingQueueInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 nRoomNum = 1;
  if (has_nroomnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nroomnum(), target);
  }

  // required int32 nSingleNum = 2;
  if (has_nsinglenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->nsinglenum(), target);
  }

  // required int32 obj = 3;
  if (has_obj()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->obj(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Room_SC_MatchingQueueInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 nRoomNum = 1;
    if (has_nroomnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nroomnum());
    }

    // required int32 nSingleNum = 2;
    if (has_nsinglenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nsinglenum());
    }

    // required int32 obj = 3;
    if (has_obj()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->obj());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Room_SC_MatchingQueueInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Room_SC_MatchingQueueInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Room_SC_MatchingQueueInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Room_SC_MatchingQueueInfo::MergeFrom(const Room_SC_MatchingQueueInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nroomnum()) {
      set_nroomnum(from.nroomnum());
    }
    if (from.has_nsinglenum()) {
      set_nsinglenum(from.nsinglenum());
    }
    if (from.has_obj()) {
      set_obj(from.obj());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Room_SC_MatchingQueueInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Room_SC_MatchingQueueInfo::CopyFrom(const Room_SC_MatchingQueueInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Room_SC_MatchingQueueInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Room_SC_MatchingQueueInfo::Swap(Room_SC_MatchingQueueInfo* other) {
  if (other != this) {
    std::swap(nroomnum_, other->nroomnum_);
    std::swap(nsinglenum_, other->nsinglenum_);
    std::swap(obj_, other->obj_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Room_SC_MatchingQueueInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Room_SC_MatchingQueueInfo_descriptor_;
  metadata.reflection = Room_SC_MatchingQueueInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Room_CS_GetRoomList::kObjFieldNumber;
#endif  // !_MSC_VER

Room_CS_GetRoomList::Room_CS_GetRoomList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Room_CS_GetRoomList::InitAsDefaultInstance() {
}

Room_CS_GetRoomList::Room_CS_GetRoomList(const Room_CS_GetRoomList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Room_CS_GetRoomList::SharedCtor() {
  _cached_size_ = 0;
  obj_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Room_CS_GetRoomList::~Room_CS_GetRoomList() {
  SharedDtor();
}

void Room_CS_GetRoomList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Room_CS_GetRoomList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Room_CS_GetRoomList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Room_CS_GetRoomList_descriptor_;
}

const Room_CS_GetRoomList& Room_CS_GetRoomList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_room_2eproto();
  return *default_instance_;
}

Room_CS_GetRoomList* Room_CS_GetRoomList::default_instance_ = NULL;

Room_CS_GetRoomList* Room_CS_GetRoomList::New() const {
  return new Room_CS_GetRoomList;
}

void Room_CS_GetRoomList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    obj_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Room_CS_GetRoomList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 obj = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &obj_)));
          set_has_obj();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Room_CS_GetRoomList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 obj = 1;
  if (has_obj()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->obj(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Room_CS_GetRoomList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 obj = 1;
  if (has_obj()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->obj(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Room_CS_GetRoomList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 obj = 1;
    if (has_obj()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->obj());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Room_CS_GetRoomList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Room_CS_GetRoomList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Room_CS_GetRoomList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Room_CS_GetRoomList::MergeFrom(const Room_CS_GetRoomList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_obj()) {
      set_obj(from.obj());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Room_CS_GetRoomList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Room_CS_GetRoomList::CopyFrom(const Room_CS_GetRoomList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Room_CS_GetRoomList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Room_CS_GetRoomList::Swap(Room_CS_GetRoomList* other) {
  if (other != this) {
    std::swap(obj_, other->obj_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Room_CS_GetRoomList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Room_CS_GetRoomList_descriptor_;
  metadata.reflection = Room_CS_GetRoomList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Room_SC_GetRoomList::kResultFieldNumber;
const int Room_SC_GetRoomList::kRoomInfoFieldNumber;
#endif  // !_MSC_VER

Room_SC_GetRoomList::Room_SC_GetRoomList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Room_SC_GetRoomList::InitAsDefaultInstance() {
}

Room_SC_GetRoomList::Room_SC_GetRoomList(const Room_SC_GetRoomList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Room_SC_GetRoomList::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Room_SC_GetRoomList::~Room_SC_GetRoomList() {
  SharedDtor();
}

void Room_SC_GetRoomList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Room_SC_GetRoomList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Room_SC_GetRoomList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Room_SC_GetRoomList_descriptor_;
}

const Room_SC_GetRoomList& Room_SC_GetRoomList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_room_2eproto();
  return *default_instance_;
}

Room_SC_GetRoomList* Room_SC_GetRoomList::default_instance_ = NULL;

Room_SC_GetRoomList* Room_SC_GetRoomList::New() const {
  return new Room_SC_GetRoomList;
}

void Room_SC_GetRoomList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  roominfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Room_SC_GetRoomList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_roomInfo;
        break;
      }

      // repeated .proto.message.ProtoRoomListRoomInfo roomInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roomInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_roominfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_roomInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Room_SC_GetRoomList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated .proto.message.ProtoRoomListRoomInfo roomInfo = 2;
  for (int i = 0; i < this->roominfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->roominfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Room_SC_GetRoomList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated .proto.message.ProtoRoomListRoomInfo roomInfo = 2;
  for (int i = 0; i < this->roominfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->roominfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Room_SC_GetRoomList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated .proto.message.ProtoRoomListRoomInfo roomInfo = 2;
  total_size += 1 * this->roominfo_size();
  for (int i = 0; i < this->roominfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->roominfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Room_SC_GetRoomList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Room_SC_GetRoomList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Room_SC_GetRoomList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Room_SC_GetRoomList::MergeFrom(const Room_SC_GetRoomList& from) {
  GOOGLE_CHECK_NE(&from, this);
  roominfo_.MergeFrom(from.roominfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Room_SC_GetRoomList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Room_SC_GetRoomList::CopyFrom(const Room_SC_GetRoomList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Room_SC_GetRoomList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < roominfo_size(); i++) {
    if (!this->roominfo(i).IsInitialized()) return false;
  }
  return true;
}

void Room_SC_GetRoomList::Swap(Room_SC_GetRoomList* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    roominfo_.Swap(&other->roominfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Room_SC_GetRoomList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Room_SC_GetRoomList_descriptor_;
  metadata.reflection = Room_SC_GetRoomList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Room_CS_CreateRoom::kNeedCombatFieldNumber;
#endif  // !_MSC_VER

Room_CS_CreateRoom::Room_CS_CreateRoom()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Room_CS_CreateRoom::InitAsDefaultInstance() {
}

Room_CS_CreateRoom::Room_CS_CreateRoom(const Room_CS_CreateRoom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Room_CS_CreateRoom::SharedCtor() {
  _cached_size_ = 0;
  needcombat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Room_CS_CreateRoom::~Room_CS_CreateRoom() {
  SharedDtor();
}

void Room_CS_CreateRoom::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Room_CS_CreateRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Room_CS_CreateRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Room_CS_CreateRoom_descriptor_;
}

const Room_CS_CreateRoom& Room_CS_CreateRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_room_2eproto();
  return *default_instance_;
}

Room_CS_CreateRoom* Room_CS_CreateRoom::default_instance_ = NULL;

Room_CS_CreateRoom* Room_CS_CreateRoom::New() const {
  return new Room_CS_CreateRoom;
}

void Room_CS_CreateRoom::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    needcombat_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Room_CS_CreateRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 needCombat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &needcombat_)));
          set_has_needcombat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Room_CS_CreateRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 needCombat = 1;
  if (has_needcombat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->needcombat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Room_CS_CreateRoom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 needCombat = 1;
  if (has_needcombat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->needcombat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Room_CS_CreateRoom::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 needCombat = 1;
    if (has_needcombat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->needcombat());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Room_CS_CreateRoom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Room_CS_CreateRoom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Room_CS_CreateRoom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Room_CS_CreateRoom::MergeFrom(const Room_CS_CreateRoom& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_needcombat()) {
      set_needcombat(from.needcombat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Room_CS_CreateRoom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Room_CS_CreateRoom::CopyFrom(const Room_CS_CreateRoom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Room_CS_CreateRoom::IsInitialized() const {

  return true;
}

void Room_CS_CreateRoom::Swap(Room_CS_CreateRoom* other) {
  if (other != this) {
    std::swap(needcombat_, other->needcombat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Room_CS_CreateRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Room_CS_CreateRoom_descriptor_;
  metadata.reflection = Room_CS_CreateRoom_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Room_SC_CreateRoom::kResultFieldNumber;
#endif  // !_MSC_VER

Room_SC_CreateRoom::Room_SC_CreateRoom()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Room_SC_CreateRoom::InitAsDefaultInstance() {
}

Room_SC_CreateRoom::Room_SC_CreateRoom(const Room_SC_CreateRoom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Room_SC_CreateRoom::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Room_SC_CreateRoom::~Room_SC_CreateRoom() {
  SharedDtor();
}

void Room_SC_CreateRoom::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Room_SC_CreateRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Room_SC_CreateRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Room_SC_CreateRoom_descriptor_;
}

const Room_SC_CreateRoom& Room_SC_CreateRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_room_2eproto();
  return *default_instance_;
}

Room_SC_CreateRoom* Room_SC_CreateRoom::default_instance_ = NULL;

Room_SC_CreateRoom* Room_SC_CreateRoom::New() const {
  return new Room_SC_CreateRoom;
}

void Room_SC_CreateRoom::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Room_SC_CreateRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Room_SC_CreateRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Room_SC_CreateRoom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Room_SC_CreateRoom::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Room_SC_CreateRoom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Room_SC_CreateRoom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Room_SC_CreateRoom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Room_SC_CreateRoom::MergeFrom(const Room_SC_CreateRoom& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Room_SC_CreateRoom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Room_SC_CreateRoom::CopyFrom(const Room_SC_CreateRoom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Room_SC_CreateRoom::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Room_SC_CreateRoom::Swap(Room_SC_CreateRoom* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Room_SC_CreateRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Room_SC_CreateRoom_descriptor_;
  metadata.reflection = Room_SC_CreateRoom_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Room_CS_ApplyRoom::kRoomIdFieldNumber;
#endif  // !_MSC_VER

Room_CS_ApplyRoom::Room_CS_ApplyRoom()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Room_CS_ApplyRoom::InitAsDefaultInstance() {
}

Room_CS_ApplyRoom::Room_CS_ApplyRoom(const Room_CS_ApplyRoom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Room_CS_ApplyRoom::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Room_CS_ApplyRoom::~Room_CS_ApplyRoom() {
  SharedDtor();
}

void Room_CS_ApplyRoom::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Room_CS_ApplyRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Room_CS_ApplyRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Room_CS_ApplyRoom_descriptor_;
}

const Room_CS_ApplyRoom& Room_CS_ApplyRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_room_2eproto();
  return *default_instance_;
}

Room_CS_ApplyRoom* Room_CS_ApplyRoom::default_instance_ = NULL;

Room_CS_ApplyRoom* Room_CS_ApplyRoom::New() const {
  return new Room_CS_ApplyRoom;
}

void Room_CS_ApplyRoom::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roomid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Room_CS_ApplyRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roomId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Room_CS_ApplyRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roomId = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Room_CS_ApplyRoom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roomId = 1;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Room_CS_ApplyRoom::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roomId = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Room_CS_ApplyRoom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Room_CS_ApplyRoom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Room_CS_ApplyRoom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Room_CS_ApplyRoom::MergeFrom(const Room_CS_ApplyRoom& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Room_CS_ApplyRoom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Room_CS_ApplyRoom::CopyFrom(const Room_CS_ApplyRoom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Room_CS_ApplyRoom::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Room_CS_ApplyRoom::Swap(Room_CS_ApplyRoom* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Room_CS_ApplyRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Room_CS_ApplyRoom_descriptor_;
  metadata.reflection = Room_CS_ApplyRoom_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Room_SC_ApplyRoom::kResultFieldNumber;
const int Room_SC_ApplyRoom::kRoomIdFieldNumber;
#endif  // !_MSC_VER

Room_SC_ApplyRoom::Room_SC_ApplyRoom()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Room_SC_ApplyRoom::InitAsDefaultInstance() {
}

Room_SC_ApplyRoom::Room_SC_ApplyRoom(const Room_SC_ApplyRoom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Room_SC_ApplyRoom::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  roomid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Room_SC_ApplyRoom::~Room_SC_ApplyRoom() {
  SharedDtor();
}

void Room_SC_ApplyRoom::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Room_SC_ApplyRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Room_SC_ApplyRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Room_SC_ApplyRoom_descriptor_;
}

const Room_SC_ApplyRoom& Room_SC_ApplyRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_room_2eproto();
  return *default_instance_;
}

Room_SC_ApplyRoom* Room_SC_ApplyRoom::default_instance_ = NULL;

Room_SC_ApplyRoom* Room_SC_ApplyRoom::New() const {
  return new Room_SC_ApplyRoom;
}

void Room_SC_ApplyRoom::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    roomid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Room_SC_ApplyRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roomId;
        break;
      }

      // optional int32 roomId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Room_SC_ApplyRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 roomId = 2;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roomid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Room_SC_ApplyRoom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 roomId = 2;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roomid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Room_SC_ApplyRoom::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 roomId = 2;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Room_SC_ApplyRoom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Room_SC_ApplyRoom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Room_SC_ApplyRoom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Room_SC_ApplyRoom::MergeFrom(const Room_SC_ApplyRoom& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Room_SC_ApplyRoom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Room_SC_ApplyRoom::CopyFrom(const Room_SC_ApplyRoom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Room_SC_ApplyRoom::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Room_SC_ApplyRoom::Swap(Room_SC_ApplyRoom* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(roomid_, other->roomid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Room_SC_ApplyRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Room_SC_ApplyRoom_descriptor_;
  metadata.reflection = Room_SC_ApplyRoom_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Room_CS_RoomQuit::kRoomIdFieldNumber;
#endif  // !_MSC_VER

Room_CS_RoomQuit::Room_CS_RoomQuit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Room_CS_RoomQuit::InitAsDefaultInstance() {
}

Room_CS_RoomQuit::Room_CS_RoomQuit(const Room_CS_RoomQuit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Room_CS_RoomQuit::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Room_CS_RoomQuit::~Room_CS_RoomQuit() {
  SharedDtor();
}

void Room_CS_RoomQuit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Room_CS_RoomQuit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Room_CS_RoomQuit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Room_CS_RoomQuit_descriptor_;
}

const Room_CS_RoomQuit& Room_CS_RoomQuit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_room_2eproto();
  return *default_instance_;
}

Room_CS_RoomQuit* Room_CS_RoomQuit::default_instance_ = NULL;

Room_CS_RoomQuit* Room_CS_RoomQuit::New() const {
  return new Room_CS_RoomQuit;
}

void Room_CS_RoomQuit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roomid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Room_CS_RoomQuit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roomId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Room_CS_RoomQuit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roomId = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Room_CS_RoomQuit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roomId = 1;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Room_CS_RoomQuit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roomId = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Room_CS_RoomQuit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Room_CS_RoomQuit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Room_CS_RoomQuit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Room_CS_RoomQuit::MergeFrom(const Room_CS_RoomQuit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Room_CS_RoomQuit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Room_CS_RoomQuit::CopyFrom(const Room_CS_RoomQuit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Room_CS_RoomQuit::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Room_CS_RoomQuit::Swap(Room_CS_RoomQuit* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Room_CS_RoomQuit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Room_CS_RoomQuit_descriptor_;
  metadata.reflection = Room_CS_RoomQuit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Room_SC_RoomQuit::kResultFieldNumber;
#endif  // !_MSC_VER

Room_SC_RoomQuit::Room_SC_RoomQuit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Room_SC_RoomQuit::InitAsDefaultInstance() {
}

Room_SC_RoomQuit::Room_SC_RoomQuit(const Room_SC_RoomQuit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Room_SC_RoomQuit::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Room_SC_RoomQuit::~Room_SC_RoomQuit() {
  SharedDtor();
}

void Room_SC_RoomQuit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Room_SC_RoomQuit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Room_SC_RoomQuit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Room_SC_RoomQuit_descriptor_;
}

const Room_SC_RoomQuit& Room_SC_RoomQuit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_room_2eproto();
  return *default_instance_;
}

Room_SC_RoomQuit* Room_SC_RoomQuit::default_instance_ = NULL;

Room_SC_RoomQuit* Room_SC_RoomQuit::New() const {
  return new Room_SC_RoomQuit;
}

void Room_SC_RoomQuit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Room_SC_RoomQuit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Room_SC_RoomQuit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Room_SC_RoomQuit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Room_SC_RoomQuit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Room_SC_RoomQuit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Room_SC_RoomQuit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Room_SC_RoomQuit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Room_SC_RoomQuit::MergeFrom(const Room_SC_RoomQuit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Room_SC_RoomQuit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Room_SC_RoomQuit::CopyFrom(const Room_SC_RoomQuit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Room_SC_RoomQuit::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Room_SC_RoomQuit::Swap(Room_SC_RoomQuit* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Room_SC_RoomQuit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Room_SC_RoomQuit_descriptor_;
  metadata.reflection = Room_SC_RoomQuit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Room_CS_RoomAppoint::kPlyIdFieldNumber;
const int Room_CS_RoomAppoint::kAppointFieldNumber;
#endif  // !_MSC_VER

Room_CS_RoomAppoint::Room_CS_RoomAppoint()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Room_CS_RoomAppoint::InitAsDefaultInstance() {
}

Room_CS_RoomAppoint::Room_CS_RoomAppoint(const Room_CS_RoomAppoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Room_CS_RoomAppoint::SharedCtor() {
  _cached_size_ = 0;
  plyid_ = 0u;
  appoint_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Room_CS_RoomAppoint::~Room_CS_RoomAppoint() {
  SharedDtor();
}

void Room_CS_RoomAppoint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Room_CS_RoomAppoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Room_CS_RoomAppoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Room_CS_RoomAppoint_descriptor_;
}

const Room_CS_RoomAppoint& Room_CS_RoomAppoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_room_2eproto();
  return *default_instance_;
}

Room_CS_RoomAppoint* Room_CS_RoomAppoint::default_instance_ = NULL;

Room_CS_RoomAppoint* Room_CS_RoomAppoint::New() const {
  return new Room_CS_RoomAppoint;
}

void Room_CS_RoomAppoint::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    plyid_ = 0u;
    appoint_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Room_CS_RoomAppoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 plyId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &plyid_)));
          set_has_plyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_appoint;
        break;
      }

      // required int32 appoint = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_appoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &appoint_)));
          set_has_appoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Room_CS_RoomAppoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 plyId = 1;
  if (has_plyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->plyid(), output);
  }

  // required int32 appoint = 2;
  if (has_appoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->appoint(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Room_CS_RoomAppoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 plyId = 1;
  if (has_plyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->plyid(), target);
  }

  // required int32 appoint = 2;
  if (has_appoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->appoint(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Room_CS_RoomAppoint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 plyId = 1;
    if (has_plyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->plyid());
    }

    // required int32 appoint = 2;
    if (has_appoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->appoint());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Room_CS_RoomAppoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Room_CS_RoomAppoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Room_CS_RoomAppoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Room_CS_RoomAppoint::MergeFrom(const Room_CS_RoomAppoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_plyid()) {
      set_plyid(from.plyid());
    }
    if (from.has_appoint()) {
      set_appoint(from.appoint());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Room_CS_RoomAppoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Room_CS_RoomAppoint::CopyFrom(const Room_CS_RoomAppoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Room_CS_RoomAppoint::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Room_CS_RoomAppoint::Swap(Room_CS_RoomAppoint* other) {
  if (other != this) {
    std::swap(plyid_, other->plyid_);
    std::swap(appoint_, other->appoint_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Room_CS_RoomAppoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Room_CS_RoomAppoint_descriptor_;
  metadata.reflection = Room_CS_RoomAppoint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Room_SC_RoomAppoint::kResultFieldNumber;
#endif  // !_MSC_VER

Room_SC_RoomAppoint::Room_SC_RoomAppoint()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Room_SC_RoomAppoint::InitAsDefaultInstance() {
}

Room_SC_RoomAppoint::Room_SC_RoomAppoint(const Room_SC_RoomAppoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Room_SC_RoomAppoint::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Room_SC_RoomAppoint::~Room_SC_RoomAppoint() {
  SharedDtor();
}

void Room_SC_RoomAppoint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Room_SC_RoomAppoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Room_SC_RoomAppoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Room_SC_RoomAppoint_descriptor_;
}

const Room_SC_RoomAppoint& Room_SC_RoomAppoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_room_2eproto();
  return *default_instance_;
}

Room_SC_RoomAppoint* Room_SC_RoomAppoint::default_instance_ = NULL;

Room_SC_RoomAppoint* Room_SC_RoomAppoint::New() const {
  return new Room_SC_RoomAppoint;
}

void Room_SC_RoomAppoint::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Room_SC_RoomAppoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Room_SC_RoomAppoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Room_SC_RoomAppoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Room_SC_RoomAppoint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Room_SC_RoomAppoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Room_SC_RoomAppoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Room_SC_RoomAppoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Room_SC_RoomAppoint::MergeFrom(const Room_SC_RoomAppoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Room_SC_RoomAppoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Room_SC_RoomAppoint::CopyFrom(const Room_SC_RoomAppoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Room_SC_RoomAppoint::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Room_SC_RoomAppoint::Swap(Room_SC_RoomAppoint* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Room_SC_RoomAppoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Room_SC_RoomAppoint_descriptor_;
  metadata.reflection = Room_SC_RoomAppoint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Room_CS_RoomKick::kPlyIdFieldNumber;
#endif  // !_MSC_VER

Room_CS_RoomKick::Room_CS_RoomKick()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Room_CS_RoomKick::InitAsDefaultInstance() {
}

Room_CS_RoomKick::Room_CS_RoomKick(const Room_CS_RoomKick& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Room_CS_RoomKick::SharedCtor() {
  _cached_size_ = 0;
  plyid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Room_CS_RoomKick::~Room_CS_RoomKick() {
  SharedDtor();
}

void Room_CS_RoomKick::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Room_CS_RoomKick::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Room_CS_RoomKick::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Room_CS_RoomKick_descriptor_;
}

const Room_CS_RoomKick& Room_CS_RoomKick::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_room_2eproto();
  return *default_instance_;
}

Room_CS_RoomKick* Room_CS_RoomKick::default_instance_ = NULL;

Room_CS_RoomKick* Room_CS_RoomKick::New() const {
  return new Room_CS_RoomKick;
}

void Room_CS_RoomKick::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    plyid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Room_CS_RoomKick::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 plyId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &plyid_)));
          set_has_plyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Room_CS_RoomKick::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 plyId = 1;
  if (has_plyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->plyid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Room_CS_RoomKick::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 plyId = 1;
  if (has_plyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->plyid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Room_CS_RoomKick::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 plyId = 1;
    if (has_plyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->plyid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Room_CS_RoomKick::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Room_CS_RoomKick* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Room_CS_RoomKick*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Room_CS_RoomKick::MergeFrom(const Room_CS_RoomKick& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_plyid()) {
      set_plyid(from.plyid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Room_CS_RoomKick::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Room_CS_RoomKick::CopyFrom(const Room_CS_RoomKick& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Room_CS_RoomKick::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Room_CS_RoomKick::Swap(Room_CS_RoomKick* other) {
  if (other != this) {
    std::swap(plyid_, other->plyid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Room_CS_RoomKick::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Room_CS_RoomKick_descriptor_;
  metadata.reflection = Room_CS_RoomKick_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Room_SC_RoomKick::kResultFieldNumber;
const int Room_SC_RoomKick::kBeKickNameFieldNumber;
#endif  // !_MSC_VER

Room_SC_RoomKick::Room_SC_RoomKick()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Room_SC_RoomKick::InitAsDefaultInstance() {
}

Room_SC_RoomKick::Room_SC_RoomKick(const Room_SC_RoomKick& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Room_SC_RoomKick::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  bekickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Room_SC_RoomKick::~Room_SC_RoomKick() {
  SharedDtor();
}

void Room_SC_RoomKick::SharedDtor() {
  if (bekickname_ != &::google::protobuf::internal::kEmptyString) {
    delete bekickname_;
  }
  if (this != default_instance_) {
  }
}

void Room_SC_RoomKick::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Room_SC_RoomKick::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Room_SC_RoomKick_descriptor_;
}

const Room_SC_RoomKick& Room_SC_RoomKick::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_room_2eproto();
  return *default_instance_;
}

Room_SC_RoomKick* Room_SC_RoomKick::default_instance_ = NULL;

Room_SC_RoomKick* Room_SC_RoomKick::New() const {
  return new Room_SC_RoomKick;
}

void Room_SC_RoomKick::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_bekickname()) {
      if (bekickname_ != &::google::protobuf::internal::kEmptyString) {
        bekickname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Room_SC_RoomKick::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_beKickName;
        break;
      }

      // optional string beKickName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_beKickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bekickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bekickname().data(), this->bekickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Room_SC_RoomKick::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional string beKickName = 2;
  if (has_bekickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bekickname().data(), this->bekickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->bekickname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Room_SC_RoomKick::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional string beKickName = 2;
  if (has_bekickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bekickname().data(), this->bekickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->bekickname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Room_SC_RoomKick::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional string beKickName = 2;
    if (has_bekickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bekickname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Room_SC_RoomKick::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Room_SC_RoomKick* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Room_SC_RoomKick*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Room_SC_RoomKick::MergeFrom(const Room_SC_RoomKick& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_bekickname()) {
      set_bekickname(from.bekickname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Room_SC_RoomKick::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Room_SC_RoomKick::CopyFrom(const Room_SC_RoomKick& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Room_SC_RoomKick::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Room_SC_RoomKick::Swap(Room_SC_RoomKick* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(bekickname_, other->bekickname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Room_SC_RoomKick::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Room_SC_RoomKick_descriptor_;
  metadata.reflection = Room_SC_RoomKick_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Room_CS_TempLeave::kPlyIdFieldNumber;
const int Room_CS_TempLeave::kStatusFieldNumber;
#endif  // !_MSC_VER

Room_CS_TempLeave::Room_CS_TempLeave()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Room_CS_TempLeave::InitAsDefaultInstance() {
}

Room_CS_TempLeave::Room_CS_TempLeave(const Room_CS_TempLeave& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Room_CS_TempLeave::SharedCtor() {
  _cached_size_ = 0;
  plyid_ = 0u;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Room_CS_TempLeave::~Room_CS_TempLeave() {
  SharedDtor();
}

void Room_CS_TempLeave::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Room_CS_TempLeave::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Room_CS_TempLeave::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Room_CS_TempLeave_descriptor_;
}

const Room_CS_TempLeave& Room_CS_TempLeave::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_room_2eproto();
  return *default_instance_;
}

Room_CS_TempLeave* Room_CS_TempLeave::default_instance_ = NULL;

Room_CS_TempLeave* Room_CS_TempLeave::New() const {
  return new Room_CS_TempLeave;
}

void Room_CS_TempLeave::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    plyid_ = 0u;
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Room_CS_TempLeave::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 plyId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &plyid_)));
          set_has_plyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required int32 status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Room_CS_TempLeave::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 plyId = 1;
  if (has_plyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->plyid(), output);
  }

  // required int32 status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Room_CS_TempLeave::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 plyId = 1;
  if (has_plyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->plyid(), target);
  }

  // required int32 status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Room_CS_TempLeave::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 plyId = 1;
    if (has_plyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->plyid());
    }

    // required int32 status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Room_CS_TempLeave::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Room_CS_TempLeave* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Room_CS_TempLeave*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Room_CS_TempLeave::MergeFrom(const Room_CS_TempLeave& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_plyid()) {
      set_plyid(from.plyid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Room_CS_TempLeave::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Room_CS_TempLeave::CopyFrom(const Room_CS_TempLeave& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Room_CS_TempLeave::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Room_CS_TempLeave::Swap(Room_CS_TempLeave* other) {
  if (other != this) {
    std::swap(plyid_, other->plyid_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Room_CS_TempLeave::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Room_CS_TempLeave_descriptor_;
  metadata.reflection = Room_CS_TempLeave_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Room_SC_TempLeave::kResultFieldNumber;
#endif  // !_MSC_VER

Room_SC_TempLeave::Room_SC_TempLeave()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Room_SC_TempLeave::InitAsDefaultInstance() {
}

Room_SC_TempLeave::Room_SC_TempLeave(const Room_SC_TempLeave& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Room_SC_TempLeave::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Room_SC_TempLeave::~Room_SC_TempLeave() {
  SharedDtor();
}

void Room_SC_TempLeave::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Room_SC_TempLeave::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Room_SC_TempLeave::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Room_SC_TempLeave_descriptor_;
}

const Room_SC_TempLeave& Room_SC_TempLeave::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_room_2eproto();
  return *default_instance_;
}

Room_SC_TempLeave* Room_SC_TempLeave::default_instance_ = NULL;

Room_SC_TempLeave* Room_SC_TempLeave::New() const {
  return new Room_SC_TempLeave;
}

void Room_SC_TempLeave::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Room_SC_TempLeave::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Room_SC_TempLeave::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Room_SC_TempLeave::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Room_SC_TempLeave::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Room_SC_TempLeave::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Room_SC_TempLeave* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Room_SC_TempLeave*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Room_SC_TempLeave::MergeFrom(const Room_SC_TempLeave& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Room_SC_TempLeave::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Room_SC_TempLeave::CopyFrom(const Room_SC_TempLeave& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Room_SC_TempLeave::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Room_SC_TempLeave::Swap(Room_SC_TempLeave* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Room_SC_TempLeave::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Room_SC_TempLeave_descriptor_;
  metadata.reflection = Room_SC_TempLeave_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Room_CS_RoomAuto::kIsAutoFieldNumber;
#endif  // !_MSC_VER

Room_CS_RoomAuto::Room_CS_RoomAuto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Room_CS_RoomAuto::InitAsDefaultInstance() {
}

Room_CS_RoomAuto::Room_CS_RoomAuto(const Room_CS_RoomAuto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Room_CS_RoomAuto::SharedCtor() {
  _cached_size_ = 0;
  isauto_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Room_CS_RoomAuto::~Room_CS_RoomAuto() {
  SharedDtor();
}

void Room_CS_RoomAuto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Room_CS_RoomAuto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Room_CS_RoomAuto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Room_CS_RoomAuto_descriptor_;
}

const Room_CS_RoomAuto& Room_CS_RoomAuto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_room_2eproto();
  return *default_instance_;
}

Room_CS_RoomAuto* Room_CS_RoomAuto::default_instance_ = NULL;

Room_CS_RoomAuto* Room_CS_RoomAuto::New() const {
  return new Room_CS_RoomAuto;
}

void Room_CS_RoomAuto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    isauto_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Room_CS_RoomAuto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 isAuto = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isauto_)));
          set_has_isauto();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Room_CS_RoomAuto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 isAuto = 1;
  if (has_isauto()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->isauto(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Room_CS_RoomAuto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 isAuto = 1;
  if (has_isauto()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->isauto(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Room_CS_RoomAuto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 isAuto = 1;
    if (has_isauto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isauto());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Room_CS_RoomAuto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Room_CS_RoomAuto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Room_CS_RoomAuto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Room_CS_RoomAuto::MergeFrom(const Room_CS_RoomAuto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isauto()) {
      set_isauto(from.isauto());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Room_CS_RoomAuto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Room_CS_RoomAuto::CopyFrom(const Room_CS_RoomAuto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Room_CS_RoomAuto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Room_CS_RoomAuto::Swap(Room_CS_RoomAuto* other) {
  if (other != this) {
    std::swap(isauto_, other->isauto_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Room_CS_RoomAuto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Room_CS_RoomAuto_descriptor_;
  metadata.reflection = Room_CS_RoomAuto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Room_SC_RoomAuto::kResultFieldNumber;
#endif  // !_MSC_VER

Room_SC_RoomAuto::Room_SC_RoomAuto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Room_SC_RoomAuto::InitAsDefaultInstance() {
}

Room_SC_RoomAuto::Room_SC_RoomAuto(const Room_SC_RoomAuto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Room_SC_RoomAuto::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Room_SC_RoomAuto::~Room_SC_RoomAuto() {
  SharedDtor();
}

void Room_SC_RoomAuto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Room_SC_RoomAuto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Room_SC_RoomAuto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Room_SC_RoomAuto_descriptor_;
}

const Room_SC_RoomAuto& Room_SC_RoomAuto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_room_2eproto();
  return *default_instance_;
}

Room_SC_RoomAuto* Room_SC_RoomAuto::default_instance_ = NULL;

Room_SC_RoomAuto* Room_SC_RoomAuto::New() const {
  return new Room_SC_RoomAuto;
}

void Room_SC_RoomAuto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Room_SC_RoomAuto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Room_SC_RoomAuto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Room_SC_RoomAuto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Room_SC_RoomAuto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Room_SC_RoomAuto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Room_SC_RoomAuto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Room_SC_RoomAuto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Room_SC_RoomAuto::MergeFrom(const Room_SC_RoomAuto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Room_SC_RoomAuto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Room_SC_RoomAuto::CopyFrom(const Room_SC_RoomAuto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Room_SC_RoomAuto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Room_SC_RoomAuto::Swap(Room_SC_RoomAuto* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Room_SC_RoomAuto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Room_SC_RoomAuto_descriptor_;
  metadata.reflection = Room_SC_RoomAuto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Room_CS_MemberAuto::kIsAutoFieldNumber;
const int Room_CS_MemberAuto::kObjFieldNumber;
#endif  // !_MSC_VER

Room_CS_MemberAuto::Room_CS_MemberAuto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Room_CS_MemberAuto::InitAsDefaultInstance() {
}

Room_CS_MemberAuto::Room_CS_MemberAuto(const Room_CS_MemberAuto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Room_CS_MemberAuto::SharedCtor() {
  _cached_size_ = 0;
  isauto_ = 0;
  obj_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Room_CS_MemberAuto::~Room_CS_MemberAuto() {
  SharedDtor();
}

void Room_CS_MemberAuto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Room_CS_MemberAuto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Room_CS_MemberAuto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Room_CS_MemberAuto_descriptor_;
}

const Room_CS_MemberAuto& Room_CS_MemberAuto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_room_2eproto();
  return *default_instance_;
}

Room_CS_MemberAuto* Room_CS_MemberAuto::default_instance_ = NULL;

Room_CS_MemberAuto* Room_CS_MemberAuto::New() const {
  return new Room_CS_MemberAuto;
}

void Room_CS_MemberAuto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    isauto_ = 0;
    obj_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Room_CS_MemberAuto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 isAuto = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isauto_)));
          set_has_isauto();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_obj;
        break;
      }

      // required int32 obj = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_obj:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &obj_)));
          set_has_obj();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Room_CS_MemberAuto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 isAuto = 1;
  if (has_isauto()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->isauto(), output);
  }

  // required int32 obj = 2;
  if (has_obj()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->obj(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Room_CS_MemberAuto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 isAuto = 1;
  if (has_isauto()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->isauto(), target);
  }

  // required int32 obj = 2;
  if (has_obj()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->obj(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Room_CS_MemberAuto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 isAuto = 1;
    if (has_isauto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isauto());
    }

    // required int32 obj = 2;
    if (has_obj()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->obj());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Room_CS_MemberAuto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Room_CS_MemberAuto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Room_CS_MemberAuto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Room_CS_MemberAuto::MergeFrom(const Room_CS_MemberAuto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isauto()) {
      set_isauto(from.isauto());
    }
    if (from.has_obj()) {
      set_obj(from.obj());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Room_CS_MemberAuto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Room_CS_MemberAuto::CopyFrom(const Room_CS_MemberAuto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Room_CS_MemberAuto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Room_CS_MemberAuto::Swap(Room_CS_MemberAuto* other) {
  if (other != this) {
    std::swap(isauto_, other->isauto_);
    std::swap(obj_, other->obj_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Room_CS_MemberAuto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Room_CS_MemberAuto_descriptor_;
  metadata.reflection = Room_CS_MemberAuto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Room_SC_MemberAuto::kResultFieldNumber;
const int Room_SC_MemberAuto::kIsAutoFieldNumber;
#endif  // !_MSC_VER

Room_SC_MemberAuto::Room_SC_MemberAuto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Room_SC_MemberAuto::InitAsDefaultInstance() {
}

Room_SC_MemberAuto::Room_SC_MemberAuto(const Room_SC_MemberAuto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Room_SC_MemberAuto::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  isauto_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Room_SC_MemberAuto::~Room_SC_MemberAuto() {
  SharedDtor();
}

void Room_SC_MemberAuto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Room_SC_MemberAuto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Room_SC_MemberAuto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Room_SC_MemberAuto_descriptor_;
}

const Room_SC_MemberAuto& Room_SC_MemberAuto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_room_2eproto();
  return *default_instance_;
}

Room_SC_MemberAuto* Room_SC_MemberAuto::default_instance_ = NULL;

Room_SC_MemberAuto* Room_SC_MemberAuto::New() const {
  return new Room_SC_MemberAuto;
}

void Room_SC_MemberAuto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    isauto_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Room_SC_MemberAuto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isAuto;
        break;
      }

      // required int32 isAuto = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isAuto:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isauto_)));
          set_has_isauto();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Room_SC_MemberAuto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // required int32 isAuto = 2;
  if (has_isauto()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->isauto(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Room_SC_MemberAuto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // required int32 isAuto = 2;
  if (has_isauto()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->isauto(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Room_SC_MemberAuto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required int32 isAuto = 2;
    if (has_isauto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isauto());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Room_SC_MemberAuto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Room_SC_MemberAuto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Room_SC_MemberAuto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Room_SC_MemberAuto::MergeFrom(const Room_SC_MemberAuto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_isauto()) {
      set_isauto(from.isauto());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Room_SC_MemberAuto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Room_SC_MemberAuto::CopyFrom(const Room_SC_MemberAuto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Room_SC_MemberAuto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Room_SC_MemberAuto::Swap(Room_SC_MemberAuto* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(isauto_, other->isauto_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Room_SC_MemberAuto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Room_SC_MemberAuto_descriptor_;
  metadata.reflection = Room_SC_MemberAuto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Room_CS_RoomInvite::kPlyIdFieldNumber;
#endif  // !_MSC_VER

Room_CS_RoomInvite::Room_CS_RoomInvite()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Room_CS_RoomInvite::InitAsDefaultInstance() {
}

Room_CS_RoomInvite::Room_CS_RoomInvite(const Room_CS_RoomInvite& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Room_CS_RoomInvite::SharedCtor() {
  _cached_size_ = 0;
  plyid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Room_CS_RoomInvite::~Room_CS_RoomInvite() {
  SharedDtor();
}

void Room_CS_RoomInvite::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Room_CS_RoomInvite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Room_CS_RoomInvite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Room_CS_RoomInvite_descriptor_;
}

const Room_CS_RoomInvite& Room_CS_RoomInvite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_room_2eproto();
  return *default_instance_;
}

Room_CS_RoomInvite* Room_CS_RoomInvite::default_instance_ = NULL;

Room_CS_RoomInvite* Room_CS_RoomInvite::New() const {
  return new Room_CS_RoomInvite;
}

void Room_CS_RoomInvite::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    plyid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Room_CS_RoomInvite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 plyId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &plyid_)));
          set_has_plyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Room_CS_RoomInvite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 plyId = 1;
  if (has_plyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->plyid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Room_CS_RoomInvite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 plyId = 1;
  if (has_plyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->plyid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Room_CS_RoomInvite::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 plyId = 1;
    if (has_plyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->plyid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Room_CS_RoomInvite::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Room_CS_RoomInvite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Room_CS_RoomInvite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Room_CS_RoomInvite::MergeFrom(const Room_CS_RoomInvite& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_plyid()) {
      set_plyid(from.plyid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Room_CS_RoomInvite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Room_CS_RoomInvite::CopyFrom(const Room_CS_RoomInvite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Room_CS_RoomInvite::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Room_CS_RoomInvite::Swap(Room_CS_RoomInvite* other) {
  if (other != this) {
    std::swap(plyid_, other->plyid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Room_CS_RoomInvite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Room_CS_RoomInvite_descriptor_;
  metadata.reflection = Room_CS_RoomInvite_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Room_SC_RoomInvite::kResultFieldNumber;
#endif  // !_MSC_VER

Room_SC_RoomInvite::Room_SC_RoomInvite()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Room_SC_RoomInvite::InitAsDefaultInstance() {
}

Room_SC_RoomInvite::Room_SC_RoomInvite(const Room_SC_RoomInvite& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Room_SC_RoomInvite::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Room_SC_RoomInvite::~Room_SC_RoomInvite() {
  SharedDtor();
}

void Room_SC_RoomInvite::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Room_SC_RoomInvite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Room_SC_RoomInvite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Room_SC_RoomInvite_descriptor_;
}

const Room_SC_RoomInvite& Room_SC_RoomInvite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_room_2eproto();
  return *default_instance_;
}

Room_SC_RoomInvite* Room_SC_RoomInvite::default_instance_ = NULL;

Room_SC_RoomInvite* Room_SC_RoomInvite::New() const {
  return new Room_SC_RoomInvite;
}

void Room_SC_RoomInvite::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Room_SC_RoomInvite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Room_SC_RoomInvite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Room_SC_RoomInvite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Room_SC_RoomInvite::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Room_SC_RoomInvite::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Room_SC_RoomInvite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Room_SC_RoomInvite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Room_SC_RoomInvite::MergeFrom(const Room_SC_RoomInvite& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Room_SC_RoomInvite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Room_SC_RoomInvite::CopyFrom(const Room_SC_RoomInvite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Room_SC_RoomInvite::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Room_SC_RoomInvite::Swap(Room_SC_RoomInvite* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Room_SC_RoomInvite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Room_SC_RoomInvite_descriptor_;
  metadata.reflection = Room_SC_RoomInvite_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Room_CS_SetRoomBeInvite::kAllowFieldNumber;
const int Room_CS_SetRoomBeInvite::kRoomIdFieldNumber;
#endif  // !_MSC_VER

Room_CS_SetRoomBeInvite::Room_CS_SetRoomBeInvite()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Room_CS_SetRoomBeInvite::InitAsDefaultInstance() {
}

Room_CS_SetRoomBeInvite::Room_CS_SetRoomBeInvite(const Room_CS_SetRoomBeInvite& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Room_CS_SetRoomBeInvite::SharedCtor() {
  _cached_size_ = 0;
  allow_ = false;
  roomid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Room_CS_SetRoomBeInvite::~Room_CS_SetRoomBeInvite() {
  SharedDtor();
}

void Room_CS_SetRoomBeInvite::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Room_CS_SetRoomBeInvite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Room_CS_SetRoomBeInvite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Room_CS_SetRoomBeInvite_descriptor_;
}

const Room_CS_SetRoomBeInvite& Room_CS_SetRoomBeInvite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_room_2eproto();
  return *default_instance_;
}

Room_CS_SetRoomBeInvite* Room_CS_SetRoomBeInvite::default_instance_ = NULL;

Room_CS_SetRoomBeInvite* Room_CS_SetRoomBeInvite::New() const {
  return new Room_CS_SetRoomBeInvite;
}

void Room_CS_SetRoomBeInvite::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    allow_ = false;
    roomid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Room_CS_SetRoomBeInvite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool allow = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_)));
          set_has_allow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roomId;
        break;
      }

      // required int32 roomId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Room_CS_SetRoomBeInvite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool allow = 1;
  if (has_allow()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->allow(), output);
  }

  // required int32 roomId = 2;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roomid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Room_CS_SetRoomBeInvite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool allow = 1;
  if (has_allow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->allow(), target);
  }

  // required int32 roomId = 2;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roomid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Room_CS_SetRoomBeInvite::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool allow = 1;
    if (has_allow()) {
      total_size += 1 + 1;
    }

    // required int32 roomId = 2;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Room_CS_SetRoomBeInvite::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Room_CS_SetRoomBeInvite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Room_CS_SetRoomBeInvite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Room_CS_SetRoomBeInvite::MergeFrom(const Room_CS_SetRoomBeInvite& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_allow()) {
      set_allow(from.allow());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Room_CS_SetRoomBeInvite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Room_CS_SetRoomBeInvite::CopyFrom(const Room_CS_SetRoomBeInvite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Room_CS_SetRoomBeInvite::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Room_CS_SetRoomBeInvite::Swap(Room_CS_SetRoomBeInvite* other) {
  if (other != this) {
    std::swap(allow_, other->allow_);
    std::swap(roomid_, other->roomid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Room_CS_SetRoomBeInvite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Room_CS_SetRoomBeInvite_descriptor_;
  metadata.reflection = Room_CS_SetRoomBeInvite_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Room_SC_SetRoomBeInvite::kResultFieldNumber;
#endif  // !_MSC_VER

Room_SC_SetRoomBeInvite::Room_SC_SetRoomBeInvite()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Room_SC_SetRoomBeInvite::InitAsDefaultInstance() {
}

Room_SC_SetRoomBeInvite::Room_SC_SetRoomBeInvite(const Room_SC_SetRoomBeInvite& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Room_SC_SetRoomBeInvite::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Room_SC_SetRoomBeInvite::~Room_SC_SetRoomBeInvite() {
  SharedDtor();
}

void Room_SC_SetRoomBeInvite::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Room_SC_SetRoomBeInvite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Room_SC_SetRoomBeInvite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Room_SC_SetRoomBeInvite_descriptor_;
}

const Room_SC_SetRoomBeInvite& Room_SC_SetRoomBeInvite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_room_2eproto();
  return *default_instance_;
}

Room_SC_SetRoomBeInvite* Room_SC_SetRoomBeInvite::default_instance_ = NULL;

Room_SC_SetRoomBeInvite* Room_SC_SetRoomBeInvite::New() const {
  return new Room_SC_SetRoomBeInvite;
}

void Room_SC_SetRoomBeInvite::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Room_SC_SetRoomBeInvite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Room_SC_SetRoomBeInvite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Room_SC_SetRoomBeInvite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Room_SC_SetRoomBeInvite::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Room_SC_SetRoomBeInvite::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Room_SC_SetRoomBeInvite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Room_SC_SetRoomBeInvite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Room_SC_SetRoomBeInvite::MergeFrom(const Room_SC_SetRoomBeInvite& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Room_SC_SetRoomBeInvite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Room_SC_SetRoomBeInvite::CopyFrom(const Room_SC_SetRoomBeInvite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Room_SC_SetRoomBeInvite::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Room_SC_SetRoomBeInvite::Swap(Room_SC_SetRoomBeInvite* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Room_SC_SetRoomBeInvite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Room_SC_SetRoomBeInvite_descriptor_;
  metadata.reflection = Room_SC_SetRoomBeInvite_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Room_CS_SetRoomAllow::kPlyIdFieldNumber;
const int Room_CS_SetRoomAllow::kAllowFieldNumber;
#endif  // !_MSC_VER

Room_CS_SetRoomAllow::Room_CS_SetRoomAllow()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Room_CS_SetRoomAllow::InitAsDefaultInstance() {
}

Room_CS_SetRoomAllow::Room_CS_SetRoomAllow(const Room_CS_SetRoomAllow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Room_CS_SetRoomAllow::SharedCtor() {
  _cached_size_ = 0;
  plyid_ = 0u;
  allow_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Room_CS_SetRoomAllow::~Room_CS_SetRoomAllow() {
  SharedDtor();
}

void Room_CS_SetRoomAllow::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Room_CS_SetRoomAllow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Room_CS_SetRoomAllow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Room_CS_SetRoomAllow_descriptor_;
}

const Room_CS_SetRoomAllow& Room_CS_SetRoomAllow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_room_2eproto();
  return *default_instance_;
}

Room_CS_SetRoomAllow* Room_CS_SetRoomAllow::default_instance_ = NULL;

Room_CS_SetRoomAllow* Room_CS_SetRoomAllow::New() const {
  return new Room_CS_SetRoomAllow;
}

void Room_CS_SetRoomAllow::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    plyid_ = 0u;
    allow_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Room_CS_SetRoomAllow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 plyId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &plyid_)));
          set_has_plyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_allow;
        break;
      }

      // required bool allow = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_)));
          set_has_allow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Room_CS_SetRoomAllow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 plyId = 1;
  if (has_plyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->plyid(), output);
  }

  // required bool allow = 2;
  if (has_allow()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->allow(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Room_CS_SetRoomAllow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 plyId = 1;
  if (has_plyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->plyid(), target);
  }

  // required bool allow = 2;
  if (has_allow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->allow(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Room_CS_SetRoomAllow::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 plyId = 1;
    if (has_plyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->plyid());
    }

    // required bool allow = 2;
    if (has_allow()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Room_CS_SetRoomAllow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Room_CS_SetRoomAllow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Room_CS_SetRoomAllow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Room_CS_SetRoomAllow::MergeFrom(const Room_CS_SetRoomAllow& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_plyid()) {
      set_plyid(from.plyid());
    }
    if (from.has_allow()) {
      set_allow(from.allow());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Room_CS_SetRoomAllow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Room_CS_SetRoomAllow::CopyFrom(const Room_CS_SetRoomAllow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Room_CS_SetRoomAllow::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Room_CS_SetRoomAllow::Swap(Room_CS_SetRoomAllow* other) {
  if (other != this) {
    std::swap(plyid_, other->plyid_);
    std::swap(allow_, other->allow_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Room_CS_SetRoomAllow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Room_CS_SetRoomAllow_descriptor_;
  metadata.reflection = Room_CS_SetRoomAllow_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Room_SC_SetRoomAllow::kResultFieldNumber;
#endif  // !_MSC_VER

Room_SC_SetRoomAllow::Room_SC_SetRoomAllow()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Room_SC_SetRoomAllow::InitAsDefaultInstance() {
}

Room_SC_SetRoomAllow::Room_SC_SetRoomAllow(const Room_SC_SetRoomAllow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Room_SC_SetRoomAllow::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Room_SC_SetRoomAllow::~Room_SC_SetRoomAllow() {
  SharedDtor();
}

void Room_SC_SetRoomAllow::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Room_SC_SetRoomAllow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Room_SC_SetRoomAllow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Room_SC_SetRoomAllow_descriptor_;
}

const Room_SC_SetRoomAllow& Room_SC_SetRoomAllow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_room_2eproto();
  return *default_instance_;
}

Room_SC_SetRoomAllow* Room_SC_SetRoomAllow::default_instance_ = NULL;

Room_SC_SetRoomAllow* Room_SC_SetRoomAllow::New() const {
  return new Room_SC_SetRoomAllow;
}

void Room_SC_SetRoomAllow::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Room_SC_SetRoomAllow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Room_SC_SetRoomAllow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Room_SC_SetRoomAllow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Room_SC_SetRoomAllow::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Room_SC_SetRoomAllow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Room_SC_SetRoomAllow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Room_SC_SetRoomAllow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Room_SC_SetRoomAllow::MergeFrom(const Room_SC_SetRoomAllow& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Room_SC_SetRoomAllow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Room_SC_SetRoomAllow::CopyFrom(const Room_SC_SetRoomAllow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Room_SC_SetRoomAllow::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Room_SC_SetRoomAllow::Swap(Room_SC_SetRoomAllow* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Room_SC_SetRoomAllow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Room_SC_SetRoomAllow_descriptor_;
  metadata.reflection = Room_SC_SetRoomAllow_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Room_CS_SetRoomAllowOneTime::kAllowFieldNumber;
#endif  // !_MSC_VER

Room_CS_SetRoomAllowOneTime::Room_CS_SetRoomAllowOneTime()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Room_CS_SetRoomAllowOneTime::InitAsDefaultInstance() {
}

Room_CS_SetRoomAllowOneTime::Room_CS_SetRoomAllowOneTime(const Room_CS_SetRoomAllowOneTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Room_CS_SetRoomAllowOneTime::SharedCtor() {
  _cached_size_ = 0;
  allow_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Room_CS_SetRoomAllowOneTime::~Room_CS_SetRoomAllowOneTime() {
  SharedDtor();
}

void Room_CS_SetRoomAllowOneTime::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Room_CS_SetRoomAllowOneTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Room_CS_SetRoomAllowOneTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Room_CS_SetRoomAllowOneTime_descriptor_;
}

const Room_CS_SetRoomAllowOneTime& Room_CS_SetRoomAllowOneTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_room_2eproto();
  return *default_instance_;
}

Room_CS_SetRoomAllowOneTime* Room_CS_SetRoomAllowOneTime::default_instance_ = NULL;

Room_CS_SetRoomAllowOneTime* Room_CS_SetRoomAllowOneTime::New() const {
  return new Room_CS_SetRoomAllowOneTime;
}

void Room_CS_SetRoomAllowOneTime::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    allow_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Room_CS_SetRoomAllowOneTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool allow = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_)));
          set_has_allow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Room_CS_SetRoomAllowOneTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool allow = 1;
  if (has_allow()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->allow(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Room_CS_SetRoomAllowOneTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool allow = 1;
  if (has_allow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->allow(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Room_CS_SetRoomAllowOneTime::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool allow = 1;
    if (has_allow()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Room_CS_SetRoomAllowOneTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Room_CS_SetRoomAllowOneTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Room_CS_SetRoomAllowOneTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Room_CS_SetRoomAllowOneTime::MergeFrom(const Room_CS_SetRoomAllowOneTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_allow()) {
      set_allow(from.allow());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Room_CS_SetRoomAllowOneTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Room_CS_SetRoomAllowOneTime::CopyFrom(const Room_CS_SetRoomAllowOneTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Room_CS_SetRoomAllowOneTime::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Room_CS_SetRoomAllowOneTime::Swap(Room_CS_SetRoomAllowOneTime* other) {
  if (other != this) {
    std::swap(allow_, other->allow_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Room_CS_SetRoomAllowOneTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Room_CS_SetRoomAllowOneTime_descriptor_;
  metadata.reflection = Room_CS_SetRoomAllowOneTime_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Room_SC_SetRoomAllowOneTime::kResultFieldNumber;
#endif  // !_MSC_VER

Room_SC_SetRoomAllowOneTime::Room_SC_SetRoomAllowOneTime()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Room_SC_SetRoomAllowOneTime::InitAsDefaultInstance() {
}

Room_SC_SetRoomAllowOneTime::Room_SC_SetRoomAllowOneTime(const Room_SC_SetRoomAllowOneTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Room_SC_SetRoomAllowOneTime::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Room_SC_SetRoomAllowOneTime::~Room_SC_SetRoomAllowOneTime() {
  SharedDtor();
}

void Room_SC_SetRoomAllowOneTime::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Room_SC_SetRoomAllowOneTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Room_SC_SetRoomAllowOneTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Room_SC_SetRoomAllowOneTime_descriptor_;
}

const Room_SC_SetRoomAllowOneTime& Room_SC_SetRoomAllowOneTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_room_2eproto();
  return *default_instance_;
}

Room_SC_SetRoomAllowOneTime* Room_SC_SetRoomAllowOneTime::default_instance_ = NULL;

Room_SC_SetRoomAllowOneTime* Room_SC_SetRoomAllowOneTime::New() const {
  return new Room_SC_SetRoomAllowOneTime;
}

void Room_SC_SetRoomAllowOneTime::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Room_SC_SetRoomAllowOneTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Room_SC_SetRoomAllowOneTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Room_SC_SetRoomAllowOneTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Room_SC_SetRoomAllowOneTime::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Room_SC_SetRoomAllowOneTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Room_SC_SetRoomAllowOneTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Room_SC_SetRoomAllowOneTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Room_SC_SetRoomAllowOneTime::MergeFrom(const Room_SC_SetRoomAllowOneTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Room_SC_SetRoomAllowOneTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Room_SC_SetRoomAllowOneTime::CopyFrom(const Room_SC_SetRoomAllowOneTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Room_SC_SetRoomAllowOneTime::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Room_SC_SetRoomAllowOneTime::Swap(Room_SC_SetRoomAllowOneTime* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Room_SC_SetRoomAllowOneTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Room_SC_SetRoomAllowOneTime_descriptor_;
  metadata.reflection = Room_SC_SetRoomAllowOneTime_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Room_CS_UpdateRoomInfo::Room_CS_UpdateRoomInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Room_CS_UpdateRoomInfo::InitAsDefaultInstance() {
}

Room_CS_UpdateRoomInfo::Room_CS_UpdateRoomInfo(const Room_CS_UpdateRoomInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Room_CS_UpdateRoomInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Room_CS_UpdateRoomInfo::~Room_CS_UpdateRoomInfo() {
  SharedDtor();
}

void Room_CS_UpdateRoomInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Room_CS_UpdateRoomInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Room_CS_UpdateRoomInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Room_CS_UpdateRoomInfo_descriptor_;
}

const Room_CS_UpdateRoomInfo& Room_CS_UpdateRoomInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_room_2eproto();
  return *default_instance_;
}

Room_CS_UpdateRoomInfo* Room_CS_UpdateRoomInfo::default_instance_ = NULL;

Room_CS_UpdateRoomInfo* Room_CS_UpdateRoomInfo::New() const {
  return new Room_CS_UpdateRoomInfo;
}

void Room_CS_UpdateRoomInfo::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Room_CS_UpdateRoomInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Room_CS_UpdateRoomInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Room_CS_UpdateRoomInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Room_CS_UpdateRoomInfo::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Room_CS_UpdateRoomInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Room_CS_UpdateRoomInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Room_CS_UpdateRoomInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Room_CS_UpdateRoomInfo::MergeFrom(const Room_CS_UpdateRoomInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Room_CS_UpdateRoomInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Room_CS_UpdateRoomInfo::CopyFrom(const Room_CS_UpdateRoomInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Room_CS_UpdateRoomInfo::IsInitialized() const {

  return true;
}

void Room_CS_UpdateRoomInfo::Swap(Room_CS_UpdateRoomInfo* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Room_CS_UpdateRoomInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Room_CS_UpdateRoomInfo_descriptor_;
  metadata.reflection = Room_CS_UpdateRoomInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Room_SC_UpdateRoomInfo::kRoomInfoFieldNumber;
#endif  // !_MSC_VER

Room_SC_UpdateRoomInfo::Room_SC_UpdateRoomInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Room_SC_UpdateRoomInfo::InitAsDefaultInstance() {
  roominfo_ = const_cast< ::proto::message::ProtoRoomInfo*>(&::proto::message::ProtoRoomInfo::default_instance());
}

Room_SC_UpdateRoomInfo::Room_SC_UpdateRoomInfo(const Room_SC_UpdateRoomInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Room_SC_UpdateRoomInfo::SharedCtor() {
  _cached_size_ = 0;
  roominfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Room_SC_UpdateRoomInfo::~Room_SC_UpdateRoomInfo() {
  SharedDtor();
}

void Room_SC_UpdateRoomInfo::SharedDtor() {
  if (this != default_instance_) {
    delete roominfo_;
  }
}

void Room_SC_UpdateRoomInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Room_SC_UpdateRoomInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Room_SC_UpdateRoomInfo_descriptor_;
}

const Room_SC_UpdateRoomInfo& Room_SC_UpdateRoomInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_room_2eproto();
  return *default_instance_;
}

Room_SC_UpdateRoomInfo* Room_SC_UpdateRoomInfo::default_instance_ = NULL;

Room_SC_UpdateRoomInfo* Room_SC_UpdateRoomInfo::New() const {
  return new Room_SC_UpdateRoomInfo;
}

void Room_SC_UpdateRoomInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_roominfo()) {
      if (roominfo_ != NULL) roominfo_->::proto::message::ProtoRoomInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Room_SC_UpdateRoomInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.message.ProtoRoomInfo roomInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_roominfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Room_SC_UpdateRoomInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto.message.ProtoRoomInfo roomInfo = 1;
  if (has_roominfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->roominfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Room_SC_UpdateRoomInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto.message.ProtoRoomInfo roomInfo = 1;
  if (has_roominfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->roominfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Room_SC_UpdateRoomInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto.message.ProtoRoomInfo roomInfo = 1;
    if (has_roominfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->roominfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Room_SC_UpdateRoomInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Room_SC_UpdateRoomInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Room_SC_UpdateRoomInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Room_SC_UpdateRoomInfo::MergeFrom(const Room_SC_UpdateRoomInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roominfo()) {
      mutable_roominfo()->::proto::message::ProtoRoomInfo::MergeFrom(from.roominfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Room_SC_UpdateRoomInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Room_SC_UpdateRoomInfo::CopyFrom(const Room_SC_UpdateRoomInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Room_SC_UpdateRoomInfo::IsInitialized() const {

  if (has_roominfo()) {
    if (!this->roominfo().IsInitialized()) return false;
  }
  return true;
}

void Room_SC_UpdateRoomInfo::Swap(Room_SC_UpdateRoomInfo* other) {
  if (other != this) {
    std::swap(roominfo_, other->roominfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Room_SC_UpdateRoomInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Room_SC_UpdateRoomInfo_descriptor_;
  metadata.reflection = Room_SC_UpdateRoomInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Room_SC_UpdateRoomBeInvite::kRoomIdFieldNumber;
const int Room_SC_UpdateRoomBeInvite::kNameFieldNumber;
#endif  // !_MSC_VER

Room_SC_UpdateRoomBeInvite::Room_SC_UpdateRoomBeInvite()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Room_SC_UpdateRoomBeInvite::InitAsDefaultInstance() {
}

Room_SC_UpdateRoomBeInvite::Room_SC_UpdateRoomBeInvite(const Room_SC_UpdateRoomBeInvite& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Room_SC_UpdateRoomBeInvite::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Room_SC_UpdateRoomBeInvite::~Room_SC_UpdateRoomBeInvite() {
  SharedDtor();
}

void Room_SC_UpdateRoomBeInvite::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Room_SC_UpdateRoomBeInvite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Room_SC_UpdateRoomBeInvite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Room_SC_UpdateRoomBeInvite_descriptor_;
}

const Room_SC_UpdateRoomBeInvite& Room_SC_UpdateRoomBeInvite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_room_2eproto();
  return *default_instance_;
}

Room_SC_UpdateRoomBeInvite* Room_SC_UpdateRoomBeInvite::default_instance_ = NULL;

Room_SC_UpdateRoomBeInvite* Room_SC_UpdateRoomBeInvite::New() const {
  return new Room_SC_UpdateRoomBeInvite;
}

void Room_SC_UpdateRoomBeInvite::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roomid_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Room_SC_UpdateRoomBeInvite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roomId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Room_SC_UpdateRoomBeInvite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roomId = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Room_SC_UpdateRoomBeInvite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roomId = 1;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Room_SC_UpdateRoomBeInvite::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roomId = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Room_SC_UpdateRoomBeInvite::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Room_SC_UpdateRoomBeInvite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Room_SC_UpdateRoomBeInvite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Room_SC_UpdateRoomBeInvite::MergeFrom(const Room_SC_UpdateRoomBeInvite& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Room_SC_UpdateRoomBeInvite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Room_SC_UpdateRoomBeInvite::CopyFrom(const Room_SC_UpdateRoomBeInvite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Room_SC_UpdateRoomBeInvite::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Room_SC_UpdateRoomBeInvite::Swap(Room_SC_UpdateRoomBeInvite* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Room_SC_UpdateRoomBeInvite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Room_SC_UpdateRoomBeInvite_descriptor_;
  metadata.reflection = Room_SC_UpdateRoomBeInvite_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Room_SC_UpdateApplyList::kRoomManListFieldNumber;
#endif  // !_MSC_VER

Room_SC_UpdateApplyList::Room_SC_UpdateApplyList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Room_SC_UpdateApplyList::InitAsDefaultInstance() {
}

Room_SC_UpdateApplyList::Room_SC_UpdateApplyList(const Room_SC_UpdateApplyList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Room_SC_UpdateApplyList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Room_SC_UpdateApplyList::~Room_SC_UpdateApplyList() {
  SharedDtor();
}

void Room_SC_UpdateApplyList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Room_SC_UpdateApplyList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Room_SC_UpdateApplyList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Room_SC_UpdateApplyList_descriptor_;
}

const Room_SC_UpdateApplyList& Room_SC_UpdateApplyList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_room_2eproto();
  return *default_instance_;
}

Room_SC_UpdateApplyList* Room_SC_UpdateApplyList::default_instance_ = NULL;

Room_SC_UpdateApplyList* Room_SC_UpdateApplyList::New() const {
  return new Room_SC_UpdateApplyList;
}

void Room_SC_UpdateApplyList::Clear() {
  roommanlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Room_SC_UpdateApplyList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.message.ProtoRoomManInfo roomManList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roomManList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_roommanlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_roomManList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Room_SC_UpdateApplyList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.message.ProtoRoomManInfo roomManList = 1;
  for (int i = 0; i < this->roommanlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->roommanlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Room_SC_UpdateApplyList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.message.ProtoRoomManInfo roomManList = 1;
  for (int i = 0; i < this->roommanlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->roommanlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Room_SC_UpdateApplyList::ByteSize() const {
  int total_size = 0;

  // repeated .proto.message.ProtoRoomManInfo roomManList = 1;
  total_size += 1 * this->roommanlist_size();
  for (int i = 0; i < this->roommanlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->roommanlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Room_SC_UpdateApplyList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Room_SC_UpdateApplyList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Room_SC_UpdateApplyList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Room_SC_UpdateApplyList::MergeFrom(const Room_SC_UpdateApplyList& from) {
  GOOGLE_CHECK_NE(&from, this);
  roommanlist_.MergeFrom(from.roommanlist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Room_SC_UpdateApplyList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Room_SC_UpdateApplyList::CopyFrom(const Room_SC_UpdateApplyList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Room_SC_UpdateApplyList::IsInitialized() const {

  for (int i = 0; i < roommanlist_size(); i++) {
    if (!this->roommanlist(i).IsInitialized()) return false;
  }
  return true;
}

void Room_SC_UpdateApplyList::Swap(Room_SC_UpdateApplyList* other) {
  if (other != this) {
    roommanlist_.Swap(&other->roommanlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Room_SC_UpdateApplyList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Room_SC_UpdateApplyList_descriptor_;
  metadata.reflection = Room_SC_UpdateApplyList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Room_SC_UpdateRoomMemberTick::kNameFieldNumber;
#endif  // !_MSC_VER

Room_SC_UpdateRoomMemberTick::Room_SC_UpdateRoomMemberTick()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Room_SC_UpdateRoomMemberTick::InitAsDefaultInstance() {
}

Room_SC_UpdateRoomMemberTick::Room_SC_UpdateRoomMemberTick(const Room_SC_UpdateRoomMemberTick& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Room_SC_UpdateRoomMemberTick::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Room_SC_UpdateRoomMemberTick::~Room_SC_UpdateRoomMemberTick() {
  SharedDtor();
}

void Room_SC_UpdateRoomMemberTick::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Room_SC_UpdateRoomMemberTick::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Room_SC_UpdateRoomMemberTick::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Room_SC_UpdateRoomMemberTick_descriptor_;
}

const Room_SC_UpdateRoomMemberTick& Room_SC_UpdateRoomMemberTick::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_room_2eproto();
  return *default_instance_;
}

Room_SC_UpdateRoomMemberTick* Room_SC_UpdateRoomMemberTick::default_instance_ = NULL;

Room_SC_UpdateRoomMemberTick* Room_SC_UpdateRoomMemberTick::New() const {
  return new Room_SC_UpdateRoomMemberTick;
}

void Room_SC_UpdateRoomMemberTick::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Room_SC_UpdateRoomMemberTick::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Room_SC_UpdateRoomMemberTick::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Room_SC_UpdateRoomMemberTick::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Room_SC_UpdateRoomMemberTick::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Room_SC_UpdateRoomMemberTick::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Room_SC_UpdateRoomMemberTick* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Room_SC_UpdateRoomMemberTick*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Room_SC_UpdateRoomMemberTick::MergeFrom(const Room_SC_UpdateRoomMemberTick& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Room_SC_UpdateRoomMemberTick::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Room_SC_UpdateRoomMemberTick::CopyFrom(const Room_SC_UpdateRoomMemberTick& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Room_SC_UpdateRoomMemberTick::IsInitialized() const {

  return true;
}

void Room_SC_UpdateRoomMemberTick::Swap(Room_SC_UpdateRoomMemberTick* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Room_SC_UpdateRoomMemberTick::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Room_SC_UpdateRoomMemberTick_descriptor_;
  metadata.reflection = Room_SC_UpdateRoomMemberTick_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Room_CS_FollowLeader::Room_CS_FollowLeader()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Room_CS_FollowLeader::InitAsDefaultInstance() {
}

Room_CS_FollowLeader::Room_CS_FollowLeader(const Room_CS_FollowLeader& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Room_CS_FollowLeader::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Room_CS_FollowLeader::~Room_CS_FollowLeader() {
  SharedDtor();
}

void Room_CS_FollowLeader::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Room_CS_FollowLeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Room_CS_FollowLeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Room_CS_FollowLeader_descriptor_;
}

const Room_CS_FollowLeader& Room_CS_FollowLeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_room_2eproto();
  return *default_instance_;
}

Room_CS_FollowLeader* Room_CS_FollowLeader::default_instance_ = NULL;

Room_CS_FollowLeader* Room_CS_FollowLeader::New() const {
  return new Room_CS_FollowLeader;
}

void Room_CS_FollowLeader::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Room_CS_FollowLeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Room_CS_FollowLeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Room_CS_FollowLeader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Room_CS_FollowLeader::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Room_CS_FollowLeader::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Room_CS_FollowLeader* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Room_CS_FollowLeader*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Room_CS_FollowLeader::MergeFrom(const Room_CS_FollowLeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Room_CS_FollowLeader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Room_CS_FollowLeader::CopyFrom(const Room_CS_FollowLeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Room_CS_FollowLeader::IsInitialized() const {

  return true;
}

void Room_CS_FollowLeader::Swap(Room_CS_FollowLeader* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Room_CS_FollowLeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Room_CS_FollowLeader_descriptor_;
  metadata.reflection = Room_CS_FollowLeader_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Room_SC_FollowLeader::kResultFieldNumber;
const int Room_SC_FollowLeader::kChangeMapFieldNumber;
const int Room_SC_FollowLeader::kPtFieldNumber;
#endif  // !_MSC_VER

Room_SC_FollowLeader::Room_SC_FollowLeader()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Room_SC_FollowLeader::InitAsDefaultInstance() {
  pt_ = const_cast< ::proto::message::Point3D*>(&::proto::message::Point3D::default_instance());
}

Room_SC_FollowLeader::Room_SC_FollowLeader(const Room_SC_FollowLeader& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Room_SC_FollowLeader::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  changemap_ = false;
  pt_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Room_SC_FollowLeader::~Room_SC_FollowLeader() {
  SharedDtor();
}

void Room_SC_FollowLeader::SharedDtor() {
  if (this != default_instance_) {
    delete pt_;
  }
}

void Room_SC_FollowLeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Room_SC_FollowLeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Room_SC_FollowLeader_descriptor_;
}

const Room_SC_FollowLeader& Room_SC_FollowLeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_room_2eproto();
  return *default_instance_;
}

Room_SC_FollowLeader* Room_SC_FollowLeader::default_instance_ = NULL;

Room_SC_FollowLeader* Room_SC_FollowLeader::New() const {
  return new Room_SC_FollowLeader;
}

void Room_SC_FollowLeader::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    changemap_ = false;
    if (has_pt()) {
      if (pt_ != NULL) pt_->::proto::message::Point3D::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Room_SC_FollowLeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_changeMap;
        break;
      }

      // optional bool changeMap = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_changeMap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &changemap_)));
          set_has_changemap();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pt;
        break;
      }

      // optional .proto.message.Point3D pt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Room_SC_FollowLeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional bool changeMap = 2;
  if (has_changemap()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->changemap(), output);
  }

  // optional .proto.message.Point3D pt = 3;
  if (has_pt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Room_SC_FollowLeader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional bool changeMap = 2;
  if (has_changemap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->changemap(), target);
  }

  // optional .proto.message.Point3D pt = 3;
  if (has_pt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Room_SC_FollowLeader::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional bool changeMap = 2;
    if (has_changemap()) {
      total_size += 1 + 1;
    }

    // optional .proto.message.Point3D pt = 3;
    if (has_pt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Room_SC_FollowLeader::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Room_SC_FollowLeader* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Room_SC_FollowLeader*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Room_SC_FollowLeader::MergeFrom(const Room_SC_FollowLeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_changemap()) {
      set_changemap(from.changemap());
    }
    if (from.has_pt()) {
      mutable_pt()->::proto::message::Point3D::MergeFrom(from.pt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Room_SC_FollowLeader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Room_SC_FollowLeader::CopyFrom(const Room_SC_FollowLeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Room_SC_FollowLeader::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Room_SC_FollowLeader::Swap(Room_SC_FollowLeader* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(changemap_, other->changemap_);
    std::swap(pt_, other->pt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Room_SC_FollowLeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Room_SC_FollowLeader_descriptor_;
  metadata.reflection = Room_SC_FollowLeader_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Room_CS_SummonFollower::Room_CS_SummonFollower()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Room_CS_SummonFollower::InitAsDefaultInstance() {
}

Room_CS_SummonFollower::Room_CS_SummonFollower(const Room_CS_SummonFollower& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Room_CS_SummonFollower::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Room_CS_SummonFollower::~Room_CS_SummonFollower() {
  SharedDtor();
}

void Room_CS_SummonFollower::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Room_CS_SummonFollower::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Room_CS_SummonFollower::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Room_CS_SummonFollower_descriptor_;
}

const Room_CS_SummonFollower& Room_CS_SummonFollower::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_room_2eproto();
  return *default_instance_;
}

Room_CS_SummonFollower* Room_CS_SummonFollower::default_instance_ = NULL;

Room_CS_SummonFollower* Room_CS_SummonFollower::New() const {
  return new Room_CS_SummonFollower;
}

void Room_CS_SummonFollower::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Room_CS_SummonFollower::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Room_CS_SummonFollower::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Room_CS_SummonFollower::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Room_CS_SummonFollower::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Room_CS_SummonFollower::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Room_CS_SummonFollower* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Room_CS_SummonFollower*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Room_CS_SummonFollower::MergeFrom(const Room_CS_SummonFollower& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Room_CS_SummonFollower::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Room_CS_SummonFollower::CopyFrom(const Room_CS_SummonFollower& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Room_CS_SummonFollower::IsInitialized() const {

  return true;
}

void Room_CS_SummonFollower::Swap(Room_CS_SummonFollower* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Room_CS_SummonFollower::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Room_CS_SummonFollower_descriptor_;
  metadata.reflection = Room_CS_SummonFollower_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Room_SC_SummonFollower::kResultFieldNumber;
#endif  // !_MSC_VER

Room_SC_SummonFollower::Room_SC_SummonFollower()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Room_SC_SummonFollower::InitAsDefaultInstance() {
}

Room_SC_SummonFollower::Room_SC_SummonFollower(const Room_SC_SummonFollower& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Room_SC_SummonFollower::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Room_SC_SummonFollower::~Room_SC_SummonFollower() {
  SharedDtor();
}

void Room_SC_SummonFollower::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Room_SC_SummonFollower::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Room_SC_SummonFollower::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Room_SC_SummonFollower_descriptor_;
}

const Room_SC_SummonFollower& Room_SC_SummonFollower::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_room_2eproto();
  return *default_instance_;
}

Room_SC_SummonFollower* Room_SC_SummonFollower::default_instance_ = NULL;

Room_SC_SummonFollower* Room_SC_SummonFollower::New() const {
  return new Room_SC_SummonFollower;
}

void Room_SC_SummonFollower::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Room_SC_SummonFollower::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Room_SC_SummonFollower::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Room_SC_SummonFollower::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Room_SC_SummonFollower::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Room_SC_SummonFollower::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Room_SC_SummonFollower* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Room_SC_SummonFollower*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Room_SC_SummonFollower::MergeFrom(const Room_SC_SummonFollower& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Room_SC_SummonFollower::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Room_SC_SummonFollower::CopyFrom(const Room_SC_SummonFollower& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Room_SC_SummonFollower::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Room_SC_SummonFollower::Swap(Room_SC_SummonFollower* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Room_SC_SummonFollower::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Room_SC_SummonFollower_descriptor_;
  metadata.reflection = Room_SC_SummonFollower_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Room_SC_LeaderSummon::Room_SC_LeaderSummon()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Room_SC_LeaderSummon::InitAsDefaultInstance() {
}

Room_SC_LeaderSummon::Room_SC_LeaderSummon(const Room_SC_LeaderSummon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Room_SC_LeaderSummon::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Room_SC_LeaderSummon::~Room_SC_LeaderSummon() {
  SharedDtor();
}

void Room_SC_LeaderSummon::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Room_SC_LeaderSummon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Room_SC_LeaderSummon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Room_SC_LeaderSummon_descriptor_;
}

const Room_SC_LeaderSummon& Room_SC_LeaderSummon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_room_2eproto();
  return *default_instance_;
}

Room_SC_LeaderSummon* Room_SC_LeaderSummon::default_instance_ = NULL;

Room_SC_LeaderSummon* Room_SC_LeaderSummon::New() const {
  return new Room_SC_LeaderSummon;
}

void Room_SC_LeaderSummon::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Room_SC_LeaderSummon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Room_SC_LeaderSummon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Room_SC_LeaderSummon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Room_SC_LeaderSummon::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Room_SC_LeaderSummon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Room_SC_LeaderSummon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Room_SC_LeaderSummon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Room_SC_LeaderSummon::MergeFrom(const Room_SC_LeaderSummon& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Room_SC_LeaderSummon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Room_SC_LeaderSummon::CopyFrom(const Room_SC_LeaderSummon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Room_SC_LeaderSummon::IsInitialized() const {

  return true;
}

void Room_SC_LeaderSummon::Swap(Room_SC_LeaderSummon* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Room_SC_LeaderSummon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Room_SC_LeaderSummon_descriptor_;
  metadata.reflection = Room_SC_LeaderSummon_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Room_CS_SetIgnoreRoomInvite::kAllowFieldNumber;
#endif  // !_MSC_VER

Room_CS_SetIgnoreRoomInvite::Room_CS_SetIgnoreRoomInvite()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Room_CS_SetIgnoreRoomInvite::InitAsDefaultInstance() {
}

Room_CS_SetIgnoreRoomInvite::Room_CS_SetIgnoreRoomInvite(const Room_CS_SetIgnoreRoomInvite& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Room_CS_SetIgnoreRoomInvite::SharedCtor() {
  _cached_size_ = 0;
  allow_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Room_CS_SetIgnoreRoomInvite::~Room_CS_SetIgnoreRoomInvite() {
  SharedDtor();
}

void Room_CS_SetIgnoreRoomInvite::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Room_CS_SetIgnoreRoomInvite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Room_CS_SetIgnoreRoomInvite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Room_CS_SetIgnoreRoomInvite_descriptor_;
}

const Room_CS_SetIgnoreRoomInvite& Room_CS_SetIgnoreRoomInvite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_room_2eproto();
  return *default_instance_;
}

Room_CS_SetIgnoreRoomInvite* Room_CS_SetIgnoreRoomInvite::default_instance_ = NULL;

Room_CS_SetIgnoreRoomInvite* Room_CS_SetIgnoreRoomInvite::New() const {
  return new Room_CS_SetIgnoreRoomInvite;
}

void Room_CS_SetIgnoreRoomInvite::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    allow_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Room_CS_SetIgnoreRoomInvite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool allow = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_)));
          set_has_allow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Room_CS_SetIgnoreRoomInvite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool allow = 1;
  if (has_allow()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->allow(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Room_CS_SetIgnoreRoomInvite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool allow = 1;
  if (has_allow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->allow(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Room_CS_SetIgnoreRoomInvite::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool allow = 1;
    if (has_allow()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Room_CS_SetIgnoreRoomInvite::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Room_CS_SetIgnoreRoomInvite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Room_CS_SetIgnoreRoomInvite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Room_CS_SetIgnoreRoomInvite::MergeFrom(const Room_CS_SetIgnoreRoomInvite& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_allow()) {
      set_allow(from.allow());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Room_CS_SetIgnoreRoomInvite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Room_CS_SetIgnoreRoomInvite::CopyFrom(const Room_CS_SetIgnoreRoomInvite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Room_CS_SetIgnoreRoomInvite::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Room_CS_SetIgnoreRoomInvite::Swap(Room_CS_SetIgnoreRoomInvite* other) {
  if (other != this) {
    std::swap(allow_, other->allow_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Room_CS_SetIgnoreRoomInvite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Room_CS_SetIgnoreRoomInvite_descriptor_;
  metadata.reflection = Room_CS_SetIgnoreRoomInvite_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Room_SC_SetIgnoreRoomInvite::kResultFieldNumber;
#endif  // !_MSC_VER

Room_SC_SetIgnoreRoomInvite::Room_SC_SetIgnoreRoomInvite()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Room_SC_SetIgnoreRoomInvite::InitAsDefaultInstance() {
}

Room_SC_SetIgnoreRoomInvite::Room_SC_SetIgnoreRoomInvite(const Room_SC_SetIgnoreRoomInvite& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Room_SC_SetIgnoreRoomInvite::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Room_SC_SetIgnoreRoomInvite::~Room_SC_SetIgnoreRoomInvite() {
  SharedDtor();
}

void Room_SC_SetIgnoreRoomInvite::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Room_SC_SetIgnoreRoomInvite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Room_SC_SetIgnoreRoomInvite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Room_SC_SetIgnoreRoomInvite_descriptor_;
}

const Room_SC_SetIgnoreRoomInvite& Room_SC_SetIgnoreRoomInvite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_room_2eproto();
  return *default_instance_;
}

Room_SC_SetIgnoreRoomInvite* Room_SC_SetIgnoreRoomInvite::default_instance_ = NULL;

Room_SC_SetIgnoreRoomInvite* Room_SC_SetIgnoreRoomInvite::New() const {
  return new Room_SC_SetIgnoreRoomInvite;
}

void Room_SC_SetIgnoreRoomInvite::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Room_SC_SetIgnoreRoomInvite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Room_SC_SetIgnoreRoomInvite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Room_SC_SetIgnoreRoomInvite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Room_SC_SetIgnoreRoomInvite::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Room_SC_SetIgnoreRoomInvite::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Room_SC_SetIgnoreRoomInvite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Room_SC_SetIgnoreRoomInvite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Room_SC_SetIgnoreRoomInvite::MergeFrom(const Room_SC_SetIgnoreRoomInvite& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Room_SC_SetIgnoreRoomInvite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Room_SC_SetIgnoreRoomInvite::CopyFrom(const Room_SC_SetIgnoreRoomInvite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Room_SC_SetIgnoreRoomInvite::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Room_SC_SetIgnoreRoomInvite::Swap(Room_SC_SetIgnoreRoomInvite* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Room_SC_SetIgnoreRoomInvite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Room_SC_SetIgnoreRoomInvite_descriptor_;
  metadata.reflection = Room_SC_SetIgnoreRoomInvite_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Room_CS_QueryIgnoreRoomInvite::Room_CS_QueryIgnoreRoomInvite()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Room_CS_QueryIgnoreRoomInvite::InitAsDefaultInstance() {
}

Room_CS_QueryIgnoreRoomInvite::Room_CS_QueryIgnoreRoomInvite(const Room_CS_QueryIgnoreRoomInvite& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Room_CS_QueryIgnoreRoomInvite::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Room_CS_QueryIgnoreRoomInvite::~Room_CS_QueryIgnoreRoomInvite() {
  SharedDtor();
}

void Room_CS_QueryIgnoreRoomInvite::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Room_CS_QueryIgnoreRoomInvite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Room_CS_QueryIgnoreRoomInvite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Room_CS_QueryIgnoreRoomInvite_descriptor_;
}

const Room_CS_QueryIgnoreRoomInvite& Room_CS_QueryIgnoreRoomInvite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_room_2eproto();
  return *default_instance_;
}

Room_CS_QueryIgnoreRoomInvite* Room_CS_QueryIgnoreRoomInvite::default_instance_ = NULL;

Room_CS_QueryIgnoreRoomInvite* Room_CS_QueryIgnoreRoomInvite::New() const {
  return new Room_CS_QueryIgnoreRoomInvite;
}

void Room_CS_QueryIgnoreRoomInvite::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Room_CS_QueryIgnoreRoomInvite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Room_CS_QueryIgnoreRoomInvite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Room_CS_QueryIgnoreRoomInvite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Room_CS_QueryIgnoreRoomInvite::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Room_CS_QueryIgnoreRoomInvite::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Room_CS_QueryIgnoreRoomInvite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Room_CS_QueryIgnoreRoomInvite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Room_CS_QueryIgnoreRoomInvite::MergeFrom(const Room_CS_QueryIgnoreRoomInvite& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Room_CS_QueryIgnoreRoomInvite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Room_CS_QueryIgnoreRoomInvite::CopyFrom(const Room_CS_QueryIgnoreRoomInvite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Room_CS_QueryIgnoreRoomInvite::IsInitialized() const {

  return true;
}

void Room_CS_QueryIgnoreRoomInvite::Swap(Room_CS_QueryIgnoreRoomInvite* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Room_CS_QueryIgnoreRoomInvite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Room_CS_QueryIgnoreRoomInvite_descriptor_;
  metadata.reflection = Room_CS_QueryIgnoreRoomInvite_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Room_SC_QueryIgnoreRoomInvite::kAllowFieldNumber;
#endif  // !_MSC_VER

Room_SC_QueryIgnoreRoomInvite::Room_SC_QueryIgnoreRoomInvite()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Room_SC_QueryIgnoreRoomInvite::InitAsDefaultInstance() {
}

Room_SC_QueryIgnoreRoomInvite::Room_SC_QueryIgnoreRoomInvite(const Room_SC_QueryIgnoreRoomInvite& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Room_SC_QueryIgnoreRoomInvite::SharedCtor() {
  _cached_size_ = 0;
  allow_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Room_SC_QueryIgnoreRoomInvite::~Room_SC_QueryIgnoreRoomInvite() {
  SharedDtor();
}

void Room_SC_QueryIgnoreRoomInvite::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Room_SC_QueryIgnoreRoomInvite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Room_SC_QueryIgnoreRoomInvite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Room_SC_QueryIgnoreRoomInvite_descriptor_;
}

const Room_SC_QueryIgnoreRoomInvite& Room_SC_QueryIgnoreRoomInvite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_room_2eproto();
  return *default_instance_;
}

Room_SC_QueryIgnoreRoomInvite* Room_SC_QueryIgnoreRoomInvite::default_instance_ = NULL;

Room_SC_QueryIgnoreRoomInvite* Room_SC_QueryIgnoreRoomInvite::New() const {
  return new Room_SC_QueryIgnoreRoomInvite;
}

void Room_SC_QueryIgnoreRoomInvite::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    allow_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Room_SC_QueryIgnoreRoomInvite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool allow = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_)));
          set_has_allow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Room_SC_QueryIgnoreRoomInvite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool allow = 1;
  if (has_allow()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->allow(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Room_SC_QueryIgnoreRoomInvite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool allow = 1;
  if (has_allow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->allow(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Room_SC_QueryIgnoreRoomInvite::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool allow = 1;
    if (has_allow()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Room_SC_QueryIgnoreRoomInvite::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Room_SC_QueryIgnoreRoomInvite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Room_SC_QueryIgnoreRoomInvite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Room_SC_QueryIgnoreRoomInvite::MergeFrom(const Room_SC_QueryIgnoreRoomInvite& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_allow()) {
      set_allow(from.allow());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Room_SC_QueryIgnoreRoomInvite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Room_SC_QueryIgnoreRoomInvite::CopyFrom(const Room_SC_QueryIgnoreRoomInvite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Room_SC_QueryIgnoreRoomInvite::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Room_SC_QueryIgnoreRoomInvite::Swap(Room_SC_QueryIgnoreRoomInvite* other) {
  if (other != this) {
    std::swap(allow_, other->allow_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Room_SC_QueryIgnoreRoomInvite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Room_SC_QueryIgnoreRoomInvite_descriptor_;
  metadata.reflection = Room_SC_QueryIgnoreRoomInvite_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Room_SC_ErrorInfo::kResultFieldNumber;
#endif  // !_MSC_VER

Room_SC_ErrorInfo::Room_SC_ErrorInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Room_SC_ErrorInfo::InitAsDefaultInstance() {
}

Room_SC_ErrorInfo::Room_SC_ErrorInfo(const Room_SC_ErrorInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Room_SC_ErrorInfo::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Room_SC_ErrorInfo::~Room_SC_ErrorInfo() {
  SharedDtor();
}

void Room_SC_ErrorInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Room_SC_ErrorInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Room_SC_ErrorInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Room_SC_ErrorInfo_descriptor_;
}

const Room_SC_ErrorInfo& Room_SC_ErrorInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_room_2eproto();
  return *default_instance_;
}

Room_SC_ErrorInfo* Room_SC_ErrorInfo::default_instance_ = NULL;

Room_SC_ErrorInfo* Room_SC_ErrorInfo::New() const {
  return new Room_SC_ErrorInfo;
}

void Room_SC_ErrorInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Room_SC_ErrorInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Room_SC_ErrorInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Room_SC_ErrorInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Room_SC_ErrorInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Room_SC_ErrorInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Room_SC_ErrorInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Room_SC_ErrorInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Room_SC_ErrorInfo::MergeFrom(const Room_SC_ErrorInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Room_SC_ErrorInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Room_SC_ErrorInfo::CopyFrom(const Room_SC_ErrorInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Room_SC_ErrorInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Room_SC_ErrorInfo::Swap(Room_SC_ErrorInfo* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Room_SC_ErrorInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Room_SC_ErrorInfo_descriptor_;
  metadata.reflection = Room_SC_ErrorInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoRoomManHPInfo::kPlyIdFieldNumber;
const int ProtoRoomManHPInfo::kMaxHpFieldNumber;
const int ProtoRoomManHPInfo::kHpFieldNumber;
#endif  // !_MSC_VER

ProtoRoomManHPInfo::ProtoRoomManHPInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoRoomManHPInfo::InitAsDefaultInstance() {
}

ProtoRoomManHPInfo::ProtoRoomManHPInfo(const ProtoRoomManHPInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoRoomManHPInfo::SharedCtor() {
  _cached_size_ = 0;
  plyid_ = 0u;
  maxhp_ = 0u;
  hp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoRoomManHPInfo::~ProtoRoomManHPInfo() {
  SharedDtor();
}

void ProtoRoomManHPInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoRoomManHPInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoRoomManHPInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoRoomManHPInfo_descriptor_;
}

const ProtoRoomManHPInfo& ProtoRoomManHPInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_room_2eproto();
  return *default_instance_;
}

ProtoRoomManHPInfo* ProtoRoomManHPInfo::default_instance_ = NULL;

ProtoRoomManHPInfo* ProtoRoomManHPInfo::New() const {
  return new ProtoRoomManHPInfo;
}

void ProtoRoomManHPInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    plyid_ = 0u;
    maxhp_ = 0u;
    hp_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoRoomManHPInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 plyId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &plyid_)));
          set_has_plyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_maxHp;
        break;
      }

      // required uint32 maxHp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxHp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxhp_)));
          set_has_maxhp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Hp;
        break;
      }

      // required uint32 Hp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoRoomManHPInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 plyId = 1;
  if (has_plyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->plyid(), output);
  }

  // required uint32 maxHp = 2;
  if (has_maxhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->maxhp(), output);
  }

  // required uint32 Hp = 3;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->hp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoRoomManHPInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 plyId = 1;
  if (has_plyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->plyid(), target);
  }

  // required uint32 maxHp = 2;
  if (has_maxhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->maxhp(), target);
  }

  // required uint32 Hp = 3;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->hp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoRoomManHPInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 plyId = 1;
    if (has_plyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->plyid());
    }

    // required uint32 maxHp = 2;
    if (has_maxhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxhp());
    }

    // required uint32 Hp = 3;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoRoomManHPInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoRoomManHPInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoRoomManHPInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoRoomManHPInfo::MergeFrom(const ProtoRoomManHPInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_plyid()) {
      set_plyid(from.plyid());
    }
    if (from.has_maxhp()) {
      set_maxhp(from.maxhp());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoRoomManHPInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoRoomManHPInfo::CopyFrom(const ProtoRoomManHPInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoRoomManHPInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ProtoRoomManHPInfo::Swap(ProtoRoomManHPInfo* other) {
  if (other != this) {
    std::swap(plyid_, other->plyid_);
    std::swap(maxhp_, other->maxhp_);
    std::swap(hp_, other->hp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoRoomManHPInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoRoomManHPInfo_descriptor_;
  metadata.reflection = ProtoRoomManHPInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Room_SC_UpdateCurrentHp::kHpListFieldNumber;
#endif  // !_MSC_VER

Room_SC_UpdateCurrentHp::Room_SC_UpdateCurrentHp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Room_SC_UpdateCurrentHp::InitAsDefaultInstance() {
}

Room_SC_UpdateCurrentHp::Room_SC_UpdateCurrentHp(const Room_SC_UpdateCurrentHp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Room_SC_UpdateCurrentHp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Room_SC_UpdateCurrentHp::~Room_SC_UpdateCurrentHp() {
  SharedDtor();
}

void Room_SC_UpdateCurrentHp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Room_SC_UpdateCurrentHp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Room_SC_UpdateCurrentHp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Room_SC_UpdateCurrentHp_descriptor_;
}

const Room_SC_UpdateCurrentHp& Room_SC_UpdateCurrentHp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_room_2eproto();
  return *default_instance_;
}

Room_SC_UpdateCurrentHp* Room_SC_UpdateCurrentHp::default_instance_ = NULL;

Room_SC_UpdateCurrentHp* Room_SC_UpdateCurrentHp::New() const {
  return new Room_SC_UpdateCurrentHp;
}

void Room_SC_UpdateCurrentHp::Clear() {
  hplist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Room_SC_UpdateCurrentHp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.message.ProtoRoomManHPInfo HpList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_HpList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hplist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_HpList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Room_SC_UpdateCurrentHp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.message.ProtoRoomManHPInfo HpList = 1;
  for (int i = 0; i < this->hplist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->hplist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Room_SC_UpdateCurrentHp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.message.ProtoRoomManHPInfo HpList = 1;
  for (int i = 0; i < this->hplist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->hplist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Room_SC_UpdateCurrentHp::ByteSize() const {
  int total_size = 0;

  // repeated .proto.message.ProtoRoomManHPInfo HpList = 1;
  total_size += 1 * this->hplist_size();
  for (int i = 0; i < this->hplist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hplist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Room_SC_UpdateCurrentHp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Room_SC_UpdateCurrentHp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Room_SC_UpdateCurrentHp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Room_SC_UpdateCurrentHp::MergeFrom(const Room_SC_UpdateCurrentHp& from) {
  GOOGLE_CHECK_NE(&from, this);
  hplist_.MergeFrom(from.hplist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Room_SC_UpdateCurrentHp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Room_SC_UpdateCurrentHp::CopyFrom(const Room_SC_UpdateCurrentHp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Room_SC_UpdateCurrentHp::IsInitialized() const {

  for (int i = 0; i < hplist_size(); i++) {
    if (!this->hplist(i).IsInitialized()) return false;
  }
  return true;
}

void Room_SC_UpdateCurrentHp::Swap(Room_SC_UpdateCurrentHp* other) {
  if (other != this) {
    hplist_.Swap(&other->hplist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Room_SC_UpdateCurrentHp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Room_SC_UpdateCurrentHp_descriptor_;
  metadata.reflection = Room_SC_UpdateCurrentHp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Room_CS_RoomReady::kStatusFieldNumber;
#endif  // !_MSC_VER

Room_CS_RoomReady::Room_CS_RoomReady()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Room_CS_RoomReady::InitAsDefaultInstance() {
}

Room_CS_RoomReady::Room_CS_RoomReady(const Room_CS_RoomReady& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Room_CS_RoomReady::SharedCtor() {
  _cached_size_ = 0;
  status_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Room_CS_RoomReady::~Room_CS_RoomReady() {
  SharedDtor();
}

void Room_CS_RoomReady::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Room_CS_RoomReady::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Room_CS_RoomReady::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Room_CS_RoomReady_descriptor_;
}

const Room_CS_RoomReady& Room_CS_RoomReady::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_room_2eproto();
  return *default_instance_;
}

Room_CS_RoomReady* Room_CS_RoomReady::default_instance_ = NULL;

Room_CS_RoomReady* Room_CS_RoomReady::New() const {
  return new Room_CS_RoomReady;
}

void Room_CS_RoomReady::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Room_CS_RoomReady::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Room_CS_RoomReady::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Room_CS_RoomReady::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Room_CS_RoomReady::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool status = 1;
    if (has_status()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Room_CS_RoomReady::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Room_CS_RoomReady* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Room_CS_RoomReady*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Room_CS_RoomReady::MergeFrom(const Room_CS_RoomReady& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Room_CS_RoomReady::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Room_CS_RoomReady::CopyFrom(const Room_CS_RoomReady& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Room_CS_RoomReady::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Room_CS_RoomReady::Swap(Room_CS_RoomReady* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Room_CS_RoomReady::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Room_CS_RoomReady_descriptor_;
  metadata.reflection = Room_CS_RoomReady_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Room_SC_RoomReady::kResultFieldNumber;
#endif  // !_MSC_VER

Room_SC_RoomReady::Room_SC_RoomReady()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Room_SC_RoomReady::InitAsDefaultInstance() {
}

Room_SC_RoomReady::Room_SC_RoomReady(const Room_SC_RoomReady& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Room_SC_RoomReady::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Room_SC_RoomReady::~Room_SC_RoomReady() {
  SharedDtor();
}

void Room_SC_RoomReady::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Room_SC_RoomReady::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Room_SC_RoomReady::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Room_SC_RoomReady_descriptor_;
}

const Room_SC_RoomReady& Room_SC_RoomReady::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_room_2eproto();
  return *default_instance_;
}

Room_SC_RoomReady* Room_SC_RoomReady::default_instance_ = NULL;

Room_SC_RoomReady* Room_SC_RoomReady::New() const {
  return new Room_SC_RoomReady;
}

void Room_SC_RoomReady::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Room_SC_RoomReady::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Room_SC_RoomReady::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Room_SC_RoomReady::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Room_SC_RoomReady::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Room_SC_RoomReady::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Room_SC_RoomReady* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Room_SC_RoomReady*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Room_SC_RoomReady::MergeFrom(const Room_SC_RoomReady& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Room_SC_RoomReady::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Room_SC_RoomReady::CopyFrom(const Room_SC_RoomReady& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Room_SC_RoomReady::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Room_SC_RoomReady::Swap(Room_SC_RoomReady* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Room_SC_RoomReady::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Room_SC_RoomReady_descriptor_;
  metadata.reflection = Room_SC_RoomReady_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Battle2Game_GetRoomList::kResultFieldNumber;
const int Battle2Game_GetRoomList::kRoomInfoFieldNumber;
#endif  // !_MSC_VER

Battle2Game_GetRoomList::Battle2Game_GetRoomList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Battle2Game_GetRoomList::InitAsDefaultInstance() {
}

Battle2Game_GetRoomList::Battle2Game_GetRoomList(const Battle2Game_GetRoomList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Battle2Game_GetRoomList::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Battle2Game_GetRoomList::~Battle2Game_GetRoomList() {
  SharedDtor();
}

void Battle2Game_GetRoomList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Battle2Game_GetRoomList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Battle2Game_GetRoomList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Battle2Game_GetRoomList_descriptor_;
}

const Battle2Game_GetRoomList& Battle2Game_GetRoomList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_room_2eproto();
  return *default_instance_;
}

Battle2Game_GetRoomList* Battle2Game_GetRoomList::default_instance_ = NULL;

Battle2Game_GetRoomList* Battle2Game_GetRoomList::New() const {
  return new Battle2Game_GetRoomList;
}

void Battle2Game_GetRoomList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  roominfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Battle2Game_GetRoomList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_roomInfo;
        break;
      }

      // repeated .proto.message.ProtoRoomListRoomInfo roomInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roomInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_roominfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_roomInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Battle2Game_GetRoomList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated .proto.message.ProtoRoomListRoomInfo roomInfo = 2;
  for (int i = 0; i < this->roominfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->roominfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Battle2Game_GetRoomList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated .proto.message.ProtoRoomListRoomInfo roomInfo = 2;
  for (int i = 0; i < this->roominfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->roominfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Battle2Game_GetRoomList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated .proto.message.ProtoRoomListRoomInfo roomInfo = 2;
  total_size += 1 * this->roominfo_size();
  for (int i = 0; i < this->roominfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->roominfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Battle2Game_GetRoomList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Battle2Game_GetRoomList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Battle2Game_GetRoomList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Battle2Game_GetRoomList::MergeFrom(const Battle2Game_GetRoomList& from) {
  GOOGLE_CHECK_NE(&from, this);
  roominfo_.MergeFrom(from.roominfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Battle2Game_GetRoomList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Battle2Game_GetRoomList::CopyFrom(const Battle2Game_GetRoomList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Battle2Game_GetRoomList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < roominfo_size(); i++) {
    if (!this->roominfo(i).IsInitialized()) return false;
  }
  return true;
}

void Battle2Game_GetRoomList::Swap(Battle2Game_GetRoomList* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    roominfo_.Swap(&other->roominfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Battle2Game_GetRoomList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Battle2Game_GetRoomList_descriptor_;
  metadata.reflection = Battle2Game_GetRoomList_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace proto

// @@protoc_insertion_point(global_scope)
