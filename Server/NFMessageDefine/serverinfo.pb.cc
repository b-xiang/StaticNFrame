// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: serverinfo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "serverinfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace message {

namespace {

const ::google::protobuf::Descriptor* ServerInfo_CS_ServerLevel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerInfo_CS_ServerLevel_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerInfo_CS_ServerTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerInfo_CS_ServerTime_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerInfo_SC_ServerLevel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerInfo_SC_ServerLevel_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerInfo_SC_ServerTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerInfo_SC_ServerTime_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_serverinfo_2eproto() {
  protobuf_AddDesc_serverinfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "serverinfo.proto");
  GOOGLE_CHECK(file != NULL);
  ServerInfo_CS_ServerLevel_descriptor_ = file->message_type(0);
  static const int ServerInfo_CS_ServerLevel_offsets_[1] = {
  };
  ServerInfo_CS_ServerLevel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerInfo_CS_ServerLevel_descriptor_,
      ServerInfo_CS_ServerLevel::default_instance_,
      ServerInfo_CS_ServerLevel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo_CS_ServerLevel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo_CS_ServerLevel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerInfo_CS_ServerLevel));
  ServerInfo_CS_ServerTime_descriptor_ = file->message_type(1);
  static const int ServerInfo_CS_ServerTime_offsets_[1] = {
  };
  ServerInfo_CS_ServerTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerInfo_CS_ServerTime_descriptor_,
      ServerInfo_CS_ServerTime::default_instance_,
      ServerInfo_CS_ServerTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo_CS_ServerTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo_CS_ServerTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerInfo_CS_ServerTime));
  ServerInfo_SC_ServerLevel_descriptor_ = file->message_type(2);
  static const int ServerInfo_SC_ServerLevel_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo_SC_ServerLevel, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo_SC_ServerLevel, daylevelup_),
  };
  ServerInfo_SC_ServerLevel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerInfo_SC_ServerLevel_descriptor_,
      ServerInfo_SC_ServerLevel::default_instance_,
      ServerInfo_SC_ServerLevel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo_SC_ServerLevel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo_SC_ServerLevel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerInfo_SC_ServerLevel));
  ServerInfo_SC_ServerTime_descriptor_ = file->message_type(3);
  static const int ServerInfo_SC_ServerTime_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo_SC_ServerTime, time_),
  };
  ServerInfo_SC_ServerTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerInfo_SC_ServerTime_descriptor_,
      ServerInfo_SC_ServerTime::default_instance_,
      ServerInfo_SC_ServerTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo_SC_ServerTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo_SC_ServerTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerInfo_SC_ServerTime));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_serverinfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerInfo_CS_ServerLevel_descriptor_, &ServerInfo_CS_ServerLevel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerInfo_CS_ServerTime_descriptor_, &ServerInfo_CS_ServerTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerInfo_SC_ServerLevel_descriptor_, &ServerInfo_SC_ServerLevel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerInfo_SC_ServerTime_descriptor_, &ServerInfo_SC_ServerTime::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_serverinfo_2eproto() {
  delete ServerInfo_CS_ServerLevel::default_instance_;
  delete ServerInfo_CS_ServerLevel_reflection_;
  delete ServerInfo_CS_ServerTime::default_instance_;
  delete ServerInfo_CS_ServerTime_reflection_;
  delete ServerInfo_SC_ServerLevel::default_instance_;
  delete ServerInfo_SC_ServerLevel_reflection_;
  delete ServerInfo_SC_ServerTime::default_instance_;
  delete ServerInfo_SC_ServerTime_reflection_;
}

void protobuf_AddDesc_serverinfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020serverinfo.proto\022\rproto.message\"\033\n\031Ser"
    "verInfo_CS_ServerLevel\"\032\n\030ServerInfo_CS_"
    "ServerTime\">\n\031ServerInfo_SC_ServerLevel\022"
    "\r\n\005level\030\001 \002(\005\022\022\n\ndayLevelUp\030\002 \001(\005\"(\n\030Se"
    "rverInfo_SC_ServerTime\022\014\n\004time\030\001 \002(\004B\017\n\r"
    "proto.message", 213);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "serverinfo.proto", &protobuf_RegisterTypes);
  ServerInfo_CS_ServerLevel::default_instance_ = new ServerInfo_CS_ServerLevel();
  ServerInfo_CS_ServerTime::default_instance_ = new ServerInfo_CS_ServerTime();
  ServerInfo_SC_ServerLevel::default_instance_ = new ServerInfo_SC_ServerLevel();
  ServerInfo_SC_ServerTime::default_instance_ = new ServerInfo_SC_ServerTime();
  ServerInfo_CS_ServerLevel::default_instance_->InitAsDefaultInstance();
  ServerInfo_CS_ServerTime::default_instance_->InitAsDefaultInstance();
  ServerInfo_SC_ServerLevel::default_instance_->InitAsDefaultInstance();
  ServerInfo_SC_ServerTime::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_serverinfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_serverinfo_2eproto {
  StaticDescriptorInitializer_serverinfo_2eproto() {
    protobuf_AddDesc_serverinfo_2eproto();
  }
} static_descriptor_initializer_serverinfo_2eproto_;

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ServerInfo_CS_ServerLevel::ServerInfo_CS_ServerLevel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerInfo_CS_ServerLevel::InitAsDefaultInstance() {
}

ServerInfo_CS_ServerLevel::ServerInfo_CS_ServerLevel(const ServerInfo_CS_ServerLevel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerInfo_CS_ServerLevel::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerInfo_CS_ServerLevel::~ServerInfo_CS_ServerLevel() {
  SharedDtor();
}

void ServerInfo_CS_ServerLevel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServerInfo_CS_ServerLevel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerInfo_CS_ServerLevel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerInfo_CS_ServerLevel_descriptor_;
}

const ServerInfo_CS_ServerLevel& ServerInfo_CS_ServerLevel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serverinfo_2eproto();
  return *default_instance_;
}

ServerInfo_CS_ServerLevel* ServerInfo_CS_ServerLevel::default_instance_ = NULL;

ServerInfo_CS_ServerLevel* ServerInfo_CS_ServerLevel::New() const {
  return new ServerInfo_CS_ServerLevel;
}

void ServerInfo_CS_ServerLevel::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerInfo_CS_ServerLevel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ServerInfo_CS_ServerLevel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerInfo_CS_ServerLevel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerInfo_CS_ServerLevel::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerInfo_CS_ServerLevel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerInfo_CS_ServerLevel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerInfo_CS_ServerLevel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerInfo_CS_ServerLevel::MergeFrom(const ServerInfo_CS_ServerLevel& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerInfo_CS_ServerLevel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerInfo_CS_ServerLevel::CopyFrom(const ServerInfo_CS_ServerLevel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerInfo_CS_ServerLevel::IsInitialized() const {

  return true;
}

void ServerInfo_CS_ServerLevel::Swap(ServerInfo_CS_ServerLevel* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerInfo_CS_ServerLevel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerInfo_CS_ServerLevel_descriptor_;
  metadata.reflection = ServerInfo_CS_ServerLevel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ServerInfo_CS_ServerTime::ServerInfo_CS_ServerTime()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerInfo_CS_ServerTime::InitAsDefaultInstance() {
}

ServerInfo_CS_ServerTime::ServerInfo_CS_ServerTime(const ServerInfo_CS_ServerTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerInfo_CS_ServerTime::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerInfo_CS_ServerTime::~ServerInfo_CS_ServerTime() {
  SharedDtor();
}

void ServerInfo_CS_ServerTime::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServerInfo_CS_ServerTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerInfo_CS_ServerTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerInfo_CS_ServerTime_descriptor_;
}

const ServerInfo_CS_ServerTime& ServerInfo_CS_ServerTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serverinfo_2eproto();
  return *default_instance_;
}

ServerInfo_CS_ServerTime* ServerInfo_CS_ServerTime::default_instance_ = NULL;

ServerInfo_CS_ServerTime* ServerInfo_CS_ServerTime::New() const {
  return new ServerInfo_CS_ServerTime;
}

void ServerInfo_CS_ServerTime::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerInfo_CS_ServerTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ServerInfo_CS_ServerTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerInfo_CS_ServerTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerInfo_CS_ServerTime::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerInfo_CS_ServerTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerInfo_CS_ServerTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerInfo_CS_ServerTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerInfo_CS_ServerTime::MergeFrom(const ServerInfo_CS_ServerTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerInfo_CS_ServerTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerInfo_CS_ServerTime::CopyFrom(const ServerInfo_CS_ServerTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerInfo_CS_ServerTime::IsInitialized() const {

  return true;
}

void ServerInfo_CS_ServerTime::Swap(ServerInfo_CS_ServerTime* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerInfo_CS_ServerTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerInfo_CS_ServerTime_descriptor_;
  metadata.reflection = ServerInfo_CS_ServerTime_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerInfo_SC_ServerLevel::kLevelFieldNumber;
const int ServerInfo_SC_ServerLevel::kDayLevelUpFieldNumber;
#endif  // !_MSC_VER

ServerInfo_SC_ServerLevel::ServerInfo_SC_ServerLevel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerInfo_SC_ServerLevel::InitAsDefaultInstance() {
}

ServerInfo_SC_ServerLevel::ServerInfo_SC_ServerLevel(const ServerInfo_SC_ServerLevel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerInfo_SC_ServerLevel::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0;
  daylevelup_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerInfo_SC_ServerLevel::~ServerInfo_SC_ServerLevel() {
  SharedDtor();
}

void ServerInfo_SC_ServerLevel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServerInfo_SC_ServerLevel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerInfo_SC_ServerLevel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerInfo_SC_ServerLevel_descriptor_;
}

const ServerInfo_SC_ServerLevel& ServerInfo_SC_ServerLevel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serverinfo_2eproto();
  return *default_instance_;
}

ServerInfo_SC_ServerLevel* ServerInfo_SC_ServerLevel::default_instance_ = NULL;

ServerInfo_SC_ServerLevel* ServerInfo_SC_ServerLevel::New() const {
  return new ServerInfo_SC_ServerLevel;
}

void ServerInfo_SC_ServerLevel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0;
    daylevelup_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerInfo_SC_ServerLevel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dayLevelUp;
        break;
      }

      // optional int32 dayLevelUp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dayLevelUp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &daylevelup_)));
          set_has_daylevelup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerInfo_SC_ServerLevel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }

  // optional int32 dayLevelUp = 2;
  if (has_daylevelup()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->daylevelup(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerInfo_SC_ServerLevel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->level(), target);
  }

  // optional int32 dayLevelUp = 2;
  if (has_daylevelup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->daylevelup(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerInfo_SC_ServerLevel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 dayLevelUp = 2;
    if (has_daylevelup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->daylevelup());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerInfo_SC_ServerLevel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerInfo_SC_ServerLevel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerInfo_SC_ServerLevel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerInfo_SC_ServerLevel::MergeFrom(const ServerInfo_SC_ServerLevel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_daylevelup()) {
      set_daylevelup(from.daylevelup());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerInfo_SC_ServerLevel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerInfo_SC_ServerLevel::CopyFrom(const ServerInfo_SC_ServerLevel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerInfo_SC_ServerLevel::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ServerInfo_SC_ServerLevel::Swap(ServerInfo_SC_ServerLevel* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(daylevelup_, other->daylevelup_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerInfo_SC_ServerLevel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerInfo_SC_ServerLevel_descriptor_;
  metadata.reflection = ServerInfo_SC_ServerLevel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerInfo_SC_ServerTime::kTimeFieldNumber;
#endif  // !_MSC_VER

ServerInfo_SC_ServerTime::ServerInfo_SC_ServerTime()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerInfo_SC_ServerTime::InitAsDefaultInstance() {
}

ServerInfo_SC_ServerTime::ServerInfo_SC_ServerTime(const ServerInfo_SC_ServerTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerInfo_SC_ServerTime::SharedCtor() {
  _cached_size_ = 0;
  time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerInfo_SC_ServerTime::~ServerInfo_SC_ServerTime() {
  SharedDtor();
}

void ServerInfo_SC_ServerTime::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServerInfo_SC_ServerTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerInfo_SC_ServerTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerInfo_SC_ServerTime_descriptor_;
}

const ServerInfo_SC_ServerTime& ServerInfo_SC_ServerTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serverinfo_2eproto();
  return *default_instance_;
}

ServerInfo_SC_ServerTime* ServerInfo_SC_ServerTime::default_instance_ = NULL;

ServerInfo_SC_ServerTime* ServerInfo_SC_ServerTime::New() const {
  return new ServerInfo_SC_ServerTime;
}

void ServerInfo_SC_ServerTime::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerInfo_SC_ServerTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerInfo_SC_ServerTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerInfo_SC_ServerTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerInfo_SC_ServerTime::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerInfo_SC_ServerTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerInfo_SC_ServerTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerInfo_SC_ServerTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerInfo_SC_ServerTime::MergeFrom(const ServerInfo_SC_ServerTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerInfo_SC_ServerTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerInfo_SC_ServerTime::CopyFrom(const ServerInfo_SC_ServerTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerInfo_SC_ServerTime::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ServerInfo_SC_ServerTime::Swap(ServerInfo_SC_ServerTime* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerInfo_SC_ServerTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerInfo_SC_ServerTime_descriptor_;
  metadata.reflection = ServerInfo_SC_ServerTime_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace proto

// @@protoc_insertion_point(global_scope)
