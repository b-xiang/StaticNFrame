// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: db_dungeon.proto

#ifndef PROTOBUF_db_5fdungeon_2eproto__INCLUDED
#define PROTOBUF_db_5fdungeon_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
#include "dungeon.pb.h"
// @@protoc_insertion_point(includes)

namespace proto {
namespace message {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_db_5fdungeon_2eproto();
void protobuf_AssignDesc_db_5fdungeon_2eproto();
void protobuf_ShutdownFile_db_5fdungeon_2eproto();

class DungeonInfo;

// ===================================================================

class DungeonInfo : public ::google::protobuf::Message {
 public:
  DungeonInfo();
  virtual ~DungeonInfo();

  DungeonInfo(const DungeonInfo& from);

  inline DungeonInfo& operator=(const DungeonInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DungeonInfo& default_instance();

  void Swap(DungeonInfo* other);

  // implements Message ----------------------------------------------

  DungeonInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DungeonInfo& from);
  void MergeFrom(const DungeonInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto.message.SingleStoryDungeon single_ordinary = 1;
  inline bool has_single_ordinary() const;
  inline void clear_single_ordinary();
  static const int kSingleOrdinaryFieldNumber = 1;
  inline const ::proto::message::SingleStoryDungeon& single_ordinary() const;
  inline ::proto::message::SingleStoryDungeon* mutable_single_ordinary();
  inline ::proto::message::SingleStoryDungeon* release_single_ordinary();
  inline void set_allocated_single_ordinary(::proto::message::SingleStoryDungeon* single_ordinary);

  // optional .proto.message.SingleStoryDungeon single_elite = 2;
  inline bool has_single_elite() const;
  inline void clear_single_elite();
  static const int kSingleEliteFieldNumber = 2;
  inline const ::proto::message::SingleStoryDungeon& single_elite() const;
  inline ::proto::message::SingleStoryDungeon* mutable_single_elite();
  inline ::proto::message::SingleStoryDungeon* release_single_elite();
  inline void set_allocated_single_elite(::proto::message::SingleStoryDungeon* single_elite);

  // optional .proto.message.SingleStoryDungeon Trial = 3;
  inline bool has_trial() const;
  inline void clear_trial();
  static const int kTrialFieldNumber = 3;
  inline const ::proto::message::SingleStoryDungeon& trial() const;
  inline ::proto::message::SingleStoryDungeon* mutable_trial();
  inline ::proto::message::SingleStoryDungeon* release_trial();
  inline void set_allocated_trial(::proto::message::SingleStoryDungeon* trial);

  // repeated .proto.message.PassDungeon other_pass_list = 4;
  inline int other_pass_list_size() const;
  inline void clear_other_pass_list();
  static const int kOtherPassListFieldNumber = 4;
  inline const ::proto::message::PassDungeon& other_pass_list(int index) const;
  inline ::proto::message::PassDungeon* mutable_other_pass_list(int index);
  inline ::proto::message::PassDungeon* add_other_pass_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::message::PassDungeon >&
      other_pass_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::message::PassDungeon >*
      mutable_other_pass_list();

  // optional int32 grade_s_times = 5;
  inline bool has_grade_s_times() const;
  inline void clear_grade_s_times();
  static const int kGradeSTimesFieldNumber = 5;
  inline ::google::protobuf::int32 grade_s_times() const;
  inline void set_grade_s_times(::google::protobuf::int32 value);

  // repeated .proto.message.PassDungeon single_material = 6;
  inline int single_material_size() const;
  inline void clear_single_material();
  static const int kSingleMaterialFieldNumber = 6;
  inline const ::proto::message::PassDungeon& single_material(int index) const;
  inline ::proto::message::PassDungeon* mutable_single_material(int index);
  inline ::proto::message::PassDungeon* add_single_material();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::message::PassDungeon >&
      single_material() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::message::PassDungeon >*
      mutable_single_material();

  // repeated .proto.message.TrialInfo single_trial = 7;
  inline int single_trial_size() const;
  inline void clear_single_trial();
  static const int kSingleTrialFieldNumber = 7;
  inline const ::proto::message::TrialInfo& single_trial(int index) const;
  inline ::proto::message::TrialInfo* mutable_single_trial(int index);
  inline ::proto::message::TrialInfo* add_single_trial();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::message::TrialInfo >&
      single_trial() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::message::TrialInfo >*
      mutable_single_trial();

  // repeated .proto.message.IDNum grade_S_rewardtimes = 8;
  inline int grade_s_rewardtimes_size() const;
  inline void clear_grade_s_rewardtimes();
  static const int kGradeSRewardtimesFieldNumber = 8;
  inline const ::proto::message::IDNum& grade_s_rewardtimes(int index) const;
  inline ::proto::message::IDNum* mutable_grade_s_rewardtimes(int index);
  inline ::proto::message::IDNum* add_grade_s_rewardtimes();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::message::IDNum >&
      grade_s_rewardtimes() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::message::IDNum >*
      mutable_grade_s_rewardtimes();

  // optional uint32 day_friendly = 9;
  inline bool has_day_friendly() const;
  inline void clear_day_friendly();
  static const int kDayFriendlyFieldNumber = 9;
  inline ::google::protobuf::uint32 day_friendly() const;
  inline void set_day_friendly(::google::protobuf::uint32 value);

  // optional uint32 week_friendly = 10;
  inline bool has_week_friendly() const;
  inline void clear_week_friendly();
  static const int kWeekFriendlyFieldNumber = 10;
  inline ::google::protobuf::uint32 week_friendly() const;
  inline void set_week_friendly(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.message.DungeonInfo)
 private:
  inline void set_has_single_ordinary();
  inline void clear_has_single_ordinary();
  inline void set_has_single_elite();
  inline void clear_has_single_elite();
  inline void set_has_trial();
  inline void clear_has_trial();
  inline void set_has_grade_s_times();
  inline void clear_has_grade_s_times();
  inline void set_has_day_friendly();
  inline void clear_has_day_friendly();
  inline void set_has_week_friendly();
  inline void clear_has_week_friendly();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::message::SingleStoryDungeon* single_ordinary_;
  ::proto::message::SingleStoryDungeon* single_elite_;
  ::proto::message::SingleStoryDungeon* trial_;
  ::google::protobuf::RepeatedPtrField< ::proto::message::PassDungeon > other_pass_list_;
  ::google::protobuf::RepeatedPtrField< ::proto::message::PassDungeon > single_material_;
  ::google::protobuf::RepeatedPtrField< ::proto::message::TrialInfo > single_trial_;
  ::google::protobuf::int32 grade_s_times_;
  ::google::protobuf::uint32 day_friendly_;
  ::google::protobuf::RepeatedPtrField< ::proto::message::IDNum > grade_s_rewardtimes_;
  ::google::protobuf::uint32 week_friendly_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_db_5fdungeon_2eproto();
  friend void protobuf_AssignDesc_db_5fdungeon_2eproto();
  friend void protobuf_ShutdownFile_db_5fdungeon_2eproto();

  void InitAsDefaultInstance();
  static DungeonInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// DungeonInfo

// optional .proto.message.SingleStoryDungeon single_ordinary = 1;
inline bool DungeonInfo::has_single_ordinary() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DungeonInfo::set_has_single_ordinary() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DungeonInfo::clear_has_single_ordinary() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DungeonInfo::clear_single_ordinary() {
  if (single_ordinary_ != NULL) single_ordinary_->::proto::message::SingleStoryDungeon::Clear();
  clear_has_single_ordinary();
}
inline const ::proto::message::SingleStoryDungeon& DungeonInfo::single_ordinary() const {
  return single_ordinary_ != NULL ? *single_ordinary_ : *default_instance_->single_ordinary_;
}
inline ::proto::message::SingleStoryDungeon* DungeonInfo::mutable_single_ordinary() {
  set_has_single_ordinary();
  if (single_ordinary_ == NULL) single_ordinary_ = new ::proto::message::SingleStoryDungeon;
  return single_ordinary_;
}
inline ::proto::message::SingleStoryDungeon* DungeonInfo::release_single_ordinary() {
  clear_has_single_ordinary();
  ::proto::message::SingleStoryDungeon* temp = single_ordinary_;
  single_ordinary_ = NULL;
  return temp;
}
inline void DungeonInfo::set_allocated_single_ordinary(::proto::message::SingleStoryDungeon* single_ordinary) {
  delete single_ordinary_;
  single_ordinary_ = single_ordinary;
  if (single_ordinary) {
    set_has_single_ordinary();
  } else {
    clear_has_single_ordinary();
  }
}

// optional .proto.message.SingleStoryDungeon single_elite = 2;
inline bool DungeonInfo::has_single_elite() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DungeonInfo::set_has_single_elite() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DungeonInfo::clear_has_single_elite() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DungeonInfo::clear_single_elite() {
  if (single_elite_ != NULL) single_elite_->::proto::message::SingleStoryDungeon::Clear();
  clear_has_single_elite();
}
inline const ::proto::message::SingleStoryDungeon& DungeonInfo::single_elite() const {
  return single_elite_ != NULL ? *single_elite_ : *default_instance_->single_elite_;
}
inline ::proto::message::SingleStoryDungeon* DungeonInfo::mutable_single_elite() {
  set_has_single_elite();
  if (single_elite_ == NULL) single_elite_ = new ::proto::message::SingleStoryDungeon;
  return single_elite_;
}
inline ::proto::message::SingleStoryDungeon* DungeonInfo::release_single_elite() {
  clear_has_single_elite();
  ::proto::message::SingleStoryDungeon* temp = single_elite_;
  single_elite_ = NULL;
  return temp;
}
inline void DungeonInfo::set_allocated_single_elite(::proto::message::SingleStoryDungeon* single_elite) {
  delete single_elite_;
  single_elite_ = single_elite;
  if (single_elite) {
    set_has_single_elite();
  } else {
    clear_has_single_elite();
  }
}

// optional .proto.message.SingleStoryDungeon Trial = 3;
inline bool DungeonInfo::has_trial() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DungeonInfo::set_has_trial() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DungeonInfo::clear_has_trial() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DungeonInfo::clear_trial() {
  if (trial_ != NULL) trial_->::proto::message::SingleStoryDungeon::Clear();
  clear_has_trial();
}
inline const ::proto::message::SingleStoryDungeon& DungeonInfo::trial() const {
  return trial_ != NULL ? *trial_ : *default_instance_->trial_;
}
inline ::proto::message::SingleStoryDungeon* DungeonInfo::mutable_trial() {
  set_has_trial();
  if (trial_ == NULL) trial_ = new ::proto::message::SingleStoryDungeon;
  return trial_;
}
inline ::proto::message::SingleStoryDungeon* DungeonInfo::release_trial() {
  clear_has_trial();
  ::proto::message::SingleStoryDungeon* temp = trial_;
  trial_ = NULL;
  return temp;
}
inline void DungeonInfo::set_allocated_trial(::proto::message::SingleStoryDungeon* trial) {
  delete trial_;
  trial_ = trial;
  if (trial) {
    set_has_trial();
  } else {
    clear_has_trial();
  }
}

// repeated .proto.message.PassDungeon other_pass_list = 4;
inline int DungeonInfo::other_pass_list_size() const {
  return other_pass_list_.size();
}
inline void DungeonInfo::clear_other_pass_list() {
  other_pass_list_.Clear();
}
inline const ::proto::message::PassDungeon& DungeonInfo::other_pass_list(int index) const {
  return other_pass_list_.Get(index);
}
inline ::proto::message::PassDungeon* DungeonInfo::mutable_other_pass_list(int index) {
  return other_pass_list_.Mutable(index);
}
inline ::proto::message::PassDungeon* DungeonInfo::add_other_pass_list() {
  return other_pass_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::message::PassDungeon >&
DungeonInfo::other_pass_list() const {
  return other_pass_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::message::PassDungeon >*
DungeonInfo::mutable_other_pass_list() {
  return &other_pass_list_;
}

// optional int32 grade_s_times = 5;
inline bool DungeonInfo::has_grade_s_times() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DungeonInfo::set_has_grade_s_times() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DungeonInfo::clear_has_grade_s_times() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DungeonInfo::clear_grade_s_times() {
  grade_s_times_ = 0;
  clear_has_grade_s_times();
}
inline ::google::protobuf::int32 DungeonInfo::grade_s_times() const {
  return grade_s_times_;
}
inline void DungeonInfo::set_grade_s_times(::google::protobuf::int32 value) {
  set_has_grade_s_times();
  grade_s_times_ = value;
}

// repeated .proto.message.PassDungeon single_material = 6;
inline int DungeonInfo::single_material_size() const {
  return single_material_.size();
}
inline void DungeonInfo::clear_single_material() {
  single_material_.Clear();
}
inline const ::proto::message::PassDungeon& DungeonInfo::single_material(int index) const {
  return single_material_.Get(index);
}
inline ::proto::message::PassDungeon* DungeonInfo::mutable_single_material(int index) {
  return single_material_.Mutable(index);
}
inline ::proto::message::PassDungeon* DungeonInfo::add_single_material() {
  return single_material_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::message::PassDungeon >&
DungeonInfo::single_material() const {
  return single_material_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::message::PassDungeon >*
DungeonInfo::mutable_single_material() {
  return &single_material_;
}

// repeated .proto.message.TrialInfo single_trial = 7;
inline int DungeonInfo::single_trial_size() const {
  return single_trial_.size();
}
inline void DungeonInfo::clear_single_trial() {
  single_trial_.Clear();
}
inline const ::proto::message::TrialInfo& DungeonInfo::single_trial(int index) const {
  return single_trial_.Get(index);
}
inline ::proto::message::TrialInfo* DungeonInfo::mutable_single_trial(int index) {
  return single_trial_.Mutable(index);
}
inline ::proto::message::TrialInfo* DungeonInfo::add_single_trial() {
  return single_trial_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::message::TrialInfo >&
DungeonInfo::single_trial() const {
  return single_trial_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::message::TrialInfo >*
DungeonInfo::mutable_single_trial() {
  return &single_trial_;
}

// repeated .proto.message.IDNum grade_S_rewardtimes = 8;
inline int DungeonInfo::grade_s_rewardtimes_size() const {
  return grade_s_rewardtimes_.size();
}
inline void DungeonInfo::clear_grade_s_rewardtimes() {
  grade_s_rewardtimes_.Clear();
}
inline const ::proto::message::IDNum& DungeonInfo::grade_s_rewardtimes(int index) const {
  return grade_s_rewardtimes_.Get(index);
}
inline ::proto::message::IDNum* DungeonInfo::mutable_grade_s_rewardtimes(int index) {
  return grade_s_rewardtimes_.Mutable(index);
}
inline ::proto::message::IDNum* DungeonInfo::add_grade_s_rewardtimes() {
  return grade_s_rewardtimes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::message::IDNum >&
DungeonInfo::grade_s_rewardtimes() const {
  return grade_s_rewardtimes_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::message::IDNum >*
DungeonInfo::mutable_grade_s_rewardtimes() {
  return &grade_s_rewardtimes_;
}

// optional uint32 day_friendly = 9;
inline bool DungeonInfo::has_day_friendly() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DungeonInfo::set_has_day_friendly() {
  _has_bits_[0] |= 0x00000100u;
}
inline void DungeonInfo::clear_has_day_friendly() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void DungeonInfo::clear_day_friendly() {
  day_friendly_ = 0u;
  clear_has_day_friendly();
}
inline ::google::protobuf::uint32 DungeonInfo::day_friendly() const {
  return day_friendly_;
}
inline void DungeonInfo::set_day_friendly(::google::protobuf::uint32 value) {
  set_has_day_friendly();
  day_friendly_ = value;
}

// optional uint32 week_friendly = 10;
inline bool DungeonInfo::has_week_friendly() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void DungeonInfo::set_has_week_friendly() {
  _has_bits_[0] |= 0x00000200u;
}
inline void DungeonInfo::clear_has_week_friendly() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void DungeonInfo::clear_week_friendly() {
  week_friendly_ = 0u;
  clear_has_week_friendly();
}
inline ::google::protobuf::uint32 DungeonInfo::week_friendly() const {
  return week_friendly_;
}
inline void DungeonInfo::set_week_friendly(::google::protobuf::uint32 value) {
  set_has_week_friendly();
  week_friendly_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace proto

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_db_5fdungeon_2eproto__INCLUDED
