// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ride.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ride.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace message {

namespace {

const ::google::protobuf::Descriptor* ProtoRideEquipCell_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoRideEquipCell_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoRideAllCellInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoRideAllCellInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Ride_CS_GetRideInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Ride_CS_GetRideInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Ride_SC_GetRideInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Ride_SC_GetRideInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Ride_CS_Upgrade_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Ride_CS_Upgrade_reflection_ = NULL;
const ::google::protobuf::Descriptor* Ride_SC_Upgrade_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Ride_SC_Upgrade_reflection_ = NULL;
const ::google::protobuf::Descriptor* Ride_CS_UpgSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Ride_CS_UpgSkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* Ride_SC_UpgSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Ride_SC_UpgSkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* Ride_CS_OpenEquipCell_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Ride_CS_OpenEquipCell_reflection_ = NULL;
const ::google::protobuf::Descriptor* Ride_SC_OpenEquipCell_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Ride_SC_OpenEquipCell_reflection_ = NULL;
const ::google::protobuf::Descriptor* Ride_CS_PutOnRideEquip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Ride_CS_PutOnRideEquip_reflection_ = NULL;
const ::google::protobuf::Descriptor* Ride_SC_PutOnRideEquip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Ride_SC_PutOnRideEquip_reflection_ = NULL;
const ::google::protobuf::Descriptor* Ride_CS_GetOffRideEquip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Ride_CS_GetOffRideEquip_reflection_ = NULL;
const ::google::protobuf::Descriptor* Ride_SC_GetOffRideEquip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Ride_SC_GetOffRideEquip_reflection_ = NULL;
const ::google::protobuf::Descriptor* Ride_CS_RideStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Ride_CS_RideStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* Ride_SC_RideStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Ride_SC_RideStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* Ride_CS_Eat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Ride_CS_Eat_reflection_ = NULL;
const ::google::protobuf::Descriptor* Ride_SC_Eat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Ride_SC_Eat_reflection_ = NULL;
const ::google::protobuf::Descriptor* Ride_CS_SkillOpen_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Ride_CS_SkillOpen_reflection_ = NULL;
const ::google::protobuf::Descriptor* Ride_SC_SkillOpen_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Ride_SC_SkillOpen_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ride_2eproto() {
  protobuf_AddDesc_ride_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ride.proto");
  GOOGLE_CHECK(file != NULL);
  ProtoRideEquipCell_descriptor_ = file->message_type(0);
  static const int ProtoRideEquipCell_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRideEquipCell, equipid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRideEquipCell, isopen_),
  };
  ProtoRideEquipCell_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoRideEquipCell_descriptor_,
      ProtoRideEquipCell::default_instance_,
      ProtoRideEquipCell_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRideEquipCell, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRideEquipCell, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoRideEquipCell));
  ProtoRideAllCellInfo_descriptor_ = file->message_type(1);
  static const int ProtoRideAllCellInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRideAllCellInfo, nid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRideAllCellInfo, nlucky_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRideAllCellInfo, nskill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRideAllCellInfo, equips_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRideAllCellInfo, rideequipgird_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRideAllCellInfo, eatfoodid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRideAllCellInfo, eatfoodnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRideAllCellInfo, skillbooks_),
  };
  ProtoRideAllCellInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoRideAllCellInfo_descriptor_,
      ProtoRideAllCellInfo::default_instance_,
      ProtoRideAllCellInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRideAllCellInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRideAllCellInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoRideAllCellInfo));
  Ride_CS_GetRideInfo_descriptor_ = file->message_type(2);
  static const int Ride_CS_GetRideInfo_offsets_[1] = {
  };
  Ride_CS_GetRideInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Ride_CS_GetRideInfo_descriptor_,
      Ride_CS_GetRideInfo::default_instance_,
      Ride_CS_GetRideInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ride_CS_GetRideInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ride_CS_GetRideInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Ride_CS_GetRideInfo));
  Ride_SC_GetRideInfo_descriptor_ = file->message_type(3);
  static const int Ride_SC_GetRideInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ride_SC_GetRideInfo, nid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ride_SC_GetRideInfo, nlucky_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ride_SC_GetRideInfo, nskill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ride_SC_GetRideInfo, equips_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ride_SC_GetRideInfo, rideequipgird_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ride_SC_GetRideInfo, eatfoodid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ride_SC_GetRideInfo, eatfoodnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ride_SC_GetRideInfo, skillbooks_),
  };
  Ride_SC_GetRideInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Ride_SC_GetRideInfo_descriptor_,
      Ride_SC_GetRideInfo::default_instance_,
      Ride_SC_GetRideInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ride_SC_GetRideInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ride_SC_GetRideInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Ride_SC_GetRideInfo));
  Ride_CS_Upgrade_descriptor_ = file->message_type(4);
  static const int Ride_CS_Upgrade_offsets_[1] = {
  };
  Ride_CS_Upgrade_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Ride_CS_Upgrade_descriptor_,
      Ride_CS_Upgrade::default_instance_,
      Ride_CS_Upgrade_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ride_CS_Upgrade, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ride_CS_Upgrade, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Ride_CS_Upgrade));
  Ride_SC_Upgrade_descriptor_ = file->message_type(5);
  static const int Ride_SC_Upgrade_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ride_SC_Upgrade, ret_),
  };
  Ride_SC_Upgrade_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Ride_SC_Upgrade_descriptor_,
      Ride_SC_Upgrade::default_instance_,
      Ride_SC_Upgrade_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ride_SC_Upgrade, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ride_SC_Upgrade, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Ride_SC_Upgrade));
  Ride_CS_UpgSkill_descriptor_ = file->message_type(6);
  static const int Ride_CS_UpgSkill_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ride_CS_UpgSkill, skillid_),
  };
  Ride_CS_UpgSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Ride_CS_UpgSkill_descriptor_,
      Ride_CS_UpgSkill::default_instance_,
      Ride_CS_UpgSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ride_CS_UpgSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ride_CS_UpgSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Ride_CS_UpgSkill));
  Ride_SC_UpgSkill_descriptor_ = file->message_type(7);
  static const int Ride_SC_UpgSkill_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ride_SC_UpgSkill, ret_),
  };
  Ride_SC_UpgSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Ride_SC_UpgSkill_descriptor_,
      Ride_SC_UpgSkill::default_instance_,
      Ride_SC_UpgSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ride_SC_UpgSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ride_SC_UpgSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Ride_SC_UpgSkill));
  Ride_CS_OpenEquipCell_descriptor_ = file->message_type(8);
  static const int Ride_CS_OpenEquipCell_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ride_CS_OpenEquipCell, cellid_),
  };
  Ride_CS_OpenEquipCell_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Ride_CS_OpenEquipCell_descriptor_,
      Ride_CS_OpenEquipCell::default_instance_,
      Ride_CS_OpenEquipCell_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ride_CS_OpenEquipCell, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ride_CS_OpenEquipCell, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Ride_CS_OpenEquipCell));
  Ride_SC_OpenEquipCell_descriptor_ = file->message_type(9);
  static const int Ride_SC_OpenEquipCell_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ride_SC_OpenEquipCell, ret_),
  };
  Ride_SC_OpenEquipCell_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Ride_SC_OpenEquipCell_descriptor_,
      Ride_SC_OpenEquipCell::default_instance_,
      Ride_SC_OpenEquipCell_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ride_SC_OpenEquipCell, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ride_SC_OpenEquipCell, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Ride_SC_OpenEquipCell));
  Ride_CS_PutOnRideEquip_descriptor_ = file->message_type(10);
  static const int Ride_CS_PutOnRideEquip_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ride_CS_PutOnRideEquip, uuid_),
  };
  Ride_CS_PutOnRideEquip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Ride_CS_PutOnRideEquip_descriptor_,
      Ride_CS_PutOnRideEquip::default_instance_,
      Ride_CS_PutOnRideEquip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ride_CS_PutOnRideEquip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ride_CS_PutOnRideEquip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Ride_CS_PutOnRideEquip));
  Ride_SC_PutOnRideEquip_descriptor_ = file->message_type(11);
  static const int Ride_SC_PutOnRideEquip_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ride_SC_PutOnRideEquip, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ride_SC_PutOnRideEquip, equip_list_),
  };
  Ride_SC_PutOnRideEquip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Ride_SC_PutOnRideEquip_descriptor_,
      Ride_SC_PutOnRideEquip::default_instance_,
      Ride_SC_PutOnRideEquip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ride_SC_PutOnRideEquip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ride_SC_PutOnRideEquip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Ride_SC_PutOnRideEquip));
  Ride_CS_GetOffRideEquip_descriptor_ = file->message_type(12);
  static const int Ride_CS_GetOffRideEquip_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ride_CS_GetOffRideEquip, uuid_),
  };
  Ride_CS_GetOffRideEquip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Ride_CS_GetOffRideEquip_descriptor_,
      Ride_CS_GetOffRideEquip::default_instance_,
      Ride_CS_GetOffRideEquip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ride_CS_GetOffRideEquip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ride_CS_GetOffRideEquip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Ride_CS_GetOffRideEquip));
  Ride_SC_GetOffRideEquip_descriptor_ = file->message_type(13);
  static const int Ride_SC_GetOffRideEquip_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ride_SC_GetOffRideEquip, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ride_SC_GetOffRideEquip, getoff_equip_),
  };
  Ride_SC_GetOffRideEquip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Ride_SC_GetOffRideEquip_descriptor_,
      Ride_SC_GetOffRideEquip::default_instance_,
      Ride_SC_GetOffRideEquip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ride_SC_GetOffRideEquip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ride_SC_GetOffRideEquip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Ride_SC_GetOffRideEquip));
  Ride_CS_RideStatus_descriptor_ = file->message_type(14);
  static const int Ride_CS_RideStatus_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ride_CS_RideStatus, status_),
  };
  Ride_CS_RideStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Ride_CS_RideStatus_descriptor_,
      Ride_CS_RideStatus::default_instance_,
      Ride_CS_RideStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ride_CS_RideStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ride_CS_RideStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Ride_CS_RideStatus));
  Ride_SC_RideStatus_descriptor_ = file->message_type(15);
  static const int Ride_SC_RideStatus_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ride_SC_RideStatus, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ride_SC_RideStatus, status_),
  };
  Ride_SC_RideStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Ride_SC_RideStatus_descriptor_,
      Ride_SC_RideStatus::default_instance_,
      Ride_SC_RideStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ride_SC_RideStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ride_SC_RideStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Ride_SC_RideStatus));
  Ride_CS_Eat_descriptor_ = file->message_type(16);
  static const int Ride_CS_Eat_offsets_[1] = {
  };
  Ride_CS_Eat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Ride_CS_Eat_descriptor_,
      Ride_CS_Eat::default_instance_,
      Ride_CS_Eat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ride_CS_Eat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ride_CS_Eat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Ride_CS_Eat));
  Ride_SC_Eat_descriptor_ = file->message_type(17);
  static const int Ride_SC_Eat_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ride_SC_Eat, result_),
  };
  Ride_SC_Eat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Ride_SC_Eat_descriptor_,
      Ride_SC_Eat::default_instance_,
      Ride_SC_Eat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ride_SC_Eat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ride_SC_Eat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Ride_SC_Eat));
  Ride_CS_SkillOpen_descriptor_ = file->message_type(18);
  static const int Ride_CS_SkillOpen_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ride_CS_SkillOpen, bookitemid_),
  };
  Ride_CS_SkillOpen_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Ride_CS_SkillOpen_descriptor_,
      Ride_CS_SkillOpen::default_instance_,
      Ride_CS_SkillOpen_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ride_CS_SkillOpen, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ride_CS_SkillOpen, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Ride_CS_SkillOpen));
  Ride_SC_SkillOpen_descriptor_ = file->message_type(19);
  static const int Ride_SC_SkillOpen_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ride_SC_SkillOpen, result_),
  };
  Ride_SC_SkillOpen_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Ride_SC_SkillOpen_descriptor_,
      Ride_SC_SkillOpen::default_instance_,
      Ride_SC_SkillOpen_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ride_SC_SkillOpen, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ride_SC_SkillOpen, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Ride_SC_SkillOpen));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ride_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoRideEquipCell_descriptor_, &ProtoRideEquipCell::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoRideAllCellInfo_descriptor_, &ProtoRideAllCellInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Ride_CS_GetRideInfo_descriptor_, &Ride_CS_GetRideInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Ride_SC_GetRideInfo_descriptor_, &Ride_SC_GetRideInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Ride_CS_Upgrade_descriptor_, &Ride_CS_Upgrade::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Ride_SC_Upgrade_descriptor_, &Ride_SC_Upgrade::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Ride_CS_UpgSkill_descriptor_, &Ride_CS_UpgSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Ride_SC_UpgSkill_descriptor_, &Ride_SC_UpgSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Ride_CS_OpenEquipCell_descriptor_, &Ride_CS_OpenEquipCell::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Ride_SC_OpenEquipCell_descriptor_, &Ride_SC_OpenEquipCell::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Ride_CS_PutOnRideEquip_descriptor_, &Ride_CS_PutOnRideEquip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Ride_SC_PutOnRideEquip_descriptor_, &Ride_SC_PutOnRideEquip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Ride_CS_GetOffRideEquip_descriptor_, &Ride_CS_GetOffRideEquip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Ride_SC_GetOffRideEquip_descriptor_, &Ride_SC_GetOffRideEquip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Ride_CS_RideStatus_descriptor_, &Ride_CS_RideStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Ride_SC_RideStatus_descriptor_, &Ride_SC_RideStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Ride_CS_Eat_descriptor_, &Ride_CS_Eat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Ride_SC_Eat_descriptor_, &Ride_SC_Eat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Ride_CS_SkillOpen_descriptor_, &Ride_CS_SkillOpen::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Ride_SC_SkillOpen_descriptor_, &Ride_SC_SkillOpen::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ride_2eproto() {
  delete ProtoRideEquipCell::default_instance_;
  delete ProtoRideEquipCell_reflection_;
  delete ProtoRideAllCellInfo::default_instance_;
  delete ProtoRideAllCellInfo_reflection_;
  delete Ride_CS_GetRideInfo::default_instance_;
  delete Ride_CS_GetRideInfo_reflection_;
  delete Ride_SC_GetRideInfo::default_instance_;
  delete Ride_SC_GetRideInfo_reflection_;
  delete Ride_CS_Upgrade::default_instance_;
  delete Ride_CS_Upgrade_reflection_;
  delete Ride_SC_Upgrade::default_instance_;
  delete Ride_SC_Upgrade_reflection_;
  delete Ride_CS_UpgSkill::default_instance_;
  delete Ride_CS_UpgSkill_reflection_;
  delete Ride_SC_UpgSkill::default_instance_;
  delete Ride_SC_UpgSkill_reflection_;
  delete Ride_CS_OpenEquipCell::default_instance_;
  delete Ride_CS_OpenEquipCell_reflection_;
  delete Ride_SC_OpenEquipCell::default_instance_;
  delete Ride_SC_OpenEquipCell_reflection_;
  delete Ride_CS_PutOnRideEquip::default_instance_;
  delete Ride_CS_PutOnRideEquip_reflection_;
  delete Ride_SC_PutOnRideEquip::default_instance_;
  delete Ride_SC_PutOnRideEquip_reflection_;
  delete Ride_CS_GetOffRideEquip::default_instance_;
  delete Ride_CS_GetOffRideEquip_reflection_;
  delete Ride_SC_GetOffRideEquip::default_instance_;
  delete Ride_SC_GetOffRideEquip_reflection_;
  delete Ride_CS_RideStatus::default_instance_;
  delete Ride_CS_RideStatus_reflection_;
  delete Ride_SC_RideStatus::default_instance_;
  delete Ride_SC_RideStatus_reflection_;
  delete Ride_CS_Eat::default_instance_;
  delete Ride_CS_Eat_reflection_;
  delete Ride_SC_Eat::default_instance_;
  delete Ride_SC_Eat_reflection_;
  delete Ride_CS_SkillOpen::default_instance_;
  delete Ride_CS_SkillOpen_reflection_;
  delete Ride_SC_SkillOpen::default_instance_;
  delete Ride_SC_SkillOpen_reflection_;
}

void protobuf_AddDesc_ride_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::proto::message::protobuf_AddDesc_common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nride.proto\022\rproto.message\032\014common.prot"
    "o\"5\n\022ProtoRideEquipCell\022\017\n\007equipid\030\001 \002(\r"
    "\022\016\n\006isOpen\030\002 \002(\010\"\343\001\n\024ProtoRideAllCellInf"
    "o\022\013\n\003nID\030\001 \001(\005\022\016\n\006nLucky\030\002 \001(\005\022\016\n\006nSkill"
    "\030\003 \003(\005\0221\n\006equips\030\004 \003(\0132!.proto.message.P"
    "rotoRideEquipCell\0220\n\022rideequipgird_list\030"
    "\005 \003(\0132\024.proto.message.Equip\022\021\n\teatFoodId"
    "\030\006 \001(\r\022\022\n\neatFoodNum\030\007 \001(\r\022\022\n\nskillbooks"
    "\030\010 \003(\r\"\025\n\023Ride_CS_GetRideInfo\"\342\001\n\023Ride_S"
    "C_GetRideInfo\022\013\n\003nID\030\001 \002(\005\022\016\n\006nLucky\030\002 \002"
    "(\005\022\016\n\006nSkill\030\003 \003(\005\0221\n\006equips\030\004 \003(\0132!.pro"
    "to.message.ProtoRideEquipCell\0220\n\022rideequ"
    "ipgird_list\030\005 \003(\0132\024.proto.message.Equip\022"
    "\021\n\teatFoodId\030\006 \001(\r\022\022\n\neatFoodNum\030\007 \001(\r\022\022"
    "\n\nskillbooks\030\010 \003(\r\"\021\n\017Ride_CS_Upgrade\"\036\n"
    "\017Ride_SC_Upgrade\022\013\n\003ret\030\001 \002(\005\"#\n\020Ride_CS"
    "_UpgSkill\022\017\n\007skillid\030\001 \002(\005\"\037\n\020Ride_SC_Up"
    "gSkill\022\013\n\003ret\030\001 \002(\005\"\'\n\025Ride_CS_OpenEquip"
    "Cell\022\016\n\006cellid\030\001 \002(\005\"$\n\025Ride_SC_OpenEqui"
    "pCell\022\013\n\003ret\030\001 \002(\005\"&\n\026Ride_CS_PutOnRideE"
    "quip\022\014\n\004uuid\030\001 \001(\004\"R\n\026Ride_SC_PutOnRideE"
    "quip\022\016\n\006result\030\001 \001(\005\022(\n\nequip_list\030\002 \003(\013"
    "2\024.proto.message.Equip\"\'\n\027Ride_CS_GetOff"
    "RideEquip\022\014\n\004uuid\030\001 \001(\004\"U\n\027Ride_SC_GetOf"
    "fRideEquip\022\016\n\006result\030\001 \001(\005\022*\n\014getoff_equ"
    "ip\030\002 \001(\0132\024.proto.message.Equip\"$\n\022Ride_C"
    "S_RideStatus\022\016\n\006status\030\001 \002(\010\"1\n\022Ride_SC_"
    "RideStatus\022\013\n\003ret\030\001 \002(\005\022\016\n\006status\030\002 \002(\010\""
    "\r\n\013Ride_CS_Eat\"\035\n\013Ride_SC_Eat\022\016\n\006result\030"
    "\001 \001(\005\"\'\n\021Ride_CS_SkillOpen\022\022\n\nbookItemId"
    "\030\001 \001(\r\"#\n\021Ride_SC_SkillOpen\022\016\n\006result\030\001 "
    "\001(\005B\017\n\rproto.message", 1260);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ride.proto", &protobuf_RegisterTypes);
  ProtoRideEquipCell::default_instance_ = new ProtoRideEquipCell();
  ProtoRideAllCellInfo::default_instance_ = new ProtoRideAllCellInfo();
  Ride_CS_GetRideInfo::default_instance_ = new Ride_CS_GetRideInfo();
  Ride_SC_GetRideInfo::default_instance_ = new Ride_SC_GetRideInfo();
  Ride_CS_Upgrade::default_instance_ = new Ride_CS_Upgrade();
  Ride_SC_Upgrade::default_instance_ = new Ride_SC_Upgrade();
  Ride_CS_UpgSkill::default_instance_ = new Ride_CS_UpgSkill();
  Ride_SC_UpgSkill::default_instance_ = new Ride_SC_UpgSkill();
  Ride_CS_OpenEquipCell::default_instance_ = new Ride_CS_OpenEquipCell();
  Ride_SC_OpenEquipCell::default_instance_ = new Ride_SC_OpenEquipCell();
  Ride_CS_PutOnRideEquip::default_instance_ = new Ride_CS_PutOnRideEquip();
  Ride_SC_PutOnRideEquip::default_instance_ = new Ride_SC_PutOnRideEquip();
  Ride_CS_GetOffRideEquip::default_instance_ = new Ride_CS_GetOffRideEquip();
  Ride_SC_GetOffRideEquip::default_instance_ = new Ride_SC_GetOffRideEquip();
  Ride_CS_RideStatus::default_instance_ = new Ride_CS_RideStatus();
  Ride_SC_RideStatus::default_instance_ = new Ride_SC_RideStatus();
  Ride_CS_Eat::default_instance_ = new Ride_CS_Eat();
  Ride_SC_Eat::default_instance_ = new Ride_SC_Eat();
  Ride_CS_SkillOpen::default_instance_ = new Ride_CS_SkillOpen();
  Ride_SC_SkillOpen::default_instance_ = new Ride_SC_SkillOpen();
  ProtoRideEquipCell::default_instance_->InitAsDefaultInstance();
  ProtoRideAllCellInfo::default_instance_->InitAsDefaultInstance();
  Ride_CS_GetRideInfo::default_instance_->InitAsDefaultInstance();
  Ride_SC_GetRideInfo::default_instance_->InitAsDefaultInstance();
  Ride_CS_Upgrade::default_instance_->InitAsDefaultInstance();
  Ride_SC_Upgrade::default_instance_->InitAsDefaultInstance();
  Ride_CS_UpgSkill::default_instance_->InitAsDefaultInstance();
  Ride_SC_UpgSkill::default_instance_->InitAsDefaultInstance();
  Ride_CS_OpenEquipCell::default_instance_->InitAsDefaultInstance();
  Ride_SC_OpenEquipCell::default_instance_->InitAsDefaultInstance();
  Ride_CS_PutOnRideEquip::default_instance_->InitAsDefaultInstance();
  Ride_SC_PutOnRideEquip::default_instance_->InitAsDefaultInstance();
  Ride_CS_GetOffRideEquip::default_instance_->InitAsDefaultInstance();
  Ride_SC_GetOffRideEquip::default_instance_->InitAsDefaultInstance();
  Ride_CS_RideStatus::default_instance_->InitAsDefaultInstance();
  Ride_SC_RideStatus::default_instance_->InitAsDefaultInstance();
  Ride_CS_Eat::default_instance_->InitAsDefaultInstance();
  Ride_SC_Eat::default_instance_->InitAsDefaultInstance();
  Ride_CS_SkillOpen::default_instance_->InitAsDefaultInstance();
  Ride_SC_SkillOpen::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ride_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ride_2eproto {
  StaticDescriptorInitializer_ride_2eproto() {
    protobuf_AddDesc_ride_2eproto();
  }
} static_descriptor_initializer_ride_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ProtoRideEquipCell::kEquipidFieldNumber;
const int ProtoRideEquipCell::kIsOpenFieldNumber;
#endif  // !_MSC_VER

ProtoRideEquipCell::ProtoRideEquipCell()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoRideEquipCell::InitAsDefaultInstance() {
}

ProtoRideEquipCell::ProtoRideEquipCell(const ProtoRideEquipCell& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoRideEquipCell::SharedCtor() {
  _cached_size_ = 0;
  equipid_ = 0u;
  isopen_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoRideEquipCell::~ProtoRideEquipCell() {
  SharedDtor();
}

void ProtoRideEquipCell::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoRideEquipCell::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoRideEquipCell::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoRideEquipCell_descriptor_;
}

const ProtoRideEquipCell& ProtoRideEquipCell::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ride_2eproto();
  return *default_instance_;
}

ProtoRideEquipCell* ProtoRideEquipCell::default_instance_ = NULL;

ProtoRideEquipCell* ProtoRideEquipCell::New() const {
  return new ProtoRideEquipCell;
}

void ProtoRideEquipCell::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    equipid_ = 0u;
    isopen_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoRideEquipCell::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 equipid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &equipid_)));
          set_has_equipid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isOpen;
        break;
      }

      // required bool isOpen = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isOpen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isopen_)));
          set_has_isopen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoRideEquipCell::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 equipid = 1;
  if (has_equipid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->equipid(), output);
  }

  // required bool isOpen = 2;
  if (has_isopen()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isopen(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoRideEquipCell::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 equipid = 1;
  if (has_equipid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->equipid(), target);
  }

  // required bool isOpen = 2;
  if (has_isopen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isopen(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoRideEquipCell::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 equipid = 1;
    if (has_equipid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->equipid());
    }

    // required bool isOpen = 2;
    if (has_isopen()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoRideEquipCell::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoRideEquipCell* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoRideEquipCell*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoRideEquipCell::MergeFrom(const ProtoRideEquipCell& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equipid()) {
      set_equipid(from.equipid());
    }
    if (from.has_isopen()) {
      set_isopen(from.isopen());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoRideEquipCell::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoRideEquipCell::CopyFrom(const ProtoRideEquipCell& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoRideEquipCell::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ProtoRideEquipCell::Swap(ProtoRideEquipCell* other) {
  if (other != this) {
    std::swap(equipid_, other->equipid_);
    std::swap(isopen_, other->isopen_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoRideEquipCell::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoRideEquipCell_descriptor_;
  metadata.reflection = ProtoRideEquipCell_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoRideAllCellInfo::kNIDFieldNumber;
const int ProtoRideAllCellInfo::kNLuckyFieldNumber;
const int ProtoRideAllCellInfo::kNSkillFieldNumber;
const int ProtoRideAllCellInfo::kEquipsFieldNumber;
const int ProtoRideAllCellInfo::kRideequipgirdListFieldNumber;
const int ProtoRideAllCellInfo::kEatFoodIdFieldNumber;
const int ProtoRideAllCellInfo::kEatFoodNumFieldNumber;
const int ProtoRideAllCellInfo::kSkillbooksFieldNumber;
#endif  // !_MSC_VER

ProtoRideAllCellInfo::ProtoRideAllCellInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoRideAllCellInfo::InitAsDefaultInstance() {
}

ProtoRideAllCellInfo::ProtoRideAllCellInfo(const ProtoRideAllCellInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoRideAllCellInfo::SharedCtor() {
  _cached_size_ = 0;
  nid_ = 0;
  nlucky_ = 0;
  eatfoodid_ = 0u;
  eatfoodnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoRideAllCellInfo::~ProtoRideAllCellInfo() {
  SharedDtor();
}

void ProtoRideAllCellInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoRideAllCellInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoRideAllCellInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoRideAllCellInfo_descriptor_;
}

const ProtoRideAllCellInfo& ProtoRideAllCellInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ride_2eproto();
  return *default_instance_;
}

ProtoRideAllCellInfo* ProtoRideAllCellInfo::default_instance_ = NULL;

ProtoRideAllCellInfo* ProtoRideAllCellInfo::New() const {
  return new ProtoRideAllCellInfo;
}

void ProtoRideAllCellInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nid_ = 0;
    nlucky_ = 0;
    eatfoodid_ = 0u;
    eatfoodnum_ = 0u;
  }
  nskill_.Clear();
  equips_.Clear();
  rideequipgird_list_.Clear();
  skillbooks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoRideAllCellInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 nID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nid_)));
          set_has_nid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nLucky;
        break;
      }

      // optional int32 nLucky = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nLucky:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nlucky_)));
          set_has_nlucky();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nSkill;
        break;
      }

      // repeated int32 nSkill = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nSkill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_nskill())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_nskill())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nSkill;
        if (input->ExpectTag(34)) goto parse_equips;
        break;
      }

      // repeated .proto.message.ProtoRideEquipCell equips = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equips:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equips()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_equips;
        if (input->ExpectTag(42)) goto parse_rideequipgird_list;
        break;
      }

      // repeated .proto.message.Equip rideequipgird_list = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rideequipgird_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rideequipgird_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_rideequipgird_list;
        if (input->ExpectTag(48)) goto parse_eatFoodId;
        break;
      }

      // optional uint32 eatFoodId = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eatFoodId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eatfoodid_)));
          set_has_eatfoodid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_eatFoodNum;
        break;
      }

      // optional uint32 eatFoodNum = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eatFoodNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eatfoodnum_)));
          set_has_eatfoodnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_skillbooks;
        break;
      }

      // repeated uint32 skillbooks = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillbooks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 64, input, this->mutable_skillbooks())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_skillbooks())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_skillbooks;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoRideAllCellInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 nID = 1;
  if (has_nid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nid(), output);
  }

  // optional int32 nLucky = 2;
  if (has_nlucky()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nlucky(), output);
  }

  // repeated int32 nSkill = 3;
  for (int i = 0; i < this->nskill_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->nskill(i), output);
  }

  // repeated .proto.message.ProtoRideEquipCell equips = 4;
  for (int i = 0; i < this->equips_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->equips(i), output);
  }

  // repeated .proto.message.Equip rideequipgird_list = 5;
  for (int i = 0; i < this->rideequipgird_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->rideequipgird_list(i), output);
  }

  // optional uint32 eatFoodId = 6;
  if (has_eatfoodid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->eatfoodid(), output);
  }

  // optional uint32 eatFoodNum = 7;
  if (has_eatfoodnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->eatfoodnum(), output);
  }

  // repeated uint32 skillbooks = 8;
  for (int i = 0; i < this->skillbooks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      8, this->skillbooks(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoRideAllCellInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 nID = 1;
  if (has_nid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nid(), target);
  }

  // optional int32 nLucky = 2;
  if (has_nlucky()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->nlucky(), target);
  }

  // repeated int32 nSkill = 3;
  for (int i = 0; i < this->nskill_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->nskill(i), target);
  }

  // repeated .proto.message.ProtoRideEquipCell equips = 4;
  for (int i = 0; i < this->equips_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->equips(i), target);
  }

  // repeated .proto.message.Equip rideequipgird_list = 5;
  for (int i = 0; i < this->rideequipgird_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->rideequipgird_list(i), target);
  }

  // optional uint32 eatFoodId = 6;
  if (has_eatfoodid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->eatfoodid(), target);
  }

  // optional uint32 eatFoodNum = 7;
  if (has_eatfoodnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->eatfoodnum(), target);
  }

  // repeated uint32 skillbooks = 8;
  for (int i = 0; i < this->skillbooks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(8, this->skillbooks(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoRideAllCellInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 nID = 1;
    if (has_nid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nid());
    }

    // optional int32 nLucky = 2;
    if (has_nlucky()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nlucky());
    }

    // optional uint32 eatFoodId = 6;
    if (has_eatfoodid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eatfoodid());
    }

    // optional uint32 eatFoodNum = 7;
    if (has_eatfoodnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eatfoodnum());
    }

  }
  // repeated int32 nSkill = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->nskill_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->nskill(i));
    }
    total_size += 1 * this->nskill_size() + data_size;
  }

  // repeated .proto.message.ProtoRideEquipCell equips = 4;
  total_size += 1 * this->equips_size();
  for (int i = 0; i < this->equips_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equips(i));
  }

  // repeated .proto.message.Equip rideequipgird_list = 5;
  total_size += 1 * this->rideequipgird_list_size();
  for (int i = 0; i < this->rideequipgird_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rideequipgird_list(i));
  }

  // repeated uint32 skillbooks = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->skillbooks_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->skillbooks(i));
    }
    total_size += 1 * this->skillbooks_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoRideAllCellInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoRideAllCellInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoRideAllCellInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoRideAllCellInfo::MergeFrom(const ProtoRideAllCellInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  nskill_.MergeFrom(from.nskill_);
  equips_.MergeFrom(from.equips_);
  rideequipgird_list_.MergeFrom(from.rideequipgird_list_);
  skillbooks_.MergeFrom(from.skillbooks_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nid()) {
      set_nid(from.nid());
    }
    if (from.has_nlucky()) {
      set_nlucky(from.nlucky());
    }
    if (from.has_eatfoodid()) {
      set_eatfoodid(from.eatfoodid());
    }
    if (from.has_eatfoodnum()) {
      set_eatfoodnum(from.eatfoodnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoRideAllCellInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoRideAllCellInfo::CopyFrom(const ProtoRideAllCellInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoRideAllCellInfo::IsInitialized() const {

  for (int i = 0; i < equips_size(); i++) {
    if (!this->equips(i).IsInitialized()) return false;
  }
  return true;
}

void ProtoRideAllCellInfo::Swap(ProtoRideAllCellInfo* other) {
  if (other != this) {
    std::swap(nid_, other->nid_);
    std::swap(nlucky_, other->nlucky_);
    nskill_.Swap(&other->nskill_);
    equips_.Swap(&other->equips_);
    rideequipgird_list_.Swap(&other->rideequipgird_list_);
    std::swap(eatfoodid_, other->eatfoodid_);
    std::swap(eatfoodnum_, other->eatfoodnum_);
    skillbooks_.Swap(&other->skillbooks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoRideAllCellInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoRideAllCellInfo_descriptor_;
  metadata.reflection = ProtoRideAllCellInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Ride_CS_GetRideInfo::Ride_CS_GetRideInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Ride_CS_GetRideInfo::InitAsDefaultInstance() {
}

Ride_CS_GetRideInfo::Ride_CS_GetRideInfo(const Ride_CS_GetRideInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Ride_CS_GetRideInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Ride_CS_GetRideInfo::~Ride_CS_GetRideInfo() {
  SharedDtor();
}

void Ride_CS_GetRideInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Ride_CS_GetRideInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ride_CS_GetRideInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ride_CS_GetRideInfo_descriptor_;
}

const Ride_CS_GetRideInfo& Ride_CS_GetRideInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ride_2eproto();
  return *default_instance_;
}

Ride_CS_GetRideInfo* Ride_CS_GetRideInfo::default_instance_ = NULL;

Ride_CS_GetRideInfo* Ride_CS_GetRideInfo::New() const {
  return new Ride_CS_GetRideInfo;
}

void Ride_CS_GetRideInfo::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Ride_CS_GetRideInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Ride_CS_GetRideInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Ride_CS_GetRideInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Ride_CS_GetRideInfo::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ride_CS_GetRideInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Ride_CS_GetRideInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Ride_CS_GetRideInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Ride_CS_GetRideInfo::MergeFrom(const Ride_CS_GetRideInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Ride_CS_GetRideInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ride_CS_GetRideInfo::CopyFrom(const Ride_CS_GetRideInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ride_CS_GetRideInfo::IsInitialized() const {

  return true;
}

void Ride_CS_GetRideInfo::Swap(Ride_CS_GetRideInfo* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Ride_CS_GetRideInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Ride_CS_GetRideInfo_descriptor_;
  metadata.reflection = Ride_CS_GetRideInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Ride_SC_GetRideInfo::kNIDFieldNumber;
const int Ride_SC_GetRideInfo::kNLuckyFieldNumber;
const int Ride_SC_GetRideInfo::kNSkillFieldNumber;
const int Ride_SC_GetRideInfo::kEquipsFieldNumber;
const int Ride_SC_GetRideInfo::kRideequipgirdListFieldNumber;
const int Ride_SC_GetRideInfo::kEatFoodIdFieldNumber;
const int Ride_SC_GetRideInfo::kEatFoodNumFieldNumber;
const int Ride_SC_GetRideInfo::kSkillbooksFieldNumber;
#endif  // !_MSC_VER

Ride_SC_GetRideInfo::Ride_SC_GetRideInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Ride_SC_GetRideInfo::InitAsDefaultInstance() {
}

Ride_SC_GetRideInfo::Ride_SC_GetRideInfo(const Ride_SC_GetRideInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Ride_SC_GetRideInfo::SharedCtor() {
  _cached_size_ = 0;
  nid_ = 0;
  nlucky_ = 0;
  eatfoodid_ = 0u;
  eatfoodnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Ride_SC_GetRideInfo::~Ride_SC_GetRideInfo() {
  SharedDtor();
}

void Ride_SC_GetRideInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Ride_SC_GetRideInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ride_SC_GetRideInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ride_SC_GetRideInfo_descriptor_;
}

const Ride_SC_GetRideInfo& Ride_SC_GetRideInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ride_2eproto();
  return *default_instance_;
}

Ride_SC_GetRideInfo* Ride_SC_GetRideInfo::default_instance_ = NULL;

Ride_SC_GetRideInfo* Ride_SC_GetRideInfo::New() const {
  return new Ride_SC_GetRideInfo;
}

void Ride_SC_GetRideInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nid_ = 0;
    nlucky_ = 0;
    eatfoodid_ = 0u;
    eatfoodnum_ = 0u;
  }
  nskill_.Clear();
  equips_.Clear();
  rideequipgird_list_.Clear();
  skillbooks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Ride_SC_GetRideInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 nID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nid_)));
          set_has_nid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nLucky;
        break;
      }

      // required int32 nLucky = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nLucky:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nlucky_)));
          set_has_nlucky();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nSkill;
        break;
      }

      // repeated int32 nSkill = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nSkill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_nskill())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_nskill())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nSkill;
        if (input->ExpectTag(34)) goto parse_equips;
        break;
      }

      // repeated .proto.message.ProtoRideEquipCell equips = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equips:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equips()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_equips;
        if (input->ExpectTag(42)) goto parse_rideequipgird_list;
        break;
      }

      // repeated .proto.message.Equip rideequipgird_list = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rideequipgird_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rideequipgird_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_rideequipgird_list;
        if (input->ExpectTag(48)) goto parse_eatFoodId;
        break;
      }

      // optional uint32 eatFoodId = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eatFoodId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eatfoodid_)));
          set_has_eatfoodid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_eatFoodNum;
        break;
      }

      // optional uint32 eatFoodNum = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eatFoodNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eatfoodnum_)));
          set_has_eatfoodnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_skillbooks;
        break;
      }

      // repeated uint32 skillbooks = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillbooks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 64, input, this->mutable_skillbooks())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_skillbooks())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_skillbooks;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Ride_SC_GetRideInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 nID = 1;
  if (has_nid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nid(), output);
  }

  // required int32 nLucky = 2;
  if (has_nlucky()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nlucky(), output);
  }

  // repeated int32 nSkill = 3;
  for (int i = 0; i < this->nskill_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->nskill(i), output);
  }

  // repeated .proto.message.ProtoRideEquipCell equips = 4;
  for (int i = 0; i < this->equips_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->equips(i), output);
  }

  // repeated .proto.message.Equip rideequipgird_list = 5;
  for (int i = 0; i < this->rideequipgird_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->rideequipgird_list(i), output);
  }

  // optional uint32 eatFoodId = 6;
  if (has_eatfoodid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->eatfoodid(), output);
  }

  // optional uint32 eatFoodNum = 7;
  if (has_eatfoodnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->eatfoodnum(), output);
  }

  // repeated uint32 skillbooks = 8;
  for (int i = 0; i < this->skillbooks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      8, this->skillbooks(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Ride_SC_GetRideInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 nID = 1;
  if (has_nid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nid(), target);
  }

  // required int32 nLucky = 2;
  if (has_nlucky()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->nlucky(), target);
  }

  // repeated int32 nSkill = 3;
  for (int i = 0; i < this->nskill_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->nskill(i), target);
  }

  // repeated .proto.message.ProtoRideEquipCell equips = 4;
  for (int i = 0; i < this->equips_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->equips(i), target);
  }

  // repeated .proto.message.Equip rideequipgird_list = 5;
  for (int i = 0; i < this->rideequipgird_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->rideequipgird_list(i), target);
  }

  // optional uint32 eatFoodId = 6;
  if (has_eatfoodid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->eatfoodid(), target);
  }

  // optional uint32 eatFoodNum = 7;
  if (has_eatfoodnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->eatfoodnum(), target);
  }

  // repeated uint32 skillbooks = 8;
  for (int i = 0; i < this->skillbooks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(8, this->skillbooks(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Ride_SC_GetRideInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 nID = 1;
    if (has_nid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nid());
    }

    // required int32 nLucky = 2;
    if (has_nlucky()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nlucky());
    }

    // optional uint32 eatFoodId = 6;
    if (has_eatfoodid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eatfoodid());
    }

    // optional uint32 eatFoodNum = 7;
    if (has_eatfoodnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eatfoodnum());
    }

  }
  // repeated int32 nSkill = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->nskill_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->nskill(i));
    }
    total_size += 1 * this->nskill_size() + data_size;
  }

  // repeated .proto.message.ProtoRideEquipCell equips = 4;
  total_size += 1 * this->equips_size();
  for (int i = 0; i < this->equips_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equips(i));
  }

  // repeated .proto.message.Equip rideequipgird_list = 5;
  total_size += 1 * this->rideequipgird_list_size();
  for (int i = 0; i < this->rideequipgird_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rideequipgird_list(i));
  }

  // repeated uint32 skillbooks = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->skillbooks_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->skillbooks(i));
    }
    total_size += 1 * this->skillbooks_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ride_SC_GetRideInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Ride_SC_GetRideInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Ride_SC_GetRideInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Ride_SC_GetRideInfo::MergeFrom(const Ride_SC_GetRideInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  nskill_.MergeFrom(from.nskill_);
  equips_.MergeFrom(from.equips_);
  rideequipgird_list_.MergeFrom(from.rideequipgird_list_);
  skillbooks_.MergeFrom(from.skillbooks_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nid()) {
      set_nid(from.nid());
    }
    if (from.has_nlucky()) {
      set_nlucky(from.nlucky());
    }
    if (from.has_eatfoodid()) {
      set_eatfoodid(from.eatfoodid());
    }
    if (from.has_eatfoodnum()) {
      set_eatfoodnum(from.eatfoodnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Ride_SC_GetRideInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ride_SC_GetRideInfo::CopyFrom(const Ride_SC_GetRideInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ride_SC_GetRideInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < equips_size(); i++) {
    if (!this->equips(i).IsInitialized()) return false;
  }
  return true;
}

void Ride_SC_GetRideInfo::Swap(Ride_SC_GetRideInfo* other) {
  if (other != this) {
    std::swap(nid_, other->nid_);
    std::swap(nlucky_, other->nlucky_);
    nskill_.Swap(&other->nskill_);
    equips_.Swap(&other->equips_);
    rideequipgird_list_.Swap(&other->rideequipgird_list_);
    std::swap(eatfoodid_, other->eatfoodid_);
    std::swap(eatfoodnum_, other->eatfoodnum_);
    skillbooks_.Swap(&other->skillbooks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Ride_SC_GetRideInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Ride_SC_GetRideInfo_descriptor_;
  metadata.reflection = Ride_SC_GetRideInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Ride_CS_Upgrade::Ride_CS_Upgrade()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Ride_CS_Upgrade::InitAsDefaultInstance() {
}

Ride_CS_Upgrade::Ride_CS_Upgrade(const Ride_CS_Upgrade& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Ride_CS_Upgrade::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Ride_CS_Upgrade::~Ride_CS_Upgrade() {
  SharedDtor();
}

void Ride_CS_Upgrade::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Ride_CS_Upgrade::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ride_CS_Upgrade::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ride_CS_Upgrade_descriptor_;
}

const Ride_CS_Upgrade& Ride_CS_Upgrade::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ride_2eproto();
  return *default_instance_;
}

Ride_CS_Upgrade* Ride_CS_Upgrade::default_instance_ = NULL;

Ride_CS_Upgrade* Ride_CS_Upgrade::New() const {
  return new Ride_CS_Upgrade;
}

void Ride_CS_Upgrade::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Ride_CS_Upgrade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Ride_CS_Upgrade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Ride_CS_Upgrade::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Ride_CS_Upgrade::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ride_CS_Upgrade::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Ride_CS_Upgrade* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Ride_CS_Upgrade*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Ride_CS_Upgrade::MergeFrom(const Ride_CS_Upgrade& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Ride_CS_Upgrade::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ride_CS_Upgrade::CopyFrom(const Ride_CS_Upgrade& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ride_CS_Upgrade::IsInitialized() const {

  return true;
}

void Ride_CS_Upgrade::Swap(Ride_CS_Upgrade* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Ride_CS_Upgrade::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Ride_CS_Upgrade_descriptor_;
  metadata.reflection = Ride_CS_Upgrade_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Ride_SC_Upgrade::kRetFieldNumber;
#endif  // !_MSC_VER

Ride_SC_Upgrade::Ride_SC_Upgrade()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Ride_SC_Upgrade::InitAsDefaultInstance() {
}

Ride_SC_Upgrade::Ride_SC_Upgrade(const Ride_SC_Upgrade& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Ride_SC_Upgrade::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Ride_SC_Upgrade::~Ride_SC_Upgrade() {
  SharedDtor();
}

void Ride_SC_Upgrade::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Ride_SC_Upgrade::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ride_SC_Upgrade::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ride_SC_Upgrade_descriptor_;
}

const Ride_SC_Upgrade& Ride_SC_Upgrade::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ride_2eproto();
  return *default_instance_;
}

Ride_SC_Upgrade* Ride_SC_Upgrade::default_instance_ = NULL;

Ride_SC_Upgrade* Ride_SC_Upgrade::New() const {
  return new Ride_SC_Upgrade;
}

void Ride_SC_Upgrade::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Ride_SC_Upgrade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Ride_SC_Upgrade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Ride_SC_Upgrade::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Ride_SC_Upgrade::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ride_SC_Upgrade::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Ride_SC_Upgrade* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Ride_SC_Upgrade*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Ride_SC_Upgrade::MergeFrom(const Ride_SC_Upgrade& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Ride_SC_Upgrade::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ride_SC_Upgrade::CopyFrom(const Ride_SC_Upgrade& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ride_SC_Upgrade::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Ride_SC_Upgrade::Swap(Ride_SC_Upgrade* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Ride_SC_Upgrade::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Ride_SC_Upgrade_descriptor_;
  metadata.reflection = Ride_SC_Upgrade_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Ride_CS_UpgSkill::kSkillidFieldNumber;
#endif  // !_MSC_VER

Ride_CS_UpgSkill::Ride_CS_UpgSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Ride_CS_UpgSkill::InitAsDefaultInstance() {
}

Ride_CS_UpgSkill::Ride_CS_UpgSkill(const Ride_CS_UpgSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Ride_CS_UpgSkill::SharedCtor() {
  _cached_size_ = 0;
  skillid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Ride_CS_UpgSkill::~Ride_CS_UpgSkill() {
  SharedDtor();
}

void Ride_CS_UpgSkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Ride_CS_UpgSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ride_CS_UpgSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ride_CS_UpgSkill_descriptor_;
}

const Ride_CS_UpgSkill& Ride_CS_UpgSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ride_2eproto();
  return *default_instance_;
}

Ride_CS_UpgSkill* Ride_CS_UpgSkill::default_instance_ = NULL;

Ride_CS_UpgSkill* Ride_CS_UpgSkill::New() const {
  return new Ride_CS_UpgSkill;
}

void Ride_CS_UpgSkill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skillid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Ride_CS_UpgSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 skillid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Ride_CS_UpgSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 skillid = 1;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->skillid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Ride_CS_UpgSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 skillid = 1;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->skillid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Ride_CS_UpgSkill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 skillid = 1;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ride_CS_UpgSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Ride_CS_UpgSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Ride_CS_UpgSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Ride_CS_UpgSkill::MergeFrom(const Ride_CS_UpgSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Ride_CS_UpgSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ride_CS_UpgSkill::CopyFrom(const Ride_CS_UpgSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ride_CS_UpgSkill::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Ride_CS_UpgSkill::Swap(Ride_CS_UpgSkill* other) {
  if (other != this) {
    std::swap(skillid_, other->skillid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Ride_CS_UpgSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Ride_CS_UpgSkill_descriptor_;
  metadata.reflection = Ride_CS_UpgSkill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Ride_SC_UpgSkill::kRetFieldNumber;
#endif  // !_MSC_VER

Ride_SC_UpgSkill::Ride_SC_UpgSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Ride_SC_UpgSkill::InitAsDefaultInstance() {
}

Ride_SC_UpgSkill::Ride_SC_UpgSkill(const Ride_SC_UpgSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Ride_SC_UpgSkill::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Ride_SC_UpgSkill::~Ride_SC_UpgSkill() {
  SharedDtor();
}

void Ride_SC_UpgSkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Ride_SC_UpgSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ride_SC_UpgSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ride_SC_UpgSkill_descriptor_;
}

const Ride_SC_UpgSkill& Ride_SC_UpgSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ride_2eproto();
  return *default_instance_;
}

Ride_SC_UpgSkill* Ride_SC_UpgSkill::default_instance_ = NULL;

Ride_SC_UpgSkill* Ride_SC_UpgSkill::New() const {
  return new Ride_SC_UpgSkill;
}

void Ride_SC_UpgSkill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Ride_SC_UpgSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Ride_SC_UpgSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Ride_SC_UpgSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Ride_SC_UpgSkill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ride_SC_UpgSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Ride_SC_UpgSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Ride_SC_UpgSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Ride_SC_UpgSkill::MergeFrom(const Ride_SC_UpgSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Ride_SC_UpgSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ride_SC_UpgSkill::CopyFrom(const Ride_SC_UpgSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ride_SC_UpgSkill::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Ride_SC_UpgSkill::Swap(Ride_SC_UpgSkill* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Ride_SC_UpgSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Ride_SC_UpgSkill_descriptor_;
  metadata.reflection = Ride_SC_UpgSkill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Ride_CS_OpenEquipCell::kCellidFieldNumber;
#endif  // !_MSC_VER

Ride_CS_OpenEquipCell::Ride_CS_OpenEquipCell()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Ride_CS_OpenEquipCell::InitAsDefaultInstance() {
}

Ride_CS_OpenEquipCell::Ride_CS_OpenEquipCell(const Ride_CS_OpenEquipCell& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Ride_CS_OpenEquipCell::SharedCtor() {
  _cached_size_ = 0;
  cellid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Ride_CS_OpenEquipCell::~Ride_CS_OpenEquipCell() {
  SharedDtor();
}

void Ride_CS_OpenEquipCell::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Ride_CS_OpenEquipCell::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ride_CS_OpenEquipCell::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ride_CS_OpenEquipCell_descriptor_;
}

const Ride_CS_OpenEquipCell& Ride_CS_OpenEquipCell::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ride_2eproto();
  return *default_instance_;
}

Ride_CS_OpenEquipCell* Ride_CS_OpenEquipCell::default_instance_ = NULL;

Ride_CS_OpenEquipCell* Ride_CS_OpenEquipCell::New() const {
  return new Ride_CS_OpenEquipCell;
}

void Ride_CS_OpenEquipCell::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cellid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Ride_CS_OpenEquipCell::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 cellid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cellid_)));
          set_has_cellid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Ride_CS_OpenEquipCell::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 cellid = 1;
  if (has_cellid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cellid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Ride_CS_OpenEquipCell::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 cellid = 1;
  if (has_cellid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cellid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Ride_CS_OpenEquipCell::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 cellid = 1;
    if (has_cellid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cellid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ride_CS_OpenEquipCell::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Ride_CS_OpenEquipCell* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Ride_CS_OpenEquipCell*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Ride_CS_OpenEquipCell::MergeFrom(const Ride_CS_OpenEquipCell& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cellid()) {
      set_cellid(from.cellid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Ride_CS_OpenEquipCell::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ride_CS_OpenEquipCell::CopyFrom(const Ride_CS_OpenEquipCell& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ride_CS_OpenEquipCell::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Ride_CS_OpenEquipCell::Swap(Ride_CS_OpenEquipCell* other) {
  if (other != this) {
    std::swap(cellid_, other->cellid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Ride_CS_OpenEquipCell::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Ride_CS_OpenEquipCell_descriptor_;
  metadata.reflection = Ride_CS_OpenEquipCell_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Ride_SC_OpenEquipCell::kRetFieldNumber;
#endif  // !_MSC_VER

Ride_SC_OpenEquipCell::Ride_SC_OpenEquipCell()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Ride_SC_OpenEquipCell::InitAsDefaultInstance() {
}

Ride_SC_OpenEquipCell::Ride_SC_OpenEquipCell(const Ride_SC_OpenEquipCell& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Ride_SC_OpenEquipCell::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Ride_SC_OpenEquipCell::~Ride_SC_OpenEquipCell() {
  SharedDtor();
}

void Ride_SC_OpenEquipCell::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Ride_SC_OpenEquipCell::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ride_SC_OpenEquipCell::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ride_SC_OpenEquipCell_descriptor_;
}

const Ride_SC_OpenEquipCell& Ride_SC_OpenEquipCell::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ride_2eproto();
  return *default_instance_;
}

Ride_SC_OpenEquipCell* Ride_SC_OpenEquipCell::default_instance_ = NULL;

Ride_SC_OpenEquipCell* Ride_SC_OpenEquipCell::New() const {
  return new Ride_SC_OpenEquipCell;
}

void Ride_SC_OpenEquipCell::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Ride_SC_OpenEquipCell::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Ride_SC_OpenEquipCell::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Ride_SC_OpenEquipCell::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Ride_SC_OpenEquipCell::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ride_SC_OpenEquipCell::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Ride_SC_OpenEquipCell* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Ride_SC_OpenEquipCell*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Ride_SC_OpenEquipCell::MergeFrom(const Ride_SC_OpenEquipCell& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Ride_SC_OpenEquipCell::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ride_SC_OpenEquipCell::CopyFrom(const Ride_SC_OpenEquipCell& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ride_SC_OpenEquipCell::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Ride_SC_OpenEquipCell::Swap(Ride_SC_OpenEquipCell* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Ride_SC_OpenEquipCell::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Ride_SC_OpenEquipCell_descriptor_;
  metadata.reflection = Ride_SC_OpenEquipCell_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Ride_CS_PutOnRideEquip::kUuidFieldNumber;
#endif  // !_MSC_VER

Ride_CS_PutOnRideEquip::Ride_CS_PutOnRideEquip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Ride_CS_PutOnRideEquip::InitAsDefaultInstance() {
}

Ride_CS_PutOnRideEquip::Ride_CS_PutOnRideEquip(const Ride_CS_PutOnRideEquip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Ride_CS_PutOnRideEquip::SharedCtor() {
  _cached_size_ = 0;
  uuid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Ride_CS_PutOnRideEquip::~Ride_CS_PutOnRideEquip() {
  SharedDtor();
}

void Ride_CS_PutOnRideEquip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Ride_CS_PutOnRideEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ride_CS_PutOnRideEquip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ride_CS_PutOnRideEquip_descriptor_;
}

const Ride_CS_PutOnRideEquip& Ride_CS_PutOnRideEquip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ride_2eproto();
  return *default_instance_;
}

Ride_CS_PutOnRideEquip* Ride_CS_PutOnRideEquip::default_instance_ = NULL;

Ride_CS_PutOnRideEquip* Ride_CS_PutOnRideEquip::New() const {
  return new Ride_CS_PutOnRideEquip;
}

void Ride_CS_PutOnRideEquip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uuid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Ride_CS_PutOnRideEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Ride_CS_PutOnRideEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Ride_CS_PutOnRideEquip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 uuid = 1;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Ride_CS_PutOnRideEquip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 uuid = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ride_CS_PutOnRideEquip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Ride_CS_PutOnRideEquip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Ride_CS_PutOnRideEquip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Ride_CS_PutOnRideEquip::MergeFrom(const Ride_CS_PutOnRideEquip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Ride_CS_PutOnRideEquip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ride_CS_PutOnRideEquip::CopyFrom(const Ride_CS_PutOnRideEquip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ride_CS_PutOnRideEquip::IsInitialized() const {

  return true;
}

void Ride_CS_PutOnRideEquip::Swap(Ride_CS_PutOnRideEquip* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Ride_CS_PutOnRideEquip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Ride_CS_PutOnRideEquip_descriptor_;
  metadata.reflection = Ride_CS_PutOnRideEquip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Ride_SC_PutOnRideEquip::kResultFieldNumber;
const int Ride_SC_PutOnRideEquip::kEquipListFieldNumber;
#endif  // !_MSC_VER

Ride_SC_PutOnRideEquip::Ride_SC_PutOnRideEquip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Ride_SC_PutOnRideEquip::InitAsDefaultInstance() {
}

Ride_SC_PutOnRideEquip::Ride_SC_PutOnRideEquip(const Ride_SC_PutOnRideEquip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Ride_SC_PutOnRideEquip::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Ride_SC_PutOnRideEquip::~Ride_SC_PutOnRideEquip() {
  SharedDtor();
}

void Ride_SC_PutOnRideEquip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Ride_SC_PutOnRideEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ride_SC_PutOnRideEquip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ride_SC_PutOnRideEquip_descriptor_;
}

const Ride_SC_PutOnRideEquip& Ride_SC_PutOnRideEquip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ride_2eproto();
  return *default_instance_;
}

Ride_SC_PutOnRideEquip* Ride_SC_PutOnRideEquip::default_instance_ = NULL;

Ride_SC_PutOnRideEquip* Ride_SC_PutOnRideEquip::New() const {
  return new Ride_SC_PutOnRideEquip;
}

void Ride_SC_PutOnRideEquip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  equip_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Ride_SC_PutOnRideEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_equip_list;
        break;
      }

      // repeated .proto.message.Equip equip_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equip_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_equip_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Ride_SC_PutOnRideEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated .proto.message.Equip equip_list = 2;
  for (int i = 0; i < this->equip_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->equip_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Ride_SC_PutOnRideEquip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated .proto.message.Equip equip_list = 2;
  for (int i = 0; i < this->equip_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->equip_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Ride_SC_PutOnRideEquip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated .proto.message.Equip equip_list = 2;
  total_size += 1 * this->equip_list_size();
  for (int i = 0; i < this->equip_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equip_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ride_SC_PutOnRideEquip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Ride_SC_PutOnRideEquip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Ride_SC_PutOnRideEquip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Ride_SC_PutOnRideEquip::MergeFrom(const Ride_SC_PutOnRideEquip& from) {
  GOOGLE_CHECK_NE(&from, this);
  equip_list_.MergeFrom(from.equip_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Ride_SC_PutOnRideEquip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ride_SC_PutOnRideEquip::CopyFrom(const Ride_SC_PutOnRideEquip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ride_SC_PutOnRideEquip::IsInitialized() const {

  return true;
}

void Ride_SC_PutOnRideEquip::Swap(Ride_SC_PutOnRideEquip* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    equip_list_.Swap(&other->equip_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Ride_SC_PutOnRideEquip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Ride_SC_PutOnRideEquip_descriptor_;
  metadata.reflection = Ride_SC_PutOnRideEquip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Ride_CS_GetOffRideEquip::kUuidFieldNumber;
#endif  // !_MSC_VER

Ride_CS_GetOffRideEquip::Ride_CS_GetOffRideEquip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Ride_CS_GetOffRideEquip::InitAsDefaultInstance() {
}

Ride_CS_GetOffRideEquip::Ride_CS_GetOffRideEquip(const Ride_CS_GetOffRideEquip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Ride_CS_GetOffRideEquip::SharedCtor() {
  _cached_size_ = 0;
  uuid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Ride_CS_GetOffRideEquip::~Ride_CS_GetOffRideEquip() {
  SharedDtor();
}

void Ride_CS_GetOffRideEquip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Ride_CS_GetOffRideEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ride_CS_GetOffRideEquip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ride_CS_GetOffRideEquip_descriptor_;
}

const Ride_CS_GetOffRideEquip& Ride_CS_GetOffRideEquip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ride_2eproto();
  return *default_instance_;
}

Ride_CS_GetOffRideEquip* Ride_CS_GetOffRideEquip::default_instance_ = NULL;

Ride_CS_GetOffRideEquip* Ride_CS_GetOffRideEquip::New() const {
  return new Ride_CS_GetOffRideEquip;
}

void Ride_CS_GetOffRideEquip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uuid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Ride_CS_GetOffRideEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Ride_CS_GetOffRideEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Ride_CS_GetOffRideEquip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 uuid = 1;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Ride_CS_GetOffRideEquip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 uuid = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ride_CS_GetOffRideEquip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Ride_CS_GetOffRideEquip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Ride_CS_GetOffRideEquip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Ride_CS_GetOffRideEquip::MergeFrom(const Ride_CS_GetOffRideEquip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Ride_CS_GetOffRideEquip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ride_CS_GetOffRideEquip::CopyFrom(const Ride_CS_GetOffRideEquip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ride_CS_GetOffRideEquip::IsInitialized() const {

  return true;
}

void Ride_CS_GetOffRideEquip::Swap(Ride_CS_GetOffRideEquip* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Ride_CS_GetOffRideEquip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Ride_CS_GetOffRideEquip_descriptor_;
  metadata.reflection = Ride_CS_GetOffRideEquip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Ride_SC_GetOffRideEquip::kResultFieldNumber;
const int Ride_SC_GetOffRideEquip::kGetoffEquipFieldNumber;
#endif  // !_MSC_VER

Ride_SC_GetOffRideEquip::Ride_SC_GetOffRideEquip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Ride_SC_GetOffRideEquip::InitAsDefaultInstance() {
  getoff_equip_ = const_cast< ::proto::message::Equip*>(&::proto::message::Equip::default_instance());
}

Ride_SC_GetOffRideEquip::Ride_SC_GetOffRideEquip(const Ride_SC_GetOffRideEquip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Ride_SC_GetOffRideEquip::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  getoff_equip_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Ride_SC_GetOffRideEquip::~Ride_SC_GetOffRideEquip() {
  SharedDtor();
}

void Ride_SC_GetOffRideEquip::SharedDtor() {
  if (this != default_instance_) {
    delete getoff_equip_;
  }
}

void Ride_SC_GetOffRideEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ride_SC_GetOffRideEquip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ride_SC_GetOffRideEquip_descriptor_;
}

const Ride_SC_GetOffRideEquip& Ride_SC_GetOffRideEquip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ride_2eproto();
  return *default_instance_;
}

Ride_SC_GetOffRideEquip* Ride_SC_GetOffRideEquip::default_instance_ = NULL;

Ride_SC_GetOffRideEquip* Ride_SC_GetOffRideEquip::New() const {
  return new Ride_SC_GetOffRideEquip;
}

void Ride_SC_GetOffRideEquip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_getoff_equip()) {
      if (getoff_equip_ != NULL) getoff_equip_->::proto::message::Equip::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Ride_SC_GetOffRideEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_getoff_equip;
        break;
      }

      // optional .proto.message.Equip getoff_equip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_getoff_equip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getoff_equip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Ride_SC_GetOffRideEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .proto.message.Equip getoff_equip = 2;
  if (has_getoff_equip()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->getoff_equip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Ride_SC_GetOffRideEquip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .proto.message.Equip getoff_equip = 2;
  if (has_getoff_equip()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->getoff_equip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Ride_SC_GetOffRideEquip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .proto.message.Equip getoff_equip = 2;
    if (has_getoff_equip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->getoff_equip());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ride_SC_GetOffRideEquip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Ride_SC_GetOffRideEquip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Ride_SC_GetOffRideEquip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Ride_SC_GetOffRideEquip::MergeFrom(const Ride_SC_GetOffRideEquip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_getoff_equip()) {
      mutable_getoff_equip()->::proto::message::Equip::MergeFrom(from.getoff_equip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Ride_SC_GetOffRideEquip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ride_SC_GetOffRideEquip::CopyFrom(const Ride_SC_GetOffRideEquip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ride_SC_GetOffRideEquip::IsInitialized() const {

  return true;
}

void Ride_SC_GetOffRideEquip::Swap(Ride_SC_GetOffRideEquip* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(getoff_equip_, other->getoff_equip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Ride_SC_GetOffRideEquip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Ride_SC_GetOffRideEquip_descriptor_;
  metadata.reflection = Ride_SC_GetOffRideEquip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Ride_CS_RideStatus::kStatusFieldNumber;
#endif  // !_MSC_VER

Ride_CS_RideStatus::Ride_CS_RideStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Ride_CS_RideStatus::InitAsDefaultInstance() {
}

Ride_CS_RideStatus::Ride_CS_RideStatus(const Ride_CS_RideStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Ride_CS_RideStatus::SharedCtor() {
  _cached_size_ = 0;
  status_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Ride_CS_RideStatus::~Ride_CS_RideStatus() {
  SharedDtor();
}

void Ride_CS_RideStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Ride_CS_RideStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ride_CS_RideStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ride_CS_RideStatus_descriptor_;
}

const Ride_CS_RideStatus& Ride_CS_RideStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ride_2eproto();
  return *default_instance_;
}

Ride_CS_RideStatus* Ride_CS_RideStatus::default_instance_ = NULL;

Ride_CS_RideStatus* Ride_CS_RideStatus::New() const {
  return new Ride_CS_RideStatus;
}

void Ride_CS_RideStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Ride_CS_RideStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Ride_CS_RideStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Ride_CS_RideStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Ride_CS_RideStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool status = 1;
    if (has_status()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ride_CS_RideStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Ride_CS_RideStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Ride_CS_RideStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Ride_CS_RideStatus::MergeFrom(const Ride_CS_RideStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Ride_CS_RideStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ride_CS_RideStatus::CopyFrom(const Ride_CS_RideStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ride_CS_RideStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Ride_CS_RideStatus::Swap(Ride_CS_RideStatus* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Ride_CS_RideStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Ride_CS_RideStatus_descriptor_;
  metadata.reflection = Ride_CS_RideStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Ride_SC_RideStatus::kRetFieldNumber;
const int Ride_SC_RideStatus::kStatusFieldNumber;
#endif  // !_MSC_VER

Ride_SC_RideStatus::Ride_SC_RideStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Ride_SC_RideStatus::InitAsDefaultInstance() {
}

Ride_SC_RideStatus::Ride_SC_RideStatus(const Ride_SC_RideStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Ride_SC_RideStatus::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  status_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Ride_SC_RideStatus::~Ride_SC_RideStatus() {
  SharedDtor();
}

void Ride_SC_RideStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Ride_SC_RideStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ride_SC_RideStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ride_SC_RideStatus_descriptor_;
}

const Ride_SC_RideStatus& Ride_SC_RideStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ride_2eproto();
  return *default_instance_;
}

Ride_SC_RideStatus* Ride_SC_RideStatus::default_instance_ = NULL;

Ride_SC_RideStatus* Ride_SC_RideStatus::New() const {
  return new Ride_SC_RideStatus;
}

void Ride_SC_RideStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    status_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Ride_SC_RideStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required bool status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Ride_SC_RideStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // required bool status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Ride_SC_RideStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // required bool status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Ride_SC_RideStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // required bool status = 2;
    if (has_status()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ride_SC_RideStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Ride_SC_RideStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Ride_SC_RideStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Ride_SC_RideStatus::MergeFrom(const Ride_SC_RideStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Ride_SC_RideStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ride_SC_RideStatus::CopyFrom(const Ride_SC_RideStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ride_SC_RideStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Ride_SC_RideStatus::Swap(Ride_SC_RideStatus* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Ride_SC_RideStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Ride_SC_RideStatus_descriptor_;
  metadata.reflection = Ride_SC_RideStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Ride_CS_Eat::Ride_CS_Eat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Ride_CS_Eat::InitAsDefaultInstance() {
}

Ride_CS_Eat::Ride_CS_Eat(const Ride_CS_Eat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Ride_CS_Eat::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Ride_CS_Eat::~Ride_CS_Eat() {
  SharedDtor();
}

void Ride_CS_Eat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Ride_CS_Eat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ride_CS_Eat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ride_CS_Eat_descriptor_;
}

const Ride_CS_Eat& Ride_CS_Eat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ride_2eproto();
  return *default_instance_;
}

Ride_CS_Eat* Ride_CS_Eat::default_instance_ = NULL;

Ride_CS_Eat* Ride_CS_Eat::New() const {
  return new Ride_CS_Eat;
}

void Ride_CS_Eat::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Ride_CS_Eat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Ride_CS_Eat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Ride_CS_Eat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Ride_CS_Eat::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ride_CS_Eat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Ride_CS_Eat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Ride_CS_Eat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Ride_CS_Eat::MergeFrom(const Ride_CS_Eat& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Ride_CS_Eat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ride_CS_Eat::CopyFrom(const Ride_CS_Eat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ride_CS_Eat::IsInitialized() const {

  return true;
}

void Ride_CS_Eat::Swap(Ride_CS_Eat* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Ride_CS_Eat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Ride_CS_Eat_descriptor_;
  metadata.reflection = Ride_CS_Eat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Ride_SC_Eat::kResultFieldNumber;
#endif  // !_MSC_VER

Ride_SC_Eat::Ride_SC_Eat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Ride_SC_Eat::InitAsDefaultInstance() {
}

Ride_SC_Eat::Ride_SC_Eat(const Ride_SC_Eat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Ride_SC_Eat::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Ride_SC_Eat::~Ride_SC_Eat() {
  SharedDtor();
}

void Ride_SC_Eat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Ride_SC_Eat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ride_SC_Eat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ride_SC_Eat_descriptor_;
}

const Ride_SC_Eat& Ride_SC_Eat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ride_2eproto();
  return *default_instance_;
}

Ride_SC_Eat* Ride_SC_Eat::default_instance_ = NULL;

Ride_SC_Eat* Ride_SC_Eat::New() const {
  return new Ride_SC_Eat;
}

void Ride_SC_Eat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Ride_SC_Eat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Ride_SC_Eat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Ride_SC_Eat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Ride_SC_Eat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ride_SC_Eat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Ride_SC_Eat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Ride_SC_Eat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Ride_SC_Eat::MergeFrom(const Ride_SC_Eat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Ride_SC_Eat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ride_SC_Eat::CopyFrom(const Ride_SC_Eat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ride_SC_Eat::IsInitialized() const {

  return true;
}

void Ride_SC_Eat::Swap(Ride_SC_Eat* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Ride_SC_Eat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Ride_SC_Eat_descriptor_;
  metadata.reflection = Ride_SC_Eat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Ride_CS_SkillOpen::kBookItemIdFieldNumber;
#endif  // !_MSC_VER

Ride_CS_SkillOpen::Ride_CS_SkillOpen()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Ride_CS_SkillOpen::InitAsDefaultInstance() {
}

Ride_CS_SkillOpen::Ride_CS_SkillOpen(const Ride_CS_SkillOpen& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Ride_CS_SkillOpen::SharedCtor() {
  _cached_size_ = 0;
  bookitemid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Ride_CS_SkillOpen::~Ride_CS_SkillOpen() {
  SharedDtor();
}

void Ride_CS_SkillOpen::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Ride_CS_SkillOpen::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ride_CS_SkillOpen::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ride_CS_SkillOpen_descriptor_;
}

const Ride_CS_SkillOpen& Ride_CS_SkillOpen::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ride_2eproto();
  return *default_instance_;
}

Ride_CS_SkillOpen* Ride_CS_SkillOpen::default_instance_ = NULL;

Ride_CS_SkillOpen* Ride_CS_SkillOpen::New() const {
  return new Ride_CS_SkillOpen;
}

void Ride_CS_SkillOpen::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bookitemid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Ride_CS_SkillOpen::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 bookItemId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bookitemid_)));
          set_has_bookitemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Ride_CS_SkillOpen::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 bookItemId = 1;
  if (has_bookitemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bookitemid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Ride_CS_SkillOpen::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 bookItemId = 1;
  if (has_bookitemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bookitemid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Ride_CS_SkillOpen::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 bookItemId = 1;
    if (has_bookitemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bookitemid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ride_CS_SkillOpen::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Ride_CS_SkillOpen* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Ride_CS_SkillOpen*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Ride_CS_SkillOpen::MergeFrom(const Ride_CS_SkillOpen& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bookitemid()) {
      set_bookitemid(from.bookitemid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Ride_CS_SkillOpen::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ride_CS_SkillOpen::CopyFrom(const Ride_CS_SkillOpen& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ride_CS_SkillOpen::IsInitialized() const {

  return true;
}

void Ride_CS_SkillOpen::Swap(Ride_CS_SkillOpen* other) {
  if (other != this) {
    std::swap(bookitemid_, other->bookitemid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Ride_CS_SkillOpen::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Ride_CS_SkillOpen_descriptor_;
  metadata.reflection = Ride_CS_SkillOpen_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Ride_SC_SkillOpen::kResultFieldNumber;
#endif  // !_MSC_VER

Ride_SC_SkillOpen::Ride_SC_SkillOpen()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Ride_SC_SkillOpen::InitAsDefaultInstance() {
}

Ride_SC_SkillOpen::Ride_SC_SkillOpen(const Ride_SC_SkillOpen& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Ride_SC_SkillOpen::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Ride_SC_SkillOpen::~Ride_SC_SkillOpen() {
  SharedDtor();
}

void Ride_SC_SkillOpen::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Ride_SC_SkillOpen::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ride_SC_SkillOpen::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ride_SC_SkillOpen_descriptor_;
}

const Ride_SC_SkillOpen& Ride_SC_SkillOpen::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ride_2eproto();
  return *default_instance_;
}

Ride_SC_SkillOpen* Ride_SC_SkillOpen::default_instance_ = NULL;

Ride_SC_SkillOpen* Ride_SC_SkillOpen::New() const {
  return new Ride_SC_SkillOpen;
}

void Ride_SC_SkillOpen::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Ride_SC_SkillOpen::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Ride_SC_SkillOpen::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Ride_SC_SkillOpen::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Ride_SC_SkillOpen::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ride_SC_SkillOpen::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Ride_SC_SkillOpen* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Ride_SC_SkillOpen*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Ride_SC_SkillOpen::MergeFrom(const Ride_SC_SkillOpen& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Ride_SC_SkillOpen::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ride_SC_SkillOpen::CopyFrom(const Ride_SC_SkillOpen& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ride_SC_SkillOpen::IsInitialized() const {

  return true;
}

void Ride_SC_SkillOpen::Swap(Ride_SC_SkillOpen* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Ride_SC_SkillOpen::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Ride_SC_SkillOpen_descriptor_;
  metadata.reflection = Ride_SC_SkillOpen_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace proto

// @@protoc_insertion_point(global_scope)
