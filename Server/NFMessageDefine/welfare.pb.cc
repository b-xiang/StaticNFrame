// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: welfare.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "welfare.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace message {

namespace {

const ::google::protobuf::Descriptor* Welfare_CS_DoOnlineAward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Welfare_CS_DoOnlineAward_reflection_ = NULL;
const ::google::protobuf::Descriptor* Welfare_CS_QueryOnlineAward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Welfare_CS_QueryOnlineAward_reflection_ = NULL;
const ::google::protobuf::Descriptor* Welfare_SC_DoOnlineAward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Welfare_SC_DoOnlineAward_reflection_ = NULL;
const ::google::protobuf::Descriptor* SingleOnlineAward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SingleOnlineAward_reflection_ = NULL;
const ::google::protobuf::Descriptor* Welfare_SC_QueryOnlineAward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Welfare_SC_QueryOnlineAward_reflection_ = NULL;
const ::google::protobuf::Descriptor* Welfare_CS_QueryHolidayAward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Welfare_CS_QueryHolidayAward_reflection_ = NULL;
const ::google::protobuf::Descriptor* Welfare_SC_QueryHolidayAward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Welfare_SC_QueryHolidayAward_reflection_ = NULL;
const ::google::protobuf::Descriptor* Welfare_CS_DoHolidayAward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Welfare_CS_DoHolidayAward_reflection_ = NULL;
const ::google::protobuf::Descriptor* Welfare_SC_DoHolidayAward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Welfare_SC_DoHolidayAward_reflection_ = NULL;
const ::google::protobuf::Descriptor* Welfare_CS_QueryLoginAward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Welfare_CS_QueryLoginAward_reflection_ = NULL;
const ::google::protobuf::Descriptor* Welfare_SC_QueryLoginAward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Welfare_SC_QueryLoginAward_reflection_ = NULL;
const ::google::protobuf::Descriptor* Welfare_CS_DoLoginAward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Welfare_CS_DoLoginAward_reflection_ = NULL;
const ::google::protobuf::Descriptor* Welfare_SC_DoLoginAward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Welfare_SC_DoLoginAward_reflection_ = NULL;
const ::google::protobuf::Descriptor* Welfare_CS_GetWeekDiscount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Welfare_CS_GetWeekDiscount_reflection_ = NULL;
const ::google::protobuf::Descriptor* WeekDiscountItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WeekDiscountItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* Welfare_SC_GetWeekDiscount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Welfare_SC_GetWeekDiscount_reflection_ = NULL;
const ::google::protobuf::Descriptor* Welfare_CS_BuyDiscountGift_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Welfare_CS_BuyDiscountGift_reflection_ = NULL;
const ::google::protobuf::Descriptor* DiscountItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DiscountItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* Welfare_SC_BuyDiscountGift_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Welfare_SC_BuyDiscountGift_reflection_ = NULL;
const ::google::protobuf::Descriptor* Welfare_SC_DiscountGift_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Welfare_SC_DiscountGift_reflection_ = NULL;
const ::google::protobuf::Descriptor* Welfare_CS_QuerySignInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Welfare_CS_QuerySignInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Welfare_CS_SignToday_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Welfare_CS_SignToday_reflection_ = NULL;
const ::google::protobuf::Descriptor* Welfare_CS_SignSupply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Welfare_CS_SignSupply_reflection_ = NULL;
const ::google::protobuf::Descriptor* Welfare_SC_UpdateSignInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Welfare_SC_UpdateSignInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Welfare_SC_SignToday_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Welfare_SC_SignToday_reflection_ = NULL;
const ::google::protobuf::Descriptor* Welfare_SC_SignSupply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Welfare_SC_SignSupply_reflection_ = NULL;
const ::google::protobuf::Descriptor* Welfare_CS_SignTotal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Welfare_CS_SignTotal_reflection_ = NULL;
const ::google::protobuf::Descriptor* Welfare_SC_SignTotal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Welfare_SC_SignTotal_reflection_ = NULL;
const ::google::protobuf::Descriptor* Welfare_CS_QueryLotteryInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Welfare_CS_QueryLotteryInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Welfare_CS_DoLottery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Welfare_CS_DoLottery_reflection_ = NULL;
const ::google::protobuf::Descriptor* Welfare_SC_UpdateLotteryInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Welfare_SC_UpdateLotteryInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Welfare_SC_DoLotteryBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Welfare_SC_DoLotteryBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* Welfare_SC_UpdateWelfareRedPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Welfare_SC_UpdateWelfareRedPoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* SignData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SignData_reflection_ = NULL;
const ::google::protobuf::Descriptor* LotteryData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LotteryData_reflection_ = NULL;
const ::google::protobuf::Descriptor* OnlineData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OnlineData_reflection_ = NULL;
const ::google::protobuf::Descriptor* SingleAwardData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SingleAwardData_reflection_ = NULL;
const ::google::protobuf::Descriptor* HolidayInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HolidayInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GrowthFundInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GrowthFundInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* DiamondGiftInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DiamondGiftInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* DiamondGiftData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DiamondGiftData_reflection_ = NULL;
const ::google::protobuf::Descriptor* Welfare_CS_QueryGrowthFund_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Welfare_CS_QueryGrowthFund_reflection_ = NULL;
const ::google::protobuf::Descriptor* Welfare_CS_DoGrowthFund_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Welfare_CS_DoGrowthFund_reflection_ = NULL;
const ::google::protobuf::Descriptor* Welfare_CS_QueryFirstCharge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Welfare_CS_QueryFirstCharge_reflection_ = NULL;
const ::google::protobuf::Descriptor* Welfare_CS_DoFirstCharge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Welfare_CS_DoFirstCharge_reflection_ = NULL;
const ::google::protobuf::Descriptor* Welfare_CS_QueryDiamondGift_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Welfare_CS_QueryDiamondGift_reflection_ = NULL;
const ::google::protobuf::Descriptor* Welfare_CS_DoDiamondGift_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Welfare_CS_DoDiamondGift_reflection_ = NULL;
const ::google::protobuf::Descriptor* Welfare_SC_QueryGrowthFund_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Welfare_SC_QueryGrowthFund_reflection_ = NULL;
const ::google::protobuf::Descriptor* Welfare_SC_DoGrowthFund_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Welfare_SC_DoGrowthFund_reflection_ = NULL;
const ::google::protobuf::Descriptor* Welfare_SC_QueryFirstCharge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Welfare_SC_QueryFirstCharge_reflection_ = NULL;
const ::google::protobuf::Descriptor* Welfare_SC_DoFirstCharge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Welfare_SC_DoFirstCharge_reflection_ = NULL;
const ::google::protobuf::Descriptor* Welfare_SC_QueryDiamondGift_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Welfare_SC_QueryDiamondGift_reflection_ = NULL;
const ::google::protobuf::Descriptor* Welfare_SC_DoDiamondGift_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Welfare_SC_DoDiamondGift_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpenInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpenInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Welfare_SC_UpdateOpenInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Welfare_SC_UpdateOpenInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Welfare_CS_QueryGrowthLevel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Welfare_CS_QueryGrowthLevel_reflection_ = NULL;
const ::google::protobuf::Descriptor* Welfare_CS_DoGrowthLevel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Welfare_CS_DoGrowthLevel_reflection_ = NULL;
const ::google::protobuf::Descriptor* GrowthLevelInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GrowthLevelInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Welfare_SC_QueryGrowthLevel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Welfare_SC_QueryGrowthLevel_reflection_ = NULL;
const ::google::protobuf::Descriptor* Welfare_SC_DoGrowthLevel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Welfare_SC_DoGrowthLevel_reflection_ = NULL;
const ::google::protobuf::Descriptor* LevelAward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LevelAward_reflection_ = NULL;
const ::google::protobuf::Descriptor* Welfare_CS_QueryLevelAward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Welfare_CS_QueryLevelAward_reflection_ = NULL;
const ::google::protobuf::Descriptor* Welfare_SC_QueryLevelAward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Welfare_SC_QueryLevelAward_reflection_ = NULL;
const ::google::protobuf::Descriptor* Welfare_CS_DoLevelAward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Welfare_CS_DoLevelAward_reflection_ = NULL;
const ::google::protobuf::Descriptor* Welfare_SC_DoLevelAward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Welfare_SC_DoLevelAward_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_welfare_2eproto() {
  protobuf_AddDesc_welfare_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "welfare.proto");
  GOOGLE_CHECK(file != NULL);
  Welfare_CS_DoOnlineAward_descriptor_ = file->message_type(0);
  static const int Welfare_CS_DoOnlineAward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_CS_DoOnlineAward, id_),
  };
  Welfare_CS_DoOnlineAward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Welfare_CS_DoOnlineAward_descriptor_,
      Welfare_CS_DoOnlineAward::default_instance_,
      Welfare_CS_DoOnlineAward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_CS_DoOnlineAward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_CS_DoOnlineAward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Welfare_CS_DoOnlineAward));
  Welfare_CS_QueryOnlineAward_descriptor_ = file->message_type(1);
  static const int Welfare_CS_QueryOnlineAward_offsets_[1] = {
  };
  Welfare_CS_QueryOnlineAward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Welfare_CS_QueryOnlineAward_descriptor_,
      Welfare_CS_QueryOnlineAward::default_instance_,
      Welfare_CS_QueryOnlineAward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_CS_QueryOnlineAward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_CS_QueryOnlineAward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Welfare_CS_QueryOnlineAward));
  Welfare_SC_DoOnlineAward_descriptor_ = file->message_type(2);
  static const int Welfare_SC_DoOnlineAward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_DoOnlineAward, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_DoOnlineAward, item_list_),
  };
  Welfare_SC_DoOnlineAward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Welfare_SC_DoOnlineAward_descriptor_,
      Welfare_SC_DoOnlineAward::default_instance_,
      Welfare_SC_DoOnlineAward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_DoOnlineAward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_DoOnlineAward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Welfare_SC_DoOnlineAward));
  SingleOnlineAward_descriptor_ = file->message_type(3);
  static const int SingleOnlineAward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleOnlineAward, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleOnlineAward, onlineawardstatus_),
  };
  SingleOnlineAward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SingleOnlineAward_descriptor_,
      SingleOnlineAward::default_instance_,
      SingleOnlineAward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleOnlineAward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleOnlineAward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SingleOnlineAward));
  Welfare_SC_QueryOnlineAward_descriptor_ = file->message_type(4);
  static const int Welfare_SC_QueryOnlineAward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_QueryOnlineAward, todaysec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_QueryOnlineAward, awards_),
  };
  Welfare_SC_QueryOnlineAward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Welfare_SC_QueryOnlineAward_descriptor_,
      Welfare_SC_QueryOnlineAward::default_instance_,
      Welfare_SC_QueryOnlineAward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_QueryOnlineAward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_QueryOnlineAward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Welfare_SC_QueryOnlineAward));
  Welfare_CS_QueryHolidayAward_descriptor_ = file->message_type(5);
  static const int Welfare_CS_QueryHolidayAward_offsets_[1] = {
  };
  Welfare_CS_QueryHolidayAward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Welfare_CS_QueryHolidayAward_descriptor_,
      Welfare_CS_QueryHolidayAward::default_instance_,
      Welfare_CS_QueryHolidayAward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_CS_QueryHolidayAward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_CS_QueryHolidayAward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Welfare_CS_QueryHolidayAward));
  Welfare_SC_QueryHolidayAward_descriptor_ = file->message_type(6);
  static const int Welfare_SC_QueryHolidayAward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_QueryHolidayAward, nowtick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_QueryHolidayAward, info_),
  };
  Welfare_SC_QueryHolidayAward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Welfare_SC_QueryHolidayAward_descriptor_,
      Welfare_SC_QueryHolidayAward::default_instance_,
      Welfare_SC_QueryHolidayAward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_QueryHolidayAward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_QueryHolidayAward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Welfare_SC_QueryHolidayAward));
  Welfare_CS_DoHolidayAward_descriptor_ = file->message_type(7);
  static const int Welfare_CS_DoHolidayAward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_CS_DoHolidayAward, id_),
  };
  Welfare_CS_DoHolidayAward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Welfare_CS_DoHolidayAward_descriptor_,
      Welfare_CS_DoHolidayAward::default_instance_,
      Welfare_CS_DoHolidayAward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_CS_DoHolidayAward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_CS_DoHolidayAward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Welfare_CS_DoHolidayAward));
  Welfare_SC_DoHolidayAward_descriptor_ = file->message_type(8);
  static const int Welfare_SC_DoHolidayAward_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_DoHolidayAward, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_DoHolidayAward, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_DoHolidayAward, awardstatus_),
  };
  Welfare_SC_DoHolidayAward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Welfare_SC_DoHolidayAward_descriptor_,
      Welfare_SC_DoHolidayAward::default_instance_,
      Welfare_SC_DoHolidayAward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_DoHolidayAward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_DoHolidayAward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Welfare_SC_DoHolidayAward));
  Welfare_CS_QueryLoginAward_descriptor_ = file->message_type(9);
  static const int Welfare_CS_QueryLoginAward_offsets_[1] = {
  };
  Welfare_CS_QueryLoginAward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Welfare_CS_QueryLoginAward_descriptor_,
      Welfare_CS_QueryLoginAward::default_instance_,
      Welfare_CS_QueryLoginAward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_CS_QueryLoginAward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_CS_QueryLoginAward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Welfare_CS_QueryLoginAward));
  Welfare_SC_QueryLoginAward_descriptor_ = file->message_type(10);
  static const int Welfare_SC_QueryLoginAward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_QueryLoginAward, dayindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_QueryLoginAward, info_),
  };
  Welfare_SC_QueryLoginAward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Welfare_SC_QueryLoginAward_descriptor_,
      Welfare_SC_QueryLoginAward::default_instance_,
      Welfare_SC_QueryLoginAward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_QueryLoginAward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_QueryLoginAward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Welfare_SC_QueryLoginAward));
  Welfare_CS_DoLoginAward_descriptor_ = file->message_type(11);
  static const int Welfare_CS_DoLoginAward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_CS_DoLoginAward, id_),
  };
  Welfare_CS_DoLoginAward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Welfare_CS_DoLoginAward_descriptor_,
      Welfare_CS_DoLoginAward::default_instance_,
      Welfare_CS_DoLoginAward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_CS_DoLoginAward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_CS_DoLoginAward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Welfare_CS_DoLoginAward));
  Welfare_SC_DoLoginAward_descriptor_ = file->message_type(12);
  static const int Welfare_SC_DoLoginAward_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_DoLoginAward, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_DoLoginAward, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_DoLoginAward, awardstatus_),
  };
  Welfare_SC_DoLoginAward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Welfare_SC_DoLoginAward_descriptor_,
      Welfare_SC_DoLoginAward::default_instance_,
      Welfare_SC_DoLoginAward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_DoLoginAward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_DoLoginAward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Welfare_SC_DoLoginAward));
  Welfare_CS_GetWeekDiscount_descriptor_ = file->message_type(13);
  static const int Welfare_CS_GetWeekDiscount_offsets_[1] = {
  };
  Welfare_CS_GetWeekDiscount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Welfare_CS_GetWeekDiscount_descriptor_,
      Welfare_CS_GetWeekDiscount::default_instance_,
      Welfare_CS_GetWeekDiscount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_CS_GetWeekDiscount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_CS_GetWeekDiscount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Welfare_CS_GetWeekDiscount));
  WeekDiscountItem_descriptor_ = file->message_type(14);
  static const int WeekDiscountItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeekDiscountItem, pro_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeekDiscountItem, price_bef_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeekDiscountItem, price_now_),
  };
  WeekDiscountItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WeekDiscountItem_descriptor_,
      WeekDiscountItem::default_instance_,
      WeekDiscountItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeekDiscountItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeekDiscountItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WeekDiscountItem));
  Welfare_SC_GetWeekDiscount_descriptor_ = file->message_type(15);
  static const int Welfare_SC_GetWeekDiscount_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_GetWeekDiscount, item_list_),
  };
  Welfare_SC_GetWeekDiscount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Welfare_SC_GetWeekDiscount_descriptor_,
      Welfare_SC_GetWeekDiscount::default_instance_,
      Welfare_SC_GetWeekDiscount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_GetWeekDiscount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_GetWeekDiscount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Welfare_SC_GetWeekDiscount));
  Welfare_CS_BuyDiscountGift_descriptor_ = file->message_type(16);
  static const int Welfare_CS_BuyDiscountGift_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_CS_BuyDiscountGift, pro_id_),
  };
  Welfare_CS_BuyDiscountGift_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Welfare_CS_BuyDiscountGift_descriptor_,
      Welfare_CS_BuyDiscountGift::default_instance_,
      Welfare_CS_BuyDiscountGift_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_CS_BuyDiscountGift, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_CS_BuyDiscountGift, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Welfare_CS_BuyDiscountGift));
  DiscountItem_descriptor_ = file->message_type(17);
  static const int DiscountItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiscountItem, pro_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiscountItem, is_buy_),
  };
  DiscountItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DiscountItem_descriptor_,
      DiscountItem::default_instance_,
      DiscountItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiscountItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiscountItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DiscountItem));
  Welfare_SC_BuyDiscountGift_descriptor_ = file->message_type(18);
  static const int Welfare_SC_BuyDiscountGift_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_BuyDiscountGift, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_BuyDiscountGift, discount_gift_),
  };
  Welfare_SC_BuyDiscountGift_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Welfare_SC_BuyDiscountGift_descriptor_,
      Welfare_SC_BuyDiscountGift::default_instance_,
      Welfare_SC_BuyDiscountGift_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_BuyDiscountGift, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_BuyDiscountGift, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Welfare_SC_BuyDiscountGift));
  Welfare_SC_DiscountGift_descriptor_ = file->message_type(19);
  static const int Welfare_SC_DiscountGift_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_DiscountGift, remain_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_DiscountGift, discount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_DiscountGift, gift_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_DiscountGift, is_login_),
  };
  Welfare_SC_DiscountGift_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Welfare_SC_DiscountGift_descriptor_,
      Welfare_SC_DiscountGift::default_instance_,
      Welfare_SC_DiscountGift_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_DiscountGift, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_DiscountGift, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Welfare_SC_DiscountGift));
  Welfare_CS_QuerySignInfo_descriptor_ = file->message_type(20);
  static const int Welfare_CS_QuerySignInfo_offsets_[1] = {
  };
  Welfare_CS_QuerySignInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Welfare_CS_QuerySignInfo_descriptor_,
      Welfare_CS_QuerySignInfo::default_instance_,
      Welfare_CS_QuerySignInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_CS_QuerySignInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_CS_QuerySignInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Welfare_CS_QuerySignInfo));
  Welfare_CS_SignToday_descriptor_ = file->message_type(21);
  static const int Welfare_CS_SignToday_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_CS_SignToday, dayindex_),
  };
  Welfare_CS_SignToday_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Welfare_CS_SignToday_descriptor_,
      Welfare_CS_SignToday::default_instance_,
      Welfare_CS_SignToday_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_CS_SignToday, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_CS_SignToday, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Welfare_CS_SignToday));
  Welfare_CS_SignSupply_descriptor_ = file->message_type(22);
  static const int Welfare_CS_SignSupply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_CS_SignSupply, dayindex_),
  };
  Welfare_CS_SignSupply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Welfare_CS_SignSupply_descriptor_,
      Welfare_CS_SignSupply::default_instance_,
      Welfare_CS_SignSupply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_CS_SignSupply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_CS_SignSupply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Welfare_CS_SignSupply));
  Welfare_SC_UpdateSignInfo_descriptor_ = file->message_type(23);
  static const int Welfare_SC_UpdateSignInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_UpdateSignInfo, signinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_UpdateSignInfo, signtotalinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_UpdateSignInfo, issigntoday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_UpdateSignInfo, signsupplytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_UpdateSignInfo, signtotal_),
  };
  Welfare_SC_UpdateSignInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Welfare_SC_UpdateSignInfo_descriptor_,
      Welfare_SC_UpdateSignInfo::default_instance_,
      Welfare_SC_UpdateSignInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_UpdateSignInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_UpdateSignInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Welfare_SC_UpdateSignInfo));
  Welfare_SC_SignToday_descriptor_ = file->message_type(24);
  static const int Welfare_SC_SignToday_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_SignToday, dayindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_SignToday, result_),
  };
  Welfare_SC_SignToday_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Welfare_SC_SignToday_descriptor_,
      Welfare_SC_SignToday::default_instance_,
      Welfare_SC_SignToday_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_SignToday, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_SignToday, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Welfare_SC_SignToday));
  Welfare_SC_SignSupply_descriptor_ = file->message_type(25);
  static const int Welfare_SC_SignSupply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_SignSupply, dayindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_SignSupply, result_),
  };
  Welfare_SC_SignSupply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Welfare_SC_SignSupply_descriptor_,
      Welfare_SC_SignSupply::default_instance_,
      Welfare_SC_SignSupply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_SignSupply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_SignSupply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Welfare_SC_SignSupply));
  Welfare_CS_SignTotal_descriptor_ = file->message_type(26);
  static const int Welfare_CS_SignTotal_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_CS_SignTotal, totalindex_),
  };
  Welfare_CS_SignTotal_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Welfare_CS_SignTotal_descriptor_,
      Welfare_CS_SignTotal::default_instance_,
      Welfare_CS_SignTotal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_CS_SignTotal, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_CS_SignTotal, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Welfare_CS_SignTotal));
  Welfare_SC_SignTotal_descriptor_ = file->message_type(27);
  static const int Welfare_SC_SignTotal_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_SignTotal, totalindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_SignTotal, result_),
  };
  Welfare_SC_SignTotal_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Welfare_SC_SignTotal_descriptor_,
      Welfare_SC_SignTotal::default_instance_,
      Welfare_SC_SignTotal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_SignTotal, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_SignTotal, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Welfare_SC_SignTotal));
  Welfare_CS_QueryLotteryInfo_descriptor_ = file->message_type(28);
  static const int Welfare_CS_QueryLotteryInfo_offsets_[1] = {
  };
  Welfare_CS_QueryLotteryInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Welfare_CS_QueryLotteryInfo_descriptor_,
      Welfare_CS_QueryLotteryInfo::default_instance_,
      Welfare_CS_QueryLotteryInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_CS_QueryLotteryInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_CS_QueryLotteryInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Welfare_CS_QueryLotteryInfo));
  Welfare_CS_DoLottery_descriptor_ = file->message_type(29);
  static const int Welfare_CS_DoLottery_offsets_[1] = {
  };
  Welfare_CS_DoLottery_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Welfare_CS_DoLottery_descriptor_,
      Welfare_CS_DoLottery::default_instance_,
      Welfare_CS_DoLottery_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_CS_DoLottery, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_CS_DoLottery, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Welfare_CS_DoLottery));
  Welfare_SC_UpdateLotteryInfo_descriptor_ = file->message_type(30);
  static const int Welfare_SC_UpdateLotteryInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_UpdateLotteryInfo, lotterytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_UpdateLotteryInfo, nowpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_UpdateLotteryInfo, month_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_UpdateLotteryInfo, isopenserver_),
  };
  Welfare_SC_UpdateLotteryInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Welfare_SC_UpdateLotteryInfo_descriptor_,
      Welfare_SC_UpdateLotteryInfo::default_instance_,
      Welfare_SC_UpdateLotteryInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_UpdateLotteryInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_UpdateLotteryInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Welfare_SC_UpdateLotteryInfo));
  Welfare_SC_DoLotteryBack_descriptor_ = file->message_type(31);
  static const int Welfare_SC_DoLotteryBack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_DoLotteryBack, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_DoLotteryBack, diceresult_),
  };
  Welfare_SC_DoLotteryBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Welfare_SC_DoLotteryBack_descriptor_,
      Welfare_SC_DoLotteryBack::default_instance_,
      Welfare_SC_DoLotteryBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_DoLotteryBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_DoLotteryBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Welfare_SC_DoLotteryBack));
  Welfare_SC_UpdateWelfareRedPoint_descriptor_ = file->message_type(32);
  static const int Welfare_SC_UpdateWelfareRedPoint_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_UpdateWelfareRedPoint, redpoint_),
  };
  Welfare_SC_UpdateWelfareRedPoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Welfare_SC_UpdateWelfareRedPoint_descriptor_,
      Welfare_SC_UpdateWelfareRedPoint::default_instance_,
      Welfare_SC_UpdateWelfareRedPoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_UpdateWelfareRedPoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_UpdateWelfareRedPoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Welfare_SC_UpdateWelfareRedPoint));
  SignData_descriptor_ = file->message_type(33);
  static const int SignData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignData, thisloopstarttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignData, lastsigntime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignData, signsupplytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignData, signtotal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignData, signinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignData, signtotalinfo_),
  };
  SignData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SignData_descriptor_,
      SignData::default_instance_,
      SignData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SignData));
  LotteryData_descriptor_ = file->message_type(34);
  static const int LotteryData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LotteryData, lotterytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LotteryData, nowpos_),
  };
  LotteryData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LotteryData_descriptor_,
      LotteryData::default_instance_,
      LotteryData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LotteryData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LotteryData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LotteryData));
  OnlineData_descriptor_ = file->message_type(35);
  static const int OnlineData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineData, todaysec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineData, awards_),
  };
  OnlineData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OnlineData_descriptor_,
      OnlineData::default_instance_,
      OnlineData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OnlineData));
  SingleAwardData_descriptor_ = file->message_type(36);
  static const int SingleAwardData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleAwardData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleAwardData, isrecived_),
  };
  SingleAwardData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SingleAwardData_descriptor_,
      SingleAwardData::default_instance_,
      SingleAwardData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleAwardData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleAwardData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SingleAwardData));
  HolidayInfo_descriptor_ = file->message_type(37);
  static const int HolidayInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HolidayInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HolidayInfo, holidayawardstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HolidayInfo, opentick_),
  };
  HolidayInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HolidayInfo_descriptor_,
      HolidayInfo::default_instance_,
      HolidayInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HolidayInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HolidayInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HolidayInfo));
  LoginInfo_descriptor_ = file->message_type(38);
  static const int LoginInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginInfo, holidayawardstatus_),
  };
  LoginInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginInfo_descriptor_,
      LoginInfo::default_instance_,
      LoginInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginInfo));
  GrowthFundInfo_descriptor_ = file->message_type(39);
  static const int GrowthFundInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowthFundInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowthFundInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowthFundInfo, awardstatus_),
  };
  GrowthFundInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GrowthFundInfo_descriptor_,
      GrowthFundInfo::default_instance_,
      GrowthFundInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowthFundInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowthFundInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GrowthFundInfo));
  DiamondGiftInfo_descriptor_ = file->message_type(40);
  static const int DiamondGiftInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiamondGiftInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiamondGiftInfo, isopen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiamondGiftInfo, restday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiamondGiftInfo, awardstatus_),
  };
  DiamondGiftInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DiamondGiftInfo_descriptor_,
      DiamondGiftInfo::default_instance_,
      DiamondGiftInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiamondGiftInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiamondGiftInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DiamondGiftInfo));
  DiamondGiftData_descriptor_ = file->message_type(41);
  static const int DiamondGiftData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiamondGiftData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiamondGiftData, isopen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiamondGiftData, tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiamondGiftData, lastrecivetick_),
  };
  DiamondGiftData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DiamondGiftData_descriptor_,
      DiamondGiftData::default_instance_,
      DiamondGiftData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiamondGiftData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiamondGiftData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DiamondGiftData));
  Welfare_CS_QueryGrowthFund_descriptor_ = file->message_type(42);
  static const int Welfare_CS_QueryGrowthFund_offsets_[1] = {
  };
  Welfare_CS_QueryGrowthFund_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Welfare_CS_QueryGrowthFund_descriptor_,
      Welfare_CS_QueryGrowthFund::default_instance_,
      Welfare_CS_QueryGrowthFund_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_CS_QueryGrowthFund, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_CS_QueryGrowthFund, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Welfare_CS_QueryGrowthFund));
  Welfare_CS_DoGrowthFund_descriptor_ = file->message_type(43);
  static const int Welfare_CS_DoGrowthFund_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_CS_DoGrowthFund, id_),
  };
  Welfare_CS_DoGrowthFund_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Welfare_CS_DoGrowthFund_descriptor_,
      Welfare_CS_DoGrowthFund::default_instance_,
      Welfare_CS_DoGrowthFund_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_CS_DoGrowthFund, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_CS_DoGrowthFund, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Welfare_CS_DoGrowthFund));
  Welfare_CS_QueryFirstCharge_descriptor_ = file->message_type(44);
  static const int Welfare_CS_QueryFirstCharge_offsets_[1] = {
  };
  Welfare_CS_QueryFirstCharge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Welfare_CS_QueryFirstCharge_descriptor_,
      Welfare_CS_QueryFirstCharge::default_instance_,
      Welfare_CS_QueryFirstCharge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_CS_QueryFirstCharge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_CS_QueryFirstCharge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Welfare_CS_QueryFirstCharge));
  Welfare_CS_DoFirstCharge_descriptor_ = file->message_type(45);
  static const int Welfare_CS_DoFirstCharge_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_CS_DoFirstCharge, isfirst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_CS_DoFirstCharge, dailyfirstid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_CS_DoFirstCharge, indexid_),
  };
  Welfare_CS_DoFirstCharge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Welfare_CS_DoFirstCharge_descriptor_,
      Welfare_CS_DoFirstCharge::default_instance_,
      Welfare_CS_DoFirstCharge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_CS_DoFirstCharge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_CS_DoFirstCharge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Welfare_CS_DoFirstCharge));
  Welfare_CS_QueryDiamondGift_descriptor_ = file->message_type(46);
  static const int Welfare_CS_QueryDiamondGift_offsets_[1] = {
  };
  Welfare_CS_QueryDiamondGift_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Welfare_CS_QueryDiamondGift_descriptor_,
      Welfare_CS_QueryDiamondGift::default_instance_,
      Welfare_CS_QueryDiamondGift_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_CS_QueryDiamondGift, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_CS_QueryDiamondGift, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Welfare_CS_QueryDiamondGift));
  Welfare_CS_DoDiamondGift_descriptor_ = file->message_type(47);
  static const int Welfare_CS_DoDiamondGift_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_CS_DoDiamondGift, id_),
  };
  Welfare_CS_DoDiamondGift_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Welfare_CS_DoDiamondGift_descriptor_,
      Welfare_CS_DoDiamondGift::default_instance_,
      Welfare_CS_DoDiamondGift_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_CS_DoDiamondGift, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_CS_DoDiamondGift, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Welfare_CS_DoDiamondGift));
  Welfare_SC_QueryGrowthFund_descriptor_ = file->message_type(48);
  static const int Welfare_SC_QueryGrowthFund_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_QueryGrowthFund, isopened_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_QueryGrowthFund, ishaveextra_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_QueryGrowthFund, info_),
  };
  Welfare_SC_QueryGrowthFund_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Welfare_SC_QueryGrowthFund_descriptor_,
      Welfare_SC_QueryGrowthFund::default_instance_,
      Welfare_SC_QueryGrowthFund_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_QueryGrowthFund, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_QueryGrowthFund, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Welfare_SC_QueryGrowthFund));
  Welfare_SC_DoGrowthFund_descriptor_ = file->message_type(49);
  static const int Welfare_SC_DoGrowthFund_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_DoGrowthFund, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_DoGrowthFund, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_DoGrowthFund, awardstatus_),
  };
  Welfare_SC_DoGrowthFund_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Welfare_SC_DoGrowthFund_descriptor_,
      Welfare_SC_DoGrowthFund::default_instance_,
      Welfare_SC_DoGrowthFund_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_DoGrowthFund, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_DoGrowthFund, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Welfare_SC_DoGrowthFund));
  Welfare_SC_QueryFirstCharge_descriptor_ = file->message_type(50);
  static const int Welfare_SC_QueryFirstCharge_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_QueryFirstCharge, firstawardstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_QueryFirstCharge, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_QueryFirstCharge, todaytotal_),
  };
  Welfare_SC_QueryFirstCharge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Welfare_SC_QueryFirstCharge_descriptor_,
      Welfare_SC_QueryFirstCharge::default_instance_,
      Welfare_SC_QueryFirstCharge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_QueryFirstCharge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_QueryFirstCharge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Welfare_SC_QueryFirstCharge));
  Welfare_SC_DoFirstCharge_descriptor_ = file->message_type(51);
  static const int Welfare_SC_DoFirstCharge_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_DoFirstCharge, result_),
  };
  Welfare_SC_DoFirstCharge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Welfare_SC_DoFirstCharge_descriptor_,
      Welfare_SC_DoFirstCharge::default_instance_,
      Welfare_SC_DoFirstCharge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_DoFirstCharge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_DoFirstCharge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Welfare_SC_DoFirstCharge));
  Welfare_SC_QueryDiamondGift_descriptor_ = file->message_type(52);
  static const int Welfare_SC_QueryDiamondGift_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_QueryDiamondGift, info_),
  };
  Welfare_SC_QueryDiamondGift_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Welfare_SC_QueryDiamondGift_descriptor_,
      Welfare_SC_QueryDiamondGift::default_instance_,
      Welfare_SC_QueryDiamondGift_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_QueryDiamondGift, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_QueryDiamondGift, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Welfare_SC_QueryDiamondGift));
  Welfare_SC_DoDiamondGift_descriptor_ = file->message_type(53);
  static const int Welfare_SC_DoDiamondGift_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_DoDiamondGift, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_DoDiamondGift, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_DoDiamondGift, awardstatus_),
  };
  Welfare_SC_DoDiamondGift_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Welfare_SC_DoDiamondGift_descriptor_,
      Welfare_SC_DoDiamondGift::default_instance_,
      Welfare_SC_DoDiamondGift_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_DoDiamondGift, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_DoDiamondGift, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Welfare_SC_DoDiamondGift));
  OpenInfo_descriptor_ = file->message_type(54);
  static const int OpenInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenInfo, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenInfo, order_),
  };
  OpenInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OpenInfo_descriptor_,
      OpenInfo::default_instance_,
      OpenInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OpenInfo));
  Welfare_SC_UpdateOpenInfo_descriptor_ = file->message_type(55);
  static const int Welfare_SC_UpdateOpenInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_UpdateOpenInfo, info_),
  };
  Welfare_SC_UpdateOpenInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Welfare_SC_UpdateOpenInfo_descriptor_,
      Welfare_SC_UpdateOpenInfo::default_instance_,
      Welfare_SC_UpdateOpenInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_UpdateOpenInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_UpdateOpenInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Welfare_SC_UpdateOpenInfo));
  Welfare_CS_QueryGrowthLevel_descriptor_ = file->message_type(56);
  static const int Welfare_CS_QueryGrowthLevel_offsets_[1] = {
  };
  Welfare_CS_QueryGrowthLevel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Welfare_CS_QueryGrowthLevel_descriptor_,
      Welfare_CS_QueryGrowthLevel::default_instance_,
      Welfare_CS_QueryGrowthLevel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_CS_QueryGrowthLevel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_CS_QueryGrowthLevel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Welfare_CS_QueryGrowthLevel));
  Welfare_CS_DoGrowthLevel_descriptor_ = file->message_type(57);
  static const int Welfare_CS_DoGrowthLevel_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_CS_DoGrowthLevel, id_),
  };
  Welfare_CS_DoGrowthLevel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Welfare_CS_DoGrowthLevel_descriptor_,
      Welfare_CS_DoGrowthLevel::default_instance_,
      Welfare_CS_DoGrowthLevel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_CS_DoGrowthLevel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_CS_DoGrowthLevel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Welfare_CS_DoGrowthLevel));
  GrowthLevelInfo_descriptor_ = file->message_type(58);
  static const int GrowthLevelInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowthLevelInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowthLevelInfo, status_),
  };
  GrowthLevelInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GrowthLevelInfo_descriptor_,
      GrowthLevelInfo::default_instance_,
      GrowthLevelInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowthLevelInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowthLevelInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GrowthLevelInfo));
  Welfare_SC_QueryGrowthLevel_descriptor_ = file->message_type(59);
  static const int Welfare_SC_QueryGrowthLevel_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_QueryGrowthLevel, info_),
  };
  Welfare_SC_QueryGrowthLevel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Welfare_SC_QueryGrowthLevel_descriptor_,
      Welfare_SC_QueryGrowthLevel::default_instance_,
      Welfare_SC_QueryGrowthLevel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_QueryGrowthLevel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_QueryGrowthLevel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Welfare_SC_QueryGrowthLevel));
  Welfare_SC_DoGrowthLevel_descriptor_ = file->message_type(60);
  static const int Welfare_SC_DoGrowthLevel_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_DoGrowthLevel, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_DoGrowthLevel, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_DoGrowthLevel, awardstatus_),
  };
  Welfare_SC_DoGrowthLevel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Welfare_SC_DoGrowthLevel_descriptor_,
      Welfare_SC_DoGrowthLevel::default_instance_,
      Welfare_SC_DoGrowthLevel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_DoGrowthLevel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_DoGrowthLevel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Welfare_SC_DoGrowthLevel));
  LevelAward_descriptor_ = file->message_type(61);
  static const int LevelAward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelAward, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelAward, received_),
  };
  LevelAward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LevelAward_descriptor_,
      LevelAward::default_instance_,
      LevelAward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelAward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelAward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LevelAward));
  Welfare_CS_QueryLevelAward_descriptor_ = file->message_type(62);
  static const int Welfare_CS_QueryLevelAward_offsets_[1] = {
  };
  Welfare_CS_QueryLevelAward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Welfare_CS_QueryLevelAward_descriptor_,
      Welfare_CS_QueryLevelAward::default_instance_,
      Welfare_CS_QueryLevelAward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_CS_QueryLevelAward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_CS_QueryLevelAward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Welfare_CS_QueryLevelAward));
  Welfare_SC_QueryLevelAward_descriptor_ = file->message_type(63);
  static const int Welfare_SC_QueryLevelAward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_QueryLevelAward, res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_QueryLevelAward, awards_),
  };
  Welfare_SC_QueryLevelAward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Welfare_SC_QueryLevelAward_descriptor_,
      Welfare_SC_QueryLevelAward::default_instance_,
      Welfare_SC_QueryLevelAward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_QueryLevelAward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_QueryLevelAward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Welfare_SC_QueryLevelAward));
  Welfare_CS_DoLevelAward_descriptor_ = file->message_type(64);
  static const int Welfare_CS_DoLevelAward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_CS_DoLevelAward, id_),
  };
  Welfare_CS_DoLevelAward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Welfare_CS_DoLevelAward_descriptor_,
      Welfare_CS_DoLevelAward::default_instance_,
      Welfare_CS_DoLevelAward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_CS_DoLevelAward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_CS_DoLevelAward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Welfare_CS_DoLevelAward));
  Welfare_SC_DoLevelAward_descriptor_ = file->message_type(65);
  static const int Welfare_SC_DoLevelAward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_DoLevelAward, res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_DoLevelAward, id_),
  };
  Welfare_SC_DoLevelAward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Welfare_SC_DoLevelAward_descriptor_,
      Welfare_SC_DoLevelAward::default_instance_,
      Welfare_SC_DoLevelAward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_DoLevelAward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Welfare_SC_DoLevelAward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Welfare_SC_DoLevelAward));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_welfare_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Welfare_CS_DoOnlineAward_descriptor_, &Welfare_CS_DoOnlineAward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Welfare_CS_QueryOnlineAward_descriptor_, &Welfare_CS_QueryOnlineAward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Welfare_SC_DoOnlineAward_descriptor_, &Welfare_SC_DoOnlineAward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SingleOnlineAward_descriptor_, &SingleOnlineAward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Welfare_SC_QueryOnlineAward_descriptor_, &Welfare_SC_QueryOnlineAward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Welfare_CS_QueryHolidayAward_descriptor_, &Welfare_CS_QueryHolidayAward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Welfare_SC_QueryHolidayAward_descriptor_, &Welfare_SC_QueryHolidayAward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Welfare_CS_DoHolidayAward_descriptor_, &Welfare_CS_DoHolidayAward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Welfare_SC_DoHolidayAward_descriptor_, &Welfare_SC_DoHolidayAward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Welfare_CS_QueryLoginAward_descriptor_, &Welfare_CS_QueryLoginAward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Welfare_SC_QueryLoginAward_descriptor_, &Welfare_SC_QueryLoginAward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Welfare_CS_DoLoginAward_descriptor_, &Welfare_CS_DoLoginAward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Welfare_SC_DoLoginAward_descriptor_, &Welfare_SC_DoLoginAward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Welfare_CS_GetWeekDiscount_descriptor_, &Welfare_CS_GetWeekDiscount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WeekDiscountItem_descriptor_, &WeekDiscountItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Welfare_SC_GetWeekDiscount_descriptor_, &Welfare_SC_GetWeekDiscount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Welfare_CS_BuyDiscountGift_descriptor_, &Welfare_CS_BuyDiscountGift::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DiscountItem_descriptor_, &DiscountItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Welfare_SC_BuyDiscountGift_descriptor_, &Welfare_SC_BuyDiscountGift::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Welfare_SC_DiscountGift_descriptor_, &Welfare_SC_DiscountGift::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Welfare_CS_QuerySignInfo_descriptor_, &Welfare_CS_QuerySignInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Welfare_CS_SignToday_descriptor_, &Welfare_CS_SignToday::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Welfare_CS_SignSupply_descriptor_, &Welfare_CS_SignSupply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Welfare_SC_UpdateSignInfo_descriptor_, &Welfare_SC_UpdateSignInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Welfare_SC_SignToday_descriptor_, &Welfare_SC_SignToday::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Welfare_SC_SignSupply_descriptor_, &Welfare_SC_SignSupply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Welfare_CS_SignTotal_descriptor_, &Welfare_CS_SignTotal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Welfare_SC_SignTotal_descriptor_, &Welfare_SC_SignTotal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Welfare_CS_QueryLotteryInfo_descriptor_, &Welfare_CS_QueryLotteryInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Welfare_CS_DoLottery_descriptor_, &Welfare_CS_DoLottery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Welfare_SC_UpdateLotteryInfo_descriptor_, &Welfare_SC_UpdateLotteryInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Welfare_SC_DoLotteryBack_descriptor_, &Welfare_SC_DoLotteryBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Welfare_SC_UpdateWelfareRedPoint_descriptor_, &Welfare_SC_UpdateWelfareRedPoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SignData_descriptor_, &SignData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LotteryData_descriptor_, &LotteryData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OnlineData_descriptor_, &OnlineData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SingleAwardData_descriptor_, &SingleAwardData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HolidayInfo_descriptor_, &HolidayInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginInfo_descriptor_, &LoginInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GrowthFundInfo_descriptor_, &GrowthFundInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DiamondGiftInfo_descriptor_, &DiamondGiftInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DiamondGiftData_descriptor_, &DiamondGiftData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Welfare_CS_QueryGrowthFund_descriptor_, &Welfare_CS_QueryGrowthFund::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Welfare_CS_DoGrowthFund_descriptor_, &Welfare_CS_DoGrowthFund::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Welfare_CS_QueryFirstCharge_descriptor_, &Welfare_CS_QueryFirstCharge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Welfare_CS_DoFirstCharge_descriptor_, &Welfare_CS_DoFirstCharge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Welfare_CS_QueryDiamondGift_descriptor_, &Welfare_CS_QueryDiamondGift::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Welfare_CS_DoDiamondGift_descriptor_, &Welfare_CS_DoDiamondGift::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Welfare_SC_QueryGrowthFund_descriptor_, &Welfare_SC_QueryGrowthFund::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Welfare_SC_DoGrowthFund_descriptor_, &Welfare_SC_DoGrowthFund::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Welfare_SC_QueryFirstCharge_descriptor_, &Welfare_SC_QueryFirstCharge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Welfare_SC_DoFirstCharge_descriptor_, &Welfare_SC_DoFirstCharge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Welfare_SC_QueryDiamondGift_descriptor_, &Welfare_SC_QueryDiamondGift::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Welfare_SC_DoDiamondGift_descriptor_, &Welfare_SC_DoDiamondGift::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OpenInfo_descriptor_, &OpenInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Welfare_SC_UpdateOpenInfo_descriptor_, &Welfare_SC_UpdateOpenInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Welfare_CS_QueryGrowthLevel_descriptor_, &Welfare_CS_QueryGrowthLevel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Welfare_CS_DoGrowthLevel_descriptor_, &Welfare_CS_DoGrowthLevel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GrowthLevelInfo_descriptor_, &GrowthLevelInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Welfare_SC_QueryGrowthLevel_descriptor_, &Welfare_SC_QueryGrowthLevel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Welfare_SC_DoGrowthLevel_descriptor_, &Welfare_SC_DoGrowthLevel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LevelAward_descriptor_, &LevelAward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Welfare_CS_QueryLevelAward_descriptor_, &Welfare_CS_QueryLevelAward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Welfare_SC_QueryLevelAward_descriptor_, &Welfare_SC_QueryLevelAward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Welfare_CS_DoLevelAward_descriptor_, &Welfare_CS_DoLevelAward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Welfare_SC_DoLevelAward_descriptor_, &Welfare_SC_DoLevelAward::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_welfare_2eproto() {
  delete Welfare_CS_DoOnlineAward::default_instance_;
  delete Welfare_CS_DoOnlineAward_reflection_;
  delete Welfare_CS_QueryOnlineAward::default_instance_;
  delete Welfare_CS_QueryOnlineAward_reflection_;
  delete Welfare_SC_DoOnlineAward::default_instance_;
  delete Welfare_SC_DoOnlineAward_reflection_;
  delete SingleOnlineAward::default_instance_;
  delete SingleOnlineAward_reflection_;
  delete Welfare_SC_QueryOnlineAward::default_instance_;
  delete Welfare_SC_QueryOnlineAward_reflection_;
  delete Welfare_CS_QueryHolidayAward::default_instance_;
  delete Welfare_CS_QueryHolidayAward_reflection_;
  delete Welfare_SC_QueryHolidayAward::default_instance_;
  delete Welfare_SC_QueryHolidayAward_reflection_;
  delete Welfare_CS_DoHolidayAward::default_instance_;
  delete Welfare_CS_DoHolidayAward_reflection_;
  delete Welfare_SC_DoHolidayAward::default_instance_;
  delete Welfare_SC_DoHolidayAward_reflection_;
  delete Welfare_CS_QueryLoginAward::default_instance_;
  delete Welfare_CS_QueryLoginAward_reflection_;
  delete Welfare_SC_QueryLoginAward::default_instance_;
  delete Welfare_SC_QueryLoginAward_reflection_;
  delete Welfare_CS_DoLoginAward::default_instance_;
  delete Welfare_CS_DoLoginAward_reflection_;
  delete Welfare_SC_DoLoginAward::default_instance_;
  delete Welfare_SC_DoLoginAward_reflection_;
  delete Welfare_CS_GetWeekDiscount::default_instance_;
  delete Welfare_CS_GetWeekDiscount_reflection_;
  delete WeekDiscountItem::default_instance_;
  delete WeekDiscountItem_reflection_;
  delete Welfare_SC_GetWeekDiscount::default_instance_;
  delete Welfare_SC_GetWeekDiscount_reflection_;
  delete Welfare_CS_BuyDiscountGift::default_instance_;
  delete Welfare_CS_BuyDiscountGift_reflection_;
  delete DiscountItem::default_instance_;
  delete DiscountItem_reflection_;
  delete Welfare_SC_BuyDiscountGift::default_instance_;
  delete Welfare_SC_BuyDiscountGift_reflection_;
  delete Welfare_SC_DiscountGift::default_instance_;
  delete Welfare_SC_DiscountGift_reflection_;
  delete Welfare_CS_QuerySignInfo::default_instance_;
  delete Welfare_CS_QuerySignInfo_reflection_;
  delete Welfare_CS_SignToday::default_instance_;
  delete Welfare_CS_SignToday_reflection_;
  delete Welfare_CS_SignSupply::default_instance_;
  delete Welfare_CS_SignSupply_reflection_;
  delete Welfare_SC_UpdateSignInfo::default_instance_;
  delete Welfare_SC_UpdateSignInfo_reflection_;
  delete Welfare_SC_SignToday::default_instance_;
  delete Welfare_SC_SignToday_reflection_;
  delete Welfare_SC_SignSupply::default_instance_;
  delete Welfare_SC_SignSupply_reflection_;
  delete Welfare_CS_SignTotal::default_instance_;
  delete Welfare_CS_SignTotal_reflection_;
  delete Welfare_SC_SignTotal::default_instance_;
  delete Welfare_SC_SignTotal_reflection_;
  delete Welfare_CS_QueryLotteryInfo::default_instance_;
  delete Welfare_CS_QueryLotteryInfo_reflection_;
  delete Welfare_CS_DoLottery::default_instance_;
  delete Welfare_CS_DoLottery_reflection_;
  delete Welfare_SC_UpdateLotteryInfo::default_instance_;
  delete Welfare_SC_UpdateLotteryInfo_reflection_;
  delete Welfare_SC_DoLotteryBack::default_instance_;
  delete Welfare_SC_DoLotteryBack_reflection_;
  delete Welfare_SC_UpdateWelfareRedPoint::default_instance_;
  delete Welfare_SC_UpdateWelfareRedPoint_reflection_;
  delete SignData::default_instance_;
  delete SignData_reflection_;
  delete LotteryData::default_instance_;
  delete LotteryData_reflection_;
  delete OnlineData::default_instance_;
  delete OnlineData_reflection_;
  delete SingleAwardData::default_instance_;
  delete SingleAwardData_reflection_;
  delete HolidayInfo::default_instance_;
  delete HolidayInfo_reflection_;
  delete LoginInfo::default_instance_;
  delete LoginInfo_reflection_;
  delete GrowthFundInfo::default_instance_;
  delete GrowthFundInfo_reflection_;
  delete DiamondGiftInfo::default_instance_;
  delete DiamondGiftInfo_reflection_;
  delete DiamondGiftData::default_instance_;
  delete DiamondGiftData_reflection_;
  delete Welfare_CS_QueryGrowthFund::default_instance_;
  delete Welfare_CS_QueryGrowthFund_reflection_;
  delete Welfare_CS_DoGrowthFund::default_instance_;
  delete Welfare_CS_DoGrowthFund_reflection_;
  delete Welfare_CS_QueryFirstCharge::default_instance_;
  delete Welfare_CS_QueryFirstCharge_reflection_;
  delete Welfare_CS_DoFirstCharge::default_instance_;
  delete Welfare_CS_DoFirstCharge_reflection_;
  delete Welfare_CS_QueryDiamondGift::default_instance_;
  delete Welfare_CS_QueryDiamondGift_reflection_;
  delete Welfare_CS_DoDiamondGift::default_instance_;
  delete Welfare_CS_DoDiamondGift_reflection_;
  delete Welfare_SC_QueryGrowthFund::default_instance_;
  delete Welfare_SC_QueryGrowthFund_reflection_;
  delete Welfare_SC_DoGrowthFund::default_instance_;
  delete Welfare_SC_DoGrowthFund_reflection_;
  delete Welfare_SC_QueryFirstCharge::default_instance_;
  delete Welfare_SC_QueryFirstCharge_reflection_;
  delete Welfare_SC_DoFirstCharge::default_instance_;
  delete Welfare_SC_DoFirstCharge_reflection_;
  delete Welfare_SC_QueryDiamondGift::default_instance_;
  delete Welfare_SC_QueryDiamondGift_reflection_;
  delete Welfare_SC_DoDiamondGift::default_instance_;
  delete Welfare_SC_DoDiamondGift_reflection_;
  delete OpenInfo::default_instance_;
  delete OpenInfo_reflection_;
  delete Welfare_SC_UpdateOpenInfo::default_instance_;
  delete Welfare_SC_UpdateOpenInfo_reflection_;
  delete Welfare_CS_QueryGrowthLevel::default_instance_;
  delete Welfare_CS_QueryGrowthLevel_reflection_;
  delete Welfare_CS_DoGrowthLevel::default_instance_;
  delete Welfare_CS_DoGrowthLevel_reflection_;
  delete GrowthLevelInfo::default_instance_;
  delete GrowthLevelInfo_reflection_;
  delete Welfare_SC_QueryGrowthLevel::default_instance_;
  delete Welfare_SC_QueryGrowthLevel_reflection_;
  delete Welfare_SC_DoGrowthLevel::default_instance_;
  delete Welfare_SC_DoGrowthLevel_reflection_;
  delete LevelAward::default_instance_;
  delete LevelAward_reflection_;
  delete Welfare_CS_QueryLevelAward::default_instance_;
  delete Welfare_CS_QueryLevelAward_reflection_;
  delete Welfare_SC_QueryLevelAward::default_instance_;
  delete Welfare_SC_QueryLevelAward_reflection_;
  delete Welfare_CS_DoLevelAward::default_instance_;
  delete Welfare_CS_DoLevelAward_reflection_;
  delete Welfare_SC_DoLevelAward::default_instance_;
  delete Welfare_SC_DoLevelAward_reflection_;
}

void protobuf_AddDesc_welfare_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::proto::message::protobuf_AddDesc_item_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rwelfare.proto\022\rproto.message\032\nitem.pro"
    "to\"&\n\030Welfare_CS_DoOnlineAward\022\n\n\002id\030\001 \002"
    "(\005\"\035\n\033Welfare_CS_QueryOnlineAward\"Y\n\030Wel"
    "fare_SC_DoOnlineAward\022\016\n\006result\030\001 \002(\r\022-\n"
    "\titem_list\030\002 \002(\0132\032.proto.message.DropIte"
    "mNum\":\n\021SingleOnlineAward\022\n\n\002id\030\001 \002(\005\022\031\n"
    "\021onlineawardstatus\030\002 \002(\005\"a\n\033Welfare_SC_Q"
    "ueryOnlineAward\022\020\n\010todaySec\030\001 \002(\005\0220\n\006awa"
    "rds\030\002 \003(\0132 .proto.message.SingleOnlineAw"
    "ard\"\036\n\034Welfare_CS_QueryHolidayAward\"Y\n\034W"
    "elfare_SC_QueryHolidayAward\022\017\n\007nowtick\030\001"
    " \002(\r\022(\n\004info\030\002 \003(\0132\032.proto.message.Holid"
    "ayInfo\"\'\n\031Welfare_CS_DoHolidayAward\022\n\n\002i"
    "d\030\001 \002(\r\"L\n\031Welfare_SC_DoHolidayAward\022\016\n\006"
    "result\030\001 \002(\r\022\n\n\002id\030\002 \002(\r\022\023\n\013awardstatus\030"
    "\003 \002(\005\"\034\n\032Welfare_CS_QueryLoginAward\"V\n\032W"
    "elfare_SC_QueryLoginAward\022\020\n\010dayindex\030\001 "
    "\002(\r\022&\n\004info\030\002 \003(\0132\030.proto.message.LoginI"
    "nfo\"%\n\027Welfare_CS_DoLoginAward\022\n\n\002id\030\001 \002"
    "(\r\"J\n\027Welfare_SC_DoLoginAward\022\016\n\006result\030"
    "\001 \002(\r\022\n\n\002id\030\002 \002(\r\022\023\n\013awardstatus\030\003 \002(\005\"\034"
    "\n\032Welfare_CS_GetWeekDiscount\"H\n\020WeekDisc"
    "ountItem\022\016\n\006pro_id\030\001 \001(\005\022\021\n\tprice_bef\030\002 "
    "\001(\005\022\021\n\tprice_now\030\003 \001(\005\"P\n\032Welfare_SC_Get"
    "WeekDiscount\0222\n\titem_list\030\001 \003(\0132\037.proto."
    "message.WeekDiscountItem\",\n\032Welfare_CS_B"
    "uyDiscountGift\022\016\n\006pro_id\030\001 \001(\005\".\n\014Discou"
    "ntItem\022\016\n\006pro_id\030\001 \001(\005\022\016\n\006is_buy\030\002 \001(\005\"`"
    "\n\032Welfare_SC_BuyDiscountGift\022\016\n\006result\030\001"
    " \001(\005\0222\n\rdiscount_gift\030\002 \001(\0132\033.proto.mess"
    "age.DiscountItem\"\202\001\n\027Welfare_SC_Discount"
    "Gift\022\023\n\013remain_time\030\001 \001(\005\022\020\n\010discount\030\002 "
    "\001(\005\022.\n\tgift_list\030\003 \003(\0132\033.proto.message.D"
    "iscountItem\022\020\n\010is_login\030\004 \001(\005\"\032\n\030Welfare"
    "_CS_QuerySignInfo\"(\n\024Welfare_CS_SignToda"
    "y\022\020\n\010dayindex\030\001 \001(\005\")\n\025Welfare_CS_SignSu"
    "pply\022\020\n\010dayindex\030\001 \001(\005\"\204\001\n\031Welfare_SC_Up"
    "dateSignInfo\022\020\n\010signinfo\030\001 \003(\005\022\025\n\rsignTo"
    "talinfo\030\002 \003(\005\022\023\n\013issigntoday\030\003 \002(\r\022\026\n\016si"
    "gnsupplytime\030\005 \002(\r\022\021\n\tsigntotal\030\006 \002(\r\"8\n"
    "\024Welfare_SC_SignToday\022\020\n\010dayindex\030\001 \001(\005\022"
    "\016\n\006result\030\002 \002(\r\"9\n\025Welfare_SC_SignSupply"
    "\022\020\n\010dayindex\030\001 \001(\005\022\016\n\006result\030\002 \002(\r\"*\n\024We"
    "lfare_CS_SignTotal\022\022\n\ntotalindex\030\001 \001(\005\":"
    "\n\024Welfare_SC_SignTotal\022\022\n\ntotalindex\030\001 \001"
    "(\005\022\016\n\006result\030\002 \002(\r\"\035\n\033Welfare_CS_QueryLo"
    "tteryInfo\"\026\n\024Welfare_CS_DoLottery\"h\n\034Wel"
    "fare_SC_UpdateLotteryInfo\022\023\n\013lotterytime"
    "\030\001 \002(\r\022\016\n\006nowpos\030\002 \002(\r\022\r\n\005month\030\003 \002(\r\022\024\n"
    "\014isopenserver\030\004 \002(\r\">\n\030Welfare_SC_DoLott"
    "eryBack\022\016\n\006result\030\001 \002(\r\022\022\n\ndiceresult\030\002 "
    "\002(\r\"4\n Welfare_SC_UpdateWelfareRedPoint\022"
    "\020\n\010redpoint\030\001 \003(\r\"\217\001\n\010SignData\022\031\n\021thislo"
    "opstarttime\030\001 \001(\r\022\024\n\014lastsigntime\030\002 \001(\r\022"
    "\026\n\016signsupplytime\030\003 \001(\r\022\021\n\tsigntotal\030\004 \001"
    "(\r\022\020\n\010signinfo\030\005 \003(\005\022\025\n\rsignTotalinfo\030\006 "
    "\003(\005\"2\n\013LotteryData\022\023\n\013lotterytime\030\001 \001(\r\022"
    "\016\n\006nowpos\030\002 \001(\r\"P\n\nOnlineData\022\020\n\010todaySe"
    "c\030\001 \002(\005\0220\n\006awards\030\002 \003(\0132 .proto.message."
    "SingleOnlineAward\"0\n\017SingleAwardData\022\n\n\002"
    "id\030\001 \002(\005\022\021\n\tisrecived\030\002 \002(\005\"G\n\013HolidayIn"
    "fo\022\n\n\002id\030\001 \002(\005\022\032\n\022holidayawardstatus\030\002 \002"
    "(\005\022\020\n\010opentick\030\003 \002(\r\"3\n\tLoginInfo\022\n\n\002id\030"
    "\001 \002(\005\022\032\n\022holidayawardstatus\030\002 \002(\005\"@\n\016Gro"
    "wthFundInfo\022\n\n\002id\030\001 \002(\005\022\r\n\005level\030\002 \002(\005\022\023"
    "\n\013awardstatus\030\003 \002(\005\"S\n\017DiamondGiftInfo\022\n"
    "\n\002id\030\001 \002(\005\022\016\n\006isopen\030\002 \002(\005\022\017\n\007restday\030\003 "
    "\002(\005\022\023\n\013awardstatus\030\004 \002(\005\"S\n\017DiamondGiftD"
    "ata\022\n\n\002id\030\001 \002(\005\022\016\n\006isopen\030\002 \002(\005\022\014\n\004tick\030"
    "\003 \002(\r\022\026\n\016lastReciveTick\030\004 \002(\r\"\034\n\032Welfare"
    "_CS_QueryGrowthFund\"%\n\027Welfare_CS_DoGrow"
    "thFund\022\n\n\002id\030\001 \002(\r\"\035\n\033Welfare_CS_QueryFi"
    "rstCharge\"R\n\030Welfare_CS_DoFirstCharge\022\017\n"
    "\007isFirst\030\001 \002(\010\022\024\n\014dailyFirstId\030\002 \001(\005\022\017\n\007"
    "indexId\030\003 \001(\005\"\035\n\033Welfare_CS_QueryDiamond"
    "Gift\"&\n\030Welfare_CS_DoDiamondGift\022\n\n\002id\030\001"
    " \002(\r\"p\n\032Welfare_SC_QueryGrowthFund\022\020\n\010is"
    "opened\030\001 \002(\005\022\023\n\013ishaveextra\030\002 \002(\005\022+\n\004inf"
    "o\030\003 \003(\0132\035.proto.message.GrowthFundInfo\"J"
    "\n\027Welfare_SC_DoGrowthFund\022\016\n\006result\030\001 \002("
    "\r\022\n\n\002id\030\002 \002(\r\022\023\n\013awardstatus\030\003 \002(\005\"y\n\033We"
    "lfare_SC_QueryFirstCharge\022\030\n\020firstawards"
    "tatus\030\001 \002(\005\022,\n\004info\030\002 \003(\0132\036.proto.messag"
    "e.SingleAwardData\022\022\n\ntodayTotal\030\003 \002(\005\"*\n"
    "\030Welfare_SC_DoFirstCharge\022\016\n\006result\030\001 \002("
    "\r\"K\n\033Welfare_SC_QueryDiamondGift\022,\n\004info"
    "\030\001 \003(\0132\036.proto.message.DiamondGiftInfo\"K"
    "\n\030Welfare_SC_DoDiamondGift\022\016\n\006result\030\001 \002"
    "(\r\022\n\n\002id\030\002 \002(\r\022\023\n\013awardstatus\030\003 \002(\005\"D\n\010O"
    "penInfo\022\n\n\002id\030\001 \002(\005\022\016\n\006status\030\002 \002(\005\022\r\n\005l"
    "evel\030\003 \002(\005\022\r\n\005order\030\004 \002(\005\"B\n\031Welfare_SC_"
    "UpdateOpenInfo\022%\n\004info\030\001 \003(\0132\027.proto.mes"
    "sage.OpenInfo\"\035\n\033Welfare_CS_QueryGrowthL"
    "evel\"&\n\030Welfare_CS_DoGrowthLevel\022\n\n\002id\030\001"
    " \002(\005\"-\n\017GrowthLevelInfo\022\n\n\002id\030\001 \002(\005\022\016\n\006s"
    "tatus\030\002 \002(\005\"K\n\033Welfare_SC_QueryGrowthLev"
    "el\022,\n\004info\030\001 \003(\0132\036.proto.message.GrowthL"
    "evelInfo\"K\n\030Welfare_SC_DoGrowthLevel\022\016\n\006"
    "result\030\001 \002(\005\022\n\n\002id\030\002 \002(\005\022\023\n\013awardstatus\030"
    "\003 \002(\005\"*\n\nLevelAward\022\n\n\002id\030\001 \002(\005\022\020\n\010recei"
    "ved\030\002 \002(\010\"\034\n\032Welfare_CS_QueryLevelAward\""
    "T\n\032Welfare_SC_QueryLevelAward\022\013\n\003res\030\001 \002"
    "(\005\022)\n\006awards\030\002 \003(\0132\031.proto.message.Level"
    "Award\"%\n\027Welfare_CS_DoLevelAward\022\n\n\002id\030\001"
    " \002(\005\"2\n\027Welfare_SC_DoLevelAward\022\013\n\003res\030\001"
    " \002(\005\022\n\n\002id\030\002 \002(\005B\017\n\rproto.message", 4233);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "welfare.proto", &protobuf_RegisterTypes);
  Welfare_CS_DoOnlineAward::default_instance_ = new Welfare_CS_DoOnlineAward();
  Welfare_CS_QueryOnlineAward::default_instance_ = new Welfare_CS_QueryOnlineAward();
  Welfare_SC_DoOnlineAward::default_instance_ = new Welfare_SC_DoOnlineAward();
  SingleOnlineAward::default_instance_ = new SingleOnlineAward();
  Welfare_SC_QueryOnlineAward::default_instance_ = new Welfare_SC_QueryOnlineAward();
  Welfare_CS_QueryHolidayAward::default_instance_ = new Welfare_CS_QueryHolidayAward();
  Welfare_SC_QueryHolidayAward::default_instance_ = new Welfare_SC_QueryHolidayAward();
  Welfare_CS_DoHolidayAward::default_instance_ = new Welfare_CS_DoHolidayAward();
  Welfare_SC_DoHolidayAward::default_instance_ = new Welfare_SC_DoHolidayAward();
  Welfare_CS_QueryLoginAward::default_instance_ = new Welfare_CS_QueryLoginAward();
  Welfare_SC_QueryLoginAward::default_instance_ = new Welfare_SC_QueryLoginAward();
  Welfare_CS_DoLoginAward::default_instance_ = new Welfare_CS_DoLoginAward();
  Welfare_SC_DoLoginAward::default_instance_ = new Welfare_SC_DoLoginAward();
  Welfare_CS_GetWeekDiscount::default_instance_ = new Welfare_CS_GetWeekDiscount();
  WeekDiscountItem::default_instance_ = new WeekDiscountItem();
  Welfare_SC_GetWeekDiscount::default_instance_ = new Welfare_SC_GetWeekDiscount();
  Welfare_CS_BuyDiscountGift::default_instance_ = new Welfare_CS_BuyDiscountGift();
  DiscountItem::default_instance_ = new DiscountItem();
  Welfare_SC_BuyDiscountGift::default_instance_ = new Welfare_SC_BuyDiscountGift();
  Welfare_SC_DiscountGift::default_instance_ = new Welfare_SC_DiscountGift();
  Welfare_CS_QuerySignInfo::default_instance_ = new Welfare_CS_QuerySignInfo();
  Welfare_CS_SignToday::default_instance_ = new Welfare_CS_SignToday();
  Welfare_CS_SignSupply::default_instance_ = new Welfare_CS_SignSupply();
  Welfare_SC_UpdateSignInfo::default_instance_ = new Welfare_SC_UpdateSignInfo();
  Welfare_SC_SignToday::default_instance_ = new Welfare_SC_SignToday();
  Welfare_SC_SignSupply::default_instance_ = new Welfare_SC_SignSupply();
  Welfare_CS_SignTotal::default_instance_ = new Welfare_CS_SignTotal();
  Welfare_SC_SignTotal::default_instance_ = new Welfare_SC_SignTotal();
  Welfare_CS_QueryLotteryInfo::default_instance_ = new Welfare_CS_QueryLotteryInfo();
  Welfare_CS_DoLottery::default_instance_ = new Welfare_CS_DoLottery();
  Welfare_SC_UpdateLotteryInfo::default_instance_ = new Welfare_SC_UpdateLotteryInfo();
  Welfare_SC_DoLotteryBack::default_instance_ = new Welfare_SC_DoLotteryBack();
  Welfare_SC_UpdateWelfareRedPoint::default_instance_ = new Welfare_SC_UpdateWelfareRedPoint();
  SignData::default_instance_ = new SignData();
  LotteryData::default_instance_ = new LotteryData();
  OnlineData::default_instance_ = new OnlineData();
  SingleAwardData::default_instance_ = new SingleAwardData();
  HolidayInfo::default_instance_ = new HolidayInfo();
  LoginInfo::default_instance_ = new LoginInfo();
  GrowthFundInfo::default_instance_ = new GrowthFundInfo();
  DiamondGiftInfo::default_instance_ = new DiamondGiftInfo();
  DiamondGiftData::default_instance_ = new DiamondGiftData();
  Welfare_CS_QueryGrowthFund::default_instance_ = new Welfare_CS_QueryGrowthFund();
  Welfare_CS_DoGrowthFund::default_instance_ = new Welfare_CS_DoGrowthFund();
  Welfare_CS_QueryFirstCharge::default_instance_ = new Welfare_CS_QueryFirstCharge();
  Welfare_CS_DoFirstCharge::default_instance_ = new Welfare_CS_DoFirstCharge();
  Welfare_CS_QueryDiamondGift::default_instance_ = new Welfare_CS_QueryDiamondGift();
  Welfare_CS_DoDiamondGift::default_instance_ = new Welfare_CS_DoDiamondGift();
  Welfare_SC_QueryGrowthFund::default_instance_ = new Welfare_SC_QueryGrowthFund();
  Welfare_SC_DoGrowthFund::default_instance_ = new Welfare_SC_DoGrowthFund();
  Welfare_SC_QueryFirstCharge::default_instance_ = new Welfare_SC_QueryFirstCharge();
  Welfare_SC_DoFirstCharge::default_instance_ = new Welfare_SC_DoFirstCharge();
  Welfare_SC_QueryDiamondGift::default_instance_ = new Welfare_SC_QueryDiamondGift();
  Welfare_SC_DoDiamondGift::default_instance_ = new Welfare_SC_DoDiamondGift();
  OpenInfo::default_instance_ = new OpenInfo();
  Welfare_SC_UpdateOpenInfo::default_instance_ = new Welfare_SC_UpdateOpenInfo();
  Welfare_CS_QueryGrowthLevel::default_instance_ = new Welfare_CS_QueryGrowthLevel();
  Welfare_CS_DoGrowthLevel::default_instance_ = new Welfare_CS_DoGrowthLevel();
  GrowthLevelInfo::default_instance_ = new GrowthLevelInfo();
  Welfare_SC_QueryGrowthLevel::default_instance_ = new Welfare_SC_QueryGrowthLevel();
  Welfare_SC_DoGrowthLevel::default_instance_ = new Welfare_SC_DoGrowthLevel();
  LevelAward::default_instance_ = new LevelAward();
  Welfare_CS_QueryLevelAward::default_instance_ = new Welfare_CS_QueryLevelAward();
  Welfare_SC_QueryLevelAward::default_instance_ = new Welfare_SC_QueryLevelAward();
  Welfare_CS_DoLevelAward::default_instance_ = new Welfare_CS_DoLevelAward();
  Welfare_SC_DoLevelAward::default_instance_ = new Welfare_SC_DoLevelAward();
  Welfare_CS_DoOnlineAward::default_instance_->InitAsDefaultInstance();
  Welfare_CS_QueryOnlineAward::default_instance_->InitAsDefaultInstance();
  Welfare_SC_DoOnlineAward::default_instance_->InitAsDefaultInstance();
  SingleOnlineAward::default_instance_->InitAsDefaultInstance();
  Welfare_SC_QueryOnlineAward::default_instance_->InitAsDefaultInstance();
  Welfare_CS_QueryHolidayAward::default_instance_->InitAsDefaultInstance();
  Welfare_SC_QueryHolidayAward::default_instance_->InitAsDefaultInstance();
  Welfare_CS_DoHolidayAward::default_instance_->InitAsDefaultInstance();
  Welfare_SC_DoHolidayAward::default_instance_->InitAsDefaultInstance();
  Welfare_CS_QueryLoginAward::default_instance_->InitAsDefaultInstance();
  Welfare_SC_QueryLoginAward::default_instance_->InitAsDefaultInstance();
  Welfare_CS_DoLoginAward::default_instance_->InitAsDefaultInstance();
  Welfare_SC_DoLoginAward::default_instance_->InitAsDefaultInstance();
  Welfare_CS_GetWeekDiscount::default_instance_->InitAsDefaultInstance();
  WeekDiscountItem::default_instance_->InitAsDefaultInstance();
  Welfare_SC_GetWeekDiscount::default_instance_->InitAsDefaultInstance();
  Welfare_CS_BuyDiscountGift::default_instance_->InitAsDefaultInstance();
  DiscountItem::default_instance_->InitAsDefaultInstance();
  Welfare_SC_BuyDiscountGift::default_instance_->InitAsDefaultInstance();
  Welfare_SC_DiscountGift::default_instance_->InitAsDefaultInstance();
  Welfare_CS_QuerySignInfo::default_instance_->InitAsDefaultInstance();
  Welfare_CS_SignToday::default_instance_->InitAsDefaultInstance();
  Welfare_CS_SignSupply::default_instance_->InitAsDefaultInstance();
  Welfare_SC_UpdateSignInfo::default_instance_->InitAsDefaultInstance();
  Welfare_SC_SignToday::default_instance_->InitAsDefaultInstance();
  Welfare_SC_SignSupply::default_instance_->InitAsDefaultInstance();
  Welfare_CS_SignTotal::default_instance_->InitAsDefaultInstance();
  Welfare_SC_SignTotal::default_instance_->InitAsDefaultInstance();
  Welfare_CS_QueryLotteryInfo::default_instance_->InitAsDefaultInstance();
  Welfare_CS_DoLottery::default_instance_->InitAsDefaultInstance();
  Welfare_SC_UpdateLotteryInfo::default_instance_->InitAsDefaultInstance();
  Welfare_SC_DoLotteryBack::default_instance_->InitAsDefaultInstance();
  Welfare_SC_UpdateWelfareRedPoint::default_instance_->InitAsDefaultInstance();
  SignData::default_instance_->InitAsDefaultInstance();
  LotteryData::default_instance_->InitAsDefaultInstance();
  OnlineData::default_instance_->InitAsDefaultInstance();
  SingleAwardData::default_instance_->InitAsDefaultInstance();
  HolidayInfo::default_instance_->InitAsDefaultInstance();
  LoginInfo::default_instance_->InitAsDefaultInstance();
  GrowthFundInfo::default_instance_->InitAsDefaultInstance();
  DiamondGiftInfo::default_instance_->InitAsDefaultInstance();
  DiamondGiftData::default_instance_->InitAsDefaultInstance();
  Welfare_CS_QueryGrowthFund::default_instance_->InitAsDefaultInstance();
  Welfare_CS_DoGrowthFund::default_instance_->InitAsDefaultInstance();
  Welfare_CS_QueryFirstCharge::default_instance_->InitAsDefaultInstance();
  Welfare_CS_DoFirstCharge::default_instance_->InitAsDefaultInstance();
  Welfare_CS_QueryDiamondGift::default_instance_->InitAsDefaultInstance();
  Welfare_CS_DoDiamondGift::default_instance_->InitAsDefaultInstance();
  Welfare_SC_QueryGrowthFund::default_instance_->InitAsDefaultInstance();
  Welfare_SC_DoGrowthFund::default_instance_->InitAsDefaultInstance();
  Welfare_SC_QueryFirstCharge::default_instance_->InitAsDefaultInstance();
  Welfare_SC_DoFirstCharge::default_instance_->InitAsDefaultInstance();
  Welfare_SC_QueryDiamondGift::default_instance_->InitAsDefaultInstance();
  Welfare_SC_DoDiamondGift::default_instance_->InitAsDefaultInstance();
  OpenInfo::default_instance_->InitAsDefaultInstance();
  Welfare_SC_UpdateOpenInfo::default_instance_->InitAsDefaultInstance();
  Welfare_CS_QueryGrowthLevel::default_instance_->InitAsDefaultInstance();
  Welfare_CS_DoGrowthLevel::default_instance_->InitAsDefaultInstance();
  GrowthLevelInfo::default_instance_->InitAsDefaultInstance();
  Welfare_SC_QueryGrowthLevel::default_instance_->InitAsDefaultInstance();
  Welfare_SC_DoGrowthLevel::default_instance_->InitAsDefaultInstance();
  LevelAward::default_instance_->InitAsDefaultInstance();
  Welfare_CS_QueryLevelAward::default_instance_->InitAsDefaultInstance();
  Welfare_SC_QueryLevelAward::default_instance_->InitAsDefaultInstance();
  Welfare_CS_DoLevelAward::default_instance_->InitAsDefaultInstance();
  Welfare_SC_DoLevelAward::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_welfare_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_welfare_2eproto {
  StaticDescriptorInitializer_welfare_2eproto() {
    protobuf_AddDesc_welfare_2eproto();
  }
} static_descriptor_initializer_welfare_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Welfare_CS_DoOnlineAward::kIdFieldNumber;
#endif  // !_MSC_VER

Welfare_CS_DoOnlineAward::Welfare_CS_DoOnlineAward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Welfare_CS_DoOnlineAward::InitAsDefaultInstance() {
}

Welfare_CS_DoOnlineAward::Welfare_CS_DoOnlineAward(const Welfare_CS_DoOnlineAward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Welfare_CS_DoOnlineAward::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Welfare_CS_DoOnlineAward::~Welfare_CS_DoOnlineAward() {
  SharedDtor();
}

void Welfare_CS_DoOnlineAward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Welfare_CS_DoOnlineAward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Welfare_CS_DoOnlineAward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Welfare_CS_DoOnlineAward_descriptor_;
}

const Welfare_CS_DoOnlineAward& Welfare_CS_DoOnlineAward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_welfare_2eproto();
  return *default_instance_;
}

Welfare_CS_DoOnlineAward* Welfare_CS_DoOnlineAward::default_instance_ = NULL;

Welfare_CS_DoOnlineAward* Welfare_CS_DoOnlineAward::New() const {
  return new Welfare_CS_DoOnlineAward;
}

void Welfare_CS_DoOnlineAward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Welfare_CS_DoOnlineAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Welfare_CS_DoOnlineAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Welfare_CS_DoOnlineAward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Welfare_CS_DoOnlineAward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Welfare_CS_DoOnlineAward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Welfare_CS_DoOnlineAward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Welfare_CS_DoOnlineAward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Welfare_CS_DoOnlineAward::MergeFrom(const Welfare_CS_DoOnlineAward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Welfare_CS_DoOnlineAward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Welfare_CS_DoOnlineAward::CopyFrom(const Welfare_CS_DoOnlineAward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Welfare_CS_DoOnlineAward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Welfare_CS_DoOnlineAward::Swap(Welfare_CS_DoOnlineAward* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Welfare_CS_DoOnlineAward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Welfare_CS_DoOnlineAward_descriptor_;
  metadata.reflection = Welfare_CS_DoOnlineAward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Welfare_CS_QueryOnlineAward::Welfare_CS_QueryOnlineAward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Welfare_CS_QueryOnlineAward::InitAsDefaultInstance() {
}

Welfare_CS_QueryOnlineAward::Welfare_CS_QueryOnlineAward(const Welfare_CS_QueryOnlineAward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Welfare_CS_QueryOnlineAward::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Welfare_CS_QueryOnlineAward::~Welfare_CS_QueryOnlineAward() {
  SharedDtor();
}

void Welfare_CS_QueryOnlineAward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Welfare_CS_QueryOnlineAward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Welfare_CS_QueryOnlineAward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Welfare_CS_QueryOnlineAward_descriptor_;
}

const Welfare_CS_QueryOnlineAward& Welfare_CS_QueryOnlineAward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_welfare_2eproto();
  return *default_instance_;
}

Welfare_CS_QueryOnlineAward* Welfare_CS_QueryOnlineAward::default_instance_ = NULL;

Welfare_CS_QueryOnlineAward* Welfare_CS_QueryOnlineAward::New() const {
  return new Welfare_CS_QueryOnlineAward;
}

void Welfare_CS_QueryOnlineAward::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Welfare_CS_QueryOnlineAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Welfare_CS_QueryOnlineAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Welfare_CS_QueryOnlineAward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Welfare_CS_QueryOnlineAward::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Welfare_CS_QueryOnlineAward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Welfare_CS_QueryOnlineAward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Welfare_CS_QueryOnlineAward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Welfare_CS_QueryOnlineAward::MergeFrom(const Welfare_CS_QueryOnlineAward& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Welfare_CS_QueryOnlineAward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Welfare_CS_QueryOnlineAward::CopyFrom(const Welfare_CS_QueryOnlineAward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Welfare_CS_QueryOnlineAward::IsInitialized() const {

  return true;
}

void Welfare_CS_QueryOnlineAward::Swap(Welfare_CS_QueryOnlineAward* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Welfare_CS_QueryOnlineAward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Welfare_CS_QueryOnlineAward_descriptor_;
  metadata.reflection = Welfare_CS_QueryOnlineAward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Welfare_SC_DoOnlineAward::kResultFieldNumber;
const int Welfare_SC_DoOnlineAward::kItemListFieldNumber;
#endif  // !_MSC_VER

Welfare_SC_DoOnlineAward::Welfare_SC_DoOnlineAward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Welfare_SC_DoOnlineAward::InitAsDefaultInstance() {
  item_list_ = const_cast< ::proto::message::DropItemNum*>(&::proto::message::DropItemNum::default_instance());
}

Welfare_SC_DoOnlineAward::Welfare_SC_DoOnlineAward(const Welfare_SC_DoOnlineAward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Welfare_SC_DoOnlineAward::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  item_list_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Welfare_SC_DoOnlineAward::~Welfare_SC_DoOnlineAward() {
  SharedDtor();
}

void Welfare_SC_DoOnlineAward::SharedDtor() {
  if (this != default_instance_) {
    delete item_list_;
  }
}

void Welfare_SC_DoOnlineAward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Welfare_SC_DoOnlineAward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Welfare_SC_DoOnlineAward_descriptor_;
}

const Welfare_SC_DoOnlineAward& Welfare_SC_DoOnlineAward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_welfare_2eproto();
  return *default_instance_;
}

Welfare_SC_DoOnlineAward* Welfare_SC_DoOnlineAward::default_instance_ = NULL;

Welfare_SC_DoOnlineAward* Welfare_SC_DoOnlineAward::New() const {
  return new Welfare_SC_DoOnlineAward;
}

void Welfare_SC_DoOnlineAward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
    if (has_item_list()) {
      if (item_list_ != NULL) item_list_->::proto::message::DropItemNum::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Welfare_SC_DoOnlineAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item_list;
        break;
      }

      // required .proto.message.DropItemNum item_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Welfare_SC_DoOnlineAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  // required .proto.message.DropItemNum item_list = 2;
  if (has_item_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item_list(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Welfare_SC_DoOnlineAward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  // required .proto.message.DropItemNum item_list = 2;
  if (has_item_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item_list(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Welfare_SC_DoOnlineAward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // required .proto.message.DropItemNum item_list = 2;
    if (has_item_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item_list());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Welfare_SC_DoOnlineAward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Welfare_SC_DoOnlineAward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Welfare_SC_DoOnlineAward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Welfare_SC_DoOnlineAward::MergeFrom(const Welfare_SC_DoOnlineAward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_item_list()) {
      mutable_item_list()->::proto::message::DropItemNum::MergeFrom(from.item_list());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Welfare_SC_DoOnlineAward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Welfare_SC_DoOnlineAward::CopyFrom(const Welfare_SC_DoOnlineAward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Welfare_SC_DoOnlineAward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Welfare_SC_DoOnlineAward::Swap(Welfare_SC_DoOnlineAward* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(item_list_, other->item_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Welfare_SC_DoOnlineAward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Welfare_SC_DoOnlineAward_descriptor_;
  metadata.reflection = Welfare_SC_DoOnlineAward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SingleOnlineAward::kIdFieldNumber;
const int SingleOnlineAward::kOnlineawardstatusFieldNumber;
#endif  // !_MSC_VER

SingleOnlineAward::SingleOnlineAward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SingleOnlineAward::InitAsDefaultInstance() {
}

SingleOnlineAward::SingleOnlineAward(const SingleOnlineAward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SingleOnlineAward::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  onlineawardstatus_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SingleOnlineAward::~SingleOnlineAward() {
  SharedDtor();
}

void SingleOnlineAward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SingleOnlineAward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SingleOnlineAward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SingleOnlineAward_descriptor_;
}

const SingleOnlineAward& SingleOnlineAward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_welfare_2eproto();
  return *default_instance_;
}

SingleOnlineAward* SingleOnlineAward::default_instance_ = NULL;

SingleOnlineAward* SingleOnlineAward::New() const {
  return new SingleOnlineAward;
}

void SingleOnlineAward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    onlineawardstatus_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SingleOnlineAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_onlineawardstatus;
        break;
      }

      // required int32 onlineawardstatus = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_onlineawardstatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &onlineawardstatus_)));
          set_has_onlineawardstatus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SingleOnlineAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 onlineawardstatus = 2;
  if (has_onlineawardstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->onlineawardstatus(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SingleOnlineAward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 onlineawardstatus = 2;
  if (has_onlineawardstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->onlineawardstatus(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SingleOnlineAward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 onlineawardstatus = 2;
    if (has_onlineawardstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->onlineawardstatus());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SingleOnlineAward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SingleOnlineAward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SingleOnlineAward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SingleOnlineAward::MergeFrom(const SingleOnlineAward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_onlineawardstatus()) {
      set_onlineawardstatus(from.onlineawardstatus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SingleOnlineAward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleOnlineAward::CopyFrom(const SingleOnlineAward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleOnlineAward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SingleOnlineAward::Swap(SingleOnlineAward* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(onlineawardstatus_, other->onlineawardstatus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SingleOnlineAward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SingleOnlineAward_descriptor_;
  metadata.reflection = SingleOnlineAward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Welfare_SC_QueryOnlineAward::kTodaySecFieldNumber;
const int Welfare_SC_QueryOnlineAward::kAwardsFieldNumber;
#endif  // !_MSC_VER

Welfare_SC_QueryOnlineAward::Welfare_SC_QueryOnlineAward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Welfare_SC_QueryOnlineAward::InitAsDefaultInstance() {
}

Welfare_SC_QueryOnlineAward::Welfare_SC_QueryOnlineAward(const Welfare_SC_QueryOnlineAward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Welfare_SC_QueryOnlineAward::SharedCtor() {
  _cached_size_ = 0;
  todaysec_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Welfare_SC_QueryOnlineAward::~Welfare_SC_QueryOnlineAward() {
  SharedDtor();
}

void Welfare_SC_QueryOnlineAward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Welfare_SC_QueryOnlineAward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Welfare_SC_QueryOnlineAward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Welfare_SC_QueryOnlineAward_descriptor_;
}

const Welfare_SC_QueryOnlineAward& Welfare_SC_QueryOnlineAward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_welfare_2eproto();
  return *default_instance_;
}

Welfare_SC_QueryOnlineAward* Welfare_SC_QueryOnlineAward::default_instance_ = NULL;

Welfare_SC_QueryOnlineAward* Welfare_SC_QueryOnlineAward::New() const {
  return new Welfare_SC_QueryOnlineAward;
}

void Welfare_SC_QueryOnlineAward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    todaysec_ = 0;
  }
  awards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Welfare_SC_QueryOnlineAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 todaySec = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &todaysec_)));
          set_has_todaysec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_awards;
        break;
      }

      // repeated .proto.message.SingleOnlineAward awards = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_awards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_awards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_awards;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Welfare_SC_QueryOnlineAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 todaySec = 1;
  if (has_todaysec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->todaysec(), output);
  }

  // repeated .proto.message.SingleOnlineAward awards = 2;
  for (int i = 0; i < this->awards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->awards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Welfare_SC_QueryOnlineAward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 todaySec = 1;
  if (has_todaysec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->todaysec(), target);
  }

  // repeated .proto.message.SingleOnlineAward awards = 2;
  for (int i = 0; i < this->awards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->awards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Welfare_SC_QueryOnlineAward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 todaySec = 1;
    if (has_todaysec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->todaysec());
    }

  }
  // repeated .proto.message.SingleOnlineAward awards = 2;
  total_size += 1 * this->awards_size();
  for (int i = 0; i < this->awards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->awards(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Welfare_SC_QueryOnlineAward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Welfare_SC_QueryOnlineAward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Welfare_SC_QueryOnlineAward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Welfare_SC_QueryOnlineAward::MergeFrom(const Welfare_SC_QueryOnlineAward& from) {
  GOOGLE_CHECK_NE(&from, this);
  awards_.MergeFrom(from.awards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_todaysec()) {
      set_todaysec(from.todaysec());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Welfare_SC_QueryOnlineAward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Welfare_SC_QueryOnlineAward::CopyFrom(const Welfare_SC_QueryOnlineAward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Welfare_SC_QueryOnlineAward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < awards_size(); i++) {
    if (!this->awards(i).IsInitialized()) return false;
  }
  return true;
}

void Welfare_SC_QueryOnlineAward::Swap(Welfare_SC_QueryOnlineAward* other) {
  if (other != this) {
    std::swap(todaysec_, other->todaysec_);
    awards_.Swap(&other->awards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Welfare_SC_QueryOnlineAward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Welfare_SC_QueryOnlineAward_descriptor_;
  metadata.reflection = Welfare_SC_QueryOnlineAward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Welfare_CS_QueryHolidayAward::Welfare_CS_QueryHolidayAward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Welfare_CS_QueryHolidayAward::InitAsDefaultInstance() {
}

Welfare_CS_QueryHolidayAward::Welfare_CS_QueryHolidayAward(const Welfare_CS_QueryHolidayAward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Welfare_CS_QueryHolidayAward::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Welfare_CS_QueryHolidayAward::~Welfare_CS_QueryHolidayAward() {
  SharedDtor();
}

void Welfare_CS_QueryHolidayAward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Welfare_CS_QueryHolidayAward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Welfare_CS_QueryHolidayAward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Welfare_CS_QueryHolidayAward_descriptor_;
}

const Welfare_CS_QueryHolidayAward& Welfare_CS_QueryHolidayAward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_welfare_2eproto();
  return *default_instance_;
}

Welfare_CS_QueryHolidayAward* Welfare_CS_QueryHolidayAward::default_instance_ = NULL;

Welfare_CS_QueryHolidayAward* Welfare_CS_QueryHolidayAward::New() const {
  return new Welfare_CS_QueryHolidayAward;
}

void Welfare_CS_QueryHolidayAward::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Welfare_CS_QueryHolidayAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Welfare_CS_QueryHolidayAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Welfare_CS_QueryHolidayAward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Welfare_CS_QueryHolidayAward::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Welfare_CS_QueryHolidayAward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Welfare_CS_QueryHolidayAward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Welfare_CS_QueryHolidayAward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Welfare_CS_QueryHolidayAward::MergeFrom(const Welfare_CS_QueryHolidayAward& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Welfare_CS_QueryHolidayAward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Welfare_CS_QueryHolidayAward::CopyFrom(const Welfare_CS_QueryHolidayAward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Welfare_CS_QueryHolidayAward::IsInitialized() const {

  return true;
}

void Welfare_CS_QueryHolidayAward::Swap(Welfare_CS_QueryHolidayAward* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Welfare_CS_QueryHolidayAward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Welfare_CS_QueryHolidayAward_descriptor_;
  metadata.reflection = Welfare_CS_QueryHolidayAward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Welfare_SC_QueryHolidayAward::kNowtickFieldNumber;
const int Welfare_SC_QueryHolidayAward::kInfoFieldNumber;
#endif  // !_MSC_VER

Welfare_SC_QueryHolidayAward::Welfare_SC_QueryHolidayAward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Welfare_SC_QueryHolidayAward::InitAsDefaultInstance() {
}

Welfare_SC_QueryHolidayAward::Welfare_SC_QueryHolidayAward(const Welfare_SC_QueryHolidayAward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Welfare_SC_QueryHolidayAward::SharedCtor() {
  _cached_size_ = 0;
  nowtick_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Welfare_SC_QueryHolidayAward::~Welfare_SC_QueryHolidayAward() {
  SharedDtor();
}

void Welfare_SC_QueryHolidayAward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Welfare_SC_QueryHolidayAward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Welfare_SC_QueryHolidayAward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Welfare_SC_QueryHolidayAward_descriptor_;
}

const Welfare_SC_QueryHolidayAward& Welfare_SC_QueryHolidayAward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_welfare_2eproto();
  return *default_instance_;
}

Welfare_SC_QueryHolidayAward* Welfare_SC_QueryHolidayAward::default_instance_ = NULL;

Welfare_SC_QueryHolidayAward* Welfare_SC_QueryHolidayAward::New() const {
  return new Welfare_SC_QueryHolidayAward;
}

void Welfare_SC_QueryHolidayAward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nowtick_ = 0u;
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Welfare_SC_QueryHolidayAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 nowtick = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nowtick_)));
          set_has_nowtick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // repeated .proto.message.HolidayInfo info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Welfare_SC_QueryHolidayAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 nowtick = 1;
  if (has_nowtick()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->nowtick(), output);
  }

  // repeated .proto.message.HolidayInfo info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Welfare_SC_QueryHolidayAward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 nowtick = 1;
  if (has_nowtick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->nowtick(), target);
  }

  // repeated .proto.message.HolidayInfo info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Welfare_SC_QueryHolidayAward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 nowtick = 1;
    if (has_nowtick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nowtick());
    }

  }
  // repeated .proto.message.HolidayInfo info = 2;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Welfare_SC_QueryHolidayAward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Welfare_SC_QueryHolidayAward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Welfare_SC_QueryHolidayAward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Welfare_SC_QueryHolidayAward::MergeFrom(const Welfare_SC_QueryHolidayAward& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nowtick()) {
      set_nowtick(from.nowtick());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Welfare_SC_QueryHolidayAward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Welfare_SC_QueryHolidayAward::CopyFrom(const Welfare_SC_QueryHolidayAward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Welfare_SC_QueryHolidayAward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < info_size(); i++) {
    if (!this->info(i).IsInitialized()) return false;
  }
  return true;
}

void Welfare_SC_QueryHolidayAward::Swap(Welfare_SC_QueryHolidayAward* other) {
  if (other != this) {
    std::swap(nowtick_, other->nowtick_);
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Welfare_SC_QueryHolidayAward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Welfare_SC_QueryHolidayAward_descriptor_;
  metadata.reflection = Welfare_SC_QueryHolidayAward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Welfare_CS_DoHolidayAward::kIdFieldNumber;
#endif  // !_MSC_VER

Welfare_CS_DoHolidayAward::Welfare_CS_DoHolidayAward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Welfare_CS_DoHolidayAward::InitAsDefaultInstance() {
}

Welfare_CS_DoHolidayAward::Welfare_CS_DoHolidayAward(const Welfare_CS_DoHolidayAward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Welfare_CS_DoHolidayAward::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Welfare_CS_DoHolidayAward::~Welfare_CS_DoHolidayAward() {
  SharedDtor();
}

void Welfare_CS_DoHolidayAward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Welfare_CS_DoHolidayAward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Welfare_CS_DoHolidayAward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Welfare_CS_DoHolidayAward_descriptor_;
}

const Welfare_CS_DoHolidayAward& Welfare_CS_DoHolidayAward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_welfare_2eproto();
  return *default_instance_;
}

Welfare_CS_DoHolidayAward* Welfare_CS_DoHolidayAward::default_instance_ = NULL;

Welfare_CS_DoHolidayAward* Welfare_CS_DoHolidayAward::New() const {
  return new Welfare_CS_DoHolidayAward;
}

void Welfare_CS_DoHolidayAward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Welfare_CS_DoHolidayAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Welfare_CS_DoHolidayAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Welfare_CS_DoHolidayAward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Welfare_CS_DoHolidayAward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Welfare_CS_DoHolidayAward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Welfare_CS_DoHolidayAward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Welfare_CS_DoHolidayAward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Welfare_CS_DoHolidayAward::MergeFrom(const Welfare_CS_DoHolidayAward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Welfare_CS_DoHolidayAward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Welfare_CS_DoHolidayAward::CopyFrom(const Welfare_CS_DoHolidayAward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Welfare_CS_DoHolidayAward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Welfare_CS_DoHolidayAward::Swap(Welfare_CS_DoHolidayAward* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Welfare_CS_DoHolidayAward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Welfare_CS_DoHolidayAward_descriptor_;
  metadata.reflection = Welfare_CS_DoHolidayAward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Welfare_SC_DoHolidayAward::kResultFieldNumber;
const int Welfare_SC_DoHolidayAward::kIdFieldNumber;
const int Welfare_SC_DoHolidayAward::kAwardstatusFieldNumber;
#endif  // !_MSC_VER

Welfare_SC_DoHolidayAward::Welfare_SC_DoHolidayAward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Welfare_SC_DoHolidayAward::InitAsDefaultInstance() {
}

Welfare_SC_DoHolidayAward::Welfare_SC_DoHolidayAward(const Welfare_SC_DoHolidayAward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Welfare_SC_DoHolidayAward::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  id_ = 0u;
  awardstatus_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Welfare_SC_DoHolidayAward::~Welfare_SC_DoHolidayAward() {
  SharedDtor();
}

void Welfare_SC_DoHolidayAward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Welfare_SC_DoHolidayAward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Welfare_SC_DoHolidayAward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Welfare_SC_DoHolidayAward_descriptor_;
}

const Welfare_SC_DoHolidayAward& Welfare_SC_DoHolidayAward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_welfare_2eproto();
  return *default_instance_;
}

Welfare_SC_DoHolidayAward* Welfare_SC_DoHolidayAward::default_instance_ = NULL;

Welfare_SC_DoHolidayAward* Welfare_SC_DoHolidayAward::New() const {
  return new Welfare_SC_DoHolidayAward;
}

void Welfare_SC_DoHolidayAward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
    id_ = 0u;
    awardstatus_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Welfare_SC_DoHolidayAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // required uint32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_awardstatus;
        break;
      }

      // required int32 awardstatus = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_awardstatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &awardstatus_)));
          set_has_awardstatus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Welfare_SC_DoHolidayAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  // required uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // required int32 awardstatus = 3;
  if (has_awardstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->awardstatus(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Welfare_SC_DoHolidayAward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  // required uint32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  // required int32 awardstatus = 3;
  if (has_awardstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->awardstatus(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Welfare_SC_DoHolidayAward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // required uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required int32 awardstatus = 3;
    if (has_awardstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->awardstatus());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Welfare_SC_DoHolidayAward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Welfare_SC_DoHolidayAward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Welfare_SC_DoHolidayAward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Welfare_SC_DoHolidayAward::MergeFrom(const Welfare_SC_DoHolidayAward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_awardstatus()) {
      set_awardstatus(from.awardstatus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Welfare_SC_DoHolidayAward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Welfare_SC_DoHolidayAward::CopyFrom(const Welfare_SC_DoHolidayAward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Welfare_SC_DoHolidayAward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Welfare_SC_DoHolidayAward::Swap(Welfare_SC_DoHolidayAward* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(id_, other->id_);
    std::swap(awardstatus_, other->awardstatus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Welfare_SC_DoHolidayAward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Welfare_SC_DoHolidayAward_descriptor_;
  metadata.reflection = Welfare_SC_DoHolidayAward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Welfare_CS_QueryLoginAward::Welfare_CS_QueryLoginAward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Welfare_CS_QueryLoginAward::InitAsDefaultInstance() {
}

Welfare_CS_QueryLoginAward::Welfare_CS_QueryLoginAward(const Welfare_CS_QueryLoginAward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Welfare_CS_QueryLoginAward::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Welfare_CS_QueryLoginAward::~Welfare_CS_QueryLoginAward() {
  SharedDtor();
}

void Welfare_CS_QueryLoginAward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Welfare_CS_QueryLoginAward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Welfare_CS_QueryLoginAward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Welfare_CS_QueryLoginAward_descriptor_;
}

const Welfare_CS_QueryLoginAward& Welfare_CS_QueryLoginAward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_welfare_2eproto();
  return *default_instance_;
}

Welfare_CS_QueryLoginAward* Welfare_CS_QueryLoginAward::default_instance_ = NULL;

Welfare_CS_QueryLoginAward* Welfare_CS_QueryLoginAward::New() const {
  return new Welfare_CS_QueryLoginAward;
}

void Welfare_CS_QueryLoginAward::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Welfare_CS_QueryLoginAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Welfare_CS_QueryLoginAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Welfare_CS_QueryLoginAward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Welfare_CS_QueryLoginAward::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Welfare_CS_QueryLoginAward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Welfare_CS_QueryLoginAward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Welfare_CS_QueryLoginAward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Welfare_CS_QueryLoginAward::MergeFrom(const Welfare_CS_QueryLoginAward& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Welfare_CS_QueryLoginAward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Welfare_CS_QueryLoginAward::CopyFrom(const Welfare_CS_QueryLoginAward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Welfare_CS_QueryLoginAward::IsInitialized() const {

  return true;
}

void Welfare_CS_QueryLoginAward::Swap(Welfare_CS_QueryLoginAward* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Welfare_CS_QueryLoginAward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Welfare_CS_QueryLoginAward_descriptor_;
  metadata.reflection = Welfare_CS_QueryLoginAward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Welfare_SC_QueryLoginAward::kDayindexFieldNumber;
const int Welfare_SC_QueryLoginAward::kInfoFieldNumber;
#endif  // !_MSC_VER

Welfare_SC_QueryLoginAward::Welfare_SC_QueryLoginAward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Welfare_SC_QueryLoginAward::InitAsDefaultInstance() {
}

Welfare_SC_QueryLoginAward::Welfare_SC_QueryLoginAward(const Welfare_SC_QueryLoginAward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Welfare_SC_QueryLoginAward::SharedCtor() {
  _cached_size_ = 0;
  dayindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Welfare_SC_QueryLoginAward::~Welfare_SC_QueryLoginAward() {
  SharedDtor();
}

void Welfare_SC_QueryLoginAward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Welfare_SC_QueryLoginAward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Welfare_SC_QueryLoginAward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Welfare_SC_QueryLoginAward_descriptor_;
}

const Welfare_SC_QueryLoginAward& Welfare_SC_QueryLoginAward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_welfare_2eproto();
  return *default_instance_;
}

Welfare_SC_QueryLoginAward* Welfare_SC_QueryLoginAward::default_instance_ = NULL;

Welfare_SC_QueryLoginAward* Welfare_SC_QueryLoginAward::New() const {
  return new Welfare_SC_QueryLoginAward;
}

void Welfare_SC_QueryLoginAward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dayindex_ = 0u;
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Welfare_SC_QueryLoginAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 dayindex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dayindex_)));
          set_has_dayindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // repeated .proto.message.LoginInfo info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Welfare_SC_QueryLoginAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 dayindex = 1;
  if (has_dayindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dayindex(), output);
  }

  // repeated .proto.message.LoginInfo info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Welfare_SC_QueryLoginAward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 dayindex = 1;
  if (has_dayindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dayindex(), target);
  }

  // repeated .proto.message.LoginInfo info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Welfare_SC_QueryLoginAward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 dayindex = 1;
    if (has_dayindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dayindex());
    }

  }
  // repeated .proto.message.LoginInfo info = 2;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Welfare_SC_QueryLoginAward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Welfare_SC_QueryLoginAward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Welfare_SC_QueryLoginAward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Welfare_SC_QueryLoginAward::MergeFrom(const Welfare_SC_QueryLoginAward& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dayindex()) {
      set_dayindex(from.dayindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Welfare_SC_QueryLoginAward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Welfare_SC_QueryLoginAward::CopyFrom(const Welfare_SC_QueryLoginAward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Welfare_SC_QueryLoginAward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < info_size(); i++) {
    if (!this->info(i).IsInitialized()) return false;
  }
  return true;
}

void Welfare_SC_QueryLoginAward::Swap(Welfare_SC_QueryLoginAward* other) {
  if (other != this) {
    std::swap(dayindex_, other->dayindex_);
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Welfare_SC_QueryLoginAward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Welfare_SC_QueryLoginAward_descriptor_;
  metadata.reflection = Welfare_SC_QueryLoginAward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Welfare_CS_DoLoginAward::kIdFieldNumber;
#endif  // !_MSC_VER

Welfare_CS_DoLoginAward::Welfare_CS_DoLoginAward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Welfare_CS_DoLoginAward::InitAsDefaultInstance() {
}

Welfare_CS_DoLoginAward::Welfare_CS_DoLoginAward(const Welfare_CS_DoLoginAward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Welfare_CS_DoLoginAward::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Welfare_CS_DoLoginAward::~Welfare_CS_DoLoginAward() {
  SharedDtor();
}

void Welfare_CS_DoLoginAward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Welfare_CS_DoLoginAward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Welfare_CS_DoLoginAward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Welfare_CS_DoLoginAward_descriptor_;
}

const Welfare_CS_DoLoginAward& Welfare_CS_DoLoginAward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_welfare_2eproto();
  return *default_instance_;
}

Welfare_CS_DoLoginAward* Welfare_CS_DoLoginAward::default_instance_ = NULL;

Welfare_CS_DoLoginAward* Welfare_CS_DoLoginAward::New() const {
  return new Welfare_CS_DoLoginAward;
}

void Welfare_CS_DoLoginAward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Welfare_CS_DoLoginAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Welfare_CS_DoLoginAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Welfare_CS_DoLoginAward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Welfare_CS_DoLoginAward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Welfare_CS_DoLoginAward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Welfare_CS_DoLoginAward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Welfare_CS_DoLoginAward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Welfare_CS_DoLoginAward::MergeFrom(const Welfare_CS_DoLoginAward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Welfare_CS_DoLoginAward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Welfare_CS_DoLoginAward::CopyFrom(const Welfare_CS_DoLoginAward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Welfare_CS_DoLoginAward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Welfare_CS_DoLoginAward::Swap(Welfare_CS_DoLoginAward* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Welfare_CS_DoLoginAward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Welfare_CS_DoLoginAward_descriptor_;
  metadata.reflection = Welfare_CS_DoLoginAward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Welfare_SC_DoLoginAward::kResultFieldNumber;
const int Welfare_SC_DoLoginAward::kIdFieldNumber;
const int Welfare_SC_DoLoginAward::kAwardstatusFieldNumber;
#endif  // !_MSC_VER

Welfare_SC_DoLoginAward::Welfare_SC_DoLoginAward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Welfare_SC_DoLoginAward::InitAsDefaultInstance() {
}

Welfare_SC_DoLoginAward::Welfare_SC_DoLoginAward(const Welfare_SC_DoLoginAward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Welfare_SC_DoLoginAward::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  id_ = 0u;
  awardstatus_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Welfare_SC_DoLoginAward::~Welfare_SC_DoLoginAward() {
  SharedDtor();
}

void Welfare_SC_DoLoginAward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Welfare_SC_DoLoginAward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Welfare_SC_DoLoginAward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Welfare_SC_DoLoginAward_descriptor_;
}

const Welfare_SC_DoLoginAward& Welfare_SC_DoLoginAward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_welfare_2eproto();
  return *default_instance_;
}

Welfare_SC_DoLoginAward* Welfare_SC_DoLoginAward::default_instance_ = NULL;

Welfare_SC_DoLoginAward* Welfare_SC_DoLoginAward::New() const {
  return new Welfare_SC_DoLoginAward;
}

void Welfare_SC_DoLoginAward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
    id_ = 0u;
    awardstatus_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Welfare_SC_DoLoginAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // required uint32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_awardstatus;
        break;
      }

      // required int32 awardstatus = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_awardstatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &awardstatus_)));
          set_has_awardstatus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Welfare_SC_DoLoginAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  // required uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // required int32 awardstatus = 3;
  if (has_awardstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->awardstatus(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Welfare_SC_DoLoginAward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  // required uint32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  // required int32 awardstatus = 3;
  if (has_awardstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->awardstatus(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Welfare_SC_DoLoginAward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // required uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required int32 awardstatus = 3;
    if (has_awardstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->awardstatus());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Welfare_SC_DoLoginAward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Welfare_SC_DoLoginAward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Welfare_SC_DoLoginAward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Welfare_SC_DoLoginAward::MergeFrom(const Welfare_SC_DoLoginAward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_awardstatus()) {
      set_awardstatus(from.awardstatus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Welfare_SC_DoLoginAward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Welfare_SC_DoLoginAward::CopyFrom(const Welfare_SC_DoLoginAward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Welfare_SC_DoLoginAward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Welfare_SC_DoLoginAward::Swap(Welfare_SC_DoLoginAward* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(id_, other->id_);
    std::swap(awardstatus_, other->awardstatus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Welfare_SC_DoLoginAward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Welfare_SC_DoLoginAward_descriptor_;
  metadata.reflection = Welfare_SC_DoLoginAward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Welfare_CS_GetWeekDiscount::Welfare_CS_GetWeekDiscount()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Welfare_CS_GetWeekDiscount::InitAsDefaultInstance() {
}

Welfare_CS_GetWeekDiscount::Welfare_CS_GetWeekDiscount(const Welfare_CS_GetWeekDiscount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Welfare_CS_GetWeekDiscount::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Welfare_CS_GetWeekDiscount::~Welfare_CS_GetWeekDiscount() {
  SharedDtor();
}

void Welfare_CS_GetWeekDiscount::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Welfare_CS_GetWeekDiscount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Welfare_CS_GetWeekDiscount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Welfare_CS_GetWeekDiscount_descriptor_;
}

const Welfare_CS_GetWeekDiscount& Welfare_CS_GetWeekDiscount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_welfare_2eproto();
  return *default_instance_;
}

Welfare_CS_GetWeekDiscount* Welfare_CS_GetWeekDiscount::default_instance_ = NULL;

Welfare_CS_GetWeekDiscount* Welfare_CS_GetWeekDiscount::New() const {
  return new Welfare_CS_GetWeekDiscount;
}

void Welfare_CS_GetWeekDiscount::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Welfare_CS_GetWeekDiscount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Welfare_CS_GetWeekDiscount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Welfare_CS_GetWeekDiscount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Welfare_CS_GetWeekDiscount::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Welfare_CS_GetWeekDiscount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Welfare_CS_GetWeekDiscount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Welfare_CS_GetWeekDiscount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Welfare_CS_GetWeekDiscount::MergeFrom(const Welfare_CS_GetWeekDiscount& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Welfare_CS_GetWeekDiscount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Welfare_CS_GetWeekDiscount::CopyFrom(const Welfare_CS_GetWeekDiscount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Welfare_CS_GetWeekDiscount::IsInitialized() const {

  return true;
}

void Welfare_CS_GetWeekDiscount::Swap(Welfare_CS_GetWeekDiscount* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Welfare_CS_GetWeekDiscount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Welfare_CS_GetWeekDiscount_descriptor_;
  metadata.reflection = Welfare_CS_GetWeekDiscount_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WeekDiscountItem::kProIdFieldNumber;
const int WeekDiscountItem::kPriceBefFieldNumber;
const int WeekDiscountItem::kPriceNowFieldNumber;
#endif  // !_MSC_VER

WeekDiscountItem::WeekDiscountItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WeekDiscountItem::InitAsDefaultInstance() {
}

WeekDiscountItem::WeekDiscountItem(const WeekDiscountItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WeekDiscountItem::SharedCtor() {
  _cached_size_ = 0;
  pro_id_ = 0;
  price_bef_ = 0;
  price_now_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WeekDiscountItem::~WeekDiscountItem() {
  SharedDtor();
}

void WeekDiscountItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WeekDiscountItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WeekDiscountItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WeekDiscountItem_descriptor_;
}

const WeekDiscountItem& WeekDiscountItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_welfare_2eproto();
  return *default_instance_;
}

WeekDiscountItem* WeekDiscountItem::default_instance_ = NULL;

WeekDiscountItem* WeekDiscountItem::New() const {
  return new WeekDiscountItem;
}

void WeekDiscountItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pro_id_ = 0;
    price_bef_ = 0;
    price_now_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WeekDiscountItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 pro_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pro_id_)));
          set_has_pro_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_price_bef;
        break;
      }

      // optional int32 price_bef = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price_bef:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_bef_)));
          set_has_price_bef();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_price_now;
        break;
      }

      // optional int32 price_now = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price_now:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_now_)));
          set_has_price_now();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WeekDiscountItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 pro_id = 1;
  if (has_pro_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pro_id(), output);
  }

  // optional int32 price_bef = 2;
  if (has_price_bef()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->price_bef(), output);
  }

  // optional int32 price_now = 3;
  if (has_price_now()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->price_now(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WeekDiscountItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 pro_id = 1;
  if (has_pro_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pro_id(), target);
  }

  // optional int32 price_bef = 2;
  if (has_price_bef()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->price_bef(), target);
  }

  // optional int32 price_now = 3;
  if (has_price_now()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->price_now(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WeekDiscountItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 pro_id = 1;
    if (has_pro_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pro_id());
    }

    // optional int32 price_bef = 2;
    if (has_price_bef()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price_bef());
    }

    // optional int32 price_now = 3;
    if (has_price_now()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price_now());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeekDiscountItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WeekDiscountItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WeekDiscountItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WeekDiscountItem::MergeFrom(const WeekDiscountItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pro_id()) {
      set_pro_id(from.pro_id());
    }
    if (from.has_price_bef()) {
      set_price_bef(from.price_bef());
    }
    if (from.has_price_now()) {
      set_price_now(from.price_now());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WeekDiscountItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeekDiscountItem::CopyFrom(const WeekDiscountItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeekDiscountItem::IsInitialized() const {

  return true;
}

void WeekDiscountItem::Swap(WeekDiscountItem* other) {
  if (other != this) {
    std::swap(pro_id_, other->pro_id_);
    std::swap(price_bef_, other->price_bef_);
    std::swap(price_now_, other->price_now_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WeekDiscountItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WeekDiscountItem_descriptor_;
  metadata.reflection = WeekDiscountItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Welfare_SC_GetWeekDiscount::kItemListFieldNumber;
#endif  // !_MSC_VER

Welfare_SC_GetWeekDiscount::Welfare_SC_GetWeekDiscount()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Welfare_SC_GetWeekDiscount::InitAsDefaultInstance() {
}

Welfare_SC_GetWeekDiscount::Welfare_SC_GetWeekDiscount(const Welfare_SC_GetWeekDiscount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Welfare_SC_GetWeekDiscount::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Welfare_SC_GetWeekDiscount::~Welfare_SC_GetWeekDiscount() {
  SharedDtor();
}

void Welfare_SC_GetWeekDiscount::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Welfare_SC_GetWeekDiscount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Welfare_SC_GetWeekDiscount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Welfare_SC_GetWeekDiscount_descriptor_;
}

const Welfare_SC_GetWeekDiscount& Welfare_SC_GetWeekDiscount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_welfare_2eproto();
  return *default_instance_;
}

Welfare_SC_GetWeekDiscount* Welfare_SC_GetWeekDiscount::default_instance_ = NULL;

Welfare_SC_GetWeekDiscount* Welfare_SC_GetWeekDiscount::New() const {
  return new Welfare_SC_GetWeekDiscount;
}

void Welfare_SC_GetWeekDiscount::Clear() {
  item_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Welfare_SC_GetWeekDiscount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.message.WeekDiscountItem item_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_item_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Welfare_SC_GetWeekDiscount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.message.WeekDiscountItem item_list = 1;
  for (int i = 0; i < this->item_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->item_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Welfare_SC_GetWeekDiscount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.message.WeekDiscountItem item_list = 1;
  for (int i = 0; i < this->item_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->item_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Welfare_SC_GetWeekDiscount::ByteSize() const {
  int total_size = 0;

  // repeated .proto.message.WeekDiscountItem item_list = 1;
  total_size += 1 * this->item_list_size();
  for (int i = 0; i < this->item_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Welfare_SC_GetWeekDiscount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Welfare_SC_GetWeekDiscount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Welfare_SC_GetWeekDiscount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Welfare_SC_GetWeekDiscount::MergeFrom(const Welfare_SC_GetWeekDiscount& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_list_.MergeFrom(from.item_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Welfare_SC_GetWeekDiscount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Welfare_SC_GetWeekDiscount::CopyFrom(const Welfare_SC_GetWeekDiscount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Welfare_SC_GetWeekDiscount::IsInitialized() const {

  return true;
}

void Welfare_SC_GetWeekDiscount::Swap(Welfare_SC_GetWeekDiscount* other) {
  if (other != this) {
    item_list_.Swap(&other->item_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Welfare_SC_GetWeekDiscount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Welfare_SC_GetWeekDiscount_descriptor_;
  metadata.reflection = Welfare_SC_GetWeekDiscount_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Welfare_CS_BuyDiscountGift::kProIdFieldNumber;
#endif  // !_MSC_VER

Welfare_CS_BuyDiscountGift::Welfare_CS_BuyDiscountGift()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Welfare_CS_BuyDiscountGift::InitAsDefaultInstance() {
}

Welfare_CS_BuyDiscountGift::Welfare_CS_BuyDiscountGift(const Welfare_CS_BuyDiscountGift& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Welfare_CS_BuyDiscountGift::SharedCtor() {
  _cached_size_ = 0;
  pro_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Welfare_CS_BuyDiscountGift::~Welfare_CS_BuyDiscountGift() {
  SharedDtor();
}

void Welfare_CS_BuyDiscountGift::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Welfare_CS_BuyDiscountGift::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Welfare_CS_BuyDiscountGift::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Welfare_CS_BuyDiscountGift_descriptor_;
}

const Welfare_CS_BuyDiscountGift& Welfare_CS_BuyDiscountGift::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_welfare_2eproto();
  return *default_instance_;
}

Welfare_CS_BuyDiscountGift* Welfare_CS_BuyDiscountGift::default_instance_ = NULL;

Welfare_CS_BuyDiscountGift* Welfare_CS_BuyDiscountGift::New() const {
  return new Welfare_CS_BuyDiscountGift;
}

void Welfare_CS_BuyDiscountGift::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pro_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Welfare_CS_BuyDiscountGift::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 pro_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pro_id_)));
          set_has_pro_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Welfare_CS_BuyDiscountGift::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 pro_id = 1;
  if (has_pro_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pro_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Welfare_CS_BuyDiscountGift::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 pro_id = 1;
  if (has_pro_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pro_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Welfare_CS_BuyDiscountGift::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 pro_id = 1;
    if (has_pro_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pro_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Welfare_CS_BuyDiscountGift::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Welfare_CS_BuyDiscountGift* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Welfare_CS_BuyDiscountGift*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Welfare_CS_BuyDiscountGift::MergeFrom(const Welfare_CS_BuyDiscountGift& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pro_id()) {
      set_pro_id(from.pro_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Welfare_CS_BuyDiscountGift::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Welfare_CS_BuyDiscountGift::CopyFrom(const Welfare_CS_BuyDiscountGift& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Welfare_CS_BuyDiscountGift::IsInitialized() const {

  return true;
}

void Welfare_CS_BuyDiscountGift::Swap(Welfare_CS_BuyDiscountGift* other) {
  if (other != this) {
    std::swap(pro_id_, other->pro_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Welfare_CS_BuyDiscountGift::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Welfare_CS_BuyDiscountGift_descriptor_;
  metadata.reflection = Welfare_CS_BuyDiscountGift_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DiscountItem::kProIdFieldNumber;
const int DiscountItem::kIsBuyFieldNumber;
#endif  // !_MSC_VER

DiscountItem::DiscountItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DiscountItem::InitAsDefaultInstance() {
}

DiscountItem::DiscountItem(const DiscountItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DiscountItem::SharedCtor() {
  _cached_size_ = 0;
  pro_id_ = 0;
  is_buy_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DiscountItem::~DiscountItem() {
  SharedDtor();
}

void DiscountItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DiscountItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DiscountItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DiscountItem_descriptor_;
}

const DiscountItem& DiscountItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_welfare_2eproto();
  return *default_instance_;
}

DiscountItem* DiscountItem::default_instance_ = NULL;

DiscountItem* DiscountItem::New() const {
  return new DiscountItem;
}

void DiscountItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pro_id_ = 0;
    is_buy_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DiscountItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 pro_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pro_id_)));
          set_has_pro_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_buy;
        break;
      }

      // optional int32 is_buy = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_buy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_buy_)));
          set_has_is_buy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DiscountItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 pro_id = 1;
  if (has_pro_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pro_id(), output);
  }

  // optional int32 is_buy = 2;
  if (has_is_buy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->is_buy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DiscountItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 pro_id = 1;
  if (has_pro_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pro_id(), target);
  }

  // optional int32 is_buy = 2;
  if (has_is_buy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->is_buy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DiscountItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 pro_id = 1;
    if (has_pro_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pro_id());
    }

    // optional int32 is_buy = 2;
    if (has_is_buy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_buy());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DiscountItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DiscountItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DiscountItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DiscountItem::MergeFrom(const DiscountItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pro_id()) {
      set_pro_id(from.pro_id());
    }
    if (from.has_is_buy()) {
      set_is_buy(from.is_buy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DiscountItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DiscountItem::CopyFrom(const DiscountItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiscountItem::IsInitialized() const {

  return true;
}

void DiscountItem::Swap(DiscountItem* other) {
  if (other != this) {
    std::swap(pro_id_, other->pro_id_);
    std::swap(is_buy_, other->is_buy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DiscountItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DiscountItem_descriptor_;
  metadata.reflection = DiscountItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Welfare_SC_BuyDiscountGift::kResultFieldNumber;
const int Welfare_SC_BuyDiscountGift::kDiscountGiftFieldNumber;
#endif  // !_MSC_VER

Welfare_SC_BuyDiscountGift::Welfare_SC_BuyDiscountGift()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Welfare_SC_BuyDiscountGift::InitAsDefaultInstance() {
  discount_gift_ = const_cast< ::proto::message::DiscountItem*>(&::proto::message::DiscountItem::default_instance());
}

Welfare_SC_BuyDiscountGift::Welfare_SC_BuyDiscountGift(const Welfare_SC_BuyDiscountGift& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Welfare_SC_BuyDiscountGift::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  discount_gift_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Welfare_SC_BuyDiscountGift::~Welfare_SC_BuyDiscountGift() {
  SharedDtor();
}

void Welfare_SC_BuyDiscountGift::SharedDtor() {
  if (this != default_instance_) {
    delete discount_gift_;
  }
}

void Welfare_SC_BuyDiscountGift::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Welfare_SC_BuyDiscountGift::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Welfare_SC_BuyDiscountGift_descriptor_;
}

const Welfare_SC_BuyDiscountGift& Welfare_SC_BuyDiscountGift::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_welfare_2eproto();
  return *default_instance_;
}

Welfare_SC_BuyDiscountGift* Welfare_SC_BuyDiscountGift::default_instance_ = NULL;

Welfare_SC_BuyDiscountGift* Welfare_SC_BuyDiscountGift::New() const {
  return new Welfare_SC_BuyDiscountGift;
}

void Welfare_SC_BuyDiscountGift::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_discount_gift()) {
      if (discount_gift_ != NULL) discount_gift_->::proto::message::DiscountItem::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Welfare_SC_BuyDiscountGift::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_discount_gift;
        break;
      }

      // optional .proto.message.DiscountItem discount_gift = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_discount_gift:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_discount_gift()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Welfare_SC_BuyDiscountGift::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .proto.message.DiscountItem discount_gift = 2;
  if (has_discount_gift()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->discount_gift(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Welfare_SC_BuyDiscountGift::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .proto.message.DiscountItem discount_gift = 2;
  if (has_discount_gift()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->discount_gift(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Welfare_SC_BuyDiscountGift::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .proto.message.DiscountItem discount_gift = 2;
    if (has_discount_gift()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->discount_gift());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Welfare_SC_BuyDiscountGift::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Welfare_SC_BuyDiscountGift* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Welfare_SC_BuyDiscountGift*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Welfare_SC_BuyDiscountGift::MergeFrom(const Welfare_SC_BuyDiscountGift& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_discount_gift()) {
      mutable_discount_gift()->::proto::message::DiscountItem::MergeFrom(from.discount_gift());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Welfare_SC_BuyDiscountGift::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Welfare_SC_BuyDiscountGift::CopyFrom(const Welfare_SC_BuyDiscountGift& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Welfare_SC_BuyDiscountGift::IsInitialized() const {

  return true;
}

void Welfare_SC_BuyDiscountGift::Swap(Welfare_SC_BuyDiscountGift* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(discount_gift_, other->discount_gift_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Welfare_SC_BuyDiscountGift::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Welfare_SC_BuyDiscountGift_descriptor_;
  metadata.reflection = Welfare_SC_BuyDiscountGift_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Welfare_SC_DiscountGift::kRemainTimeFieldNumber;
const int Welfare_SC_DiscountGift::kDiscountFieldNumber;
const int Welfare_SC_DiscountGift::kGiftListFieldNumber;
const int Welfare_SC_DiscountGift::kIsLoginFieldNumber;
#endif  // !_MSC_VER

Welfare_SC_DiscountGift::Welfare_SC_DiscountGift()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Welfare_SC_DiscountGift::InitAsDefaultInstance() {
}

Welfare_SC_DiscountGift::Welfare_SC_DiscountGift(const Welfare_SC_DiscountGift& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Welfare_SC_DiscountGift::SharedCtor() {
  _cached_size_ = 0;
  remain_time_ = 0;
  discount_ = 0;
  is_login_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Welfare_SC_DiscountGift::~Welfare_SC_DiscountGift() {
  SharedDtor();
}

void Welfare_SC_DiscountGift::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Welfare_SC_DiscountGift::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Welfare_SC_DiscountGift::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Welfare_SC_DiscountGift_descriptor_;
}

const Welfare_SC_DiscountGift& Welfare_SC_DiscountGift::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_welfare_2eproto();
  return *default_instance_;
}

Welfare_SC_DiscountGift* Welfare_SC_DiscountGift::default_instance_ = NULL;

Welfare_SC_DiscountGift* Welfare_SC_DiscountGift::New() const {
  return new Welfare_SC_DiscountGift;
}

void Welfare_SC_DiscountGift::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    remain_time_ = 0;
    discount_ = 0;
    is_login_ = 0;
  }
  gift_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Welfare_SC_DiscountGift::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 remain_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remain_time_)));
          set_has_remain_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_discount;
        break;
      }

      // optional int32 discount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_discount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &discount_)));
          set_has_discount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_gift_list;
        break;
      }

      // repeated .proto.message.DiscountItem gift_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gift_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gift_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_gift_list;
        if (input->ExpectTag(32)) goto parse_is_login;
        break;
      }

      // optional int32 is_login = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_login:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_login_)));
          set_has_is_login();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Welfare_SC_DiscountGift::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 remain_time = 1;
  if (has_remain_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->remain_time(), output);
  }

  // optional int32 discount = 2;
  if (has_discount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->discount(), output);
  }

  // repeated .proto.message.DiscountItem gift_list = 3;
  for (int i = 0; i < this->gift_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->gift_list(i), output);
  }

  // optional int32 is_login = 4;
  if (has_is_login()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->is_login(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Welfare_SC_DiscountGift::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 remain_time = 1;
  if (has_remain_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->remain_time(), target);
  }

  // optional int32 discount = 2;
  if (has_discount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->discount(), target);
  }

  // repeated .proto.message.DiscountItem gift_list = 3;
  for (int i = 0; i < this->gift_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->gift_list(i), target);
  }

  // optional int32 is_login = 4;
  if (has_is_login()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->is_login(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Welfare_SC_DiscountGift::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 remain_time = 1;
    if (has_remain_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->remain_time());
    }

    // optional int32 discount = 2;
    if (has_discount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->discount());
    }

    // optional int32 is_login = 4;
    if (has_is_login()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_login());
    }

  }
  // repeated .proto.message.DiscountItem gift_list = 3;
  total_size += 1 * this->gift_list_size();
  for (int i = 0; i < this->gift_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gift_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Welfare_SC_DiscountGift::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Welfare_SC_DiscountGift* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Welfare_SC_DiscountGift*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Welfare_SC_DiscountGift::MergeFrom(const Welfare_SC_DiscountGift& from) {
  GOOGLE_CHECK_NE(&from, this);
  gift_list_.MergeFrom(from.gift_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_remain_time()) {
      set_remain_time(from.remain_time());
    }
    if (from.has_discount()) {
      set_discount(from.discount());
    }
    if (from.has_is_login()) {
      set_is_login(from.is_login());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Welfare_SC_DiscountGift::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Welfare_SC_DiscountGift::CopyFrom(const Welfare_SC_DiscountGift& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Welfare_SC_DiscountGift::IsInitialized() const {

  return true;
}

void Welfare_SC_DiscountGift::Swap(Welfare_SC_DiscountGift* other) {
  if (other != this) {
    std::swap(remain_time_, other->remain_time_);
    std::swap(discount_, other->discount_);
    gift_list_.Swap(&other->gift_list_);
    std::swap(is_login_, other->is_login_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Welfare_SC_DiscountGift::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Welfare_SC_DiscountGift_descriptor_;
  metadata.reflection = Welfare_SC_DiscountGift_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Welfare_CS_QuerySignInfo::Welfare_CS_QuerySignInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Welfare_CS_QuerySignInfo::InitAsDefaultInstance() {
}

Welfare_CS_QuerySignInfo::Welfare_CS_QuerySignInfo(const Welfare_CS_QuerySignInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Welfare_CS_QuerySignInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Welfare_CS_QuerySignInfo::~Welfare_CS_QuerySignInfo() {
  SharedDtor();
}

void Welfare_CS_QuerySignInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Welfare_CS_QuerySignInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Welfare_CS_QuerySignInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Welfare_CS_QuerySignInfo_descriptor_;
}

const Welfare_CS_QuerySignInfo& Welfare_CS_QuerySignInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_welfare_2eproto();
  return *default_instance_;
}

Welfare_CS_QuerySignInfo* Welfare_CS_QuerySignInfo::default_instance_ = NULL;

Welfare_CS_QuerySignInfo* Welfare_CS_QuerySignInfo::New() const {
  return new Welfare_CS_QuerySignInfo;
}

void Welfare_CS_QuerySignInfo::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Welfare_CS_QuerySignInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Welfare_CS_QuerySignInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Welfare_CS_QuerySignInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Welfare_CS_QuerySignInfo::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Welfare_CS_QuerySignInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Welfare_CS_QuerySignInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Welfare_CS_QuerySignInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Welfare_CS_QuerySignInfo::MergeFrom(const Welfare_CS_QuerySignInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Welfare_CS_QuerySignInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Welfare_CS_QuerySignInfo::CopyFrom(const Welfare_CS_QuerySignInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Welfare_CS_QuerySignInfo::IsInitialized() const {

  return true;
}

void Welfare_CS_QuerySignInfo::Swap(Welfare_CS_QuerySignInfo* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Welfare_CS_QuerySignInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Welfare_CS_QuerySignInfo_descriptor_;
  metadata.reflection = Welfare_CS_QuerySignInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Welfare_CS_SignToday::kDayindexFieldNumber;
#endif  // !_MSC_VER

Welfare_CS_SignToday::Welfare_CS_SignToday()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Welfare_CS_SignToday::InitAsDefaultInstance() {
}

Welfare_CS_SignToday::Welfare_CS_SignToday(const Welfare_CS_SignToday& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Welfare_CS_SignToday::SharedCtor() {
  _cached_size_ = 0;
  dayindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Welfare_CS_SignToday::~Welfare_CS_SignToday() {
  SharedDtor();
}

void Welfare_CS_SignToday::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Welfare_CS_SignToday::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Welfare_CS_SignToday::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Welfare_CS_SignToday_descriptor_;
}

const Welfare_CS_SignToday& Welfare_CS_SignToday::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_welfare_2eproto();
  return *default_instance_;
}

Welfare_CS_SignToday* Welfare_CS_SignToday::default_instance_ = NULL;

Welfare_CS_SignToday* Welfare_CS_SignToday::New() const {
  return new Welfare_CS_SignToday;
}

void Welfare_CS_SignToday::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dayindex_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Welfare_CS_SignToday::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 dayindex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dayindex_)));
          set_has_dayindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Welfare_CS_SignToday::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 dayindex = 1;
  if (has_dayindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dayindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Welfare_CS_SignToday::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 dayindex = 1;
  if (has_dayindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dayindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Welfare_CS_SignToday::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 dayindex = 1;
    if (has_dayindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dayindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Welfare_CS_SignToday::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Welfare_CS_SignToday* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Welfare_CS_SignToday*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Welfare_CS_SignToday::MergeFrom(const Welfare_CS_SignToday& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dayindex()) {
      set_dayindex(from.dayindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Welfare_CS_SignToday::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Welfare_CS_SignToday::CopyFrom(const Welfare_CS_SignToday& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Welfare_CS_SignToday::IsInitialized() const {

  return true;
}

void Welfare_CS_SignToday::Swap(Welfare_CS_SignToday* other) {
  if (other != this) {
    std::swap(dayindex_, other->dayindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Welfare_CS_SignToday::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Welfare_CS_SignToday_descriptor_;
  metadata.reflection = Welfare_CS_SignToday_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Welfare_CS_SignSupply::kDayindexFieldNumber;
#endif  // !_MSC_VER

Welfare_CS_SignSupply::Welfare_CS_SignSupply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Welfare_CS_SignSupply::InitAsDefaultInstance() {
}

Welfare_CS_SignSupply::Welfare_CS_SignSupply(const Welfare_CS_SignSupply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Welfare_CS_SignSupply::SharedCtor() {
  _cached_size_ = 0;
  dayindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Welfare_CS_SignSupply::~Welfare_CS_SignSupply() {
  SharedDtor();
}

void Welfare_CS_SignSupply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Welfare_CS_SignSupply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Welfare_CS_SignSupply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Welfare_CS_SignSupply_descriptor_;
}

const Welfare_CS_SignSupply& Welfare_CS_SignSupply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_welfare_2eproto();
  return *default_instance_;
}

Welfare_CS_SignSupply* Welfare_CS_SignSupply::default_instance_ = NULL;

Welfare_CS_SignSupply* Welfare_CS_SignSupply::New() const {
  return new Welfare_CS_SignSupply;
}

void Welfare_CS_SignSupply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dayindex_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Welfare_CS_SignSupply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 dayindex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dayindex_)));
          set_has_dayindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Welfare_CS_SignSupply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 dayindex = 1;
  if (has_dayindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dayindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Welfare_CS_SignSupply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 dayindex = 1;
  if (has_dayindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dayindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Welfare_CS_SignSupply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 dayindex = 1;
    if (has_dayindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dayindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Welfare_CS_SignSupply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Welfare_CS_SignSupply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Welfare_CS_SignSupply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Welfare_CS_SignSupply::MergeFrom(const Welfare_CS_SignSupply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dayindex()) {
      set_dayindex(from.dayindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Welfare_CS_SignSupply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Welfare_CS_SignSupply::CopyFrom(const Welfare_CS_SignSupply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Welfare_CS_SignSupply::IsInitialized() const {

  return true;
}

void Welfare_CS_SignSupply::Swap(Welfare_CS_SignSupply* other) {
  if (other != this) {
    std::swap(dayindex_, other->dayindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Welfare_CS_SignSupply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Welfare_CS_SignSupply_descriptor_;
  metadata.reflection = Welfare_CS_SignSupply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Welfare_SC_UpdateSignInfo::kSigninfoFieldNumber;
const int Welfare_SC_UpdateSignInfo::kSignTotalinfoFieldNumber;
const int Welfare_SC_UpdateSignInfo::kIssigntodayFieldNumber;
const int Welfare_SC_UpdateSignInfo::kSignsupplytimeFieldNumber;
const int Welfare_SC_UpdateSignInfo::kSigntotalFieldNumber;
#endif  // !_MSC_VER

Welfare_SC_UpdateSignInfo::Welfare_SC_UpdateSignInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Welfare_SC_UpdateSignInfo::InitAsDefaultInstance() {
}

Welfare_SC_UpdateSignInfo::Welfare_SC_UpdateSignInfo(const Welfare_SC_UpdateSignInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Welfare_SC_UpdateSignInfo::SharedCtor() {
  _cached_size_ = 0;
  issigntoday_ = 0u;
  signsupplytime_ = 0u;
  signtotal_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Welfare_SC_UpdateSignInfo::~Welfare_SC_UpdateSignInfo() {
  SharedDtor();
}

void Welfare_SC_UpdateSignInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Welfare_SC_UpdateSignInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Welfare_SC_UpdateSignInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Welfare_SC_UpdateSignInfo_descriptor_;
}

const Welfare_SC_UpdateSignInfo& Welfare_SC_UpdateSignInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_welfare_2eproto();
  return *default_instance_;
}

Welfare_SC_UpdateSignInfo* Welfare_SC_UpdateSignInfo::default_instance_ = NULL;

Welfare_SC_UpdateSignInfo* Welfare_SC_UpdateSignInfo::New() const {
  return new Welfare_SC_UpdateSignInfo;
}

void Welfare_SC_UpdateSignInfo::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    issigntoday_ = 0u;
    signsupplytime_ = 0u;
    signtotal_ = 0u;
  }
  signinfo_.Clear();
  signtotalinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Welfare_SC_UpdateSignInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 signinfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_signinfo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_signinfo())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_signinfo())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_signinfo;
        if (input->ExpectTag(16)) goto parse_signTotalinfo;
        break;
      }

      // repeated int32 signTotalinfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_signTotalinfo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_signtotalinfo())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_signtotalinfo())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_signTotalinfo;
        if (input->ExpectTag(24)) goto parse_issigntoday;
        break;
      }

      // required uint32 issigntoday = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_issigntoday:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &issigntoday_)));
          set_has_issigntoday();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_signsupplytime;
        break;
      }

      // required uint32 signsupplytime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_signsupplytime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &signsupplytime_)));
          set_has_signsupplytime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_signtotal;
        break;
      }

      // required uint32 signtotal = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_signtotal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &signtotal_)));
          set_has_signtotal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Welfare_SC_UpdateSignInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 signinfo = 1;
  for (int i = 0; i < this->signinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->signinfo(i), output);
  }

  // repeated int32 signTotalinfo = 2;
  for (int i = 0; i < this->signtotalinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->signtotalinfo(i), output);
  }

  // required uint32 issigntoday = 3;
  if (has_issigntoday()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->issigntoday(), output);
  }

  // required uint32 signsupplytime = 5;
  if (has_signsupplytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->signsupplytime(), output);
  }

  // required uint32 signtotal = 6;
  if (has_signtotal()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->signtotal(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Welfare_SC_UpdateSignInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 signinfo = 1;
  for (int i = 0; i < this->signinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->signinfo(i), target);
  }

  // repeated int32 signTotalinfo = 2;
  for (int i = 0; i < this->signtotalinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->signtotalinfo(i), target);
  }

  // required uint32 issigntoday = 3;
  if (has_issigntoday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->issigntoday(), target);
  }

  // required uint32 signsupplytime = 5;
  if (has_signsupplytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->signsupplytime(), target);
  }

  // required uint32 signtotal = 6;
  if (has_signtotal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->signtotal(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Welfare_SC_UpdateSignInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // required uint32 issigntoday = 3;
    if (has_issigntoday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->issigntoday());
    }

    // required uint32 signsupplytime = 5;
    if (has_signsupplytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->signsupplytime());
    }

    // required uint32 signtotal = 6;
    if (has_signtotal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->signtotal());
    }

  }
  // repeated int32 signinfo = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->signinfo_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->signinfo(i));
    }
    total_size += 1 * this->signinfo_size() + data_size;
  }

  // repeated int32 signTotalinfo = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->signtotalinfo_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->signtotalinfo(i));
    }
    total_size += 1 * this->signtotalinfo_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Welfare_SC_UpdateSignInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Welfare_SC_UpdateSignInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Welfare_SC_UpdateSignInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Welfare_SC_UpdateSignInfo::MergeFrom(const Welfare_SC_UpdateSignInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  signinfo_.MergeFrom(from.signinfo_);
  signtotalinfo_.MergeFrom(from.signtotalinfo_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_issigntoday()) {
      set_issigntoday(from.issigntoday());
    }
    if (from.has_signsupplytime()) {
      set_signsupplytime(from.signsupplytime());
    }
    if (from.has_signtotal()) {
      set_signtotal(from.signtotal());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Welfare_SC_UpdateSignInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Welfare_SC_UpdateSignInfo::CopyFrom(const Welfare_SC_UpdateSignInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Welfare_SC_UpdateSignInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001c) != 0x0000001c) return false;

  return true;
}

void Welfare_SC_UpdateSignInfo::Swap(Welfare_SC_UpdateSignInfo* other) {
  if (other != this) {
    signinfo_.Swap(&other->signinfo_);
    signtotalinfo_.Swap(&other->signtotalinfo_);
    std::swap(issigntoday_, other->issigntoday_);
    std::swap(signsupplytime_, other->signsupplytime_);
    std::swap(signtotal_, other->signtotal_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Welfare_SC_UpdateSignInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Welfare_SC_UpdateSignInfo_descriptor_;
  metadata.reflection = Welfare_SC_UpdateSignInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Welfare_SC_SignToday::kDayindexFieldNumber;
const int Welfare_SC_SignToday::kResultFieldNumber;
#endif  // !_MSC_VER

Welfare_SC_SignToday::Welfare_SC_SignToday()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Welfare_SC_SignToday::InitAsDefaultInstance() {
}

Welfare_SC_SignToday::Welfare_SC_SignToday(const Welfare_SC_SignToday& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Welfare_SC_SignToday::SharedCtor() {
  _cached_size_ = 0;
  dayindex_ = 0;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Welfare_SC_SignToday::~Welfare_SC_SignToday() {
  SharedDtor();
}

void Welfare_SC_SignToday::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Welfare_SC_SignToday::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Welfare_SC_SignToday::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Welfare_SC_SignToday_descriptor_;
}

const Welfare_SC_SignToday& Welfare_SC_SignToday::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_welfare_2eproto();
  return *default_instance_;
}

Welfare_SC_SignToday* Welfare_SC_SignToday::default_instance_ = NULL;

Welfare_SC_SignToday* Welfare_SC_SignToday::New() const {
  return new Welfare_SC_SignToday;
}

void Welfare_SC_SignToday::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dayindex_ = 0;
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Welfare_SC_SignToday::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 dayindex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dayindex_)));
          set_has_dayindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required uint32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Welfare_SC_SignToday::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 dayindex = 1;
  if (has_dayindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dayindex(), output);
  }

  // required uint32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Welfare_SC_SignToday::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 dayindex = 1;
  if (has_dayindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dayindex(), target);
  }

  // required uint32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Welfare_SC_SignToday::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 dayindex = 1;
    if (has_dayindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dayindex());
    }

    // required uint32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Welfare_SC_SignToday::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Welfare_SC_SignToday* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Welfare_SC_SignToday*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Welfare_SC_SignToday::MergeFrom(const Welfare_SC_SignToday& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dayindex()) {
      set_dayindex(from.dayindex());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Welfare_SC_SignToday::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Welfare_SC_SignToday::CopyFrom(const Welfare_SC_SignToday& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Welfare_SC_SignToday::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void Welfare_SC_SignToday::Swap(Welfare_SC_SignToday* other) {
  if (other != this) {
    std::swap(dayindex_, other->dayindex_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Welfare_SC_SignToday::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Welfare_SC_SignToday_descriptor_;
  metadata.reflection = Welfare_SC_SignToday_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Welfare_SC_SignSupply::kDayindexFieldNumber;
const int Welfare_SC_SignSupply::kResultFieldNumber;
#endif  // !_MSC_VER

Welfare_SC_SignSupply::Welfare_SC_SignSupply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Welfare_SC_SignSupply::InitAsDefaultInstance() {
}

Welfare_SC_SignSupply::Welfare_SC_SignSupply(const Welfare_SC_SignSupply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Welfare_SC_SignSupply::SharedCtor() {
  _cached_size_ = 0;
  dayindex_ = 0;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Welfare_SC_SignSupply::~Welfare_SC_SignSupply() {
  SharedDtor();
}

void Welfare_SC_SignSupply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Welfare_SC_SignSupply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Welfare_SC_SignSupply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Welfare_SC_SignSupply_descriptor_;
}

const Welfare_SC_SignSupply& Welfare_SC_SignSupply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_welfare_2eproto();
  return *default_instance_;
}

Welfare_SC_SignSupply* Welfare_SC_SignSupply::default_instance_ = NULL;

Welfare_SC_SignSupply* Welfare_SC_SignSupply::New() const {
  return new Welfare_SC_SignSupply;
}

void Welfare_SC_SignSupply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dayindex_ = 0;
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Welfare_SC_SignSupply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 dayindex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dayindex_)));
          set_has_dayindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required uint32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Welfare_SC_SignSupply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 dayindex = 1;
  if (has_dayindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dayindex(), output);
  }

  // required uint32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Welfare_SC_SignSupply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 dayindex = 1;
  if (has_dayindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dayindex(), target);
  }

  // required uint32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Welfare_SC_SignSupply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 dayindex = 1;
    if (has_dayindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dayindex());
    }

    // required uint32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Welfare_SC_SignSupply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Welfare_SC_SignSupply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Welfare_SC_SignSupply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Welfare_SC_SignSupply::MergeFrom(const Welfare_SC_SignSupply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dayindex()) {
      set_dayindex(from.dayindex());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Welfare_SC_SignSupply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Welfare_SC_SignSupply::CopyFrom(const Welfare_SC_SignSupply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Welfare_SC_SignSupply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void Welfare_SC_SignSupply::Swap(Welfare_SC_SignSupply* other) {
  if (other != this) {
    std::swap(dayindex_, other->dayindex_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Welfare_SC_SignSupply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Welfare_SC_SignSupply_descriptor_;
  metadata.reflection = Welfare_SC_SignSupply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Welfare_CS_SignTotal::kTotalindexFieldNumber;
#endif  // !_MSC_VER

Welfare_CS_SignTotal::Welfare_CS_SignTotal()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Welfare_CS_SignTotal::InitAsDefaultInstance() {
}

Welfare_CS_SignTotal::Welfare_CS_SignTotal(const Welfare_CS_SignTotal& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Welfare_CS_SignTotal::SharedCtor() {
  _cached_size_ = 0;
  totalindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Welfare_CS_SignTotal::~Welfare_CS_SignTotal() {
  SharedDtor();
}

void Welfare_CS_SignTotal::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Welfare_CS_SignTotal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Welfare_CS_SignTotal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Welfare_CS_SignTotal_descriptor_;
}

const Welfare_CS_SignTotal& Welfare_CS_SignTotal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_welfare_2eproto();
  return *default_instance_;
}

Welfare_CS_SignTotal* Welfare_CS_SignTotal::default_instance_ = NULL;

Welfare_CS_SignTotal* Welfare_CS_SignTotal::New() const {
  return new Welfare_CS_SignTotal;
}

void Welfare_CS_SignTotal::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    totalindex_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Welfare_CS_SignTotal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 totalindex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalindex_)));
          set_has_totalindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Welfare_CS_SignTotal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 totalindex = 1;
  if (has_totalindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->totalindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Welfare_CS_SignTotal::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 totalindex = 1;
  if (has_totalindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->totalindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Welfare_CS_SignTotal::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 totalindex = 1;
    if (has_totalindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Welfare_CS_SignTotal::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Welfare_CS_SignTotal* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Welfare_CS_SignTotal*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Welfare_CS_SignTotal::MergeFrom(const Welfare_CS_SignTotal& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_totalindex()) {
      set_totalindex(from.totalindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Welfare_CS_SignTotal::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Welfare_CS_SignTotal::CopyFrom(const Welfare_CS_SignTotal& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Welfare_CS_SignTotal::IsInitialized() const {

  return true;
}

void Welfare_CS_SignTotal::Swap(Welfare_CS_SignTotal* other) {
  if (other != this) {
    std::swap(totalindex_, other->totalindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Welfare_CS_SignTotal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Welfare_CS_SignTotal_descriptor_;
  metadata.reflection = Welfare_CS_SignTotal_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Welfare_SC_SignTotal::kTotalindexFieldNumber;
const int Welfare_SC_SignTotal::kResultFieldNumber;
#endif  // !_MSC_VER

Welfare_SC_SignTotal::Welfare_SC_SignTotal()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Welfare_SC_SignTotal::InitAsDefaultInstance() {
}

Welfare_SC_SignTotal::Welfare_SC_SignTotal(const Welfare_SC_SignTotal& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Welfare_SC_SignTotal::SharedCtor() {
  _cached_size_ = 0;
  totalindex_ = 0;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Welfare_SC_SignTotal::~Welfare_SC_SignTotal() {
  SharedDtor();
}

void Welfare_SC_SignTotal::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Welfare_SC_SignTotal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Welfare_SC_SignTotal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Welfare_SC_SignTotal_descriptor_;
}

const Welfare_SC_SignTotal& Welfare_SC_SignTotal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_welfare_2eproto();
  return *default_instance_;
}

Welfare_SC_SignTotal* Welfare_SC_SignTotal::default_instance_ = NULL;

Welfare_SC_SignTotal* Welfare_SC_SignTotal::New() const {
  return new Welfare_SC_SignTotal;
}

void Welfare_SC_SignTotal::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    totalindex_ = 0;
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Welfare_SC_SignTotal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 totalindex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalindex_)));
          set_has_totalindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required uint32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Welfare_SC_SignTotal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 totalindex = 1;
  if (has_totalindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->totalindex(), output);
  }

  // required uint32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Welfare_SC_SignTotal::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 totalindex = 1;
  if (has_totalindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->totalindex(), target);
  }

  // required uint32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Welfare_SC_SignTotal::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 totalindex = 1;
    if (has_totalindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalindex());
    }

    // required uint32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Welfare_SC_SignTotal::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Welfare_SC_SignTotal* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Welfare_SC_SignTotal*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Welfare_SC_SignTotal::MergeFrom(const Welfare_SC_SignTotal& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_totalindex()) {
      set_totalindex(from.totalindex());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Welfare_SC_SignTotal::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Welfare_SC_SignTotal::CopyFrom(const Welfare_SC_SignTotal& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Welfare_SC_SignTotal::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void Welfare_SC_SignTotal::Swap(Welfare_SC_SignTotal* other) {
  if (other != this) {
    std::swap(totalindex_, other->totalindex_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Welfare_SC_SignTotal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Welfare_SC_SignTotal_descriptor_;
  metadata.reflection = Welfare_SC_SignTotal_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Welfare_CS_QueryLotteryInfo::Welfare_CS_QueryLotteryInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Welfare_CS_QueryLotteryInfo::InitAsDefaultInstance() {
}

Welfare_CS_QueryLotteryInfo::Welfare_CS_QueryLotteryInfo(const Welfare_CS_QueryLotteryInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Welfare_CS_QueryLotteryInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Welfare_CS_QueryLotteryInfo::~Welfare_CS_QueryLotteryInfo() {
  SharedDtor();
}

void Welfare_CS_QueryLotteryInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Welfare_CS_QueryLotteryInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Welfare_CS_QueryLotteryInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Welfare_CS_QueryLotteryInfo_descriptor_;
}

const Welfare_CS_QueryLotteryInfo& Welfare_CS_QueryLotteryInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_welfare_2eproto();
  return *default_instance_;
}

Welfare_CS_QueryLotteryInfo* Welfare_CS_QueryLotteryInfo::default_instance_ = NULL;

Welfare_CS_QueryLotteryInfo* Welfare_CS_QueryLotteryInfo::New() const {
  return new Welfare_CS_QueryLotteryInfo;
}

void Welfare_CS_QueryLotteryInfo::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Welfare_CS_QueryLotteryInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Welfare_CS_QueryLotteryInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Welfare_CS_QueryLotteryInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Welfare_CS_QueryLotteryInfo::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Welfare_CS_QueryLotteryInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Welfare_CS_QueryLotteryInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Welfare_CS_QueryLotteryInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Welfare_CS_QueryLotteryInfo::MergeFrom(const Welfare_CS_QueryLotteryInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Welfare_CS_QueryLotteryInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Welfare_CS_QueryLotteryInfo::CopyFrom(const Welfare_CS_QueryLotteryInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Welfare_CS_QueryLotteryInfo::IsInitialized() const {

  return true;
}

void Welfare_CS_QueryLotteryInfo::Swap(Welfare_CS_QueryLotteryInfo* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Welfare_CS_QueryLotteryInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Welfare_CS_QueryLotteryInfo_descriptor_;
  metadata.reflection = Welfare_CS_QueryLotteryInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Welfare_CS_DoLottery::Welfare_CS_DoLottery()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Welfare_CS_DoLottery::InitAsDefaultInstance() {
}

Welfare_CS_DoLottery::Welfare_CS_DoLottery(const Welfare_CS_DoLottery& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Welfare_CS_DoLottery::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Welfare_CS_DoLottery::~Welfare_CS_DoLottery() {
  SharedDtor();
}

void Welfare_CS_DoLottery::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Welfare_CS_DoLottery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Welfare_CS_DoLottery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Welfare_CS_DoLottery_descriptor_;
}

const Welfare_CS_DoLottery& Welfare_CS_DoLottery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_welfare_2eproto();
  return *default_instance_;
}

Welfare_CS_DoLottery* Welfare_CS_DoLottery::default_instance_ = NULL;

Welfare_CS_DoLottery* Welfare_CS_DoLottery::New() const {
  return new Welfare_CS_DoLottery;
}

void Welfare_CS_DoLottery::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Welfare_CS_DoLottery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Welfare_CS_DoLottery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Welfare_CS_DoLottery::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Welfare_CS_DoLottery::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Welfare_CS_DoLottery::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Welfare_CS_DoLottery* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Welfare_CS_DoLottery*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Welfare_CS_DoLottery::MergeFrom(const Welfare_CS_DoLottery& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Welfare_CS_DoLottery::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Welfare_CS_DoLottery::CopyFrom(const Welfare_CS_DoLottery& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Welfare_CS_DoLottery::IsInitialized() const {

  return true;
}

void Welfare_CS_DoLottery::Swap(Welfare_CS_DoLottery* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Welfare_CS_DoLottery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Welfare_CS_DoLottery_descriptor_;
  metadata.reflection = Welfare_CS_DoLottery_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Welfare_SC_UpdateLotteryInfo::kLotterytimeFieldNumber;
const int Welfare_SC_UpdateLotteryInfo::kNowposFieldNumber;
const int Welfare_SC_UpdateLotteryInfo::kMonthFieldNumber;
const int Welfare_SC_UpdateLotteryInfo::kIsopenserverFieldNumber;
#endif  // !_MSC_VER

Welfare_SC_UpdateLotteryInfo::Welfare_SC_UpdateLotteryInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Welfare_SC_UpdateLotteryInfo::InitAsDefaultInstance() {
}

Welfare_SC_UpdateLotteryInfo::Welfare_SC_UpdateLotteryInfo(const Welfare_SC_UpdateLotteryInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Welfare_SC_UpdateLotteryInfo::SharedCtor() {
  _cached_size_ = 0;
  lotterytime_ = 0u;
  nowpos_ = 0u;
  month_ = 0u;
  isopenserver_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Welfare_SC_UpdateLotteryInfo::~Welfare_SC_UpdateLotteryInfo() {
  SharedDtor();
}

void Welfare_SC_UpdateLotteryInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Welfare_SC_UpdateLotteryInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Welfare_SC_UpdateLotteryInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Welfare_SC_UpdateLotteryInfo_descriptor_;
}

const Welfare_SC_UpdateLotteryInfo& Welfare_SC_UpdateLotteryInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_welfare_2eproto();
  return *default_instance_;
}

Welfare_SC_UpdateLotteryInfo* Welfare_SC_UpdateLotteryInfo::default_instance_ = NULL;

Welfare_SC_UpdateLotteryInfo* Welfare_SC_UpdateLotteryInfo::New() const {
  return new Welfare_SC_UpdateLotteryInfo;
}

void Welfare_SC_UpdateLotteryInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lotterytime_ = 0u;
    nowpos_ = 0u;
    month_ = 0u;
    isopenserver_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Welfare_SC_UpdateLotteryInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 lotterytime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lotterytime_)));
          set_has_lotterytime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nowpos;
        break;
      }

      // required uint32 nowpos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nowpos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nowpos_)));
          set_has_nowpos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_month;
        break;
      }

      // required uint32 month = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_month:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &month_)));
          set_has_month();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_isopenserver;
        break;
      }

      // required uint32 isopenserver = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isopenserver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isopenserver_)));
          set_has_isopenserver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Welfare_SC_UpdateLotteryInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 lotterytime = 1;
  if (has_lotterytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->lotterytime(), output);
  }

  // required uint32 nowpos = 2;
  if (has_nowpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->nowpos(), output);
  }

  // required uint32 month = 3;
  if (has_month()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->month(), output);
  }

  // required uint32 isopenserver = 4;
  if (has_isopenserver()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->isopenserver(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Welfare_SC_UpdateLotteryInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 lotterytime = 1;
  if (has_lotterytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->lotterytime(), target);
  }

  // required uint32 nowpos = 2;
  if (has_nowpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->nowpos(), target);
  }

  // required uint32 month = 3;
  if (has_month()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->month(), target);
  }

  // required uint32 isopenserver = 4;
  if (has_isopenserver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->isopenserver(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Welfare_SC_UpdateLotteryInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 lotterytime = 1;
    if (has_lotterytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lotterytime());
    }

    // required uint32 nowpos = 2;
    if (has_nowpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nowpos());
    }

    // required uint32 month = 3;
    if (has_month()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->month());
    }

    // required uint32 isopenserver = 4;
    if (has_isopenserver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isopenserver());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Welfare_SC_UpdateLotteryInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Welfare_SC_UpdateLotteryInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Welfare_SC_UpdateLotteryInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Welfare_SC_UpdateLotteryInfo::MergeFrom(const Welfare_SC_UpdateLotteryInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lotterytime()) {
      set_lotterytime(from.lotterytime());
    }
    if (from.has_nowpos()) {
      set_nowpos(from.nowpos());
    }
    if (from.has_month()) {
      set_month(from.month());
    }
    if (from.has_isopenserver()) {
      set_isopenserver(from.isopenserver());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Welfare_SC_UpdateLotteryInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Welfare_SC_UpdateLotteryInfo::CopyFrom(const Welfare_SC_UpdateLotteryInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Welfare_SC_UpdateLotteryInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Welfare_SC_UpdateLotteryInfo::Swap(Welfare_SC_UpdateLotteryInfo* other) {
  if (other != this) {
    std::swap(lotterytime_, other->lotterytime_);
    std::swap(nowpos_, other->nowpos_);
    std::swap(month_, other->month_);
    std::swap(isopenserver_, other->isopenserver_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Welfare_SC_UpdateLotteryInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Welfare_SC_UpdateLotteryInfo_descriptor_;
  metadata.reflection = Welfare_SC_UpdateLotteryInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Welfare_SC_DoLotteryBack::kResultFieldNumber;
const int Welfare_SC_DoLotteryBack::kDiceresultFieldNumber;
#endif  // !_MSC_VER

Welfare_SC_DoLotteryBack::Welfare_SC_DoLotteryBack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Welfare_SC_DoLotteryBack::InitAsDefaultInstance() {
}

Welfare_SC_DoLotteryBack::Welfare_SC_DoLotteryBack(const Welfare_SC_DoLotteryBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Welfare_SC_DoLotteryBack::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  diceresult_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Welfare_SC_DoLotteryBack::~Welfare_SC_DoLotteryBack() {
  SharedDtor();
}

void Welfare_SC_DoLotteryBack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Welfare_SC_DoLotteryBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Welfare_SC_DoLotteryBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Welfare_SC_DoLotteryBack_descriptor_;
}

const Welfare_SC_DoLotteryBack& Welfare_SC_DoLotteryBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_welfare_2eproto();
  return *default_instance_;
}

Welfare_SC_DoLotteryBack* Welfare_SC_DoLotteryBack::default_instance_ = NULL;

Welfare_SC_DoLotteryBack* Welfare_SC_DoLotteryBack::New() const {
  return new Welfare_SC_DoLotteryBack;
}

void Welfare_SC_DoLotteryBack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
    diceresult_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Welfare_SC_DoLotteryBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_diceresult;
        break;
      }

      // required uint32 diceresult = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_diceresult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &diceresult_)));
          set_has_diceresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Welfare_SC_DoLotteryBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  // required uint32 diceresult = 2;
  if (has_diceresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->diceresult(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Welfare_SC_DoLotteryBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  // required uint32 diceresult = 2;
  if (has_diceresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->diceresult(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Welfare_SC_DoLotteryBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // required uint32 diceresult = 2;
    if (has_diceresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->diceresult());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Welfare_SC_DoLotteryBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Welfare_SC_DoLotteryBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Welfare_SC_DoLotteryBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Welfare_SC_DoLotteryBack::MergeFrom(const Welfare_SC_DoLotteryBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_diceresult()) {
      set_diceresult(from.diceresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Welfare_SC_DoLotteryBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Welfare_SC_DoLotteryBack::CopyFrom(const Welfare_SC_DoLotteryBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Welfare_SC_DoLotteryBack::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Welfare_SC_DoLotteryBack::Swap(Welfare_SC_DoLotteryBack* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(diceresult_, other->diceresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Welfare_SC_DoLotteryBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Welfare_SC_DoLotteryBack_descriptor_;
  metadata.reflection = Welfare_SC_DoLotteryBack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Welfare_SC_UpdateWelfareRedPoint::kRedpointFieldNumber;
#endif  // !_MSC_VER

Welfare_SC_UpdateWelfareRedPoint::Welfare_SC_UpdateWelfareRedPoint()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Welfare_SC_UpdateWelfareRedPoint::InitAsDefaultInstance() {
}

Welfare_SC_UpdateWelfareRedPoint::Welfare_SC_UpdateWelfareRedPoint(const Welfare_SC_UpdateWelfareRedPoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Welfare_SC_UpdateWelfareRedPoint::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Welfare_SC_UpdateWelfareRedPoint::~Welfare_SC_UpdateWelfareRedPoint() {
  SharedDtor();
}

void Welfare_SC_UpdateWelfareRedPoint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Welfare_SC_UpdateWelfareRedPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Welfare_SC_UpdateWelfareRedPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Welfare_SC_UpdateWelfareRedPoint_descriptor_;
}

const Welfare_SC_UpdateWelfareRedPoint& Welfare_SC_UpdateWelfareRedPoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_welfare_2eproto();
  return *default_instance_;
}

Welfare_SC_UpdateWelfareRedPoint* Welfare_SC_UpdateWelfareRedPoint::default_instance_ = NULL;

Welfare_SC_UpdateWelfareRedPoint* Welfare_SC_UpdateWelfareRedPoint::New() const {
  return new Welfare_SC_UpdateWelfareRedPoint;
}

void Welfare_SC_UpdateWelfareRedPoint::Clear() {
  redpoint_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Welfare_SC_UpdateWelfareRedPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 redpoint = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_redpoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_redpoint())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_redpoint())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_redpoint;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Welfare_SC_UpdateWelfareRedPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 redpoint = 1;
  for (int i = 0; i < this->redpoint_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->redpoint(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Welfare_SC_UpdateWelfareRedPoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 redpoint = 1;
  for (int i = 0; i < this->redpoint_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->redpoint(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Welfare_SC_UpdateWelfareRedPoint::ByteSize() const {
  int total_size = 0;

  // repeated uint32 redpoint = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->redpoint_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->redpoint(i));
    }
    total_size += 1 * this->redpoint_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Welfare_SC_UpdateWelfareRedPoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Welfare_SC_UpdateWelfareRedPoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Welfare_SC_UpdateWelfareRedPoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Welfare_SC_UpdateWelfareRedPoint::MergeFrom(const Welfare_SC_UpdateWelfareRedPoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  redpoint_.MergeFrom(from.redpoint_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Welfare_SC_UpdateWelfareRedPoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Welfare_SC_UpdateWelfareRedPoint::CopyFrom(const Welfare_SC_UpdateWelfareRedPoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Welfare_SC_UpdateWelfareRedPoint::IsInitialized() const {

  return true;
}

void Welfare_SC_UpdateWelfareRedPoint::Swap(Welfare_SC_UpdateWelfareRedPoint* other) {
  if (other != this) {
    redpoint_.Swap(&other->redpoint_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Welfare_SC_UpdateWelfareRedPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Welfare_SC_UpdateWelfareRedPoint_descriptor_;
  metadata.reflection = Welfare_SC_UpdateWelfareRedPoint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SignData::kThisloopstarttimeFieldNumber;
const int SignData::kLastsigntimeFieldNumber;
const int SignData::kSignsupplytimeFieldNumber;
const int SignData::kSigntotalFieldNumber;
const int SignData::kSigninfoFieldNumber;
const int SignData::kSignTotalinfoFieldNumber;
#endif  // !_MSC_VER

SignData::SignData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SignData::InitAsDefaultInstance() {
}

SignData::SignData(const SignData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SignData::SharedCtor() {
  _cached_size_ = 0;
  thisloopstarttime_ = 0u;
  lastsigntime_ = 0u;
  signsupplytime_ = 0u;
  signtotal_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SignData::~SignData() {
  SharedDtor();
}

void SignData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SignData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SignData_descriptor_;
}

const SignData& SignData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_welfare_2eproto();
  return *default_instance_;
}

SignData* SignData::default_instance_ = NULL;

SignData* SignData::New() const {
  return new SignData;
}

void SignData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    thisloopstarttime_ = 0u;
    lastsigntime_ = 0u;
    signsupplytime_ = 0u;
    signtotal_ = 0u;
  }
  signinfo_.Clear();
  signtotalinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SignData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 thisloopstarttime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &thisloopstarttime_)));
          set_has_thisloopstarttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lastsigntime;
        break;
      }

      // optional uint32 lastsigntime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastsigntime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lastsigntime_)));
          set_has_lastsigntime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_signsupplytime;
        break;
      }

      // optional uint32 signsupplytime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_signsupplytime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &signsupplytime_)));
          set_has_signsupplytime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_signtotal;
        break;
      }

      // optional uint32 signtotal = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_signtotal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &signtotal_)));
          set_has_signtotal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_signinfo;
        break;
      }

      // repeated int32 signinfo = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_signinfo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_signinfo())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_signinfo())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_signinfo;
        if (input->ExpectTag(48)) goto parse_signTotalinfo;
        break;
      }

      // repeated int32 signTotalinfo = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_signTotalinfo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_signtotalinfo())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_signtotalinfo())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_signTotalinfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SignData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 thisloopstarttime = 1;
  if (has_thisloopstarttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->thisloopstarttime(), output);
  }

  // optional uint32 lastsigntime = 2;
  if (has_lastsigntime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->lastsigntime(), output);
  }

  // optional uint32 signsupplytime = 3;
  if (has_signsupplytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->signsupplytime(), output);
  }

  // optional uint32 signtotal = 4;
  if (has_signtotal()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->signtotal(), output);
  }

  // repeated int32 signinfo = 5;
  for (int i = 0; i < this->signinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->signinfo(i), output);
  }

  // repeated int32 signTotalinfo = 6;
  for (int i = 0; i < this->signtotalinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->signtotalinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SignData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 thisloopstarttime = 1;
  if (has_thisloopstarttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->thisloopstarttime(), target);
  }

  // optional uint32 lastsigntime = 2;
  if (has_lastsigntime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->lastsigntime(), target);
  }

  // optional uint32 signsupplytime = 3;
  if (has_signsupplytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->signsupplytime(), target);
  }

  // optional uint32 signtotal = 4;
  if (has_signtotal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->signtotal(), target);
  }

  // repeated int32 signinfo = 5;
  for (int i = 0; i < this->signinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->signinfo(i), target);
  }

  // repeated int32 signTotalinfo = 6;
  for (int i = 0; i < this->signtotalinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->signtotalinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SignData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 thisloopstarttime = 1;
    if (has_thisloopstarttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->thisloopstarttime());
    }

    // optional uint32 lastsigntime = 2;
    if (has_lastsigntime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lastsigntime());
    }

    // optional uint32 signsupplytime = 3;
    if (has_signsupplytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->signsupplytime());
    }

    // optional uint32 signtotal = 4;
    if (has_signtotal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->signtotal());
    }

  }
  // repeated int32 signinfo = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->signinfo_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->signinfo(i));
    }
    total_size += 1 * this->signinfo_size() + data_size;
  }

  // repeated int32 signTotalinfo = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->signtotalinfo_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->signtotalinfo(i));
    }
    total_size += 1 * this->signtotalinfo_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SignData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SignData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SignData::MergeFrom(const SignData& from) {
  GOOGLE_CHECK_NE(&from, this);
  signinfo_.MergeFrom(from.signinfo_);
  signtotalinfo_.MergeFrom(from.signtotalinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_thisloopstarttime()) {
      set_thisloopstarttime(from.thisloopstarttime());
    }
    if (from.has_lastsigntime()) {
      set_lastsigntime(from.lastsigntime());
    }
    if (from.has_signsupplytime()) {
      set_signsupplytime(from.signsupplytime());
    }
    if (from.has_signtotal()) {
      set_signtotal(from.signtotal());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SignData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignData::CopyFrom(const SignData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignData::IsInitialized() const {

  return true;
}

void SignData::Swap(SignData* other) {
  if (other != this) {
    std::swap(thisloopstarttime_, other->thisloopstarttime_);
    std::swap(lastsigntime_, other->lastsigntime_);
    std::swap(signsupplytime_, other->signsupplytime_);
    std::swap(signtotal_, other->signtotal_);
    signinfo_.Swap(&other->signinfo_);
    signtotalinfo_.Swap(&other->signtotalinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SignData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SignData_descriptor_;
  metadata.reflection = SignData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LotteryData::kLotterytimeFieldNumber;
const int LotteryData::kNowposFieldNumber;
#endif  // !_MSC_VER

LotteryData::LotteryData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LotteryData::InitAsDefaultInstance() {
}

LotteryData::LotteryData(const LotteryData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LotteryData::SharedCtor() {
  _cached_size_ = 0;
  lotterytime_ = 0u;
  nowpos_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LotteryData::~LotteryData() {
  SharedDtor();
}

void LotteryData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LotteryData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LotteryData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LotteryData_descriptor_;
}

const LotteryData& LotteryData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_welfare_2eproto();
  return *default_instance_;
}

LotteryData* LotteryData::default_instance_ = NULL;

LotteryData* LotteryData::New() const {
  return new LotteryData;
}

void LotteryData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lotterytime_ = 0u;
    nowpos_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LotteryData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 lotterytime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lotterytime_)));
          set_has_lotterytime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nowpos;
        break;
      }

      // optional uint32 nowpos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nowpos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nowpos_)));
          set_has_nowpos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LotteryData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 lotterytime = 1;
  if (has_lotterytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->lotterytime(), output);
  }

  // optional uint32 nowpos = 2;
  if (has_nowpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->nowpos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LotteryData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 lotterytime = 1;
  if (has_lotterytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->lotterytime(), target);
  }

  // optional uint32 nowpos = 2;
  if (has_nowpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->nowpos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LotteryData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 lotterytime = 1;
    if (has_lotterytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lotterytime());
    }

    // optional uint32 nowpos = 2;
    if (has_nowpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nowpos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LotteryData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LotteryData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LotteryData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LotteryData::MergeFrom(const LotteryData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lotterytime()) {
      set_lotterytime(from.lotterytime());
    }
    if (from.has_nowpos()) {
      set_nowpos(from.nowpos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LotteryData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LotteryData::CopyFrom(const LotteryData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LotteryData::IsInitialized() const {

  return true;
}

void LotteryData::Swap(LotteryData* other) {
  if (other != this) {
    std::swap(lotterytime_, other->lotterytime_);
    std::swap(nowpos_, other->nowpos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LotteryData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LotteryData_descriptor_;
  metadata.reflection = LotteryData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OnlineData::kTodaySecFieldNumber;
const int OnlineData::kAwardsFieldNumber;
#endif  // !_MSC_VER

OnlineData::OnlineData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OnlineData::InitAsDefaultInstance() {
}

OnlineData::OnlineData(const OnlineData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OnlineData::SharedCtor() {
  _cached_size_ = 0;
  todaysec_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OnlineData::~OnlineData() {
  SharedDtor();
}

void OnlineData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OnlineData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OnlineData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OnlineData_descriptor_;
}

const OnlineData& OnlineData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_welfare_2eproto();
  return *default_instance_;
}

OnlineData* OnlineData::default_instance_ = NULL;

OnlineData* OnlineData::New() const {
  return new OnlineData;
}

void OnlineData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    todaysec_ = 0;
  }
  awards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OnlineData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 todaySec = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &todaysec_)));
          set_has_todaysec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_awards;
        break;
      }

      // repeated .proto.message.SingleOnlineAward awards = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_awards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_awards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_awards;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OnlineData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 todaySec = 1;
  if (has_todaysec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->todaysec(), output);
  }

  // repeated .proto.message.SingleOnlineAward awards = 2;
  for (int i = 0; i < this->awards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->awards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OnlineData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 todaySec = 1;
  if (has_todaysec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->todaysec(), target);
  }

  // repeated .proto.message.SingleOnlineAward awards = 2;
  for (int i = 0; i < this->awards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->awards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OnlineData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 todaySec = 1;
    if (has_todaysec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->todaysec());
    }

  }
  // repeated .proto.message.SingleOnlineAward awards = 2;
  total_size += 1 * this->awards_size();
  for (int i = 0; i < this->awards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->awards(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OnlineData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OnlineData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OnlineData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OnlineData::MergeFrom(const OnlineData& from) {
  GOOGLE_CHECK_NE(&from, this);
  awards_.MergeFrom(from.awards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_todaysec()) {
      set_todaysec(from.todaysec());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OnlineData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OnlineData::CopyFrom(const OnlineData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OnlineData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < awards_size(); i++) {
    if (!this->awards(i).IsInitialized()) return false;
  }
  return true;
}

void OnlineData::Swap(OnlineData* other) {
  if (other != this) {
    std::swap(todaysec_, other->todaysec_);
    awards_.Swap(&other->awards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OnlineData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OnlineData_descriptor_;
  metadata.reflection = OnlineData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SingleAwardData::kIdFieldNumber;
const int SingleAwardData::kIsrecivedFieldNumber;
#endif  // !_MSC_VER

SingleAwardData::SingleAwardData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SingleAwardData::InitAsDefaultInstance() {
}

SingleAwardData::SingleAwardData(const SingleAwardData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SingleAwardData::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  isrecived_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SingleAwardData::~SingleAwardData() {
  SharedDtor();
}

void SingleAwardData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SingleAwardData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SingleAwardData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SingleAwardData_descriptor_;
}

const SingleAwardData& SingleAwardData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_welfare_2eproto();
  return *default_instance_;
}

SingleAwardData* SingleAwardData::default_instance_ = NULL;

SingleAwardData* SingleAwardData::New() const {
  return new SingleAwardData;
}

void SingleAwardData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    isrecived_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SingleAwardData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isrecived;
        break;
      }

      // required int32 isrecived = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isrecived:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isrecived_)));
          set_has_isrecived();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SingleAwardData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 isrecived = 2;
  if (has_isrecived()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->isrecived(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SingleAwardData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 isrecived = 2;
  if (has_isrecived()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->isrecived(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SingleAwardData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 isrecived = 2;
    if (has_isrecived()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isrecived());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SingleAwardData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SingleAwardData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SingleAwardData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SingleAwardData::MergeFrom(const SingleAwardData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_isrecived()) {
      set_isrecived(from.isrecived());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SingleAwardData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleAwardData::CopyFrom(const SingleAwardData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleAwardData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SingleAwardData::Swap(SingleAwardData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(isrecived_, other->isrecived_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SingleAwardData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SingleAwardData_descriptor_;
  metadata.reflection = SingleAwardData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HolidayInfo::kIdFieldNumber;
const int HolidayInfo::kHolidayawardstatusFieldNumber;
const int HolidayInfo::kOpentickFieldNumber;
#endif  // !_MSC_VER

HolidayInfo::HolidayInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HolidayInfo::InitAsDefaultInstance() {
}

HolidayInfo::HolidayInfo(const HolidayInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HolidayInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  holidayawardstatus_ = 0;
  opentick_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HolidayInfo::~HolidayInfo() {
  SharedDtor();
}

void HolidayInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HolidayInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HolidayInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HolidayInfo_descriptor_;
}

const HolidayInfo& HolidayInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_welfare_2eproto();
  return *default_instance_;
}

HolidayInfo* HolidayInfo::default_instance_ = NULL;

HolidayInfo* HolidayInfo::New() const {
  return new HolidayInfo;
}

void HolidayInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    holidayawardstatus_ = 0;
    opentick_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HolidayInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_holidayawardstatus;
        break;
      }

      // required int32 holidayawardstatus = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_holidayawardstatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &holidayawardstatus_)));
          set_has_holidayawardstatus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_opentick;
        break;
      }

      // required uint32 opentick = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opentick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opentick_)));
          set_has_opentick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HolidayInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 holidayawardstatus = 2;
  if (has_holidayawardstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->holidayawardstatus(), output);
  }

  // required uint32 opentick = 3;
  if (has_opentick()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->opentick(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HolidayInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 holidayawardstatus = 2;
  if (has_holidayawardstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->holidayawardstatus(), target);
  }

  // required uint32 opentick = 3;
  if (has_opentick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->opentick(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HolidayInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 holidayawardstatus = 2;
    if (has_holidayawardstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->holidayawardstatus());
    }

    // required uint32 opentick = 3;
    if (has_opentick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->opentick());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HolidayInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HolidayInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HolidayInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HolidayInfo::MergeFrom(const HolidayInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_holidayawardstatus()) {
      set_holidayawardstatus(from.holidayawardstatus());
    }
    if (from.has_opentick()) {
      set_opentick(from.opentick());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HolidayInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HolidayInfo::CopyFrom(const HolidayInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HolidayInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void HolidayInfo::Swap(HolidayInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(holidayawardstatus_, other->holidayawardstatus_);
    std::swap(opentick_, other->opentick_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HolidayInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HolidayInfo_descriptor_;
  metadata.reflection = HolidayInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginInfo::kIdFieldNumber;
const int LoginInfo::kHolidayawardstatusFieldNumber;
#endif  // !_MSC_VER

LoginInfo::LoginInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoginInfo::InitAsDefaultInstance() {
}

LoginInfo::LoginInfo(const LoginInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoginInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  holidayawardstatus_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginInfo::~LoginInfo() {
  SharedDtor();
}

void LoginInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LoginInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginInfo_descriptor_;
}

const LoginInfo& LoginInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_welfare_2eproto();
  return *default_instance_;
}

LoginInfo* LoginInfo::default_instance_ = NULL;

LoginInfo* LoginInfo::New() const {
  return new LoginInfo;
}

void LoginInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    holidayawardstatus_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_holidayawardstatus;
        break;
      }

      // required int32 holidayawardstatus = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_holidayawardstatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &holidayawardstatus_)));
          set_has_holidayawardstatus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 holidayawardstatus = 2;
  if (has_holidayawardstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->holidayawardstatus(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoginInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 holidayawardstatus = 2;
  if (has_holidayawardstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->holidayawardstatus(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoginInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 holidayawardstatus = 2;
    if (has_holidayawardstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->holidayawardstatus());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginInfo::MergeFrom(const LoginInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_holidayawardstatus()) {
      set_holidayawardstatus(from.holidayawardstatus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginInfo::CopyFrom(const LoginInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void LoginInfo::Swap(LoginInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(holidayawardstatus_, other->holidayawardstatus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginInfo_descriptor_;
  metadata.reflection = LoginInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GrowthFundInfo::kIdFieldNumber;
const int GrowthFundInfo::kLevelFieldNumber;
const int GrowthFundInfo::kAwardstatusFieldNumber;
#endif  // !_MSC_VER

GrowthFundInfo::GrowthFundInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GrowthFundInfo::InitAsDefaultInstance() {
}

GrowthFundInfo::GrowthFundInfo(const GrowthFundInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GrowthFundInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  level_ = 0;
  awardstatus_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GrowthFundInfo::~GrowthFundInfo() {
  SharedDtor();
}

void GrowthFundInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GrowthFundInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GrowthFundInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GrowthFundInfo_descriptor_;
}

const GrowthFundInfo& GrowthFundInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_welfare_2eproto();
  return *default_instance_;
}

GrowthFundInfo* GrowthFundInfo::default_instance_ = NULL;

GrowthFundInfo* GrowthFundInfo::New() const {
  return new GrowthFundInfo;
}

void GrowthFundInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    level_ = 0;
    awardstatus_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GrowthFundInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // required int32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_awardstatus;
        break;
      }

      // required int32 awardstatus = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_awardstatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &awardstatus_)));
          set_has_awardstatus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GrowthFundInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // required int32 awardstatus = 3;
  if (has_awardstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->awardstatus(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GrowthFundInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  // required int32 awardstatus = 3;
  if (has_awardstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->awardstatus(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GrowthFundInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required int32 awardstatus = 3;
    if (has_awardstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->awardstatus());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GrowthFundInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GrowthFundInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GrowthFundInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GrowthFundInfo::MergeFrom(const GrowthFundInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_awardstatus()) {
      set_awardstatus(from.awardstatus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GrowthFundInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GrowthFundInfo::CopyFrom(const GrowthFundInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GrowthFundInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GrowthFundInfo::Swap(GrowthFundInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(level_, other->level_);
    std::swap(awardstatus_, other->awardstatus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GrowthFundInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GrowthFundInfo_descriptor_;
  metadata.reflection = GrowthFundInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DiamondGiftInfo::kIdFieldNumber;
const int DiamondGiftInfo::kIsopenFieldNumber;
const int DiamondGiftInfo::kRestdayFieldNumber;
const int DiamondGiftInfo::kAwardstatusFieldNumber;
#endif  // !_MSC_VER

DiamondGiftInfo::DiamondGiftInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DiamondGiftInfo::InitAsDefaultInstance() {
}

DiamondGiftInfo::DiamondGiftInfo(const DiamondGiftInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DiamondGiftInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  isopen_ = 0;
  restday_ = 0;
  awardstatus_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DiamondGiftInfo::~DiamondGiftInfo() {
  SharedDtor();
}

void DiamondGiftInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DiamondGiftInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DiamondGiftInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DiamondGiftInfo_descriptor_;
}

const DiamondGiftInfo& DiamondGiftInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_welfare_2eproto();
  return *default_instance_;
}

DiamondGiftInfo* DiamondGiftInfo::default_instance_ = NULL;

DiamondGiftInfo* DiamondGiftInfo::New() const {
  return new DiamondGiftInfo;
}

void DiamondGiftInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    isopen_ = 0;
    restday_ = 0;
    awardstatus_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DiamondGiftInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isopen;
        break;
      }

      // required int32 isopen = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isopen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isopen_)));
          set_has_isopen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_restday;
        break;
      }

      // required int32 restday = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_restday:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &restday_)));
          set_has_restday();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_awardstatus;
        break;
      }

      // required int32 awardstatus = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_awardstatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &awardstatus_)));
          set_has_awardstatus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DiamondGiftInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 isopen = 2;
  if (has_isopen()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->isopen(), output);
  }

  // required int32 restday = 3;
  if (has_restday()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->restday(), output);
  }

  // required int32 awardstatus = 4;
  if (has_awardstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->awardstatus(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DiamondGiftInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 isopen = 2;
  if (has_isopen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->isopen(), target);
  }

  // required int32 restday = 3;
  if (has_restday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->restday(), target);
  }

  // required int32 awardstatus = 4;
  if (has_awardstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->awardstatus(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DiamondGiftInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 isopen = 2;
    if (has_isopen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isopen());
    }

    // required int32 restday = 3;
    if (has_restday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->restday());
    }

    // required int32 awardstatus = 4;
    if (has_awardstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->awardstatus());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DiamondGiftInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DiamondGiftInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DiamondGiftInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DiamondGiftInfo::MergeFrom(const DiamondGiftInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_isopen()) {
      set_isopen(from.isopen());
    }
    if (from.has_restday()) {
      set_restday(from.restday());
    }
    if (from.has_awardstatus()) {
      set_awardstatus(from.awardstatus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DiamondGiftInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DiamondGiftInfo::CopyFrom(const DiamondGiftInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiamondGiftInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void DiamondGiftInfo::Swap(DiamondGiftInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(isopen_, other->isopen_);
    std::swap(restday_, other->restday_);
    std::swap(awardstatus_, other->awardstatus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DiamondGiftInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DiamondGiftInfo_descriptor_;
  metadata.reflection = DiamondGiftInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DiamondGiftData::kIdFieldNumber;
const int DiamondGiftData::kIsopenFieldNumber;
const int DiamondGiftData::kTickFieldNumber;
const int DiamondGiftData::kLastReciveTickFieldNumber;
#endif  // !_MSC_VER

DiamondGiftData::DiamondGiftData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DiamondGiftData::InitAsDefaultInstance() {
}

DiamondGiftData::DiamondGiftData(const DiamondGiftData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DiamondGiftData::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  isopen_ = 0;
  tick_ = 0u;
  lastrecivetick_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DiamondGiftData::~DiamondGiftData() {
  SharedDtor();
}

void DiamondGiftData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DiamondGiftData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DiamondGiftData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DiamondGiftData_descriptor_;
}

const DiamondGiftData& DiamondGiftData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_welfare_2eproto();
  return *default_instance_;
}

DiamondGiftData* DiamondGiftData::default_instance_ = NULL;

DiamondGiftData* DiamondGiftData::New() const {
  return new DiamondGiftData;
}

void DiamondGiftData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    isopen_ = 0;
    tick_ = 0u;
    lastrecivetick_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DiamondGiftData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isopen;
        break;
      }

      // required int32 isopen = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isopen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isopen_)));
          set_has_isopen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_tick;
        break;
      }

      // required uint32 tick = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tick_)));
          set_has_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_lastReciveTick;
        break;
      }

      // required uint32 lastReciveTick = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastReciveTick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lastrecivetick_)));
          set_has_lastrecivetick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DiamondGiftData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 isopen = 2;
  if (has_isopen()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->isopen(), output);
  }

  // required uint32 tick = 3;
  if (has_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->tick(), output);
  }

  // required uint32 lastReciveTick = 4;
  if (has_lastrecivetick()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->lastrecivetick(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DiamondGiftData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 isopen = 2;
  if (has_isopen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->isopen(), target);
  }

  // required uint32 tick = 3;
  if (has_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->tick(), target);
  }

  // required uint32 lastReciveTick = 4;
  if (has_lastrecivetick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->lastrecivetick(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DiamondGiftData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 isopen = 2;
    if (has_isopen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isopen());
    }

    // required uint32 tick = 3;
    if (has_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tick());
    }

    // required uint32 lastReciveTick = 4;
    if (has_lastrecivetick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lastrecivetick());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DiamondGiftData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DiamondGiftData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DiamondGiftData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DiamondGiftData::MergeFrom(const DiamondGiftData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_isopen()) {
      set_isopen(from.isopen());
    }
    if (from.has_tick()) {
      set_tick(from.tick());
    }
    if (from.has_lastrecivetick()) {
      set_lastrecivetick(from.lastrecivetick());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DiamondGiftData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DiamondGiftData::CopyFrom(const DiamondGiftData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiamondGiftData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void DiamondGiftData::Swap(DiamondGiftData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(isopen_, other->isopen_);
    std::swap(tick_, other->tick_);
    std::swap(lastrecivetick_, other->lastrecivetick_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DiamondGiftData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DiamondGiftData_descriptor_;
  metadata.reflection = DiamondGiftData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Welfare_CS_QueryGrowthFund::Welfare_CS_QueryGrowthFund()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Welfare_CS_QueryGrowthFund::InitAsDefaultInstance() {
}

Welfare_CS_QueryGrowthFund::Welfare_CS_QueryGrowthFund(const Welfare_CS_QueryGrowthFund& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Welfare_CS_QueryGrowthFund::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Welfare_CS_QueryGrowthFund::~Welfare_CS_QueryGrowthFund() {
  SharedDtor();
}

void Welfare_CS_QueryGrowthFund::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Welfare_CS_QueryGrowthFund::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Welfare_CS_QueryGrowthFund::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Welfare_CS_QueryGrowthFund_descriptor_;
}

const Welfare_CS_QueryGrowthFund& Welfare_CS_QueryGrowthFund::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_welfare_2eproto();
  return *default_instance_;
}

Welfare_CS_QueryGrowthFund* Welfare_CS_QueryGrowthFund::default_instance_ = NULL;

Welfare_CS_QueryGrowthFund* Welfare_CS_QueryGrowthFund::New() const {
  return new Welfare_CS_QueryGrowthFund;
}

void Welfare_CS_QueryGrowthFund::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Welfare_CS_QueryGrowthFund::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Welfare_CS_QueryGrowthFund::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Welfare_CS_QueryGrowthFund::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Welfare_CS_QueryGrowthFund::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Welfare_CS_QueryGrowthFund::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Welfare_CS_QueryGrowthFund* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Welfare_CS_QueryGrowthFund*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Welfare_CS_QueryGrowthFund::MergeFrom(const Welfare_CS_QueryGrowthFund& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Welfare_CS_QueryGrowthFund::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Welfare_CS_QueryGrowthFund::CopyFrom(const Welfare_CS_QueryGrowthFund& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Welfare_CS_QueryGrowthFund::IsInitialized() const {

  return true;
}

void Welfare_CS_QueryGrowthFund::Swap(Welfare_CS_QueryGrowthFund* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Welfare_CS_QueryGrowthFund::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Welfare_CS_QueryGrowthFund_descriptor_;
  metadata.reflection = Welfare_CS_QueryGrowthFund_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Welfare_CS_DoGrowthFund::kIdFieldNumber;
#endif  // !_MSC_VER

Welfare_CS_DoGrowthFund::Welfare_CS_DoGrowthFund()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Welfare_CS_DoGrowthFund::InitAsDefaultInstance() {
}

Welfare_CS_DoGrowthFund::Welfare_CS_DoGrowthFund(const Welfare_CS_DoGrowthFund& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Welfare_CS_DoGrowthFund::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Welfare_CS_DoGrowthFund::~Welfare_CS_DoGrowthFund() {
  SharedDtor();
}

void Welfare_CS_DoGrowthFund::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Welfare_CS_DoGrowthFund::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Welfare_CS_DoGrowthFund::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Welfare_CS_DoGrowthFund_descriptor_;
}

const Welfare_CS_DoGrowthFund& Welfare_CS_DoGrowthFund::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_welfare_2eproto();
  return *default_instance_;
}

Welfare_CS_DoGrowthFund* Welfare_CS_DoGrowthFund::default_instance_ = NULL;

Welfare_CS_DoGrowthFund* Welfare_CS_DoGrowthFund::New() const {
  return new Welfare_CS_DoGrowthFund;
}

void Welfare_CS_DoGrowthFund::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Welfare_CS_DoGrowthFund::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Welfare_CS_DoGrowthFund::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Welfare_CS_DoGrowthFund::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Welfare_CS_DoGrowthFund::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Welfare_CS_DoGrowthFund::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Welfare_CS_DoGrowthFund* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Welfare_CS_DoGrowthFund*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Welfare_CS_DoGrowthFund::MergeFrom(const Welfare_CS_DoGrowthFund& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Welfare_CS_DoGrowthFund::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Welfare_CS_DoGrowthFund::CopyFrom(const Welfare_CS_DoGrowthFund& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Welfare_CS_DoGrowthFund::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Welfare_CS_DoGrowthFund::Swap(Welfare_CS_DoGrowthFund* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Welfare_CS_DoGrowthFund::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Welfare_CS_DoGrowthFund_descriptor_;
  metadata.reflection = Welfare_CS_DoGrowthFund_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Welfare_CS_QueryFirstCharge::Welfare_CS_QueryFirstCharge()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Welfare_CS_QueryFirstCharge::InitAsDefaultInstance() {
}

Welfare_CS_QueryFirstCharge::Welfare_CS_QueryFirstCharge(const Welfare_CS_QueryFirstCharge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Welfare_CS_QueryFirstCharge::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Welfare_CS_QueryFirstCharge::~Welfare_CS_QueryFirstCharge() {
  SharedDtor();
}

void Welfare_CS_QueryFirstCharge::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Welfare_CS_QueryFirstCharge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Welfare_CS_QueryFirstCharge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Welfare_CS_QueryFirstCharge_descriptor_;
}

const Welfare_CS_QueryFirstCharge& Welfare_CS_QueryFirstCharge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_welfare_2eproto();
  return *default_instance_;
}

Welfare_CS_QueryFirstCharge* Welfare_CS_QueryFirstCharge::default_instance_ = NULL;

Welfare_CS_QueryFirstCharge* Welfare_CS_QueryFirstCharge::New() const {
  return new Welfare_CS_QueryFirstCharge;
}

void Welfare_CS_QueryFirstCharge::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Welfare_CS_QueryFirstCharge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Welfare_CS_QueryFirstCharge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Welfare_CS_QueryFirstCharge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Welfare_CS_QueryFirstCharge::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Welfare_CS_QueryFirstCharge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Welfare_CS_QueryFirstCharge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Welfare_CS_QueryFirstCharge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Welfare_CS_QueryFirstCharge::MergeFrom(const Welfare_CS_QueryFirstCharge& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Welfare_CS_QueryFirstCharge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Welfare_CS_QueryFirstCharge::CopyFrom(const Welfare_CS_QueryFirstCharge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Welfare_CS_QueryFirstCharge::IsInitialized() const {

  return true;
}

void Welfare_CS_QueryFirstCharge::Swap(Welfare_CS_QueryFirstCharge* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Welfare_CS_QueryFirstCharge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Welfare_CS_QueryFirstCharge_descriptor_;
  metadata.reflection = Welfare_CS_QueryFirstCharge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Welfare_CS_DoFirstCharge::kIsFirstFieldNumber;
const int Welfare_CS_DoFirstCharge::kDailyFirstIdFieldNumber;
const int Welfare_CS_DoFirstCharge::kIndexIdFieldNumber;
#endif  // !_MSC_VER

Welfare_CS_DoFirstCharge::Welfare_CS_DoFirstCharge()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Welfare_CS_DoFirstCharge::InitAsDefaultInstance() {
}

Welfare_CS_DoFirstCharge::Welfare_CS_DoFirstCharge(const Welfare_CS_DoFirstCharge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Welfare_CS_DoFirstCharge::SharedCtor() {
  _cached_size_ = 0;
  isfirst_ = false;
  dailyfirstid_ = 0;
  indexid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Welfare_CS_DoFirstCharge::~Welfare_CS_DoFirstCharge() {
  SharedDtor();
}

void Welfare_CS_DoFirstCharge::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Welfare_CS_DoFirstCharge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Welfare_CS_DoFirstCharge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Welfare_CS_DoFirstCharge_descriptor_;
}

const Welfare_CS_DoFirstCharge& Welfare_CS_DoFirstCharge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_welfare_2eproto();
  return *default_instance_;
}

Welfare_CS_DoFirstCharge* Welfare_CS_DoFirstCharge::default_instance_ = NULL;

Welfare_CS_DoFirstCharge* Welfare_CS_DoFirstCharge::New() const {
  return new Welfare_CS_DoFirstCharge;
}

void Welfare_CS_DoFirstCharge::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    isfirst_ = false;
    dailyfirstid_ = 0;
    indexid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Welfare_CS_DoFirstCharge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool isFirst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfirst_)));
          set_has_isfirst();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dailyFirstId;
        break;
      }

      // optional int32 dailyFirstId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dailyFirstId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dailyfirstid_)));
          set_has_dailyfirstid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_indexId;
        break;
      }

      // optional int32 indexId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_indexId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &indexid_)));
          set_has_indexid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Welfare_CS_DoFirstCharge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool isFirst = 1;
  if (has_isfirst()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isfirst(), output);
  }

  // optional int32 dailyFirstId = 2;
  if (has_dailyfirstid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dailyfirstid(), output);
  }

  // optional int32 indexId = 3;
  if (has_indexid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->indexid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Welfare_CS_DoFirstCharge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool isFirst = 1;
  if (has_isfirst()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isfirst(), target);
  }

  // optional int32 dailyFirstId = 2;
  if (has_dailyfirstid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dailyfirstid(), target);
  }

  // optional int32 indexId = 3;
  if (has_indexid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->indexid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Welfare_CS_DoFirstCharge::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool isFirst = 1;
    if (has_isfirst()) {
      total_size += 1 + 1;
    }

    // optional int32 dailyFirstId = 2;
    if (has_dailyfirstid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dailyfirstid());
    }

    // optional int32 indexId = 3;
    if (has_indexid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->indexid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Welfare_CS_DoFirstCharge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Welfare_CS_DoFirstCharge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Welfare_CS_DoFirstCharge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Welfare_CS_DoFirstCharge::MergeFrom(const Welfare_CS_DoFirstCharge& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isfirst()) {
      set_isfirst(from.isfirst());
    }
    if (from.has_dailyfirstid()) {
      set_dailyfirstid(from.dailyfirstid());
    }
    if (from.has_indexid()) {
      set_indexid(from.indexid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Welfare_CS_DoFirstCharge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Welfare_CS_DoFirstCharge::CopyFrom(const Welfare_CS_DoFirstCharge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Welfare_CS_DoFirstCharge::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Welfare_CS_DoFirstCharge::Swap(Welfare_CS_DoFirstCharge* other) {
  if (other != this) {
    std::swap(isfirst_, other->isfirst_);
    std::swap(dailyfirstid_, other->dailyfirstid_);
    std::swap(indexid_, other->indexid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Welfare_CS_DoFirstCharge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Welfare_CS_DoFirstCharge_descriptor_;
  metadata.reflection = Welfare_CS_DoFirstCharge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Welfare_CS_QueryDiamondGift::Welfare_CS_QueryDiamondGift()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Welfare_CS_QueryDiamondGift::InitAsDefaultInstance() {
}

Welfare_CS_QueryDiamondGift::Welfare_CS_QueryDiamondGift(const Welfare_CS_QueryDiamondGift& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Welfare_CS_QueryDiamondGift::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Welfare_CS_QueryDiamondGift::~Welfare_CS_QueryDiamondGift() {
  SharedDtor();
}

void Welfare_CS_QueryDiamondGift::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Welfare_CS_QueryDiamondGift::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Welfare_CS_QueryDiamondGift::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Welfare_CS_QueryDiamondGift_descriptor_;
}

const Welfare_CS_QueryDiamondGift& Welfare_CS_QueryDiamondGift::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_welfare_2eproto();
  return *default_instance_;
}

Welfare_CS_QueryDiamondGift* Welfare_CS_QueryDiamondGift::default_instance_ = NULL;

Welfare_CS_QueryDiamondGift* Welfare_CS_QueryDiamondGift::New() const {
  return new Welfare_CS_QueryDiamondGift;
}

void Welfare_CS_QueryDiamondGift::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Welfare_CS_QueryDiamondGift::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Welfare_CS_QueryDiamondGift::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Welfare_CS_QueryDiamondGift::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Welfare_CS_QueryDiamondGift::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Welfare_CS_QueryDiamondGift::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Welfare_CS_QueryDiamondGift* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Welfare_CS_QueryDiamondGift*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Welfare_CS_QueryDiamondGift::MergeFrom(const Welfare_CS_QueryDiamondGift& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Welfare_CS_QueryDiamondGift::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Welfare_CS_QueryDiamondGift::CopyFrom(const Welfare_CS_QueryDiamondGift& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Welfare_CS_QueryDiamondGift::IsInitialized() const {

  return true;
}

void Welfare_CS_QueryDiamondGift::Swap(Welfare_CS_QueryDiamondGift* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Welfare_CS_QueryDiamondGift::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Welfare_CS_QueryDiamondGift_descriptor_;
  metadata.reflection = Welfare_CS_QueryDiamondGift_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Welfare_CS_DoDiamondGift::kIdFieldNumber;
#endif  // !_MSC_VER

Welfare_CS_DoDiamondGift::Welfare_CS_DoDiamondGift()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Welfare_CS_DoDiamondGift::InitAsDefaultInstance() {
}

Welfare_CS_DoDiamondGift::Welfare_CS_DoDiamondGift(const Welfare_CS_DoDiamondGift& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Welfare_CS_DoDiamondGift::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Welfare_CS_DoDiamondGift::~Welfare_CS_DoDiamondGift() {
  SharedDtor();
}

void Welfare_CS_DoDiamondGift::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Welfare_CS_DoDiamondGift::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Welfare_CS_DoDiamondGift::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Welfare_CS_DoDiamondGift_descriptor_;
}

const Welfare_CS_DoDiamondGift& Welfare_CS_DoDiamondGift::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_welfare_2eproto();
  return *default_instance_;
}

Welfare_CS_DoDiamondGift* Welfare_CS_DoDiamondGift::default_instance_ = NULL;

Welfare_CS_DoDiamondGift* Welfare_CS_DoDiamondGift::New() const {
  return new Welfare_CS_DoDiamondGift;
}

void Welfare_CS_DoDiamondGift::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Welfare_CS_DoDiamondGift::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Welfare_CS_DoDiamondGift::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Welfare_CS_DoDiamondGift::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Welfare_CS_DoDiamondGift::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Welfare_CS_DoDiamondGift::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Welfare_CS_DoDiamondGift* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Welfare_CS_DoDiamondGift*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Welfare_CS_DoDiamondGift::MergeFrom(const Welfare_CS_DoDiamondGift& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Welfare_CS_DoDiamondGift::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Welfare_CS_DoDiamondGift::CopyFrom(const Welfare_CS_DoDiamondGift& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Welfare_CS_DoDiamondGift::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Welfare_CS_DoDiamondGift::Swap(Welfare_CS_DoDiamondGift* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Welfare_CS_DoDiamondGift::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Welfare_CS_DoDiamondGift_descriptor_;
  metadata.reflection = Welfare_CS_DoDiamondGift_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Welfare_SC_QueryGrowthFund::kIsopenedFieldNumber;
const int Welfare_SC_QueryGrowthFund::kIshaveextraFieldNumber;
const int Welfare_SC_QueryGrowthFund::kInfoFieldNumber;
#endif  // !_MSC_VER

Welfare_SC_QueryGrowthFund::Welfare_SC_QueryGrowthFund()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Welfare_SC_QueryGrowthFund::InitAsDefaultInstance() {
}

Welfare_SC_QueryGrowthFund::Welfare_SC_QueryGrowthFund(const Welfare_SC_QueryGrowthFund& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Welfare_SC_QueryGrowthFund::SharedCtor() {
  _cached_size_ = 0;
  isopened_ = 0;
  ishaveextra_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Welfare_SC_QueryGrowthFund::~Welfare_SC_QueryGrowthFund() {
  SharedDtor();
}

void Welfare_SC_QueryGrowthFund::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Welfare_SC_QueryGrowthFund::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Welfare_SC_QueryGrowthFund::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Welfare_SC_QueryGrowthFund_descriptor_;
}

const Welfare_SC_QueryGrowthFund& Welfare_SC_QueryGrowthFund::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_welfare_2eproto();
  return *default_instance_;
}

Welfare_SC_QueryGrowthFund* Welfare_SC_QueryGrowthFund::default_instance_ = NULL;

Welfare_SC_QueryGrowthFund* Welfare_SC_QueryGrowthFund::New() const {
  return new Welfare_SC_QueryGrowthFund;
}

void Welfare_SC_QueryGrowthFund::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    isopened_ = 0;
    ishaveextra_ = 0;
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Welfare_SC_QueryGrowthFund::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 isopened = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isopened_)));
          set_has_isopened();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ishaveextra;
        break;
      }

      // required int32 ishaveextra = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ishaveextra:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ishaveextra_)));
          set_has_ishaveextra();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_info;
        break;
      }

      // repeated .proto.message.GrowthFundInfo info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Welfare_SC_QueryGrowthFund::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 isopened = 1;
  if (has_isopened()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->isopened(), output);
  }

  // required int32 ishaveextra = 2;
  if (has_ishaveextra()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ishaveextra(), output);
  }

  // repeated .proto.message.GrowthFundInfo info = 3;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Welfare_SC_QueryGrowthFund::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 isopened = 1;
  if (has_isopened()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->isopened(), target);
  }

  // required int32 ishaveextra = 2;
  if (has_ishaveextra()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ishaveextra(), target);
  }

  // repeated .proto.message.GrowthFundInfo info = 3;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Welfare_SC_QueryGrowthFund::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 isopened = 1;
    if (has_isopened()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isopened());
    }

    // required int32 ishaveextra = 2;
    if (has_ishaveextra()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ishaveextra());
    }

  }
  // repeated .proto.message.GrowthFundInfo info = 3;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Welfare_SC_QueryGrowthFund::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Welfare_SC_QueryGrowthFund* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Welfare_SC_QueryGrowthFund*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Welfare_SC_QueryGrowthFund::MergeFrom(const Welfare_SC_QueryGrowthFund& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isopened()) {
      set_isopened(from.isopened());
    }
    if (from.has_ishaveextra()) {
      set_ishaveextra(from.ishaveextra());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Welfare_SC_QueryGrowthFund::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Welfare_SC_QueryGrowthFund::CopyFrom(const Welfare_SC_QueryGrowthFund& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Welfare_SC_QueryGrowthFund::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < info_size(); i++) {
    if (!this->info(i).IsInitialized()) return false;
  }
  return true;
}

void Welfare_SC_QueryGrowthFund::Swap(Welfare_SC_QueryGrowthFund* other) {
  if (other != this) {
    std::swap(isopened_, other->isopened_);
    std::swap(ishaveextra_, other->ishaveextra_);
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Welfare_SC_QueryGrowthFund::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Welfare_SC_QueryGrowthFund_descriptor_;
  metadata.reflection = Welfare_SC_QueryGrowthFund_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Welfare_SC_DoGrowthFund::kResultFieldNumber;
const int Welfare_SC_DoGrowthFund::kIdFieldNumber;
const int Welfare_SC_DoGrowthFund::kAwardstatusFieldNumber;
#endif  // !_MSC_VER

Welfare_SC_DoGrowthFund::Welfare_SC_DoGrowthFund()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Welfare_SC_DoGrowthFund::InitAsDefaultInstance() {
}

Welfare_SC_DoGrowthFund::Welfare_SC_DoGrowthFund(const Welfare_SC_DoGrowthFund& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Welfare_SC_DoGrowthFund::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  id_ = 0u;
  awardstatus_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Welfare_SC_DoGrowthFund::~Welfare_SC_DoGrowthFund() {
  SharedDtor();
}

void Welfare_SC_DoGrowthFund::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Welfare_SC_DoGrowthFund::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Welfare_SC_DoGrowthFund::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Welfare_SC_DoGrowthFund_descriptor_;
}

const Welfare_SC_DoGrowthFund& Welfare_SC_DoGrowthFund::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_welfare_2eproto();
  return *default_instance_;
}

Welfare_SC_DoGrowthFund* Welfare_SC_DoGrowthFund::default_instance_ = NULL;

Welfare_SC_DoGrowthFund* Welfare_SC_DoGrowthFund::New() const {
  return new Welfare_SC_DoGrowthFund;
}

void Welfare_SC_DoGrowthFund::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
    id_ = 0u;
    awardstatus_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Welfare_SC_DoGrowthFund::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // required uint32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_awardstatus;
        break;
      }

      // required int32 awardstatus = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_awardstatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &awardstatus_)));
          set_has_awardstatus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Welfare_SC_DoGrowthFund::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  // required uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // required int32 awardstatus = 3;
  if (has_awardstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->awardstatus(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Welfare_SC_DoGrowthFund::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  // required uint32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  // required int32 awardstatus = 3;
  if (has_awardstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->awardstatus(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Welfare_SC_DoGrowthFund::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // required uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required int32 awardstatus = 3;
    if (has_awardstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->awardstatus());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Welfare_SC_DoGrowthFund::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Welfare_SC_DoGrowthFund* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Welfare_SC_DoGrowthFund*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Welfare_SC_DoGrowthFund::MergeFrom(const Welfare_SC_DoGrowthFund& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_awardstatus()) {
      set_awardstatus(from.awardstatus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Welfare_SC_DoGrowthFund::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Welfare_SC_DoGrowthFund::CopyFrom(const Welfare_SC_DoGrowthFund& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Welfare_SC_DoGrowthFund::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Welfare_SC_DoGrowthFund::Swap(Welfare_SC_DoGrowthFund* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(id_, other->id_);
    std::swap(awardstatus_, other->awardstatus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Welfare_SC_DoGrowthFund::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Welfare_SC_DoGrowthFund_descriptor_;
  metadata.reflection = Welfare_SC_DoGrowthFund_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Welfare_SC_QueryFirstCharge::kFirstawardstatusFieldNumber;
const int Welfare_SC_QueryFirstCharge::kInfoFieldNumber;
const int Welfare_SC_QueryFirstCharge::kTodayTotalFieldNumber;
#endif  // !_MSC_VER

Welfare_SC_QueryFirstCharge::Welfare_SC_QueryFirstCharge()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Welfare_SC_QueryFirstCharge::InitAsDefaultInstance() {
}

Welfare_SC_QueryFirstCharge::Welfare_SC_QueryFirstCharge(const Welfare_SC_QueryFirstCharge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Welfare_SC_QueryFirstCharge::SharedCtor() {
  _cached_size_ = 0;
  firstawardstatus_ = 0;
  todaytotal_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Welfare_SC_QueryFirstCharge::~Welfare_SC_QueryFirstCharge() {
  SharedDtor();
}

void Welfare_SC_QueryFirstCharge::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Welfare_SC_QueryFirstCharge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Welfare_SC_QueryFirstCharge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Welfare_SC_QueryFirstCharge_descriptor_;
}

const Welfare_SC_QueryFirstCharge& Welfare_SC_QueryFirstCharge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_welfare_2eproto();
  return *default_instance_;
}

Welfare_SC_QueryFirstCharge* Welfare_SC_QueryFirstCharge::default_instance_ = NULL;

Welfare_SC_QueryFirstCharge* Welfare_SC_QueryFirstCharge::New() const {
  return new Welfare_SC_QueryFirstCharge;
}

void Welfare_SC_QueryFirstCharge::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    firstawardstatus_ = 0;
    todaytotal_ = 0;
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Welfare_SC_QueryFirstCharge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 firstawardstatus = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &firstawardstatus_)));
          set_has_firstawardstatus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // repeated .proto.message.SingleAwardData info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        if (input->ExpectTag(24)) goto parse_todayTotal;
        break;
      }

      // required int32 todayTotal = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_todayTotal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &todaytotal_)));
          set_has_todaytotal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Welfare_SC_QueryFirstCharge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 firstawardstatus = 1;
  if (has_firstawardstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->firstawardstatus(), output);
  }

  // repeated .proto.message.SingleAwardData info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(i), output);
  }

  // required int32 todayTotal = 3;
  if (has_todaytotal()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->todaytotal(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Welfare_SC_QueryFirstCharge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 firstawardstatus = 1;
  if (has_firstawardstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->firstawardstatus(), target);
  }

  // repeated .proto.message.SingleAwardData info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(i), target);
  }

  // required int32 todayTotal = 3;
  if (has_todaytotal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->todaytotal(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Welfare_SC_QueryFirstCharge::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 firstawardstatus = 1;
    if (has_firstawardstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->firstawardstatus());
    }

    // required int32 todayTotal = 3;
    if (has_todaytotal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->todaytotal());
    }

  }
  // repeated .proto.message.SingleAwardData info = 2;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Welfare_SC_QueryFirstCharge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Welfare_SC_QueryFirstCharge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Welfare_SC_QueryFirstCharge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Welfare_SC_QueryFirstCharge::MergeFrom(const Welfare_SC_QueryFirstCharge& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_firstawardstatus()) {
      set_firstawardstatus(from.firstawardstatus());
    }
    if (from.has_todaytotal()) {
      set_todaytotal(from.todaytotal());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Welfare_SC_QueryFirstCharge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Welfare_SC_QueryFirstCharge::CopyFrom(const Welfare_SC_QueryFirstCharge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Welfare_SC_QueryFirstCharge::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  for (int i = 0; i < info_size(); i++) {
    if (!this->info(i).IsInitialized()) return false;
  }
  return true;
}

void Welfare_SC_QueryFirstCharge::Swap(Welfare_SC_QueryFirstCharge* other) {
  if (other != this) {
    std::swap(firstawardstatus_, other->firstawardstatus_);
    info_.Swap(&other->info_);
    std::swap(todaytotal_, other->todaytotal_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Welfare_SC_QueryFirstCharge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Welfare_SC_QueryFirstCharge_descriptor_;
  metadata.reflection = Welfare_SC_QueryFirstCharge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Welfare_SC_DoFirstCharge::kResultFieldNumber;
#endif  // !_MSC_VER

Welfare_SC_DoFirstCharge::Welfare_SC_DoFirstCharge()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Welfare_SC_DoFirstCharge::InitAsDefaultInstance() {
}

Welfare_SC_DoFirstCharge::Welfare_SC_DoFirstCharge(const Welfare_SC_DoFirstCharge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Welfare_SC_DoFirstCharge::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Welfare_SC_DoFirstCharge::~Welfare_SC_DoFirstCharge() {
  SharedDtor();
}

void Welfare_SC_DoFirstCharge::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Welfare_SC_DoFirstCharge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Welfare_SC_DoFirstCharge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Welfare_SC_DoFirstCharge_descriptor_;
}

const Welfare_SC_DoFirstCharge& Welfare_SC_DoFirstCharge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_welfare_2eproto();
  return *default_instance_;
}

Welfare_SC_DoFirstCharge* Welfare_SC_DoFirstCharge::default_instance_ = NULL;

Welfare_SC_DoFirstCharge* Welfare_SC_DoFirstCharge::New() const {
  return new Welfare_SC_DoFirstCharge;
}

void Welfare_SC_DoFirstCharge::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Welfare_SC_DoFirstCharge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Welfare_SC_DoFirstCharge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Welfare_SC_DoFirstCharge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Welfare_SC_DoFirstCharge::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Welfare_SC_DoFirstCharge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Welfare_SC_DoFirstCharge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Welfare_SC_DoFirstCharge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Welfare_SC_DoFirstCharge::MergeFrom(const Welfare_SC_DoFirstCharge& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Welfare_SC_DoFirstCharge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Welfare_SC_DoFirstCharge::CopyFrom(const Welfare_SC_DoFirstCharge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Welfare_SC_DoFirstCharge::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Welfare_SC_DoFirstCharge::Swap(Welfare_SC_DoFirstCharge* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Welfare_SC_DoFirstCharge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Welfare_SC_DoFirstCharge_descriptor_;
  metadata.reflection = Welfare_SC_DoFirstCharge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Welfare_SC_QueryDiamondGift::kInfoFieldNumber;
#endif  // !_MSC_VER

Welfare_SC_QueryDiamondGift::Welfare_SC_QueryDiamondGift()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Welfare_SC_QueryDiamondGift::InitAsDefaultInstance() {
}

Welfare_SC_QueryDiamondGift::Welfare_SC_QueryDiamondGift(const Welfare_SC_QueryDiamondGift& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Welfare_SC_QueryDiamondGift::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Welfare_SC_QueryDiamondGift::~Welfare_SC_QueryDiamondGift() {
  SharedDtor();
}

void Welfare_SC_QueryDiamondGift::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Welfare_SC_QueryDiamondGift::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Welfare_SC_QueryDiamondGift::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Welfare_SC_QueryDiamondGift_descriptor_;
}

const Welfare_SC_QueryDiamondGift& Welfare_SC_QueryDiamondGift::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_welfare_2eproto();
  return *default_instance_;
}

Welfare_SC_QueryDiamondGift* Welfare_SC_QueryDiamondGift::default_instance_ = NULL;

Welfare_SC_QueryDiamondGift* Welfare_SC_QueryDiamondGift::New() const {
  return new Welfare_SC_QueryDiamondGift;
}

void Welfare_SC_QueryDiamondGift::Clear() {
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Welfare_SC_QueryDiamondGift::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.message.DiamondGiftInfo info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Welfare_SC_QueryDiamondGift::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.message.DiamondGiftInfo info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Welfare_SC_QueryDiamondGift::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.message.DiamondGiftInfo info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Welfare_SC_QueryDiamondGift::ByteSize() const {
  int total_size = 0;

  // repeated .proto.message.DiamondGiftInfo info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Welfare_SC_QueryDiamondGift::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Welfare_SC_QueryDiamondGift* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Welfare_SC_QueryDiamondGift*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Welfare_SC_QueryDiamondGift::MergeFrom(const Welfare_SC_QueryDiamondGift& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Welfare_SC_QueryDiamondGift::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Welfare_SC_QueryDiamondGift::CopyFrom(const Welfare_SC_QueryDiamondGift& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Welfare_SC_QueryDiamondGift::IsInitialized() const {

  for (int i = 0; i < info_size(); i++) {
    if (!this->info(i).IsInitialized()) return false;
  }
  return true;
}

void Welfare_SC_QueryDiamondGift::Swap(Welfare_SC_QueryDiamondGift* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Welfare_SC_QueryDiamondGift::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Welfare_SC_QueryDiamondGift_descriptor_;
  metadata.reflection = Welfare_SC_QueryDiamondGift_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Welfare_SC_DoDiamondGift::kResultFieldNumber;
const int Welfare_SC_DoDiamondGift::kIdFieldNumber;
const int Welfare_SC_DoDiamondGift::kAwardstatusFieldNumber;
#endif  // !_MSC_VER

Welfare_SC_DoDiamondGift::Welfare_SC_DoDiamondGift()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Welfare_SC_DoDiamondGift::InitAsDefaultInstance() {
}

Welfare_SC_DoDiamondGift::Welfare_SC_DoDiamondGift(const Welfare_SC_DoDiamondGift& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Welfare_SC_DoDiamondGift::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  id_ = 0u;
  awardstatus_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Welfare_SC_DoDiamondGift::~Welfare_SC_DoDiamondGift() {
  SharedDtor();
}

void Welfare_SC_DoDiamondGift::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Welfare_SC_DoDiamondGift::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Welfare_SC_DoDiamondGift::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Welfare_SC_DoDiamondGift_descriptor_;
}

const Welfare_SC_DoDiamondGift& Welfare_SC_DoDiamondGift::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_welfare_2eproto();
  return *default_instance_;
}

Welfare_SC_DoDiamondGift* Welfare_SC_DoDiamondGift::default_instance_ = NULL;

Welfare_SC_DoDiamondGift* Welfare_SC_DoDiamondGift::New() const {
  return new Welfare_SC_DoDiamondGift;
}

void Welfare_SC_DoDiamondGift::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
    id_ = 0u;
    awardstatus_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Welfare_SC_DoDiamondGift::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // required uint32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_awardstatus;
        break;
      }

      // required int32 awardstatus = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_awardstatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &awardstatus_)));
          set_has_awardstatus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Welfare_SC_DoDiamondGift::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  // required uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // required int32 awardstatus = 3;
  if (has_awardstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->awardstatus(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Welfare_SC_DoDiamondGift::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  // required uint32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  // required int32 awardstatus = 3;
  if (has_awardstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->awardstatus(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Welfare_SC_DoDiamondGift::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // required uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required int32 awardstatus = 3;
    if (has_awardstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->awardstatus());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Welfare_SC_DoDiamondGift::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Welfare_SC_DoDiamondGift* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Welfare_SC_DoDiamondGift*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Welfare_SC_DoDiamondGift::MergeFrom(const Welfare_SC_DoDiamondGift& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_awardstatus()) {
      set_awardstatus(from.awardstatus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Welfare_SC_DoDiamondGift::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Welfare_SC_DoDiamondGift::CopyFrom(const Welfare_SC_DoDiamondGift& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Welfare_SC_DoDiamondGift::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Welfare_SC_DoDiamondGift::Swap(Welfare_SC_DoDiamondGift* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(id_, other->id_);
    std::swap(awardstatus_, other->awardstatus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Welfare_SC_DoDiamondGift::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Welfare_SC_DoDiamondGift_descriptor_;
  metadata.reflection = Welfare_SC_DoDiamondGift_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OpenInfo::kIdFieldNumber;
const int OpenInfo::kStatusFieldNumber;
const int OpenInfo::kLevelFieldNumber;
const int OpenInfo::kOrderFieldNumber;
#endif  // !_MSC_VER

OpenInfo::OpenInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OpenInfo::InitAsDefaultInstance() {
}

OpenInfo::OpenInfo(const OpenInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OpenInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  status_ = 0;
  level_ = 0;
  order_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpenInfo::~OpenInfo() {
  SharedDtor();
}

void OpenInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OpenInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpenInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpenInfo_descriptor_;
}

const OpenInfo& OpenInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_welfare_2eproto();
  return *default_instance_;
}

OpenInfo* OpenInfo::default_instance_ = NULL;

OpenInfo* OpenInfo::New() const {
  return new OpenInfo;
}

void OpenInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    status_ = 0;
    level_ = 0;
    order_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OpenInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required int32 status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // required int32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_order;
        break;
      }

      // required int32 order = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &order_)));
          set_has_order();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OpenInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->status(), output);
  }

  // required int32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }

  // required int32 order = 4;
  if (has_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->order(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OpenInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->status(), target);
  }

  // required int32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }

  // required int32 order = 4;
  if (has_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->order(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OpenInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // required int32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required int32 order = 4;
    if (has_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->order());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OpenInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OpenInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpenInfo::MergeFrom(const OpenInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_order()) {
      set_order(from.order());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OpenInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenInfo::CopyFrom(const OpenInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void OpenInfo::Swap(OpenInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(status_, other->status_);
    std::swap(level_, other->level_);
    std::swap(order_, other->order_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OpenInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpenInfo_descriptor_;
  metadata.reflection = OpenInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Welfare_SC_UpdateOpenInfo::kInfoFieldNumber;
#endif  // !_MSC_VER

Welfare_SC_UpdateOpenInfo::Welfare_SC_UpdateOpenInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Welfare_SC_UpdateOpenInfo::InitAsDefaultInstance() {
}

Welfare_SC_UpdateOpenInfo::Welfare_SC_UpdateOpenInfo(const Welfare_SC_UpdateOpenInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Welfare_SC_UpdateOpenInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Welfare_SC_UpdateOpenInfo::~Welfare_SC_UpdateOpenInfo() {
  SharedDtor();
}

void Welfare_SC_UpdateOpenInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Welfare_SC_UpdateOpenInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Welfare_SC_UpdateOpenInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Welfare_SC_UpdateOpenInfo_descriptor_;
}

const Welfare_SC_UpdateOpenInfo& Welfare_SC_UpdateOpenInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_welfare_2eproto();
  return *default_instance_;
}

Welfare_SC_UpdateOpenInfo* Welfare_SC_UpdateOpenInfo::default_instance_ = NULL;

Welfare_SC_UpdateOpenInfo* Welfare_SC_UpdateOpenInfo::New() const {
  return new Welfare_SC_UpdateOpenInfo;
}

void Welfare_SC_UpdateOpenInfo::Clear() {
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Welfare_SC_UpdateOpenInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.message.OpenInfo info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Welfare_SC_UpdateOpenInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.message.OpenInfo info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Welfare_SC_UpdateOpenInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.message.OpenInfo info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Welfare_SC_UpdateOpenInfo::ByteSize() const {
  int total_size = 0;

  // repeated .proto.message.OpenInfo info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Welfare_SC_UpdateOpenInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Welfare_SC_UpdateOpenInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Welfare_SC_UpdateOpenInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Welfare_SC_UpdateOpenInfo::MergeFrom(const Welfare_SC_UpdateOpenInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Welfare_SC_UpdateOpenInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Welfare_SC_UpdateOpenInfo::CopyFrom(const Welfare_SC_UpdateOpenInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Welfare_SC_UpdateOpenInfo::IsInitialized() const {

  for (int i = 0; i < info_size(); i++) {
    if (!this->info(i).IsInitialized()) return false;
  }
  return true;
}

void Welfare_SC_UpdateOpenInfo::Swap(Welfare_SC_UpdateOpenInfo* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Welfare_SC_UpdateOpenInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Welfare_SC_UpdateOpenInfo_descriptor_;
  metadata.reflection = Welfare_SC_UpdateOpenInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Welfare_CS_QueryGrowthLevel::Welfare_CS_QueryGrowthLevel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Welfare_CS_QueryGrowthLevel::InitAsDefaultInstance() {
}

Welfare_CS_QueryGrowthLevel::Welfare_CS_QueryGrowthLevel(const Welfare_CS_QueryGrowthLevel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Welfare_CS_QueryGrowthLevel::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Welfare_CS_QueryGrowthLevel::~Welfare_CS_QueryGrowthLevel() {
  SharedDtor();
}

void Welfare_CS_QueryGrowthLevel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Welfare_CS_QueryGrowthLevel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Welfare_CS_QueryGrowthLevel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Welfare_CS_QueryGrowthLevel_descriptor_;
}

const Welfare_CS_QueryGrowthLevel& Welfare_CS_QueryGrowthLevel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_welfare_2eproto();
  return *default_instance_;
}

Welfare_CS_QueryGrowthLevel* Welfare_CS_QueryGrowthLevel::default_instance_ = NULL;

Welfare_CS_QueryGrowthLevel* Welfare_CS_QueryGrowthLevel::New() const {
  return new Welfare_CS_QueryGrowthLevel;
}

void Welfare_CS_QueryGrowthLevel::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Welfare_CS_QueryGrowthLevel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Welfare_CS_QueryGrowthLevel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Welfare_CS_QueryGrowthLevel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Welfare_CS_QueryGrowthLevel::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Welfare_CS_QueryGrowthLevel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Welfare_CS_QueryGrowthLevel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Welfare_CS_QueryGrowthLevel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Welfare_CS_QueryGrowthLevel::MergeFrom(const Welfare_CS_QueryGrowthLevel& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Welfare_CS_QueryGrowthLevel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Welfare_CS_QueryGrowthLevel::CopyFrom(const Welfare_CS_QueryGrowthLevel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Welfare_CS_QueryGrowthLevel::IsInitialized() const {

  return true;
}

void Welfare_CS_QueryGrowthLevel::Swap(Welfare_CS_QueryGrowthLevel* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Welfare_CS_QueryGrowthLevel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Welfare_CS_QueryGrowthLevel_descriptor_;
  metadata.reflection = Welfare_CS_QueryGrowthLevel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Welfare_CS_DoGrowthLevel::kIdFieldNumber;
#endif  // !_MSC_VER

Welfare_CS_DoGrowthLevel::Welfare_CS_DoGrowthLevel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Welfare_CS_DoGrowthLevel::InitAsDefaultInstance() {
}

Welfare_CS_DoGrowthLevel::Welfare_CS_DoGrowthLevel(const Welfare_CS_DoGrowthLevel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Welfare_CS_DoGrowthLevel::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Welfare_CS_DoGrowthLevel::~Welfare_CS_DoGrowthLevel() {
  SharedDtor();
}

void Welfare_CS_DoGrowthLevel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Welfare_CS_DoGrowthLevel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Welfare_CS_DoGrowthLevel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Welfare_CS_DoGrowthLevel_descriptor_;
}

const Welfare_CS_DoGrowthLevel& Welfare_CS_DoGrowthLevel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_welfare_2eproto();
  return *default_instance_;
}

Welfare_CS_DoGrowthLevel* Welfare_CS_DoGrowthLevel::default_instance_ = NULL;

Welfare_CS_DoGrowthLevel* Welfare_CS_DoGrowthLevel::New() const {
  return new Welfare_CS_DoGrowthLevel;
}

void Welfare_CS_DoGrowthLevel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Welfare_CS_DoGrowthLevel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Welfare_CS_DoGrowthLevel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Welfare_CS_DoGrowthLevel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Welfare_CS_DoGrowthLevel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Welfare_CS_DoGrowthLevel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Welfare_CS_DoGrowthLevel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Welfare_CS_DoGrowthLevel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Welfare_CS_DoGrowthLevel::MergeFrom(const Welfare_CS_DoGrowthLevel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Welfare_CS_DoGrowthLevel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Welfare_CS_DoGrowthLevel::CopyFrom(const Welfare_CS_DoGrowthLevel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Welfare_CS_DoGrowthLevel::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Welfare_CS_DoGrowthLevel::Swap(Welfare_CS_DoGrowthLevel* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Welfare_CS_DoGrowthLevel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Welfare_CS_DoGrowthLevel_descriptor_;
  metadata.reflection = Welfare_CS_DoGrowthLevel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GrowthLevelInfo::kIdFieldNumber;
const int GrowthLevelInfo::kStatusFieldNumber;
#endif  // !_MSC_VER

GrowthLevelInfo::GrowthLevelInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GrowthLevelInfo::InitAsDefaultInstance() {
}

GrowthLevelInfo::GrowthLevelInfo(const GrowthLevelInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GrowthLevelInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GrowthLevelInfo::~GrowthLevelInfo() {
  SharedDtor();
}

void GrowthLevelInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GrowthLevelInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GrowthLevelInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GrowthLevelInfo_descriptor_;
}

const GrowthLevelInfo& GrowthLevelInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_welfare_2eproto();
  return *default_instance_;
}

GrowthLevelInfo* GrowthLevelInfo::default_instance_ = NULL;

GrowthLevelInfo* GrowthLevelInfo::New() const {
  return new GrowthLevelInfo;
}

void GrowthLevelInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GrowthLevelInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required int32 status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GrowthLevelInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GrowthLevelInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GrowthLevelInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GrowthLevelInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GrowthLevelInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GrowthLevelInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GrowthLevelInfo::MergeFrom(const GrowthLevelInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GrowthLevelInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GrowthLevelInfo::CopyFrom(const GrowthLevelInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GrowthLevelInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GrowthLevelInfo::Swap(GrowthLevelInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GrowthLevelInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GrowthLevelInfo_descriptor_;
  metadata.reflection = GrowthLevelInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Welfare_SC_QueryGrowthLevel::kInfoFieldNumber;
#endif  // !_MSC_VER

Welfare_SC_QueryGrowthLevel::Welfare_SC_QueryGrowthLevel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Welfare_SC_QueryGrowthLevel::InitAsDefaultInstance() {
}

Welfare_SC_QueryGrowthLevel::Welfare_SC_QueryGrowthLevel(const Welfare_SC_QueryGrowthLevel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Welfare_SC_QueryGrowthLevel::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Welfare_SC_QueryGrowthLevel::~Welfare_SC_QueryGrowthLevel() {
  SharedDtor();
}

void Welfare_SC_QueryGrowthLevel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Welfare_SC_QueryGrowthLevel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Welfare_SC_QueryGrowthLevel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Welfare_SC_QueryGrowthLevel_descriptor_;
}

const Welfare_SC_QueryGrowthLevel& Welfare_SC_QueryGrowthLevel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_welfare_2eproto();
  return *default_instance_;
}

Welfare_SC_QueryGrowthLevel* Welfare_SC_QueryGrowthLevel::default_instance_ = NULL;

Welfare_SC_QueryGrowthLevel* Welfare_SC_QueryGrowthLevel::New() const {
  return new Welfare_SC_QueryGrowthLevel;
}

void Welfare_SC_QueryGrowthLevel::Clear() {
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Welfare_SC_QueryGrowthLevel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.message.GrowthLevelInfo info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Welfare_SC_QueryGrowthLevel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.message.GrowthLevelInfo info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Welfare_SC_QueryGrowthLevel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.message.GrowthLevelInfo info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Welfare_SC_QueryGrowthLevel::ByteSize() const {
  int total_size = 0;

  // repeated .proto.message.GrowthLevelInfo info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Welfare_SC_QueryGrowthLevel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Welfare_SC_QueryGrowthLevel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Welfare_SC_QueryGrowthLevel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Welfare_SC_QueryGrowthLevel::MergeFrom(const Welfare_SC_QueryGrowthLevel& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Welfare_SC_QueryGrowthLevel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Welfare_SC_QueryGrowthLevel::CopyFrom(const Welfare_SC_QueryGrowthLevel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Welfare_SC_QueryGrowthLevel::IsInitialized() const {

  for (int i = 0; i < info_size(); i++) {
    if (!this->info(i).IsInitialized()) return false;
  }
  return true;
}

void Welfare_SC_QueryGrowthLevel::Swap(Welfare_SC_QueryGrowthLevel* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Welfare_SC_QueryGrowthLevel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Welfare_SC_QueryGrowthLevel_descriptor_;
  metadata.reflection = Welfare_SC_QueryGrowthLevel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Welfare_SC_DoGrowthLevel::kResultFieldNumber;
const int Welfare_SC_DoGrowthLevel::kIdFieldNumber;
const int Welfare_SC_DoGrowthLevel::kAwardstatusFieldNumber;
#endif  // !_MSC_VER

Welfare_SC_DoGrowthLevel::Welfare_SC_DoGrowthLevel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Welfare_SC_DoGrowthLevel::InitAsDefaultInstance() {
}

Welfare_SC_DoGrowthLevel::Welfare_SC_DoGrowthLevel(const Welfare_SC_DoGrowthLevel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Welfare_SC_DoGrowthLevel::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  id_ = 0;
  awardstatus_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Welfare_SC_DoGrowthLevel::~Welfare_SC_DoGrowthLevel() {
  SharedDtor();
}

void Welfare_SC_DoGrowthLevel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Welfare_SC_DoGrowthLevel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Welfare_SC_DoGrowthLevel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Welfare_SC_DoGrowthLevel_descriptor_;
}

const Welfare_SC_DoGrowthLevel& Welfare_SC_DoGrowthLevel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_welfare_2eproto();
  return *default_instance_;
}

Welfare_SC_DoGrowthLevel* Welfare_SC_DoGrowthLevel::default_instance_ = NULL;

Welfare_SC_DoGrowthLevel* Welfare_SC_DoGrowthLevel::New() const {
  return new Welfare_SC_DoGrowthLevel;
}

void Welfare_SC_DoGrowthLevel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    id_ = 0;
    awardstatus_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Welfare_SC_DoGrowthLevel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // required int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_awardstatus;
        break;
      }

      // required int32 awardstatus = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_awardstatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &awardstatus_)));
          set_has_awardstatus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Welfare_SC_DoGrowthLevel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // required int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // required int32 awardstatus = 3;
  if (has_awardstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->awardstatus(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Welfare_SC_DoGrowthLevel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // required int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // required int32 awardstatus = 3;
  if (has_awardstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->awardstatus(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Welfare_SC_DoGrowthLevel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 awardstatus = 3;
    if (has_awardstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->awardstatus());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Welfare_SC_DoGrowthLevel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Welfare_SC_DoGrowthLevel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Welfare_SC_DoGrowthLevel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Welfare_SC_DoGrowthLevel::MergeFrom(const Welfare_SC_DoGrowthLevel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_awardstatus()) {
      set_awardstatus(from.awardstatus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Welfare_SC_DoGrowthLevel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Welfare_SC_DoGrowthLevel::CopyFrom(const Welfare_SC_DoGrowthLevel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Welfare_SC_DoGrowthLevel::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Welfare_SC_DoGrowthLevel::Swap(Welfare_SC_DoGrowthLevel* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(id_, other->id_);
    std::swap(awardstatus_, other->awardstatus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Welfare_SC_DoGrowthLevel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Welfare_SC_DoGrowthLevel_descriptor_;
  metadata.reflection = Welfare_SC_DoGrowthLevel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LevelAward::kIdFieldNumber;
const int LevelAward::kReceivedFieldNumber;
#endif  // !_MSC_VER

LevelAward::LevelAward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LevelAward::InitAsDefaultInstance() {
}

LevelAward::LevelAward(const LevelAward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LevelAward::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  received_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LevelAward::~LevelAward() {
  SharedDtor();
}

void LevelAward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LevelAward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LevelAward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LevelAward_descriptor_;
}

const LevelAward& LevelAward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_welfare_2eproto();
  return *default_instance_;
}

LevelAward* LevelAward::default_instance_ = NULL;

LevelAward* LevelAward::New() const {
  return new LevelAward;
}

void LevelAward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    received_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LevelAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_received;
        break;
      }

      // required bool received = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_received:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &received_)));
          set_has_received();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LevelAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required bool received = 2;
  if (has_received()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->received(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LevelAward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required bool received = 2;
  if (has_received()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->received(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LevelAward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required bool received = 2;
    if (has_received()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LevelAward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LevelAward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LevelAward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LevelAward::MergeFrom(const LevelAward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_received()) {
      set_received(from.received());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LevelAward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LevelAward::CopyFrom(const LevelAward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LevelAward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void LevelAward::Swap(LevelAward* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(received_, other->received_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LevelAward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LevelAward_descriptor_;
  metadata.reflection = LevelAward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Welfare_CS_QueryLevelAward::Welfare_CS_QueryLevelAward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Welfare_CS_QueryLevelAward::InitAsDefaultInstance() {
}

Welfare_CS_QueryLevelAward::Welfare_CS_QueryLevelAward(const Welfare_CS_QueryLevelAward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Welfare_CS_QueryLevelAward::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Welfare_CS_QueryLevelAward::~Welfare_CS_QueryLevelAward() {
  SharedDtor();
}

void Welfare_CS_QueryLevelAward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Welfare_CS_QueryLevelAward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Welfare_CS_QueryLevelAward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Welfare_CS_QueryLevelAward_descriptor_;
}

const Welfare_CS_QueryLevelAward& Welfare_CS_QueryLevelAward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_welfare_2eproto();
  return *default_instance_;
}

Welfare_CS_QueryLevelAward* Welfare_CS_QueryLevelAward::default_instance_ = NULL;

Welfare_CS_QueryLevelAward* Welfare_CS_QueryLevelAward::New() const {
  return new Welfare_CS_QueryLevelAward;
}

void Welfare_CS_QueryLevelAward::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Welfare_CS_QueryLevelAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Welfare_CS_QueryLevelAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Welfare_CS_QueryLevelAward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Welfare_CS_QueryLevelAward::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Welfare_CS_QueryLevelAward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Welfare_CS_QueryLevelAward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Welfare_CS_QueryLevelAward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Welfare_CS_QueryLevelAward::MergeFrom(const Welfare_CS_QueryLevelAward& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Welfare_CS_QueryLevelAward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Welfare_CS_QueryLevelAward::CopyFrom(const Welfare_CS_QueryLevelAward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Welfare_CS_QueryLevelAward::IsInitialized() const {

  return true;
}

void Welfare_CS_QueryLevelAward::Swap(Welfare_CS_QueryLevelAward* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Welfare_CS_QueryLevelAward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Welfare_CS_QueryLevelAward_descriptor_;
  metadata.reflection = Welfare_CS_QueryLevelAward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Welfare_SC_QueryLevelAward::kResFieldNumber;
const int Welfare_SC_QueryLevelAward::kAwardsFieldNumber;
#endif  // !_MSC_VER

Welfare_SC_QueryLevelAward::Welfare_SC_QueryLevelAward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Welfare_SC_QueryLevelAward::InitAsDefaultInstance() {
}

Welfare_SC_QueryLevelAward::Welfare_SC_QueryLevelAward(const Welfare_SC_QueryLevelAward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Welfare_SC_QueryLevelAward::SharedCtor() {
  _cached_size_ = 0;
  res_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Welfare_SC_QueryLevelAward::~Welfare_SC_QueryLevelAward() {
  SharedDtor();
}

void Welfare_SC_QueryLevelAward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Welfare_SC_QueryLevelAward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Welfare_SC_QueryLevelAward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Welfare_SC_QueryLevelAward_descriptor_;
}

const Welfare_SC_QueryLevelAward& Welfare_SC_QueryLevelAward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_welfare_2eproto();
  return *default_instance_;
}

Welfare_SC_QueryLevelAward* Welfare_SC_QueryLevelAward::default_instance_ = NULL;

Welfare_SC_QueryLevelAward* Welfare_SC_QueryLevelAward::New() const {
  return new Welfare_SC_QueryLevelAward;
}

void Welfare_SC_QueryLevelAward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    res_ = 0;
  }
  awards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Welfare_SC_QueryLevelAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 res = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &res_)));
          set_has_res();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_awards;
        break;
      }

      // repeated .proto.message.LevelAward awards = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_awards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_awards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_awards;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Welfare_SC_QueryLevelAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 res = 1;
  if (has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->res(), output);
  }

  // repeated .proto.message.LevelAward awards = 2;
  for (int i = 0; i < this->awards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->awards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Welfare_SC_QueryLevelAward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 res = 1;
  if (has_res()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->res(), target);
  }

  // repeated .proto.message.LevelAward awards = 2;
  for (int i = 0; i < this->awards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->awards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Welfare_SC_QueryLevelAward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 res = 1;
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->res());
    }

  }
  // repeated .proto.message.LevelAward awards = 2;
  total_size += 1 * this->awards_size();
  for (int i = 0; i < this->awards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->awards(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Welfare_SC_QueryLevelAward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Welfare_SC_QueryLevelAward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Welfare_SC_QueryLevelAward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Welfare_SC_QueryLevelAward::MergeFrom(const Welfare_SC_QueryLevelAward& from) {
  GOOGLE_CHECK_NE(&from, this);
  awards_.MergeFrom(from.awards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_res()) {
      set_res(from.res());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Welfare_SC_QueryLevelAward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Welfare_SC_QueryLevelAward::CopyFrom(const Welfare_SC_QueryLevelAward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Welfare_SC_QueryLevelAward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < awards_size(); i++) {
    if (!this->awards(i).IsInitialized()) return false;
  }
  return true;
}

void Welfare_SC_QueryLevelAward::Swap(Welfare_SC_QueryLevelAward* other) {
  if (other != this) {
    std::swap(res_, other->res_);
    awards_.Swap(&other->awards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Welfare_SC_QueryLevelAward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Welfare_SC_QueryLevelAward_descriptor_;
  metadata.reflection = Welfare_SC_QueryLevelAward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Welfare_CS_DoLevelAward::kIdFieldNumber;
#endif  // !_MSC_VER

Welfare_CS_DoLevelAward::Welfare_CS_DoLevelAward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Welfare_CS_DoLevelAward::InitAsDefaultInstance() {
}

Welfare_CS_DoLevelAward::Welfare_CS_DoLevelAward(const Welfare_CS_DoLevelAward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Welfare_CS_DoLevelAward::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Welfare_CS_DoLevelAward::~Welfare_CS_DoLevelAward() {
  SharedDtor();
}

void Welfare_CS_DoLevelAward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Welfare_CS_DoLevelAward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Welfare_CS_DoLevelAward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Welfare_CS_DoLevelAward_descriptor_;
}

const Welfare_CS_DoLevelAward& Welfare_CS_DoLevelAward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_welfare_2eproto();
  return *default_instance_;
}

Welfare_CS_DoLevelAward* Welfare_CS_DoLevelAward::default_instance_ = NULL;

Welfare_CS_DoLevelAward* Welfare_CS_DoLevelAward::New() const {
  return new Welfare_CS_DoLevelAward;
}

void Welfare_CS_DoLevelAward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Welfare_CS_DoLevelAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Welfare_CS_DoLevelAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Welfare_CS_DoLevelAward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Welfare_CS_DoLevelAward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Welfare_CS_DoLevelAward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Welfare_CS_DoLevelAward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Welfare_CS_DoLevelAward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Welfare_CS_DoLevelAward::MergeFrom(const Welfare_CS_DoLevelAward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Welfare_CS_DoLevelAward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Welfare_CS_DoLevelAward::CopyFrom(const Welfare_CS_DoLevelAward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Welfare_CS_DoLevelAward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Welfare_CS_DoLevelAward::Swap(Welfare_CS_DoLevelAward* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Welfare_CS_DoLevelAward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Welfare_CS_DoLevelAward_descriptor_;
  metadata.reflection = Welfare_CS_DoLevelAward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Welfare_SC_DoLevelAward::kResFieldNumber;
const int Welfare_SC_DoLevelAward::kIdFieldNumber;
#endif  // !_MSC_VER

Welfare_SC_DoLevelAward::Welfare_SC_DoLevelAward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Welfare_SC_DoLevelAward::InitAsDefaultInstance() {
}

Welfare_SC_DoLevelAward::Welfare_SC_DoLevelAward(const Welfare_SC_DoLevelAward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Welfare_SC_DoLevelAward::SharedCtor() {
  _cached_size_ = 0;
  res_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Welfare_SC_DoLevelAward::~Welfare_SC_DoLevelAward() {
  SharedDtor();
}

void Welfare_SC_DoLevelAward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Welfare_SC_DoLevelAward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Welfare_SC_DoLevelAward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Welfare_SC_DoLevelAward_descriptor_;
}

const Welfare_SC_DoLevelAward& Welfare_SC_DoLevelAward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_welfare_2eproto();
  return *default_instance_;
}

Welfare_SC_DoLevelAward* Welfare_SC_DoLevelAward::default_instance_ = NULL;

Welfare_SC_DoLevelAward* Welfare_SC_DoLevelAward::New() const {
  return new Welfare_SC_DoLevelAward;
}

void Welfare_SC_DoLevelAward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    res_ = 0;
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Welfare_SC_DoLevelAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 res = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &res_)));
          set_has_res();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // required int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Welfare_SC_DoLevelAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 res = 1;
  if (has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->res(), output);
  }

  // required int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Welfare_SC_DoLevelAward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 res = 1;
  if (has_res()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->res(), target);
  }

  // required int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Welfare_SC_DoLevelAward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 res = 1;
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->res());
    }

    // required int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Welfare_SC_DoLevelAward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Welfare_SC_DoLevelAward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Welfare_SC_DoLevelAward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Welfare_SC_DoLevelAward::MergeFrom(const Welfare_SC_DoLevelAward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_res()) {
      set_res(from.res());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Welfare_SC_DoLevelAward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Welfare_SC_DoLevelAward::CopyFrom(const Welfare_SC_DoLevelAward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Welfare_SC_DoLevelAward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Welfare_SC_DoLevelAward::Swap(Welfare_SC_DoLevelAward* other) {
  if (other != this) {
    std::swap(res_, other->res_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Welfare_SC_DoLevelAward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Welfare_SC_DoLevelAward_descriptor_;
  metadata.reflection = Welfare_SC_DoLevelAward_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace proto

// @@protoc_insertion_point(global_scope)
