// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gm.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "gm.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace message {

namespace {

const ::google::protobuf::Descriptor* GM_CS_GMOper_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_CS_GMOper_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_SC_GMOper_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_SC_GMOper_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_gm_2eproto() {
  protobuf_AddDesc_gm_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "gm.proto");
  GOOGLE_CHECK(file != NULL);
  GM_CS_GMOper_descriptor_ = file->message_type(0);
  static const int GM_CS_GMOper_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_CS_GMOper, content_),
  };
  GM_CS_GMOper_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_CS_GMOper_descriptor_,
      GM_CS_GMOper::default_instance_,
      GM_CS_GMOper_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_CS_GMOper, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_CS_GMOper, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_CS_GMOper));
  GM_SC_GMOper_descriptor_ = file->message_type(1);
  static const int GM_SC_GMOper_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SC_GMOper, result_),
  };
  GM_SC_GMOper_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_SC_GMOper_descriptor_,
      GM_SC_GMOper::default_instance_,
      GM_SC_GMOper_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SC_GMOper, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SC_GMOper, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_SC_GMOper));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_gm_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_CS_GMOper_descriptor_, &GM_CS_GMOper::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_SC_GMOper_descriptor_, &GM_SC_GMOper::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_gm_2eproto() {
  delete GM_CS_GMOper::default_instance_;
  delete GM_CS_GMOper_reflection_;
  delete GM_SC_GMOper::default_instance_;
  delete GM_SC_GMOper_reflection_;
}

void protobuf_AddDesc_gm_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\010gm.proto\022\rproto.message\"\037\n\014GM_CS_GMOpe"
    "r\022\017\n\007content\030\001 \001(\t\"\036\n\014GM_SC_GMOper\022\016\n\006re"
    "sult\030\001 \001(\005B\017\n\rproto.message", 107);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gm.proto", &protobuf_RegisterTypes);
  GM_CS_GMOper::default_instance_ = new GM_CS_GMOper();
  GM_SC_GMOper::default_instance_ = new GM_SC_GMOper();
  GM_CS_GMOper::default_instance_->InitAsDefaultInstance();
  GM_SC_GMOper::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_gm_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_gm_2eproto {
  StaticDescriptorInitializer_gm_2eproto() {
    protobuf_AddDesc_gm_2eproto();
  }
} static_descriptor_initializer_gm_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int GM_CS_GMOper::kContentFieldNumber;
#endif  // !_MSC_VER

GM_CS_GMOper::GM_CS_GMOper()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_CS_GMOper::InitAsDefaultInstance() {
}

GM_CS_GMOper::GM_CS_GMOper(const GM_CS_GMOper& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_CS_GMOper::SharedCtor() {
  _cached_size_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_CS_GMOper::~GM_CS_GMOper() {
  SharedDtor();
}

void GM_CS_GMOper::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void GM_CS_GMOper::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_CS_GMOper::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_CS_GMOper_descriptor_;
}

const GM_CS_GMOper& GM_CS_GMOper::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gm_2eproto();
  return *default_instance_;
}

GM_CS_GMOper* GM_CS_GMOper::default_instance_ = NULL;

GM_CS_GMOper* GM_CS_GMOper::New() const {
  return new GM_CS_GMOper;
}

void GM_CS_GMOper::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_CS_GMOper::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string content = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_CS_GMOper::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string content = 1;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_CS_GMOper::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string content = 1;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_CS_GMOper::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string content = 1;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_CS_GMOper::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_CS_GMOper* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_CS_GMOper*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_CS_GMOper::MergeFrom(const GM_CS_GMOper& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_CS_GMOper::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_CS_GMOper::CopyFrom(const GM_CS_GMOper& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_CS_GMOper::IsInitialized() const {

  return true;
}

void GM_CS_GMOper::Swap(GM_CS_GMOper* other) {
  if (other != this) {
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_CS_GMOper::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_CS_GMOper_descriptor_;
  metadata.reflection = GM_CS_GMOper_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_SC_GMOper::kResultFieldNumber;
#endif  // !_MSC_VER

GM_SC_GMOper::GM_SC_GMOper()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_SC_GMOper::InitAsDefaultInstance() {
}

GM_SC_GMOper::GM_SC_GMOper(const GM_SC_GMOper& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_SC_GMOper::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_SC_GMOper::~GM_SC_GMOper() {
  SharedDtor();
}

void GM_SC_GMOper::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_SC_GMOper::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_SC_GMOper::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_SC_GMOper_descriptor_;
}

const GM_SC_GMOper& GM_SC_GMOper::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gm_2eproto();
  return *default_instance_;
}

GM_SC_GMOper* GM_SC_GMOper::default_instance_ = NULL;

GM_SC_GMOper* GM_SC_GMOper::New() const {
  return new GM_SC_GMOper;
}

void GM_SC_GMOper::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_SC_GMOper::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_SC_GMOper::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_SC_GMOper::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_SC_GMOper::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_SC_GMOper::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_SC_GMOper* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_SC_GMOper*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_SC_GMOper::MergeFrom(const GM_SC_GMOper& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_SC_GMOper::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_SC_GMOper::CopyFrom(const GM_SC_GMOper& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_SC_GMOper::IsInitialized() const {

  return true;
}

void GM_SC_GMOper::Swap(GM_SC_GMOper* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_SC_GMOper::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_SC_GMOper_descriptor_;
  metadata.reflection = GM_SC_GMOper_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace proto

// @@protoc_insertion_point(global_scope)
