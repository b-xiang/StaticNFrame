// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mail.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mail.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace message {

namespace {

const ::google::protobuf::Descriptor* MixMailData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MixMailData_reflection_ = NULL;
const ::google::protobuf::Descriptor* MailData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MailData_reflection_ = NULL;
const ::google::protobuf::Descriptor* Mail_CS_GetMailList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Mail_CS_GetMailList_reflection_ = NULL;
const ::google::protobuf::Descriptor* MailListItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MailListItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* Mail_SC_GetMailDetail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Mail_SC_GetMailDetail_reflection_ = NULL;
const ::google::protobuf::Descriptor* Mail_SC_GetMailList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Mail_SC_GetMailList_reflection_ = NULL;
const ::google::protobuf::Descriptor* Mail_CS_GetMailDetail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Mail_CS_GetMailDetail_reflection_ = NULL;
const ::google::protobuf::Descriptor* Mail_CS_GetMailAccessory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Mail_CS_GetMailAccessory_reflection_ = NULL;
const ::google::protobuf::Descriptor* Mail_SC_GetMailAccessory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Mail_SC_GetMailAccessory_reflection_ = NULL;
const ::google::protobuf::Descriptor* Mail_SC_NewMails_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Mail_SC_NewMails_reflection_ = NULL;
const ::google::protobuf::Descriptor* MailRecordData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MailRecordData_reflection_ = NULL;
const ::google::protobuf::Descriptor* MailBoxData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MailBoxData_reflection_ = NULL;
const ::google::protobuf::Descriptor* Mail_CS_DelMail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Mail_CS_DelMail_reflection_ = NULL;
const ::google::protobuf::Descriptor* Mail_SC_DelMail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Mail_SC_DelMail_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_mail_2eproto() {
  protobuf_AddDesc_mail_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "mail.proto");
  GOOGLE_CHECK(file != NULL);
  MixMailData_descriptor_ = file->message_type(0);
  static const int MixMailData_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MixMailData, templateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MixMailData, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MixMailData, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MixMailData, accessory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MixMailData, sendtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MixMailData, validitytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MixMailData, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MixMailData, add_content_),
  };
  MixMailData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MixMailData_descriptor_,
      MixMailData::default_instance_,
      MixMailData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MixMailData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MixMailData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MixMailData));
  MailData_descriptor_ = file->message_type(1);
  static const int MailData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailData, mailid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailData, ownerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailData, mixinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailData, mail_type_),
  };
  MailData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MailData_descriptor_,
      MailData::default_instance_,
      MailData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MailData));
  Mail_CS_GetMailList_descriptor_ = file->message_type(2);
  static const int Mail_CS_GetMailList_offsets_[1] = {
  };
  Mail_CS_GetMailList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Mail_CS_GetMailList_descriptor_,
      Mail_CS_GetMailList::default_instance_,
      Mail_CS_GetMailList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mail_CS_GetMailList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mail_CS_GetMailList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Mail_CS_GetMailList));
  MailListItem_descriptor_ = file->message_type(3);
  static const int MailListItem_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailListItem, mailid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailListItem, templateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailListItem, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailListItem, sendtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailListItem, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailListItem, haveaccessory_),
  };
  MailListItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MailListItem_descriptor_,
      MailListItem::default_instance_,
      MailListItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailListItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailListItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MailListItem));
  Mail_SC_GetMailDetail_descriptor_ = file->message_type(4);
  static const int Mail_SC_GetMailDetail_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mail_SC_GetMailDetail, mailid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mail_SC_GetMailDetail, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mail_SC_GetMailDetail, mixinfo_),
  };
  Mail_SC_GetMailDetail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Mail_SC_GetMailDetail_descriptor_,
      Mail_SC_GetMailDetail::default_instance_,
      Mail_SC_GetMailDetail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mail_SC_GetMailDetail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mail_SC_GetMailDetail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Mail_SC_GetMailDetail));
  Mail_SC_GetMailList_descriptor_ = file->message_type(5);
  static const int Mail_SC_GetMailList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mail_SC_GetMailList, maillist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mail_SC_GetMailList, curmail_),
  };
  Mail_SC_GetMailList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Mail_SC_GetMailList_descriptor_,
      Mail_SC_GetMailList::default_instance_,
      Mail_SC_GetMailList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mail_SC_GetMailList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mail_SC_GetMailList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Mail_SC_GetMailList));
  Mail_CS_GetMailDetail_descriptor_ = file->message_type(6);
  static const int Mail_CS_GetMailDetail_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mail_CS_GetMailDetail, mailid_),
  };
  Mail_CS_GetMailDetail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Mail_CS_GetMailDetail_descriptor_,
      Mail_CS_GetMailDetail::default_instance_,
      Mail_CS_GetMailDetail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mail_CS_GetMailDetail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mail_CS_GetMailDetail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Mail_CS_GetMailDetail));
  Mail_CS_GetMailAccessory_descriptor_ = file->message_type(7);
  static const int Mail_CS_GetMailAccessory_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mail_CS_GetMailAccessory, mailid_),
  };
  Mail_CS_GetMailAccessory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Mail_CS_GetMailAccessory_descriptor_,
      Mail_CS_GetMailAccessory::default_instance_,
      Mail_CS_GetMailAccessory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mail_CS_GetMailAccessory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mail_CS_GetMailAccessory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Mail_CS_GetMailAccessory));
  Mail_SC_GetMailAccessory_descriptor_ = file->message_type(8);
  static const int Mail_SC_GetMailAccessory_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mail_SC_GetMailAccessory, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mail_SC_GetMailAccessory, mailid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mail_SC_GetMailAccessory, accessory_),
  };
  Mail_SC_GetMailAccessory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Mail_SC_GetMailAccessory_descriptor_,
      Mail_SC_GetMailAccessory::default_instance_,
      Mail_SC_GetMailAccessory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mail_SC_GetMailAccessory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mail_SC_GetMailAccessory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Mail_SC_GetMailAccessory));
  Mail_SC_NewMails_descriptor_ = file->message_type(9);
  static const int Mail_SC_NewMails_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mail_SC_NewMails, newmailnum_),
  };
  Mail_SC_NewMails_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Mail_SC_NewMails_descriptor_,
      Mail_SC_NewMails::default_instance_,
      Mail_SC_NewMails_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mail_SC_NewMails, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mail_SC_NewMails, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Mail_SC_NewMails));
  MailRecordData_descriptor_ = file->message_type(10);
  static const int MailRecordData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailRecordData, mailid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailRecordData, flag_),
  };
  MailRecordData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MailRecordData_descriptor_,
      MailRecordData::default_instance_,
      MailRecordData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailRecordData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailRecordData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MailRecordData));
  MailBoxData_descriptor_ = file->message_type(11);
  static const int MailBoxData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailBoxData, maillist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailBoxData, mail_time_week_),
  };
  MailBoxData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MailBoxData_descriptor_,
      MailBoxData::default_instance_,
      MailBoxData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailBoxData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailBoxData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MailBoxData));
  Mail_CS_DelMail_descriptor_ = file->message_type(12);
  static const int Mail_CS_DelMail_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mail_CS_DelMail, mailid_),
  };
  Mail_CS_DelMail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Mail_CS_DelMail_descriptor_,
      Mail_CS_DelMail::default_instance_,
      Mail_CS_DelMail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mail_CS_DelMail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mail_CS_DelMail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Mail_CS_DelMail));
  Mail_SC_DelMail_descriptor_ = file->message_type(13);
  static const int Mail_SC_DelMail_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mail_SC_DelMail, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mail_SC_DelMail, mailid_),
  };
  Mail_SC_DelMail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Mail_SC_DelMail_descriptor_,
      Mail_SC_DelMail::default_instance_,
      Mail_SC_DelMail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mail_SC_DelMail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mail_SC_DelMail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Mail_SC_DelMail));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_mail_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MixMailData_descriptor_, &MixMailData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MailData_descriptor_, &MailData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Mail_CS_GetMailList_descriptor_, &Mail_CS_GetMailList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MailListItem_descriptor_, &MailListItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Mail_SC_GetMailDetail_descriptor_, &Mail_SC_GetMailDetail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Mail_SC_GetMailList_descriptor_, &Mail_SC_GetMailList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Mail_CS_GetMailDetail_descriptor_, &Mail_CS_GetMailDetail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Mail_CS_GetMailAccessory_descriptor_, &Mail_CS_GetMailAccessory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Mail_SC_GetMailAccessory_descriptor_, &Mail_SC_GetMailAccessory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Mail_SC_NewMails_descriptor_, &Mail_SC_NewMails::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MailRecordData_descriptor_, &MailRecordData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MailBoxData_descriptor_, &MailBoxData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Mail_CS_DelMail_descriptor_, &Mail_CS_DelMail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Mail_SC_DelMail_descriptor_, &Mail_SC_DelMail::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_mail_2eproto() {
  delete MixMailData::default_instance_;
  delete MixMailData_reflection_;
  delete MailData::default_instance_;
  delete MailData_reflection_;
  delete Mail_CS_GetMailList::default_instance_;
  delete Mail_CS_GetMailList_reflection_;
  delete MailListItem::default_instance_;
  delete MailListItem_reflection_;
  delete Mail_SC_GetMailDetail::default_instance_;
  delete Mail_SC_GetMailDetail_reflection_;
  delete Mail_SC_GetMailList::default_instance_;
  delete Mail_SC_GetMailList_reflection_;
  delete Mail_CS_GetMailDetail::default_instance_;
  delete Mail_CS_GetMailDetail_reflection_;
  delete Mail_CS_GetMailAccessory::default_instance_;
  delete Mail_CS_GetMailAccessory_reflection_;
  delete Mail_SC_GetMailAccessory::default_instance_;
  delete Mail_SC_GetMailAccessory_reflection_;
  delete Mail_SC_NewMails::default_instance_;
  delete Mail_SC_NewMails_reflection_;
  delete MailRecordData::default_instance_;
  delete MailRecordData_reflection_;
  delete MailBoxData::default_instance_;
  delete MailBoxData_reflection_;
  delete Mail_CS_DelMail::default_instance_;
  delete Mail_CS_DelMail_reflection_;
  delete Mail_SC_DelMail::default_instance_;
  delete Mail_SC_DelMail_reflection_;
}

void protobuf_AddDesc_mail_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::proto::message::protobuf_AddDesc_item_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nmail.proto\022\rproto.message\032\nitem.proto\""
    "\273\001\n\013MixMailData\022\022\n\ntemplateID\030\001 \001(\r\022\r\n\005t"
    "itle\030\002 \001(\t\022\017\n\007content\030\003 \001(\t\022-\n\taccessory"
    "\030\004 \003(\0132\032.proto.message.DropItemNum\022\020\n\010se"
    "ndTime\030\005 \002(\004\022\024\n\014validityTime\030\006 \002(\r\022\014\n\004fl"
    "ag\030\007 \001(\r\022\023\n\013add_content\030\010 \003(\t\"k\n\010MailDat"
    "a\022\016\n\006mailID\030\001 \002(\004\022\017\n\007ownerID\030\002 \002(\004\022+\n\007mi"
    "xinfo\030\003 \002(\0132\032.proto.message.MixMailData\022"
    "\021\n\tmail_type\030\004 \002(\r\"\025\n\023Mail_CS_GetMailLis"
    "t\"x\n\014MailListItem\022\016\n\006mailID\030\001 \002(\004\022\022\n\ntem"
    "plateID\030\002 \001(\r\022\r\n\005title\030\003 \001(\t\022\020\n\010sendTime"
    "\030\004 \002(\004\022\014\n\004flag\030\005 \002(\r\022\025\n\rhaveAccessory\030\006 "
    "\001(\010\"b\n\025Mail_SC_GetMailDetail\022\016\n\006mailID\030\001"
    " \002(\004\022\014\n\004flag\030\002 \002(\r\022+\n\007mixinfo\030\003 \002(\0132\032.pr"
    "oto.message.MixMailData\"{\n\023Mail_SC_GetMa"
    "ilList\022-\n\010mailList\030\001 \003(\0132\033.proto.message"
    ".MailListItem\0225\n\007curMail\030\002 \001(\0132$.proto.m"
    "essage.Mail_SC_GetMailDetail\"\'\n\025Mail_CS_"
    "GetMailDetail\022\016\n\006mailID\030\001 \002(\004\"*\n\030Mail_CS"
    "_GetMailAccessory\022\016\n\006mailID\030\001 \002(\004\"i\n\030Mai"
    "l_SC_GetMailAccessory\022\016\n\006result\030\001 \002(\r\022\016\n"
    "\006mailID\030\002 \002(\004\022-\n\taccessory\030\003 \003(\0132\032.proto"
    ".message.DropItemNum\"&\n\020Mail_SC_NewMails"
    "\022\022\n\nnewMailNum\030\001 \002(\005\".\n\016MailRecordData\022\016"
    "\n\006mailID\030\001 \002(\004\022\014\n\004flag\030\002 \002(\r\"V\n\013MailBoxD"
    "ata\022/\n\010mailList\030\001 \003(\0132\035.proto.message.Ma"
    "ilRecordData\022\026\n\016mail_time_week\030\002 \001(\004\"!\n\017"
    "Mail_CS_DelMail\022\016\n\006mailID\030\001 \002(\004\"1\n\017Mail_"
    "SC_DelMail\022\016\n\006result\030\001 \002(\r\022\016\n\006mailID\030\002 \002"
    "(\004B\017\n\rproto.message", 1179);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mail.proto", &protobuf_RegisterTypes);
  MixMailData::default_instance_ = new MixMailData();
  MailData::default_instance_ = new MailData();
  Mail_CS_GetMailList::default_instance_ = new Mail_CS_GetMailList();
  MailListItem::default_instance_ = new MailListItem();
  Mail_SC_GetMailDetail::default_instance_ = new Mail_SC_GetMailDetail();
  Mail_SC_GetMailList::default_instance_ = new Mail_SC_GetMailList();
  Mail_CS_GetMailDetail::default_instance_ = new Mail_CS_GetMailDetail();
  Mail_CS_GetMailAccessory::default_instance_ = new Mail_CS_GetMailAccessory();
  Mail_SC_GetMailAccessory::default_instance_ = new Mail_SC_GetMailAccessory();
  Mail_SC_NewMails::default_instance_ = new Mail_SC_NewMails();
  MailRecordData::default_instance_ = new MailRecordData();
  MailBoxData::default_instance_ = new MailBoxData();
  Mail_CS_DelMail::default_instance_ = new Mail_CS_DelMail();
  Mail_SC_DelMail::default_instance_ = new Mail_SC_DelMail();
  MixMailData::default_instance_->InitAsDefaultInstance();
  MailData::default_instance_->InitAsDefaultInstance();
  Mail_CS_GetMailList::default_instance_->InitAsDefaultInstance();
  MailListItem::default_instance_->InitAsDefaultInstance();
  Mail_SC_GetMailDetail::default_instance_->InitAsDefaultInstance();
  Mail_SC_GetMailList::default_instance_->InitAsDefaultInstance();
  Mail_CS_GetMailDetail::default_instance_->InitAsDefaultInstance();
  Mail_CS_GetMailAccessory::default_instance_->InitAsDefaultInstance();
  Mail_SC_GetMailAccessory::default_instance_->InitAsDefaultInstance();
  Mail_SC_NewMails::default_instance_->InitAsDefaultInstance();
  MailRecordData::default_instance_->InitAsDefaultInstance();
  MailBoxData::default_instance_->InitAsDefaultInstance();
  Mail_CS_DelMail::default_instance_->InitAsDefaultInstance();
  Mail_SC_DelMail::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_mail_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_mail_2eproto {
  StaticDescriptorInitializer_mail_2eproto() {
    protobuf_AddDesc_mail_2eproto();
  }
} static_descriptor_initializer_mail_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int MixMailData::kTemplateIDFieldNumber;
const int MixMailData::kTitleFieldNumber;
const int MixMailData::kContentFieldNumber;
const int MixMailData::kAccessoryFieldNumber;
const int MixMailData::kSendTimeFieldNumber;
const int MixMailData::kValidityTimeFieldNumber;
const int MixMailData::kFlagFieldNumber;
const int MixMailData::kAddContentFieldNumber;
#endif  // !_MSC_VER

MixMailData::MixMailData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MixMailData::InitAsDefaultInstance() {
}

MixMailData::MixMailData(const MixMailData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MixMailData::SharedCtor() {
  _cached_size_ = 0;
  templateid_ = 0u;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sendtime_ = GOOGLE_ULONGLONG(0);
  validitytime_ = 0u;
  flag_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MixMailData::~MixMailData() {
  SharedDtor();
}

void MixMailData::SharedDtor() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void MixMailData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MixMailData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MixMailData_descriptor_;
}

const MixMailData& MixMailData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mail_2eproto();
  return *default_instance_;
}

MixMailData* MixMailData::default_instance_ = NULL;

MixMailData* MixMailData::New() const {
  return new MixMailData;
}

void MixMailData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    templateid_ = 0u;
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    sendtime_ = GOOGLE_ULONGLONG(0);
    validitytime_ = 0u;
    flag_ = 0u;
  }
  accessory_.Clear();
  add_content_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MixMailData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 templateID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &templateid_)));
          set_has_templateid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_title;
        break;
      }

      // optional string title = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_content;
        break;
      }

      // optional string content = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_accessory;
        break;
      }

      // repeated .proto.message.DropItemNum accessory = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_accessory:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_accessory()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_accessory;
        if (input->ExpectTag(40)) goto parse_sendTime;
        break;
      }

      // required uint64 sendTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sendTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sendtime_)));
          set_has_sendtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_validityTime;
        break;
      }

      // required uint32 validityTime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_validityTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &validitytime_)));
          set_has_validitytime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_flag;
        break;
      }

      // optional uint32 flag = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_add_content;
        break;
      }

      // repeated string add_content = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_add_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_add_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->add_content(this->add_content_size() - 1).data(),
            this->add_content(this->add_content_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_add_content;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MixMailData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 templateID = 1;
  if (has_templateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->templateid(), output);
  }

  // optional string title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->title(), output);
  }

  // optional string content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->content(), output);
  }

  // repeated .proto.message.DropItemNum accessory = 4;
  for (int i = 0; i < this->accessory_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->accessory(i), output);
  }

  // required uint64 sendTime = 5;
  if (has_sendtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->sendtime(), output);
  }

  // required uint32 validityTime = 6;
  if (has_validitytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->validitytime(), output);
  }

  // optional uint32 flag = 7;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->flag(), output);
  }

  // repeated string add_content = 8;
  for (int i = 0; i < this->add_content_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->add_content(i).data(), this->add_content(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->add_content(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MixMailData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 templateID = 1;
  if (has_templateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->templateid(), target);
  }

  // optional string title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->title(), target);
  }

  // optional string content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->content(), target);
  }

  // repeated .proto.message.DropItemNum accessory = 4;
  for (int i = 0; i < this->accessory_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->accessory(i), target);
  }

  // required uint64 sendTime = 5;
  if (has_sendtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->sendtime(), target);
  }

  // required uint32 validityTime = 6;
  if (has_validitytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->validitytime(), target);
  }

  // optional uint32 flag = 7;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->flag(), target);
  }

  // repeated string add_content = 8;
  for (int i = 0; i < this->add_content_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->add_content(i).data(), this->add_content(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(8, this->add_content(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MixMailData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 templateID = 1;
    if (has_templateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->templateid());
    }

    // optional string title = 2;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string content = 3;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // required uint64 sendTime = 5;
    if (has_sendtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sendtime());
    }

    // required uint32 validityTime = 6;
    if (has_validitytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->validitytime());
    }

    // optional uint32 flag = 7;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flag());
    }

  }
  // repeated .proto.message.DropItemNum accessory = 4;
  total_size += 1 * this->accessory_size();
  for (int i = 0; i < this->accessory_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->accessory(i));
  }

  // repeated string add_content = 8;
  total_size += 1 * this->add_content_size();
  for (int i = 0; i < this->add_content_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->add_content(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MixMailData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MixMailData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MixMailData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MixMailData::MergeFrom(const MixMailData& from) {
  GOOGLE_CHECK_NE(&from, this);
  accessory_.MergeFrom(from.accessory_);
  add_content_.MergeFrom(from.add_content_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_templateid()) {
      set_templateid(from.templateid());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_sendtime()) {
      set_sendtime(from.sendtime());
    }
    if (from.has_validitytime()) {
      set_validitytime(from.validitytime());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MixMailData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MixMailData::CopyFrom(const MixMailData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MixMailData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000030) != 0x00000030) return false;

  return true;
}

void MixMailData::Swap(MixMailData* other) {
  if (other != this) {
    std::swap(templateid_, other->templateid_);
    std::swap(title_, other->title_);
    std::swap(content_, other->content_);
    accessory_.Swap(&other->accessory_);
    std::swap(sendtime_, other->sendtime_);
    std::swap(validitytime_, other->validitytime_);
    std::swap(flag_, other->flag_);
    add_content_.Swap(&other->add_content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MixMailData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MixMailData_descriptor_;
  metadata.reflection = MixMailData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MailData::kMailIDFieldNumber;
const int MailData::kOwnerIDFieldNumber;
const int MailData::kMixinfoFieldNumber;
const int MailData::kMailTypeFieldNumber;
#endif  // !_MSC_VER

MailData::MailData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MailData::InitAsDefaultInstance() {
  mixinfo_ = const_cast< ::proto::message::MixMailData*>(&::proto::message::MixMailData::default_instance());
}

MailData::MailData(const MailData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MailData::SharedCtor() {
  _cached_size_ = 0;
  mailid_ = GOOGLE_ULONGLONG(0);
  ownerid_ = GOOGLE_ULONGLONG(0);
  mixinfo_ = NULL;
  mail_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MailData::~MailData() {
  SharedDtor();
}

void MailData::SharedDtor() {
  if (this != default_instance_) {
    delete mixinfo_;
  }
}

void MailData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MailData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MailData_descriptor_;
}

const MailData& MailData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mail_2eproto();
  return *default_instance_;
}

MailData* MailData::default_instance_ = NULL;

MailData* MailData::New() const {
  return new MailData;
}

void MailData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mailid_ = GOOGLE_ULONGLONG(0);
    ownerid_ = GOOGLE_ULONGLONG(0);
    if (has_mixinfo()) {
      if (mixinfo_ != NULL) mixinfo_->::proto::message::MixMailData::Clear();
    }
    mail_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MailData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 mailID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mailid_)));
          set_has_mailid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ownerID;
        break;
      }

      // required uint64 ownerID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ownerID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ownerid_)));
          set_has_ownerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_mixinfo;
        break;
      }

      // required .proto.message.MixMailData mixinfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mixinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mixinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_mail_type;
        break;
      }

      // required uint32 mail_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mail_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mail_type_)));
          set_has_mail_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MailData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 mailID = 1;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->mailid(), output);
  }

  // required uint64 ownerID = 2;
  if (has_ownerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->ownerid(), output);
  }

  // required .proto.message.MixMailData mixinfo = 3;
  if (has_mixinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->mixinfo(), output);
  }

  // required uint32 mail_type = 4;
  if (has_mail_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->mail_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MailData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 mailID = 1;
  if (has_mailid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->mailid(), target);
  }

  // required uint64 ownerID = 2;
  if (has_ownerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->ownerid(), target);
  }

  // required .proto.message.MixMailData mixinfo = 3;
  if (has_mixinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->mixinfo(), target);
  }

  // required uint32 mail_type = 4;
  if (has_mail_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->mail_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MailData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 mailID = 1;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mailid());
    }

    // required uint64 ownerID = 2;
    if (has_ownerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ownerid());
    }

    // required .proto.message.MixMailData mixinfo = 3;
    if (has_mixinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mixinfo());
    }

    // required uint32 mail_type = 4;
    if (has_mail_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mail_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MailData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MailData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MailData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MailData::MergeFrom(const MailData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mailid()) {
      set_mailid(from.mailid());
    }
    if (from.has_ownerid()) {
      set_ownerid(from.ownerid());
    }
    if (from.has_mixinfo()) {
      mutable_mixinfo()->::proto::message::MixMailData::MergeFrom(from.mixinfo());
    }
    if (from.has_mail_type()) {
      set_mail_type(from.mail_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MailData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MailData::CopyFrom(const MailData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MailData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_mixinfo()) {
    if (!this->mixinfo().IsInitialized()) return false;
  }
  return true;
}

void MailData::Swap(MailData* other) {
  if (other != this) {
    std::swap(mailid_, other->mailid_);
    std::swap(ownerid_, other->ownerid_);
    std::swap(mixinfo_, other->mixinfo_);
    std::swap(mail_type_, other->mail_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MailData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MailData_descriptor_;
  metadata.reflection = MailData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Mail_CS_GetMailList::Mail_CS_GetMailList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Mail_CS_GetMailList::InitAsDefaultInstance() {
}

Mail_CS_GetMailList::Mail_CS_GetMailList(const Mail_CS_GetMailList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Mail_CS_GetMailList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Mail_CS_GetMailList::~Mail_CS_GetMailList() {
  SharedDtor();
}

void Mail_CS_GetMailList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Mail_CS_GetMailList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mail_CS_GetMailList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Mail_CS_GetMailList_descriptor_;
}

const Mail_CS_GetMailList& Mail_CS_GetMailList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mail_2eproto();
  return *default_instance_;
}

Mail_CS_GetMailList* Mail_CS_GetMailList::default_instance_ = NULL;

Mail_CS_GetMailList* Mail_CS_GetMailList::New() const {
  return new Mail_CS_GetMailList;
}

void Mail_CS_GetMailList::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Mail_CS_GetMailList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Mail_CS_GetMailList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Mail_CS_GetMailList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Mail_CS_GetMailList::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mail_CS_GetMailList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Mail_CS_GetMailList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Mail_CS_GetMailList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Mail_CS_GetMailList::MergeFrom(const Mail_CS_GetMailList& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Mail_CS_GetMailList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mail_CS_GetMailList::CopyFrom(const Mail_CS_GetMailList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mail_CS_GetMailList::IsInitialized() const {

  return true;
}

void Mail_CS_GetMailList::Swap(Mail_CS_GetMailList* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Mail_CS_GetMailList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Mail_CS_GetMailList_descriptor_;
  metadata.reflection = Mail_CS_GetMailList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MailListItem::kMailIDFieldNumber;
const int MailListItem::kTemplateIDFieldNumber;
const int MailListItem::kTitleFieldNumber;
const int MailListItem::kSendTimeFieldNumber;
const int MailListItem::kFlagFieldNumber;
const int MailListItem::kHaveAccessoryFieldNumber;
#endif  // !_MSC_VER

MailListItem::MailListItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MailListItem::InitAsDefaultInstance() {
}

MailListItem::MailListItem(const MailListItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MailListItem::SharedCtor() {
  _cached_size_ = 0;
  mailid_ = GOOGLE_ULONGLONG(0);
  templateid_ = 0u;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sendtime_ = GOOGLE_ULONGLONG(0);
  flag_ = 0u;
  haveaccessory_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MailListItem::~MailListItem() {
  SharedDtor();
}

void MailListItem::SharedDtor() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (this != default_instance_) {
  }
}

void MailListItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MailListItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MailListItem_descriptor_;
}

const MailListItem& MailListItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mail_2eproto();
  return *default_instance_;
}

MailListItem* MailListItem::default_instance_ = NULL;

MailListItem* MailListItem::New() const {
  return new MailListItem;
}

void MailListItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mailid_ = GOOGLE_ULONGLONG(0);
    templateid_ = 0u;
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    sendtime_ = GOOGLE_ULONGLONG(0);
    flag_ = 0u;
    haveaccessory_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MailListItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 mailID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mailid_)));
          set_has_mailid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_templateID;
        break;
      }

      // optional uint32 templateID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_templateID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &templateid_)));
          set_has_templateid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_title;
        break;
      }

      // optional string title = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sendTime;
        break;
      }

      // required uint64 sendTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sendTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sendtime_)));
          set_has_sendtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_flag;
        break;
      }

      // required uint32 flag = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_haveAccessory;
        break;
      }

      // optional bool haveAccessory = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_haveAccessory:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &haveaccessory_)));
          set_has_haveaccessory();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MailListItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 mailID = 1;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->mailid(), output);
  }

  // optional uint32 templateID = 2;
  if (has_templateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->templateid(), output);
  }

  // optional string title = 3;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->title(), output);
  }

  // required uint64 sendTime = 4;
  if (has_sendtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->sendtime(), output);
  }

  // required uint32 flag = 5;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->flag(), output);
  }

  // optional bool haveAccessory = 6;
  if (has_haveaccessory()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->haveaccessory(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MailListItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 mailID = 1;
  if (has_mailid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->mailid(), target);
  }

  // optional uint32 templateID = 2;
  if (has_templateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->templateid(), target);
  }

  // optional string title = 3;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->title(), target);
  }

  // required uint64 sendTime = 4;
  if (has_sendtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->sendtime(), target);
  }

  // required uint32 flag = 5;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->flag(), target);
  }

  // optional bool haveAccessory = 6;
  if (has_haveaccessory()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->haveaccessory(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MailListItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 mailID = 1;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mailid());
    }

    // optional uint32 templateID = 2;
    if (has_templateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->templateid());
    }

    // optional string title = 3;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // required uint64 sendTime = 4;
    if (has_sendtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sendtime());
    }

    // required uint32 flag = 5;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flag());
    }

    // optional bool haveAccessory = 6;
    if (has_haveaccessory()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MailListItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MailListItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MailListItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MailListItem::MergeFrom(const MailListItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mailid()) {
      set_mailid(from.mailid());
    }
    if (from.has_templateid()) {
      set_templateid(from.templateid());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_sendtime()) {
      set_sendtime(from.sendtime());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_haveaccessory()) {
      set_haveaccessory(from.haveaccessory());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MailListItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MailListItem::CopyFrom(const MailListItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MailListItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000019) != 0x00000019) return false;

  return true;
}

void MailListItem::Swap(MailListItem* other) {
  if (other != this) {
    std::swap(mailid_, other->mailid_);
    std::swap(templateid_, other->templateid_);
    std::swap(title_, other->title_);
    std::swap(sendtime_, other->sendtime_);
    std::swap(flag_, other->flag_);
    std::swap(haveaccessory_, other->haveaccessory_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MailListItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MailListItem_descriptor_;
  metadata.reflection = MailListItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Mail_SC_GetMailDetail::kMailIDFieldNumber;
const int Mail_SC_GetMailDetail::kFlagFieldNumber;
const int Mail_SC_GetMailDetail::kMixinfoFieldNumber;
#endif  // !_MSC_VER

Mail_SC_GetMailDetail::Mail_SC_GetMailDetail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Mail_SC_GetMailDetail::InitAsDefaultInstance() {
  mixinfo_ = const_cast< ::proto::message::MixMailData*>(&::proto::message::MixMailData::default_instance());
}

Mail_SC_GetMailDetail::Mail_SC_GetMailDetail(const Mail_SC_GetMailDetail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Mail_SC_GetMailDetail::SharedCtor() {
  _cached_size_ = 0;
  mailid_ = GOOGLE_ULONGLONG(0);
  flag_ = 0u;
  mixinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Mail_SC_GetMailDetail::~Mail_SC_GetMailDetail() {
  SharedDtor();
}

void Mail_SC_GetMailDetail::SharedDtor() {
  if (this != default_instance_) {
    delete mixinfo_;
  }
}

void Mail_SC_GetMailDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mail_SC_GetMailDetail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Mail_SC_GetMailDetail_descriptor_;
}

const Mail_SC_GetMailDetail& Mail_SC_GetMailDetail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mail_2eproto();
  return *default_instance_;
}

Mail_SC_GetMailDetail* Mail_SC_GetMailDetail::default_instance_ = NULL;

Mail_SC_GetMailDetail* Mail_SC_GetMailDetail::New() const {
  return new Mail_SC_GetMailDetail;
}

void Mail_SC_GetMailDetail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mailid_ = GOOGLE_ULONGLONG(0);
    flag_ = 0u;
    if (has_mixinfo()) {
      if (mixinfo_ != NULL) mixinfo_->::proto::message::MixMailData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Mail_SC_GetMailDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 mailID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mailid_)));
          set_has_mailid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_flag;
        break;
      }

      // required uint32 flag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_mixinfo;
        break;
      }

      // required .proto.message.MixMailData mixinfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mixinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mixinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Mail_SC_GetMailDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 mailID = 1;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->mailid(), output);
  }

  // required uint32 flag = 2;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->flag(), output);
  }

  // required .proto.message.MixMailData mixinfo = 3;
  if (has_mixinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->mixinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Mail_SC_GetMailDetail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 mailID = 1;
  if (has_mailid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->mailid(), target);
  }

  // required uint32 flag = 2;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->flag(), target);
  }

  // required .proto.message.MixMailData mixinfo = 3;
  if (has_mixinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->mixinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Mail_SC_GetMailDetail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 mailID = 1;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mailid());
    }

    // required uint32 flag = 2;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flag());
    }

    // required .proto.message.MixMailData mixinfo = 3;
    if (has_mixinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mixinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mail_SC_GetMailDetail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Mail_SC_GetMailDetail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Mail_SC_GetMailDetail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Mail_SC_GetMailDetail::MergeFrom(const Mail_SC_GetMailDetail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mailid()) {
      set_mailid(from.mailid());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_mixinfo()) {
      mutable_mixinfo()->::proto::message::MixMailData::MergeFrom(from.mixinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Mail_SC_GetMailDetail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mail_SC_GetMailDetail::CopyFrom(const Mail_SC_GetMailDetail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mail_SC_GetMailDetail::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_mixinfo()) {
    if (!this->mixinfo().IsInitialized()) return false;
  }
  return true;
}

void Mail_SC_GetMailDetail::Swap(Mail_SC_GetMailDetail* other) {
  if (other != this) {
    std::swap(mailid_, other->mailid_);
    std::swap(flag_, other->flag_);
    std::swap(mixinfo_, other->mixinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Mail_SC_GetMailDetail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Mail_SC_GetMailDetail_descriptor_;
  metadata.reflection = Mail_SC_GetMailDetail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Mail_SC_GetMailList::kMailListFieldNumber;
const int Mail_SC_GetMailList::kCurMailFieldNumber;
#endif  // !_MSC_VER

Mail_SC_GetMailList::Mail_SC_GetMailList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Mail_SC_GetMailList::InitAsDefaultInstance() {
  curmail_ = const_cast< ::proto::message::Mail_SC_GetMailDetail*>(&::proto::message::Mail_SC_GetMailDetail::default_instance());
}

Mail_SC_GetMailList::Mail_SC_GetMailList(const Mail_SC_GetMailList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Mail_SC_GetMailList::SharedCtor() {
  _cached_size_ = 0;
  curmail_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Mail_SC_GetMailList::~Mail_SC_GetMailList() {
  SharedDtor();
}

void Mail_SC_GetMailList::SharedDtor() {
  if (this != default_instance_) {
    delete curmail_;
  }
}

void Mail_SC_GetMailList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mail_SC_GetMailList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Mail_SC_GetMailList_descriptor_;
}

const Mail_SC_GetMailList& Mail_SC_GetMailList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mail_2eproto();
  return *default_instance_;
}

Mail_SC_GetMailList* Mail_SC_GetMailList::default_instance_ = NULL;

Mail_SC_GetMailList* Mail_SC_GetMailList::New() const {
  return new Mail_SC_GetMailList;
}

void Mail_SC_GetMailList::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_curmail()) {
      if (curmail_ != NULL) curmail_->::proto::message::Mail_SC_GetMailDetail::Clear();
    }
  }
  maillist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Mail_SC_GetMailList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.message.MailListItem mailList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mailList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_maillist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_mailList;
        if (input->ExpectTag(18)) goto parse_curMail;
        break;
      }

      // optional .proto.message.Mail_SC_GetMailDetail curMail = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_curMail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_curmail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Mail_SC_GetMailList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.message.MailListItem mailList = 1;
  for (int i = 0; i < this->maillist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->maillist(i), output);
  }

  // optional .proto.message.Mail_SC_GetMailDetail curMail = 2;
  if (has_curmail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->curmail(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Mail_SC_GetMailList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.message.MailListItem mailList = 1;
  for (int i = 0; i < this->maillist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->maillist(i), target);
  }

  // optional .proto.message.Mail_SC_GetMailDetail curMail = 2;
  if (has_curmail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->curmail(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Mail_SC_GetMailList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .proto.message.Mail_SC_GetMailDetail curMail = 2;
    if (has_curmail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->curmail());
    }

  }
  // repeated .proto.message.MailListItem mailList = 1;
  total_size += 1 * this->maillist_size();
  for (int i = 0; i < this->maillist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->maillist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mail_SC_GetMailList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Mail_SC_GetMailList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Mail_SC_GetMailList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Mail_SC_GetMailList::MergeFrom(const Mail_SC_GetMailList& from) {
  GOOGLE_CHECK_NE(&from, this);
  maillist_.MergeFrom(from.maillist_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_curmail()) {
      mutable_curmail()->::proto::message::Mail_SC_GetMailDetail::MergeFrom(from.curmail());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Mail_SC_GetMailList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mail_SC_GetMailList::CopyFrom(const Mail_SC_GetMailList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mail_SC_GetMailList::IsInitialized() const {

  for (int i = 0; i < maillist_size(); i++) {
    if (!this->maillist(i).IsInitialized()) return false;
  }
  if (has_curmail()) {
    if (!this->curmail().IsInitialized()) return false;
  }
  return true;
}

void Mail_SC_GetMailList::Swap(Mail_SC_GetMailList* other) {
  if (other != this) {
    maillist_.Swap(&other->maillist_);
    std::swap(curmail_, other->curmail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Mail_SC_GetMailList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Mail_SC_GetMailList_descriptor_;
  metadata.reflection = Mail_SC_GetMailList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Mail_CS_GetMailDetail::kMailIDFieldNumber;
#endif  // !_MSC_VER

Mail_CS_GetMailDetail::Mail_CS_GetMailDetail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Mail_CS_GetMailDetail::InitAsDefaultInstance() {
}

Mail_CS_GetMailDetail::Mail_CS_GetMailDetail(const Mail_CS_GetMailDetail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Mail_CS_GetMailDetail::SharedCtor() {
  _cached_size_ = 0;
  mailid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Mail_CS_GetMailDetail::~Mail_CS_GetMailDetail() {
  SharedDtor();
}

void Mail_CS_GetMailDetail::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Mail_CS_GetMailDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mail_CS_GetMailDetail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Mail_CS_GetMailDetail_descriptor_;
}

const Mail_CS_GetMailDetail& Mail_CS_GetMailDetail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mail_2eproto();
  return *default_instance_;
}

Mail_CS_GetMailDetail* Mail_CS_GetMailDetail::default_instance_ = NULL;

Mail_CS_GetMailDetail* Mail_CS_GetMailDetail::New() const {
  return new Mail_CS_GetMailDetail;
}

void Mail_CS_GetMailDetail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mailid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Mail_CS_GetMailDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 mailID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mailid_)));
          set_has_mailid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Mail_CS_GetMailDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 mailID = 1;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->mailid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Mail_CS_GetMailDetail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 mailID = 1;
  if (has_mailid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->mailid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Mail_CS_GetMailDetail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 mailID = 1;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mailid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mail_CS_GetMailDetail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Mail_CS_GetMailDetail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Mail_CS_GetMailDetail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Mail_CS_GetMailDetail::MergeFrom(const Mail_CS_GetMailDetail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mailid()) {
      set_mailid(from.mailid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Mail_CS_GetMailDetail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mail_CS_GetMailDetail::CopyFrom(const Mail_CS_GetMailDetail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mail_CS_GetMailDetail::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Mail_CS_GetMailDetail::Swap(Mail_CS_GetMailDetail* other) {
  if (other != this) {
    std::swap(mailid_, other->mailid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Mail_CS_GetMailDetail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Mail_CS_GetMailDetail_descriptor_;
  metadata.reflection = Mail_CS_GetMailDetail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Mail_CS_GetMailAccessory::kMailIDFieldNumber;
#endif  // !_MSC_VER

Mail_CS_GetMailAccessory::Mail_CS_GetMailAccessory()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Mail_CS_GetMailAccessory::InitAsDefaultInstance() {
}

Mail_CS_GetMailAccessory::Mail_CS_GetMailAccessory(const Mail_CS_GetMailAccessory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Mail_CS_GetMailAccessory::SharedCtor() {
  _cached_size_ = 0;
  mailid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Mail_CS_GetMailAccessory::~Mail_CS_GetMailAccessory() {
  SharedDtor();
}

void Mail_CS_GetMailAccessory::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Mail_CS_GetMailAccessory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mail_CS_GetMailAccessory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Mail_CS_GetMailAccessory_descriptor_;
}

const Mail_CS_GetMailAccessory& Mail_CS_GetMailAccessory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mail_2eproto();
  return *default_instance_;
}

Mail_CS_GetMailAccessory* Mail_CS_GetMailAccessory::default_instance_ = NULL;

Mail_CS_GetMailAccessory* Mail_CS_GetMailAccessory::New() const {
  return new Mail_CS_GetMailAccessory;
}

void Mail_CS_GetMailAccessory::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mailid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Mail_CS_GetMailAccessory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 mailID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mailid_)));
          set_has_mailid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Mail_CS_GetMailAccessory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 mailID = 1;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->mailid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Mail_CS_GetMailAccessory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 mailID = 1;
  if (has_mailid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->mailid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Mail_CS_GetMailAccessory::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 mailID = 1;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mailid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mail_CS_GetMailAccessory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Mail_CS_GetMailAccessory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Mail_CS_GetMailAccessory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Mail_CS_GetMailAccessory::MergeFrom(const Mail_CS_GetMailAccessory& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mailid()) {
      set_mailid(from.mailid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Mail_CS_GetMailAccessory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mail_CS_GetMailAccessory::CopyFrom(const Mail_CS_GetMailAccessory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mail_CS_GetMailAccessory::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Mail_CS_GetMailAccessory::Swap(Mail_CS_GetMailAccessory* other) {
  if (other != this) {
    std::swap(mailid_, other->mailid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Mail_CS_GetMailAccessory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Mail_CS_GetMailAccessory_descriptor_;
  metadata.reflection = Mail_CS_GetMailAccessory_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Mail_SC_GetMailAccessory::kResultFieldNumber;
const int Mail_SC_GetMailAccessory::kMailIDFieldNumber;
const int Mail_SC_GetMailAccessory::kAccessoryFieldNumber;
#endif  // !_MSC_VER

Mail_SC_GetMailAccessory::Mail_SC_GetMailAccessory()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Mail_SC_GetMailAccessory::InitAsDefaultInstance() {
}

Mail_SC_GetMailAccessory::Mail_SC_GetMailAccessory(const Mail_SC_GetMailAccessory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Mail_SC_GetMailAccessory::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  mailid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Mail_SC_GetMailAccessory::~Mail_SC_GetMailAccessory() {
  SharedDtor();
}

void Mail_SC_GetMailAccessory::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Mail_SC_GetMailAccessory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mail_SC_GetMailAccessory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Mail_SC_GetMailAccessory_descriptor_;
}

const Mail_SC_GetMailAccessory& Mail_SC_GetMailAccessory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mail_2eproto();
  return *default_instance_;
}

Mail_SC_GetMailAccessory* Mail_SC_GetMailAccessory::default_instance_ = NULL;

Mail_SC_GetMailAccessory* Mail_SC_GetMailAccessory::New() const {
  return new Mail_SC_GetMailAccessory;
}

void Mail_SC_GetMailAccessory::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
    mailid_ = GOOGLE_ULONGLONG(0);
  }
  accessory_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Mail_SC_GetMailAccessory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mailID;
        break;
      }

      // required uint64 mailID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mailID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mailid_)));
          set_has_mailid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_accessory;
        break;
      }

      // repeated .proto.message.DropItemNum accessory = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_accessory:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_accessory()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_accessory;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Mail_SC_GetMailAccessory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  // required uint64 mailID = 2;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->mailid(), output);
  }

  // repeated .proto.message.DropItemNum accessory = 3;
  for (int i = 0; i < this->accessory_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->accessory(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Mail_SC_GetMailAccessory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  // required uint64 mailID = 2;
  if (has_mailid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->mailid(), target);
  }

  // repeated .proto.message.DropItemNum accessory = 3;
  for (int i = 0; i < this->accessory_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->accessory(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Mail_SC_GetMailAccessory::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // required uint64 mailID = 2;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mailid());
    }

  }
  // repeated .proto.message.DropItemNum accessory = 3;
  total_size += 1 * this->accessory_size();
  for (int i = 0; i < this->accessory_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->accessory(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mail_SC_GetMailAccessory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Mail_SC_GetMailAccessory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Mail_SC_GetMailAccessory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Mail_SC_GetMailAccessory::MergeFrom(const Mail_SC_GetMailAccessory& from) {
  GOOGLE_CHECK_NE(&from, this);
  accessory_.MergeFrom(from.accessory_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_mailid()) {
      set_mailid(from.mailid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Mail_SC_GetMailAccessory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mail_SC_GetMailAccessory::CopyFrom(const Mail_SC_GetMailAccessory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mail_SC_GetMailAccessory::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Mail_SC_GetMailAccessory::Swap(Mail_SC_GetMailAccessory* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(mailid_, other->mailid_);
    accessory_.Swap(&other->accessory_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Mail_SC_GetMailAccessory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Mail_SC_GetMailAccessory_descriptor_;
  metadata.reflection = Mail_SC_GetMailAccessory_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Mail_SC_NewMails::kNewMailNumFieldNumber;
#endif  // !_MSC_VER

Mail_SC_NewMails::Mail_SC_NewMails()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Mail_SC_NewMails::InitAsDefaultInstance() {
}

Mail_SC_NewMails::Mail_SC_NewMails(const Mail_SC_NewMails& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Mail_SC_NewMails::SharedCtor() {
  _cached_size_ = 0;
  newmailnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Mail_SC_NewMails::~Mail_SC_NewMails() {
  SharedDtor();
}

void Mail_SC_NewMails::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Mail_SC_NewMails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mail_SC_NewMails::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Mail_SC_NewMails_descriptor_;
}

const Mail_SC_NewMails& Mail_SC_NewMails::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mail_2eproto();
  return *default_instance_;
}

Mail_SC_NewMails* Mail_SC_NewMails::default_instance_ = NULL;

Mail_SC_NewMails* Mail_SC_NewMails::New() const {
  return new Mail_SC_NewMails;
}

void Mail_SC_NewMails::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    newmailnum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Mail_SC_NewMails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 newMailNum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &newmailnum_)));
          set_has_newmailnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Mail_SC_NewMails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 newMailNum = 1;
  if (has_newmailnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->newmailnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Mail_SC_NewMails::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 newMailNum = 1;
  if (has_newmailnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->newmailnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Mail_SC_NewMails::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 newMailNum = 1;
    if (has_newmailnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->newmailnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mail_SC_NewMails::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Mail_SC_NewMails* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Mail_SC_NewMails*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Mail_SC_NewMails::MergeFrom(const Mail_SC_NewMails& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_newmailnum()) {
      set_newmailnum(from.newmailnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Mail_SC_NewMails::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mail_SC_NewMails::CopyFrom(const Mail_SC_NewMails& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mail_SC_NewMails::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Mail_SC_NewMails::Swap(Mail_SC_NewMails* other) {
  if (other != this) {
    std::swap(newmailnum_, other->newmailnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Mail_SC_NewMails::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Mail_SC_NewMails_descriptor_;
  metadata.reflection = Mail_SC_NewMails_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MailRecordData::kMailIDFieldNumber;
const int MailRecordData::kFlagFieldNumber;
#endif  // !_MSC_VER

MailRecordData::MailRecordData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MailRecordData::InitAsDefaultInstance() {
}

MailRecordData::MailRecordData(const MailRecordData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MailRecordData::SharedCtor() {
  _cached_size_ = 0;
  mailid_ = GOOGLE_ULONGLONG(0);
  flag_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MailRecordData::~MailRecordData() {
  SharedDtor();
}

void MailRecordData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MailRecordData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MailRecordData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MailRecordData_descriptor_;
}

const MailRecordData& MailRecordData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mail_2eproto();
  return *default_instance_;
}

MailRecordData* MailRecordData::default_instance_ = NULL;

MailRecordData* MailRecordData::New() const {
  return new MailRecordData;
}

void MailRecordData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mailid_ = GOOGLE_ULONGLONG(0);
    flag_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MailRecordData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 mailID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mailid_)));
          set_has_mailid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_flag;
        break;
      }

      // required uint32 flag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MailRecordData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 mailID = 1;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->mailid(), output);
  }

  // required uint32 flag = 2;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MailRecordData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 mailID = 1;
  if (has_mailid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->mailid(), target);
  }

  // required uint32 flag = 2;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MailRecordData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 mailID = 1;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mailid());
    }

    // required uint32 flag = 2;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MailRecordData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MailRecordData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MailRecordData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MailRecordData::MergeFrom(const MailRecordData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mailid()) {
      set_mailid(from.mailid());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MailRecordData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MailRecordData::CopyFrom(const MailRecordData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MailRecordData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MailRecordData::Swap(MailRecordData* other) {
  if (other != this) {
    std::swap(mailid_, other->mailid_);
    std::swap(flag_, other->flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MailRecordData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MailRecordData_descriptor_;
  metadata.reflection = MailRecordData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MailBoxData::kMailListFieldNumber;
const int MailBoxData::kMailTimeWeekFieldNumber;
#endif  // !_MSC_VER

MailBoxData::MailBoxData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MailBoxData::InitAsDefaultInstance() {
}

MailBoxData::MailBoxData(const MailBoxData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MailBoxData::SharedCtor() {
  _cached_size_ = 0;
  mail_time_week_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MailBoxData::~MailBoxData() {
  SharedDtor();
}

void MailBoxData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MailBoxData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MailBoxData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MailBoxData_descriptor_;
}

const MailBoxData& MailBoxData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mail_2eproto();
  return *default_instance_;
}

MailBoxData* MailBoxData::default_instance_ = NULL;

MailBoxData* MailBoxData::New() const {
  return new MailBoxData;
}

void MailBoxData::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    mail_time_week_ = GOOGLE_ULONGLONG(0);
  }
  maillist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MailBoxData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.message.MailRecordData mailList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mailList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_maillist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_mailList;
        if (input->ExpectTag(16)) goto parse_mail_time_week;
        break;
      }

      // optional uint64 mail_time_week = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mail_time_week:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mail_time_week_)));
          set_has_mail_time_week();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MailBoxData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.message.MailRecordData mailList = 1;
  for (int i = 0; i < this->maillist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->maillist(i), output);
  }

  // optional uint64 mail_time_week = 2;
  if (has_mail_time_week()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->mail_time_week(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MailBoxData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.message.MailRecordData mailList = 1;
  for (int i = 0; i < this->maillist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->maillist(i), target);
  }

  // optional uint64 mail_time_week = 2;
  if (has_mail_time_week()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->mail_time_week(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MailBoxData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint64 mail_time_week = 2;
    if (has_mail_time_week()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mail_time_week());
    }

  }
  // repeated .proto.message.MailRecordData mailList = 1;
  total_size += 1 * this->maillist_size();
  for (int i = 0; i < this->maillist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->maillist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MailBoxData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MailBoxData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MailBoxData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MailBoxData::MergeFrom(const MailBoxData& from) {
  GOOGLE_CHECK_NE(&from, this);
  maillist_.MergeFrom(from.maillist_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_mail_time_week()) {
      set_mail_time_week(from.mail_time_week());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MailBoxData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MailBoxData::CopyFrom(const MailBoxData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MailBoxData::IsInitialized() const {

  for (int i = 0; i < maillist_size(); i++) {
    if (!this->maillist(i).IsInitialized()) return false;
  }
  return true;
}

void MailBoxData::Swap(MailBoxData* other) {
  if (other != this) {
    maillist_.Swap(&other->maillist_);
    std::swap(mail_time_week_, other->mail_time_week_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MailBoxData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MailBoxData_descriptor_;
  metadata.reflection = MailBoxData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Mail_CS_DelMail::kMailIDFieldNumber;
#endif  // !_MSC_VER

Mail_CS_DelMail::Mail_CS_DelMail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Mail_CS_DelMail::InitAsDefaultInstance() {
}

Mail_CS_DelMail::Mail_CS_DelMail(const Mail_CS_DelMail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Mail_CS_DelMail::SharedCtor() {
  _cached_size_ = 0;
  mailid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Mail_CS_DelMail::~Mail_CS_DelMail() {
  SharedDtor();
}

void Mail_CS_DelMail::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Mail_CS_DelMail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mail_CS_DelMail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Mail_CS_DelMail_descriptor_;
}

const Mail_CS_DelMail& Mail_CS_DelMail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mail_2eproto();
  return *default_instance_;
}

Mail_CS_DelMail* Mail_CS_DelMail::default_instance_ = NULL;

Mail_CS_DelMail* Mail_CS_DelMail::New() const {
  return new Mail_CS_DelMail;
}

void Mail_CS_DelMail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mailid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Mail_CS_DelMail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 mailID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mailid_)));
          set_has_mailid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Mail_CS_DelMail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 mailID = 1;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->mailid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Mail_CS_DelMail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 mailID = 1;
  if (has_mailid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->mailid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Mail_CS_DelMail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 mailID = 1;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mailid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mail_CS_DelMail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Mail_CS_DelMail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Mail_CS_DelMail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Mail_CS_DelMail::MergeFrom(const Mail_CS_DelMail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mailid()) {
      set_mailid(from.mailid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Mail_CS_DelMail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mail_CS_DelMail::CopyFrom(const Mail_CS_DelMail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mail_CS_DelMail::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Mail_CS_DelMail::Swap(Mail_CS_DelMail* other) {
  if (other != this) {
    std::swap(mailid_, other->mailid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Mail_CS_DelMail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Mail_CS_DelMail_descriptor_;
  metadata.reflection = Mail_CS_DelMail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Mail_SC_DelMail::kResultFieldNumber;
const int Mail_SC_DelMail::kMailIDFieldNumber;
#endif  // !_MSC_VER

Mail_SC_DelMail::Mail_SC_DelMail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Mail_SC_DelMail::InitAsDefaultInstance() {
}

Mail_SC_DelMail::Mail_SC_DelMail(const Mail_SC_DelMail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Mail_SC_DelMail::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  mailid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Mail_SC_DelMail::~Mail_SC_DelMail() {
  SharedDtor();
}

void Mail_SC_DelMail::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Mail_SC_DelMail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mail_SC_DelMail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Mail_SC_DelMail_descriptor_;
}

const Mail_SC_DelMail& Mail_SC_DelMail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mail_2eproto();
  return *default_instance_;
}

Mail_SC_DelMail* Mail_SC_DelMail::default_instance_ = NULL;

Mail_SC_DelMail* Mail_SC_DelMail::New() const {
  return new Mail_SC_DelMail;
}

void Mail_SC_DelMail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
    mailid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Mail_SC_DelMail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mailID;
        break;
      }

      // required uint64 mailID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mailID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mailid_)));
          set_has_mailid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Mail_SC_DelMail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  // required uint64 mailID = 2;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->mailid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Mail_SC_DelMail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  // required uint64 mailID = 2;
  if (has_mailid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->mailid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Mail_SC_DelMail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // required uint64 mailID = 2;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mailid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mail_SC_DelMail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Mail_SC_DelMail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Mail_SC_DelMail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Mail_SC_DelMail::MergeFrom(const Mail_SC_DelMail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_mailid()) {
      set_mailid(from.mailid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Mail_SC_DelMail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mail_SC_DelMail::CopyFrom(const Mail_SC_DelMail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mail_SC_DelMail::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Mail_SC_DelMail::Swap(Mail_SC_DelMail* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(mailid_, other->mailid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Mail_SC_DelMail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Mail_SC_DelMail_descriptor_;
  metadata.reflection = Mail_SC_DelMail_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace proto

// @@protoc_insertion_point(global_scope)
