// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: db_player.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "db_player.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace message {

namespace {

const ::google::protobuf::Descriptor* PlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreatePlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreatePlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerRank_reflection_ = NULL;
const ::google::protobuf::Descriptor* NameMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NameMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* DBOfflineEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DBOfflineEvent_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_db_5fplayer_2eproto() {
  protobuf_AddDesc_db_5fplayer_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "db_player.proto");
  GOOGLE_CHECK(file != NULL);
  PlayerInfo_descriptor_ = file->message_type(0);
  static const int PlayerInfo_offsets_[52] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, charname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, career_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, identity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, doubleexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, silver_pay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, silver_free_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, gold_pay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, gold_free_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, diamond_pay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, diamond_free_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, platid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, sdkuuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, data_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, item_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, equipon_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, skill_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, quest_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, shop_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, talent_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, friend_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, dungeon_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, activity_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, lively_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, title_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, welfare_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, achieve_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, godweapon_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, ride_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, pet_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, awaken_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, boat_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, mercenary_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, sevenday_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, spotential_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, vip_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, progresscon_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, investment_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, dailycharge_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, limitcharge_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, chargebiggift_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, continuouscharge_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, specialsale_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, losttreasure_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, moneytree_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, discountstore_info_),
  };
  PlayerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerInfo_descriptor_,
      PlayerInfo::default_instance_,
      PlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerInfo));
  CreatePlayer_descriptor_ = file->message_type(1);
  static const int CreatePlayer_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatePlayer, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatePlayer, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatePlayer, charname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatePlayer, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatePlayer, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatePlayer, career_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatePlayer, plat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatePlayer, sdk_uuid_),
  };
  CreatePlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreatePlayer_descriptor_,
      CreatePlayer::default_instance_,
      CreatePlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatePlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatePlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreatePlayer));
  PlayerRank_descriptor_ = file->message_type(2);
  static const int PlayerRank_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRank, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRank, charname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRank, career_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRank, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRank, pvp_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRank, pvp_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRank, pvp_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRank, arena_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRank, arena_stage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRank, arena_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRank, boat_pvp_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRank, boat_pvp_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRank, boat_pvp_info_),
  };
  PlayerRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerRank_descriptor_,
      PlayerRank::default_instance_,
      PlayerRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerRank));
  NameMsg_descriptor_ = file->message_type(3);
  static const int NameMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameMsg, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameMsg, charname_),
  };
  NameMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NameMsg_descriptor_,
      NameMsg::default_instance_,
      NameMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NameMsg));
  DBOfflineEvent_descriptor_ = file->message_type(4);
  static const int DBOfflineEvent_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBOfflineEvent, eventid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBOfflineEvent, eventtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBOfflineEvent, fromply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBOfflineEvent, toply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBOfflineEvent, eventstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBOfflineEvent, intparam1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBOfflineEvent, intparam2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBOfflineEvent, strparam1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBOfflineEvent, strparam2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBOfflineEvent, timetick_),
  };
  DBOfflineEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DBOfflineEvent_descriptor_,
      DBOfflineEvent::default_instance_,
      DBOfflineEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBOfflineEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBOfflineEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DBOfflineEvent));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_db_5fplayer_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerInfo_descriptor_, &PlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreatePlayer_descriptor_, &CreatePlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerRank_descriptor_, &PlayerRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NameMsg_descriptor_, &NameMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DBOfflineEvent_descriptor_, &DBOfflineEvent::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_db_5fplayer_2eproto() {
  delete PlayerInfo::default_instance_;
  delete PlayerInfo_reflection_;
  delete CreatePlayer::default_instance_;
  delete CreatePlayer_reflection_;
  delete PlayerRank::default_instance_;
  delete PlayerRank_reflection_;
  delete NameMsg::default_instance_;
  delete NameMsg_reflection_;
  delete DBOfflineEvent::default_instance_;
  delete DBOfflineEvent_reflection_;
}

void protobuf_AddDesc_db_5fplayer_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::proto::message::protobuf_AddDesc_common_2eproto();
  ::proto::message::protobuf_AddDesc_item_2eproto();
  ::proto::message::protobuf_AddDesc_db_5fdata_2eproto();
  ::proto::message::protobuf_AddDesc_db_5fitem_2eproto();
  ::proto::message::protobuf_AddDesc_db_5fskill_2eproto();
  ::proto::message::protobuf_AddDesc_db_5fquest_2eproto();
  ::proto::message::protobuf_AddDesc_db_5fshop_2eproto();
  ::proto::message::protobuf_AddDesc_db_5ftalent_2eproto();
  ::proto::message::protobuf_AddDesc_db_5ffriend_2eproto();
  ::proto::message::protobuf_AddDesc_db_5fdungeon_2eproto();
  ::proto::message::protobuf_AddDesc_lively_2eproto();
  ::proto::message::protobuf_AddDesc_title_2eproto();
  ::proto::message::protobuf_AddDesc_db_5factivity_2eproto();
  ::proto::message::protobuf_AddDesc_db_5fwelfare_2eproto();
  ::proto::message::protobuf_AddDesc_db_5fachieve_2eproto();
  ::proto::message::protobuf_AddDesc_parkour_2eproto();
  ::proto::message::protobuf_AddDesc_match_2eproto();
  ::proto::message::protobuf_AddDesc_player_2eproto();
  ::proto::message::protobuf_AddDesc_godweapon_2eproto();
  ::proto::message::protobuf_AddDesc_ride_2eproto();
  ::proto::message::protobuf_AddDesc_pet_2eproto();
  ::proto::message::protobuf_AddDesc_awaken_2eproto();
  ::proto::message::protobuf_AddDesc_mercenary_2eproto();
  ::proto::message::protobuf_AddDesc_boat_2eproto();
  ::proto::message::protobuf_AddDesc_marketing_2eproto();
  ::proto::message::protobuf_AddDesc_shop_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017db_player.proto\022\rproto.message\032\014common"
    ".proto\032\nitem.proto\032\rdb_data.proto\032\rdb_it"
    "em.proto\032\016db_skill.proto\032\016db_quest.proto"
    "\032\rdb_shop.proto\032\017db_talent.proto\032\017db_fri"
    "end.proto\032\020db_dungeon.proto\032\014lively.prot"
    "o\032\013title.proto\032\021db_activity.proto\032\020db_we"
    "lfare.proto\032\020db_achieve.proto\032\rparkour.p"
    "roto\032\013match.proto\032\014player.proto\032\017godweap"
    "on.proto\032\nride.proto\032\tpet.proto\032\014awaken."
    "proto\032\017mercenary.proto\032\nboat.proto\032\017mark"
    "eting.proto\032\nshop.proto\"\211\021\n\nPlayerInfo\022\016"
    "\n\006charid\030\001 \001(\004\022\017\n\007account\030\002 \001(\t\022\020\n\010charn"
    "ame\030\003 \001(\t\022\020\n\010serverid\030\004 \001(\005\022\016\n\006career\030\005 "
    "\001(\005\022\020\n\010identity\030\006 \001(\005\022\r\n\005title\030\007 \001(\005\022\r\n\005"
    "level\030\010 \001(\005\022\013\n\003exp\030\t \001(\004\022\021\n\tdoubleexp\030\n "
    "\001(\005\022\022\n\nsilver_pay\030\013 \001(\005\022\023\n\013silver_free\030\014"
    " \001(\005\022\020\n\010gold_pay\030\r \001(\005\022\021\n\tgold_free\030\016 \001("
    "\005\022\023\n\013diamond_pay\030\017 \001(\005\022\024\n\014diamond_free\030\020"
    " \001(\005\022\021\n\ttimestamp\030\021 \001(\r\022\016\n\006platid\030\022 \001(\r\022"
    "\017\n\007sdkuuid\030\023 \001(\t\022*\n\tdata_info\030\024 \001(\0132\027.pr"
    "oto.message.DataInfo\022-\n\titem_info\030\025 \001(\0132"
    "\032.proto.message.AllItemInfo\0220\n\014equipon_i"
    "nfo\030\026 \001(\0132\032.proto.message.EquiponInfo\022/\n"
    "\nskill_info\030\027 \001(\0132\033.proto.message.AllSki"
    "llInfo\0224\n\nquest_info\030\030 \001(\0132 .proto.messa"
    "ge.ProtoAllQuestInfo\022*\n\tshop_info\030\031 \001(\0132"
    "\027.proto.message.ShopInfo\0221\n\013talent_info\030"
    "\033 \001(\0132\034.proto.message.AllTalentInfo\0226\n\013f"
    "riend_info\030\034 \001(\0132!.proto.message.ProtoAl"
    "lFriendInfo\0220\n\014dungeon_info\030\035 \001(\0132\032.prot"
    "o.message.DungeonInfo\0222\n\ractivity_info\030\036"
    " \001(\0132\033.proto.message.ActivityInfo\0224\n\013liv"
    "ely_info\030\037 \001(\0132\037.proto.message.PlayerLiv"
    "elyInfo\022,\n\ntitle_info\030  \001(\0132\030.proto.mess"
    "age.TitleData\0220\n\014welfare_info\030! \001(\0132\032.pr"
    "oto.message.WelfareInfo\0222\n\014achieve_info\030"
    "\" \001(\0132\034.proto.message.DBAchieveInfo\022@\n\016g"
    "odweapon_info\030# \001(\0132(.proto.message.Prot"
    "oGodWeaponAllCellInfo\0226\n\tride_info\030$ \001(\013"
    "2#.proto.message.ProtoRideAllCellInfo\0224\n"
    "\010pet_info\030% \001(\0132\".proto.message.ProtoPet"
    "AllCellInfo\022:\n\013awaken_info\030& \001(\0132%.proto"
    ".message.ProtoAwakenAllCellInfo\022-\n\tboat_"
    "info\030\' \001(\0132\032.proto.message.BoatAllData\022:"
    "\n\016mercenary_info\030( \001(\0132\".proto.message.P"
    "rotoMerAllCellInfo\022@\n\rsevenday_info\030) \001("
    "\0132).proto.message.ProtoAllSevenDayTarget"
    "Info\022,\n\nsPotential\030* \001(\0132\030.proto.message"
    ".Potential\022(\n\010vip_info\030+ \001(\0132\026.proto.mes"
    "sage.VIPInfo\022@\n\020progresscon_info\030, \001(\0132&"
    ".proto.message.ProtoAllProgressConInfo\022>"
    "\n\017investment_info\030- \001(\0132%.proto.message."
    "ProtoAllInvestmentInfo\022E\n\020dailycharge_in"
    "fo\030. \001(\0132+.proto.message.ProtoAllDailyFi"
    "rstChargeInfo\022@\n\020limitcharge_info\030/ \001(\0132"
    "&.proto.message.ProtoAllLimitChargeInfo\022"
    "D\n\022chargebiggift_info\0300 \001(\0132(.proto.mess"
    "age.ProtoAllChargeBigGiftInfo\022B\n\025continu"
    "ouscharge_info\0301 \001(\0132#.proto.message.Con"
    "tinuousChargeInfo\0228\n\020specialsale_info\0302 "
    "\001(\0132\036.proto.message.SpecialSaleInfo\022:\n\021l"
    "osttreasure_info\0303 \001(\0132\037.proto.message.L"
    "ostTreasureInfo\0224\n\016moneytree_info\0304 \001(\0132"
    "\034.proto.message.MoneyTreeInfo\022<\n\022discoun"
    "tstore_info\0305 \001(\0132 .proto.message.Discou"
    "ntStoreInfo\"\224\001\n\014CreatePlayer\022\016\n\006charid\030\001"
    " \001(\004\022\017\n\007account\030\002 \001(\t\022\020\n\010charname\030\003 \001(\t\022"
    "\021\n\tserver_id\030\004 \001(\005\022\013\n\003sex\030\005 \001(\005\022\016\n\006caree"
    "r\030\006 \001(\005\022\017\n\007plat_id\030\007 \001(\005\022\020\n\010sdk_uuid\030\010 \001"
    "(\t\"\320\002\n\nPlayerRank\022\016\n\006charid\030\001 \001(\004\022\020\n\010cha"
    "rname\030\002 \001(\t\022\016\n\006career\030\003 \001(\005\022\r\n\005level\030\004 \001"
    "(\005\022\021\n\tpvp_score\030\005 \001(\005\022\017\n\007pvp_num\030\006 \001(\005\022("
    "\n\010pvp_info\030\007 \001(\0132\026.proto.message.PVPInfo"
    "\022\023\n\013arena_score\030\010 \001(\005\022\023\n\013arena_stage\030\t \001"
    "(\005\022,\n\narena_info\030\n \001(\0132\030.proto.message.A"
    "renaInfo\022\026\n\016boat_pvp_score\030\013 \001(\005\022\024\n\014boat"
    "_pvp_num\030\014 \001(\005\022-\n\rboat_pvp_info\030\r \001(\0132\026."
    "proto.message.PVPInfo\"+\n\007NameMsg\022\016\n\006char"
    "id\030\001 \001(\004\022\020\n\010charname\030\002 \001(\t\"\306\001\n\016DBOffline"
    "Event\022\017\n\007eventid\030\001 \001(\r\022\021\n\teventtype\030\002 \001("
    "\005\022\017\n\007fromply\030\003 \001(\004\022\r\n\005toply\030\004 \001(\004\022\022\n\neve"
    "ntstate\030\005 \001(\005\022\021\n\tintparam1\030\006 \001(\005\022\021\n\tintp"
    "aram2\030\007 \001(\005\022\021\n\tstrparam1\030\010 \001(\t\022\021\n\tstrpar"
    "am2\030\t \001(\t\022\020\n\010timetick\030\n \001(\004B\017\n\rproto.mes"
    "sage", 3364);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "db_player.proto", &protobuf_RegisterTypes);
  PlayerInfo::default_instance_ = new PlayerInfo();
  CreatePlayer::default_instance_ = new CreatePlayer();
  PlayerRank::default_instance_ = new PlayerRank();
  NameMsg::default_instance_ = new NameMsg();
  DBOfflineEvent::default_instance_ = new DBOfflineEvent();
  PlayerInfo::default_instance_->InitAsDefaultInstance();
  CreatePlayer::default_instance_->InitAsDefaultInstance();
  PlayerRank::default_instance_->InitAsDefaultInstance();
  NameMsg::default_instance_->InitAsDefaultInstance();
  DBOfflineEvent::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_db_5fplayer_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_db_5fplayer_2eproto {
  StaticDescriptorInitializer_db_5fplayer_2eproto() {
    protobuf_AddDesc_db_5fplayer_2eproto();
  }
} static_descriptor_initializer_db_5fplayer_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PlayerInfo::kCharidFieldNumber;
const int PlayerInfo::kAccountFieldNumber;
const int PlayerInfo::kCharnameFieldNumber;
const int PlayerInfo::kServeridFieldNumber;
const int PlayerInfo::kCareerFieldNumber;
const int PlayerInfo::kIdentityFieldNumber;
const int PlayerInfo::kTitleFieldNumber;
const int PlayerInfo::kLevelFieldNumber;
const int PlayerInfo::kExpFieldNumber;
const int PlayerInfo::kDoubleexpFieldNumber;
const int PlayerInfo::kSilverPayFieldNumber;
const int PlayerInfo::kSilverFreeFieldNumber;
const int PlayerInfo::kGoldPayFieldNumber;
const int PlayerInfo::kGoldFreeFieldNumber;
const int PlayerInfo::kDiamondPayFieldNumber;
const int PlayerInfo::kDiamondFreeFieldNumber;
const int PlayerInfo::kTimestampFieldNumber;
const int PlayerInfo::kPlatidFieldNumber;
const int PlayerInfo::kSdkuuidFieldNumber;
const int PlayerInfo::kDataInfoFieldNumber;
const int PlayerInfo::kItemInfoFieldNumber;
const int PlayerInfo::kEquiponInfoFieldNumber;
const int PlayerInfo::kSkillInfoFieldNumber;
const int PlayerInfo::kQuestInfoFieldNumber;
const int PlayerInfo::kShopInfoFieldNumber;
const int PlayerInfo::kTalentInfoFieldNumber;
const int PlayerInfo::kFriendInfoFieldNumber;
const int PlayerInfo::kDungeonInfoFieldNumber;
const int PlayerInfo::kActivityInfoFieldNumber;
const int PlayerInfo::kLivelyInfoFieldNumber;
const int PlayerInfo::kTitleInfoFieldNumber;
const int PlayerInfo::kWelfareInfoFieldNumber;
const int PlayerInfo::kAchieveInfoFieldNumber;
const int PlayerInfo::kGodweaponInfoFieldNumber;
const int PlayerInfo::kRideInfoFieldNumber;
const int PlayerInfo::kPetInfoFieldNumber;
const int PlayerInfo::kAwakenInfoFieldNumber;
const int PlayerInfo::kBoatInfoFieldNumber;
const int PlayerInfo::kMercenaryInfoFieldNumber;
const int PlayerInfo::kSevendayInfoFieldNumber;
const int PlayerInfo::kSPotentialFieldNumber;
const int PlayerInfo::kVipInfoFieldNumber;
const int PlayerInfo::kProgressconInfoFieldNumber;
const int PlayerInfo::kInvestmentInfoFieldNumber;
const int PlayerInfo::kDailychargeInfoFieldNumber;
const int PlayerInfo::kLimitchargeInfoFieldNumber;
const int PlayerInfo::kChargebiggiftInfoFieldNumber;
const int PlayerInfo::kContinuouschargeInfoFieldNumber;
const int PlayerInfo::kSpecialsaleInfoFieldNumber;
const int PlayerInfo::kLosttreasureInfoFieldNumber;
const int PlayerInfo::kMoneytreeInfoFieldNumber;
const int PlayerInfo::kDiscountstoreInfoFieldNumber;
#endif  // !_MSC_VER

PlayerInfo::PlayerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerInfo::InitAsDefaultInstance() {
  data_info_ = const_cast< ::proto::message::DataInfo*>(&::proto::message::DataInfo::default_instance());
  item_info_ = const_cast< ::proto::message::AllItemInfo*>(&::proto::message::AllItemInfo::default_instance());
  equipon_info_ = const_cast< ::proto::message::EquiponInfo*>(&::proto::message::EquiponInfo::default_instance());
  skill_info_ = const_cast< ::proto::message::AllSkillInfo*>(&::proto::message::AllSkillInfo::default_instance());
  quest_info_ = const_cast< ::proto::message::ProtoAllQuestInfo*>(&::proto::message::ProtoAllQuestInfo::default_instance());
  shop_info_ = const_cast< ::proto::message::ShopInfo*>(&::proto::message::ShopInfo::default_instance());
  talent_info_ = const_cast< ::proto::message::AllTalentInfo*>(&::proto::message::AllTalentInfo::default_instance());
  friend_info_ = const_cast< ::proto::message::ProtoAllFriendInfo*>(&::proto::message::ProtoAllFriendInfo::default_instance());
  dungeon_info_ = const_cast< ::proto::message::DungeonInfo*>(&::proto::message::DungeonInfo::default_instance());
  activity_info_ = const_cast< ::proto::message::ActivityInfo*>(&::proto::message::ActivityInfo::default_instance());
  lively_info_ = const_cast< ::proto::message::PlayerLivelyInfo*>(&::proto::message::PlayerLivelyInfo::default_instance());
  title_info_ = const_cast< ::proto::message::TitleData*>(&::proto::message::TitleData::default_instance());
  welfare_info_ = const_cast< ::proto::message::WelfareInfo*>(&::proto::message::WelfareInfo::default_instance());
  achieve_info_ = const_cast< ::proto::message::DBAchieveInfo*>(&::proto::message::DBAchieveInfo::default_instance());
  godweapon_info_ = const_cast< ::proto::message::ProtoGodWeaponAllCellInfo*>(&::proto::message::ProtoGodWeaponAllCellInfo::default_instance());
  ride_info_ = const_cast< ::proto::message::ProtoRideAllCellInfo*>(&::proto::message::ProtoRideAllCellInfo::default_instance());
  pet_info_ = const_cast< ::proto::message::ProtoPetAllCellInfo*>(&::proto::message::ProtoPetAllCellInfo::default_instance());
  awaken_info_ = const_cast< ::proto::message::ProtoAwakenAllCellInfo*>(&::proto::message::ProtoAwakenAllCellInfo::default_instance());
  boat_info_ = const_cast< ::proto::message::BoatAllData*>(&::proto::message::BoatAllData::default_instance());
  mercenary_info_ = const_cast< ::proto::message::ProtoMerAllCellInfo*>(&::proto::message::ProtoMerAllCellInfo::default_instance());
  sevenday_info_ = const_cast< ::proto::message::ProtoAllSevenDayTargetInfo*>(&::proto::message::ProtoAllSevenDayTargetInfo::default_instance());
  spotential_ = const_cast< ::proto::message::Potential*>(&::proto::message::Potential::default_instance());
  vip_info_ = const_cast< ::proto::message::VIPInfo*>(&::proto::message::VIPInfo::default_instance());
  progresscon_info_ = const_cast< ::proto::message::ProtoAllProgressConInfo*>(&::proto::message::ProtoAllProgressConInfo::default_instance());
  investment_info_ = const_cast< ::proto::message::ProtoAllInvestmentInfo*>(&::proto::message::ProtoAllInvestmentInfo::default_instance());
  dailycharge_info_ = const_cast< ::proto::message::ProtoAllDailyFirstChargeInfo*>(&::proto::message::ProtoAllDailyFirstChargeInfo::default_instance());
  limitcharge_info_ = const_cast< ::proto::message::ProtoAllLimitChargeInfo*>(&::proto::message::ProtoAllLimitChargeInfo::default_instance());
  chargebiggift_info_ = const_cast< ::proto::message::ProtoAllChargeBigGiftInfo*>(&::proto::message::ProtoAllChargeBigGiftInfo::default_instance());
  continuouscharge_info_ = const_cast< ::proto::message::ContinuousChargeInfo*>(&::proto::message::ContinuousChargeInfo::default_instance());
  specialsale_info_ = const_cast< ::proto::message::SpecialSaleInfo*>(&::proto::message::SpecialSaleInfo::default_instance());
  losttreasure_info_ = const_cast< ::proto::message::LostTreasureInfo*>(&::proto::message::LostTreasureInfo::default_instance());
  moneytree_info_ = const_cast< ::proto::message::MoneyTreeInfo*>(&::proto::message::MoneyTreeInfo::default_instance());
  discountstore_info_ = const_cast< ::proto::message::DiscountStoreInfo*>(&::proto::message::DiscountStoreInfo::default_instance());
}

PlayerInfo::PlayerInfo(const PlayerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  serverid_ = 0;
  career_ = 0;
  identity_ = 0;
  title_ = 0;
  level_ = 0;
  exp_ = GOOGLE_ULONGLONG(0);
  doubleexp_ = 0;
  silver_pay_ = 0;
  silver_free_ = 0;
  gold_pay_ = 0;
  gold_free_ = 0;
  diamond_pay_ = 0;
  diamond_free_ = 0;
  timestamp_ = 0u;
  platid_ = 0u;
  sdkuuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  data_info_ = NULL;
  item_info_ = NULL;
  equipon_info_ = NULL;
  skill_info_ = NULL;
  quest_info_ = NULL;
  shop_info_ = NULL;
  talent_info_ = NULL;
  friend_info_ = NULL;
  dungeon_info_ = NULL;
  activity_info_ = NULL;
  lively_info_ = NULL;
  title_info_ = NULL;
  welfare_info_ = NULL;
  achieve_info_ = NULL;
  godweapon_info_ = NULL;
  ride_info_ = NULL;
  pet_info_ = NULL;
  awaken_info_ = NULL;
  boat_info_ = NULL;
  mercenary_info_ = NULL;
  sevenday_info_ = NULL;
  spotential_ = NULL;
  vip_info_ = NULL;
  progresscon_info_ = NULL;
  investment_info_ = NULL;
  dailycharge_info_ = NULL;
  limitcharge_info_ = NULL;
  chargebiggift_info_ = NULL;
  continuouscharge_info_ = NULL;
  specialsale_info_ = NULL;
  losttreasure_info_ = NULL;
  moneytree_info_ = NULL;
  discountstore_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerInfo::~PlayerInfo() {
  SharedDtor();
}

void PlayerInfo::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (charname_ != &::google::protobuf::internal::kEmptyString) {
    delete charname_;
  }
  if (sdkuuid_ != &::google::protobuf::internal::kEmptyString) {
    delete sdkuuid_;
  }
  if (this != default_instance_) {
    delete data_info_;
    delete item_info_;
    delete equipon_info_;
    delete skill_info_;
    delete quest_info_;
    delete shop_info_;
    delete talent_info_;
    delete friend_info_;
    delete dungeon_info_;
    delete activity_info_;
    delete lively_info_;
    delete title_info_;
    delete welfare_info_;
    delete achieve_info_;
    delete godweapon_info_;
    delete ride_info_;
    delete pet_info_;
    delete awaken_info_;
    delete boat_info_;
    delete mercenary_info_;
    delete sevenday_info_;
    delete spotential_;
    delete vip_info_;
    delete progresscon_info_;
    delete investment_info_;
    delete dailycharge_info_;
    delete limitcharge_info_;
    delete chargebiggift_info_;
    delete continuouscharge_info_;
    delete specialsale_info_;
    delete losttreasure_info_;
    delete moneytree_info_;
    delete discountstore_info_;
  }
}

void PlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerInfo_descriptor_;
}

const PlayerInfo& PlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_5fplayer_2eproto();
  return *default_instance_;
}

PlayerInfo* PlayerInfo::default_instance_ = NULL;

PlayerInfo* PlayerInfo::New() const {
  return new PlayerInfo;
}

void PlayerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_ULONGLONG(0);
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_charname()) {
      if (charname_ != &::google::protobuf::internal::kEmptyString) {
        charname_->clear();
      }
    }
    serverid_ = 0;
    career_ = 0;
    identity_ = 0;
    title_ = 0;
    level_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    exp_ = GOOGLE_ULONGLONG(0);
    doubleexp_ = 0;
    silver_pay_ = 0;
    silver_free_ = 0;
    gold_pay_ = 0;
    gold_free_ = 0;
    diamond_pay_ = 0;
    diamond_free_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    timestamp_ = 0u;
    platid_ = 0u;
    if (has_sdkuuid()) {
      if (sdkuuid_ != &::google::protobuf::internal::kEmptyString) {
        sdkuuid_->clear();
      }
    }
    if (has_data_info()) {
      if (data_info_ != NULL) data_info_->::proto::message::DataInfo::Clear();
    }
    if (has_item_info()) {
      if (item_info_ != NULL) item_info_->::proto::message::AllItemInfo::Clear();
    }
    if (has_equipon_info()) {
      if (equipon_info_ != NULL) equipon_info_->::proto::message::EquiponInfo::Clear();
    }
    if (has_skill_info()) {
      if (skill_info_ != NULL) skill_info_->::proto::message::AllSkillInfo::Clear();
    }
    if (has_quest_info()) {
      if (quest_info_ != NULL) quest_info_->::proto::message::ProtoAllQuestInfo::Clear();
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_shop_info()) {
      if (shop_info_ != NULL) shop_info_->::proto::message::ShopInfo::Clear();
    }
    if (has_talent_info()) {
      if (talent_info_ != NULL) talent_info_->::proto::message::AllTalentInfo::Clear();
    }
    if (has_friend_info()) {
      if (friend_info_ != NULL) friend_info_->::proto::message::ProtoAllFriendInfo::Clear();
    }
    if (has_dungeon_info()) {
      if (dungeon_info_ != NULL) dungeon_info_->::proto::message::DungeonInfo::Clear();
    }
    if (has_activity_info()) {
      if (activity_info_ != NULL) activity_info_->::proto::message::ActivityInfo::Clear();
    }
    if (has_lively_info()) {
      if (lively_info_ != NULL) lively_info_->::proto::message::PlayerLivelyInfo::Clear();
    }
    if (has_title_info()) {
      if (title_info_ != NULL) title_info_->::proto::message::TitleData::Clear();
    }
    if (has_welfare_info()) {
      if (welfare_info_ != NULL) welfare_info_->::proto::message::WelfareInfo::Clear();
    }
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (has_achieve_info()) {
      if (achieve_info_ != NULL) achieve_info_->::proto::message::DBAchieveInfo::Clear();
    }
    if (has_godweapon_info()) {
      if (godweapon_info_ != NULL) godweapon_info_->::proto::message::ProtoGodWeaponAllCellInfo::Clear();
    }
    if (has_ride_info()) {
      if (ride_info_ != NULL) ride_info_->::proto::message::ProtoRideAllCellInfo::Clear();
    }
    if (has_pet_info()) {
      if (pet_info_ != NULL) pet_info_->::proto::message::ProtoPetAllCellInfo::Clear();
    }
    if (has_awaken_info()) {
      if (awaken_info_ != NULL) awaken_info_->::proto::message::ProtoAwakenAllCellInfo::Clear();
    }
    if (has_boat_info()) {
      if (boat_info_ != NULL) boat_info_->::proto::message::BoatAllData::Clear();
    }
    if (has_mercenary_info()) {
      if (mercenary_info_ != NULL) mercenary_info_->::proto::message::ProtoMerAllCellInfo::Clear();
    }
    if (has_sevenday_info()) {
      if (sevenday_info_ != NULL) sevenday_info_->::proto::message::ProtoAllSevenDayTargetInfo::Clear();
    }
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (has_spotential()) {
      if (spotential_ != NULL) spotential_->::proto::message::Potential::Clear();
    }
    if (has_vip_info()) {
      if (vip_info_ != NULL) vip_info_->::proto::message::VIPInfo::Clear();
    }
    if (has_progresscon_info()) {
      if (progresscon_info_ != NULL) progresscon_info_->::proto::message::ProtoAllProgressConInfo::Clear();
    }
    if (has_investment_info()) {
      if (investment_info_ != NULL) investment_info_->::proto::message::ProtoAllInvestmentInfo::Clear();
    }
    if (has_dailycharge_info()) {
      if (dailycharge_info_ != NULL) dailycharge_info_->::proto::message::ProtoAllDailyFirstChargeInfo::Clear();
    }
    if (has_limitcharge_info()) {
      if (limitcharge_info_ != NULL) limitcharge_info_->::proto::message::ProtoAllLimitChargeInfo::Clear();
    }
    if (has_chargebiggift_info()) {
      if (chargebiggift_info_ != NULL) chargebiggift_info_->::proto::message::ProtoAllChargeBigGiftInfo::Clear();
    }
    if (has_continuouscharge_info()) {
      if (continuouscharge_info_ != NULL) continuouscharge_info_->::proto::message::ContinuousChargeInfo::Clear();
    }
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (has_specialsale_info()) {
      if (specialsale_info_ != NULL) specialsale_info_->::proto::message::SpecialSaleInfo::Clear();
    }
    if (has_losttreasure_info()) {
      if (losttreasure_info_ != NULL) losttreasure_info_->::proto::message::LostTreasureInfo::Clear();
    }
    if (has_moneytree_info()) {
      if (moneytree_info_ != NULL) moneytree_info_->::proto::message::MoneyTreeInfo::Clear();
    }
    if (has_discountstore_info()) {
      if (discountstore_info_ != NULL) discountstore_info_->::proto::message::DiscountStoreInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account;
        break;
      }

      // optional string account = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_charname;
        break;
      }

      // optional string charname = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_charname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_charname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->charname().data(), this->charname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_serverid;
        break;
      }

      // optional int32 serverid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_career;
        break;
      }

      // optional int32 career = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_career:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &career_)));
          set_has_career();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_identity;
        break;
      }

      // optional int32 identity = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_identity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &identity_)));
          set_has_identity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_title;
        break;
      }

      // optional int32 title = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_title:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &title_)));
          set_has_title();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_level;
        break;
      }

      // optional int32 level = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_exp;
        break;
      }

      // optional uint64 exp = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_doubleexp;
        break;
      }

      // optional int32 doubleexp = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_doubleexp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &doubleexp_)));
          set_has_doubleexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_silver_pay;
        break;
      }

      // optional int32 silver_pay = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_silver_pay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &silver_pay_)));
          set_has_silver_pay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_silver_free;
        break;
      }

      // optional int32 silver_free = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_silver_free:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &silver_free_)));
          set_has_silver_free();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_gold_pay;
        break;
      }

      // optional int32 gold_pay = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold_pay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_pay_)));
          set_has_gold_pay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_gold_free;
        break;
      }

      // optional int32 gold_free = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold_free:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_free_)));
          set_has_gold_free();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_diamond_pay;
        break;
      }

      // optional int32 diamond_pay = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_diamond_pay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &diamond_pay_)));
          set_has_diamond_pay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_diamond_free;
        break;
      }

      // optional int32 diamond_free = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_diamond_free:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &diamond_free_)));
          set_has_diamond_free();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_timestamp;
        break;
      }

      // optional uint32 timestamp = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_platid;
        break;
      }

      // optional uint32 platid = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_platid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &platid_)));
          set_has_platid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_sdkuuid;
        break;
      }

      // optional string sdkuuid = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sdkuuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sdkuuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sdkuuid().data(), this->sdkuuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_data_info;
        break;
      }

      // optional .proto.message.DataInfo data_info = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_item_info;
        break;
      }

      // optional .proto.message.AllItemInfo item_info = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_equipon_info;
        break;
      }

      // optional .proto.message.EquiponInfo equipon_info = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equipon_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equipon_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_skill_info;
        break;
      }

      // optional .proto.message.AllSkillInfo skill_info = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_skill_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_quest_info;
        break;
      }

      // optional .proto.message.ProtoAllQuestInfo quest_info = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_quest_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_quest_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_shop_info;
        break;
      }

      // optional .proto.message.ShopInfo shop_info = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shop_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shop_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_talent_info;
        break;
      }

      // optional .proto.message.AllTalentInfo talent_info = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_talent_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_talent_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(226)) goto parse_friend_info;
        break;
      }

      // optional .proto.message.ProtoAllFriendInfo friend_info = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friend_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_friend_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(234)) goto parse_dungeon_info;
        break;
      }

      // optional .proto.message.DungeonInfo dungeon_info = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dungeon_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dungeon_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_activity_info;
        break;
      }

      // optional .proto.message.ActivityInfo activity_info = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_activity_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_activity_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse_lively_info;
        break;
      }

      // optional .proto.message.PlayerLivelyInfo lively_info = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lively_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lively_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(258)) goto parse_title_info;
        break;
      }

      // optional .proto.message.TitleData title_info = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_title_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(266)) goto parse_welfare_info;
        break;
      }

      // optional .proto.message.WelfareInfo welfare_info = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_welfare_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_welfare_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(274)) goto parse_achieve_info;
        break;
      }

      // optional .proto.message.DBAchieveInfo achieve_info = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_achieve_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_achieve_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(282)) goto parse_godweapon_info;
        break;
      }

      // optional .proto.message.ProtoGodWeaponAllCellInfo godweapon_info = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_godweapon_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_godweapon_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(290)) goto parse_ride_info;
        break;
      }

      // optional .proto.message.ProtoRideAllCellInfo ride_info = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ride_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ride_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(298)) goto parse_pet_info;
        break;
      }

      // optional .proto.message.ProtoPetAllCellInfo pet_info = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pet_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pet_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(306)) goto parse_awaken_info;
        break;
      }

      // optional .proto.message.ProtoAwakenAllCellInfo awaken_info = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_awaken_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_awaken_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(314)) goto parse_boat_info;
        break;
      }

      // optional .proto.message.BoatAllData boat_info = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_boat_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_boat_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(322)) goto parse_mercenary_info;
        break;
      }

      // optional .proto.message.ProtoMerAllCellInfo mercenary_info = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mercenary_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mercenary_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(330)) goto parse_sevenday_info;
        break;
      }

      // optional .proto.message.ProtoAllSevenDayTargetInfo sevenday_info = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sevenday_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sevenday_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(338)) goto parse_sPotential;
        break;
      }

      // optional .proto.message.Potential sPotential = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sPotential:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_spotential()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(346)) goto parse_vip_info;
        break;
      }

      // optional .proto.message.VIPInfo vip_info = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vip_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vip_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(354)) goto parse_progresscon_info;
        break;
      }

      // optional .proto.message.ProtoAllProgressConInfo progresscon_info = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_progresscon_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_progresscon_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(362)) goto parse_investment_info;
        break;
      }

      // optional .proto.message.ProtoAllInvestmentInfo investment_info = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_investment_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_investment_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(370)) goto parse_dailycharge_info;
        break;
      }

      // optional .proto.message.ProtoAllDailyFirstChargeInfo dailycharge_info = 46;
      case 46: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dailycharge_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dailycharge_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(378)) goto parse_limitcharge_info;
        break;
      }

      // optional .proto.message.ProtoAllLimitChargeInfo limitcharge_info = 47;
      case 47: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_limitcharge_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_limitcharge_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(386)) goto parse_chargebiggift_info;
        break;
      }

      // optional .proto.message.ProtoAllChargeBigGiftInfo chargebiggift_info = 48;
      case 48: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chargebiggift_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chargebiggift_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(394)) goto parse_continuouscharge_info;
        break;
      }

      // optional .proto.message.ContinuousChargeInfo continuouscharge_info = 49;
      case 49: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_continuouscharge_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_continuouscharge_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(402)) goto parse_specialsale_info;
        break;
      }

      // optional .proto.message.SpecialSaleInfo specialsale_info = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_specialsale_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_specialsale_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(410)) goto parse_losttreasure_info;
        break;
      }

      // optional .proto.message.LostTreasureInfo losttreasure_info = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_losttreasure_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_losttreasure_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(418)) goto parse_moneytree_info;
        break;
      }

      // optional .proto.message.MoneyTreeInfo moneytree_info = 52;
      case 52: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_moneytree_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_moneytree_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(426)) goto parse_discountstore_info;
        break;
      }

      // optional .proto.message.DiscountStoreInfo discountstore_info = 53;
      case 53: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_discountstore_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_discountstore_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->account(), output);
  }

  // optional string charname = 3;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->charname(), output);
  }

  // optional int32 serverid = 4;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->serverid(), output);
  }

  // optional int32 career = 5;
  if (has_career()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->career(), output);
  }

  // optional int32 identity = 6;
  if (has_identity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->identity(), output);
  }

  // optional int32 title = 7;
  if (has_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->title(), output);
  }

  // optional int32 level = 8;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->level(), output);
  }

  // optional uint64 exp = 9;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->exp(), output);
  }

  // optional int32 doubleexp = 10;
  if (has_doubleexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->doubleexp(), output);
  }

  // optional int32 silver_pay = 11;
  if (has_silver_pay()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->silver_pay(), output);
  }

  // optional int32 silver_free = 12;
  if (has_silver_free()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->silver_free(), output);
  }

  // optional int32 gold_pay = 13;
  if (has_gold_pay()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->gold_pay(), output);
  }

  // optional int32 gold_free = 14;
  if (has_gold_free()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->gold_free(), output);
  }

  // optional int32 diamond_pay = 15;
  if (has_diamond_pay()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->diamond_pay(), output);
  }

  // optional int32 diamond_free = 16;
  if (has_diamond_free()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->diamond_free(), output);
  }

  // optional uint32 timestamp = 17;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->timestamp(), output);
  }

  // optional uint32 platid = 18;
  if (has_platid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->platid(), output);
  }

  // optional string sdkuuid = 19;
  if (has_sdkuuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sdkuuid().data(), this->sdkuuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->sdkuuid(), output);
  }

  // optional .proto.message.DataInfo data_info = 20;
  if (has_data_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->data_info(), output);
  }

  // optional .proto.message.AllItemInfo item_info = 21;
  if (has_item_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->item_info(), output);
  }

  // optional .proto.message.EquiponInfo equipon_info = 22;
  if (has_equipon_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->equipon_info(), output);
  }

  // optional .proto.message.AllSkillInfo skill_info = 23;
  if (has_skill_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->skill_info(), output);
  }

  // optional .proto.message.ProtoAllQuestInfo quest_info = 24;
  if (has_quest_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->quest_info(), output);
  }

  // optional .proto.message.ShopInfo shop_info = 25;
  if (has_shop_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->shop_info(), output);
  }

  // optional .proto.message.AllTalentInfo talent_info = 27;
  if (has_talent_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, this->talent_info(), output);
  }

  // optional .proto.message.ProtoAllFriendInfo friend_info = 28;
  if (has_friend_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, this->friend_info(), output);
  }

  // optional .proto.message.DungeonInfo dungeon_info = 29;
  if (has_dungeon_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, this->dungeon_info(), output);
  }

  // optional .proto.message.ActivityInfo activity_info = 30;
  if (has_activity_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->activity_info(), output);
  }

  // optional .proto.message.PlayerLivelyInfo lively_info = 31;
  if (has_lively_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, this->lively_info(), output);
  }

  // optional .proto.message.TitleData title_info = 32;
  if (has_title_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, this->title_info(), output);
  }

  // optional .proto.message.WelfareInfo welfare_info = 33;
  if (has_welfare_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      33, this->welfare_info(), output);
  }

  // optional .proto.message.DBAchieveInfo achieve_info = 34;
  if (has_achieve_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      34, this->achieve_info(), output);
  }

  // optional .proto.message.ProtoGodWeaponAllCellInfo godweapon_info = 35;
  if (has_godweapon_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      35, this->godweapon_info(), output);
  }

  // optional .proto.message.ProtoRideAllCellInfo ride_info = 36;
  if (has_ride_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      36, this->ride_info(), output);
  }

  // optional .proto.message.ProtoPetAllCellInfo pet_info = 37;
  if (has_pet_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      37, this->pet_info(), output);
  }

  // optional .proto.message.ProtoAwakenAllCellInfo awaken_info = 38;
  if (has_awaken_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      38, this->awaken_info(), output);
  }

  // optional .proto.message.BoatAllData boat_info = 39;
  if (has_boat_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      39, this->boat_info(), output);
  }

  // optional .proto.message.ProtoMerAllCellInfo mercenary_info = 40;
  if (has_mercenary_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      40, this->mercenary_info(), output);
  }

  // optional .proto.message.ProtoAllSevenDayTargetInfo sevenday_info = 41;
  if (has_sevenday_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      41, this->sevenday_info(), output);
  }

  // optional .proto.message.Potential sPotential = 42;
  if (has_spotential()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      42, this->spotential(), output);
  }

  // optional .proto.message.VIPInfo vip_info = 43;
  if (has_vip_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      43, this->vip_info(), output);
  }

  // optional .proto.message.ProtoAllProgressConInfo progresscon_info = 44;
  if (has_progresscon_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      44, this->progresscon_info(), output);
  }

  // optional .proto.message.ProtoAllInvestmentInfo investment_info = 45;
  if (has_investment_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      45, this->investment_info(), output);
  }

  // optional .proto.message.ProtoAllDailyFirstChargeInfo dailycharge_info = 46;
  if (has_dailycharge_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      46, this->dailycharge_info(), output);
  }

  // optional .proto.message.ProtoAllLimitChargeInfo limitcharge_info = 47;
  if (has_limitcharge_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      47, this->limitcharge_info(), output);
  }

  // optional .proto.message.ProtoAllChargeBigGiftInfo chargebiggift_info = 48;
  if (has_chargebiggift_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      48, this->chargebiggift_info(), output);
  }

  // optional .proto.message.ContinuousChargeInfo continuouscharge_info = 49;
  if (has_continuouscharge_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      49, this->continuouscharge_info(), output);
  }

  // optional .proto.message.SpecialSaleInfo specialsale_info = 50;
  if (has_specialsale_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      50, this->specialsale_info(), output);
  }

  // optional .proto.message.LostTreasureInfo losttreasure_info = 51;
  if (has_losttreasure_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      51, this->losttreasure_info(), output);
  }

  // optional .proto.message.MoneyTreeInfo moneytree_info = 52;
  if (has_moneytree_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      52, this->moneytree_info(), output);
  }

  // optional .proto.message.DiscountStoreInfo discountstore_info = 53;
  if (has_discountstore_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      53, this->discountstore_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->account(), target);
  }

  // optional string charname = 3;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->charname(), target);
  }

  // optional int32 serverid = 4;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->serverid(), target);
  }

  // optional int32 career = 5;
  if (has_career()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->career(), target);
  }

  // optional int32 identity = 6;
  if (has_identity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->identity(), target);
  }

  // optional int32 title = 7;
  if (has_title()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->title(), target);
  }

  // optional int32 level = 8;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->level(), target);
  }

  // optional uint64 exp = 9;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->exp(), target);
  }

  // optional int32 doubleexp = 10;
  if (has_doubleexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->doubleexp(), target);
  }

  // optional int32 silver_pay = 11;
  if (has_silver_pay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->silver_pay(), target);
  }

  // optional int32 silver_free = 12;
  if (has_silver_free()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->silver_free(), target);
  }

  // optional int32 gold_pay = 13;
  if (has_gold_pay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->gold_pay(), target);
  }

  // optional int32 gold_free = 14;
  if (has_gold_free()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->gold_free(), target);
  }

  // optional int32 diamond_pay = 15;
  if (has_diamond_pay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->diamond_pay(), target);
  }

  // optional int32 diamond_free = 16;
  if (has_diamond_free()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->diamond_free(), target);
  }

  // optional uint32 timestamp = 17;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->timestamp(), target);
  }

  // optional uint32 platid = 18;
  if (has_platid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->platid(), target);
  }

  // optional string sdkuuid = 19;
  if (has_sdkuuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sdkuuid().data(), this->sdkuuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->sdkuuid(), target);
  }

  // optional .proto.message.DataInfo data_info = 20;
  if (has_data_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->data_info(), target);
  }

  // optional .proto.message.AllItemInfo item_info = 21;
  if (has_item_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->item_info(), target);
  }

  // optional .proto.message.EquiponInfo equipon_info = 22;
  if (has_equipon_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->equipon_info(), target);
  }

  // optional .proto.message.AllSkillInfo skill_info = 23;
  if (has_skill_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->skill_info(), target);
  }

  // optional .proto.message.ProtoAllQuestInfo quest_info = 24;
  if (has_quest_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, this->quest_info(), target);
  }

  // optional .proto.message.ShopInfo shop_info = 25;
  if (has_shop_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->shop_info(), target);
  }

  // optional .proto.message.AllTalentInfo talent_info = 27;
  if (has_talent_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        27, this->talent_info(), target);
  }

  // optional .proto.message.ProtoAllFriendInfo friend_info = 28;
  if (has_friend_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        28, this->friend_info(), target);
  }

  // optional .proto.message.DungeonInfo dungeon_info = 29;
  if (has_dungeon_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        29, this->dungeon_info(), target);
  }

  // optional .proto.message.ActivityInfo activity_info = 30;
  if (has_activity_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->activity_info(), target);
  }

  // optional .proto.message.PlayerLivelyInfo lively_info = 31;
  if (has_lively_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        31, this->lively_info(), target);
  }

  // optional .proto.message.TitleData title_info = 32;
  if (has_title_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        32, this->title_info(), target);
  }

  // optional .proto.message.WelfareInfo welfare_info = 33;
  if (has_welfare_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        33, this->welfare_info(), target);
  }

  // optional .proto.message.DBAchieveInfo achieve_info = 34;
  if (has_achieve_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        34, this->achieve_info(), target);
  }

  // optional .proto.message.ProtoGodWeaponAllCellInfo godweapon_info = 35;
  if (has_godweapon_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        35, this->godweapon_info(), target);
  }

  // optional .proto.message.ProtoRideAllCellInfo ride_info = 36;
  if (has_ride_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        36, this->ride_info(), target);
  }

  // optional .proto.message.ProtoPetAllCellInfo pet_info = 37;
  if (has_pet_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        37, this->pet_info(), target);
  }

  // optional .proto.message.ProtoAwakenAllCellInfo awaken_info = 38;
  if (has_awaken_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        38, this->awaken_info(), target);
  }

  // optional .proto.message.BoatAllData boat_info = 39;
  if (has_boat_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        39, this->boat_info(), target);
  }

  // optional .proto.message.ProtoMerAllCellInfo mercenary_info = 40;
  if (has_mercenary_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        40, this->mercenary_info(), target);
  }

  // optional .proto.message.ProtoAllSevenDayTargetInfo sevenday_info = 41;
  if (has_sevenday_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        41, this->sevenday_info(), target);
  }

  // optional .proto.message.Potential sPotential = 42;
  if (has_spotential()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        42, this->spotential(), target);
  }

  // optional .proto.message.VIPInfo vip_info = 43;
  if (has_vip_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        43, this->vip_info(), target);
  }

  // optional .proto.message.ProtoAllProgressConInfo progresscon_info = 44;
  if (has_progresscon_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        44, this->progresscon_info(), target);
  }

  // optional .proto.message.ProtoAllInvestmentInfo investment_info = 45;
  if (has_investment_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        45, this->investment_info(), target);
  }

  // optional .proto.message.ProtoAllDailyFirstChargeInfo dailycharge_info = 46;
  if (has_dailycharge_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        46, this->dailycharge_info(), target);
  }

  // optional .proto.message.ProtoAllLimitChargeInfo limitcharge_info = 47;
  if (has_limitcharge_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        47, this->limitcharge_info(), target);
  }

  // optional .proto.message.ProtoAllChargeBigGiftInfo chargebiggift_info = 48;
  if (has_chargebiggift_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        48, this->chargebiggift_info(), target);
  }

  // optional .proto.message.ContinuousChargeInfo continuouscharge_info = 49;
  if (has_continuouscharge_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        49, this->continuouscharge_info(), target);
  }

  // optional .proto.message.SpecialSaleInfo specialsale_info = 50;
  if (has_specialsale_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        50, this->specialsale_info(), target);
  }

  // optional .proto.message.LostTreasureInfo losttreasure_info = 51;
  if (has_losttreasure_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        51, this->losttreasure_info(), target);
  }

  // optional .proto.message.MoneyTreeInfo moneytree_info = 52;
  if (has_moneytree_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        52, this->moneytree_info(), target);
  }

  // optional .proto.message.DiscountStoreInfo discountstore_info = 53;
  if (has_discountstore_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        53, this->discountstore_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional string account = 2;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional string charname = 3;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->charname());
    }

    // optional int32 serverid = 4;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serverid());
    }

    // optional int32 career = 5;
    if (has_career()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->career());
    }

    // optional int32 identity = 6;
    if (has_identity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->identity());
    }

    // optional int32 title = 7;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->title());
    }

    // optional int32 level = 8;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 exp = 9;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->exp());
    }

    // optional int32 doubleexp = 10;
    if (has_doubleexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->doubleexp());
    }

    // optional int32 silver_pay = 11;
    if (has_silver_pay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->silver_pay());
    }

    // optional int32 silver_free = 12;
    if (has_silver_free()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->silver_free());
    }

    // optional int32 gold_pay = 13;
    if (has_gold_pay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold_pay());
    }

    // optional int32 gold_free = 14;
    if (has_gold_free()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold_free());
    }

    // optional int32 diamond_pay = 15;
    if (has_diamond_pay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->diamond_pay());
    }

    // optional int32 diamond_free = 16;
    if (has_diamond_free()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->diamond_free());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 timestamp = 17;
    if (has_timestamp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

    // optional uint32 platid = 18;
    if (has_platid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->platid());
    }

    // optional string sdkuuid = 19;
    if (has_sdkuuid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sdkuuid());
    }

    // optional .proto.message.DataInfo data_info = 20;
    if (has_data_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data_info());
    }

    // optional .proto.message.AllItemInfo item_info = 21;
    if (has_item_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item_info());
    }

    // optional .proto.message.EquiponInfo equipon_info = 22;
    if (has_equipon_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equipon_info());
    }

    // optional .proto.message.AllSkillInfo skill_info = 23;
    if (has_skill_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->skill_info());
    }

    // optional .proto.message.ProtoAllQuestInfo quest_info = 24;
    if (has_quest_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->quest_info());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional .proto.message.ShopInfo shop_info = 25;
    if (has_shop_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shop_info());
    }

    // optional .proto.message.AllTalentInfo talent_info = 27;
    if (has_talent_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->talent_info());
    }

    // optional .proto.message.ProtoAllFriendInfo friend_info = 28;
    if (has_friend_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->friend_info());
    }

    // optional .proto.message.DungeonInfo dungeon_info = 29;
    if (has_dungeon_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dungeon_info());
    }

    // optional .proto.message.ActivityInfo activity_info = 30;
    if (has_activity_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->activity_info());
    }

    // optional .proto.message.PlayerLivelyInfo lively_info = 31;
    if (has_lively_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lively_info());
    }

    // optional .proto.message.TitleData title_info = 32;
    if (has_title_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->title_info());
    }

    // optional .proto.message.WelfareInfo welfare_info = 33;
    if (has_welfare_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->welfare_info());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional .proto.message.DBAchieveInfo achieve_info = 34;
    if (has_achieve_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->achieve_info());
    }

    // optional .proto.message.ProtoGodWeaponAllCellInfo godweapon_info = 35;
    if (has_godweapon_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->godweapon_info());
    }

    // optional .proto.message.ProtoRideAllCellInfo ride_info = 36;
    if (has_ride_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ride_info());
    }

    // optional .proto.message.ProtoPetAllCellInfo pet_info = 37;
    if (has_pet_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pet_info());
    }

    // optional .proto.message.ProtoAwakenAllCellInfo awaken_info = 38;
    if (has_awaken_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->awaken_info());
    }

    // optional .proto.message.BoatAllData boat_info = 39;
    if (has_boat_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->boat_info());
    }

    // optional .proto.message.ProtoMerAllCellInfo mercenary_info = 40;
    if (has_mercenary_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mercenary_info());
    }

    // optional .proto.message.ProtoAllSevenDayTargetInfo sevenday_info = 41;
    if (has_sevenday_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sevenday_info());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional .proto.message.Potential sPotential = 42;
    if (has_spotential()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->spotential());
    }

    // optional .proto.message.VIPInfo vip_info = 43;
    if (has_vip_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vip_info());
    }

    // optional .proto.message.ProtoAllProgressConInfo progresscon_info = 44;
    if (has_progresscon_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->progresscon_info());
    }

    // optional .proto.message.ProtoAllInvestmentInfo investment_info = 45;
    if (has_investment_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->investment_info());
    }

    // optional .proto.message.ProtoAllDailyFirstChargeInfo dailycharge_info = 46;
    if (has_dailycharge_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dailycharge_info());
    }

    // optional .proto.message.ProtoAllLimitChargeInfo limitcharge_info = 47;
    if (has_limitcharge_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->limitcharge_info());
    }

    // optional .proto.message.ProtoAllChargeBigGiftInfo chargebiggift_info = 48;
    if (has_chargebiggift_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chargebiggift_info());
    }

    // optional .proto.message.ContinuousChargeInfo continuouscharge_info = 49;
    if (has_continuouscharge_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->continuouscharge_info());
    }

  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional .proto.message.SpecialSaleInfo specialsale_info = 50;
    if (has_specialsale_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->specialsale_info());
    }

    // optional .proto.message.LostTreasureInfo losttreasure_info = 51;
    if (has_losttreasure_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->losttreasure_info());
    }

    // optional .proto.message.MoneyTreeInfo moneytree_info = 52;
    if (has_moneytree_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->moneytree_info());
    }

    // optional .proto.message.DiscountStoreInfo discountstore_info = 53;
    if (has_discountstore_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->discountstore_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerInfo::MergeFrom(const PlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_charname()) {
      set_charname(from.charname());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_career()) {
      set_career(from.career());
    }
    if (from.has_identity()) {
      set_identity(from.identity());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_doubleexp()) {
      set_doubleexp(from.doubleexp());
    }
    if (from.has_silver_pay()) {
      set_silver_pay(from.silver_pay());
    }
    if (from.has_silver_free()) {
      set_silver_free(from.silver_free());
    }
    if (from.has_gold_pay()) {
      set_gold_pay(from.gold_pay());
    }
    if (from.has_gold_free()) {
      set_gold_free(from.gold_free());
    }
    if (from.has_diamond_pay()) {
      set_diamond_pay(from.diamond_pay());
    }
    if (from.has_diamond_free()) {
      set_diamond_free(from.diamond_free());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_platid()) {
      set_platid(from.platid());
    }
    if (from.has_sdkuuid()) {
      set_sdkuuid(from.sdkuuid());
    }
    if (from.has_data_info()) {
      mutable_data_info()->::proto::message::DataInfo::MergeFrom(from.data_info());
    }
    if (from.has_item_info()) {
      mutable_item_info()->::proto::message::AllItemInfo::MergeFrom(from.item_info());
    }
    if (from.has_equipon_info()) {
      mutable_equipon_info()->::proto::message::EquiponInfo::MergeFrom(from.equipon_info());
    }
    if (from.has_skill_info()) {
      mutable_skill_info()->::proto::message::AllSkillInfo::MergeFrom(from.skill_info());
    }
    if (from.has_quest_info()) {
      mutable_quest_info()->::proto::message::ProtoAllQuestInfo::MergeFrom(from.quest_info());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_shop_info()) {
      mutable_shop_info()->::proto::message::ShopInfo::MergeFrom(from.shop_info());
    }
    if (from.has_talent_info()) {
      mutable_talent_info()->::proto::message::AllTalentInfo::MergeFrom(from.talent_info());
    }
    if (from.has_friend_info()) {
      mutable_friend_info()->::proto::message::ProtoAllFriendInfo::MergeFrom(from.friend_info());
    }
    if (from.has_dungeon_info()) {
      mutable_dungeon_info()->::proto::message::DungeonInfo::MergeFrom(from.dungeon_info());
    }
    if (from.has_activity_info()) {
      mutable_activity_info()->::proto::message::ActivityInfo::MergeFrom(from.activity_info());
    }
    if (from.has_lively_info()) {
      mutable_lively_info()->::proto::message::PlayerLivelyInfo::MergeFrom(from.lively_info());
    }
    if (from.has_title_info()) {
      mutable_title_info()->::proto::message::TitleData::MergeFrom(from.title_info());
    }
    if (from.has_welfare_info()) {
      mutable_welfare_info()->::proto::message::WelfareInfo::MergeFrom(from.welfare_info());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_achieve_info()) {
      mutable_achieve_info()->::proto::message::DBAchieveInfo::MergeFrom(from.achieve_info());
    }
    if (from.has_godweapon_info()) {
      mutable_godweapon_info()->::proto::message::ProtoGodWeaponAllCellInfo::MergeFrom(from.godweapon_info());
    }
    if (from.has_ride_info()) {
      mutable_ride_info()->::proto::message::ProtoRideAllCellInfo::MergeFrom(from.ride_info());
    }
    if (from.has_pet_info()) {
      mutable_pet_info()->::proto::message::ProtoPetAllCellInfo::MergeFrom(from.pet_info());
    }
    if (from.has_awaken_info()) {
      mutable_awaken_info()->::proto::message::ProtoAwakenAllCellInfo::MergeFrom(from.awaken_info());
    }
    if (from.has_boat_info()) {
      mutable_boat_info()->::proto::message::BoatAllData::MergeFrom(from.boat_info());
    }
    if (from.has_mercenary_info()) {
      mutable_mercenary_info()->::proto::message::ProtoMerAllCellInfo::MergeFrom(from.mercenary_info());
    }
    if (from.has_sevenday_info()) {
      mutable_sevenday_info()->::proto::message::ProtoAllSevenDayTargetInfo::MergeFrom(from.sevenday_info());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_spotential()) {
      mutable_spotential()->::proto::message::Potential::MergeFrom(from.spotential());
    }
    if (from.has_vip_info()) {
      mutable_vip_info()->::proto::message::VIPInfo::MergeFrom(from.vip_info());
    }
    if (from.has_progresscon_info()) {
      mutable_progresscon_info()->::proto::message::ProtoAllProgressConInfo::MergeFrom(from.progresscon_info());
    }
    if (from.has_investment_info()) {
      mutable_investment_info()->::proto::message::ProtoAllInvestmentInfo::MergeFrom(from.investment_info());
    }
    if (from.has_dailycharge_info()) {
      mutable_dailycharge_info()->::proto::message::ProtoAllDailyFirstChargeInfo::MergeFrom(from.dailycharge_info());
    }
    if (from.has_limitcharge_info()) {
      mutable_limitcharge_info()->::proto::message::ProtoAllLimitChargeInfo::MergeFrom(from.limitcharge_info());
    }
    if (from.has_chargebiggift_info()) {
      mutable_chargebiggift_info()->::proto::message::ProtoAllChargeBigGiftInfo::MergeFrom(from.chargebiggift_info());
    }
    if (from.has_continuouscharge_info()) {
      mutable_continuouscharge_info()->::proto::message::ContinuousChargeInfo::MergeFrom(from.continuouscharge_info());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_specialsale_info()) {
      mutable_specialsale_info()->::proto::message::SpecialSaleInfo::MergeFrom(from.specialsale_info());
    }
    if (from.has_losttreasure_info()) {
      mutable_losttreasure_info()->::proto::message::LostTreasureInfo::MergeFrom(from.losttreasure_info());
    }
    if (from.has_moneytree_info()) {
      mutable_moneytree_info()->::proto::message::MoneyTreeInfo::MergeFrom(from.moneytree_info());
    }
    if (from.has_discountstore_info()) {
      mutable_discountstore_info()->::proto::message::DiscountStoreInfo::MergeFrom(from.discountstore_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerInfo::CopyFrom(const PlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInfo::IsInitialized() const {

  if (has_data_info()) {
    if (!this->data_info().IsInitialized()) return false;
  }
  if (has_skill_info()) {
    if (!this->skill_info().IsInitialized()) return false;
  }
  if (has_quest_info()) {
    if (!this->quest_info().IsInitialized()) return false;
  }
  if (has_talent_info()) {
    if (!this->talent_info().IsInitialized()) return false;
  }
  if (has_lively_info()) {
    if (!this->lively_info().IsInitialized()) return false;
  }
  if (has_title_info()) {
    if (!this->title_info().IsInitialized()) return false;
  }
  if (has_welfare_info()) {
    if (!this->welfare_info().IsInitialized()) return false;
  }
  if (has_godweapon_info()) {
    if (!this->godweapon_info().IsInitialized()) return false;
  }
  if (has_ride_info()) {
    if (!this->ride_info().IsInitialized()) return false;
  }
  if (has_pet_info()) {
    if (!this->pet_info().IsInitialized()) return false;
  }
  if (has_boat_info()) {
    if (!this->boat_info().IsInitialized()) return false;
  }
  if (has_mercenary_info()) {
    if (!this->mercenary_info().IsInitialized()) return false;
  }
  if (has_sevenday_info()) {
    if (!this->sevenday_info().IsInitialized()) return false;
  }
  if (has_spotential()) {
    if (!this->spotential().IsInitialized()) return false;
  }
  if (has_dailycharge_info()) {
    if (!this->dailycharge_info().IsInitialized()) return false;
  }
  if (has_limitcharge_info()) {
    if (!this->limitcharge_info().IsInitialized()) return false;
  }
  if (has_chargebiggift_info()) {
    if (!this->chargebiggift_info().IsInitialized()) return false;
  }
  if (has_continuouscharge_info()) {
    if (!this->continuouscharge_info().IsInitialized()) return false;
  }
  if (has_specialsale_info()) {
    if (!this->specialsale_info().IsInitialized()) return false;
  }
  if (has_moneytree_info()) {
    if (!this->moneytree_info().IsInitialized()) return false;
  }
  return true;
}

void PlayerInfo::Swap(PlayerInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(account_, other->account_);
    std::swap(charname_, other->charname_);
    std::swap(serverid_, other->serverid_);
    std::swap(career_, other->career_);
    std::swap(identity_, other->identity_);
    std::swap(title_, other->title_);
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    std::swap(doubleexp_, other->doubleexp_);
    std::swap(silver_pay_, other->silver_pay_);
    std::swap(silver_free_, other->silver_free_);
    std::swap(gold_pay_, other->gold_pay_);
    std::swap(gold_free_, other->gold_free_);
    std::swap(diamond_pay_, other->diamond_pay_);
    std::swap(diamond_free_, other->diamond_free_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(platid_, other->platid_);
    std::swap(sdkuuid_, other->sdkuuid_);
    std::swap(data_info_, other->data_info_);
    std::swap(item_info_, other->item_info_);
    std::swap(equipon_info_, other->equipon_info_);
    std::swap(skill_info_, other->skill_info_);
    std::swap(quest_info_, other->quest_info_);
    std::swap(shop_info_, other->shop_info_);
    std::swap(talent_info_, other->talent_info_);
    std::swap(friend_info_, other->friend_info_);
    std::swap(dungeon_info_, other->dungeon_info_);
    std::swap(activity_info_, other->activity_info_);
    std::swap(lively_info_, other->lively_info_);
    std::swap(title_info_, other->title_info_);
    std::swap(welfare_info_, other->welfare_info_);
    std::swap(achieve_info_, other->achieve_info_);
    std::swap(godweapon_info_, other->godweapon_info_);
    std::swap(ride_info_, other->ride_info_);
    std::swap(pet_info_, other->pet_info_);
    std::swap(awaken_info_, other->awaken_info_);
    std::swap(boat_info_, other->boat_info_);
    std::swap(mercenary_info_, other->mercenary_info_);
    std::swap(sevenday_info_, other->sevenday_info_);
    std::swap(spotential_, other->spotential_);
    std::swap(vip_info_, other->vip_info_);
    std::swap(progresscon_info_, other->progresscon_info_);
    std::swap(investment_info_, other->investment_info_);
    std::swap(dailycharge_info_, other->dailycharge_info_);
    std::swap(limitcharge_info_, other->limitcharge_info_);
    std::swap(chargebiggift_info_, other->chargebiggift_info_);
    std::swap(continuouscharge_info_, other->continuouscharge_info_);
    std::swap(specialsale_info_, other->specialsale_info_);
    std::swap(losttreasure_info_, other->losttreasure_info_);
    std::swap(moneytree_info_, other->moneytree_info_);
    std::swap(discountstore_info_, other->discountstore_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerInfo_descriptor_;
  metadata.reflection = PlayerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreatePlayer::kCharidFieldNumber;
const int CreatePlayer::kAccountFieldNumber;
const int CreatePlayer::kCharnameFieldNumber;
const int CreatePlayer::kServerIdFieldNumber;
const int CreatePlayer::kSexFieldNumber;
const int CreatePlayer::kCareerFieldNumber;
const int CreatePlayer::kPlatIdFieldNumber;
const int CreatePlayer::kSdkUuidFieldNumber;
#endif  // !_MSC_VER

CreatePlayer::CreatePlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreatePlayer::InitAsDefaultInstance() {
}

CreatePlayer::CreatePlayer(const CreatePlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreatePlayer::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  server_id_ = 0;
  sex_ = 0;
  career_ = 0;
  plat_id_ = 0;
  sdk_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreatePlayer::~CreatePlayer() {
  SharedDtor();
}

void CreatePlayer::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (charname_ != &::google::protobuf::internal::kEmptyString) {
    delete charname_;
  }
  if (sdk_uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete sdk_uuid_;
  }
  if (this != default_instance_) {
  }
}

void CreatePlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreatePlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreatePlayer_descriptor_;
}

const CreatePlayer& CreatePlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_5fplayer_2eproto();
  return *default_instance_;
}

CreatePlayer* CreatePlayer::default_instance_ = NULL;

CreatePlayer* CreatePlayer::New() const {
  return new CreatePlayer;
}

void CreatePlayer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_ULONGLONG(0);
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_charname()) {
      if (charname_ != &::google::protobuf::internal::kEmptyString) {
        charname_->clear();
      }
    }
    server_id_ = 0;
    sex_ = 0;
    career_ = 0;
    plat_id_ = 0;
    if (has_sdk_uuid()) {
      if (sdk_uuid_ != &::google::protobuf::internal::kEmptyString) {
        sdk_uuid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreatePlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account;
        break;
      }

      // optional string account = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_charname;
        break;
      }

      // optional string charname = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_charname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_charname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->charname().data(), this->charname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_server_id;
        break;
      }

      // optional int32 server_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_sex;
        break;
      }

      // optional int32 sex = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_career;
        break;
      }

      // optional int32 career = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_career:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &career_)));
          set_has_career();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_plat_id;
        break;
      }

      // optional int32 plat_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_plat_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &plat_id_)));
          set_has_plat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_sdk_uuid;
        break;
      }

      // optional string sdk_uuid = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sdk_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sdk_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sdk_uuid().data(), this->sdk_uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreatePlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->account(), output);
  }

  // optional string charname = 3;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->charname(), output);
  }

  // optional int32 server_id = 4;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->server_id(), output);
  }

  // optional int32 sex = 5;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->sex(), output);
  }

  // optional int32 career = 6;
  if (has_career()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->career(), output);
  }

  // optional int32 plat_id = 7;
  if (has_plat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->plat_id(), output);
  }

  // optional string sdk_uuid = 8;
  if (has_sdk_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sdk_uuid().data(), this->sdk_uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->sdk_uuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreatePlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->account(), target);
  }

  // optional string charname = 3;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->charname(), target);
  }

  // optional int32 server_id = 4;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->server_id(), target);
  }

  // optional int32 sex = 5;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->sex(), target);
  }

  // optional int32 career = 6;
  if (has_career()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->career(), target);
  }

  // optional int32 plat_id = 7;
  if (has_plat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->plat_id(), target);
  }

  // optional string sdk_uuid = 8;
  if (has_sdk_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sdk_uuid().data(), this->sdk_uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->sdk_uuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreatePlayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional string account = 2;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional string charname = 3;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->charname());
    }

    // optional int32 server_id = 4;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_id());
    }

    // optional int32 sex = 5;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }

    // optional int32 career = 6;
    if (has_career()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->career());
    }

    // optional int32 plat_id = 7;
    if (has_plat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->plat_id());
    }

    // optional string sdk_uuid = 8;
    if (has_sdk_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sdk_uuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreatePlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreatePlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreatePlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreatePlayer::MergeFrom(const CreatePlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_charname()) {
      set_charname(from.charname());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_career()) {
      set_career(from.career());
    }
    if (from.has_plat_id()) {
      set_plat_id(from.plat_id());
    }
    if (from.has_sdk_uuid()) {
      set_sdk_uuid(from.sdk_uuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreatePlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreatePlayer::CopyFrom(const CreatePlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreatePlayer::IsInitialized() const {

  return true;
}

void CreatePlayer::Swap(CreatePlayer* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(account_, other->account_);
    std::swap(charname_, other->charname_);
    std::swap(server_id_, other->server_id_);
    std::swap(sex_, other->sex_);
    std::swap(career_, other->career_);
    std::swap(plat_id_, other->plat_id_);
    std::swap(sdk_uuid_, other->sdk_uuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreatePlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreatePlayer_descriptor_;
  metadata.reflection = CreatePlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerRank::kCharidFieldNumber;
const int PlayerRank::kCharnameFieldNumber;
const int PlayerRank::kCareerFieldNumber;
const int PlayerRank::kLevelFieldNumber;
const int PlayerRank::kPvpScoreFieldNumber;
const int PlayerRank::kPvpNumFieldNumber;
const int PlayerRank::kPvpInfoFieldNumber;
const int PlayerRank::kArenaScoreFieldNumber;
const int PlayerRank::kArenaStageFieldNumber;
const int PlayerRank::kArenaInfoFieldNumber;
const int PlayerRank::kBoatPvpScoreFieldNumber;
const int PlayerRank::kBoatPvpNumFieldNumber;
const int PlayerRank::kBoatPvpInfoFieldNumber;
#endif  // !_MSC_VER

PlayerRank::PlayerRank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerRank::InitAsDefaultInstance() {
  pvp_info_ = const_cast< ::proto::message::PVPInfo*>(&::proto::message::PVPInfo::default_instance());
  arena_info_ = const_cast< ::proto::message::ArenaInfo*>(&::proto::message::ArenaInfo::default_instance());
  boat_pvp_info_ = const_cast< ::proto::message::PVPInfo*>(&::proto::message::PVPInfo::default_instance());
}

PlayerRank::PlayerRank(const PlayerRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerRank::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  career_ = 0;
  level_ = 0;
  pvp_score_ = 0;
  pvp_num_ = 0;
  pvp_info_ = NULL;
  arena_score_ = 0;
  arena_stage_ = 0;
  arena_info_ = NULL;
  boat_pvp_score_ = 0;
  boat_pvp_num_ = 0;
  boat_pvp_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerRank::~PlayerRank() {
  SharedDtor();
}

void PlayerRank::SharedDtor() {
  if (charname_ != &::google::protobuf::internal::kEmptyString) {
    delete charname_;
  }
  if (this != default_instance_) {
    delete pvp_info_;
    delete arena_info_;
    delete boat_pvp_info_;
  }
}

void PlayerRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerRank_descriptor_;
}

const PlayerRank& PlayerRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_5fplayer_2eproto();
  return *default_instance_;
}

PlayerRank* PlayerRank::default_instance_ = NULL;

PlayerRank* PlayerRank::New() const {
  return new PlayerRank;
}

void PlayerRank::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_ULONGLONG(0);
    if (has_charname()) {
      if (charname_ != &::google::protobuf::internal::kEmptyString) {
        charname_->clear();
      }
    }
    career_ = 0;
    level_ = 0;
    pvp_score_ = 0;
    pvp_num_ = 0;
    if (has_pvp_info()) {
      if (pvp_info_ != NULL) pvp_info_->::proto::message::PVPInfo::Clear();
    }
    arena_score_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    arena_stage_ = 0;
    if (has_arena_info()) {
      if (arena_info_ != NULL) arena_info_->::proto::message::ArenaInfo::Clear();
    }
    boat_pvp_score_ = 0;
    boat_pvp_num_ = 0;
    if (has_boat_pvp_info()) {
      if (boat_pvp_info_ != NULL) boat_pvp_info_->::proto::message::PVPInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_charname;
        break;
      }

      // optional string charname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_charname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_charname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->charname().data(), this->charname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_career;
        break;
      }

      // optional int32 career = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_career:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &career_)));
          set_has_career();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // optional int32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_pvp_score;
        break;
      }

      // optional int32 pvp_score = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pvp_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pvp_score_)));
          set_has_pvp_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_pvp_num;
        break;
      }

      // optional int32 pvp_num = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pvp_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pvp_num_)));
          set_has_pvp_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_pvp_info;
        break;
      }

      // optional .proto.message.PVPInfo pvp_info = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pvp_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pvp_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_arena_score;
        break;
      }

      // optional int32 arena_score = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_arena_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &arena_score_)));
          set_has_arena_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_arena_stage;
        break;
      }

      // optional int32 arena_stage = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_arena_stage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &arena_stage_)));
          set_has_arena_stage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_arena_info;
        break;
      }

      // optional .proto.message.ArenaInfo arena_info = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_arena_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_arena_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_boat_pvp_score;
        break;
      }

      // optional int32 boat_pvp_score = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boat_pvp_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &boat_pvp_score_)));
          set_has_boat_pvp_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_boat_pvp_num;
        break;
      }

      // optional int32 boat_pvp_num = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boat_pvp_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &boat_pvp_num_)));
          set_has_boat_pvp_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_boat_pvp_info;
        break;
      }

      // optional .proto.message.PVPInfo boat_pvp_info = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_boat_pvp_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_boat_pvp_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  // optional string charname = 2;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->charname(), output);
  }

  // optional int32 career = 3;
  if (has_career()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->career(), output);
  }

  // optional int32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->level(), output);
  }

  // optional int32 pvp_score = 5;
  if (has_pvp_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->pvp_score(), output);
  }

  // optional int32 pvp_num = 6;
  if (has_pvp_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->pvp_num(), output);
  }

  // optional .proto.message.PVPInfo pvp_info = 7;
  if (has_pvp_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->pvp_info(), output);
  }

  // optional int32 arena_score = 8;
  if (has_arena_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->arena_score(), output);
  }

  // optional int32 arena_stage = 9;
  if (has_arena_stage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->arena_stage(), output);
  }

  // optional .proto.message.ArenaInfo arena_info = 10;
  if (has_arena_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->arena_info(), output);
  }

  // optional int32 boat_pvp_score = 11;
  if (has_boat_pvp_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->boat_pvp_score(), output);
  }

  // optional int32 boat_pvp_num = 12;
  if (has_boat_pvp_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->boat_pvp_num(), output);
  }

  // optional .proto.message.PVPInfo boat_pvp_info = 13;
  if (has_boat_pvp_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->boat_pvp_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  // optional string charname = 2;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->charname(), target);
  }

  // optional int32 career = 3;
  if (has_career()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->career(), target);
  }

  // optional int32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->level(), target);
  }

  // optional int32 pvp_score = 5;
  if (has_pvp_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->pvp_score(), target);
  }

  // optional int32 pvp_num = 6;
  if (has_pvp_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->pvp_num(), target);
  }

  // optional .proto.message.PVPInfo pvp_info = 7;
  if (has_pvp_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->pvp_info(), target);
  }

  // optional int32 arena_score = 8;
  if (has_arena_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->arena_score(), target);
  }

  // optional int32 arena_stage = 9;
  if (has_arena_stage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->arena_stage(), target);
  }

  // optional .proto.message.ArenaInfo arena_info = 10;
  if (has_arena_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->arena_info(), target);
  }

  // optional int32 boat_pvp_score = 11;
  if (has_boat_pvp_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->boat_pvp_score(), target);
  }

  // optional int32 boat_pvp_num = 12;
  if (has_boat_pvp_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->boat_pvp_num(), target);
  }

  // optional .proto.message.PVPInfo boat_pvp_info = 13;
  if (has_boat_pvp_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->boat_pvp_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerRank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional string charname = 2;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->charname());
    }

    // optional int32 career = 3;
    if (has_career()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->career());
    }

    // optional int32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 pvp_score = 5;
    if (has_pvp_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pvp_score());
    }

    // optional int32 pvp_num = 6;
    if (has_pvp_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pvp_num());
    }

    // optional .proto.message.PVPInfo pvp_info = 7;
    if (has_pvp_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pvp_info());
    }

    // optional int32 arena_score = 8;
    if (has_arena_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->arena_score());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 arena_stage = 9;
    if (has_arena_stage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->arena_stage());
    }

    // optional .proto.message.ArenaInfo arena_info = 10;
    if (has_arena_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->arena_info());
    }

    // optional int32 boat_pvp_score = 11;
    if (has_boat_pvp_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->boat_pvp_score());
    }

    // optional int32 boat_pvp_num = 12;
    if (has_boat_pvp_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->boat_pvp_num());
    }

    // optional .proto.message.PVPInfo boat_pvp_info = 13;
    if (has_boat_pvp_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->boat_pvp_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerRank::MergeFrom(const PlayerRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_charname()) {
      set_charname(from.charname());
    }
    if (from.has_career()) {
      set_career(from.career());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_pvp_score()) {
      set_pvp_score(from.pvp_score());
    }
    if (from.has_pvp_num()) {
      set_pvp_num(from.pvp_num());
    }
    if (from.has_pvp_info()) {
      mutable_pvp_info()->::proto::message::PVPInfo::MergeFrom(from.pvp_info());
    }
    if (from.has_arena_score()) {
      set_arena_score(from.arena_score());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_arena_stage()) {
      set_arena_stage(from.arena_stage());
    }
    if (from.has_arena_info()) {
      mutable_arena_info()->::proto::message::ArenaInfo::MergeFrom(from.arena_info());
    }
    if (from.has_boat_pvp_score()) {
      set_boat_pvp_score(from.boat_pvp_score());
    }
    if (from.has_boat_pvp_num()) {
      set_boat_pvp_num(from.boat_pvp_num());
    }
    if (from.has_boat_pvp_info()) {
      mutable_boat_pvp_info()->::proto::message::PVPInfo::MergeFrom(from.boat_pvp_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerRank::CopyFrom(const PlayerRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerRank::IsInitialized() const {

  return true;
}

void PlayerRank::Swap(PlayerRank* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(charname_, other->charname_);
    std::swap(career_, other->career_);
    std::swap(level_, other->level_);
    std::swap(pvp_score_, other->pvp_score_);
    std::swap(pvp_num_, other->pvp_num_);
    std::swap(pvp_info_, other->pvp_info_);
    std::swap(arena_score_, other->arena_score_);
    std::swap(arena_stage_, other->arena_stage_);
    std::swap(arena_info_, other->arena_info_);
    std::swap(boat_pvp_score_, other->boat_pvp_score_);
    std::swap(boat_pvp_num_, other->boat_pvp_num_);
    std::swap(boat_pvp_info_, other->boat_pvp_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerRank_descriptor_;
  metadata.reflection = PlayerRank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NameMsg::kCharidFieldNumber;
const int NameMsg::kCharnameFieldNumber;
#endif  // !_MSC_VER

NameMsg::NameMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NameMsg::InitAsDefaultInstance() {
}

NameMsg::NameMsg(const NameMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NameMsg::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NameMsg::~NameMsg() {
  SharedDtor();
}

void NameMsg::SharedDtor() {
  if (charname_ != &::google::protobuf::internal::kEmptyString) {
    delete charname_;
  }
  if (this != default_instance_) {
  }
}

void NameMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NameMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NameMsg_descriptor_;
}

const NameMsg& NameMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_5fplayer_2eproto();
  return *default_instance_;
}

NameMsg* NameMsg::default_instance_ = NULL;

NameMsg* NameMsg::New() const {
  return new NameMsg;
}

void NameMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_ULONGLONG(0);
    if (has_charname()) {
      if (charname_ != &::google::protobuf::internal::kEmptyString) {
        charname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NameMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_charname;
        break;
      }

      // optional string charname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_charname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_charname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->charname().data(), this->charname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NameMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  // optional string charname = 2;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->charname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NameMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  // optional string charname = 2;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->charname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NameMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional string charname = 2;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->charname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NameMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NameMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NameMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NameMsg::MergeFrom(const NameMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_charname()) {
      set_charname(from.charname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NameMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NameMsg::CopyFrom(const NameMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NameMsg::IsInitialized() const {

  return true;
}

void NameMsg::Swap(NameMsg* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(charname_, other->charname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NameMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NameMsg_descriptor_;
  metadata.reflection = NameMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DBOfflineEvent::kEventidFieldNumber;
const int DBOfflineEvent::kEventtypeFieldNumber;
const int DBOfflineEvent::kFromplyFieldNumber;
const int DBOfflineEvent::kToplyFieldNumber;
const int DBOfflineEvent::kEventstateFieldNumber;
const int DBOfflineEvent::kIntparam1FieldNumber;
const int DBOfflineEvent::kIntparam2FieldNumber;
const int DBOfflineEvent::kStrparam1FieldNumber;
const int DBOfflineEvent::kStrparam2FieldNumber;
const int DBOfflineEvent::kTimetickFieldNumber;
#endif  // !_MSC_VER

DBOfflineEvent::DBOfflineEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DBOfflineEvent::InitAsDefaultInstance() {
}

DBOfflineEvent::DBOfflineEvent(const DBOfflineEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DBOfflineEvent::SharedCtor() {
  _cached_size_ = 0;
  eventid_ = 0u;
  eventtype_ = 0;
  fromply_ = GOOGLE_ULONGLONG(0);
  toply_ = GOOGLE_ULONGLONG(0);
  eventstate_ = 0;
  intparam1_ = 0;
  intparam2_ = 0;
  strparam1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strparam2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  timetick_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DBOfflineEvent::~DBOfflineEvent() {
  SharedDtor();
}

void DBOfflineEvent::SharedDtor() {
  if (strparam1_ != &::google::protobuf::internal::kEmptyString) {
    delete strparam1_;
  }
  if (strparam2_ != &::google::protobuf::internal::kEmptyString) {
    delete strparam2_;
  }
  if (this != default_instance_) {
  }
}

void DBOfflineEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBOfflineEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBOfflineEvent_descriptor_;
}

const DBOfflineEvent& DBOfflineEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_5fplayer_2eproto();
  return *default_instance_;
}

DBOfflineEvent* DBOfflineEvent::default_instance_ = NULL;

DBOfflineEvent* DBOfflineEvent::New() const {
  return new DBOfflineEvent;
}

void DBOfflineEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eventid_ = 0u;
    eventtype_ = 0;
    fromply_ = GOOGLE_ULONGLONG(0);
    toply_ = GOOGLE_ULONGLONG(0);
    eventstate_ = 0;
    intparam1_ = 0;
    intparam2_ = 0;
    if (has_strparam1()) {
      if (strparam1_ != &::google::protobuf::internal::kEmptyString) {
        strparam1_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_strparam2()) {
      if (strparam2_ != &::google::protobuf::internal::kEmptyString) {
        strparam2_->clear();
      }
    }
    timetick_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DBOfflineEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 eventid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eventid_)));
          set_has_eventid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_eventtype;
        break;
      }

      // optional int32 eventtype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eventtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eventtype_)));
          set_has_eventtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_fromply;
        break;
      }

      // optional uint64 fromply = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fromply:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fromply_)));
          set_has_fromply();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_toply;
        break;
      }

      // optional uint64 toply = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_toply:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &toply_)));
          set_has_toply();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_eventstate;
        break;
      }

      // optional int32 eventstate = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eventstate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eventstate_)));
          set_has_eventstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_intparam1;
        break;
      }

      // optional int32 intparam1 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_intparam1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &intparam1_)));
          set_has_intparam1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_intparam2;
        break;
      }

      // optional int32 intparam2 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_intparam2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &intparam2_)));
          set_has_intparam2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_strparam1;
        break;
      }

      // optional string strparam1 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strparam1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strparam1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strparam1().data(), this->strparam1().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_strparam2;
        break;
      }

      // optional string strparam2 = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strparam2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strparam2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strparam2().data(), this->strparam2().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_timetick;
        break;
      }

      // optional uint64 timetick = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timetick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timetick_)));
          set_has_timetick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DBOfflineEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 eventid = 1;
  if (has_eventid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->eventid(), output);
  }

  // optional int32 eventtype = 2;
  if (has_eventtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->eventtype(), output);
  }

  // optional uint64 fromply = 3;
  if (has_fromply()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->fromply(), output);
  }

  // optional uint64 toply = 4;
  if (has_toply()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->toply(), output);
  }

  // optional int32 eventstate = 5;
  if (has_eventstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->eventstate(), output);
  }

  // optional int32 intparam1 = 6;
  if (has_intparam1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->intparam1(), output);
  }

  // optional int32 intparam2 = 7;
  if (has_intparam2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->intparam2(), output);
  }

  // optional string strparam1 = 8;
  if (has_strparam1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strparam1().data(), this->strparam1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->strparam1(), output);
  }

  // optional string strparam2 = 9;
  if (has_strparam2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strparam2().data(), this->strparam2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->strparam2(), output);
  }

  // optional uint64 timetick = 10;
  if (has_timetick()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->timetick(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DBOfflineEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 eventid = 1;
  if (has_eventid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->eventid(), target);
  }

  // optional int32 eventtype = 2;
  if (has_eventtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->eventtype(), target);
  }

  // optional uint64 fromply = 3;
  if (has_fromply()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->fromply(), target);
  }

  // optional uint64 toply = 4;
  if (has_toply()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->toply(), target);
  }

  // optional int32 eventstate = 5;
  if (has_eventstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->eventstate(), target);
  }

  // optional int32 intparam1 = 6;
  if (has_intparam1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->intparam1(), target);
  }

  // optional int32 intparam2 = 7;
  if (has_intparam2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->intparam2(), target);
  }

  // optional string strparam1 = 8;
  if (has_strparam1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strparam1().data(), this->strparam1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->strparam1(), target);
  }

  // optional string strparam2 = 9;
  if (has_strparam2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strparam2().data(), this->strparam2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->strparam2(), target);
  }

  // optional uint64 timetick = 10;
  if (has_timetick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->timetick(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DBOfflineEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 eventid = 1;
    if (has_eventid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eventid());
    }

    // optional int32 eventtype = 2;
    if (has_eventtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eventtype());
    }

    // optional uint64 fromply = 3;
    if (has_fromply()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fromply());
    }

    // optional uint64 toply = 4;
    if (has_toply()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->toply());
    }

    // optional int32 eventstate = 5;
    if (has_eventstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eventstate());
    }

    // optional int32 intparam1 = 6;
    if (has_intparam1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->intparam1());
    }

    // optional int32 intparam2 = 7;
    if (has_intparam2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->intparam2());
    }

    // optional string strparam1 = 8;
    if (has_strparam1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strparam1());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string strparam2 = 9;
    if (has_strparam2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strparam2());
    }

    // optional uint64 timetick = 10;
    if (has_timetick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timetick());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBOfflineEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DBOfflineEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DBOfflineEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DBOfflineEvent::MergeFrom(const DBOfflineEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eventid()) {
      set_eventid(from.eventid());
    }
    if (from.has_eventtype()) {
      set_eventtype(from.eventtype());
    }
    if (from.has_fromply()) {
      set_fromply(from.fromply());
    }
    if (from.has_toply()) {
      set_toply(from.toply());
    }
    if (from.has_eventstate()) {
      set_eventstate(from.eventstate());
    }
    if (from.has_intparam1()) {
      set_intparam1(from.intparam1());
    }
    if (from.has_intparam2()) {
      set_intparam2(from.intparam2());
    }
    if (from.has_strparam1()) {
      set_strparam1(from.strparam1());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_strparam2()) {
      set_strparam2(from.strparam2());
    }
    if (from.has_timetick()) {
      set_timetick(from.timetick());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DBOfflineEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBOfflineEvent::CopyFrom(const DBOfflineEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBOfflineEvent::IsInitialized() const {

  return true;
}

void DBOfflineEvent::Swap(DBOfflineEvent* other) {
  if (other != this) {
    std::swap(eventid_, other->eventid_);
    std::swap(eventtype_, other->eventtype_);
    std::swap(fromply_, other->fromply_);
    std::swap(toply_, other->toply_);
    std::swap(eventstate_, other->eventstate_);
    std::swap(intparam1_, other->intparam1_);
    std::swap(intparam2_, other->intparam2_);
    std::swap(strparam1_, other->strparam1_);
    std::swap(strparam2_, other->strparam2_);
    std::swap(timetick_, other->timetick_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DBOfflineEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DBOfflineEvent_descriptor_;
  metadata.reflection = DBOfflineEvent_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace proto

// @@protoc_insertion_point(global_scope)
