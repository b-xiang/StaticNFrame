// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#ifndef PROTOBUF_common_2eproto__INCLUDED
#define PROTOBUF_common_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace message {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_common_2eproto();
void protobuf_AssignDesc_common_2eproto();
void protobuf_ShutdownFile_common_2eproto();

class ErrorCode_SC_ErrorCodeMsg;
class NullMessage;
class Point3D;
class Point4D;
class IDNum;
class KeyValue;
class ActivityData;
class PairInt32;
class IDTimes;
class EquipEffect;
class Equip;
class DiamondDoubleHistory;
class BatSkillInfo;
class PlayerEffect;
class BattlePlayerInfo;
class BattleMercenaryInfo;
class BattleSingleHeadInfo;
class BattleHeadInfo;
class BattleBoatInfo;
class MatchPlayerInfo;
class WolrdBossSaledItem;
class OfflineDataDetail;
class MailToMap;
class DreadDungeonData;
class PlayerBaseData;
class GrowData;
class ShowDataDetail;
class PlayerShow;
class TBSyncFlagPos;
class TBFieldInfo;
class TBKillReward;
class TBPlayer;
class TBOverResultInfo;

// ===================================================================

class ErrorCode_SC_ErrorCodeMsg : public ::google::protobuf::Message {
 public:
  ErrorCode_SC_ErrorCodeMsg();
  virtual ~ErrorCode_SC_ErrorCodeMsg();

  ErrorCode_SC_ErrorCodeMsg(const ErrorCode_SC_ErrorCodeMsg& from);

  inline ErrorCode_SC_ErrorCodeMsg& operator=(const ErrorCode_SC_ErrorCodeMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ErrorCode_SC_ErrorCodeMsg& default_instance();

  void Swap(ErrorCode_SC_ErrorCodeMsg* other);

  // implements Message ----------------------------------------------

  ErrorCode_SC_ErrorCodeMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ErrorCode_SC_ErrorCodeMsg& from);
  void MergeFrom(const ErrorCode_SC_ErrorCodeMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 nResult = 1;
  inline bool has_nresult() const;
  inline void clear_nresult();
  static const int kNResultFieldNumber = 1;
  inline ::google::protobuf::int32 nresult() const;
  inline void set_nresult(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.message.ErrorCode_SC_ErrorCodeMsg)
 private:
  inline void set_has_nresult();
  inline void clear_has_nresult();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 nresult_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static ErrorCode_SC_ErrorCodeMsg* default_instance_;
};
// -------------------------------------------------------------------

class NullMessage : public ::google::protobuf::Message {
 public:
  NullMessage();
  virtual ~NullMessage();

  NullMessage(const NullMessage& from);

  inline NullMessage& operator=(const NullMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NullMessage& default_instance();

  void Swap(NullMessage* other);

  // implements Message ----------------------------------------------

  NullMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NullMessage& from);
  void MergeFrom(const NullMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.message.NullMessage)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static NullMessage* default_instance_;
};
// -------------------------------------------------------------------

class Point3D : public ::google::protobuf::Message {
 public:
  Point3D();
  virtual ~Point3D();

  Point3D(const Point3D& from);

  inline Point3D& operator=(const Point3D& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Point3D& default_instance();

  void Swap(Point3D* other);

  // implements Message ----------------------------------------------

  Point3D* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Point3D& from);
  void MergeFrom(const Point3D& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);

  // optional float y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);

  // optional float z = 3;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline float z() const;
  inline void set_z(float value);

  // @@protoc_insertion_point(class_scope:proto.message.Point3D)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  float x_;
  float y_;
  float z_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static Point3D* default_instance_;
};
// -------------------------------------------------------------------

class Point4D : public ::google::protobuf::Message {
 public:
  Point4D();
  virtual ~Point4D();

  Point4D(const Point4D& from);

  inline Point4D& operator=(const Point4D& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Point4D& default_instance();

  void Swap(Point4D* other);

  // implements Message ----------------------------------------------

  Point4D* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Point4D& from);
  void MergeFrom(const Point4D& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);

  // optional float y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);

  // optional float z = 3;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline float z() const;
  inline void set_z(float value);

  // optional float w = 4;
  inline bool has_w() const;
  inline void clear_w();
  static const int kWFieldNumber = 4;
  inline float w() const;
  inline void set_w(float value);

  // @@protoc_insertion_point(class_scope:proto.message.Point4D)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();
  inline void set_has_w();
  inline void clear_has_w();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  float x_;
  float y_;
  float z_;
  float w_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static Point4D* default_instance_;
};
// -------------------------------------------------------------------

class IDNum : public ::google::protobuf::Message {
 public:
  IDNum();
  virtual ~IDNum();

  IDNum(const IDNum& from);

  inline IDNum& operator=(const IDNum& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IDNum& default_instance();

  void Swap(IDNum* other);

  // implements Message ----------------------------------------------

  IDNum* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IDNum& from);
  void MergeFrom(const IDNum& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.message.IDNum)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static IDNum* default_instance_;
};
// -------------------------------------------------------------------

class KeyValue : public ::google::protobuf::Message {
 public:
  KeyValue();
  virtual ~KeyValue();

  KeyValue(const KeyValue& from);

  inline KeyValue& operator=(const KeyValue& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KeyValue& default_instance();

  void Swap(KeyValue* other);

  // implements Message ----------------------------------------------

  KeyValue* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KeyValue& from);
  void MergeFrom(const KeyValue& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline ::google::protobuf::int32 key() const;
  inline void set_key(::google::protobuf::int32 value);

  // optional int32 iValue = 2;
  inline bool has_ivalue() const;
  inline void clear_ivalue();
  static const int kIValueFieldNumber = 2;
  inline ::google::protobuf::int32 ivalue() const;
  inline void set_ivalue(::google::protobuf::int32 value);

  // optional int64 lValue = 3;
  inline bool has_lvalue() const;
  inline void clear_lvalue();
  static const int kLValueFieldNumber = 3;
  inline ::google::protobuf::int64 lvalue() const;
  inline void set_lvalue(::google::protobuf::int64 value);

  // optional float fValue = 4;
  inline bool has_fvalue() const;
  inline void clear_fvalue();
  static const int kFValueFieldNumber = 4;
  inline float fvalue() const;
  inline void set_fvalue(float value);

  // optional string szValue = 5;
  inline bool has_szvalue() const;
  inline void clear_szvalue();
  static const int kSzValueFieldNumber = 5;
  inline const ::std::string& szvalue() const;
  inline void set_szvalue(const ::std::string& value);
  inline void set_szvalue(const char* value);
  inline void set_szvalue(const char* value, size_t size);
  inline ::std::string* mutable_szvalue();
  inline ::std::string* release_szvalue();
  inline void set_allocated_szvalue(::std::string* szvalue);

  // @@protoc_insertion_point(class_scope:proto.message.KeyValue)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_ivalue();
  inline void clear_has_ivalue();
  inline void set_has_lvalue();
  inline void clear_has_lvalue();
  inline void set_has_fvalue();
  inline void clear_has_fvalue();
  inline void set_has_szvalue();
  inline void clear_has_szvalue();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 key_;
  ::google::protobuf::int32 ivalue_;
  ::google::protobuf::int64 lvalue_;
  ::std::string* szvalue_;
  float fvalue_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static KeyValue* default_instance_;
};
// -------------------------------------------------------------------

class ActivityData : public ::google::protobuf::Message {
 public:
  ActivityData();
  virtual ~ActivityData();

  ActivityData(const ActivityData& from);

  inline ActivityData& operator=(const ActivityData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ActivityData& default_instance();

  void Swap(ActivityData* other);

  // implements Message ----------------------------------------------

  ActivityData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ActivityData& from);
  void MergeFrom(const ActivityData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 activityid = 1;
  inline bool has_activityid() const;
  inline void clear_activityid();
  static const int kActivityidFieldNumber = 1;
  inline ::google::protobuf::int32 activityid() const;
  inline void set_activityid(::google::protobuf::int32 value);

  // repeated .proto.message.KeyValue kv = 2;
  inline int kv_size() const;
  inline void clear_kv();
  static const int kKvFieldNumber = 2;
  inline const ::proto::message::KeyValue& kv(int index) const;
  inline ::proto::message::KeyValue* mutable_kv(int index);
  inline ::proto::message::KeyValue* add_kv();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::message::KeyValue >&
      kv() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::message::KeyValue >*
      mutable_kv();

  // @@protoc_insertion_point(class_scope:proto.message.ActivityData)
 private:
  inline void set_has_activityid();
  inline void clear_has_activityid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto::message::KeyValue > kv_;
  ::google::protobuf::int32 activityid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static ActivityData* default_instance_;
};
// -------------------------------------------------------------------

class PairInt32 : public ::google::protobuf::Message {
 public:
  PairInt32();
  virtual ~PairInt32();

  PairInt32(const PairInt32& from);

  inline PairInt32& operator=(const PairInt32& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PairInt32& default_instance();

  void Swap(PairInt32* other);

  // implements Message ----------------------------------------------

  PairInt32* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PairInt32& from);
  void MergeFrom(const PairInt32& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 first = 1;
  inline bool has_first() const;
  inline void clear_first();
  static const int kFirstFieldNumber = 1;
  inline ::google::protobuf::int32 first() const;
  inline void set_first(::google::protobuf::int32 value);

  // optional int32 second = 2;
  inline bool has_second() const;
  inline void clear_second();
  static const int kSecondFieldNumber = 2;
  inline ::google::protobuf::int32 second() const;
  inline void set_second(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.message.PairInt32)
 private:
  inline void set_has_first();
  inline void clear_has_first();
  inline void set_has_second();
  inline void clear_has_second();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 first_;
  ::google::protobuf::int32 second_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static PairInt32* default_instance_;
};
// -------------------------------------------------------------------

class IDTimes : public ::google::protobuf::Message {
 public:
  IDTimes();
  virtual ~IDTimes();

  IDTimes(const IDTimes& from);

  inline IDTimes& operator=(const IDTimes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IDTimes& default_instance();

  void Swap(IDTimes* other);

  // implements Message ----------------------------------------------

  IDTimes* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IDTimes& from);
  void MergeFrom(const IDTimes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 times = 2;
  inline bool has_times() const;
  inline void clear_times();
  static const int kTimesFieldNumber = 2;
  inline ::google::protobuf::int32 times() const;
  inline void set_times(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.message.IDTimes)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_times();
  inline void clear_has_times();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 times_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static IDTimes* default_instance_;
};
// -------------------------------------------------------------------

class EquipEffect : public ::google::protobuf::Message {
 public:
  EquipEffect();
  virtual ~EquipEffect();

  EquipEffect(const EquipEffect& from);

  inline EquipEffect& operator=(const EquipEffect& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EquipEffect& default_instance();

  void Swap(EquipEffect* other);

  // implements Message ----------------------------------------------

  EquipEffect* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EquipEffect& from);
  void MergeFrom(const EquipEffect& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 etype = 1;
  inline bool has_etype() const;
  inline void clear_etype();
  static const int kEtypeFieldNumber = 1;
  inline ::google::protobuf::int32 etype() const;
  inline void set_etype(::google::protobuf::int32 value);

  // optional int32 eff_id = 2;
  inline bool has_eff_id() const;
  inline void clear_eff_id();
  static const int kEffIdFieldNumber = 2;
  inline ::google::protobuf::int32 eff_id() const;
  inline void set_eff_id(::google::protobuf::int32 value);

  // optional int32 eff_type = 3;
  inline bool has_eff_type() const;
  inline void clear_eff_type();
  static const int kEffTypeFieldNumber = 3;
  inline ::google::protobuf::int32 eff_type() const;
  inline void set_eff_type(::google::protobuf::int32 value);

  // optional int32 data_type = 4;
  inline bool has_data_type() const;
  inline void clear_data_type();
  static const int kDataTypeFieldNumber = 4;
  inline ::google::protobuf::int32 data_type() const;
  inline void set_data_type(::google::protobuf::int32 value);

  // optional int32 data_num = 5;
  inline bool has_data_num() const;
  inline void clear_data_num();
  static const int kDataNumFieldNumber = 5;
  inline ::google::protobuf::int32 data_num() const;
  inline void set_data_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.message.EquipEffect)
 private:
  inline void set_has_etype();
  inline void clear_has_etype();
  inline void set_has_eff_id();
  inline void clear_has_eff_id();
  inline void set_has_eff_type();
  inline void clear_has_eff_type();
  inline void set_has_data_type();
  inline void clear_has_data_type();
  inline void set_has_data_num();
  inline void clear_has_data_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 etype_;
  ::google::protobuf::int32 eff_id_;
  ::google::protobuf::int32 eff_type_;
  ::google::protobuf::int32 data_type_;
  ::google::protobuf::int32 data_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static EquipEffect* default_instance_;
};
// -------------------------------------------------------------------

class Equip : public ::google::protobuf::Message {
 public:
  Equip();
  virtual ~Equip();

  Equip(const Equip& from);

  inline Equip& operator=(const Equip& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Equip& default_instance();

  void Swap(Equip* other);

  // implements Message ----------------------------------------------

  Equip* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Equip& from);
  void MergeFrom(const Equip& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 uuid = 1;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 1;
  inline ::google::protobuf::uint64 uuid() const;
  inline void set_uuid(::google::protobuf::uint64 value);

  // optional string charname = 2;
  inline bool has_charname() const;
  inline void clear_charname();
  static const int kCharnameFieldNumber = 2;
  inline const ::std::string& charname() const;
  inline void set_charname(const ::std::string& value);
  inline void set_charname(const char* value);
  inline void set_charname(const char* value, size_t size);
  inline ::std::string* mutable_charname();
  inline ::std::string* release_charname();
  inline void set_allocated_charname(::std::string* charname);

  // optional uint64 gain_time = 3;
  inline bool has_gain_time() const;
  inline void clear_gain_time();
  static const int kGainTimeFieldNumber = 3;
  inline ::google::protobuf::uint64 gain_time() const;
  inline void set_gain_time(::google::protobuf::uint64 value);

  // optional int32 id = 4;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 4;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 level = 5;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 5;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 is_equipon = 6;
  inline bool has_is_equipon() const;
  inline void clear_is_equipon();
  static const int kIsEquiponFieldNumber = 6;
  inline ::google::protobuf::int32 is_equipon() const;
  inline void set_is_equipon(::google::protobuf::int32 value);

  // optional int32 strength_lv = 7;
  inline bool has_strength_lv() const;
  inline void clear_strength_lv();
  static const int kStrengthLvFieldNumber = 7;
  inline ::google::protobuf::int32 strength_lv() const;
  inline void set_strength_lv(::google::protobuf::int32 value);

  // optional int32 increase_percent = 8;
  inline bool has_increase_percent() const;
  inline void clear_increase_percent();
  static const int kIncreasePercentFieldNumber = 8;
  inline ::google::protobuf::int32 increase_percent() const;
  inline void set_increase_percent(::google::protobuf::int32 value);

  // optional int32 durability = 9;
  inline bool has_durability() const;
  inline void clear_durability();
  static const int kDurabilityFieldNumber = 9;
  inline ::google::protobuf::int32 durability() const;
  inline void set_durability(::google::protobuf::int32 value);

  // optional int32 times = 10;
  inline bool has_times() const;
  inline void clear_times();
  static const int kTimesFieldNumber = 10;
  inline ::google::protobuf::int32 times() const;
  inline void set_times(::google::protobuf::int32 value);

  // repeated .proto.message.EquipEffect effect_list = 11;
  inline int effect_list_size() const;
  inline void clear_effect_list();
  static const int kEffectListFieldNumber = 11;
  inline const ::proto::message::EquipEffect& effect_list(int index) const;
  inline ::proto::message::EquipEffect* mutable_effect_list(int index);
  inline ::proto::message::EquipEffect* add_effect_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::message::EquipEffect >&
      effect_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::message::EquipEffect >*
      mutable_effect_list();

  // optional int32 source = 12;
  inline bool has_source() const;
  inline void clear_source();
  static const int kSourceFieldNumber = 12;
  inline ::google::protobuf::int32 source() const;
  inline void set_source(::google::protobuf::int32 value);

  // optional int32 frozen_time = 13;
  inline bool has_frozen_time() const;
  inline void clear_frozen_time();
  static const int kFrozenTimeFieldNumber = 13;
  inline ::google::protobuf::int32 frozen_time() const;
  inline void set_frozen_time(::google::protobuf::int32 value);

  // optional uint32 exp = 14;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 14;
  inline ::google::protobuf::uint32 exp() const;
  inline void set_exp(::google::protobuf::uint32 value);

  // optional uint32 bind = 15;
  inline bool has_bind() const;
  inline void clear_bind();
  static const int kBindFieldNumber = 15;
  inline ::google::protobuf::uint32 bind() const;
  inline void set_bind(::google::protobuf::uint32 value);

  // repeated .proto.message.IDNum best_attr = 16;
  inline int best_attr_size() const;
  inline void clear_best_attr();
  static const int kBestAttrFieldNumber = 16;
  inline const ::proto::message::IDNum& best_attr(int index) const;
  inline ::proto::message::IDNum* mutable_best_attr(int index);
  inline ::proto::message::IDNum* add_best_attr();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::message::IDNum >&
      best_attr() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::message::IDNum >*
      mutable_best_attr();

  // @@protoc_insertion_point(class_scope:proto.message.Equip)
 private:
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_charname();
  inline void clear_has_charname();
  inline void set_has_gain_time();
  inline void clear_has_gain_time();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_is_equipon();
  inline void clear_has_is_equipon();
  inline void set_has_strength_lv();
  inline void clear_has_strength_lv();
  inline void set_has_increase_percent();
  inline void clear_has_increase_percent();
  inline void set_has_durability();
  inline void clear_has_durability();
  inline void set_has_times();
  inline void clear_has_times();
  inline void set_has_source();
  inline void clear_has_source();
  inline void set_has_frozen_time();
  inline void clear_has_frozen_time();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_bind();
  inline void clear_has_bind();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uuid_;
  ::std::string* charname_;
  ::google::protobuf::uint64 gain_time_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 is_equipon_;
  ::google::protobuf::int32 strength_lv_;
  ::google::protobuf::int32 increase_percent_;
  ::google::protobuf::int32 durability_;
  ::google::protobuf::RepeatedPtrField< ::proto::message::EquipEffect > effect_list_;
  ::google::protobuf::int32 times_;
  ::google::protobuf::int32 source_;
  ::google::protobuf::int32 frozen_time_;
  ::google::protobuf::uint32 exp_;
  ::google::protobuf::RepeatedPtrField< ::proto::message::IDNum > best_attr_;
  ::google::protobuf::uint32 bind_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(16 + 31) / 32];

  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static Equip* default_instance_;
};
// -------------------------------------------------------------------

class DiamondDoubleHistory : public ::google::protobuf::Message {
 public:
  DiamondDoubleHistory();
  virtual ~DiamondDoubleHistory();

  DiamondDoubleHistory(const DiamondDoubleHistory& from);

  inline DiamondDoubleHistory& operator=(const DiamondDoubleHistory& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DiamondDoubleHistory& default_instance();

  void Swap(DiamondDoubleHistory* other);

  // implements Message ----------------------------------------------

  DiamondDoubleHistory* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DiamondDoubleHistory& from);
  void MergeFrom(const DiamondDoubleHistory& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 dimaond = 2;
  inline bool has_dimaond() const;
  inline void clear_dimaond();
  static const int kDimaondFieldNumber = 2;
  inline ::google::protobuf::uint32 dimaond() const;
  inline void set_dimaond(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.message.DiamondDoubleHistory)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_dimaond();
  inline void clear_has_dimaond();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 dimaond_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static DiamondDoubleHistory* default_instance_;
};
// -------------------------------------------------------------------

class BatSkillInfo : public ::google::protobuf::Message {
 public:
  BatSkillInfo();
  virtual ~BatSkillInfo();

  BatSkillInfo(const BatSkillInfo& from);

  inline BatSkillInfo& operator=(const BatSkillInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BatSkillInfo& default_instance();

  void Swap(BatSkillInfo* other);

  // implements Message ----------------------------------------------

  BatSkillInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BatSkillInfo& from);
  void MergeFrom(const BatSkillInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 playerskillid = 1;
  inline bool has_playerskillid() const;
  inline void clear_playerskillid();
  static const int kPlayerskillidFieldNumber = 1;
  inline ::google::protobuf::int32 playerskillid() const;
  inline void set_playerskillid(::google::protobuf::int32 value);

  // optional int32 effectid = 2;
  inline bool has_effectid() const;
  inline void clear_effectid();
  static const int kEffectidFieldNumber = 2;
  inline ::google::protobuf::int32 effectid() const;
  inline void set_effectid(::google::protobuf::int32 value);

  // optional int32 pos = 3;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 3;
  inline ::google::protobuf::int32 pos() const;
  inline void set_pos(::google::protobuf::int32 value);

  // optional int32 curmark = 4;
  inline bool has_curmark() const;
  inline void clear_curmark();
  static const int kCurmarkFieldNumber = 4;
  inline ::google::protobuf::int32 curmark() const;
  inline void set_curmark(::google::protobuf::int32 value);

  // repeated int32 markid = 5;
  inline int markid_size() const;
  inline void clear_markid();
  static const int kMarkidFieldNumber = 5;
  inline ::google::protobuf::int32 markid(int index) const;
  inline void set_markid(int index, ::google::protobuf::int32 value);
  inline void add_markid(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      markid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_markid();

  // optional int32 level = 6;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 6;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 effectid2 = 7;
  inline bool has_effectid2() const;
  inline void clear_effectid2();
  static const int kEffectid2FieldNumber = 7;
  inline ::google::protobuf::int32 effectid2() const;
  inline void set_effectid2(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.message.BatSkillInfo)
 private:
  inline void set_has_playerskillid();
  inline void clear_has_playerskillid();
  inline void set_has_effectid();
  inline void clear_has_effectid();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_curmark();
  inline void clear_has_curmark();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_effectid2();
  inline void clear_has_effectid2();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 playerskillid_;
  ::google::protobuf::int32 effectid_;
  ::google::protobuf::int32 pos_;
  ::google::protobuf::int32 curmark_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > markid_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 effectid2_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static BatSkillInfo* default_instance_;
};
// -------------------------------------------------------------------

class PlayerEffect : public ::google::protobuf::Message {
 public:
  PlayerEffect();
  virtual ~PlayerEffect();

  PlayerEffect(const PlayerEffect& from);

  inline PlayerEffect& operator=(const PlayerEffect& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerEffect& default_instance();

  void Swap(PlayerEffect* other);

  // implements Message ----------------------------------------------

  PlayerEffect* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerEffect& from);
  void MergeFrom(const PlayerEffect& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 attdata = 1;
  inline int attdata_size() const;
  inline void clear_attdata();
  static const int kAttdataFieldNumber = 1;
  inline ::google::protobuf::int32 attdata(int index) const;
  inline void set_attdata(int index, ::google::protobuf::int32 value);
  inline void add_attdata(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      attdata() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_attdata();

  // @@protoc_insertion_point(class_scope:proto.message.PlayerEffect)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > attdata_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static PlayerEffect* default_instance_;
};
// -------------------------------------------------------------------

class BattlePlayerInfo : public ::google::protobuf::Message {
 public:
  BattlePlayerInfo();
  virtual ~BattlePlayerInfo();

  BattlePlayerInfo(const BattlePlayerInfo& from);

  inline BattlePlayerInfo& operator=(const BattlePlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BattlePlayerInfo& default_instance();

  void Swap(BattlePlayerInfo* other);

  // implements Message ----------------------------------------------

  BattlePlayerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BattlePlayerInfo& from);
  void MergeFrom(const BattlePlayerInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 nplayerid = 1;
  inline bool has_nplayerid() const;
  inline void clear_nplayerid();
  static const int kNplayeridFieldNumber = 1;
  inline ::google::protobuf::uint32 nplayerid() const;
  inline void set_nplayerid(::google::protobuf::uint32 value);

  // required .proto.message.Point3D pt = 2;
  inline bool has_pt() const;
  inline void clear_pt();
  static const int kPtFieldNumber = 2;
  inline const ::proto::message::Point3D& pt() const;
  inline ::proto::message::Point3D* mutable_pt();
  inline ::proto::message::Point3D* release_pt();
  inline void set_allocated_pt(::proto::message::Point3D* pt);

  // required float dir = 3;
  inline bool has_dir() const;
  inline void clear_dir();
  static const int kDirFieldNumber = 3;
  inline float dir() const;
  inline void set_dir(float value);

  // optional string name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 curhp = 5;
  inline bool has_curhp() const;
  inline void clear_curhp();
  static const int kCurhpFieldNumber = 5;
  inline ::google::protobuf::int32 curhp() const;
  inline void set_curhp(::google::protobuf::int32 value);

  // repeated int32 attvalue = 6;
  inline int attvalue_size() const;
  inline void clear_attvalue();
  static const int kAttvalueFieldNumber = 6;
  inline ::google::protobuf::int32 attvalue(int index) const;
  inline void set_attvalue(int index, ::google::protobuf::int32 value);
  inline void add_attvalue(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      attvalue() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_attvalue();

  // repeated int32 attprecent = 7;
  inline int attprecent_size() const;
  inline void clear_attprecent();
  static const int kAttprecentFieldNumber = 7;
  inline ::google::protobuf::int32 attprecent(int index) const;
  inline void set_attprecent(int index, ::google::protobuf::int32 value);
  inline void add_attprecent(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      attprecent() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_attprecent();

  // optional int32 level = 8;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 8;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // repeated .proto.message.Equip equip_list = 9;
  inline int equip_list_size() const;
  inline void clear_equip_list();
  static const int kEquipListFieldNumber = 9;
  inline const ::proto::message::Equip& equip_list(int index) const;
  inline ::proto::message::Equip* mutable_equip_list(int index);
  inline ::proto::message::Equip* add_equip_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::message::Equip >&
      equip_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::message::Equip >*
      mutable_equip_list();

  // optional int32 career = 10;
  inline bool has_career() const;
  inline void clear_career();
  static const int kCareerFieldNumber = 10;
  inline ::google::protobuf::int32 career() const;
  inline void set_career(::google::protobuf::int32 value);

  // optional int32 velocity = 11;
  inline bool has_velocity() const;
  inline void clear_velocity();
  static const int kVelocityFieldNumber = 11;
  inline ::google::protobuf::int32 velocity() const;
  inline void set_velocity(::google::protobuf::int32 value);

  // optional int32 titleID = 12;
  inline bool has_titleid() const;
  inline void clear_titleid();
  static const int kTitleIDFieldNumber = 12;
  inline ::google::protobuf::int32 titleid() const;
  inline void set_titleid(::google::protobuf::int32 value);

  // optional int32 layer = 13;
  inline bool has_layer() const;
  inline void clear_layer();
  static const int kLayerFieldNumber = 13;
  inline ::google::protobuf::int32 layer() const;
  inline void set_layer(::google::protobuf::int32 value);

  // optional string titlename = 14;
  inline bool has_titlename() const;
  inline void clear_titlename();
  static const int kTitlenameFieldNumber = 14;
  inline const ::std::string& titlename() const;
  inline void set_titlename(const ::std::string& value);
  inline void set_titlename(const char* value);
  inline void set_titlename(const char* value, size_t size);
  inline ::std::string* mutable_titlename();
  inline ::std::string* release_titlename();
  inline void set_allocated_titlename(::std::string* titlename);

  // optional int32 titleishide = 15;
  inline bool has_titleishide() const;
  inline void clear_titleishide();
  static const int kTitleishideFieldNumber = 15;
  inline ::google::protobuf::int32 titleishide() const;
  inline void set_titleishide(::google::protobuf::int32 value);

  // repeated .proto.message.BatSkillInfo skilllist = 16;
  inline int skilllist_size() const;
  inline void clear_skilllist();
  static const int kSkilllistFieldNumber = 16;
  inline const ::proto::message::BatSkillInfo& skilllist(int index) const;
  inline ::proto::message::BatSkillInfo* mutable_skilllist(int index);
  inline ::proto::message::BatSkillInfo* add_skilllist();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::message::BatSkillInfo >&
      skilllist() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::message::BatSkillInfo >*
      mutable_skilllist();

  // optional uint64 nplayeruuid = 17;
  inline bool has_nplayeruuid() const;
  inline void clear_nplayeruuid();
  static const int kNplayeruuidFieldNumber = 17;
  inline ::google::protobuf::uint64 nplayeruuid() const;
  inline void set_nplayeruuid(::google::protobuf::uint64 value);

  // optional uint64 nguildid = 18;
  inline bool has_nguildid() const;
  inline void clear_nguildid();
  static const int kNguildidFieldNumber = 18;
  inline ::google::protobuf::uint64 nguildid() const;
  inline void set_nguildid(::google::protobuf::uint64 value);

  // optional string guildName = 19;
  inline bool has_guildname() const;
  inline void clear_guildname();
  static const int kGuildNameFieldNumber = 19;
  inline const ::std::string& guildname() const;
  inline void set_guildname(const ::std::string& value);
  inline void set_guildname(const char* value);
  inline void set_guildname(const char* value, size_t size);
  inline ::std::string* mutable_guildname();
  inline ::std::string* release_guildname();
  inline void set_allocated_guildname(::std::string* guildname);

  // optional uint32 xpenergy = 20;
  inline bool has_xpenergy() const;
  inline void clear_xpenergy();
  static const int kXpenergyFieldNumber = 20;
  inline ::google::protobuf::uint32 xpenergy() const;
  inline void set_xpenergy(::google::protobuf::uint32 value);

  // optional uint32 serverid = 21;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServeridFieldNumber = 21;
  inline ::google::protobuf::uint32 serverid() const;
  inline void set_serverid(::google::protobuf::uint32 value);

  // optional int32 teamid = 22;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamidFieldNumber = 22;
  inline ::google::protobuf::int32 teamid() const;
  inline void set_teamid(::google::protobuf::int32 value);

  // optional int32 pvpscore = 23;
  inline bool has_pvpscore() const;
  inline void clear_pvpscore();
  static const int kPvpscoreFieldNumber = 23;
  inline ::google::protobuf::int32 pvpscore() const;
  inline void set_pvpscore(::google::protobuf::int32 value);

  // optional int32 pvpteam = 24;
  inline bool has_pvpteam() const;
  inline void clear_pvpteam();
  static const int kPvpteamFieldNumber = 24;
  inline ::google::protobuf::int32 pvpteam() const;
  inline void set_pvpteam(::google::protobuf::int32 value);

  // optional int32 cur_petid = 25;
  inline bool has_cur_petid() const;
  inline void clear_cur_petid();
  static const int kCurPetidFieldNumber = 25;
  inline ::google::protobuf::int32 cur_petid() const;
  inline void set_cur_petid(::google::protobuf::int32 value);

  // optional int32 cur_rideid = 26;
  inline bool has_cur_rideid() const;
  inline void clear_cur_rideid();
  static const int kCurRideidFieldNumber = 26;
  inline ::google::protobuf::int32 cur_rideid() const;
  inline void set_cur_rideid(::google::protobuf::int32 value);

  // optional int32 cur_awakenid = 27;
  inline bool has_cur_awakenid() const;
  inline void clear_cur_awakenid();
  static const int kCurAwakenidFieldNumber = 27;
  inline ::google::protobuf::int32 cur_awakenid() const;
  inline void set_cur_awakenid(::google::protobuf::int32 value);

  // optional int32 cur_mercenaryid = 28;
  inline bool has_cur_mercenaryid() const;
  inline void clear_cur_mercenaryid();
  static const int kCurMercenaryidFieldNumber = 28;
  inline ::google::protobuf::int32 cur_mercenaryid() const;
  inline void set_cur_mercenaryid(::google::protobuf::int32 value);

  // optional uint32 nmercenary_linkid = 29;
  inline bool has_nmercenary_linkid() const;
  inline void clear_nmercenary_linkid();
  static const int kNmercenaryLinkidFieldNumber = 29;
  inline ::google::protobuf::uint32 nmercenary_linkid() const;
  inline void set_nmercenary_linkid(::google::protobuf::uint32 value);

  // optional uint32 curtp = 30;
  inline bool has_curtp() const;
  inline void clear_curtp();
  static const int kCurtpFieldNumber = 30;
  inline ::google::protobuf::uint32 curtp() const;
  inline void set_curtp(::google::protobuf::uint32 value);

  // optional uint32 suitid = 31;
  inline bool has_suitid() const;
  inline void clear_suitid();
  static const int kSuitidFieldNumber = 31;
  inline ::google::protobuf::uint32 suitid() const;
  inline void set_suitid(::google::protobuf::uint32 value);

  // optional uint32 pkval = 32;
  inline bool has_pkval() const;
  inline void clear_pkval();
  static const int kPkvalFieldNumber = 32;
  inline ::google::protobuf::uint32 pkval() const;
  inline void set_pkval(::google::protobuf::uint32 value);

  // optional uint32 cur_avatarid = 33;
  inline bool has_cur_avatarid() const;
  inline void clear_cur_avatarid();
  static const int kCurAvataridFieldNumber = 33;
  inline ::google::protobuf::uint32 cur_avatarid() const;
  inline void set_cur_avatarid(::google::protobuf::uint32 value);

  // optional uint32 cur_avatarcolorid = 34;
  inline bool has_cur_avatarcolorid() const;
  inline void clear_cur_avatarcolorid();
  static const int kCurAvatarcoloridFieldNumber = 34;
  inline ::google::protobuf::uint32 cur_avatarcolorid() const;
  inline void set_cur_avatarcolorid(::google::protobuf::uint32 value);

  // optional uint32 attackmode = 35;
  inline bool has_attackmode() const;
  inline void clear_attackmode();
  static const int kAttackmodeFieldNumber = 35;
  inline ::google::protobuf::uint32 attackmode() const;
  inline void set_attackmode(::google::protobuf::uint32 value);

  // optional uint32 dhlevel = 36;
  inline bool has_dhlevel() const;
  inline void clear_dhlevel();
  static const int kDhlevelFieldNumber = 36;
  inline ::google::protobuf::uint32 dhlevel() const;
  inline void set_dhlevel(::google::protobuf::uint32 value);

  // required uint32 linkid = 37;
  inline bool has_linkid() const;
  inline void clear_linkid();
  static const int kLinkidFieldNumber = 37;
  inline ::google::protobuf::uint32 linkid() const;
  inline void set_linkid(::google::protobuf::uint32 value);

  // optional .proto.message.BattleHeadInfo headinfo = 38;
  inline bool has_headinfo() const;
  inline void clear_headinfo();
  static const int kHeadinfoFieldNumber = 38;
  inline const ::proto::message::BattleHeadInfo& headinfo() const;
  inline ::proto::message::BattleHeadInfo* mutable_headinfo();
  inline ::proto::message::BattleHeadInfo* release_headinfo();
  inline void set_allocated_headinfo(::proto::message::BattleHeadInfo* headinfo);

  // repeated uint32 mercenaryscript = 39;
  inline int mercenaryscript_size() const;
  inline void clear_mercenaryscript();
  static const int kMercenaryscriptFieldNumber = 39;
  inline ::google::protobuf::uint32 mercenaryscript(int index) const;
  inline void set_mercenaryscript(int index, ::google::protobuf::uint32 value);
  inline void add_mercenaryscript(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      mercenaryscript() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_mercenaryscript();

  // repeated uint32 ridescript = 40;
  inline int ridescript_size() const;
  inline void clear_ridescript();
  static const int kRidescriptFieldNumber = 40;
  inline ::google::protobuf::uint32 ridescript(int index) const;
  inline void set_ridescript(int index, ::google::protobuf::uint32 value);
  inline void add_ridescript(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      ridescript() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_ridescript();

  // repeated uint32 awakenscript = 41;
  inline int awakenscript_size() const;
  inline void clear_awakenscript();
  static const int kAwakenscriptFieldNumber = 41;
  inline ::google::protobuf::uint32 awakenscript(int index) const;
  inline void set_awakenscript(int index, ::google::protobuf::uint32 value);
  inline void add_awakenscript(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      awakenscript() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_awakenscript();

  // optional uint32 cur_petrank = 42;
  inline bool has_cur_petrank() const;
  inline void clear_cur_petrank();
  static const int kCurPetrankFieldNumber = 42;
  inline ::google::protobuf::uint32 cur_petrank() const;
  inline void set_cur_petrank(::google::protobuf::uint32 value);

  // optional uint32 cur_mercenrank = 43;
  inline bool has_cur_mercenrank() const;
  inline void clear_cur_mercenrank();
  static const int kCurMercenrankFieldNumber = 43;
  inline ::google::protobuf::uint32 cur_mercenrank() const;
  inline void set_cur_mercenrank(::google::protobuf::uint32 value);

  // optional int32 maxtp = 44;
  inline bool has_maxtp() const;
  inline void clear_maxtp();
  static const int kMaxtpFieldNumber = 44;
  inline ::google::protobuf::int32 maxtp() const;
  inline void set_maxtp(::google::protobuf::int32 value);

  // optional int32 maxhp = 45;
  inline bool has_maxhp() const;
  inline void clear_maxhp();
  static const int kMaxhpFieldNumber = 45;
  inline ::google::protobuf::int32 maxhp() const;
  inline void set_maxhp(::google::protobuf::int32 value);

  // optional int32 baseequip = 46;
  inline bool has_baseequip() const;
  inline void clear_baseequip();
  static const int kBaseequipFieldNumber = 46;
  inline ::google::protobuf::int32 baseequip() const;
  inline void set_baseequip(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.message.BattlePlayerInfo)
 private:
  inline void set_has_nplayerid();
  inline void clear_has_nplayerid();
  inline void set_has_pt();
  inline void clear_has_pt();
  inline void set_has_dir();
  inline void clear_has_dir();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_curhp();
  inline void clear_has_curhp();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_career();
  inline void clear_has_career();
  inline void set_has_velocity();
  inline void clear_has_velocity();
  inline void set_has_titleid();
  inline void clear_has_titleid();
  inline void set_has_layer();
  inline void clear_has_layer();
  inline void set_has_titlename();
  inline void clear_has_titlename();
  inline void set_has_titleishide();
  inline void clear_has_titleishide();
  inline void set_has_nplayeruuid();
  inline void clear_has_nplayeruuid();
  inline void set_has_nguildid();
  inline void clear_has_nguildid();
  inline void set_has_guildname();
  inline void clear_has_guildname();
  inline void set_has_xpenergy();
  inline void clear_has_xpenergy();
  inline void set_has_serverid();
  inline void clear_has_serverid();
  inline void set_has_teamid();
  inline void clear_has_teamid();
  inline void set_has_pvpscore();
  inline void clear_has_pvpscore();
  inline void set_has_pvpteam();
  inline void clear_has_pvpteam();
  inline void set_has_cur_petid();
  inline void clear_has_cur_petid();
  inline void set_has_cur_rideid();
  inline void clear_has_cur_rideid();
  inline void set_has_cur_awakenid();
  inline void clear_has_cur_awakenid();
  inline void set_has_cur_mercenaryid();
  inline void clear_has_cur_mercenaryid();
  inline void set_has_nmercenary_linkid();
  inline void clear_has_nmercenary_linkid();
  inline void set_has_curtp();
  inline void clear_has_curtp();
  inline void set_has_suitid();
  inline void clear_has_suitid();
  inline void set_has_pkval();
  inline void clear_has_pkval();
  inline void set_has_cur_avatarid();
  inline void clear_has_cur_avatarid();
  inline void set_has_cur_avatarcolorid();
  inline void clear_has_cur_avatarcolorid();
  inline void set_has_attackmode();
  inline void clear_has_attackmode();
  inline void set_has_dhlevel();
  inline void clear_has_dhlevel();
  inline void set_has_linkid();
  inline void clear_has_linkid();
  inline void set_has_headinfo();
  inline void clear_has_headinfo();
  inline void set_has_cur_petrank();
  inline void clear_has_cur_petrank();
  inline void set_has_cur_mercenrank();
  inline void clear_has_cur_mercenrank();
  inline void set_has_maxtp();
  inline void clear_has_maxtp();
  inline void set_has_maxhp();
  inline void clear_has_maxhp();
  inline void set_has_baseequip();
  inline void clear_has_baseequip();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::message::Point3D* pt_;
  ::google::protobuf::uint32 nplayerid_;
  float dir_;
  ::std::string* name_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > attvalue_;
  ::google::protobuf::int32 curhp_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > attprecent_;
  ::google::protobuf::RepeatedPtrField< ::proto::message::Equip > equip_list_;
  ::google::protobuf::int32 career_;
  ::google::protobuf::int32 velocity_;
  ::google::protobuf::int32 titleid_;
  ::google::protobuf::int32 layer_;
  ::std::string* titlename_;
  ::google::protobuf::RepeatedPtrField< ::proto::message::BatSkillInfo > skilllist_;
  ::google::protobuf::uint64 nplayeruuid_;
  ::google::protobuf::int32 titleishide_;
  ::google::protobuf::uint32 xpenergy_;
  ::google::protobuf::uint64 nguildid_;
  ::std::string* guildname_;
  ::google::protobuf::uint32 serverid_;
  ::google::protobuf::int32 teamid_;
  ::google::protobuf::int32 pvpscore_;
  ::google::protobuf::int32 pvpteam_;
  ::google::protobuf::int32 cur_petid_;
  ::google::protobuf::int32 cur_rideid_;
  ::google::protobuf::int32 cur_awakenid_;
  ::google::protobuf::int32 cur_mercenaryid_;
  ::google::protobuf::uint32 nmercenary_linkid_;
  ::google::protobuf::uint32 curtp_;
  ::google::protobuf::uint32 suitid_;
  ::google::protobuf::uint32 pkval_;
  ::google::protobuf::uint32 cur_avatarid_;
  ::google::protobuf::uint32 cur_avatarcolorid_;
  ::google::protobuf::uint32 attackmode_;
  ::google::protobuf::uint32 dhlevel_;
  ::proto::message::BattleHeadInfo* headinfo_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > mercenaryscript_;
  ::google::protobuf::uint32 linkid_;
  ::google::protobuf::uint32 cur_petrank_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > ridescript_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > awakenscript_;
  ::google::protobuf::uint32 cur_mercenrank_;
  ::google::protobuf::int32 maxtp_;
  ::google::protobuf::int32 maxhp_;
  ::google::protobuf::int32 baseequip_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(46 + 31) / 32];

  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static BattlePlayerInfo* default_instance_;
};
// -------------------------------------------------------------------

class BattleMercenaryInfo : public ::google::protobuf::Message {
 public:
  BattleMercenaryInfo();
  virtual ~BattleMercenaryInfo();

  BattleMercenaryInfo(const BattleMercenaryInfo& from);

  inline BattleMercenaryInfo& operator=(const BattleMercenaryInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BattleMercenaryInfo& default_instance();

  void Swap(BattleMercenaryInfo* other);

  // implements Message ----------------------------------------------

  BattleMercenaryInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BattleMercenaryInfo& from);
  void MergeFrom(const BattleMercenaryInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 nmercenaryid = 1;
  inline bool has_nmercenaryid() const;
  inline void clear_nmercenaryid();
  static const int kNmercenaryidFieldNumber = 1;
  inline ::google::protobuf::uint32 nmercenaryid() const;
  inline void set_nmercenaryid(::google::protobuf::uint32 value);

  // required uint32 nTableid = 2;
  inline bool has_ntableid() const;
  inline void clear_ntableid();
  static const int kNTableidFieldNumber = 2;
  inline ::google::protobuf::uint32 ntableid() const;
  inline void set_ntableid(::google::protobuf::uint32 value);

  // required .proto.message.Point3D pt = 3;
  inline bool has_pt() const;
  inline void clear_pt();
  static const int kPtFieldNumber = 3;
  inline const ::proto::message::Point3D& pt() const;
  inline ::proto::message::Point3D* mutable_pt();
  inline ::proto::message::Point3D* release_pt();
  inline void set_allocated_pt(::proto::message::Point3D* pt);

  // required float dir = 4;
  inline bool has_dir() const;
  inline void clear_dir();
  static const int kDirFieldNumber = 4;
  inline float dir() const;
  inline void set_dir(float value);

  // optional string name = 5;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 5;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int64 curhp = 6;
  inline bool has_curhp() const;
  inline void clear_curhp();
  static const int kCurhpFieldNumber = 6;
  inline ::google::protobuf::int64 curhp() const;
  inline void set_curhp(::google::protobuf::int64 value);

  // repeated int32 attvalue = 7;
  inline int attvalue_size() const;
  inline void clear_attvalue();
  static const int kAttvalueFieldNumber = 7;
  inline ::google::protobuf::int32 attvalue(int index) const;
  inline void set_attvalue(int index, ::google::protobuf::int32 value);
  inline void add_attvalue(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      attvalue() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_attvalue();

  // optional int32 level = 8;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 8;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 velocity = 9;
  inline bool has_velocity() const;
  inline void clear_velocity();
  static const int kVelocityFieldNumber = 9;
  inline ::google::protobuf::int32 velocity() const;
  inline void set_velocity(::google::protobuf::int32 value);

  // optional int32 layer = 10;
  inline bool has_layer() const;
  inline void clear_layer();
  static const int kLayerFieldNumber = 10;
  inline ::google::protobuf::int32 layer() const;
  inline void set_layer(::google::protobuf::int32 value);

  // optional int32 ncampid = 11;
  inline bool has_ncampid() const;
  inline void clear_ncampid();
  static const int kNcampidFieldNumber = 11;
  inline ::google::protobuf::int32 ncampid() const;
  inline void set_ncampid(::google::protobuf::int32 value);

  // repeated int32 skilllist = 12;
  inline int skilllist_size() const;
  inline void clear_skilllist();
  static const int kSkilllistFieldNumber = 12;
  inline ::google::protobuf::int32 skilllist(int index) const;
  inline void set_skilllist(int index, ::google::protobuf::int32 value);
  inline void add_skilllist(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      skilllist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_skilllist();

  // optional int32 ranking = 13;
  inline bool has_ranking() const;
  inline void clear_ranking();
  static const int kRankingFieldNumber = 13;
  inline ::google::protobuf::int32 ranking() const;
  inline void set_ranking(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.message.BattleMercenaryInfo)
 private:
  inline void set_has_nmercenaryid();
  inline void clear_has_nmercenaryid();
  inline void set_has_ntableid();
  inline void clear_has_ntableid();
  inline void set_has_pt();
  inline void clear_has_pt();
  inline void set_has_dir();
  inline void clear_has_dir();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_curhp();
  inline void clear_has_curhp();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_velocity();
  inline void clear_has_velocity();
  inline void set_has_layer();
  inline void clear_has_layer();
  inline void set_has_ncampid();
  inline void clear_has_ncampid();
  inline void set_has_ranking();
  inline void clear_has_ranking();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 nmercenaryid_;
  ::google::protobuf::uint32 ntableid_;
  ::proto::message::Point3D* pt_;
  ::std::string* name_;
  ::google::protobuf::int64 curhp_;
  float dir_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > attvalue_;
  ::google::protobuf::int32 velocity_;
  ::google::protobuf::int32 layer_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > skilllist_;
  ::google::protobuf::int32 ncampid_;
  ::google::protobuf::int32 ranking_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];

  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static BattleMercenaryInfo* default_instance_;
};
// -------------------------------------------------------------------

class BattleSingleHeadInfo : public ::google::protobuf::Message {
 public:
  BattleSingleHeadInfo();
  virtual ~BattleSingleHeadInfo();

  BattleSingleHeadInfo(const BattleSingleHeadInfo& from);

  inline BattleSingleHeadInfo& operator=(const BattleSingleHeadInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BattleSingleHeadInfo& default_instance();

  void Swap(BattleSingleHeadInfo* other);

  // implements Message ----------------------------------------------

  BattleSingleHeadInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BattleSingleHeadInfo& from);
  void MergeFrom(const BattleSingleHeadInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ntype = 1;
  inline bool has_ntype() const;
  inline void clear_ntype();
  static const int kNtypeFieldNumber = 1;
  inline ::google::protobuf::int32 ntype() const;
  inline void set_ntype(::google::protobuf::int32 value);

  // optional int32 plyid = 2;
  inline bool has_plyid() const;
  inline void clear_plyid();
  static const int kPlyidFieldNumber = 2;
  inline ::google::protobuf::int32 plyid() const;
  inline void set_plyid(::google::protobuf::int32 value);

  // optional int32 param1 = 3;
  inline bool has_param1() const;
  inline void clear_param1();
  static const int kParam1FieldNumber = 3;
  inline ::google::protobuf::int32 param1() const;
  inline void set_param1(::google::protobuf::int32 value);

  // optional int32 param2 = 4;
  inline bool has_param2() const;
  inline void clear_param2();
  static const int kParam2FieldNumber = 4;
  inline ::google::protobuf::int32 param2() const;
  inline void set_param2(::google::protobuf::int32 value);

  // optional int64 param3 = 5;
  inline bool has_param3() const;
  inline void clear_param3();
  static const int kParam3FieldNumber = 5;
  inline ::google::protobuf::int64 param3() const;
  inline void set_param3(::google::protobuf::int64 value);

  // optional string param4 = 6;
  inline bool has_param4() const;
  inline void clear_param4();
  static const int kParam4FieldNumber = 6;
  inline const ::std::string& param4() const;
  inline void set_param4(const ::std::string& value);
  inline void set_param4(const char* value);
  inline void set_param4(const char* value, size_t size);
  inline ::std::string* mutable_param4();
  inline ::std::string* release_param4();
  inline void set_allocated_param4(::std::string* param4);

  // @@protoc_insertion_point(class_scope:proto.message.BattleSingleHeadInfo)
 private:
  inline void set_has_ntype();
  inline void clear_has_ntype();
  inline void set_has_plyid();
  inline void clear_has_plyid();
  inline void set_has_param1();
  inline void clear_has_param1();
  inline void set_has_param2();
  inline void clear_has_param2();
  inline void set_has_param3();
  inline void clear_has_param3();
  inline void set_has_param4();
  inline void clear_has_param4();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ntype_;
  ::google::protobuf::int32 plyid_;
  ::google::protobuf::int32 param1_;
  ::google::protobuf::int32 param2_;
  ::google::protobuf::int64 param3_;
  ::std::string* param4_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static BattleSingleHeadInfo* default_instance_;
};
// -------------------------------------------------------------------

class BattleHeadInfo : public ::google::protobuf::Message {
 public:
  BattleHeadInfo();
  virtual ~BattleHeadInfo();

  BattleHeadInfo(const BattleHeadInfo& from);

  inline BattleHeadInfo& operator=(const BattleHeadInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BattleHeadInfo& default_instance();

  void Swap(BattleHeadInfo* other);

  // implements Message ----------------------------------------------

  BattleHeadInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BattleHeadInfo& from);
  void MergeFrom(const BattleHeadInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.message.BattleSingleHeadInfo infolist = 1;
  inline int infolist_size() const;
  inline void clear_infolist();
  static const int kInfolistFieldNumber = 1;
  inline const ::proto::message::BattleSingleHeadInfo& infolist(int index) const;
  inline ::proto::message::BattleSingleHeadInfo* mutable_infolist(int index);
  inline ::proto::message::BattleSingleHeadInfo* add_infolist();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::message::BattleSingleHeadInfo >&
      infolist() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::message::BattleSingleHeadInfo >*
      mutable_infolist();

  // @@protoc_insertion_point(class_scope:proto.message.BattleHeadInfo)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto::message::BattleSingleHeadInfo > infolist_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static BattleHeadInfo* default_instance_;
};
// -------------------------------------------------------------------

class BattleBoatInfo : public ::google::protobuf::Message {
 public:
  BattleBoatInfo();
  virtual ~BattleBoatInfo();

  BattleBoatInfo(const BattleBoatInfo& from);

  inline BattleBoatInfo& operator=(const BattleBoatInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BattleBoatInfo& default_instance();

  void Swap(BattleBoatInfo* other);

  // implements Message ----------------------------------------------

  BattleBoatInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BattleBoatInfo& from);
  void MergeFrom(const BattleBoatInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 boatid = 1;
  inline bool has_boatid() const;
  inline void clear_boatid();
  static const int kBoatidFieldNumber = 1;
  inline ::google::protobuf::int32 boatid() const;
  inline void set_boatid(::google::protobuf::int32 value);

  // optional int32 skinid = 2;
  inline bool has_skinid() const;
  inline void clear_skinid();
  static const int kSkinidFieldNumber = 2;
  inline ::google::protobuf::int32 skinid() const;
  inline void set_skinid(::google::protobuf::int32 value);

  // repeated int32 landskill = 3;
  inline int landskill_size() const;
  inline void clear_landskill();
  static const int kLandskillFieldNumber = 3;
  inline ::google::protobuf::int32 landskill(int index) const;
  inline void set_landskill(int index, ::google::protobuf::int32 value);
  inline void add_landskill(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      landskill() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_landskill();

  // repeated int32 seaskill = 4;
  inline int seaskill_size() const;
  inline void clear_seaskill();
  static const int kSeaskillFieldNumber = 4;
  inline ::google::protobuf::int32 seaskill(int index) const;
  inline void set_seaskill(int index, ::google::protobuf::int32 value);
  inline void add_seaskill(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      seaskill() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_seaskill();

  // @@protoc_insertion_point(class_scope:proto.message.BattleBoatInfo)
 private:
  inline void set_has_boatid();
  inline void clear_has_boatid();
  inline void set_has_skinid();
  inline void clear_has_skinid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 boatid_;
  ::google::protobuf::int32 skinid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > landskill_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > seaskill_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static BattleBoatInfo* default_instance_;
};
// -------------------------------------------------------------------

class MatchPlayerInfo : public ::google::protobuf::Message {
 public:
  MatchPlayerInfo();
  virtual ~MatchPlayerInfo();

  MatchPlayerInfo(const MatchPlayerInfo& from);

  inline MatchPlayerInfo& operator=(const MatchPlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MatchPlayerInfo& default_instance();

  void Swap(MatchPlayerInfo* other);

  // implements Message ----------------------------------------------

  MatchPlayerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MatchPlayerInfo& from);
  void MergeFrom(const MatchPlayerInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 iScore = 1;
  inline bool has_iscore() const;
  inline void clear_iscore();
  static const int kIScoreFieldNumber = 1;
  inline ::google::protobuf::int32 iscore() const;
  inline void set_iscore(::google::protobuf::int32 value);

  // optional int32 iMatchScore = 2;
  inline bool has_imatchscore() const;
  inline void clear_imatchscore();
  static const int kIMatchScoreFieldNumber = 2;
  inline ::google::protobuf::int32 imatchscore() const;
  inline void set_imatchscore(::google::protobuf::int32 value);

  // optional .proto.message.BattlePlayerInfo sPlyInfo = 3;
  inline bool has_splyinfo() const;
  inline void clear_splyinfo();
  static const int kSPlyInfoFieldNumber = 3;
  inline const ::proto::message::BattlePlayerInfo& splyinfo() const;
  inline ::proto::message::BattlePlayerInfo* mutable_splyinfo();
  inline ::proto::message::BattlePlayerInfo* release_splyinfo();
  inline void set_allocated_splyinfo(::proto::message::BattlePlayerInfo* splyinfo);

  // @@protoc_insertion_point(class_scope:proto.message.MatchPlayerInfo)
 private:
  inline void set_has_iscore();
  inline void clear_has_iscore();
  inline void set_has_imatchscore();
  inline void clear_has_imatchscore();
  inline void set_has_splyinfo();
  inline void clear_has_splyinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 iscore_;
  ::google::protobuf::int32 imatchscore_;
  ::proto::message::BattlePlayerInfo* splyinfo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static MatchPlayerInfo* default_instance_;
};
// -------------------------------------------------------------------

class WolrdBossSaledItem : public ::google::protobuf::Message {
 public:
  WolrdBossSaledItem();
  virtual ~WolrdBossSaledItem();

  WolrdBossSaledItem(const WolrdBossSaledItem& from);

  inline WolrdBossSaledItem& operator=(const WolrdBossSaledItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WolrdBossSaledItem& default_instance();

  void Swap(WolrdBossSaledItem* other);

  // implements Message ----------------------------------------------

  WolrdBossSaledItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WolrdBossSaledItem& from);
  void MergeFrom(const WolrdBossSaledItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto.message.IDNum sItemInfo = 1;
  inline bool has_siteminfo() const;
  inline void clear_siteminfo();
  static const int kSItemInfoFieldNumber = 1;
  inline const ::proto::message::IDNum& siteminfo() const;
  inline ::proto::message::IDNum* mutable_siteminfo();
  inline ::proto::message::IDNum* release_siteminfo();
  inline void set_allocated_siteminfo(::proto::message::IDNum* siteminfo);

  // optional string uiPlayerName = 2;
  inline bool has_uiplayername() const;
  inline void clear_uiplayername();
  static const int kUiPlayerNameFieldNumber = 2;
  inline const ::std::string& uiplayername() const;
  inline void set_uiplayername(const ::std::string& value);
  inline void set_uiplayername(const char* value);
  inline void set_uiplayername(const char* value, size_t size);
  inline ::std::string* mutable_uiplayername();
  inline ::std::string* release_uiplayername();
  inline void set_allocated_uiplayername(::std::string* uiplayername);

  // optional uint32 uiBossId = 3;
  inline bool has_uibossid() const;
  inline void clear_uibossid();
  static const int kUiBossIdFieldNumber = 3;
  inline ::google::protobuf::uint32 uibossid() const;
  inline void set_uibossid(::google::protobuf::uint32 value);

  // optional uint32 uiPrice = 4;
  inline bool has_uiprice() const;
  inline void clear_uiprice();
  static const int kUiPriceFieldNumber = 4;
  inline ::google::protobuf::uint32 uiprice() const;
  inline void set_uiprice(::google::protobuf::uint32 value);

  // optional uint64 uiPlayerUUID = 5;
  inline bool has_uiplayeruuid() const;
  inline void clear_uiplayeruuid();
  static const int kUiPlayerUUIDFieldNumber = 5;
  inline ::google::protobuf::uint64 uiplayeruuid() const;
  inline void set_uiplayeruuid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.message.WolrdBossSaledItem)
 private:
  inline void set_has_siteminfo();
  inline void clear_has_siteminfo();
  inline void set_has_uiplayername();
  inline void clear_has_uiplayername();
  inline void set_has_uibossid();
  inline void clear_has_uibossid();
  inline void set_has_uiprice();
  inline void clear_has_uiprice();
  inline void set_has_uiplayeruuid();
  inline void clear_has_uiplayeruuid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::message::IDNum* siteminfo_;
  ::std::string* uiplayername_;
  ::google::protobuf::uint32 uibossid_;
  ::google::protobuf::uint32 uiprice_;
  ::google::protobuf::uint64 uiplayeruuid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static WolrdBossSaledItem* default_instance_;
};
// -------------------------------------------------------------------

class OfflineDataDetail : public ::google::protobuf::Message {
 public:
  OfflineDataDetail();
  virtual ~OfflineDataDetail();

  OfflineDataDetail(const OfflineDataDetail& from);

  inline OfflineDataDetail& operator=(const OfflineDataDetail& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OfflineDataDetail& default_instance();

  void Swap(OfflineDataDetail* other);

  // implements Message ----------------------------------------------

  OfflineDataDetail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OfflineDataDetail& from);
  void MergeFrom(const OfflineDataDetail& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 playerskill = 1;
  inline int playerskill_size() const;
  inline void clear_playerskill();
  static const int kPlayerskillFieldNumber = 1;
  inline ::google::protobuf::int32 playerskill(int index) const;
  inline void set_playerskill(int index, ::google::protobuf::int32 value);
  inline void add_playerskill(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      playerskill() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_playerskill();

  // optional .proto.message.PlayerEffect playeratt = 2;
  inline bool has_playeratt() const;
  inline void clear_playeratt();
  static const int kPlayerattFieldNumber = 2;
  inline const ::proto::message::PlayerEffect& playeratt() const;
  inline ::proto::message::PlayerEffect* mutable_playeratt();
  inline ::proto::message::PlayerEffect* release_playeratt();
  inline void set_allocated_playeratt(::proto::message::PlayerEffect* playeratt);

  // optional int32 artifactid = 3;
  inline bool has_artifactid() const;
  inline void clear_artifactid();
  static const int kArtifactidFieldNumber = 3;
  inline ::google::protobuf::int32 artifactid() const;
  inline void set_artifactid(::google::protobuf::int32 value);

  // repeated int32 artifactskill = 4;
  inline int artifactskill_size() const;
  inline void clear_artifactskill();
  static const int kArtifactskillFieldNumber = 4;
  inline ::google::protobuf::int32 artifactskill(int index) const;
  inline void set_artifactskill(int index, ::google::protobuf::int32 value);
  inline void add_artifactskill(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      artifactskill() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_artifactskill();

  // optional int32 petid = 5;
  inline bool has_petid() const;
  inline void clear_petid();
  static const int kPetidFieldNumber = 5;
  inline ::google::protobuf::int32 petid() const;
  inline void set_petid(::google::protobuf::int32 value);

  // optional int32 boatid = 6;
  inline bool has_boatid() const;
  inline void clear_boatid();
  static const int kBoatidFieldNumber = 6;
  inline ::google::protobuf::int32 boatid() const;
  inline void set_boatid(::google::protobuf::int32 value);

  // optional int32 boatskin = 7;
  inline bool has_boatskin() const;
  inline void clear_boatskin();
  static const int kBoatskinFieldNumber = 7;
  inline ::google::protobuf::int32 boatskin() const;
  inline void set_boatskin(::google::protobuf::int32 value);

  // repeated int32 boatskill = 8;
  inline int boatskill_size() const;
  inline void clear_boatskill();
  static const int kBoatskillFieldNumber = 8;
  inline ::google::protobuf::int32 boatskill(int index) const;
  inline void set_boatskill(int index, ::google::protobuf::int32 value);
  inline void add_boatskill(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      boatskill() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_boatskill();

  // optional int32 awakenid = 9;
  inline bool has_awakenid() const;
  inline void clear_awakenid();
  static const int kAwakenidFieldNumber = 9;
  inline ::google::protobuf::int32 awakenid() const;
  inline void set_awakenid(::google::protobuf::int32 value);

  // optional int32 warlordid = 10;
  inline bool has_warlordid() const;
  inline void clear_warlordid();
  static const int kWarlordidFieldNumber = 10;
  inline ::google::protobuf::int32 warlordid() const;
  inline void set_warlordid(::google::protobuf::int32 value);

  // optional int32 fightvalue = 11;
  inline bool has_fightvalue() const;
  inline void clear_fightvalue();
  static const int kFightvalueFieldNumber = 11;
  inline ::google::protobuf::int32 fightvalue() const;
  inline void set_fightvalue(::google::protobuf::int32 value);

  // optional int32 skinid = 12;
  inline bool has_skinid() const;
  inline void clear_skinid();
  static const int kSkinidFieldNumber = 12;
  inline ::google::protobuf::int32 skinid() const;
  inline void set_skinid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.message.OfflineDataDetail)
 private:
  inline void set_has_playeratt();
  inline void clear_has_playeratt();
  inline void set_has_artifactid();
  inline void clear_has_artifactid();
  inline void set_has_petid();
  inline void clear_has_petid();
  inline void set_has_boatid();
  inline void clear_has_boatid();
  inline void set_has_boatskin();
  inline void clear_has_boatskin();
  inline void set_has_awakenid();
  inline void clear_has_awakenid();
  inline void set_has_warlordid();
  inline void clear_has_warlordid();
  inline void set_has_fightvalue();
  inline void clear_has_fightvalue();
  inline void set_has_skinid();
  inline void clear_has_skinid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > playerskill_;
  ::proto::message::PlayerEffect* playeratt_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > artifactskill_;
  ::google::protobuf::int32 artifactid_;
  ::google::protobuf::int32 petid_;
  ::google::protobuf::int32 boatid_;
  ::google::protobuf::int32 boatskin_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > boatskill_;
  ::google::protobuf::int32 awakenid_;
  ::google::protobuf::int32 warlordid_;
  ::google::protobuf::int32 fightvalue_;
  ::google::protobuf::int32 skinid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static OfflineDataDetail* default_instance_;
};
// -------------------------------------------------------------------

class MailToMap : public ::google::protobuf::Message {
 public:
  MailToMap();
  virtual ~MailToMap();

  MailToMap(const MailToMap& from);

  inline MailToMap& operator=(const MailToMap& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MailToMap& default_instance();

  void Swap(MailToMap* other);

  // implements Message ----------------------------------------------

  MailToMap* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MailToMap& from);
  void MergeFrom(const MailToMap& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 dropid = 1;
  inline bool has_dropid() const;
  inline void clear_dropid();
  static const int kDropidFieldNumber = 1;
  inline ::google::protobuf::uint32 dropid() const;
  inline void set_dropid(::google::protobuf::uint32 value);

  // optional int32 itemid = 2;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemidFieldNumber = 2;
  inline ::google::protobuf::int32 itemid() const;
  inline void set_itemid(::google::protobuf::int32 value);

  // optional int32 itemnum = 3;
  inline bool has_itemnum() const;
  inline void clear_itemnum();
  static const int kItemnumFieldNumber = 3;
  inline ::google::protobuf::int32 itemnum() const;
  inline void set_itemnum(::google::protobuf::int32 value);

  // repeated uint64 rolelist = 4;
  inline int rolelist_size() const;
  inline void clear_rolelist();
  static const int kRolelistFieldNumber = 4;
  inline ::google::protobuf::uint64 rolelist(int index) const;
  inline void set_rolelist(int index, ::google::protobuf::uint64 value);
  inline void add_rolelist(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      rolelist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_rolelist();

  // optional uint32 mailid = 5;
  inline bool has_mailid() const;
  inline void clear_mailid();
  static const int kMailidFieldNumber = 5;
  inline ::google::protobuf::uint32 mailid() const;
  inline void set_mailid(::google::protobuf::uint32 value);

  // optional string context = 6;
  inline bool has_context() const;
  inline void clear_context();
  static const int kContextFieldNumber = 6;
  inline const ::std::string& context() const;
  inline void set_context(const ::std::string& value);
  inline void set_context(const char* value);
  inline void set_context(const char* value, size_t size);
  inline ::std::string* mutable_context();
  inline ::std::string* release_context();
  inline void set_allocated_context(::std::string* context);

  // @@protoc_insertion_point(class_scope:proto.message.MailToMap)
 private:
  inline void set_has_dropid();
  inline void clear_has_dropid();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_itemnum();
  inline void clear_has_itemnum();
  inline void set_has_mailid();
  inline void clear_has_mailid();
  inline void set_has_context();
  inline void clear_has_context();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 dropid_;
  ::google::protobuf::int32 itemid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > rolelist_;
  ::google::protobuf::int32 itemnum_;
  ::google::protobuf::uint32 mailid_;
  ::std::string* context_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static MailToMap* default_instance_;
};
// -------------------------------------------------------------------

class DreadDungeonData : public ::google::protobuf::Message {
 public:
  DreadDungeonData();
  virtual ~DreadDungeonData();

  DreadDungeonData(const DreadDungeonData& from);

  inline DreadDungeonData& operator=(const DreadDungeonData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DreadDungeonData& default_instance();

  void Swap(DreadDungeonData* other);

  // implements Message ----------------------------------------------

  DreadDungeonData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DreadDungeonData& from);
  void MergeFrom(const DreadDungeonData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 secenID = 1;
  inline bool has_secenid() const;
  inline void clear_secenid();
  static const int kSecenIDFieldNumber = 1;
  inline ::google::protobuf::uint32 secenid() const;
  inline void set_secenid(::google::protobuf::uint32 value);

  // optional uint32 counts = 2;
  inline bool has_counts() const;
  inline void clear_counts();
  static const int kCountsFieldNumber = 2;
  inline ::google::protobuf::uint32 counts() const;
  inline void set_counts(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.message.DreadDungeonData)
 private:
  inline void set_has_secenid();
  inline void clear_has_secenid();
  inline void set_has_counts();
  inline void clear_has_counts();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 secenid_;
  ::google::protobuf::uint32 counts_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static DreadDungeonData* default_instance_;
};
// -------------------------------------------------------------------

class PlayerBaseData : public ::google::protobuf::Message {
 public:
  PlayerBaseData();
  virtual ~PlayerBaseData();

  PlayerBaseData(const PlayerBaseData& from);

  inline PlayerBaseData& operator=(const PlayerBaseData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerBaseData& default_instance();

  void Swap(PlayerBaseData* other);

  // implements Message ----------------------------------------------

  PlayerBaseData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerBaseData& from);
  void MergeFrom(const PlayerBaseData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 charid = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 1;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional string charname = 2;
  inline bool has_charname() const;
  inline void clear_charname();
  static const int kCharnameFieldNumber = 2;
  inline const ::std::string& charname() const;
  inline void set_charname(const ::std::string& value);
  inline void set_charname(const char* value);
  inline void set_charname(const char* value, size_t size);
  inline ::std::string* mutable_charname();
  inline ::std::string* release_charname();
  inline void set_allocated_charname(::std::string* charname);

  // optional uint64 guildid = 3;
  inline bool has_guildid() const;
  inline void clear_guildid();
  static const int kGuildidFieldNumber = 3;
  inline ::google::protobuf::uint64 guildid() const;
  inline void set_guildid(::google::protobuf::uint64 value);

  // optional string guildname = 4;
  inline bool has_guildname() const;
  inline void clear_guildname();
  static const int kGuildnameFieldNumber = 4;
  inline const ::std::string& guildname() const;
  inline void set_guildname(const ::std::string& value);
  inline void set_guildname(const char* value);
  inline void set_guildname(const char* value, size_t size);
  inline ::std::string* mutable_guildname();
  inline ::std::string* release_guildname();
  inline void set_allocated_guildname(::std::string* guildname);

  // optional uint32 career = 5;
  inline bool has_career() const;
  inline void clear_career();
  static const int kCareerFieldNumber = 5;
  inline ::google::protobuf::uint32 career() const;
  inline void set_career(::google::protobuf::uint32 value);

  // optional uint32 dhlev = 6;
  inline bool has_dhlev() const;
  inline void clear_dhlev();
  static const int kDhlevFieldNumber = 6;
  inline ::google::protobuf::uint32 dhlev() const;
  inline void set_dhlev(::google::protobuf::uint32 value);

  // optional uint32 level = 7;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 7;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 fightval = 8;
  inline bool has_fightval() const;
  inline void clear_fightval();
  static const int kFightvalFieldNumber = 8;
  inline ::google::protobuf::uint32 fightval() const;
  inline void set_fightval(::google::protobuf::uint32 value);

  // optional uint32 skinid = 9;
  inline bool has_skinid() const;
  inline void clear_skinid();
  static const int kSkinidFieldNumber = 9;
  inline ::google::protobuf::uint32 skinid() const;
  inline void set_skinid(::google::protobuf::uint32 value);

  // optional uint32 weaponskin = 10;
  inline bool has_weaponskin() const;
  inline void clear_weaponskin();
  static const int kWeaponskinFieldNumber = 10;
  inline ::google::protobuf::uint32 weaponskin() const;
  inline void set_weaponskin(::google::protobuf::uint32 value);

  // optional uint32 suitid = 11;
  inline bool has_suitid() const;
  inline void clear_suitid();
  static const int kSuitidFieldNumber = 11;
  inline ::google::protobuf::uint32 suitid() const;
  inline void set_suitid(::google::protobuf::uint32 value);

  // repeated uint32 equiplist = 12;
  inline int equiplist_size() const;
  inline void clear_equiplist();
  static const int kEquiplistFieldNumber = 12;
  inline ::google::protobuf::uint32 equiplist(int index) const;
  inline void set_equiplist(int index, ::google::protobuf::uint32 value);
  inline void add_equiplist(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      equiplist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_equiplist();

  // repeated uint32 attribut = 13;
  inline int attribut_size() const;
  inline void clear_attribut();
  static const int kAttributFieldNumber = 13;
  inline ::google::protobuf::uint32 attribut(int index) const;
  inline void set_attribut(int index, ::google::protobuf::uint32 value);
  inline void add_attribut(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      attribut() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_attribut();

  // @@protoc_insertion_point(class_scope:proto.message.PlayerBaseData)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_charname();
  inline void clear_has_charname();
  inline void set_has_guildid();
  inline void clear_has_guildid();
  inline void set_has_guildname();
  inline void clear_has_guildname();
  inline void set_has_career();
  inline void clear_has_career();
  inline void set_has_dhlev();
  inline void clear_has_dhlev();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_fightval();
  inline void clear_has_fightval();
  inline void set_has_skinid();
  inline void clear_has_skinid();
  inline void set_has_weaponskin();
  inline void clear_has_weaponskin();
  inline void set_has_suitid();
  inline void clear_has_suitid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 charid_;
  ::std::string* charname_;
  ::google::protobuf::uint64 guildid_;
  ::std::string* guildname_;
  ::google::protobuf::uint32 career_;
  ::google::protobuf::uint32 dhlev_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 fightval_;
  ::google::protobuf::uint32 skinid_;
  ::google::protobuf::uint32 weaponskin_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > equiplist_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > attribut_;
  ::google::protobuf::uint32 suitid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];

  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static PlayerBaseData* default_instance_;
};
// -------------------------------------------------------------------

class GrowData : public ::google::protobuf::Message {
 public:
  GrowData();
  virtual ~GrowData();

  GrowData(const GrowData& from);

  inline GrowData& operator=(const GrowData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GrowData& default_instance();

  void Swap(GrowData* other);

  // implements Message ----------------------------------------------

  GrowData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GrowData& from);
  void MergeFrom(const GrowData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 exid = 1;
  inline bool has_exid() const;
  inline void clear_exid();
  static const int kExidFieldNumber = 1;
  inline ::google::protobuf::uint32 exid() const;
  inline void set_exid(::google::protobuf::uint32 value);

  // optional uint32 fitvalue = 2;
  inline bool has_fitvalue() const;
  inline void clear_fitvalue();
  static const int kFitvalueFieldNumber = 2;
  inline ::google::protobuf::uint32 fitvalue() const;
  inline void set_fitvalue(::google::protobuf::uint32 value);

  // repeated uint32 equiplist = 3;
  inline int equiplist_size() const;
  inline void clear_equiplist();
  static const int kEquiplistFieldNumber = 3;
  inline ::google::protobuf::uint32 equiplist(int index) const;
  inline void set_equiplist(int index, ::google::protobuf::uint32 value);
  inline void add_equiplist(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      equiplist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_equiplist();

  // repeated uint32 skilllist = 4;
  inline int skilllist_size() const;
  inline void clear_skilllist();
  static const int kSkilllistFieldNumber = 4;
  inline ::google::protobuf::uint32 skilllist(int index) const;
  inline void set_skilllist(int index, ::google::protobuf::uint32 value);
  inline void add_skilllist(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      skilllist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_skilllist();

  // repeated uint32 skilllev = 5;
  inline int skilllev_size() const;
  inline void clear_skilllev();
  static const int kSkilllevFieldNumber = 5;
  inline ::google::protobuf::uint32 skilllev(int index) const;
  inline void set_skilllev(int index, ::google::protobuf::uint32 value);
  inline void add_skilllev(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      skilllev() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_skilllev();

  // optional uint32 eatcounts = 6;
  inline bool has_eatcounts() const;
  inline void clear_eatcounts();
  static const int kEatcountsFieldNumber = 6;
  inline ::google::protobuf::uint32 eatcounts() const;
  inline void set_eatcounts(::google::protobuf::uint32 value);

  // repeated uint32 attribut = 7;
  inline int attribut_size() const;
  inline void clear_attribut();
  static const int kAttributFieldNumber = 7;
  inline ::google::protobuf::uint32 attribut(int index) const;
  inline void set_attribut(int index, ::google::protobuf::uint32 value);
  inline void add_attribut(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      attribut() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_attribut();

  // repeated uint32 talent = 8;
  inline int talent_size() const;
  inline void clear_talent();
  static const int kTalentFieldNumber = 8;
  inline ::google::protobuf::uint32 talent(int index) const;
  inline void set_talent(int index, ::google::protobuf::uint32 value);
  inline void add_talent(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      talent() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_talent();

  // @@protoc_insertion_point(class_scope:proto.message.GrowData)
 private:
  inline void set_has_exid();
  inline void clear_has_exid();
  inline void set_has_fitvalue();
  inline void clear_has_fitvalue();
  inline void set_has_eatcounts();
  inline void clear_has_eatcounts();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 exid_;
  ::google::protobuf::uint32 fitvalue_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > equiplist_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > skilllist_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > skilllev_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > attribut_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > talent_;
  ::google::protobuf::uint32 eatcounts_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static GrowData* default_instance_;
};
// -------------------------------------------------------------------

class ShowDataDetail : public ::google::protobuf::Message {
 public:
  ShowDataDetail();
  virtual ~ShowDataDetail();

  ShowDataDetail(const ShowDataDetail& from);

  inline ShowDataDetail& operator=(const ShowDataDetail& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ShowDataDetail& default_instance();

  void Swap(ShowDataDetail* other);

  // implements Message ----------------------------------------------

  ShowDataDetail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ShowDataDetail& from);
  void MergeFrom(const ShowDataDetail& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto.message.GrowData awaken = 1;
  inline bool has_awaken() const;
  inline void clear_awaken();
  static const int kAwakenFieldNumber = 1;
  inline const ::proto::message::GrowData& awaken() const;
  inline ::proto::message::GrowData* mutable_awaken();
  inline ::proto::message::GrowData* release_awaken();
  inline void set_allocated_awaken(::proto::message::GrowData* awaken);

  // optional .proto.message.GrowData ride = 2;
  inline bool has_ride() const;
  inline void clear_ride();
  static const int kRideFieldNumber = 2;
  inline const ::proto::message::GrowData& ride() const;
  inline ::proto::message::GrowData* mutable_ride();
  inline ::proto::message::GrowData* release_ride();
  inline void set_allocated_ride(::proto::message::GrowData* ride);

  // repeated .proto.message.GrowData pet = 3;
  inline int pet_size() const;
  inline void clear_pet();
  static const int kPetFieldNumber = 3;
  inline const ::proto::message::GrowData& pet(int index) const;
  inline ::proto::message::GrowData* mutable_pet(int index);
  inline ::proto::message::GrowData* add_pet();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::message::GrowData >&
      pet() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::message::GrowData >*
      mutable_pet();

  // repeated .proto.message.GrowData mercenary = 4;
  inline int mercenary_size() const;
  inline void clear_mercenary();
  static const int kMercenaryFieldNumber = 4;
  inline const ::proto::message::GrowData& mercenary(int index) const;
  inline ::proto::message::GrowData* mutable_mercenary(int index);
  inline ::proto::message::GrowData* add_mercenary();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::message::GrowData >&
      mercenary() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::message::GrowData >*
      mutable_mercenary();

  // repeated .proto.message.GrowData godweapon = 5;
  inline int godweapon_size() const;
  inline void clear_godweapon();
  static const int kGodweaponFieldNumber = 5;
  inline const ::proto::message::GrowData& godweapon(int index) const;
  inline ::proto::message::GrowData* mutable_godweapon(int index);
  inline ::proto::message::GrowData* add_godweapon();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::message::GrowData >&
      godweapon() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::message::GrowData >*
      mutable_godweapon();

  // @@protoc_insertion_point(class_scope:proto.message.ShowDataDetail)
 private:
  inline void set_has_awaken();
  inline void clear_has_awaken();
  inline void set_has_ride();
  inline void clear_has_ride();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::message::GrowData* awaken_;
  ::proto::message::GrowData* ride_;
  ::google::protobuf::RepeatedPtrField< ::proto::message::GrowData > pet_;
  ::google::protobuf::RepeatedPtrField< ::proto::message::GrowData > mercenary_;
  ::google::protobuf::RepeatedPtrField< ::proto::message::GrowData > godweapon_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static ShowDataDetail* default_instance_;
};
// -------------------------------------------------------------------

class PlayerShow : public ::google::protobuf::Message {
 public:
  PlayerShow();
  virtual ~PlayerShow();

  PlayerShow(const PlayerShow& from);

  inline PlayerShow& operator=(const PlayerShow& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerShow& default_instance();

  void Swap(PlayerShow* other);

  // implements Message ----------------------------------------------

  PlayerShow* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerShow& from);
  void MergeFrom(const PlayerShow& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto.message.PlayerBaseData basedata = 1;
  inline bool has_basedata() const;
  inline void clear_basedata();
  static const int kBasedataFieldNumber = 1;
  inline const ::proto::message::PlayerBaseData& basedata() const;
  inline ::proto::message::PlayerBaseData* mutable_basedata();
  inline ::proto::message::PlayerBaseData* release_basedata();
  inline void set_allocated_basedata(::proto::message::PlayerBaseData* basedata);

  // optional .proto.message.ShowDataDetail offdata = 2;
  inline bool has_offdata() const;
  inline void clear_offdata();
  static const int kOffdataFieldNumber = 2;
  inline const ::proto::message::ShowDataDetail& offdata() const;
  inline ::proto::message::ShowDataDetail* mutable_offdata();
  inline ::proto::message::ShowDataDetail* release_offdata();
  inline void set_allocated_offdata(::proto::message::ShowDataDetail* offdata);

  // @@protoc_insertion_point(class_scope:proto.message.PlayerShow)
 private:
  inline void set_has_basedata();
  inline void clear_has_basedata();
  inline void set_has_offdata();
  inline void clear_has_offdata();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::message::PlayerBaseData* basedata_;
  ::proto::message::ShowDataDetail* offdata_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static PlayerShow* default_instance_;
};
// -------------------------------------------------------------------

class TBSyncFlagPos : public ::google::protobuf::Message {
 public:
  TBSyncFlagPos();
  virtual ~TBSyncFlagPos();

  TBSyncFlagPos(const TBSyncFlagPos& from);

  inline TBSyncFlagPos& operator=(const TBSyncFlagPos& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBSyncFlagPos& default_instance();

  void Swap(TBSyncFlagPos* other);

  // implements Message ----------------------------------------------

  TBSyncFlagPos* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBSyncFlagPos& from);
  void MergeFrom(const TBSyncFlagPos& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto.message.Point3D pt = 1;
  inline bool has_pt() const;
  inline void clear_pt();
  static const int kPtFieldNumber = 1;
  inline const ::proto::message::Point3D& pt() const;
  inline ::proto::message::Point3D* mutable_pt();
  inline ::proto::message::Point3D* release_pt();
  inline void set_allocated_pt(::proto::message::Point3D* pt);

  // optional uint32 flagobjid = 2;
  inline bool has_flagobjid() const;
  inline void clear_flagobjid();
  static const int kFlagobjidFieldNumber = 2;
  inline ::google::protobuf::uint32 flagobjid() const;
  inline void set_flagobjid(::google::protobuf::uint32 value);

  // optional uint64 getguildid = 3;
  inline bool has_getguildid() const;
  inline void clear_getguildid();
  static const int kGetguildidFieldNumber = 3;
  inline ::google::protobuf::uint64 getguildid() const;
  inline void set_getguildid(::google::protobuf::uint64 value);

  // optional string getguildname = 4;
  inline bool has_getguildname() const;
  inline void clear_getguildname();
  static const int kGetguildnameFieldNumber = 4;
  inline const ::std::string& getguildname() const;
  inline void set_getguildname(const ::std::string& value);
  inline void set_getguildname(const char* value);
  inline void set_getguildname(const char* value, size_t size);
  inline ::std::string* mutable_getguildname();
  inline ::std::string* release_getguildname();
  inline void set_allocated_getguildname(::std::string* getguildname);

  // optional uint32 getflagtime = 5;
  inline bool has_getflagtime() const;
  inline void clear_getflagtime();
  static const int kGetflagtimeFieldNumber = 5;
  inline ::google::protobuf::uint32 getflagtime() const;
  inline void set_getflagtime(::google::protobuf::uint32 value);

  // optional uint64 onwergid = 6;
  inline bool has_onwergid() const;
  inline void clear_onwergid();
  static const int kOnwergidFieldNumber = 6;
  inline ::google::protobuf::uint64 onwergid() const;
  inline void set_onwergid(::google::protobuf::uint64 value);

  // optional string ownername = 7;
  inline bool has_ownername() const;
  inline void clear_ownername();
  static const int kOwnernameFieldNumber = 7;
  inline const ::std::string& ownername() const;
  inline void set_ownername(const ::std::string& value);
  inline void set_ownername(const char* value);
  inline void set_ownername(const char* value, size_t size);
  inline ::std::string* mutable_ownername();
  inline ::std::string* release_ownername();
  inline void set_allocated_ownername(::std::string* ownername);

  // @@protoc_insertion_point(class_scope:proto.message.TBSyncFlagPos)
 private:
  inline void set_has_pt();
  inline void clear_has_pt();
  inline void set_has_flagobjid();
  inline void clear_has_flagobjid();
  inline void set_has_getguildid();
  inline void clear_has_getguildid();
  inline void set_has_getguildname();
  inline void clear_has_getguildname();
  inline void set_has_getflagtime();
  inline void clear_has_getflagtime();
  inline void set_has_onwergid();
  inline void clear_has_onwergid();
  inline void set_has_ownername();
  inline void clear_has_ownername();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::message::Point3D* pt_;
  ::google::protobuf::uint64 getguildid_;
  ::google::protobuf::uint32 flagobjid_;
  ::google::protobuf::uint32 getflagtime_;
  ::std::string* getguildname_;
  ::google::protobuf::uint64 onwergid_;
  ::std::string* ownername_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static TBSyncFlagPos* default_instance_;
};
// -------------------------------------------------------------------

class TBFieldInfo : public ::google::protobuf::Message {
 public:
  TBFieldInfo();
  virtual ~TBFieldInfo();

  TBFieldInfo(const TBFieldInfo& from);

  inline TBFieldInfo& operator=(const TBFieldInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBFieldInfo& default_instance();

  void Swap(TBFieldInfo* other);

  // implements Message ----------------------------------------------

  TBFieldInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBFieldInfo& from);
  void MergeFrom(const TBFieldInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 mapid = 2;
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapidFieldNumber = 2;
  inline ::google::protobuf::uint32 mapid() const;
  inline void set_mapid(::google::protobuf::uint32 value);

  // optional uint64 guildid = 3;
  inline bool has_guildid() const;
  inline void clear_guildid();
  static const int kGuildidFieldNumber = 3;
  inline ::google::protobuf::uint64 guildid() const;
  inline void set_guildid(::google::protobuf::uint64 value);

  // optional string guildname = 4;
  inline bool has_guildname() const;
  inline void clear_guildname();
  static const int kGuildnameFieldNumber = 4;
  inline const ::std::string& guildname() const;
  inline void set_guildname(const ::std::string& value);
  inline void set_guildname(const char* value);
  inline void set_guildname(const char* value, size_t size);
  inline ::std::string* mutable_guildname();
  inline ::std::string* release_guildname();
  inline void set_allocated_guildname(::std::string* guildname);

  // optional uint32 overtime = 5;
  inline bool has_overtime() const;
  inline void clear_overtime();
  static const int kOvertimeFieldNumber = 5;
  inline ::google::protobuf::uint32 overtime() const;
  inline void set_overtime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.message.TBFieldInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_mapid();
  inline void clear_has_mapid();
  inline void set_has_guildid();
  inline void clear_has_guildid();
  inline void set_has_guildname();
  inline void clear_has_guildname();
  inline void set_has_overtime();
  inline void clear_has_overtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 mapid_;
  ::google::protobuf::uint64 guildid_;
  ::std::string* guildname_;
  ::google::protobuf::uint32 overtime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static TBFieldInfo* default_instance_;
};
// -------------------------------------------------------------------

class TBKillReward : public ::google::protobuf::Message {
 public:
  TBKillReward();
  virtual ~TBKillReward();

  TBKillReward(const TBKillReward& from);

  inline TBKillReward& operator=(const TBKillReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBKillReward& default_instance();

  void Swap(TBKillReward* other);

  // implements Message ----------------------------------------------

  TBKillReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBKillReward& from);
  void MergeFrom(const TBKillReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 itemid = 1;
  inline int itemid_size() const;
  inline void clear_itemid();
  static const int kItemidFieldNumber = 1;
  inline ::google::protobuf::uint32 itemid(int index) const;
  inline void set_itemid(int index, ::google::protobuf::uint32 value);
  inline void add_itemid(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      itemid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_itemid();

  // repeated uint32 num = 2;
  inline int num_size() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  inline ::google::protobuf::uint32 num(int index) const;
  inline void set_num(int index, ::google::protobuf::uint32 value);
  inline void add_num(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      num() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_num();

  // @@protoc_insertion_point(class_scope:proto.message.TBKillReward)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > itemid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static TBKillReward* default_instance_;
};
// -------------------------------------------------------------------

class TBPlayer : public ::google::protobuf::Message {
 public:
  TBPlayer();
  virtual ~TBPlayer();

  TBPlayer(const TBPlayer& from);

  inline TBPlayer& operator=(const TBPlayer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBPlayer& default_instance();

  void Swap(TBPlayer* other);

  // implements Message ----------------------------------------------

  TBPlayer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBPlayer& from);
  void MergeFrom(const TBPlayer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 playerid = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  inline ::google::protobuf::uint64 playerid() const;
  inline void set_playerid(::google::protobuf::uint64 value);

  // optional uint64 guildid = 2;
  inline bool has_guildid() const;
  inline void clear_guildid();
  static const int kGuildidFieldNumber = 2;
  inline ::google::protobuf::uint64 guildid() const;
  inline void set_guildid(::google::protobuf::uint64 value);

  // optional uint32 onlinetime = 3;
  inline bool has_onlinetime() const;
  inline void clear_onlinetime();
  static const int kOnlinetimeFieldNumber = 3;
  inline ::google::protobuf::uint32 onlinetime() const;
  inline void set_onlinetime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.message.TBPlayer)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_guildid();
  inline void clear_has_guildid();
  inline void set_has_onlinetime();
  inline void clear_has_onlinetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 playerid_;
  ::google::protobuf::uint64 guildid_;
  ::google::protobuf::uint32 onlinetime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static TBPlayer* default_instance_;
};
// -------------------------------------------------------------------

class TBOverResultInfo : public ::google::protobuf::Message {
 public:
  TBOverResultInfo();
  virtual ~TBOverResultInfo();

  TBOverResultInfo(const TBOverResultInfo& from);

  inline TBOverResultInfo& operator=(const TBOverResultInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBOverResultInfo& default_instance();

  void Swap(TBOverResultInfo* other);

  // implements Message ----------------------------------------------

  TBOverResultInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBOverResultInfo& from);
  void MergeFrom(const TBOverResultInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint64 wingid = 2;
  inline bool has_wingid() const;
  inline void clear_wingid();
  static const int kWingidFieldNumber = 2;
  inline ::google::protobuf::uint64 wingid() const;
  inline void set_wingid(::google::protobuf::uint64 value);

  // optional string winname = 3;
  inline bool has_winname() const;
  inline void clear_winname();
  static const int kWinnameFieldNumber = 3;
  inline const ::std::string& winname() const;
  inline void set_winname(const ::std::string& value);
  inline void set_winname(const char* value);
  inline void set_winname(const char* value, size_t size);
  inline ::std::string* mutable_winname();
  inline ::std::string* release_winname();
  inline void set_allocated_winname(::std::string* winname);

  // optional uint64 losegid = 4;
  inline bool has_losegid() const;
  inline void clear_losegid();
  static const int kLosegidFieldNumber = 4;
  inline ::google::protobuf::uint64 losegid() const;
  inline void set_losegid(::google::protobuf::uint64 value);

  // repeated .proto.message.TBPlayer playeridlist = 5;
  inline int playeridlist_size() const;
  inline void clear_playeridlist();
  static const int kPlayeridlistFieldNumber = 5;
  inline const ::proto::message::TBPlayer& playeridlist(int index) const;
  inline ::proto::message::TBPlayer* mutable_playeridlist(int index);
  inline ::proto::message::TBPlayer* add_playeridlist();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::message::TBPlayer >&
      playeridlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::message::TBPlayer >*
      mutable_playeridlist();

  // optional uint32 serverid = 6;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServeridFieldNumber = 6;
  inline ::google::protobuf::uint32 serverid() const;
  inline void set_serverid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.message.TBOverResultInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_wingid();
  inline void clear_has_wingid();
  inline void set_has_winname();
  inline void clear_has_winname();
  inline void set_has_losegid();
  inline void clear_has_losegid();
  inline void set_has_serverid();
  inline void clear_has_serverid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 wingid_;
  ::std::string* winname_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 serverid_;
  ::google::protobuf::uint64 losegid_;
  ::google::protobuf::RepeatedPtrField< ::proto::message::TBPlayer > playeridlist_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static TBOverResultInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// ErrorCode_SC_ErrorCodeMsg

// optional int32 nResult = 1;
inline bool ErrorCode_SC_ErrorCodeMsg::has_nresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ErrorCode_SC_ErrorCodeMsg::set_has_nresult() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ErrorCode_SC_ErrorCodeMsg::clear_has_nresult() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ErrorCode_SC_ErrorCodeMsg::clear_nresult() {
  nresult_ = 0;
  clear_has_nresult();
}
inline ::google::protobuf::int32 ErrorCode_SC_ErrorCodeMsg::nresult() const {
  return nresult_;
}
inline void ErrorCode_SC_ErrorCodeMsg::set_nresult(::google::protobuf::int32 value) {
  set_has_nresult();
  nresult_ = value;
}

// -------------------------------------------------------------------

// NullMessage

// -------------------------------------------------------------------

// Point3D

// optional float x = 1;
inline bool Point3D::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Point3D::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Point3D::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Point3D::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float Point3D::x() const {
  return x_;
}
inline void Point3D::set_x(float value) {
  set_has_x();
  x_ = value;
}

// optional float y = 2;
inline bool Point3D::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Point3D::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Point3D::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Point3D::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float Point3D::y() const {
  return y_;
}
inline void Point3D::set_y(float value) {
  set_has_y();
  y_ = value;
}

// optional float z = 3;
inline bool Point3D::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Point3D::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Point3D::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Point3D::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline float Point3D::z() const {
  return z_;
}
inline void Point3D::set_z(float value) {
  set_has_z();
  z_ = value;
}

// -------------------------------------------------------------------

// Point4D

// optional float x = 1;
inline bool Point4D::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Point4D::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Point4D::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Point4D::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float Point4D::x() const {
  return x_;
}
inline void Point4D::set_x(float value) {
  set_has_x();
  x_ = value;
}

// optional float y = 2;
inline bool Point4D::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Point4D::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Point4D::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Point4D::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float Point4D::y() const {
  return y_;
}
inline void Point4D::set_y(float value) {
  set_has_y();
  y_ = value;
}

// optional float z = 3;
inline bool Point4D::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Point4D::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Point4D::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Point4D::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline float Point4D::z() const {
  return z_;
}
inline void Point4D::set_z(float value) {
  set_has_z();
  z_ = value;
}

// optional float w = 4;
inline bool Point4D::has_w() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Point4D::set_has_w() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Point4D::clear_has_w() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Point4D::clear_w() {
  w_ = 0;
  clear_has_w();
}
inline float Point4D::w() const {
  return w_;
}
inline void Point4D::set_w(float value) {
  set_has_w();
  w_ = value;
}

// -------------------------------------------------------------------

// IDNum

// optional int32 id = 1;
inline bool IDNum::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IDNum::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IDNum::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IDNum::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 IDNum::id() const {
  return id_;
}
inline void IDNum::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 num = 2;
inline bool IDNum::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IDNum::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IDNum::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IDNum::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 IDNum::num() const {
  return num_;
}
inline void IDNum::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
}

// -------------------------------------------------------------------

// KeyValue

// optional int32 key = 1;
inline bool KeyValue::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void KeyValue::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void KeyValue::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void KeyValue::clear_key() {
  key_ = 0;
  clear_has_key();
}
inline ::google::protobuf::int32 KeyValue::key() const {
  return key_;
}
inline void KeyValue::set_key(::google::protobuf::int32 value) {
  set_has_key();
  key_ = value;
}

// optional int32 iValue = 2;
inline bool KeyValue::has_ivalue() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void KeyValue::set_has_ivalue() {
  _has_bits_[0] |= 0x00000002u;
}
inline void KeyValue::clear_has_ivalue() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void KeyValue::clear_ivalue() {
  ivalue_ = 0;
  clear_has_ivalue();
}
inline ::google::protobuf::int32 KeyValue::ivalue() const {
  return ivalue_;
}
inline void KeyValue::set_ivalue(::google::protobuf::int32 value) {
  set_has_ivalue();
  ivalue_ = value;
}

// optional int64 lValue = 3;
inline bool KeyValue::has_lvalue() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void KeyValue::set_has_lvalue() {
  _has_bits_[0] |= 0x00000004u;
}
inline void KeyValue::clear_has_lvalue() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void KeyValue::clear_lvalue() {
  lvalue_ = GOOGLE_LONGLONG(0);
  clear_has_lvalue();
}
inline ::google::protobuf::int64 KeyValue::lvalue() const {
  return lvalue_;
}
inline void KeyValue::set_lvalue(::google::protobuf::int64 value) {
  set_has_lvalue();
  lvalue_ = value;
}

// optional float fValue = 4;
inline bool KeyValue::has_fvalue() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void KeyValue::set_has_fvalue() {
  _has_bits_[0] |= 0x00000008u;
}
inline void KeyValue::clear_has_fvalue() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void KeyValue::clear_fvalue() {
  fvalue_ = 0;
  clear_has_fvalue();
}
inline float KeyValue::fvalue() const {
  return fvalue_;
}
inline void KeyValue::set_fvalue(float value) {
  set_has_fvalue();
  fvalue_ = value;
}

// optional string szValue = 5;
inline bool KeyValue::has_szvalue() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void KeyValue::set_has_szvalue() {
  _has_bits_[0] |= 0x00000010u;
}
inline void KeyValue::clear_has_szvalue() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void KeyValue::clear_szvalue() {
  if (szvalue_ != &::google::protobuf::internal::kEmptyString) {
    szvalue_->clear();
  }
  clear_has_szvalue();
}
inline const ::std::string& KeyValue::szvalue() const {
  return *szvalue_;
}
inline void KeyValue::set_szvalue(const ::std::string& value) {
  set_has_szvalue();
  if (szvalue_ == &::google::protobuf::internal::kEmptyString) {
    szvalue_ = new ::std::string;
  }
  szvalue_->assign(value);
}
inline void KeyValue::set_szvalue(const char* value) {
  set_has_szvalue();
  if (szvalue_ == &::google::protobuf::internal::kEmptyString) {
    szvalue_ = new ::std::string;
  }
  szvalue_->assign(value);
}
inline void KeyValue::set_szvalue(const char* value, size_t size) {
  set_has_szvalue();
  if (szvalue_ == &::google::protobuf::internal::kEmptyString) {
    szvalue_ = new ::std::string;
  }
  szvalue_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* KeyValue::mutable_szvalue() {
  set_has_szvalue();
  if (szvalue_ == &::google::protobuf::internal::kEmptyString) {
    szvalue_ = new ::std::string;
  }
  return szvalue_;
}
inline ::std::string* KeyValue::release_szvalue() {
  clear_has_szvalue();
  if (szvalue_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = szvalue_;
    szvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void KeyValue::set_allocated_szvalue(::std::string* szvalue) {
  if (szvalue_ != &::google::protobuf::internal::kEmptyString) {
    delete szvalue_;
  }
  if (szvalue) {
    set_has_szvalue();
    szvalue_ = szvalue;
  } else {
    clear_has_szvalue();
    szvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ActivityData

// optional int32 activityid = 1;
inline bool ActivityData::has_activityid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActivityData::set_has_activityid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ActivityData::clear_has_activityid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ActivityData::clear_activityid() {
  activityid_ = 0;
  clear_has_activityid();
}
inline ::google::protobuf::int32 ActivityData::activityid() const {
  return activityid_;
}
inline void ActivityData::set_activityid(::google::protobuf::int32 value) {
  set_has_activityid();
  activityid_ = value;
}

// repeated .proto.message.KeyValue kv = 2;
inline int ActivityData::kv_size() const {
  return kv_.size();
}
inline void ActivityData::clear_kv() {
  kv_.Clear();
}
inline const ::proto::message::KeyValue& ActivityData::kv(int index) const {
  return kv_.Get(index);
}
inline ::proto::message::KeyValue* ActivityData::mutable_kv(int index) {
  return kv_.Mutable(index);
}
inline ::proto::message::KeyValue* ActivityData::add_kv() {
  return kv_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::message::KeyValue >&
ActivityData::kv() const {
  return kv_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::message::KeyValue >*
ActivityData::mutable_kv() {
  return &kv_;
}

// -------------------------------------------------------------------

// PairInt32

// optional int32 first = 1;
inline bool PairInt32::has_first() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PairInt32::set_has_first() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PairInt32::clear_has_first() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PairInt32::clear_first() {
  first_ = 0;
  clear_has_first();
}
inline ::google::protobuf::int32 PairInt32::first() const {
  return first_;
}
inline void PairInt32::set_first(::google::protobuf::int32 value) {
  set_has_first();
  first_ = value;
}

// optional int32 second = 2;
inline bool PairInt32::has_second() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PairInt32::set_has_second() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PairInt32::clear_has_second() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PairInt32::clear_second() {
  second_ = 0;
  clear_has_second();
}
inline ::google::protobuf::int32 PairInt32::second() const {
  return second_;
}
inline void PairInt32::set_second(::google::protobuf::int32 value) {
  set_has_second();
  second_ = value;
}

// -------------------------------------------------------------------

// IDTimes

// optional int32 id = 1;
inline bool IDTimes::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IDTimes::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IDTimes::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IDTimes::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 IDTimes::id() const {
  return id_;
}
inline void IDTimes::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 times = 2;
inline bool IDTimes::has_times() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IDTimes::set_has_times() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IDTimes::clear_has_times() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IDTimes::clear_times() {
  times_ = 0;
  clear_has_times();
}
inline ::google::protobuf::int32 IDTimes::times() const {
  return times_;
}
inline void IDTimes::set_times(::google::protobuf::int32 value) {
  set_has_times();
  times_ = value;
}

// -------------------------------------------------------------------

// EquipEffect

// optional int32 etype = 1;
inline bool EquipEffect::has_etype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EquipEffect::set_has_etype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EquipEffect::clear_has_etype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EquipEffect::clear_etype() {
  etype_ = 0;
  clear_has_etype();
}
inline ::google::protobuf::int32 EquipEffect::etype() const {
  return etype_;
}
inline void EquipEffect::set_etype(::google::protobuf::int32 value) {
  set_has_etype();
  etype_ = value;
}

// optional int32 eff_id = 2;
inline bool EquipEffect::has_eff_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EquipEffect::set_has_eff_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EquipEffect::clear_has_eff_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EquipEffect::clear_eff_id() {
  eff_id_ = 0;
  clear_has_eff_id();
}
inline ::google::protobuf::int32 EquipEffect::eff_id() const {
  return eff_id_;
}
inline void EquipEffect::set_eff_id(::google::protobuf::int32 value) {
  set_has_eff_id();
  eff_id_ = value;
}

// optional int32 eff_type = 3;
inline bool EquipEffect::has_eff_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EquipEffect::set_has_eff_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EquipEffect::clear_has_eff_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EquipEffect::clear_eff_type() {
  eff_type_ = 0;
  clear_has_eff_type();
}
inline ::google::protobuf::int32 EquipEffect::eff_type() const {
  return eff_type_;
}
inline void EquipEffect::set_eff_type(::google::protobuf::int32 value) {
  set_has_eff_type();
  eff_type_ = value;
}

// optional int32 data_type = 4;
inline bool EquipEffect::has_data_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EquipEffect::set_has_data_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EquipEffect::clear_has_data_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EquipEffect::clear_data_type() {
  data_type_ = 0;
  clear_has_data_type();
}
inline ::google::protobuf::int32 EquipEffect::data_type() const {
  return data_type_;
}
inline void EquipEffect::set_data_type(::google::protobuf::int32 value) {
  set_has_data_type();
  data_type_ = value;
}

// optional int32 data_num = 5;
inline bool EquipEffect::has_data_num() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void EquipEffect::set_has_data_num() {
  _has_bits_[0] |= 0x00000010u;
}
inline void EquipEffect::clear_has_data_num() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void EquipEffect::clear_data_num() {
  data_num_ = 0;
  clear_has_data_num();
}
inline ::google::protobuf::int32 EquipEffect::data_num() const {
  return data_num_;
}
inline void EquipEffect::set_data_num(::google::protobuf::int32 value) {
  set_has_data_num();
  data_num_ = value;
}

// -------------------------------------------------------------------

// Equip

// optional uint64 uuid = 1;
inline bool Equip::has_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Equip::set_has_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Equip::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Equip::clear_uuid() {
  uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_uuid();
}
inline ::google::protobuf::uint64 Equip::uuid() const {
  return uuid_;
}
inline void Equip::set_uuid(::google::protobuf::uint64 value) {
  set_has_uuid();
  uuid_ = value;
}

// optional string charname = 2;
inline bool Equip::has_charname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Equip::set_has_charname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Equip::clear_has_charname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Equip::clear_charname() {
  if (charname_ != &::google::protobuf::internal::kEmptyString) {
    charname_->clear();
  }
  clear_has_charname();
}
inline const ::std::string& Equip::charname() const {
  return *charname_;
}
inline void Equip::set_charname(const ::std::string& value) {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    charname_ = new ::std::string;
  }
  charname_->assign(value);
}
inline void Equip::set_charname(const char* value) {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    charname_ = new ::std::string;
  }
  charname_->assign(value);
}
inline void Equip::set_charname(const char* value, size_t size) {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    charname_ = new ::std::string;
  }
  charname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Equip::mutable_charname() {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    charname_ = new ::std::string;
  }
  return charname_;
}
inline ::std::string* Equip::release_charname() {
  clear_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = charname_;
    charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Equip::set_allocated_charname(::std::string* charname) {
  if (charname_ != &::google::protobuf::internal::kEmptyString) {
    delete charname_;
  }
  if (charname) {
    set_has_charname();
    charname_ = charname;
  } else {
    clear_has_charname();
    charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 gain_time = 3;
inline bool Equip::has_gain_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Equip::set_has_gain_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Equip::clear_has_gain_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Equip::clear_gain_time() {
  gain_time_ = GOOGLE_ULONGLONG(0);
  clear_has_gain_time();
}
inline ::google::protobuf::uint64 Equip::gain_time() const {
  return gain_time_;
}
inline void Equip::set_gain_time(::google::protobuf::uint64 value) {
  set_has_gain_time();
  gain_time_ = value;
}

// optional int32 id = 4;
inline bool Equip::has_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Equip::set_has_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Equip::clear_has_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Equip::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Equip::id() const {
  return id_;
}
inline void Equip::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 level = 5;
inline bool Equip::has_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Equip::set_has_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Equip::clear_has_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Equip::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 Equip::level() const {
  return level_;
}
inline void Equip::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 is_equipon = 6;
inline bool Equip::has_is_equipon() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Equip::set_has_is_equipon() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Equip::clear_has_is_equipon() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Equip::clear_is_equipon() {
  is_equipon_ = 0;
  clear_has_is_equipon();
}
inline ::google::protobuf::int32 Equip::is_equipon() const {
  return is_equipon_;
}
inline void Equip::set_is_equipon(::google::protobuf::int32 value) {
  set_has_is_equipon();
  is_equipon_ = value;
}

// optional int32 strength_lv = 7;
inline bool Equip::has_strength_lv() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Equip::set_has_strength_lv() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Equip::clear_has_strength_lv() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Equip::clear_strength_lv() {
  strength_lv_ = 0;
  clear_has_strength_lv();
}
inline ::google::protobuf::int32 Equip::strength_lv() const {
  return strength_lv_;
}
inline void Equip::set_strength_lv(::google::protobuf::int32 value) {
  set_has_strength_lv();
  strength_lv_ = value;
}

// optional int32 increase_percent = 8;
inline bool Equip::has_increase_percent() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Equip::set_has_increase_percent() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Equip::clear_has_increase_percent() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Equip::clear_increase_percent() {
  increase_percent_ = 0;
  clear_has_increase_percent();
}
inline ::google::protobuf::int32 Equip::increase_percent() const {
  return increase_percent_;
}
inline void Equip::set_increase_percent(::google::protobuf::int32 value) {
  set_has_increase_percent();
  increase_percent_ = value;
}

// optional int32 durability = 9;
inline bool Equip::has_durability() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Equip::set_has_durability() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Equip::clear_has_durability() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Equip::clear_durability() {
  durability_ = 0;
  clear_has_durability();
}
inline ::google::protobuf::int32 Equip::durability() const {
  return durability_;
}
inline void Equip::set_durability(::google::protobuf::int32 value) {
  set_has_durability();
  durability_ = value;
}

// optional int32 times = 10;
inline bool Equip::has_times() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Equip::set_has_times() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Equip::clear_has_times() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Equip::clear_times() {
  times_ = 0;
  clear_has_times();
}
inline ::google::protobuf::int32 Equip::times() const {
  return times_;
}
inline void Equip::set_times(::google::protobuf::int32 value) {
  set_has_times();
  times_ = value;
}

// repeated .proto.message.EquipEffect effect_list = 11;
inline int Equip::effect_list_size() const {
  return effect_list_.size();
}
inline void Equip::clear_effect_list() {
  effect_list_.Clear();
}
inline const ::proto::message::EquipEffect& Equip::effect_list(int index) const {
  return effect_list_.Get(index);
}
inline ::proto::message::EquipEffect* Equip::mutable_effect_list(int index) {
  return effect_list_.Mutable(index);
}
inline ::proto::message::EquipEffect* Equip::add_effect_list() {
  return effect_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::message::EquipEffect >&
Equip::effect_list() const {
  return effect_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::message::EquipEffect >*
Equip::mutable_effect_list() {
  return &effect_list_;
}

// optional int32 source = 12;
inline bool Equip::has_source() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Equip::set_has_source() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Equip::clear_has_source() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Equip::clear_source() {
  source_ = 0;
  clear_has_source();
}
inline ::google::protobuf::int32 Equip::source() const {
  return source_;
}
inline void Equip::set_source(::google::protobuf::int32 value) {
  set_has_source();
  source_ = value;
}

// optional int32 frozen_time = 13;
inline bool Equip::has_frozen_time() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Equip::set_has_frozen_time() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Equip::clear_has_frozen_time() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Equip::clear_frozen_time() {
  frozen_time_ = 0;
  clear_has_frozen_time();
}
inline ::google::protobuf::int32 Equip::frozen_time() const {
  return frozen_time_;
}
inline void Equip::set_frozen_time(::google::protobuf::int32 value) {
  set_has_frozen_time();
  frozen_time_ = value;
}

// optional uint32 exp = 14;
inline bool Equip::has_exp() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Equip::set_has_exp() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Equip::clear_has_exp() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Equip::clear_exp() {
  exp_ = 0u;
  clear_has_exp();
}
inline ::google::protobuf::uint32 Equip::exp() const {
  return exp_;
}
inline void Equip::set_exp(::google::protobuf::uint32 value) {
  set_has_exp();
  exp_ = value;
}

// optional uint32 bind = 15;
inline bool Equip::has_bind() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Equip::set_has_bind() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Equip::clear_has_bind() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Equip::clear_bind() {
  bind_ = 0u;
  clear_has_bind();
}
inline ::google::protobuf::uint32 Equip::bind() const {
  return bind_;
}
inline void Equip::set_bind(::google::protobuf::uint32 value) {
  set_has_bind();
  bind_ = value;
}

// repeated .proto.message.IDNum best_attr = 16;
inline int Equip::best_attr_size() const {
  return best_attr_.size();
}
inline void Equip::clear_best_attr() {
  best_attr_.Clear();
}
inline const ::proto::message::IDNum& Equip::best_attr(int index) const {
  return best_attr_.Get(index);
}
inline ::proto::message::IDNum* Equip::mutable_best_attr(int index) {
  return best_attr_.Mutable(index);
}
inline ::proto::message::IDNum* Equip::add_best_attr() {
  return best_attr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::message::IDNum >&
Equip::best_attr() const {
  return best_attr_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::message::IDNum >*
Equip::mutable_best_attr() {
  return &best_attr_;
}

// -------------------------------------------------------------------

// DiamondDoubleHistory

// optional string name = 1;
inline bool DiamondDoubleHistory::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DiamondDoubleHistory::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DiamondDoubleHistory::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DiamondDoubleHistory::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& DiamondDoubleHistory::name() const {
  return *name_;
}
inline void DiamondDoubleHistory::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void DiamondDoubleHistory::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void DiamondDoubleHistory::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DiamondDoubleHistory::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* DiamondDoubleHistory::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DiamondDoubleHistory::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 dimaond = 2;
inline bool DiamondDoubleHistory::has_dimaond() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DiamondDoubleHistory::set_has_dimaond() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DiamondDoubleHistory::clear_has_dimaond() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DiamondDoubleHistory::clear_dimaond() {
  dimaond_ = 0u;
  clear_has_dimaond();
}
inline ::google::protobuf::uint32 DiamondDoubleHistory::dimaond() const {
  return dimaond_;
}
inline void DiamondDoubleHistory::set_dimaond(::google::protobuf::uint32 value) {
  set_has_dimaond();
  dimaond_ = value;
}

// -------------------------------------------------------------------

// BatSkillInfo

// optional int32 playerskillid = 1;
inline bool BatSkillInfo::has_playerskillid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BatSkillInfo::set_has_playerskillid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BatSkillInfo::clear_has_playerskillid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BatSkillInfo::clear_playerskillid() {
  playerskillid_ = 0;
  clear_has_playerskillid();
}
inline ::google::protobuf::int32 BatSkillInfo::playerskillid() const {
  return playerskillid_;
}
inline void BatSkillInfo::set_playerskillid(::google::protobuf::int32 value) {
  set_has_playerskillid();
  playerskillid_ = value;
}

// optional int32 effectid = 2;
inline bool BatSkillInfo::has_effectid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BatSkillInfo::set_has_effectid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BatSkillInfo::clear_has_effectid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BatSkillInfo::clear_effectid() {
  effectid_ = 0;
  clear_has_effectid();
}
inline ::google::protobuf::int32 BatSkillInfo::effectid() const {
  return effectid_;
}
inline void BatSkillInfo::set_effectid(::google::protobuf::int32 value) {
  set_has_effectid();
  effectid_ = value;
}

// optional int32 pos = 3;
inline bool BatSkillInfo::has_pos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BatSkillInfo::set_has_pos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BatSkillInfo::clear_has_pos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BatSkillInfo::clear_pos() {
  pos_ = 0;
  clear_has_pos();
}
inline ::google::protobuf::int32 BatSkillInfo::pos() const {
  return pos_;
}
inline void BatSkillInfo::set_pos(::google::protobuf::int32 value) {
  set_has_pos();
  pos_ = value;
}

// optional int32 curmark = 4;
inline bool BatSkillInfo::has_curmark() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BatSkillInfo::set_has_curmark() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BatSkillInfo::clear_has_curmark() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BatSkillInfo::clear_curmark() {
  curmark_ = 0;
  clear_has_curmark();
}
inline ::google::protobuf::int32 BatSkillInfo::curmark() const {
  return curmark_;
}
inline void BatSkillInfo::set_curmark(::google::protobuf::int32 value) {
  set_has_curmark();
  curmark_ = value;
}

// repeated int32 markid = 5;
inline int BatSkillInfo::markid_size() const {
  return markid_.size();
}
inline void BatSkillInfo::clear_markid() {
  markid_.Clear();
}
inline ::google::protobuf::int32 BatSkillInfo::markid(int index) const {
  return markid_.Get(index);
}
inline void BatSkillInfo::set_markid(int index, ::google::protobuf::int32 value) {
  markid_.Set(index, value);
}
inline void BatSkillInfo::add_markid(::google::protobuf::int32 value) {
  markid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BatSkillInfo::markid() const {
  return markid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BatSkillInfo::mutable_markid() {
  return &markid_;
}

// optional int32 level = 6;
inline bool BatSkillInfo::has_level() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BatSkillInfo::set_has_level() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BatSkillInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BatSkillInfo::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 BatSkillInfo::level() const {
  return level_;
}
inline void BatSkillInfo::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 effectid2 = 7;
inline bool BatSkillInfo::has_effectid2() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BatSkillInfo::set_has_effectid2() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BatSkillInfo::clear_has_effectid2() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BatSkillInfo::clear_effectid2() {
  effectid2_ = 0;
  clear_has_effectid2();
}
inline ::google::protobuf::int32 BatSkillInfo::effectid2() const {
  return effectid2_;
}
inline void BatSkillInfo::set_effectid2(::google::protobuf::int32 value) {
  set_has_effectid2();
  effectid2_ = value;
}

// -------------------------------------------------------------------

// PlayerEffect

// repeated int32 attdata = 1;
inline int PlayerEffect::attdata_size() const {
  return attdata_.size();
}
inline void PlayerEffect::clear_attdata() {
  attdata_.Clear();
}
inline ::google::protobuf::int32 PlayerEffect::attdata(int index) const {
  return attdata_.Get(index);
}
inline void PlayerEffect::set_attdata(int index, ::google::protobuf::int32 value) {
  attdata_.Set(index, value);
}
inline void PlayerEffect::add_attdata(::google::protobuf::int32 value) {
  attdata_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PlayerEffect::attdata() const {
  return attdata_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PlayerEffect::mutable_attdata() {
  return &attdata_;
}

// -------------------------------------------------------------------

// BattlePlayerInfo

// required uint32 nplayerid = 1;
inline bool BattlePlayerInfo::has_nplayerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BattlePlayerInfo::set_has_nplayerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BattlePlayerInfo::clear_has_nplayerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BattlePlayerInfo::clear_nplayerid() {
  nplayerid_ = 0u;
  clear_has_nplayerid();
}
inline ::google::protobuf::uint32 BattlePlayerInfo::nplayerid() const {
  return nplayerid_;
}
inline void BattlePlayerInfo::set_nplayerid(::google::protobuf::uint32 value) {
  set_has_nplayerid();
  nplayerid_ = value;
}

// required .proto.message.Point3D pt = 2;
inline bool BattlePlayerInfo::has_pt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BattlePlayerInfo::set_has_pt() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BattlePlayerInfo::clear_has_pt() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BattlePlayerInfo::clear_pt() {
  if (pt_ != NULL) pt_->::proto::message::Point3D::Clear();
  clear_has_pt();
}
inline const ::proto::message::Point3D& BattlePlayerInfo::pt() const {
  return pt_ != NULL ? *pt_ : *default_instance_->pt_;
}
inline ::proto::message::Point3D* BattlePlayerInfo::mutable_pt() {
  set_has_pt();
  if (pt_ == NULL) pt_ = new ::proto::message::Point3D;
  return pt_;
}
inline ::proto::message::Point3D* BattlePlayerInfo::release_pt() {
  clear_has_pt();
  ::proto::message::Point3D* temp = pt_;
  pt_ = NULL;
  return temp;
}
inline void BattlePlayerInfo::set_allocated_pt(::proto::message::Point3D* pt) {
  delete pt_;
  pt_ = pt;
  if (pt) {
    set_has_pt();
  } else {
    clear_has_pt();
  }
}

// required float dir = 3;
inline bool BattlePlayerInfo::has_dir() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BattlePlayerInfo::set_has_dir() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BattlePlayerInfo::clear_has_dir() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BattlePlayerInfo::clear_dir() {
  dir_ = 0;
  clear_has_dir();
}
inline float BattlePlayerInfo::dir() const {
  return dir_;
}
inline void BattlePlayerInfo::set_dir(float value) {
  set_has_dir();
  dir_ = value;
}

// optional string name = 4;
inline bool BattlePlayerInfo::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BattlePlayerInfo::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BattlePlayerInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BattlePlayerInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& BattlePlayerInfo::name() const {
  return *name_;
}
inline void BattlePlayerInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void BattlePlayerInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void BattlePlayerInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BattlePlayerInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* BattlePlayerInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BattlePlayerInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 curhp = 5;
inline bool BattlePlayerInfo::has_curhp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BattlePlayerInfo::set_has_curhp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BattlePlayerInfo::clear_has_curhp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BattlePlayerInfo::clear_curhp() {
  curhp_ = 0;
  clear_has_curhp();
}
inline ::google::protobuf::int32 BattlePlayerInfo::curhp() const {
  return curhp_;
}
inline void BattlePlayerInfo::set_curhp(::google::protobuf::int32 value) {
  set_has_curhp();
  curhp_ = value;
}

// repeated int32 attvalue = 6;
inline int BattlePlayerInfo::attvalue_size() const {
  return attvalue_.size();
}
inline void BattlePlayerInfo::clear_attvalue() {
  attvalue_.Clear();
}
inline ::google::protobuf::int32 BattlePlayerInfo::attvalue(int index) const {
  return attvalue_.Get(index);
}
inline void BattlePlayerInfo::set_attvalue(int index, ::google::protobuf::int32 value) {
  attvalue_.Set(index, value);
}
inline void BattlePlayerInfo::add_attvalue(::google::protobuf::int32 value) {
  attvalue_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BattlePlayerInfo::attvalue() const {
  return attvalue_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BattlePlayerInfo::mutable_attvalue() {
  return &attvalue_;
}

// repeated int32 attprecent = 7;
inline int BattlePlayerInfo::attprecent_size() const {
  return attprecent_.size();
}
inline void BattlePlayerInfo::clear_attprecent() {
  attprecent_.Clear();
}
inline ::google::protobuf::int32 BattlePlayerInfo::attprecent(int index) const {
  return attprecent_.Get(index);
}
inline void BattlePlayerInfo::set_attprecent(int index, ::google::protobuf::int32 value) {
  attprecent_.Set(index, value);
}
inline void BattlePlayerInfo::add_attprecent(::google::protobuf::int32 value) {
  attprecent_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BattlePlayerInfo::attprecent() const {
  return attprecent_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BattlePlayerInfo::mutable_attprecent() {
  return &attprecent_;
}

// optional int32 level = 8;
inline bool BattlePlayerInfo::has_level() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BattlePlayerInfo::set_has_level() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BattlePlayerInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BattlePlayerInfo::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 BattlePlayerInfo::level() const {
  return level_;
}
inline void BattlePlayerInfo::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// repeated .proto.message.Equip equip_list = 9;
inline int BattlePlayerInfo::equip_list_size() const {
  return equip_list_.size();
}
inline void BattlePlayerInfo::clear_equip_list() {
  equip_list_.Clear();
}
inline const ::proto::message::Equip& BattlePlayerInfo::equip_list(int index) const {
  return equip_list_.Get(index);
}
inline ::proto::message::Equip* BattlePlayerInfo::mutable_equip_list(int index) {
  return equip_list_.Mutable(index);
}
inline ::proto::message::Equip* BattlePlayerInfo::add_equip_list() {
  return equip_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::message::Equip >&
BattlePlayerInfo::equip_list() const {
  return equip_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::message::Equip >*
BattlePlayerInfo::mutable_equip_list() {
  return &equip_list_;
}

// optional int32 career = 10;
inline bool BattlePlayerInfo::has_career() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BattlePlayerInfo::set_has_career() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BattlePlayerInfo::clear_has_career() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BattlePlayerInfo::clear_career() {
  career_ = 0;
  clear_has_career();
}
inline ::google::protobuf::int32 BattlePlayerInfo::career() const {
  return career_;
}
inline void BattlePlayerInfo::set_career(::google::protobuf::int32 value) {
  set_has_career();
  career_ = value;
}

// optional int32 velocity = 11;
inline bool BattlePlayerInfo::has_velocity() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BattlePlayerInfo::set_has_velocity() {
  _has_bits_[0] |= 0x00000400u;
}
inline void BattlePlayerInfo::clear_has_velocity() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void BattlePlayerInfo::clear_velocity() {
  velocity_ = 0;
  clear_has_velocity();
}
inline ::google::protobuf::int32 BattlePlayerInfo::velocity() const {
  return velocity_;
}
inline void BattlePlayerInfo::set_velocity(::google::protobuf::int32 value) {
  set_has_velocity();
  velocity_ = value;
}

// optional int32 titleID = 12;
inline bool BattlePlayerInfo::has_titleid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void BattlePlayerInfo::set_has_titleid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void BattlePlayerInfo::clear_has_titleid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void BattlePlayerInfo::clear_titleid() {
  titleid_ = 0;
  clear_has_titleid();
}
inline ::google::protobuf::int32 BattlePlayerInfo::titleid() const {
  return titleid_;
}
inline void BattlePlayerInfo::set_titleid(::google::protobuf::int32 value) {
  set_has_titleid();
  titleid_ = value;
}

// optional int32 layer = 13;
inline bool BattlePlayerInfo::has_layer() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void BattlePlayerInfo::set_has_layer() {
  _has_bits_[0] |= 0x00001000u;
}
inline void BattlePlayerInfo::clear_has_layer() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void BattlePlayerInfo::clear_layer() {
  layer_ = 0;
  clear_has_layer();
}
inline ::google::protobuf::int32 BattlePlayerInfo::layer() const {
  return layer_;
}
inline void BattlePlayerInfo::set_layer(::google::protobuf::int32 value) {
  set_has_layer();
  layer_ = value;
}

// optional string titlename = 14;
inline bool BattlePlayerInfo::has_titlename() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void BattlePlayerInfo::set_has_titlename() {
  _has_bits_[0] |= 0x00002000u;
}
inline void BattlePlayerInfo::clear_has_titlename() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void BattlePlayerInfo::clear_titlename() {
  if (titlename_ != &::google::protobuf::internal::kEmptyString) {
    titlename_->clear();
  }
  clear_has_titlename();
}
inline const ::std::string& BattlePlayerInfo::titlename() const {
  return *titlename_;
}
inline void BattlePlayerInfo::set_titlename(const ::std::string& value) {
  set_has_titlename();
  if (titlename_ == &::google::protobuf::internal::kEmptyString) {
    titlename_ = new ::std::string;
  }
  titlename_->assign(value);
}
inline void BattlePlayerInfo::set_titlename(const char* value) {
  set_has_titlename();
  if (titlename_ == &::google::protobuf::internal::kEmptyString) {
    titlename_ = new ::std::string;
  }
  titlename_->assign(value);
}
inline void BattlePlayerInfo::set_titlename(const char* value, size_t size) {
  set_has_titlename();
  if (titlename_ == &::google::protobuf::internal::kEmptyString) {
    titlename_ = new ::std::string;
  }
  titlename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BattlePlayerInfo::mutable_titlename() {
  set_has_titlename();
  if (titlename_ == &::google::protobuf::internal::kEmptyString) {
    titlename_ = new ::std::string;
  }
  return titlename_;
}
inline ::std::string* BattlePlayerInfo::release_titlename() {
  clear_has_titlename();
  if (titlename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = titlename_;
    titlename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BattlePlayerInfo::set_allocated_titlename(::std::string* titlename) {
  if (titlename_ != &::google::protobuf::internal::kEmptyString) {
    delete titlename_;
  }
  if (titlename) {
    set_has_titlename();
    titlename_ = titlename;
  } else {
    clear_has_titlename();
    titlename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 titleishide = 15;
inline bool BattlePlayerInfo::has_titleishide() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void BattlePlayerInfo::set_has_titleishide() {
  _has_bits_[0] |= 0x00004000u;
}
inline void BattlePlayerInfo::clear_has_titleishide() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void BattlePlayerInfo::clear_titleishide() {
  titleishide_ = 0;
  clear_has_titleishide();
}
inline ::google::protobuf::int32 BattlePlayerInfo::titleishide() const {
  return titleishide_;
}
inline void BattlePlayerInfo::set_titleishide(::google::protobuf::int32 value) {
  set_has_titleishide();
  titleishide_ = value;
}

// repeated .proto.message.BatSkillInfo skilllist = 16;
inline int BattlePlayerInfo::skilllist_size() const {
  return skilllist_.size();
}
inline void BattlePlayerInfo::clear_skilllist() {
  skilllist_.Clear();
}
inline const ::proto::message::BatSkillInfo& BattlePlayerInfo::skilllist(int index) const {
  return skilllist_.Get(index);
}
inline ::proto::message::BatSkillInfo* BattlePlayerInfo::mutable_skilllist(int index) {
  return skilllist_.Mutable(index);
}
inline ::proto::message::BatSkillInfo* BattlePlayerInfo::add_skilllist() {
  return skilllist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::message::BatSkillInfo >&
BattlePlayerInfo::skilllist() const {
  return skilllist_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::message::BatSkillInfo >*
BattlePlayerInfo::mutable_skilllist() {
  return &skilllist_;
}

// optional uint64 nplayeruuid = 17;
inline bool BattlePlayerInfo::has_nplayeruuid() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void BattlePlayerInfo::set_has_nplayeruuid() {
  _has_bits_[0] |= 0x00010000u;
}
inline void BattlePlayerInfo::clear_has_nplayeruuid() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void BattlePlayerInfo::clear_nplayeruuid() {
  nplayeruuid_ = GOOGLE_ULONGLONG(0);
  clear_has_nplayeruuid();
}
inline ::google::protobuf::uint64 BattlePlayerInfo::nplayeruuid() const {
  return nplayeruuid_;
}
inline void BattlePlayerInfo::set_nplayeruuid(::google::protobuf::uint64 value) {
  set_has_nplayeruuid();
  nplayeruuid_ = value;
}

// optional uint64 nguildid = 18;
inline bool BattlePlayerInfo::has_nguildid() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void BattlePlayerInfo::set_has_nguildid() {
  _has_bits_[0] |= 0x00020000u;
}
inline void BattlePlayerInfo::clear_has_nguildid() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void BattlePlayerInfo::clear_nguildid() {
  nguildid_ = GOOGLE_ULONGLONG(0);
  clear_has_nguildid();
}
inline ::google::protobuf::uint64 BattlePlayerInfo::nguildid() const {
  return nguildid_;
}
inline void BattlePlayerInfo::set_nguildid(::google::protobuf::uint64 value) {
  set_has_nguildid();
  nguildid_ = value;
}

// optional string guildName = 19;
inline bool BattlePlayerInfo::has_guildname() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void BattlePlayerInfo::set_has_guildname() {
  _has_bits_[0] |= 0x00040000u;
}
inline void BattlePlayerInfo::clear_has_guildname() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void BattlePlayerInfo::clear_guildname() {
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    guildname_->clear();
  }
  clear_has_guildname();
}
inline const ::std::string& BattlePlayerInfo::guildname() const {
  return *guildname_;
}
inline void BattlePlayerInfo::set_guildname(const ::std::string& value) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
}
inline void BattlePlayerInfo::set_guildname(const char* value) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
}
inline void BattlePlayerInfo::set_guildname(const char* value, size_t size) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BattlePlayerInfo::mutable_guildname() {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  return guildname_;
}
inline ::std::string* BattlePlayerInfo::release_guildname() {
  clear_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = guildname_;
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BattlePlayerInfo::set_allocated_guildname(::std::string* guildname) {
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    delete guildname_;
  }
  if (guildname) {
    set_has_guildname();
    guildname_ = guildname;
  } else {
    clear_has_guildname();
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 xpenergy = 20;
inline bool BattlePlayerInfo::has_xpenergy() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void BattlePlayerInfo::set_has_xpenergy() {
  _has_bits_[0] |= 0x00080000u;
}
inline void BattlePlayerInfo::clear_has_xpenergy() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void BattlePlayerInfo::clear_xpenergy() {
  xpenergy_ = 0u;
  clear_has_xpenergy();
}
inline ::google::protobuf::uint32 BattlePlayerInfo::xpenergy() const {
  return xpenergy_;
}
inline void BattlePlayerInfo::set_xpenergy(::google::protobuf::uint32 value) {
  set_has_xpenergy();
  xpenergy_ = value;
}

// optional uint32 serverid = 21;
inline bool BattlePlayerInfo::has_serverid() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void BattlePlayerInfo::set_has_serverid() {
  _has_bits_[0] |= 0x00100000u;
}
inline void BattlePlayerInfo::clear_has_serverid() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void BattlePlayerInfo::clear_serverid() {
  serverid_ = 0u;
  clear_has_serverid();
}
inline ::google::protobuf::uint32 BattlePlayerInfo::serverid() const {
  return serverid_;
}
inline void BattlePlayerInfo::set_serverid(::google::protobuf::uint32 value) {
  set_has_serverid();
  serverid_ = value;
}

// optional int32 teamid = 22;
inline bool BattlePlayerInfo::has_teamid() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void BattlePlayerInfo::set_has_teamid() {
  _has_bits_[0] |= 0x00200000u;
}
inline void BattlePlayerInfo::clear_has_teamid() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void BattlePlayerInfo::clear_teamid() {
  teamid_ = 0;
  clear_has_teamid();
}
inline ::google::protobuf::int32 BattlePlayerInfo::teamid() const {
  return teamid_;
}
inline void BattlePlayerInfo::set_teamid(::google::protobuf::int32 value) {
  set_has_teamid();
  teamid_ = value;
}

// optional int32 pvpscore = 23;
inline bool BattlePlayerInfo::has_pvpscore() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void BattlePlayerInfo::set_has_pvpscore() {
  _has_bits_[0] |= 0x00400000u;
}
inline void BattlePlayerInfo::clear_has_pvpscore() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void BattlePlayerInfo::clear_pvpscore() {
  pvpscore_ = 0;
  clear_has_pvpscore();
}
inline ::google::protobuf::int32 BattlePlayerInfo::pvpscore() const {
  return pvpscore_;
}
inline void BattlePlayerInfo::set_pvpscore(::google::protobuf::int32 value) {
  set_has_pvpscore();
  pvpscore_ = value;
}

// optional int32 pvpteam = 24;
inline bool BattlePlayerInfo::has_pvpteam() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void BattlePlayerInfo::set_has_pvpteam() {
  _has_bits_[0] |= 0x00800000u;
}
inline void BattlePlayerInfo::clear_has_pvpteam() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void BattlePlayerInfo::clear_pvpteam() {
  pvpteam_ = 0;
  clear_has_pvpteam();
}
inline ::google::protobuf::int32 BattlePlayerInfo::pvpteam() const {
  return pvpteam_;
}
inline void BattlePlayerInfo::set_pvpteam(::google::protobuf::int32 value) {
  set_has_pvpteam();
  pvpteam_ = value;
}

// optional int32 cur_petid = 25;
inline bool BattlePlayerInfo::has_cur_petid() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void BattlePlayerInfo::set_has_cur_petid() {
  _has_bits_[0] |= 0x01000000u;
}
inline void BattlePlayerInfo::clear_has_cur_petid() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void BattlePlayerInfo::clear_cur_petid() {
  cur_petid_ = 0;
  clear_has_cur_petid();
}
inline ::google::protobuf::int32 BattlePlayerInfo::cur_petid() const {
  return cur_petid_;
}
inline void BattlePlayerInfo::set_cur_petid(::google::protobuf::int32 value) {
  set_has_cur_petid();
  cur_petid_ = value;
}

// optional int32 cur_rideid = 26;
inline bool BattlePlayerInfo::has_cur_rideid() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void BattlePlayerInfo::set_has_cur_rideid() {
  _has_bits_[0] |= 0x02000000u;
}
inline void BattlePlayerInfo::clear_has_cur_rideid() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void BattlePlayerInfo::clear_cur_rideid() {
  cur_rideid_ = 0;
  clear_has_cur_rideid();
}
inline ::google::protobuf::int32 BattlePlayerInfo::cur_rideid() const {
  return cur_rideid_;
}
inline void BattlePlayerInfo::set_cur_rideid(::google::protobuf::int32 value) {
  set_has_cur_rideid();
  cur_rideid_ = value;
}

// optional int32 cur_awakenid = 27;
inline bool BattlePlayerInfo::has_cur_awakenid() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void BattlePlayerInfo::set_has_cur_awakenid() {
  _has_bits_[0] |= 0x04000000u;
}
inline void BattlePlayerInfo::clear_has_cur_awakenid() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void BattlePlayerInfo::clear_cur_awakenid() {
  cur_awakenid_ = 0;
  clear_has_cur_awakenid();
}
inline ::google::protobuf::int32 BattlePlayerInfo::cur_awakenid() const {
  return cur_awakenid_;
}
inline void BattlePlayerInfo::set_cur_awakenid(::google::protobuf::int32 value) {
  set_has_cur_awakenid();
  cur_awakenid_ = value;
}

// optional int32 cur_mercenaryid = 28;
inline bool BattlePlayerInfo::has_cur_mercenaryid() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void BattlePlayerInfo::set_has_cur_mercenaryid() {
  _has_bits_[0] |= 0x08000000u;
}
inline void BattlePlayerInfo::clear_has_cur_mercenaryid() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void BattlePlayerInfo::clear_cur_mercenaryid() {
  cur_mercenaryid_ = 0;
  clear_has_cur_mercenaryid();
}
inline ::google::protobuf::int32 BattlePlayerInfo::cur_mercenaryid() const {
  return cur_mercenaryid_;
}
inline void BattlePlayerInfo::set_cur_mercenaryid(::google::protobuf::int32 value) {
  set_has_cur_mercenaryid();
  cur_mercenaryid_ = value;
}

// optional uint32 nmercenary_linkid = 29;
inline bool BattlePlayerInfo::has_nmercenary_linkid() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void BattlePlayerInfo::set_has_nmercenary_linkid() {
  _has_bits_[0] |= 0x10000000u;
}
inline void BattlePlayerInfo::clear_has_nmercenary_linkid() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void BattlePlayerInfo::clear_nmercenary_linkid() {
  nmercenary_linkid_ = 0u;
  clear_has_nmercenary_linkid();
}
inline ::google::protobuf::uint32 BattlePlayerInfo::nmercenary_linkid() const {
  return nmercenary_linkid_;
}
inline void BattlePlayerInfo::set_nmercenary_linkid(::google::protobuf::uint32 value) {
  set_has_nmercenary_linkid();
  nmercenary_linkid_ = value;
}

// optional uint32 curtp = 30;
inline bool BattlePlayerInfo::has_curtp() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void BattlePlayerInfo::set_has_curtp() {
  _has_bits_[0] |= 0x20000000u;
}
inline void BattlePlayerInfo::clear_has_curtp() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void BattlePlayerInfo::clear_curtp() {
  curtp_ = 0u;
  clear_has_curtp();
}
inline ::google::protobuf::uint32 BattlePlayerInfo::curtp() const {
  return curtp_;
}
inline void BattlePlayerInfo::set_curtp(::google::protobuf::uint32 value) {
  set_has_curtp();
  curtp_ = value;
}

// optional uint32 suitid = 31;
inline bool BattlePlayerInfo::has_suitid() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void BattlePlayerInfo::set_has_suitid() {
  _has_bits_[0] |= 0x40000000u;
}
inline void BattlePlayerInfo::clear_has_suitid() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void BattlePlayerInfo::clear_suitid() {
  suitid_ = 0u;
  clear_has_suitid();
}
inline ::google::protobuf::uint32 BattlePlayerInfo::suitid() const {
  return suitid_;
}
inline void BattlePlayerInfo::set_suitid(::google::protobuf::uint32 value) {
  set_has_suitid();
  suitid_ = value;
}

// optional uint32 pkval = 32;
inline bool BattlePlayerInfo::has_pkval() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void BattlePlayerInfo::set_has_pkval() {
  _has_bits_[0] |= 0x80000000u;
}
inline void BattlePlayerInfo::clear_has_pkval() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void BattlePlayerInfo::clear_pkval() {
  pkval_ = 0u;
  clear_has_pkval();
}
inline ::google::protobuf::uint32 BattlePlayerInfo::pkval() const {
  return pkval_;
}
inline void BattlePlayerInfo::set_pkval(::google::protobuf::uint32 value) {
  set_has_pkval();
  pkval_ = value;
}

// optional uint32 cur_avatarid = 33;
inline bool BattlePlayerInfo::has_cur_avatarid() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void BattlePlayerInfo::set_has_cur_avatarid() {
  _has_bits_[1] |= 0x00000001u;
}
inline void BattlePlayerInfo::clear_has_cur_avatarid() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void BattlePlayerInfo::clear_cur_avatarid() {
  cur_avatarid_ = 0u;
  clear_has_cur_avatarid();
}
inline ::google::protobuf::uint32 BattlePlayerInfo::cur_avatarid() const {
  return cur_avatarid_;
}
inline void BattlePlayerInfo::set_cur_avatarid(::google::protobuf::uint32 value) {
  set_has_cur_avatarid();
  cur_avatarid_ = value;
}

// optional uint32 cur_avatarcolorid = 34;
inline bool BattlePlayerInfo::has_cur_avatarcolorid() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void BattlePlayerInfo::set_has_cur_avatarcolorid() {
  _has_bits_[1] |= 0x00000002u;
}
inline void BattlePlayerInfo::clear_has_cur_avatarcolorid() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void BattlePlayerInfo::clear_cur_avatarcolorid() {
  cur_avatarcolorid_ = 0u;
  clear_has_cur_avatarcolorid();
}
inline ::google::protobuf::uint32 BattlePlayerInfo::cur_avatarcolorid() const {
  return cur_avatarcolorid_;
}
inline void BattlePlayerInfo::set_cur_avatarcolorid(::google::protobuf::uint32 value) {
  set_has_cur_avatarcolorid();
  cur_avatarcolorid_ = value;
}

// optional uint32 attackmode = 35;
inline bool BattlePlayerInfo::has_attackmode() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void BattlePlayerInfo::set_has_attackmode() {
  _has_bits_[1] |= 0x00000004u;
}
inline void BattlePlayerInfo::clear_has_attackmode() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void BattlePlayerInfo::clear_attackmode() {
  attackmode_ = 0u;
  clear_has_attackmode();
}
inline ::google::protobuf::uint32 BattlePlayerInfo::attackmode() const {
  return attackmode_;
}
inline void BattlePlayerInfo::set_attackmode(::google::protobuf::uint32 value) {
  set_has_attackmode();
  attackmode_ = value;
}

// optional uint32 dhlevel = 36;
inline bool BattlePlayerInfo::has_dhlevel() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void BattlePlayerInfo::set_has_dhlevel() {
  _has_bits_[1] |= 0x00000008u;
}
inline void BattlePlayerInfo::clear_has_dhlevel() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void BattlePlayerInfo::clear_dhlevel() {
  dhlevel_ = 0u;
  clear_has_dhlevel();
}
inline ::google::protobuf::uint32 BattlePlayerInfo::dhlevel() const {
  return dhlevel_;
}
inline void BattlePlayerInfo::set_dhlevel(::google::protobuf::uint32 value) {
  set_has_dhlevel();
  dhlevel_ = value;
}

// required uint32 linkid = 37;
inline bool BattlePlayerInfo::has_linkid() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void BattlePlayerInfo::set_has_linkid() {
  _has_bits_[1] |= 0x00000010u;
}
inline void BattlePlayerInfo::clear_has_linkid() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void BattlePlayerInfo::clear_linkid() {
  linkid_ = 0u;
  clear_has_linkid();
}
inline ::google::protobuf::uint32 BattlePlayerInfo::linkid() const {
  return linkid_;
}
inline void BattlePlayerInfo::set_linkid(::google::protobuf::uint32 value) {
  set_has_linkid();
  linkid_ = value;
}

// optional .proto.message.BattleHeadInfo headinfo = 38;
inline bool BattlePlayerInfo::has_headinfo() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void BattlePlayerInfo::set_has_headinfo() {
  _has_bits_[1] |= 0x00000020u;
}
inline void BattlePlayerInfo::clear_has_headinfo() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void BattlePlayerInfo::clear_headinfo() {
  if (headinfo_ != NULL) headinfo_->::proto::message::BattleHeadInfo::Clear();
  clear_has_headinfo();
}
inline const ::proto::message::BattleHeadInfo& BattlePlayerInfo::headinfo() const {
  return headinfo_ != NULL ? *headinfo_ : *default_instance_->headinfo_;
}
inline ::proto::message::BattleHeadInfo* BattlePlayerInfo::mutable_headinfo() {
  set_has_headinfo();
  if (headinfo_ == NULL) headinfo_ = new ::proto::message::BattleHeadInfo;
  return headinfo_;
}
inline ::proto::message::BattleHeadInfo* BattlePlayerInfo::release_headinfo() {
  clear_has_headinfo();
  ::proto::message::BattleHeadInfo* temp = headinfo_;
  headinfo_ = NULL;
  return temp;
}
inline void BattlePlayerInfo::set_allocated_headinfo(::proto::message::BattleHeadInfo* headinfo) {
  delete headinfo_;
  headinfo_ = headinfo;
  if (headinfo) {
    set_has_headinfo();
  } else {
    clear_has_headinfo();
  }
}

// repeated uint32 mercenaryscript = 39;
inline int BattlePlayerInfo::mercenaryscript_size() const {
  return mercenaryscript_.size();
}
inline void BattlePlayerInfo::clear_mercenaryscript() {
  mercenaryscript_.Clear();
}
inline ::google::protobuf::uint32 BattlePlayerInfo::mercenaryscript(int index) const {
  return mercenaryscript_.Get(index);
}
inline void BattlePlayerInfo::set_mercenaryscript(int index, ::google::protobuf::uint32 value) {
  mercenaryscript_.Set(index, value);
}
inline void BattlePlayerInfo::add_mercenaryscript(::google::protobuf::uint32 value) {
  mercenaryscript_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BattlePlayerInfo::mercenaryscript() const {
  return mercenaryscript_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BattlePlayerInfo::mutable_mercenaryscript() {
  return &mercenaryscript_;
}

// repeated uint32 ridescript = 40;
inline int BattlePlayerInfo::ridescript_size() const {
  return ridescript_.size();
}
inline void BattlePlayerInfo::clear_ridescript() {
  ridescript_.Clear();
}
inline ::google::protobuf::uint32 BattlePlayerInfo::ridescript(int index) const {
  return ridescript_.Get(index);
}
inline void BattlePlayerInfo::set_ridescript(int index, ::google::protobuf::uint32 value) {
  ridescript_.Set(index, value);
}
inline void BattlePlayerInfo::add_ridescript(::google::protobuf::uint32 value) {
  ridescript_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BattlePlayerInfo::ridescript() const {
  return ridescript_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BattlePlayerInfo::mutable_ridescript() {
  return &ridescript_;
}

// repeated uint32 awakenscript = 41;
inline int BattlePlayerInfo::awakenscript_size() const {
  return awakenscript_.size();
}
inline void BattlePlayerInfo::clear_awakenscript() {
  awakenscript_.Clear();
}
inline ::google::protobuf::uint32 BattlePlayerInfo::awakenscript(int index) const {
  return awakenscript_.Get(index);
}
inline void BattlePlayerInfo::set_awakenscript(int index, ::google::protobuf::uint32 value) {
  awakenscript_.Set(index, value);
}
inline void BattlePlayerInfo::add_awakenscript(::google::protobuf::uint32 value) {
  awakenscript_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BattlePlayerInfo::awakenscript() const {
  return awakenscript_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BattlePlayerInfo::mutable_awakenscript() {
  return &awakenscript_;
}

// optional uint32 cur_petrank = 42;
inline bool BattlePlayerInfo::has_cur_petrank() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void BattlePlayerInfo::set_has_cur_petrank() {
  _has_bits_[1] |= 0x00000200u;
}
inline void BattlePlayerInfo::clear_has_cur_petrank() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void BattlePlayerInfo::clear_cur_petrank() {
  cur_petrank_ = 0u;
  clear_has_cur_petrank();
}
inline ::google::protobuf::uint32 BattlePlayerInfo::cur_petrank() const {
  return cur_petrank_;
}
inline void BattlePlayerInfo::set_cur_petrank(::google::protobuf::uint32 value) {
  set_has_cur_petrank();
  cur_petrank_ = value;
}

// optional uint32 cur_mercenrank = 43;
inline bool BattlePlayerInfo::has_cur_mercenrank() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void BattlePlayerInfo::set_has_cur_mercenrank() {
  _has_bits_[1] |= 0x00000400u;
}
inline void BattlePlayerInfo::clear_has_cur_mercenrank() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void BattlePlayerInfo::clear_cur_mercenrank() {
  cur_mercenrank_ = 0u;
  clear_has_cur_mercenrank();
}
inline ::google::protobuf::uint32 BattlePlayerInfo::cur_mercenrank() const {
  return cur_mercenrank_;
}
inline void BattlePlayerInfo::set_cur_mercenrank(::google::protobuf::uint32 value) {
  set_has_cur_mercenrank();
  cur_mercenrank_ = value;
}

// optional int32 maxtp = 44;
inline bool BattlePlayerInfo::has_maxtp() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void BattlePlayerInfo::set_has_maxtp() {
  _has_bits_[1] |= 0x00000800u;
}
inline void BattlePlayerInfo::clear_has_maxtp() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void BattlePlayerInfo::clear_maxtp() {
  maxtp_ = 0;
  clear_has_maxtp();
}
inline ::google::protobuf::int32 BattlePlayerInfo::maxtp() const {
  return maxtp_;
}
inline void BattlePlayerInfo::set_maxtp(::google::protobuf::int32 value) {
  set_has_maxtp();
  maxtp_ = value;
}

// optional int32 maxhp = 45;
inline bool BattlePlayerInfo::has_maxhp() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void BattlePlayerInfo::set_has_maxhp() {
  _has_bits_[1] |= 0x00001000u;
}
inline void BattlePlayerInfo::clear_has_maxhp() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void BattlePlayerInfo::clear_maxhp() {
  maxhp_ = 0;
  clear_has_maxhp();
}
inline ::google::protobuf::int32 BattlePlayerInfo::maxhp() const {
  return maxhp_;
}
inline void BattlePlayerInfo::set_maxhp(::google::protobuf::int32 value) {
  set_has_maxhp();
  maxhp_ = value;
}

// optional int32 baseequip = 46;
inline bool BattlePlayerInfo::has_baseequip() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void BattlePlayerInfo::set_has_baseequip() {
  _has_bits_[1] |= 0x00002000u;
}
inline void BattlePlayerInfo::clear_has_baseequip() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void BattlePlayerInfo::clear_baseequip() {
  baseequip_ = 0;
  clear_has_baseequip();
}
inline ::google::protobuf::int32 BattlePlayerInfo::baseequip() const {
  return baseequip_;
}
inline void BattlePlayerInfo::set_baseequip(::google::protobuf::int32 value) {
  set_has_baseequip();
  baseequip_ = value;
}

// -------------------------------------------------------------------

// BattleMercenaryInfo

// required uint32 nmercenaryid = 1;
inline bool BattleMercenaryInfo::has_nmercenaryid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BattleMercenaryInfo::set_has_nmercenaryid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BattleMercenaryInfo::clear_has_nmercenaryid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BattleMercenaryInfo::clear_nmercenaryid() {
  nmercenaryid_ = 0u;
  clear_has_nmercenaryid();
}
inline ::google::protobuf::uint32 BattleMercenaryInfo::nmercenaryid() const {
  return nmercenaryid_;
}
inline void BattleMercenaryInfo::set_nmercenaryid(::google::protobuf::uint32 value) {
  set_has_nmercenaryid();
  nmercenaryid_ = value;
}

// required uint32 nTableid = 2;
inline bool BattleMercenaryInfo::has_ntableid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BattleMercenaryInfo::set_has_ntableid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BattleMercenaryInfo::clear_has_ntableid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BattleMercenaryInfo::clear_ntableid() {
  ntableid_ = 0u;
  clear_has_ntableid();
}
inline ::google::protobuf::uint32 BattleMercenaryInfo::ntableid() const {
  return ntableid_;
}
inline void BattleMercenaryInfo::set_ntableid(::google::protobuf::uint32 value) {
  set_has_ntableid();
  ntableid_ = value;
}

// required .proto.message.Point3D pt = 3;
inline bool BattleMercenaryInfo::has_pt() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BattleMercenaryInfo::set_has_pt() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BattleMercenaryInfo::clear_has_pt() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BattleMercenaryInfo::clear_pt() {
  if (pt_ != NULL) pt_->::proto::message::Point3D::Clear();
  clear_has_pt();
}
inline const ::proto::message::Point3D& BattleMercenaryInfo::pt() const {
  return pt_ != NULL ? *pt_ : *default_instance_->pt_;
}
inline ::proto::message::Point3D* BattleMercenaryInfo::mutable_pt() {
  set_has_pt();
  if (pt_ == NULL) pt_ = new ::proto::message::Point3D;
  return pt_;
}
inline ::proto::message::Point3D* BattleMercenaryInfo::release_pt() {
  clear_has_pt();
  ::proto::message::Point3D* temp = pt_;
  pt_ = NULL;
  return temp;
}
inline void BattleMercenaryInfo::set_allocated_pt(::proto::message::Point3D* pt) {
  delete pt_;
  pt_ = pt;
  if (pt) {
    set_has_pt();
  } else {
    clear_has_pt();
  }
}

// required float dir = 4;
inline bool BattleMercenaryInfo::has_dir() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BattleMercenaryInfo::set_has_dir() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BattleMercenaryInfo::clear_has_dir() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BattleMercenaryInfo::clear_dir() {
  dir_ = 0;
  clear_has_dir();
}
inline float BattleMercenaryInfo::dir() const {
  return dir_;
}
inline void BattleMercenaryInfo::set_dir(float value) {
  set_has_dir();
  dir_ = value;
}

// optional string name = 5;
inline bool BattleMercenaryInfo::has_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BattleMercenaryInfo::set_has_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BattleMercenaryInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BattleMercenaryInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& BattleMercenaryInfo::name() const {
  return *name_;
}
inline void BattleMercenaryInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void BattleMercenaryInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void BattleMercenaryInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BattleMercenaryInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* BattleMercenaryInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BattleMercenaryInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 curhp = 6;
inline bool BattleMercenaryInfo::has_curhp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BattleMercenaryInfo::set_has_curhp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BattleMercenaryInfo::clear_has_curhp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BattleMercenaryInfo::clear_curhp() {
  curhp_ = GOOGLE_LONGLONG(0);
  clear_has_curhp();
}
inline ::google::protobuf::int64 BattleMercenaryInfo::curhp() const {
  return curhp_;
}
inline void BattleMercenaryInfo::set_curhp(::google::protobuf::int64 value) {
  set_has_curhp();
  curhp_ = value;
}

// repeated int32 attvalue = 7;
inline int BattleMercenaryInfo::attvalue_size() const {
  return attvalue_.size();
}
inline void BattleMercenaryInfo::clear_attvalue() {
  attvalue_.Clear();
}
inline ::google::protobuf::int32 BattleMercenaryInfo::attvalue(int index) const {
  return attvalue_.Get(index);
}
inline void BattleMercenaryInfo::set_attvalue(int index, ::google::protobuf::int32 value) {
  attvalue_.Set(index, value);
}
inline void BattleMercenaryInfo::add_attvalue(::google::protobuf::int32 value) {
  attvalue_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BattleMercenaryInfo::attvalue() const {
  return attvalue_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BattleMercenaryInfo::mutable_attvalue() {
  return &attvalue_;
}

// optional int32 level = 8;
inline bool BattleMercenaryInfo::has_level() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BattleMercenaryInfo::set_has_level() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BattleMercenaryInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BattleMercenaryInfo::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 BattleMercenaryInfo::level() const {
  return level_;
}
inline void BattleMercenaryInfo::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 velocity = 9;
inline bool BattleMercenaryInfo::has_velocity() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BattleMercenaryInfo::set_has_velocity() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BattleMercenaryInfo::clear_has_velocity() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BattleMercenaryInfo::clear_velocity() {
  velocity_ = 0;
  clear_has_velocity();
}
inline ::google::protobuf::int32 BattleMercenaryInfo::velocity() const {
  return velocity_;
}
inline void BattleMercenaryInfo::set_velocity(::google::protobuf::int32 value) {
  set_has_velocity();
  velocity_ = value;
}

// optional int32 layer = 10;
inline bool BattleMercenaryInfo::has_layer() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BattleMercenaryInfo::set_has_layer() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BattleMercenaryInfo::clear_has_layer() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BattleMercenaryInfo::clear_layer() {
  layer_ = 0;
  clear_has_layer();
}
inline ::google::protobuf::int32 BattleMercenaryInfo::layer() const {
  return layer_;
}
inline void BattleMercenaryInfo::set_layer(::google::protobuf::int32 value) {
  set_has_layer();
  layer_ = value;
}

// optional int32 ncampid = 11;
inline bool BattleMercenaryInfo::has_ncampid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BattleMercenaryInfo::set_has_ncampid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void BattleMercenaryInfo::clear_has_ncampid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void BattleMercenaryInfo::clear_ncampid() {
  ncampid_ = 0;
  clear_has_ncampid();
}
inline ::google::protobuf::int32 BattleMercenaryInfo::ncampid() const {
  return ncampid_;
}
inline void BattleMercenaryInfo::set_ncampid(::google::protobuf::int32 value) {
  set_has_ncampid();
  ncampid_ = value;
}

// repeated int32 skilllist = 12;
inline int BattleMercenaryInfo::skilllist_size() const {
  return skilllist_.size();
}
inline void BattleMercenaryInfo::clear_skilllist() {
  skilllist_.Clear();
}
inline ::google::protobuf::int32 BattleMercenaryInfo::skilllist(int index) const {
  return skilllist_.Get(index);
}
inline void BattleMercenaryInfo::set_skilllist(int index, ::google::protobuf::int32 value) {
  skilllist_.Set(index, value);
}
inline void BattleMercenaryInfo::add_skilllist(::google::protobuf::int32 value) {
  skilllist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BattleMercenaryInfo::skilllist() const {
  return skilllist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BattleMercenaryInfo::mutable_skilllist() {
  return &skilllist_;
}

// optional int32 ranking = 13;
inline bool BattleMercenaryInfo::has_ranking() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void BattleMercenaryInfo::set_has_ranking() {
  _has_bits_[0] |= 0x00001000u;
}
inline void BattleMercenaryInfo::clear_has_ranking() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void BattleMercenaryInfo::clear_ranking() {
  ranking_ = 0;
  clear_has_ranking();
}
inline ::google::protobuf::int32 BattleMercenaryInfo::ranking() const {
  return ranking_;
}
inline void BattleMercenaryInfo::set_ranking(::google::protobuf::int32 value) {
  set_has_ranking();
  ranking_ = value;
}

// -------------------------------------------------------------------

// BattleSingleHeadInfo

// optional int32 ntype = 1;
inline bool BattleSingleHeadInfo::has_ntype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BattleSingleHeadInfo::set_has_ntype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BattleSingleHeadInfo::clear_has_ntype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BattleSingleHeadInfo::clear_ntype() {
  ntype_ = 0;
  clear_has_ntype();
}
inline ::google::protobuf::int32 BattleSingleHeadInfo::ntype() const {
  return ntype_;
}
inline void BattleSingleHeadInfo::set_ntype(::google::protobuf::int32 value) {
  set_has_ntype();
  ntype_ = value;
}

// optional int32 plyid = 2;
inline bool BattleSingleHeadInfo::has_plyid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BattleSingleHeadInfo::set_has_plyid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BattleSingleHeadInfo::clear_has_plyid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BattleSingleHeadInfo::clear_plyid() {
  plyid_ = 0;
  clear_has_plyid();
}
inline ::google::protobuf::int32 BattleSingleHeadInfo::plyid() const {
  return plyid_;
}
inline void BattleSingleHeadInfo::set_plyid(::google::protobuf::int32 value) {
  set_has_plyid();
  plyid_ = value;
}

// optional int32 param1 = 3;
inline bool BattleSingleHeadInfo::has_param1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BattleSingleHeadInfo::set_has_param1() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BattleSingleHeadInfo::clear_has_param1() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BattleSingleHeadInfo::clear_param1() {
  param1_ = 0;
  clear_has_param1();
}
inline ::google::protobuf::int32 BattleSingleHeadInfo::param1() const {
  return param1_;
}
inline void BattleSingleHeadInfo::set_param1(::google::protobuf::int32 value) {
  set_has_param1();
  param1_ = value;
}

// optional int32 param2 = 4;
inline bool BattleSingleHeadInfo::has_param2() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BattleSingleHeadInfo::set_has_param2() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BattleSingleHeadInfo::clear_has_param2() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BattleSingleHeadInfo::clear_param2() {
  param2_ = 0;
  clear_has_param2();
}
inline ::google::protobuf::int32 BattleSingleHeadInfo::param2() const {
  return param2_;
}
inline void BattleSingleHeadInfo::set_param2(::google::protobuf::int32 value) {
  set_has_param2();
  param2_ = value;
}

// optional int64 param3 = 5;
inline bool BattleSingleHeadInfo::has_param3() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BattleSingleHeadInfo::set_has_param3() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BattleSingleHeadInfo::clear_has_param3() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BattleSingleHeadInfo::clear_param3() {
  param3_ = GOOGLE_LONGLONG(0);
  clear_has_param3();
}
inline ::google::protobuf::int64 BattleSingleHeadInfo::param3() const {
  return param3_;
}
inline void BattleSingleHeadInfo::set_param3(::google::protobuf::int64 value) {
  set_has_param3();
  param3_ = value;
}

// optional string param4 = 6;
inline bool BattleSingleHeadInfo::has_param4() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BattleSingleHeadInfo::set_has_param4() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BattleSingleHeadInfo::clear_has_param4() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BattleSingleHeadInfo::clear_param4() {
  if (param4_ != &::google::protobuf::internal::kEmptyString) {
    param4_->clear();
  }
  clear_has_param4();
}
inline const ::std::string& BattleSingleHeadInfo::param4() const {
  return *param4_;
}
inline void BattleSingleHeadInfo::set_param4(const ::std::string& value) {
  set_has_param4();
  if (param4_ == &::google::protobuf::internal::kEmptyString) {
    param4_ = new ::std::string;
  }
  param4_->assign(value);
}
inline void BattleSingleHeadInfo::set_param4(const char* value) {
  set_has_param4();
  if (param4_ == &::google::protobuf::internal::kEmptyString) {
    param4_ = new ::std::string;
  }
  param4_->assign(value);
}
inline void BattleSingleHeadInfo::set_param4(const char* value, size_t size) {
  set_has_param4();
  if (param4_ == &::google::protobuf::internal::kEmptyString) {
    param4_ = new ::std::string;
  }
  param4_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BattleSingleHeadInfo::mutable_param4() {
  set_has_param4();
  if (param4_ == &::google::protobuf::internal::kEmptyString) {
    param4_ = new ::std::string;
  }
  return param4_;
}
inline ::std::string* BattleSingleHeadInfo::release_param4() {
  clear_has_param4();
  if (param4_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = param4_;
    param4_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BattleSingleHeadInfo::set_allocated_param4(::std::string* param4) {
  if (param4_ != &::google::protobuf::internal::kEmptyString) {
    delete param4_;
  }
  if (param4) {
    set_has_param4();
    param4_ = param4;
  } else {
    clear_has_param4();
    param4_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// BattleHeadInfo

// repeated .proto.message.BattleSingleHeadInfo infolist = 1;
inline int BattleHeadInfo::infolist_size() const {
  return infolist_.size();
}
inline void BattleHeadInfo::clear_infolist() {
  infolist_.Clear();
}
inline const ::proto::message::BattleSingleHeadInfo& BattleHeadInfo::infolist(int index) const {
  return infolist_.Get(index);
}
inline ::proto::message::BattleSingleHeadInfo* BattleHeadInfo::mutable_infolist(int index) {
  return infolist_.Mutable(index);
}
inline ::proto::message::BattleSingleHeadInfo* BattleHeadInfo::add_infolist() {
  return infolist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::message::BattleSingleHeadInfo >&
BattleHeadInfo::infolist() const {
  return infolist_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::message::BattleSingleHeadInfo >*
BattleHeadInfo::mutable_infolist() {
  return &infolist_;
}

// -------------------------------------------------------------------

// BattleBoatInfo

// optional int32 boatid = 1;
inline bool BattleBoatInfo::has_boatid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BattleBoatInfo::set_has_boatid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BattleBoatInfo::clear_has_boatid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BattleBoatInfo::clear_boatid() {
  boatid_ = 0;
  clear_has_boatid();
}
inline ::google::protobuf::int32 BattleBoatInfo::boatid() const {
  return boatid_;
}
inline void BattleBoatInfo::set_boatid(::google::protobuf::int32 value) {
  set_has_boatid();
  boatid_ = value;
}

// optional int32 skinid = 2;
inline bool BattleBoatInfo::has_skinid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BattleBoatInfo::set_has_skinid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BattleBoatInfo::clear_has_skinid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BattleBoatInfo::clear_skinid() {
  skinid_ = 0;
  clear_has_skinid();
}
inline ::google::protobuf::int32 BattleBoatInfo::skinid() const {
  return skinid_;
}
inline void BattleBoatInfo::set_skinid(::google::protobuf::int32 value) {
  set_has_skinid();
  skinid_ = value;
}

// repeated int32 landskill = 3;
inline int BattleBoatInfo::landskill_size() const {
  return landskill_.size();
}
inline void BattleBoatInfo::clear_landskill() {
  landskill_.Clear();
}
inline ::google::protobuf::int32 BattleBoatInfo::landskill(int index) const {
  return landskill_.Get(index);
}
inline void BattleBoatInfo::set_landskill(int index, ::google::protobuf::int32 value) {
  landskill_.Set(index, value);
}
inline void BattleBoatInfo::add_landskill(::google::protobuf::int32 value) {
  landskill_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BattleBoatInfo::landskill() const {
  return landskill_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BattleBoatInfo::mutable_landskill() {
  return &landskill_;
}

// repeated int32 seaskill = 4;
inline int BattleBoatInfo::seaskill_size() const {
  return seaskill_.size();
}
inline void BattleBoatInfo::clear_seaskill() {
  seaskill_.Clear();
}
inline ::google::protobuf::int32 BattleBoatInfo::seaskill(int index) const {
  return seaskill_.Get(index);
}
inline void BattleBoatInfo::set_seaskill(int index, ::google::protobuf::int32 value) {
  seaskill_.Set(index, value);
}
inline void BattleBoatInfo::add_seaskill(::google::protobuf::int32 value) {
  seaskill_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BattleBoatInfo::seaskill() const {
  return seaskill_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BattleBoatInfo::mutable_seaskill() {
  return &seaskill_;
}

// -------------------------------------------------------------------

// MatchPlayerInfo

// optional int32 iScore = 1;
inline bool MatchPlayerInfo::has_iscore() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MatchPlayerInfo::set_has_iscore() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MatchPlayerInfo::clear_has_iscore() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MatchPlayerInfo::clear_iscore() {
  iscore_ = 0;
  clear_has_iscore();
}
inline ::google::protobuf::int32 MatchPlayerInfo::iscore() const {
  return iscore_;
}
inline void MatchPlayerInfo::set_iscore(::google::protobuf::int32 value) {
  set_has_iscore();
  iscore_ = value;
}

// optional int32 iMatchScore = 2;
inline bool MatchPlayerInfo::has_imatchscore() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MatchPlayerInfo::set_has_imatchscore() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MatchPlayerInfo::clear_has_imatchscore() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MatchPlayerInfo::clear_imatchscore() {
  imatchscore_ = 0;
  clear_has_imatchscore();
}
inline ::google::protobuf::int32 MatchPlayerInfo::imatchscore() const {
  return imatchscore_;
}
inline void MatchPlayerInfo::set_imatchscore(::google::protobuf::int32 value) {
  set_has_imatchscore();
  imatchscore_ = value;
}

// optional .proto.message.BattlePlayerInfo sPlyInfo = 3;
inline bool MatchPlayerInfo::has_splyinfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MatchPlayerInfo::set_has_splyinfo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MatchPlayerInfo::clear_has_splyinfo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MatchPlayerInfo::clear_splyinfo() {
  if (splyinfo_ != NULL) splyinfo_->::proto::message::BattlePlayerInfo::Clear();
  clear_has_splyinfo();
}
inline const ::proto::message::BattlePlayerInfo& MatchPlayerInfo::splyinfo() const {
  return splyinfo_ != NULL ? *splyinfo_ : *default_instance_->splyinfo_;
}
inline ::proto::message::BattlePlayerInfo* MatchPlayerInfo::mutable_splyinfo() {
  set_has_splyinfo();
  if (splyinfo_ == NULL) splyinfo_ = new ::proto::message::BattlePlayerInfo;
  return splyinfo_;
}
inline ::proto::message::BattlePlayerInfo* MatchPlayerInfo::release_splyinfo() {
  clear_has_splyinfo();
  ::proto::message::BattlePlayerInfo* temp = splyinfo_;
  splyinfo_ = NULL;
  return temp;
}
inline void MatchPlayerInfo::set_allocated_splyinfo(::proto::message::BattlePlayerInfo* splyinfo) {
  delete splyinfo_;
  splyinfo_ = splyinfo;
  if (splyinfo) {
    set_has_splyinfo();
  } else {
    clear_has_splyinfo();
  }
}

// -------------------------------------------------------------------

// WolrdBossSaledItem

// optional .proto.message.IDNum sItemInfo = 1;
inline bool WolrdBossSaledItem::has_siteminfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WolrdBossSaledItem::set_has_siteminfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WolrdBossSaledItem::clear_has_siteminfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WolrdBossSaledItem::clear_siteminfo() {
  if (siteminfo_ != NULL) siteminfo_->::proto::message::IDNum::Clear();
  clear_has_siteminfo();
}
inline const ::proto::message::IDNum& WolrdBossSaledItem::siteminfo() const {
  return siteminfo_ != NULL ? *siteminfo_ : *default_instance_->siteminfo_;
}
inline ::proto::message::IDNum* WolrdBossSaledItem::mutable_siteminfo() {
  set_has_siteminfo();
  if (siteminfo_ == NULL) siteminfo_ = new ::proto::message::IDNum;
  return siteminfo_;
}
inline ::proto::message::IDNum* WolrdBossSaledItem::release_siteminfo() {
  clear_has_siteminfo();
  ::proto::message::IDNum* temp = siteminfo_;
  siteminfo_ = NULL;
  return temp;
}
inline void WolrdBossSaledItem::set_allocated_siteminfo(::proto::message::IDNum* siteminfo) {
  delete siteminfo_;
  siteminfo_ = siteminfo;
  if (siteminfo) {
    set_has_siteminfo();
  } else {
    clear_has_siteminfo();
  }
}

// optional string uiPlayerName = 2;
inline bool WolrdBossSaledItem::has_uiplayername() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WolrdBossSaledItem::set_has_uiplayername() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WolrdBossSaledItem::clear_has_uiplayername() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WolrdBossSaledItem::clear_uiplayername() {
  if (uiplayername_ != &::google::protobuf::internal::kEmptyString) {
    uiplayername_->clear();
  }
  clear_has_uiplayername();
}
inline const ::std::string& WolrdBossSaledItem::uiplayername() const {
  return *uiplayername_;
}
inline void WolrdBossSaledItem::set_uiplayername(const ::std::string& value) {
  set_has_uiplayername();
  if (uiplayername_ == &::google::protobuf::internal::kEmptyString) {
    uiplayername_ = new ::std::string;
  }
  uiplayername_->assign(value);
}
inline void WolrdBossSaledItem::set_uiplayername(const char* value) {
  set_has_uiplayername();
  if (uiplayername_ == &::google::protobuf::internal::kEmptyString) {
    uiplayername_ = new ::std::string;
  }
  uiplayername_->assign(value);
}
inline void WolrdBossSaledItem::set_uiplayername(const char* value, size_t size) {
  set_has_uiplayername();
  if (uiplayername_ == &::google::protobuf::internal::kEmptyString) {
    uiplayername_ = new ::std::string;
  }
  uiplayername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WolrdBossSaledItem::mutable_uiplayername() {
  set_has_uiplayername();
  if (uiplayername_ == &::google::protobuf::internal::kEmptyString) {
    uiplayername_ = new ::std::string;
  }
  return uiplayername_;
}
inline ::std::string* WolrdBossSaledItem::release_uiplayername() {
  clear_has_uiplayername();
  if (uiplayername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uiplayername_;
    uiplayername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void WolrdBossSaledItem::set_allocated_uiplayername(::std::string* uiplayername) {
  if (uiplayername_ != &::google::protobuf::internal::kEmptyString) {
    delete uiplayername_;
  }
  if (uiplayername) {
    set_has_uiplayername();
    uiplayername_ = uiplayername;
  } else {
    clear_has_uiplayername();
    uiplayername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 uiBossId = 3;
inline bool WolrdBossSaledItem::has_uibossid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WolrdBossSaledItem::set_has_uibossid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WolrdBossSaledItem::clear_has_uibossid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WolrdBossSaledItem::clear_uibossid() {
  uibossid_ = 0u;
  clear_has_uibossid();
}
inline ::google::protobuf::uint32 WolrdBossSaledItem::uibossid() const {
  return uibossid_;
}
inline void WolrdBossSaledItem::set_uibossid(::google::protobuf::uint32 value) {
  set_has_uibossid();
  uibossid_ = value;
}

// optional uint32 uiPrice = 4;
inline bool WolrdBossSaledItem::has_uiprice() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WolrdBossSaledItem::set_has_uiprice() {
  _has_bits_[0] |= 0x00000008u;
}
inline void WolrdBossSaledItem::clear_has_uiprice() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void WolrdBossSaledItem::clear_uiprice() {
  uiprice_ = 0u;
  clear_has_uiprice();
}
inline ::google::protobuf::uint32 WolrdBossSaledItem::uiprice() const {
  return uiprice_;
}
inline void WolrdBossSaledItem::set_uiprice(::google::protobuf::uint32 value) {
  set_has_uiprice();
  uiprice_ = value;
}

// optional uint64 uiPlayerUUID = 5;
inline bool WolrdBossSaledItem::has_uiplayeruuid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void WolrdBossSaledItem::set_has_uiplayeruuid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void WolrdBossSaledItem::clear_has_uiplayeruuid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void WolrdBossSaledItem::clear_uiplayeruuid() {
  uiplayeruuid_ = GOOGLE_ULONGLONG(0);
  clear_has_uiplayeruuid();
}
inline ::google::protobuf::uint64 WolrdBossSaledItem::uiplayeruuid() const {
  return uiplayeruuid_;
}
inline void WolrdBossSaledItem::set_uiplayeruuid(::google::protobuf::uint64 value) {
  set_has_uiplayeruuid();
  uiplayeruuid_ = value;
}

// -------------------------------------------------------------------

// OfflineDataDetail

// repeated int32 playerskill = 1;
inline int OfflineDataDetail::playerskill_size() const {
  return playerskill_.size();
}
inline void OfflineDataDetail::clear_playerskill() {
  playerskill_.Clear();
}
inline ::google::protobuf::int32 OfflineDataDetail::playerskill(int index) const {
  return playerskill_.Get(index);
}
inline void OfflineDataDetail::set_playerskill(int index, ::google::protobuf::int32 value) {
  playerskill_.Set(index, value);
}
inline void OfflineDataDetail::add_playerskill(::google::protobuf::int32 value) {
  playerskill_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
OfflineDataDetail::playerskill() const {
  return playerskill_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
OfflineDataDetail::mutable_playerskill() {
  return &playerskill_;
}

// optional .proto.message.PlayerEffect playeratt = 2;
inline bool OfflineDataDetail::has_playeratt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OfflineDataDetail::set_has_playeratt() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OfflineDataDetail::clear_has_playeratt() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OfflineDataDetail::clear_playeratt() {
  if (playeratt_ != NULL) playeratt_->::proto::message::PlayerEffect::Clear();
  clear_has_playeratt();
}
inline const ::proto::message::PlayerEffect& OfflineDataDetail::playeratt() const {
  return playeratt_ != NULL ? *playeratt_ : *default_instance_->playeratt_;
}
inline ::proto::message::PlayerEffect* OfflineDataDetail::mutable_playeratt() {
  set_has_playeratt();
  if (playeratt_ == NULL) playeratt_ = new ::proto::message::PlayerEffect;
  return playeratt_;
}
inline ::proto::message::PlayerEffect* OfflineDataDetail::release_playeratt() {
  clear_has_playeratt();
  ::proto::message::PlayerEffect* temp = playeratt_;
  playeratt_ = NULL;
  return temp;
}
inline void OfflineDataDetail::set_allocated_playeratt(::proto::message::PlayerEffect* playeratt) {
  delete playeratt_;
  playeratt_ = playeratt;
  if (playeratt) {
    set_has_playeratt();
  } else {
    clear_has_playeratt();
  }
}

// optional int32 artifactid = 3;
inline bool OfflineDataDetail::has_artifactid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OfflineDataDetail::set_has_artifactid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OfflineDataDetail::clear_has_artifactid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OfflineDataDetail::clear_artifactid() {
  artifactid_ = 0;
  clear_has_artifactid();
}
inline ::google::protobuf::int32 OfflineDataDetail::artifactid() const {
  return artifactid_;
}
inline void OfflineDataDetail::set_artifactid(::google::protobuf::int32 value) {
  set_has_artifactid();
  artifactid_ = value;
}

// repeated int32 artifactskill = 4;
inline int OfflineDataDetail::artifactskill_size() const {
  return artifactskill_.size();
}
inline void OfflineDataDetail::clear_artifactskill() {
  artifactskill_.Clear();
}
inline ::google::protobuf::int32 OfflineDataDetail::artifactskill(int index) const {
  return artifactskill_.Get(index);
}
inline void OfflineDataDetail::set_artifactskill(int index, ::google::protobuf::int32 value) {
  artifactskill_.Set(index, value);
}
inline void OfflineDataDetail::add_artifactskill(::google::protobuf::int32 value) {
  artifactskill_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
OfflineDataDetail::artifactskill() const {
  return artifactskill_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
OfflineDataDetail::mutable_artifactskill() {
  return &artifactskill_;
}

// optional int32 petid = 5;
inline bool OfflineDataDetail::has_petid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OfflineDataDetail::set_has_petid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OfflineDataDetail::clear_has_petid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OfflineDataDetail::clear_petid() {
  petid_ = 0;
  clear_has_petid();
}
inline ::google::protobuf::int32 OfflineDataDetail::petid() const {
  return petid_;
}
inline void OfflineDataDetail::set_petid(::google::protobuf::int32 value) {
  set_has_petid();
  petid_ = value;
}

// optional int32 boatid = 6;
inline bool OfflineDataDetail::has_boatid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OfflineDataDetail::set_has_boatid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OfflineDataDetail::clear_has_boatid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OfflineDataDetail::clear_boatid() {
  boatid_ = 0;
  clear_has_boatid();
}
inline ::google::protobuf::int32 OfflineDataDetail::boatid() const {
  return boatid_;
}
inline void OfflineDataDetail::set_boatid(::google::protobuf::int32 value) {
  set_has_boatid();
  boatid_ = value;
}

// optional int32 boatskin = 7;
inline bool OfflineDataDetail::has_boatskin() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void OfflineDataDetail::set_has_boatskin() {
  _has_bits_[0] |= 0x00000040u;
}
inline void OfflineDataDetail::clear_has_boatskin() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void OfflineDataDetail::clear_boatskin() {
  boatskin_ = 0;
  clear_has_boatskin();
}
inline ::google::protobuf::int32 OfflineDataDetail::boatskin() const {
  return boatskin_;
}
inline void OfflineDataDetail::set_boatskin(::google::protobuf::int32 value) {
  set_has_boatskin();
  boatskin_ = value;
}

// repeated int32 boatskill = 8;
inline int OfflineDataDetail::boatskill_size() const {
  return boatskill_.size();
}
inline void OfflineDataDetail::clear_boatskill() {
  boatskill_.Clear();
}
inline ::google::protobuf::int32 OfflineDataDetail::boatskill(int index) const {
  return boatskill_.Get(index);
}
inline void OfflineDataDetail::set_boatskill(int index, ::google::protobuf::int32 value) {
  boatskill_.Set(index, value);
}
inline void OfflineDataDetail::add_boatskill(::google::protobuf::int32 value) {
  boatskill_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
OfflineDataDetail::boatskill() const {
  return boatskill_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
OfflineDataDetail::mutable_boatskill() {
  return &boatskill_;
}

// optional int32 awakenid = 9;
inline bool OfflineDataDetail::has_awakenid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void OfflineDataDetail::set_has_awakenid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void OfflineDataDetail::clear_has_awakenid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void OfflineDataDetail::clear_awakenid() {
  awakenid_ = 0;
  clear_has_awakenid();
}
inline ::google::protobuf::int32 OfflineDataDetail::awakenid() const {
  return awakenid_;
}
inline void OfflineDataDetail::set_awakenid(::google::protobuf::int32 value) {
  set_has_awakenid();
  awakenid_ = value;
}

// optional int32 warlordid = 10;
inline bool OfflineDataDetail::has_warlordid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void OfflineDataDetail::set_has_warlordid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void OfflineDataDetail::clear_has_warlordid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void OfflineDataDetail::clear_warlordid() {
  warlordid_ = 0;
  clear_has_warlordid();
}
inline ::google::protobuf::int32 OfflineDataDetail::warlordid() const {
  return warlordid_;
}
inline void OfflineDataDetail::set_warlordid(::google::protobuf::int32 value) {
  set_has_warlordid();
  warlordid_ = value;
}

// optional int32 fightvalue = 11;
inline bool OfflineDataDetail::has_fightvalue() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void OfflineDataDetail::set_has_fightvalue() {
  _has_bits_[0] |= 0x00000400u;
}
inline void OfflineDataDetail::clear_has_fightvalue() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void OfflineDataDetail::clear_fightvalue() {
  fightvalue_ = 0;
  clear_has_fightvalue();
}
inline ::google::protobuf::int32 OfflineDataDetail::fightvalue() const {
  return fightvalue_;
}
inline void OfflineDataDetail::set_fightvalue(::google::protobuf::int32 value) {
  set_has_fightvalue();
  fightvalue_ = value;
}

// optional int32 skinid = 12;
inline bool OfflineDataDetail::has_skinid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void OfflineDataDetail::set_has_skinid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void OfflineDataDetail::clear_has_skinid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void OfflineDataDetail::clear_skinid() {
  skinid_ = 0;
  clear_has_skinid();
}
inline ::google::protobuf::int32 OfflineDataDetail::skinid() const {
  return skinid_;
}
inline void OfflineDataDetail::set_skinid(::google::protobuf::int32 value) {
  set_has_skinid();
  skinid_ = value;
}

// -------------------------------------------------------------------

// MailToMap

// optional uint32 dropid = 1;
inline bool MailToMap::has_dropid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MailToMap::set_has_dropid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MailToMap::clear_has_dropid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MailToMap::clear_dropid() {
  dropid_ = 0u;
  clear_has_dropid();
}
inline ::google::protobuf::uint32 MailToMap::dropid() const {
  return dropid_;
}
inline void MailToMap::set_dropid(::google::protobuf::uint32 value) {
  set_has_dropid();
  dropid_ = value;
}

// optional int32 itemid = 2;
inline bool MailToMap::has_itemid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MailToMap::set_has_itemid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MailToMap::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MailToMap::clear_itemid() {
  itemid_ = 0;
  clear_has_itemid();
}
inline ::google::protobuf::int32 MailToMap::itemid() const {
  return itemid_;
}
inline void MailToMap::set_itemid(::google::protobuf::int32 value) {
  set_has_itemid();
  itemid_ = value;
}

// optional int32 itemnum = 3;
inline bool MailToMap::has_itemnum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MailToMap::set_has_itemnum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MailToMap::clear_has_itemnum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MailToMap::clear_itemnum() {
  itemnum_ = 0;
  clear_has_itemnum();
}
inline ::google::protobuf::int32 MailToMap::itemnum() const {
  return itemnum_;
}
inline void MailToMap::set_itemnum(::google::protobuf::int32 value) {
  set_has_itemnum();
  itemnum_ = value;
}

// repeated uint64 rolelist = 4;
inline int MailToMap::rolelist_size() const {
  return rolelist_.size();
}
inline void MailToMap::clear_rolelist() {
  rolelist_.Clear();
}
inline ::google::protobuf::uint64 MailToMap::rolelist(int index) const {
  return rolelist_.Get(index);
}
inline void MailToMap::set_rolelist(int index, ::google::protobuf::uint64 value) {
  rolelist_.Set(index, value);
}
inline void MailToMap::add_rolelist(::google::protobuf::uint64 value) {
  rolelist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
MailToMap::rolelist() const {
  return rolelist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
MailToMap::mutable_rolelist() {
  return &rolelist_;
}

// optional uint32 mailid = 5;
inline bool MailToMap::has_mailid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MailToMap::set_has_mailid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MailToMap::clear_has_mailid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MailToMap::clear_mailid() {
  mailid_ = 0u;
  clear_has_mailid();
}
inline ::google::protobuf::uint32 MailToMap::mailid() const {
  return mailid_;
}
inline void MailToMap::set_mailid(::google::protobuf::uint32 value) {
  set_has_mailid();
  mailid_ = value;
}

// optional string context = 6;
inline bool MailToMap::has_context() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MailToMap::set_has_context() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MailToMap::clear_has_context() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MailToMap::clear_context() {
  if (context_ != &::google::protobuf::internal::kEmptyString) {
    context_->clear();
  }
  clear_has_context();
}
inline const ::std::string& MailToMap::context() const {
  return *context_;
}
inline void MailToMap::set_context(const ::std::string& value) {
  set_has_context();
  if (context_ == &::google::protobuf::internal::kEmptyString) {
    context_ = new ::std::string;
  }
  context_->assign(value);
}
inline void MailToMap::set_context(const char* value) {
  set_has_context();
  if (context_ == &::google::protobuf::internal::kEmptyString) {
    context_ = new ::std::string;
  }
  context_->assign(value);
}
inline void MailToMap::set_context(const char* value, size_t size) {
  set_has_context();
  if (context_ == &::google::protobuf::internal::kEmptyString) {
    context_ = new ::std::string;
  }
  context_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MailToMap::mutable_context() {
  set_has_context();
  if (context_ == &::google::protobuf::internal::kEmptyString) {
    context_ = new ::std::string;
  }
  return context_;
}
inline ::std::string* MailToMap::release_context() {
  clear_has_context();
  if (context_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = context_;
    context_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MailToMap::set_allocated_context(::std::string* context) {
  if (context_ != &::google::protobuf::internal::kEmptyString) {
    delete context_;
  }
  if (context) {
    set_has_context();
    context_ = context;
  } else {
    clear_has_context();
    context_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// DreadDungeonData

// optional uint32 secenID = 1;
inline bool DreadDungeonData::has_secenid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DreadDungeonData::set_has_secenid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DreadDungeonData::clear_has_secenid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DreadDungeonData::clear_secenid() {
  secenid_ = 0u;
  clear_has_secenid();
}
inline ::google::protobuf::uint32 DreadDungeonData::secenid() const {
  return secenid_;
}
inline void DreadDungeonData::set_secenid(::google::protobuf::uint32 value) {
  set_has_secenid();
  secenid_ = value;
}

// optional uint32 counts = 2;
inline bool DreadDungeonData::has_counts() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DreadDungeonData::set_has_counts() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DreadDungeonData::clear_has_counts() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DreadDungeonData::clear_counts() {
  counts_ = 0u;
  clear_has_counts();
}
inline ::google::protobuf::uint32 DreadDungeonData::counts() const {
  return counts_;
}
inline void DreadDungeonData::set_counts(::google::protobuf::uint32 value) {
  set_has_counts();
  counts_ = value;
}

// -------------------------------------------------------------------

// PlayerBaseData

// optional uint64 charid = 1;
inline bool PlayerBaseData::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerBaseData::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerBaseData::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerBaseData::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 PlayerBaseData::charid() const {
  return charid_;
}
inline void PlayerBaseData::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
}

// optional string charname = 2;
inline bool PlayerBaseData::has_charname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerBaseData::set_has_charname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerBaseData::clear_has_charname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerBaseData::clear_charname() {
  if (charname_ != &::google::protobuf::internal::kEmptyString) {
    charname_->clear();
  }
  clear_has_charname();
}
inline const ::std::string& PlayerBaseData::charname() const {
  return *charname_;
}
inline void PlayerBaseData::set_charname(const ::std::string& value) {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    charname_ = new ::std::string;
  }
  charname_->assign(value);
}
inline void PlayerBaseData::set_charname(const char* value) {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    charname_ = new ::std::string;
  }
  charname_->assign(value);
}
inline void PlayerBaseData::set_charname(const char* value, size_t size) {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    charname_ = new ::std::string;
  }
  charname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlayerBaseData::mutable_charname() {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    charname_ = new ::std::string;
  }
  return charname_;
}
inline ::std::string* PlayerBaseData::release_charname() {
  clear_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = charname_;
    charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PlayerBaseData::set_allocated_charname(::std::string* charname) {
  if (charname_ != &::google::protobuf::internal::kEmptyString) {
    delete charname_;
  }
  if (charname) {
    set_has_charname();
    charname_ = charname;
  } else {
    clear_has_charname();
    charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 guildid = 3;
inline bool PlayerBaseData::has_guildid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerBaseData::set_has_guildid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayerBaseData::clear_has_guildid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayerBaseData::clear_guildid() {
  guildid_ = GOOGLE_ULONGLONG(0);
  clear_has_guildid();
}
inline ::google::protobuf::uint64 PlayerBaseData::guildid() const {
  return guildid_;
}
inline void PlayerBaseData::set_guildid(::google::protobuf::uint64 value) {
  set_has_guildid();
  guildid_ = value;
}

// optional string guildname = 4;
inline bool PlayerBaseData::has_guildname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlayerBaseData::set_has_guildname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlayerBaseData::clear_has_guildname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlayerBaseData::clear_guildname() {
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    guildname_->clear();
  }
  clear_has_guildname();
}
inline const ::std::string& PlayerBaseData::guildname() const {
  return *guildname_;
}
inline void PlayerBaseData::set_guildname(const ::std::string& value) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
}
inline void PlayerBaseData::set_guildname(const char* value) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
}
inline void PlayerBaseData::set_guildname(const char* value, size_t size) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlayerBaseData::mutable_guildname() {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  return guildname_;
}
inline ::std::string* PlayerBaseData::release_guildname() {
  clear_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = guildname_;
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PlayerBaseData::set_allocated_guildname(::std::string* guildname) {
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    delete guildname_;
  }
  if (guildname) {
    set_has_guildname();
    guildname_ = guildname;
  } else {
    clear_has_guildname();
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 career = 5;
inline bool PlayerBaseData::has_career() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PlayerBaseData::set_has_career() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PlayerBaseData::clear_has_career() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PlayerBaseData::clear_career() {
  career_ = 0u;
  clear_has_career();
}
inline ::google::protobuf::uint32 PlayerBaseData::career() const {
  return career_;
}
inline void PlayerBaseData::set_career(::google::protobuf::uint32 value) {
  set_has_career();
  career_ = value;
}

// optional uint32 dhlev = 6;
inline bool PlayerBaseData::has_dhlev() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PlayerBaseData::set_has_dhlev() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PlayerBaseData::clear_has_dhlev() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PlayerBaseData::clear_dhlev() {
  dhlev_ = 0u;
  clear_has_dhlev();
}
inline ::google::protobuf::uint32 PlayerBaseData::dhlev() const {
  return dhlev_;
}
inline void PlayerBaseData::set_dhlev(::google::protobuf::uint32 value) {
  set_has_dhlev();
  dhlev_ = value;
}

// optional uint32 level = 7;
inline bool PlayerBaseData::has_level() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PlayerBaseData::set_has_level() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PlayerBaseData::clear_has_level() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PlayerBaseData::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 PlayerBaseData::level() const {
  return level_;
}
inline void PlayerBaseData::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 fightval = 8;
inline bool PlayerBaseData::has_fightval() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PlayerBaseData::set_has_fightval() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PlayerBaseData::clear_has_fightval() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PlayerBaseData::clear_fightval() {
  fightval_ = 0u;
  clear_has_fightval();
}
inline ::google::protobuf::uint32 PlayerBaseData::fightval() const {
  return fightval_;
}
inline void PlayerBaseData::set_fightval(::google::protobuf::uint32 value) {
  set_has_fightval();
  fightval_ = value;
}

// optional uint32 skinid = 9;
inline bool PlayerBaseData::has_skinid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PlayerBaseData::set_has_skinid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PlayerBaseData::clear_has_skinid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PlayerBaseData::clear_skinid() {
  skinid_ = 0u;
  clear_has_skinid();
}
inline ::google::protobuf::uint32 PlayerBaseData::skinid() const {
  return skinid_;
}
inline void PlayerBaseData::set_skinid(::google::protobuf::uint32 value) {
  set_has_skinid();
  skinid_ = value;
}

// optional uint32 weaponskin = 10;
inline bool PlayerBaseData::has_weaponskin() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PlayerBaseData::set_has_weaponskin() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PlayerBaseData::clear_has_weaponskin() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PlayerBaseData::clear_weaponskin() {
  weaponskin_ = 0u;
  clear_has_weaponskin();
}
inline ::google::protobuf::uint32 PlayerBaseData::weaponskin() const {
  return weaponskin_;
}
inline void PlayerBaseData::set_weaponskin(::google::protobuf::uint32 value) {
  set_has_weaponskin();
  weaponskin_ = value;
}

// optional uint32 suitid = 11;
inline bool PlayerBaseData::has_suitid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PlayerBaseData::set_has_suitid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PlayerBaseData::clear_has_suitid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PlayerBaseData::clear_suitid() {
  suitid_ = 0u;
  clear_has_suitid();
}
inline ::google::protobuf::uint32 PlayerBaseData::suitid() const {
  return suitid_;
}
inline void PlayerBaseData::set_suitid(::google::protobuf::uint32 value) {
  set_has_suitid();
  suitid_ = value;
}

// repeated uint32 equiplist = 12;
inline int PlayerBaseData::equiplist_size() const {
  return equiplist_.size();
}
inline void PlayerBaseData::clear_equiplist() {
  equiplist_.Clear();
}
inline ::google::protobuf::uint32 PlayerBaseData::equiplist(int index) const {
  return equiplist_.Get(index);
}
inline void PlayerBaseData::set_equiplist(int index, ::google::protobuf::uint32 value) {
  equiplist_.Set(index, value);
}
inline void PlayerBaseData::add_equiplist(::google::protobuf::uint32 value) {
  equiplist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
PlayerBaseData::equiplist() const {
  return equiplist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
PlayerBaseData::mutable_equiplist() {
  return &equiplist_;
}

// repeated uint32 attribut = 13;
inline int PlayerBaseData::attribut_size() const {
  return attribut_.size();
}
inline void PlayerBaseData::clear_attribut() {
  attribut_.Clear();
}
inline ::google::protobuf::uint32 PlayerBaseData::attribut(int index) const {
  return attribut_.Get(index);
}
inline void PlayerBaseData::set_attribut(int index, ::google::protobuf::uint32 value) {
  attribut_.Set(index, value);
}
inline void PlayerBaseData::add_attribut(::google::protobuf::uint32 value) {
  attribut_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
PlayerBaseData::attribut() const {
  return attribut_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
PlayerBaseData::mutable_attribut() {
  return &attribut_;
}

// -------------------------------------------------------------------

// GrowData

// optional uint32 exid = 1;
inline bool GrowData::has_exid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GrowData::set_has_exid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GrowData::clear_has_exid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GrowData::clear_exid() {
  exid_ = 0u;
  clear_has_exid();
}
inline ::google::protobuf::uint32 GrowData::exid() const {
  return exid_;
}
inline void GrowData::set_exid(::google::protobuf::uint32 value) {
  set_has_exid();
  exid_ = value;
}

// optional uint32 fitvalue = 2;
inline bool GrowData::has_fitvalue() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GrowData::set_has_fitvalue() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GrowData::clear_has_fitvalue() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GrowData::clear_fitvalue() {
  fitvalue_ = 0u;
  clear_has_fitvalue();
}
inline ::google::protobuf::uint32 GrowData::fitvalue() const {
  return fitvalue_;
}
inline void GrowData::set_fitvalue(::google::protobuf::uint32 value) {
  set_has_fitvalue();
  fitvalue_ = value;
}

// repeated uint32 equiplist = 3;
inline int GrowData::equiplist_size() const {
  return equiplist_.size();
}
inline void GrowData::clear_equiplist() {
  equiplist_.Clear();
}
inline ::google::protobuf::uint32 GrowData::equiplist(int index) const {
  return equiplist_.Get(index);
}
inline void GrowData::set_equiplist(int index, ::google::protobuf::uint32 value) {
  equiplist_.Set(index, value);
}
inline void GrowData::add_equiplist(::google::protobuf::uint32 value) {
  equiplist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GrowData::equiplist() const {
  return equiplist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GrowData::mutable_equiplist() {
  return &equiplist_;
}

// repeated uint32 skilllist = 4;
inline int GrowData::skilllist_size() const {
  return skilllist_.size();
}
inline void GrowData::clear_skilllist() {
  skilllist_.Clear();
}
inline ::google::protobuf::uint32 GrowData::skilllist(int index) const {
  return skilllist_.Get(index);
}
inline void GrowData::set_skilllist(int index, ::google::protobuf::uint32 value) {
  skilllist_.Set(index, value);
}
inline void GrowData::add_skilllist(::google::protobuf::uint32 value) {
  skilllist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GrowData::skilllist() const {
  return skilllist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GrowData::mutable_skilllist() {
  return &skilllist_;
}

// repeated uint32 skilllev = 5;
inline int GrowData::skilllev_size() const {
  return skilllev_.size();
}
inline void GrowData::clear_skilllev() {
  skilllev_.Clear();
}
inline ::google::protobuf::uint32 GrowData::skilllev(int index) const {
  return skilllev_.Get(index);
}
inline void GrowData::set_skilllev(int index, ::google::protobuf::uint32 value) {
  skilllev_.Set(index, value);
}
inline void GrowData::add_skilllev(::google::protobuf::uint32 value) {
  skilllev_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GrowData::skilllev() const {
  return skilllev_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GrowData::mutable_skilllev() {
  return &skilllev_;
}

// optional uint32 eatcounts = 6;
inline bool GrowData::has_eatcounts() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GrowData::set_has_eatcounts() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GrowData::clear_has_eatcounts() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GrowData::clear_eatcounts() {
  eatcounts_ = 0u;
  clear_has_eatcounts();
}
inline ::google::protobuf::uint32 GrowData::eatcounts() const {
  return eatcounts_;
}
inline void GrowData::set_eatcounts(::google::protobuf::uint32 value) {
  set_has_eatcounts();
  eatcounts_ = value;
}

// repeated uint32 attribut = 7;
inline int GrowData::attribut_size() const {
  return attribut_.size();
}
inline void GrowData::clear_attribut() {
  attribut_.Clear();
}
inline ::google::protobuf::uint32 GrowData::attribut(int index) const {
  return attribut_.Get(index);
}
inline void GrowData::set_attribut(int index, ::google::protobuf::uint32 value) {
  attribut_.Set(index, value);
}
inline void GrowData::add_attribut(::google::protobuf::uint32 value) {
  attribut_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GrowData::attribut() const {
  return attribut_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GrowData::mutable_attribut() {
  return &attribut_;
}

// repeated uint32 talent = 8;
inline int GrowData::talent_size() const {
  return talent_.size();
}
inline void GrowData::clear_talent() {
  talent_.Clear();
}
inline ::google::protobuf::uint32 GrowData::talent(int index) const {
  return talent_.Get(index);
}
inline void GrowData::set_talent(int index, ::google::protobuf::uint32 value) {
  talent_.Set(index, value);
}
inline void GrowData::add_talent(::google::protobuf::uint32 value) {
  talent_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GrowData::talent() const {
  return talent_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GrowData::mutable_talent() {
  return &talent_;
}

// -------------------------------------------------------------------

// ShowDataDetail

// optional .proto.message.GrowData awaken = 1;
inline bool ShowDataDetail::has_awaken() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ShowDataDetail::set_has_awaken() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ShowDataDetail::clear_has_awaken() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ShowDataDetail::clear_awaken() {
  if (awaken_ != NULL) awaken_->::proto::message::GrowData::Clear();
  clear_has_awaken();
}
inline const ::proto::message::GrowData& ShowDataDetail::awaken() const {
  return awaken_ != NULL ? *awaken_ : *default_instance_->awaken_;
}
inline ::proto::message::GrowData* ShowDataDetail::mutable_awaken() {
  set_has_awaken();
  if (awaken_ == NULL) awaken_ = new ::proto::message::GrowData;
  return awaken_;
}
inline ::proto::message::GrowData* ShowDataDetail::release_awaken() {
  clear_has_awaken();
  ::proto::message::GrowData* temp = awaken_;
  awaken_ = NULL;
  return temp;
}
inline void ShowDataDetail::set_allocated_awaken(::proto::message::GrowData* awaken) {
  delete awaken_;
  awaken_ = awaken;
  if (awaken) {
    set_has_awaken();
  } else {
    clear_has_awaken();
  }
}

// optional .proto.message.GrowData ride = 2;
inline bool ShowDataDetail::has_ride() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ShowDataDetail::set_has_ride() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ShowDataDetail::clear_has_ride() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ShowDataDetail::clear_ride() {
  if (ride_ != NULL) ride_->::proto::message::GrowData::Clear();
  clear_has_ride();
}
inline const ::proto::message::GrowData& ShowDataDetail::ride() const {
  return ride_ != NULL ? *ride_ : *default_instance_->ride_;
}
inline ::proto::message::GrowData* ShowDataDetail::mutable_ride() {
  set_has_ride();
  if (ride_ == NULL) ride_ = new ::proto::message::GrowData;
  return ride_;
}
inline ::proto::message::GrowData* ShowDataDetail::release_ride() {
  clear_has_ride();
  ::proto::message::GrowData* temp = ride_;
  ride_ = NULL;
  return temp;
}
inline void ShowDataDetail::set_allocated_ride(::proto::message::GrowData* ride) {
  delete ride_;
  ride_ = ride;
  if (ride) {
    set_has_ride();
  } else {
    clear_has_ride();
  }
}

// repeated .proto.message.GrowData pet = 3;
inline int ShowDataDetail::pet_size() const {
  return pet_.size();
}
inline void ShowDataDetail::clear_pet() {
  pet_.Clear();
}
inline const ::proto::message::GrowData& ShowDataDetail::pet(int index) const {
  return pet_.Get(index);
}
inline ::proto::message::GrowData* ShowDataDetail::mutable_pet(int index) {
  return pet_.Mutable(index);
}
inline ::proto::message::GrowData* ShowDataDetail::add_pet() {
  return pet_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::message::GrowData >&
ShowDataDetail::pet() const {
  return pet_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::message::GrowData >*
ShowDataDetail::mutable_pet() {
  return &pet_;
}

// repeated .proto.message.GrowData mercenary = 4;
inline int ShowDataDetail::mercenary_size() const {
  return mercenary_.size();
}
inline void ShowDataDetail::clear_mercenary() {
  mercenary_.Clear();
}
inline const ::proto::message::GrowData& ShowDataDetail::mercenary(int index) const {
  return mercenary_.Get(index);
}
inline ::proto::message::GrowData* ShowDataDetail::mutable_mercenary(int index) {
  return mercenary_.Mutable(index);
}
inline ::proto::message::GrowData* ShowDataDetail::add_mercenary() {
  return mercenary_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::message::GrowData >&
ShowDataDetail::mercenary() const {
  return mercenary_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::message::GrowData >*
ShowDataDetail::mutable_mercenary() {
  return &mercenary_;
}

// repeated .proto.message.GrowData godweapon = 5;
inline int ShowDataDetail::godweapon_size() const {
  return godweapon_.size();
}
inline void ShowDataDetail::clear_godweapon() {
  godweapon_.Clear();
}
inline const ::proto::message::GrowData& ShowDataDetail::godweapon(int index) const {
  return godweapon_.Get(index);
}
inline ::proto::message::GrowData* ShowDataDetail::mutable_godweapon(int index) {
  return godweapon_.Mutable(index);
}
inline ::proto::message::GrowData* ShowDataDetail::add_godweapon() {
  return godweapon_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::message::GrowData >&
ShowDataDetail::godweapon() const {
  return godweapon_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::message::GrowData >*
ShowDataDetail::mutable_godweapon() {
  return &godweapon_;
}

// -------------------------------------------------------------------

// PlayerShow

// optional .proto.message.PlayerBaseData basedata = 1;
inline bool PlayerShow::has_basedata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerShow::set_has_basedata() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerShow::clear_has_basedata() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerShow::clear_basedata() {
  if (basedata_ != NULL) basedata_->::proto::message::PlayerBaseData::Clear();
  clear_has_basedata();
}
inline const ::proto::message::PlayerBaseData& PlayerShow::basedata() const {
  return basedata_ != NULL ? *basedata_ : *default_instance_->basedata_;
}
inline ::proto::message::PlayerBaseData* PlayerShow::mutable_basedata() {
  set_has_basedata();
  if (basedata_ == NULL) basedata_ = new ::proto::message::PlayerBaseData;
  return basedata_;
}
inline ::proto::message::PlayerBaseData* PlayerShow::release_basedata() {
  clear_has_basedata();
  ::proto::message::PlayerBaseData* temp = basedata_;
  basedata_ = NULL;
  return temp;
}
inline void PlayerShow::set_allocated_basedata(::proto::message::PlayerBaseData* basedata) {
  delete basedata_;
  basedata_ = basedata;
  if (basedata) {
    set_has_basedata();
  } else {
    clear_has_basedata();
  }
}

// optional .proto.message.ShowDataDetail offdata = 2;
inline bool PlayerShow::has_offdata() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerShow::set_has_offdata() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerShow::clear_has_offdata() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerShow::clear_offdata() {
  if (offdata_ != NULL) offdata_->::proto::message::ShowDataDetail::Clear();
  clear_has_offdata();
}
inline const ::proto::message::ShowDataDetail& PlayerShow::offdata() const {
  return offdata_ != NULL ? *offdata_ : *default_instance_->offdata_;
}
inline ::proto::message::ShowDataDetail* PlayerShow::mutable_offdata() {
  set_has_offdata();
  if (offdata_ == NULL) offdata_ = new ::proto::message::ShowDataDetail;
  return offdata_;
}
inline ::proto::message::ShowDataDetail* PlayerShow::release_offdata() {
  clear_has_offdata();
  ::proto::message::ShowDataDetail* temp = offdata_;
  offdata_ = NULL;
  return temp;
}
inline void PlayerShow::set_allocated_offdata(::proto::message::ShowDataDetail* offdata) {
  delete offdata_;
  offdata_ = offdata;
  if (offdata) {
    set_has_offdata();
  } else {
    clear_has_offdata();
  }
}

// -------------------------------------------------------------------

// TBSyncFlagPos

// optional .proto.message.Point3D pt = 1;
inline bool TBSyncFlagPos::has_pt() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBSyncFlagPos::set_has_pt() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBSyncFlagPos::clear_has_pt() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBSyncFlagPos::clear_pt() {
  if (pt_ != NULL) pt_->::proto::message::Point3D::Clear();
  clear_has_pt();
}
inline const ::proto::message::Point3D& TBSyncFlagPos::pt() const {
  return pt_ != NULL ? *pt_ : *default_instance_->pt_;
}
inline ::proto::message::Point3D* TBSyncFlagPos::mutable_pt() {
  set_has_pt();
  if (pt_ == NULL) pt_ = new ::proto::message::Point3D;
  return pt_;
}
inline ::proto::message::Point3D* TBSyncFlagPos::release_pt() {
  clear_has_pt();
  ::proto::message::Point3D* temp = pt_;
  pt_ = NULL;
  return temp;
}
inline void TBSyncFlagPos::set_allocated_pt(::proto::message::Point3D* pt) {
  delete pt_;
  pt_ = pt;
  if (pt) {
    set_has_pt();
  } else {
    clear_has_pt();
  }
}

// optional uint32 flagobjid = 2;
inline bool TBSyncFlagPos::has_flagobjid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TBSyncFlagPos::set_has_flagobjid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TBSyncFlagPos::clear_has_flagobjid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TBSyncFlagPos::clear_flagobjid() {
  flagobjid_ = 0u;
  clear_has_flagobjid();
}
inline ::google::protobuf::uint32 TBSyncFlagPos::flagobjid() const {
  return flagobjid_;
}
inline void TBSyncFlagPos::set_flagobjid(::google::protobuf::uint32 value) {
  set_has_flagobjid();
  flagobjid_ = value;
}

// optional uint64 getguildid = 3;
inline bool TBSyncFlagPos::has_getguildid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TBSyncFlagPos::set_has_getguildid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TBSyncFlagPos::clear_has_getguildid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TBSyncFlagPos::clear_getguildid() {
  getguildid_ = GOOGLE_ULONGLONG(0);
  clear_has_getguildid();
}
inline ::google::protobuf::uint64 TBSyncFlagPos::getguildid() const {
  return getguildid_;
}
inline void TBSyncFlagPos::set_getguildid(::google::protobuf::uint64 value) {
  set_has_getguildid();
  getguildid_ = value;
}

// optional string getguildname = 4;
inline bool TBSyncFlagPos::has_getguildname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TBSyncFlagPos::set_has_getguildname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TBSyncFlagPos::clear_has_getguildname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TBSyncFlagPos::clear_getguildname() {
  if (getguildname_ != &::google::protobuf::internal::kEmptyString) {
    getguildname_->clear();
  }
  clear_has_getguildname();
}
inline const ::std::string& TBSyncFlagPos::getguildname() const {
  return *getguildname_;
}
inline void TBSyncFlagPos::set_getguildname(const ::std::string& value) {
  set_has_getguildname();
  if (getguildname_ == &::google::protobuf::internal::kEmptyString) {
    getguildname_ = new ::std::string;
  }
  getguildname_->assign(value);
}
inline void TBSyncFlagPos::set_getguildname(const char* value) {
  set_has_getguildname();
  if (getguildname_ == &::google::protobuf::internal::kEmptyString) {
    getguildname_ = new ::std::string;
  }
  getguildname_->assign(value);
}
inline void TBSyncFlagPos::set_getguildname(const char* value, size_t size) {
  set_has_getguildname();
  if (getguildname_ == &::google::protobuf::internal::kEmptyString) {
    getguildname_ = new ::std::string;
  }
  getguildname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TBSyncFlagPos::mutable_getguildname() {
  set_has_getguildname();
  if (getguildname_ == &::google::protobuf::internal::kEmptyString) {
    getguildname_ = new ::std::string;
  }
  return getguildname_;
}
inline ::std::string* TBSyncFlagPos::release_getguildname() {
  clear_has_getguildname();
  if (getguildname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = getguildname_;
    getguildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TBSyncFlagPos::set_allocated_getguildname(::std::string* getguildname) {
  if (getguildname_ != &::google::protobuf::internal::kEmptyString) {
    delete getguildname_;
  }
  if (getguildname) {
    set_has_getguildname();
    getguildname_ = getguildname;
  } else {
    clear_has_getguildname();
    getguildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 getflagtime = 5;
inline bool TBSyncFlagPos::has_getflagtime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TBSyncFlagPos::set_has_getflagtime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TBSyncFlagPos::clear_has_getflagtime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TBSyncFlagPos::clear_getflagtime() {
  getflagtime_ = 0u;
  clear_has_getflagtime();
}
inline ::google::protobuf::uint32 TBSyncFlagPos::getflagtime() const {
  return getflagtime_;
}
inline void TBSyncFlagPos::set_getflagtime(::google::protobuf::uint32 value) {
  set_has_getflagtime();
  getflagtime_ = value;
}

// optional uint64 onwergid = 6;
inline bool TBSyncFlagPos::has_onwergid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TBSyncFlagPos::set_has_onwergid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TBSyncFlagPos::clear_has_onwergid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TBSyncFlagPos::clear_onwergid() {
  onwergid_ = GOOGLE_ULONGLONG(0);
  clear_has_onwergid();
}
inline ::google::protobuf::uint64 TBSyncFlagPos::onwergid() const {
  return onwergid_;
}
inline void TBSyncFlagPos::set_onwergid(::google::protobuf::uint64 value) {
  set_has_onwergid();
  onwergid_ = value;
}

// optional string ownername = 7;
inline bool TBSyncFlagPos::has_ownername() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TBSyncFlagPos::set_has_ownername() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TBSyncFlagPos::clear_has_ownername() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TBSyncFlagPos::clear_ownername() {
  if (ownername_ != &::google::protobuf::internal::kEmptyString) {
    ownername_->clear();
  }
  clear_has_ownername();
}
inline const ::std::string& TBSyncFlagPos::ownername() const {
  return *ownername_;
}
inline void TBSyncFlagPos::set_ownername(const ::std::string& value) {
  set_has_ownername();
  if (ownername_ == &::google::protobuf::internal::kEmptyString) {
    ownername_ = new ::std::string;
  }
  ownername_->assign(value);
}
inline void TBSyncFlagPos::set_ownername(const char* value) {
  set_has_ownername();
  if (ownername_ == &::google::protobuf::internal::kEmptyString) {
    ownername_ = new ::std::string;
  }
  ownername_->assign(value);
}
inline void TBSyncFlagPos::set_ownername(const char* value, size_t size) {
  set_has_ownername();
  if (ownername_ == &::google::protobuf::internal::kEmptyString) {
    ownername_ = new ::std::string;
  }
  ownername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TBSyncFlagPos::mutable_ownername() {
  set_has_ownername();
  if (ownername_ == &::google::protobuf::internal::kEmptyString) {
    ownername_ = new ::std::string;
  }
  return ownername_;
}
inline ::std::string* TBSyncFlagPos::release_ownername() {
  clear_has_ownername();
  if (ownername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ownername_;
    ownername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TBSyncFlagPos::set_allocated_ownername(::std::string* ownername) {
  if (ownername_ != &::google::protobuf::internal::kEmptyString) {
    delete ownername_;
  }
  if (ownername) {
    set_has_ownername();
    ownername_ = ownername;
  } else {
    clear_has_ownername();
    ownername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// TBFieldInfo

// optional uint32 id = 1;
inline bool TBFieldInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBFieldInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBFieldInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBFieldInfo::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TBFieldInfo::id() const {
  return id_;
}
inline void TBFieldInfo::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional uint32 mapid = 2;
inline bool TBFieldInfo::has_mapid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TBFieldInfo::set_has_mapid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TBFieldInfo::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TBFieldInfo::clear_mapid() {
  mapid_ = 0u;
  clear_has_mapid();
}
inline ::google::protobuf::uint32 TBFieldInfo::mapid() const {
  return mapid_;
}
inline void TBFieldInfo::set_mapid(::google::protobuf::uint32 value) {
  set_has_mapid();
  mapid_ = value;
}

// optional uint64 guildid = 3;
inline bool TBFieldInfo::has_guildid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TBFieldInfo::set_has_guildid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TBFieldInfo::clear_has_guildid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TBFieldInfo::clear_guildid() {
  guildid_ = GOOGLE_ULONGLONG(0);
  clear_has_guildid();
}
inline ::google::protobuf::uint64 TBFieldInfo::guildid() const {
  return guildid_;
}
inline void TBFieldInfo::set_guildid(::google::protobuf::uint64 value) {
  set_has_guildid();
  guildid_ = value;
}

// optional string guildname = 4;
inline bool TBFieldInfo::has_guildname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TBFieldInfo::set_has_guildname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TBFieldInfo::clear_has_guildname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TBFieldInfo::clear_guildname() {
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    guildname_->clear();
  }
  clear_has_guildname();
}
inline const ::std::string& TBFieldInfo::guildname() const {
  return *guildname_;
}
inline void TBFieldInfo::set_guildname(const ::std::string& value) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
}
inline void TBFieldInfo::set_guildname(const char* value) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
}
inline void TBFieldInfo::set_guildname(const char* value, size_t size) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TBFieldInfo::mutable_guildname() {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  return guildname_;
}
inline ::std::string* TBFieldInfo::release_guildname() {
  clear_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = guildname_;
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TBFieldInfo::set_allocated_guildname(::std::string* guildname) {
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    delete guildname_;
  }
  if (guildname) {
    set_has_guildname();
    guildname_ = guildname;
  } else {
    clear_has_guildname();
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 overtime = 5;
inline bool TBFieldInfo::has_overtime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TBFieldInfo::set_has_overtime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TBFieldInfo::clear_has_overtime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TBFieldInfo::clear_overtime() {
  overtime_ = 0u;
  clear_has_overtime();
}
inline ::google::protobuf::uint32 TBFieldInfo::overtime() const {
  return overtime_;
}
inline void TBFieldInfo::set_overtime(::google::protobuf::uint32 value) {
  set_has_overtime();
  overtime_ = value;
}

// -------------------------------------------------------------------

// TBKillReward

// repeated uint32 itemid = 1;
inline int TBKillReward::itemid_size() const {
  return itemid_.size();
}
inline void TBKillReward::clear_itemid() {
  itemid_.Clear();
}
inline ::google::protobuf::uint32 TBKillReward::itemid(int index) const {
  return itemid_.Get(index);
}
inline void TBKillReward::set_itemid(int index, ::google::protobuf::uint32 value) {
  itemid_.Set(index, value);
}
inline void TBKillReward::add_itemid(::google::protobuf::uint32 value) {
  itemid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TBKillReward::itemid() const {
  return itemid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TBKillReward::mutable_itemid() {
  return &itemid_;
}

// repeated uint32 num = 2;
inline int TBKillReward::num_size() const {
  return num_.size();
}
inline void TBKillReward::clear_num() {
  num_.Clear();
}
inline ::google::protobuf::uint32 TBKillReward::num(int index) const {
  return num_.Get(index);
}
inline void TBKillReward::set_num(int index, ::google::protobuf::uint32 value) {
  num_.Set(index, value);
}
inline void TBKillReward::add_num(::google::protobuf::uint32 value) {
  num_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TBKillReward::num() const {
  return num_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TBKillReward::mutable_num() {
  return &num_;
}

// -------------------------------------------------------------------

// TBPlayer

// optional uint64 playerid = 1;
inline bool TBPlayer::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBPlayer::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBPlayer::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBPlayer::clear_playerid() {
  playerid_ = GOOGLE_ULONGLONG(0);
  clear_has_playerid();
}
inline ::google::protobuf::uint64 TBPlayer::playerid() const {
  return playerid_;
}
inline void TBPlayer::set_playerid(::google::protobuf::uint64 value) {
  set_has_playerid();
  playerid_ = value;
}

// optional uint64 guildid = 2;
inline bool TBPlayer::has_guildid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TBPlayer::set_has_guildid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TBPlayer::clear_has_guildid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TBPlayer::clear_guildid() {
  guildid_ = GOOGLE_ULONGLONG(0);
  clear_has_guildid();
}
inline ::google::protobuf::uint64 TBPlayer::guildid() const {
  return guildid_;
}
inline void TBPlayer::set_guildid(::google::protobuf::uint64 value) {
  set_has_guildid();
  guildid_ = value;
}

// optional uint32 onlinetime = 3;
inline bool TBPlayer::has_onlinetime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TBPlayer::set_has_onlinetime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TBPlayer::clear_has_onlinetime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TBPlayer::clear_onlinetime() {
  onlinetime_ = 0u;
  clear_has_onlinetime();
}
inline ::google::protobuf::uint32 TBPlayer::onlinetime() const {
  return onlinetime_;
}
inline void TBPlayer::set_onlinetime(::google::protobuf::uint32 value) {
  set_has_onlinetime();
  onlinetime_ = value;
}

// -------------------------------------------------------------------

// TBOverResultInfo

// optional uint32 id = 1;
inline bool TBOverResultInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBOverResultInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBOverResultInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBOverResultInfo::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TBOverResultInfo::id() const {
  return id_;
}
inline void TBOverResultInfo::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional uint64 wingid = 2;
inline bool TBOverResultInfo::has_wingid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TBOverResultInfo::set_has_wingid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TBOverResultInfo::clear_has_wingid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TBOverResultInfo::clear_wingid() {
  wingid_ = GOOGLE_ULONGLONG(0);
  clear_has_wingid();
}
inline ::google::protobuf::uint64 TBOverResultInfo::wingid() const {
  return wingid_;
}
inline void TBOverResultInfo::set_wingid(::google::protobuf::uint64 value) {
  set_has_wingid();
  wingid_ = value;
}

// optional string winname = 3;
inline bool TBOverResultInfo::has_winname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TBOverResultInfo::set_has_winname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TBOverResultInfo::clear_has_winname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TBOverResultInfo::clear_winname() {
  if (winname_ != &::google::protobuf::internal::kEmptyString) {
    winname_->clear();
  }
  clear_has_winname();
}
inline const ::std::string& TBOverResultInfo::winname() const {
  return *winname_;
}
inline void TBOverResultInfo::set_winname(const ::std::string& value) {
  set_has_winname();
  if (winname_ == &::google::protobuf::internal::kEmptyString) {
    winname_ = new ::std::string;
  }
  winname_->assign(value);
}
inline void TBOverResultInfo::set_winname(const char* value) {
  set_has_winname();
  if (winname_ == &::google::protobuf::internal::kEmptyString) {
    winname_ = new ::std::string;
  }
  winname_->assign(value);
}
inline void TBOverResultInfo::set_winname(const char* value, size_t size) {
  set_has_winname();
  if (winname_ == &::google::protobuf::internal::kEmptyString) {
    winname_ = new ::std::string;
  }
  winname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TBOverResultInfo::mutable_winname() {
  set_has_winname();
  if (winname_ == &::google::protobuf::internal::kEmptyString) {
    winname_ = new ::std::string;
  }
  return winname_;
}
inline ::std::string* TBOverResultInfo::release_winname() {
  clear_has_winname();
  if (winname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = winname_;
    winname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TBOverResultInfo::set_allocated_winname(::std::string* winname) {
  if (winname_ != &::google::protobuf::internal::kEmptyString) {
    delete winname_;
  }
  if (winname) {
    set_has_winname();
    winname_ = winname;
  } else {
    clear_has_winname();
    winname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 losegid = 4;
inline bool TBOverResultInfo::has_losegid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TBOverResultInfo::set_has_losegid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TBOverResultInfo::clear_has_losegid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TBOverResultInfo::clear_losegid() {
  losegid_ = GOOGLE_ULONGLONG(0);
  clear_has_losegid();
}
inline ::google::protobuf::uint64 TBOverResultInfo::losegid() const {
  return losegid_;
}
inline void TBOverResultInfo::set_losegid(::google::protobuf::uint64 value) {
  set_has_losegid();
  losegid_ = value;
}

// repeated .proto.message.TBPlayer playeridlist = 5;
inline int TBOverResultInfo::playeridlist_size() const {
  return playeridlist_.size();
}
inline void TBOverResultInfo::clear_playeridlist() {
  playeridlist_.Clear();
}
inline const ::proto::message::TBPlayer& TBOverResultInfo::playeridlist(int index) const {
  return playeridlist_.Get(index);
}
inline ::proto::message::TBPlayer* TBOverResultInfo::mutable_playeridlist(int index) {
  return playeridlist_.Mutable(index);
}
inline ::proto::message::TBPlayer* TBOverResultInfo::add_playeridlist() {
  return playeridlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::message::TBPlayer >&
TBOverResultInfo::playeridlist() const {
  return playeridlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::message::TBPlayer >*
TBOverResultInfo::mutable_playeridlist() {
  return &playeridlist_;
}

// optional uint32 serverid = 6;
inline bool TBOverResultInfo::has_serverid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TBOverResultInfo::set_has_serverid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TBOverResultInfo::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TBOverResultInfo::clear_serverid() {
  serverid_ = 0u;
  clear_has_serverid();
}
inline ::google::protobuf::uint32 TBOverResultInfo::serverid() const {
  return serverid_;
}
inline void TBOverResultInfo::set_serverid(::google::protobuf::uint32 value) {
  set_has_serverid();
  serverid_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace proto

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_common_2eproto__INCLUDED
