// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: login.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "login.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace message {

namespace {

const ::google::protobuf::Descriptor* CharShow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharShow_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharShowInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharShowInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AccountInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccountInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Login_CTS_ReqServerList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Login_CTS_ReqServerList_reflection_ = NULL;
const ::google::protobuf::Descriptor* Login_STC_ReqPlayerList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Login_STC_ReqPlayerList_reflection_ = NULL;
const ::google::protobuf::Descriptor* Login_ServerList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Login_ServerList_reflection_ = NULL;
const ::google::protobuf::Descriptor* Login_STC_ServerList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Login_STC_ServerList_reflection_ = NULL;
const ::google::protobuf::Descriptor* Login_CTS_CheckAccount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Login_CTS_CheckAccount_reflection_ = NULL;
const ::google::protobuf::Descriptor* Login_STC_CheckAccountRe_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Login_STC_CheckAccountRe_reflection_ = NULL;
const ::google::protobuf::Descriptor* Login_CTS_SelectServer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Login_CTS_SelectServer_reflection_ = NULL;
const ::google::protobuf::Descriptor* Login_STC_SelectServer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Login_STC_SelectServer_reflection_ = NULL;
const ::google::protobuf::Descriptor* Login_CTS_Register_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Login_CTS_Register_reflection_ = NULL;
const ::google::protobuf::Descriptor* Login_STC_Register_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Login_STC_Register_reflection_ = NULL;
const ::google::protobuf::Descriptor* Login_CTS_Version_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Login_CTS_Version_reflection_ = NULL;
const ::google::protobuf::Descriptor* Login_STC_Version_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Login_STC_Version_reflection_ = NULL;
const ::google::protobuf::Descriptor* Login_CTS_QueryPlayerData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Login_CTS_QueryPlayerData_reflection_ = NULL;
const ::google::protobuf::Descriptor* Login_STC_QueryPlayerData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Login_STC_QueryPlayerData_reflection_ = NULL;
const ::google::protobuf::Descriptor* Login_CTS_CreateChar_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Login_CTS_CreateChar_reflection_ = NULL;
const ::google::protobuf::Descriptor* Login_STC_CreateChar_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Login_STC_CreateChar_reflection_ = NULL;
const ::google::protobuf::Descriptor* Login_STC_PlayerData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Login_STC_PlayerData_reflection_ = NULL;
const ::google::protobuf::Descriptor* Login_STC_EnterScene_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Login_STC_EnterScene_reflection_ = NULL;
const ::google::protobuf::Descriptor* player_sync_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  player_sync_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* Login_STC_Sync_Self_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Login_STC_Sync_Self_reflection_ = NULL;
const ::google::protobuf::Descriptor* Login_STC_Sync_Other_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Login_STC_Sync_Other_reflection_ = NULL;
const ::google::protobuf::Descriptor* Login_STC_AnotherLogin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Login_STC_AnotherLogin_reflection_ = NULL;
const ::google::protobuf::Descriptor* Login_STC_ClientLoadOK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Login_STC_ClientLoadOK_reflection_ = NULL;
const ::google::protobuf::Descriptor* Login_CS_ChangePlayerName_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Login_CS_ChangePlayerName_reflection_ = NULL;
const ::google::protobuf::Descriptor* Login_STC_ChangePlayerName_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Login_STC_ChangePlayerName_reflection_ = NULL;
const ::google::protobuf::Descriptor* Login_STC_NotifyActivity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Login_STC_NotifyActivity_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_login_2eproto() {
  protobuf_AddDesc_login_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "login.proto");
  GOOGLE_CHECK(file != NULL);
  CharShow_descriptor_ = file->message_type(0);
  static const int CharShow_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharShow, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharShow, career_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharShow, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharShow, dhlevel_),
  };
  CharShow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharShow_descriptor_,
      CharShow::default_instance_,
      CharShow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharShow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharShow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharShow));
  CharShowInfo_descriptor_ = file->message_type(1);
  static const int CharShowInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharShowInfo, last_server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharShowInfo, char_list_),
  };
  CharShowInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharShowInfo_descriptor_,
      CharShowInfo::default_instance_,
      CharShowInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharShowInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharShowInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharShowInfo));
  AccountInfo_descriptor_ = file->message_type(2);
  static const int AccountInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, char_show_info_),
  };
  AccountInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccountInfo_descriptor_,
      AccountInfo::default_instance_,
      AccountInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccountInfo));
  Login_CTS_ReqServerList_descriptor_ = file->message_type(3);
  static const int Login_CTS_ReqServerList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_CTS_ReqServerList, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_CTS_ReqServerList, pwd_),
  };
  Login_CTS_ReqServerList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Login_CTS_ReqServerList_descriptor_,
      Login_CTS_ReqServerList::default_instance_,
      Login_CTS_ReqServerList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_CTS_ReqServerList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_CTS_ReqServerList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Login_CTS_ReqServerList));
  Login_STC_ReqPlayerList_descriptor_ = file->message_type(4);
  static const int Login_STC_ReqPlayerList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_STC_ReqPlayerList, datalist_),
  };
  Login_STC_ReqPlayerList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Login_STC_ReqPlayerList_descriptor_,
      Login_STC_ReqPlayerList::default_instance_,
      Login_STC_ReqPlayerList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_STC_ReqPlayerList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_STC_ReqPlayerList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Login_STC_ReqPlayerList));
  Login_ServerList_descriptor_ = file->message_type(5);
  static const int Login_ServerList_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_ServerList, servername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_ServerList, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_ServerList, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_ServerList, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_ServerList, char_show_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_ServerList, area_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_ServerList, area_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_ServerList, is_recommend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_ServerList, is_newserver_),
  };
  Login_ServerList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Login_ServerList_descriptor_,
      Login_ServerList::default_instance_,
      Login_ServerList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_ServerList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_ServerList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Login_ServerList));
  Login_STC_ServerList_descriptor_ = file->message_type(6);
  static const int Login_STC_ServerList_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_STC_ServerList, listsev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_STC_ServerList, last_server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_STC_ServerList, cur_time_),
  };
  Login_STC_ServerList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Login_STC_ServerList_descriptor_,
      Login_STC_ServerList::default_instance_,
      Login_STC_ServerList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_STC_ServerList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_STC_ServerList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Login_STC_ServerList));
  Login_CTS_CheckAccount_descriptor_ = file->message_type(7);
  static const int Login_CTS_CheckAccount_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_CTS_CheckAccount, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_CTS_CheckAccount, pwd_),
  };
  Login_CTS_CheckAccount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Login_CTS_CheckAccount_descriptor_,
      Login_CTS_CheckAccount::default_instance_,
      Login_CTS_CheckAccount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_CTS_CheckAccount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_CTS_CheckAccount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Login_CTS_CheckAccount));
  Login_STC_CheckAccountRe_descriptor_ = file->message_type(8);
  static const int Login_STC_CheckAccountRe_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_STC_CheckAccountRe, nerr_),
  };
  Login_STC_CheckAccountRe_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Login_STC_CheckAccountRe_descriptor_,
      Login_STC_CheckAccountRe::default_instance_,
      Login_STC_CheckAccountRe_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_STC_CheckAccountRe, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_STC_CheckAccountRe, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Login_STC_CheckAccountRe));
  Login_CTS_SelectServer_descriptor_ = file->message_type(9);
  static const int Login_CTS_SelectServer_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_CTS_SelectServer, serverid_),
  };
  Login_CTS_SelectServer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Login_CTS_SelectServer_descriptor_,
      Login_CTS_SelectServer::default_instance_,
      Login_CTS_SelectServer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_CTS_SelectServer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_CTS_SelectServer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Login_CTS_SelectServer));
  Login_STC_SelectServer_descriptor_ = file->message_type(10);
  static const int Login_STC_SelectServer_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_STC_SelectServer, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_STC_SelectServer, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_STC_SelectServer, port_),
  };
  Login_STC_SelectServer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Login_STC_SelectServer_descriptor_,
      Login_STC_SelectServer::default_instance_,
      Login_STC_SelectServer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_STC_SelectServer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_STC_SelectServer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Login_STC_SelectServer));
  Login_CTS_Register_descriptor_ = file->message_type(11);
  static const int Login_CTS_Register_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_CTS_Register, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_CTS_Register, password_),
  };
  Login_CTS_Register_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Login_CTS_Register_descriptor_,
      Login_CTS_Register::default_instance_,
      Login_CTS_Register_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_CTS_Register, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_CTS_Register, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Login_CTS_Register));
  Login_STC_Register_descriptor_ = file->message_type(12);
  static const int Login_STC_Register_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_STC_Register, result_),
  };
  Login_STC_Register_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Login_STC_Register_descriptor_,
      Login_STC_Register::default_instance_,
      Login_STC_Register_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_STC_Register, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_STC_Register, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Login_STC_Register));
  Login_CTS_Version_descriptor_ = file->message_type(13);
  static const int Login_CTS_Version_offsets_[1] = {
  };
  Login_CTS_Version_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Login_CTS_Version_descriptor_,
      Login_CTS_Version::default_instance_,
      Login_CTS_Version_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_CTS_Version, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_CTS_Version, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Login_CTS_Version));
  Login_STC_Version_descriptor_ = file->message_type(14);
  static const int Login_STC_Version_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_STC_Version, version_),
  };
  Login_STC_Version_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Login_STC_Version_descriptor_,
      Login_STC_Version::default_instance_,
      Login_STC_Version_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_STC_Version, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_STC_Version, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Login_STC_Version));
  Login_CTS_QueryPlayerData_descriptor_ = file->message_type(15);
  static const int Login_CTS_QueryPlayerData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_CTS_QueryPlayerData, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_CTS_QueryPlayerData, serverid_),
  };
  Login_CTS_QueryPlayerData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Login_CTS_QueryPlayerData_descriptor_,
      Login_CTS_QueryPlayerData::default_instance_,
      Login_CTS_QueryPlayerData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_CTS_QueryPlayerData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_CTS_QueryPlayerData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Login_CTS_QueryPlayerData));
  Login_STC_QueryPlayerData_descriptor_ = file->message_type(16);
  static const int Login_STC_QueryPlayerData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_STC_QueryPlayerData, rt_),
  };
  Login_STC_QueryPlayerData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Login_STC_QueryPlayerData_descriptor_,
      Login_STC_QueryPlayerData::default_instance_,
      Login_STC_QueryPlayerData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_STC_QueryPlayerData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_STC_QueryPlayerData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Login_STC_QueryPlayerData));
  Login_CTS_CreateChar_descriptor_ = file->message_type(17);
  static const int Login_CTS_CreateChar_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_CTS_CreateChar, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_CTS_CreateChar, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_CTS_CreateChar, weapon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_CTS_CreateChar, charname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_CTS_CreateChar, account_),
  };
  Login_CTS_CreateChar_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Login_CTS_CreateChar_descriptor_,
      Login_CTS_CreateChar::default_instance_,
      Login_CTS_CreateChar_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_CTS_CreateChar, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_CTS_CreateChar, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Login_CTS_CreateChar));
  Login_STC_CreateChar_descriptor_ = file->message_type(18);
  static const int Login_STC_CreateChar_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_STC_CreateChar, rt_),
  };
  Login_STC_CreateChar_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Login_STC_CreateChar_descriptor_,
      Login_STC_CreateChar::default_instance_,
      Login_STC_CreateChar_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_STC_CreateChar, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_STC_CreateChar, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Login_STC_CreateChar));
  Login_STC_PlayerData_descriptor_ = file->message_type(19);
  static const int Login_STC_PlayerData_offsets_[35] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_STC_PlayerData, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_STC_PlayerData, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_STC_PlayerData, weapon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_STC_PlayerData, charname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_STC_PlayerData, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_STC_PlayerData, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_STC_PlayerData, money_item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_STC_PlayerData, equip_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_STC_PlayerData, cur_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_STC_PlayerData, questioncounts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_STC_PlayerData, rightcounts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_STC_PlayerData, rewardstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_STC_PlayerData, button_id_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_STC_PlayerData, activity_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_STC_PlayerData, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_STC_PlayerData, movespeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_STC_PlayerData, jewelry_id_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_STC_PlayerData, titleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_STC_PlayerData, activity_loop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_STC_PlayerData, vip_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_STC_PlayerData, relive_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_STC_PlayerData, titlename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_STC_PlayerData, titleishide_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_STC_PlayerData, posid_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_STC_PlayerData, guild_office_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_STC_PlayerData, trial_dungeon_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_STC_PlayerData, cur_identity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_STC_PlayerData, cur_multichivalrous_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_STC_PlayerData, cur_epicchivalrous_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_STC_PlayerData, uisuitid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_STC_PlayerData, boat_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_STC_PlayerData, uiattackmode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_STC_PlayerData, finishkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_STC_PlayerData, guidepart_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_STC_PlayerData, createtime_),
  };
  Login_STC_PlayerData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Login_STC_PlayerData_descriptor_,
      Login_STC_PlayerData::default_instance_,
      Login_STC_PlayerData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_STC_PlayerData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_STC_PlayerData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Login_STC_PlayerData));
  Login_STC_EnterScene_descriptor_ = file->message_type(20);
  static const int Login_STC_EnterScene_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_STC_EnterScene, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_STC_EnterScene, pt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_STC_EnterScene, dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_STC_EnterScene, layer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_STC_EnterScene, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_STC_EnterScene, port_),
  };
  Login_STC_EnterScene_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Login_STC_EnterScene_descriptor_,
      Login_STC_EnterScene::default_instance_,
      Login_STC_EnterScene_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_STC_EnterScene, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_STC_EnterScene, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Login_STC_EnterScene));
  player_sync_data_descriptor_ = file->message_type(21);
  static const int player_sync_data_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_sync_data, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_sync_data, weapon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_sync_data, charname_),
  };
  player_sync_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      player_sync_data_descriptor_,
      player_sync_data::default_instance_,
      player_sync_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_sync_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_sync_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(player_sync_data));
  Login_STC_Sync_Self_descriptor_ = file->message_type(22);
  static const int Login_STC_Sync_Self_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_STC_Sync_Self, otherdata_),
  };
  Login_STC_Sync_Self_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Login_STC_Sync_Self_descriptor_,
      Login_STC_Sync_Self::default_instance_,
      Login_STC_Sync_Self_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_STC_Sync_Self, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_STC_Sync_Self, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Login_STC_Sync_Self));
  Login_STC_Sync_Other_descriptor_ = file->message_type(23);
  static const int Login_STC_Sync_Other_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_STC_Sync_Other, logindata_),
  };
  Login_STC_Sync_Other_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Login_STC_Sync_Other_descriptor_,
      Login_STC_Sync_Other::default_instance_,
      Login_STC_Sync_Other_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_STC_Sync_Other, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_STC_Sync_Other, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Login_STC_Sync_Other));
  Login_STC_AnotherLogin_descriptor_ = file->message_type(24);
  static const int Login_STC_AnotherLogin_offsets_[1] = {
  };
  Login_STC_AnotherLogin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Login_STC_AnotherLogin_descriptor_,
      Login_STC_AnotherLogin::default_instance_,
      Login_STC_AnotherLogin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_STC_AnotherLogin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_STC_AnotherLogin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Login_STC_AnotherLogin));
  Login_STC_ClientLoadOK_descriptor_ = file->message_type(25);
  static const int Login_STC_ClientLoadOK_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_STC_ClientLoadOK, branch_),
  };
  Login_STC_ClientLoadOK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Login_STC_ClientLoadOK_descriptor_,
      Login_STC_ClientLoadOK::default_instance_,
      Login_STC_ClientLoadOK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_STC_ClientLoadOK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_STC_ClientLoadOK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Login_STC_ClientLoadOK));
  Login_CS_ChangePlayerName_descriptor_ = file->message_type(26);
  static const int Login_CS_ChangePlayerName_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_CS_ChangePlayerName, charname_),
  };
  Login_CS_ChangePlayerName_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Login_CS_ChangePlayerName_descriptor_,
      Login_CS_ChangePlayerName::default_instance_,
      Login_CS_ChangePlayerName_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_CS_ChangePlayerName, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_CS_ChangePlayerName, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Login_CS_ChangePlayerName));
  Login_STC_ChangePlayerName_descriptor_ = file->message_type(27);
  static const int Login_STC_ChangePlayerName_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_STC_ChangePlayerName, rt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_STC_ChangePlayerName, charname_),
  };
  Login_STC_ChangePlayerName_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Login_STC_ChangePlayerName_descriptor_,
      Login_STC_ChangePlayerName::default_instance_,
      Login_STC_ChangePlayerName_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_STC_ChangePlayerName, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_STC_ChangePlayerName, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Login_STC_ChangePlayerName));
  Login_STC_NotifyActivity_descriptor_ = file->message_type(28);
  static const int Login_STC_NotifyActivity_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_STC_NotifyActivity, activityhost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_STC_NotifyActivity, activitypath_),
  };
  Login_STC_NotifyActivity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Login_STC_NotifyActivity_descriptor_,
      Login_STC_NotifyActivity::default_instance_,
      Login_STC_NotifyActivity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_STC_NotifyActivity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_STC_NotifyActivity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Login_STC_NotifyActivity));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_login_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharShow_descriptor_, &CharShow::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharShowInfo_descriptor_, &CharShowInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccountInfo_descriptor_, &AccountInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Login_CTS_ReqServerList_descriptor_, &Login_CTS_ReqServerList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Login_STC_ReqPlayerList_descriptor_, &Login_STC_ReqPlayerList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Login_ServerList_descriptor_, &Login_ServerList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Login_STC_ServerList_descriptor_, &Login_STC_ServerList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Login_CTS_CheckAccount_descriptor_, &Login_CTS_CheckAccount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Login_STC_CheckAccountRe_descriptor_, &Login_STC_CheckAccountRe::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Login_CTS_SelectServer_descriptor_, &Login_CTS_SelectServer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Login_STC_SelectServer_descriptor_, &Login_STC_SelectServer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Login_CTS_Register_descriptor_, &Login_CTS_Register::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Login_STC_Register_descriptor_, &Login_STC_Register::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Login_CTS_Version_descriptor_, &Login_CTS_Version::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Login_STC_Version_descriptor_, &Login_STC_Version::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Login_CTS_QueryPlayerData_descriptor_, &Login_CTS_QueryPlayerData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Login_STC_QueryPlayerData_descriptor_, &Login_STC_QueryPlayerData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Login_CTS_CreateChar_descriptor_, &Login_CTS_CreateChar::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Login_STC_CreateChar_descriptor_, &Login_STC_CreateChar::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Login_STC_PlayerData_descriptor_, &Login_STC_PlayerData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Login_STC_EnterScene_descriptor_, &Login_STC_EnterScene::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    player_sync_data_descriptor_, &player_sync_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Login_STC_Sync_Self_descriptor_, &Login_STC_Sync_Self::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Login_STC_Sync_Other_descriptor_, &Login_STC_Sync_Other::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Login_STC_AnotherLogin_descriptor_, &Login_STC_AnotherLogin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Login_STC_ClientLoadOK_descriptor_, &Login_STC_ClientLoadOK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Login_CS_ChangePlayerName_descriptor_, &Login_CS_ChangePlayerName::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Login_STC_ChangePlayerName_descriptor_, &Login_STC_ChangePlayerName::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Login_STC_NotifyActivity_descriptor_, &Login_STC_NotifyActivity::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_login_2eproto() {
  delete CharShow::default_instance_;
  delete CharShow_reflection_;
  delete CharShowInfo::default_instance_;
  delete CharShowInfo_reflection_;
  delete AccountInfo::default_instance_;
  delete AccountInfo_reflection_;
  delete Login_CTS_ReqServerList::default_instance_;
  delete Login_CTS_ReqServerList_reflection_;
  delete Login_STC_ReqPlayerList::default_instance_;
  delete Login_STC_ReqPlayerList_reflection_;
  delete Login_ServerList::default_instance_;
  delete Login_ServerList_reflection_;
  delete Login_STC_ServerList::default_instance_;
  delete Login_STC_ServerList_reflection_;
  delete Login_CTS_CheckAccount::default_instance_;
  delete Login_CTS_CheckAccount_reflection_;
  delete Login_STC_CheckAccountRe::default_instance_;
  delete Login_STC_CheckAccountRe_reflection_;
  delete Login_CTS_SelectServer::default_instance_;
  delete Login_CTS_SelectServer_reflection_;
  delete Login_STC_SelectServer::default_instance_;
  delete Login_STC_SelectServer_reflection_;
  delete Login_CTS_Register::default_instance_;
  delete Login_CTS_Register_reflection_;
  delete Login_STC_Register::default_instance_;
  delete Login_STC_Register_reflection_;
  delete Login_CTS_Version::default_instance_;
  delete Login_CTS_Version_reflection_;
  delete Login_STC_Version::default_instance_;
  delete Login_STC_Version_reflection_;
  delete Login_CTS_QueryPlayerData::default_instance_;
  delete Login_CTS_QueryPlayerData_reflection_;
  delete Login_STC_QueryPlayerData::default_instance_;
  delete Login_STC_QueryPlayerData_reflection_;
  delete Login_CTS_CreateChar::default_instance_;
  delete Login_CTS_CreateChar_reflection_;
  delete Login_STC_CreateChar::default_instance_;
  delete Login_STC_CreateChar_reflection_;
  delete Login_STC_PlayerData::default_instance_;
  delete Login_STC_PlayerData_reflection_;
  delete Login_STC_EnterScene::default_instance_;
  delete Login_STC_EnterScene_reflection_;
  delete player_sync_data::default_instance_;
  delete player_sync_data_reflection_;
  delete Login_STC_Sync_Self::default_instance_;
  delete Login_STC_Sync_Self_reflection_;
  delete Login_STC_Sync_Other::default_instance_;
  delete Login_STC_Sync_Other_reflection_;
  delete Login_STC_AnotherLogin::default_instance_;
  delete Login_STC_AnotherLogin_reflection_;
  delete Login_STC_ClientLoadOK::default_instance_;
  delete Login_STC_ClientLoadOK_reflection_;
  delete Login_CS_ChangePlayerName::default_instance_;
  delete Login_CS_ChangePlayerName_reflection_;
  delete Login_STC_ChangePlayerName::default_instance_;
  delete Login_STC_ChangePlayerName_reflection_;
  delete Login_STC_NotifyActivity::default_instance_;
  delete Login_STC_NotifyActivity_reflection_;
}

void protobuf_AddDesc_login_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::proto::message::protobuf_AddDesc_common_2eproto();
  ::proto::message::protobuf_AddDesc_item_2eproto();
  ::proto::message::protobuf_AddDesc_activity_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013login.proto\022\rproto.message\032\014common.pro"
    "to\032\nitem.proto\032\016activity.proto\"M\n\010CharSh"
    "ow\022\021\n\tserver_id\030\001 \001(\005\022\016\n\006career\030\002 \001(\005\022\r\n"
    "\005level\030\003 \001(\005\022\017\n\007dhlevel\030\004 \001(\005\"R\n\014CharSho"
    "wInfo\022\026\n\016last_server_id\030\001 \001(\005\022*\n\tchar_li"
    "st\030\002 \003(\0132\027.proto.message.CharShow\"e\n\013Acc"
    "ountInfo\022\017\n\007account\030\001 \001(\t\022\020\n\010password\030\002 "
    "\001(\t\0223\n\016char_show_info\030\003 \001(\0132\033.proto.mess"
    "age.CharShowInfo\"7\n\027Login_CTS_ReqServerL"
    "ist\022\017\n\007account\030\001 \002(\t\022\013\n\003pwd\030\002 \002(\t\"D\n\027Log"
    "in_STC_ReqPlayerList\022)\n\010datalist\030\001 \003(\0132\027"
    ".proto.message.CharShow\"\330\001\n\020Login_Server"
    "List\022\022\n\nServerName\030\001 \002(\t\022\020\n\010ServerID\030\002 \002"
    "(\005\022\016\n\006Status\030\003 \002(\005\022\022\n\nstart_time\030\004 \002(\005\022*"
    "\n\tchar_show\030\005 \002(\0132\027.proto.message.CharSh"
    "ow\022\017\n\007area_id\030\006 \002(\005\022\021\n\tarea_name\030\007 \002(\t\022\024"
    "\n\014is_recommend\030\010 \002(\005\022\024\n\014is_newserver\030\t \001"
    "(\005\"r\n\024Login_STC_ServerList\0220\n\007listSev\030\001 "
    "\003(\0132\037.proto.message.Login_ServerList\022\026\n\016"
    "last_server_id\030\002 \002(\005\022\020\n\010cur_time\030\003 \002(\005\"6"
    "\n\026Login_CTS_CheckAccount\022\017\n\007account\030\001 \002("
    "\t\022\013\n\003pwd\030\002 \002(\t\"(\n\030Login_STC_CheckAccount"
    "Re\022\014\n\004nErr\030\001 \002(\005\"*\n\026Login_CTS_SelectServ"
    "er\022\020\n\010ServerID\030\001 \002(\005\"B\n\026Login_STC_Select"
    "Server\022\016\n\006result\030\001 \001(\005\022\n\n\002ip\030\002 \001(\t\022\014\n\004po"
    "rt\030\003 \001(\005\"7\n\022Login_CTS_Register\022\017\n\007accoun"
    "t\030\001 \001(\t\022\020\n\010password\030\002 \001(\t\"$\n\022Login_STC_R"
    "egister\022\016\n\006Result\030\001 \001(\005\"\023\n\021Login_CTS_Ver"
    "sion\"$\n\021Login_STC_Version\022\017\n\007version\030\001 \001"
    "(\t\">\n\031Login_CTS_QueryPlayerData\022\017\n\007Accou"
    "nt\030\001 \002(\t\022\020\n\010ServerId\030\002 \002(\005\"\'\n\031Login_STC_"
    "QueryPlayerData\022\n\n\002rt\030\001 \002(\005\"h\n\024Login_CTS"
    "_CreateChar\022\020\n\010ServerId\030\001 \002(\005\022\013\n\003sex\030\002 \002"
    "(\005\022\016\n\006weapon\030\003 \002(\005\022\020\n\010CharName\030\004 \002(\t\022\017\n\007"
    "account\030\005 \002(\t\"\"\n\024Login_STC_CreateChar\022\n\n"
    "\002rt\030\001 \002(\005\"\344\006\n\024Login_STC_PlayerData\022\016\n\006ch"
    "arid\030\001 \002(\004\022\013\n\003sex\030\002 \002(\005\022\016\n\006weapon\030\003 \002(\005\022"
    "\020\n\010charname\030\004 \002(\t\022\020\n\010playerid\030\005 \002(\r\022\r\n\005l"
    "evel\030\006 \002(\005\022,\n\nmoney_item\030\007 \002(\0132\030.proto.m"
    "essage.MoneyItem\022(\n\nequip_list\030\010 \003(\0132\024.p"
    "roto.message.Equip\022\020\n\010cur_time\030\t \001(\005\022\026\n\016"
    "questioncounts\030\n \001(\r\022\023\n\013rightcounts\030\013 \001("
    "\r\022\023\n\013rewardstate\030\014 \001(\r\022,\n\016button_id_list"
    "\030\r \003(\0132\024.proto.message.IDNum\0225\n\ractivity"
    "_list\030\016 \003(\0132\036.proto.message.ActivityIDTi"
    "mes\022\017\n\007guildid\030\017 \001(\004\022\021\n\tMoveSpeed\030\020 \001(\r\022"
    "\027\n\017jewelry_id_list\030\021 \003(\r\022\017\n\007titleID\030\022 \001("
    "\005\022\025\n\ractivity_loop\030\023 \001(\005\022\021\n\tvip_level\030\024 "
    "\001(\005\022\024\n\014relive_times\030\025 \001(\005\022\021\n\ttitlename\030\026"
    " \001(\t\022\023\n\013titleishide\030\027 \001(\005\022\022\n\nposid_list\030"
    "\030 \003(\005\022\024\n\014guild_office\030\031 \001(\005\022\030\n\020trial_dun"
    "geon_id\030\032 \001(\005\022\024\n\014cur_identity\030\033 \001(\005\022\033\n\023c"
    "ur_MultiChivalrous\030\034 \001(\005\022\032\n\022cur_EpicChiv"
    "alrous\030\035 \001(\005\022\020\n\010uiSuitId\030\036 \001(\r\0220\n\tboat_i"
    "nfo\030\037 \001(\0132\035.proto.message.BattleBoatInfo"
    "\022\024\n\014uiAttackMode\030  \001(\r\022\021\n\tfinishkey\030! \001("
    "\t\022\021\n\tguidepart\030\" \001(\r\022\022\n\ncreatetime\030# \001(\r"
    "\"\177\n\024Login_STC_EnterScene\022\r\n\005mapid\030\001 \001(\005\022"
    "\"\n\002pt\030\002 \002(\0132\026.proto.message.Point3D\022\013\n\003d"
    "ir\030\003 \002(\002\022\r\n\005layer\030\004 \001(\005\022\n\n\002ip\030\005 \001(\t\022\014\n\004p"
    "ort\030\006 \001(\005\"A\n\020player_sync_data\022\013\n\003sex\030\001 \002"
    "(\005\022\016\n\006weapon\030\002 \002(\005\022\020\n\010CharName\030\003 \002(\t\"I\n\023"
    "Login_STC_Sync_Self\0222\n\totherData\030\001 \003(\0132\037"
    ".proto.message.player_sync_data\"J\n\024Login"
    "_STC_Sync_Other\0222\n\tLoginData\030\002 \002(\0132\037.pro"
    "to.message.player_sync_data\"\030\n\026Login_STC"
    "_AnotherLogin\"(\n\026Login_STC_ClientLoadOK\022"
    "\016\n\006Branch\030\001 \002(\005\"-\n\031Login_CS_ChangePlayer"
    "Name\022\020\n\010charname\030\001 \002(\t\":\n\032Login_STC_Chan"
    "gePlayerName\022\n\n\002rt\030\001 \002(\005\022\020\n\010charname\030\002 \001"
    "(\t\"F\n\030Login_STC_NotifyActivity\022\024\n\014Activi"
    "tyHost\030\001 \001(\t\022\024\n\014ActivityPath\030\002 \001(\tB\017\n\rpr"
    "oto.message", 2891);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "login.proto", &protobuf_RegisterTypes);
  CharShow::default_instance_ = new CharShow();
  CharShowInfo::default_instance_ = new CharShowInfo();
  AccountInfo::default_instance_ = new AccountInfo();
  Login_CTS_ReqServerList::default_instance_ = new Login_CTS_ReqServerList();
  Login_STC_ReqPlayerList::default_instance_ = new Login_STC_ReqPlayerList();
  Login_ServerList::default_instance_ = new Login_ServerList();
  Login_STC_ServerList::default_instance_ = new Login_STC_ServerList();
  Login_CTS_CheckAccount::default_instance_ = new Login_CTS_CheckAccount();
  Login_STC_CheckAccountRe::default_instance_ = new Login_STC_CheckAccountRe();
  Login_CTS_SelectServer::default_instance_ = new Login_CTS_SelectServer();
  Login_STC_SelectServer::default_instance_ = new Login_STC_SelectServer();
  Login_CTS_Register::default_instance_ = new Login_CTS_Register();
  Login_STC_Register::default_instance_ = new Login_STC_Register();
  Login_CTS_Version::default_instance_ = new Login_CTS_Version();
  Login_STC_Version::default_instance_ = new Login_STC_Version();
  Login_CTS_QueryPlayerData::default_instance_ = new Login_CTS_QueryPlayerData();
  Login_STC_QueryPlayerData::default_instance_ = new Login_STC_QueryPlayerData();
  Login_CTS_CreateChar::default_instance_ = new Login_CTS_CreateChar();
  Login_STC_CreateChar::default_instance_ = new Login_STC_CreateChar();
  Login_STC_PlayerData::default_instance_ = new Login_STC_PlayerData();
  Login_STC_EnterScene::default_instance_ = new Login_STC_EnterScene();
  player_sync_data::default_instance_ = new player_sync_data();
  Login_STC_Sync_Self::default_instance_ = new Login_STC_Sync_Self();
  Login_STC_Sync_Other::default_instance_ = new Login_STC_Sync_Other();
  Login_STC_AnotherLogin::default_instance_ = new Login_STC_AnotherLogin();
  Login_STC_ClientLoadOK::default_instance_ = new Login_STC_ClientLoadOK();
  Login_CS_ChangePlayerName::default_instance_ = new Login_CS_ChangePlayerName();
  Login_STC_ChangePlayerName::default_instance_ = new Login_STC_ChangePlayerName();
  Login_STC_NotifyActivity::default_instance_ = new Login_STC_NotifyActivity();
  CharShow::default_instance_->InitAsDefaultInstance();
  CharShowInfo::default_instance_->InitAsDefaultInstance();
  AccountInfo::default_instance_->InitAsDefaultInstance();
  Login_CTS_ReqServerList::default_instance_->InitAsDefaultInstance();
  Login_STC_ReqPlayerList::default_instance_->InitAsDefaultInstance();
  Login_ServerList::default_instance_->InitAsDefaultInstance();
  Login_STC_ServerList::default_instance_->InitAsDefaultInstance();
  Login_CTS_CheckAccount::default_instance_->InitAsDefaultInstance();
  Login_STC_CheckAccountRe::default_instance_->InitAsDefaultInstance();
  Login_CTS_SelectServer::default_instance_->InitAsDefaultInstance();
  Login_STC_SelectServer::default_instance_->InitAsDefaultInstance();
  Login_CTS_Register::default_instance_->InitAsDefaultInstance();
  Login_STC_Register::default_instance_->InitAsDefaultInstance();
  Login_CTS_Version::default_instance_->InitAsDefaultInstance();
  Login_STC_Version::default_instance_->InitAsDefaultInstance();
  Login_CTS_QueryPlayerData::default_instance_->InitAsDefaultInstance();
  Login_STC_QueryPlayerData::default_instance_->InitAsDefaultInstance();
  Login_CTS_CreateChar::default_instance_->InitAsDefaultInstance();
  Login_STC_CreateChar::default_instance_->InitAsDefaultInstance();
  Login_STC_PlayerData::default_instance_->InitAsDefaultInstance();
  Login_STC_EnterScene::default_instance_->InitAsDefaultInstance();
  player_sync_data::default_instance_->InitAsDefaultInstance();
  Login_STC_Sync_Self::default_instance_->InitAsDefaultInstance();
  Login_STC_Sync_Other::default_instance_->InitAsDefaultInstance();
  Login_STC_AnotherLogin::default_instance_->InitAsDefaultInstance();
  Login_STC_ClientLoadOK::default_instance_->InitAsDefaultInstance();
  Login_CS_ChangePlayerName::default_instance_->InitAsDefaultInstance();
  Login_STC_ChangePlayerName::default_instance_->InitAsDefaultInstance();
  Login_STC_NotifyActivity::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_login_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_login_2eproto {
  StaticDescriptorInitializer_login_2eproto() {
    protobuf_AddDesc_login_2eproto();
  }
} static_descriptor_initializer_login_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CharShow::kServerIdFieldNumber;
const int CharShow::kCareerFieldNumber;
const int CharShow::kLevelFieldNumber;
const int CharShow::kDhlevelFieldNumber;
#endif  // !_MSC_VER

CharShow::CharShow()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharShow::InitAsDefaultInstance() {
}

CharShow::CharShow(const CharShow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharShow::SharedCtor() {
  _cached_size_ = 0;
  server_id_ = 0;
  career_ = 0;
  level_ = 0;
  dhlevel_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharShow::~CharShow() {
  SharedDtor();
}

void CharShow::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharShow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharShow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharShow_descriptor_;
}

const CharShow& CharShow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login_2eproto();
  return *default_instance_;
}

CharShow* CharShow::default_instance_ = NULL;

CharShow* CharShow::New() const {
  return new CharShow;
}

void CharShow::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    server_id_ = 0;
    career_ = 0;
    level_ = 0;
    dhlevel_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharShow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 server_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_career;
        break;
      }

      // optional int32 career = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_career:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &career_)));
          set_has_career();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // optional int32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dhlevel;
        break;
      }

      // optional int32 dhlevel = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dhlevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dhlevel_)));
          set_has_dhlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharShow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 server_id = 1;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->server_id(), output);
  }

  // optional int32 career = 2;
  if (has_career()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->career(), output);
  }

  // optional int32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }

  // optional int32 dhlevel = 4;
  if (has_dhlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->dhlevel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharShow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 server_id = 1;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->server_id(), target);
  }

  // optional int32 career = 2;
  if (has_career()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->career(), target);
  }

  // optional int32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }

  // optional int32 dhlevel = 4;
  if (has_dhlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->dhlevel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharShow::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 server_id = 1;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_id());
    }

    // optional int32 career = 2;
    if (has_career()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->career());
    }

    // optional int32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 dhlevel = 4;
    if (has_dhlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dhlevel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharShow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharShow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharShow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharShow::MergeFrom(const CharShow& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_career()) {
      set_career(from.career());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_dhlevel()) {
      set_dhlevel(from.dhlevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharShow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharShow::CopyFrom(const CharShow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharShow::IsInitialized() const {

  return true;
}

void CharShow::Swap(CharShow* other) {
  if (other != this) {
    std::swap(server_id_, other->server_id_);
    std::swap(career_, other->career_);
    std::swap(level_, other->level_);
    std::swap(dhlevel_, other->dhlevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharShow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharShow_descriptor_;
  metadata.reflection = CharShow_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharShowInfo::kLastServerIdFieldNumber;
const int CharShowInfo::kCharListFieldNumber;
#endif  // !_MSC_VER

CharShowInfo::CharShowInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharShowInfo::InitAsDefaultInstance() {
}

CharShowInfo::CharShowInfo(const CharShowInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharShowInfo::SharedCtor() {
  _cached_size_ = 0;
  last_server_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharShowInfo::~CharShowInfo() {
  SharedDtor();
}

void CharShowInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharShowInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharShowInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharShowInfo_descriptor_;
}

const CharShowInfo& CharShowInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login_2eproto();
  return *default_instance_;
}

CharShowInfo* CharShowInfo::default_instance_ = NULL;

CharShowInfo* CharShowInfo::New() const {
  return new CharShowInfo;
}

void CharShowInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    last_server_id_ = 0;
  }
  char_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharShowInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 last_server_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &last_server_id_)));
          set_has_last_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_char_list;
        break;
      }

      // repeated .proto.message.CharShow char_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_char_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_char_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_char_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharShowInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 last_server_id = 1;
  if (has_last_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->last_server_id(), output);
  }

  // repeated .proto.message.CharShow char_list = 2;
  for (int i = 0; i < this->char_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->char_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharShowInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 last_server_id = 1;
  if (has_last_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->last_server_id(), target);
  }

  // repeated .proto.message.CharShow char_list = 2;
  for (int i = 0; i < this->char_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->char_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharShowInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 last_server_id = 1;
    if (has_last_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->last_server_id());
    }

  }
  // repeated .proto.message.CharShow char_list = 2;
  total_size += 1 * this->char_list_size();
  for (int i = 0; i < this->char_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->char_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharShowInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharShowInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharShowInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharShowInfo::MergeFrom(const CharShowInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  char_list_.MergeFrom(from.char_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_last_server_id()) {
      set_last_server_id(from.last_server_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharShowInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharShowInfo::CopyFrom(const CharShowInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharShowInfo::IsInitialized() const {

  return true;
}

void CharShowInfo::Swap(CharShowInfo* other) {
  if (other != this) {
    std::swap(last_server_id_, other->last_server_id_);
    char_list_.Swap(&other->char_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharShowInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharShowInfo_descriptor_;
  metadata.reflection = CharShowInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AccountInfo::kAccountFieldNumber;
const int AccountInfo::kPasswordFieldNumber;
const int AccountInfo::kCharShowInfoFieldNumber;
#endif  // !_MSC_VER

AccountInfo::AccountInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AccountInfo::InitAsDefaultInstance() {
  char_show_info_ = const_cast< ::proto::message::CharShowInfo*>(&::proto::message::CharShowInfo::default_instance());
}

AccountInfo::AccountInfo(const AccountInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AccountInfo::SharedCtor() {
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  char_show_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccountInfo::~AccountInfo() {
  SharedDtor();
}

void AccountInfo::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (this != default_instance_) {
    delete char_show_info_;
  }
}

void AccountInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccountInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountInfo_descriptor_;
}

const AccountInfo& AccountInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login_2eproto();
  return *default_instance_;
}

AccountInfo* AccountInfo::default_instance_ = NULL;

AccountInfo* AccountInfo::New() const {
  return new AccountInfo;
}

void AccountInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    if (has_char_show_info()) {
      if (char_show_info_ != NULL) char_show_info_->::proto::message::CharShowInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AccountInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }

      // optional string password = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_char_show_info;
        break;
      }

      // optional .proto.message.CharShowInfo char_show_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_char_show_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_char_show_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AccountInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->account(), output);
  }

  // optional string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->password(), output);
  }

  // optional .proto.message.CharShowInfo char_show_info = 3;
  if (has_char_show_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->char_show_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AccountInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account(), target);
  }

  // optional string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  // optional .proto.message.CharShowInfo char_show_info = 3;
  if (has_char_show_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->char_show_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AccountInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional string password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional .proto.message.CharShowInfo char_show_info = 3;
    if (has_char_show_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->char_show_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccountInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccountInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccountInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AccountInfo::MergeFrom(const AccountInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_char_show_info()) {
      mutable_char_show_info()->::proto::message::CharShowInfo::MergeFrom(from.char_show_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AccountInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountInfo::CopyFrom(const AccountInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountInfo::IsInitialized() const {

  return true;
}

void AccountInfo::Swap(AccountInfo* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(password_, other->password_);
    std::swap(char_show_info_, other->char_show_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AccountInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccountInfo_descriptor_;
  metadata.reflection = AccountInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Login_CTS_ReqServerList::kAccountFieldNumber;
const int Login_CTS_ReqServerList::kPwdFieldNumber;
#endif  // !_MSC_VER

Login_CTS_ReqServerList::Login_CTS_ReqServerList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Login_CTS_ReqServerList::InitAsDefaultInstance() {
}

Login_CTS_ReqServerList::Login_CTS_ReqServerList(const Login_CTS_ReqServerList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Login_CTS_ReqServerList::SharedCtor() {
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Login_CTS_ReqServerList::~Login_CTS_ReqServerList() {
  SharedDtor();
}

void Login_CTS_ReqServerList::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (pwd_ != &::google::protobuf::internal::kEmptyString) {
    delete pwd_;
  }
  if (this != default_instance_) {
  }
}

void Login_CTS_ReqServerList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Login_CTS_ReqServerList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Login_CTS_ReqServerList_descriptor_;
}

const Login_CTS_ReqServerList& Login_CTS_ReqServerList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login_2eproto();
  return *default_instance_;
}

Login_CTS_ReqServerList* Login_CTS_ReqServerList::default_instance_ = NULL;

Login_CTS_ReqServerList* Login_CTS_ReqServerList::New() const {
  return new Login_CTS_ReqServerList;
}

void Login_CTS_ReqServerList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_pwd()) {
      if (pwd_ != &::google::protobuf::internal::kEmptyString) {
        pwd_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Login_CTS_ReqServerList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pwd;
        break;
      }

      // required string pwd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pwd().data(), this->pwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Login_CTS_ReqServerList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->account(), output);
  }

  // required string pwd = 2;
  if (has_pwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pwd().data(), this->pwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->pwd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Login_CTS_ReqServerList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account(), target);
  }

  // required string pwd = 2;
  if (has_pwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pwd().data(), this->pwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pwd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Login_CTS_ReqServerList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // required string pwd = 2;
    if (has_pwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pwd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Login_CTS_ReqServerList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Login_CTS_ReqServerList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Login_CTS_ReqServerList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Login_CTS_ReqServerList::MergeFrom(const Login_CTS_ReqServerList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_pwd()) {
      set_pwd(from.pwd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Login_CTS_ReqServerList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Login_CTS_ReqServerList::CopyFrom(const Login_CTS_ReqServerList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Login_CTS_ReqServerList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Login_CTS_ReqServerList::Swap(Login_CTS_ReqServerList* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(pwd_, other->pwd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Login_CTS_ReqServerList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Login_CTS_ReqServerList_descriptor_;
  metadata.reflection = Login_CTS_ReqServerList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Login_STC_ReqPlayerList::kDatalistFieldNumber;
#endif  // !_MSC_VER

Login_STC_ReqPlayerList::Login_STC_ReqPlayerList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Login_STC_ReqPlayerList::InitAsDefaultInstance() {
}

Login_STC_ReqPlayerList::Login_STC_ReqPlayerList(const Login_STC_ReqPlayerList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Login_STC_ReqPlayerList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Login_STC_ReqPlayerList::~Login_STC_ReqPlayerList() {
  SharedDtor();
}

void Login_STC_ReqPlayerList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Login_STC_ReqPlayerList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Login_STC_ReqPlayerList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Login_STC_ReqPlayerList_descriptor_;
}

const Login_STC_ReqPlayerList& Login_STC_ReqPlayerList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login_2eproto();
  return *default_instance_;
}

Login_STC_ReqPlayerList* Login_STC_ReqPlayerList::default_instance_ = NULL;

Login_STC_ReqPlayerList* Login_STC_ReqPlayerList::New() const {
  return new Login_STC_ReqPlayerList;
}

void Login_STC_ReqPlayerList::Clear() {
  datalist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Login_STC_ReqPlayerList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.message.CharShow datalist = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_datalist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_datalist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_datalist;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Login_STC_ReqPlayerList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.message.CharShow datalist = 1;
  for (int i = 0; i < this->datalist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->datalist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Login_STC_ReqPlayerList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.message.CharShow datalist = 1;
  for (int i = 0; i < this->datalist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->datalist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Login_STC_ReqPlayerList::ByteSize() const {
  int total_size = 0;

  // repeated .proto.message.CharShow datalist = 1;
  total_size += 1 * this->datalist_size();
  for (int i = 0; i < this->datalist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->datalist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Login_STC_ReqPlayerList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Login_STC_ReqPlayerList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Login_STC_ReqPlayerList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Login_STC_ReqPlayerList::MergeFrom(const Login_STC_ReqPlayerList& from) {
  GOOGLE_CHECK_NE(&from, this);
  datalist_.MergeFrom(from.datalist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Login_STC_ReqPlayerList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Login_STC_ReqPlayerList::CopyFrom(const Login_STC_ReqPlayerList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Login_STC_ReqPlayerList::IsInitialized() const {

  return true;
}

void Login_STC_ReqPlayerList::Swap(Login_STC_ReqPlayerList* other) {
  if (other != this) {
    datalist_.Swap(&other->datalist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Login_STC_ReqPlayerList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Login_STC_ReqPlayerList_descriptor_;
  metadata.reflection = Login_STC_ReqPlayerList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Login_ServerList::kServerNameFieldNumber;
const int Login_ServerList::kServerIDFieldNumber;
const int Login_ServerList::kStatusFieldNumber;
const int Login_ServerList::kStartTimeFieldNumber;
const int Login_ServerList::kCharShowFieldNumber;
const int Login_ServerList::kAreaIdFieldNumber;
const int Login_ServerList::kAreaNameFieldNumber;
const int Login_ServerList::kIsRecommendFieldNumber;
const int Login_ServerList::kIsNewserverFieldNumber;
#endif  // !_MSC_VER

Login_ServerList::Login_ServerList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Login_ServerList::InitAsDefaultInstance() {
  char_show_ = const_cast< ::proto::message::CharShow*>(&::proto::message::CharShow::default_instance());
}

Login_ServerList::Login_ServerList(const Login_ServerList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Login_ServerList::SharedCtor() {
  _cached_size_ = 0;
  servername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  serverid_ = 0;
  status_ = 0;
  start_time_ = 0;
  char_show_ = NULL;
  area_id_ = 0;
  area_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_recommend_ = 0;
  is_newserver_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Login_ServerList::~Login_ServerList() {
  SharedDtor();
}

void Login_ServerList::SharedDtor() {
  if (servername_ != &::google::protobuf::internal::kEmptyString) {
    delete servername_;
  }
  if (area_name_ != &::google::protobuf::internal::kEmptyString) {
    delete area_name_;
  }
  if (this != default_instance_) {
    delete char_show_;
  }
}

void Login_ServerList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Login_ServerList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Login_ServerList_descriptor_;
}

const Login_ServerList& Login_ServerList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login_2eproto();
  return *default_instance_;
}

Login_ServerList* Login_ServerList::default_instance_ = NULL;

Login_ServerList* Login_ServerList::New() const {
  return new Login_ServerList;
}

void Login_ServerList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_servername()) {
      if (servername_ != &::google::protobuf::internal::kEmptyString) {
        servername_->clear();
      }
    }
    serverid_ = 0;
    status_ = 0;
    start_time_ = 0;
    if (has_char_show()) {
      if (char_show_ != NULL) char_show_->::proto::message::CharShow::Clear();
    }
    area_id_ = 0;
    if (has_area_name()) {
      if (area_name_ != &::google::protobuf::internal::kEmptyString) {
        area_name_->clear();
      }
    }
    is_recommend_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    is_newserver_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Login_ServerList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ServerName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_servername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->servername().data(), this->servername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ServerID;
        break;
      }

      // required int32 ServerID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ServerID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Status;
        break;
      }

      // required int32 Status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_start_time;
        break;
      }

      // required int32 start_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_char_show;
        break;
      }

      // required .proto.message.CharShow char_show = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_char_show:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_char_show()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_area_id;
        break;
      }

      // required int32 area_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_area_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &area_id_)));
          set_has_area_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_area_name;
        break;
      }

      // required string area_name = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_area_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_area_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->area_name().data(), this->area_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_is_recommend;
        break;
      }

      // required int32 is_recommend = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_recommend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_recommend_)));
          set_has_is_recommend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_is_newserver;
        break;
      }

      // optional int32 is_newserver = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_newserver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_newserver_)));
          set_has_is_newserver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Login_ServerList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string ServerName = 1;
  if (has_servername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->servername().data(), this->servername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->servername(), output);
  }

  // required int32 ServerID = 2;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->serverid(), output);
  }

  // required int32 Status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->status(), output);
  }

  // required int32 start_time = 4;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->start_time(), output);
  }

  // required .proto.message.CharShow char_show = 5;
  if (has_char_show()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->char_show(), output);
  }

  // required int32 area_id = 6;
  if (has_area_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->area_id(), output);
  }

  // required string area_name = 7;
  if (has_area_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->area_name().data(), this->area_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->area_name(), output);
  }

  // required int32 is_recommend = 8;
  if (has_is_recommend()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->is_recommend(), output);
  }

  // optional int32 is_newserver = 9;
  if (has_is_newserver()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->is_newserver(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Login_ServerList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string ServerName = 1;
  if (has_servername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->servername().data(), this->servername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->servername(), target);
  }

  // required int32 ServerID = 2;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->serverid(), target);
  }

  // required int32 Status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->status(), target);
  }

  // required int32 start_time = 4;
  if (has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->start_time(), target);
  }

  // required .proto.message.CharShow char_show = 5;
  if (has_char_show()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->char_show(), target);
  }

  // required int32 area_id = 6;
  if (has_area_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->area_id(), target);
  }

  // required string area_name = 7;
  if (has_area_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->area_name().data(), this->area_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->area_name(), target);
  }

  // required int32 is_recommend = 8;
  if (has_is_recommend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->is_recommend(), target);
  }

  // optional int32 is_newserver = 9;
  if (has_is_newserver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->is_newserver(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Login_ServerList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ServerName = 1;
    if (has_servername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->servername());
    }

    // required int32 ServerID = 2;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serverid());
    }

    // required int32 Status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // required int32 start_time = 4;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->start_time());
    }

    // required .proto.message.CharShow char_show = 5;
    if (has_char_show()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->char_show());
    }

    // required int32 area_id = 6;
    if (has_area_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->area_id());
    }

    // required string area_name = 7;
    if (has_area_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->area_name());
    }

    // required int32 is_recommend = 8;
    if (has_is_recommend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_recommend());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 is_newserver = 9;
    if (has_is_newserver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_newserver());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Login_ServerList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Login_ServerList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Login_ServerList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Login_ServerList::MergeFrom(const Login_ServerList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_servername()) {
      set_servername(from.servername());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_char_show()) {
      mutable_char_show()->::proto::message::CharShow::MergeFrom(from.char_show());
    }
    if (from.has_area_id()) {
      set_area_id(from.area_id());
    }
    if (from.has_area_name()) {
      set_area_name(from.area_name());
    }
    if (from.has_is_recommend()) {
      set_is_recommend(from.is_recommend());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_is_newserver()) {
      set_is_newserver(from.is_newserver());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Login_ServerList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Login_ServerList::CopyFrom(const Login_ServerList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Login_ServerList::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void Login_ServerList::Swap(Login_ServerList* other) {
  if (other != this) {
    std::swap(servername_, other->servername_);
    std::swap(serverid_, other->serverid_);
    std::swap(status_, other->status_);
    std::swap(start_time_, other->start_time_);
    std::swap(char_show_, other->char_show_);
    std::swap(area_id_, other->area_id_);
    std::swap(area_name_, other->area_name_);
    std::swap(is_recommend_, other->is_recommend_);
    std::swap(is_newserver_, other->is_newserver_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Login_ServerList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Login_ServerList_descriptor_;
  metadata.reflection = Login_ServerList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Login_STC_ServerList::kListSevFieldNumber;
const int Login_STC_ServerList::kLastServerIdFieldNumber;
const int Login_STC_ServerList::kCurTimeFieldNumber;
#endif  // !_MSC_VER

Login_STC_ServerList::Login_STC_ServerList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Login_STC_ServerList::InitAsDefaultInstance() {
}

Login_STC_ServerList::Login_STC_ServerList(const Login_STC_ServerList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Login_STC_ServerList::SharedCtor() {
  _cached_size_ = 0;
  last_server_id_ = 0;
  cur_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Login_STC_ServerList::~Login_STC_ServerList() {
  SharedDtor();
}

void Login_STC_ServerList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Login_STC_ServerList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Login_STC_ServerList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Login_STC_ServerList_descriptor_;
}

const Login_STC_ServerList& Login_STC_ServerList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login_2eproto();
  return *default_instance_;
}

Login_STC_ServerList* Login_STC_ServerList::default_instance_ = NULL;

Login_STC_ServerList* Login_STC_ServerList::New() const {
  return new Login_STC_ServerList;
}

void Login_STC_ServerList::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    last_server_id_ = 0;
    cur_time_ = 0;
  }
  listsev_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Login_STC_ServerList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.message.Login_ServerList listSev = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_listSev:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_listsev()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_listSev;
        if (input->ExpectTag(16)) goto parse_last_server_id;
        break;
      }

      // required int32 last_server_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &last_server_id_)));
          set_has_last_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cur_time;
        break;
      }

      // required int32 cur_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_time_)));
          set_has_cur_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Login_STC_ServerList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.message.Login_ServerList listSev = 1;
  for (int i = 0; i < this->listsev_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->listsev(i), output);
  }

  // required int32 last_server_id = 2;
  if (has_last_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->last_server_id(), output);
  }

  // required int32 cur_time = 3;
  if (has_cur_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cur_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Login_STC_ServerList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.message.Login_ServerList listSev = 1;
  for (int i = 0; i < this->listsev_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->listsev(i), target);
  }

  // required int32 last_server_id = 2;
  if (has_last_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->last_server_id(), target);
  }

  // required int32 cur_time = 3;
  if (has_cur_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cur_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Login_STC_ServerList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required int32 last_server_id = 2;
    if (has_last_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->last_server_id());
    }

    // required int32 cur_time = 3;
    if (has_cur_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_time());
    }

  }
  // repeated .proto.message.Login_ServerList listSev = 1;
  total_size += 1 * this->listsev_size();
  for (int i = 0; i < this->listsev_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->listsev(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Login_STC_ServerList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Login_STC_ServerList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Login_STC_ServerList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Login_STC_ServerList::MergeFrom(const Login_STC_ServerList& from) {
  GOOGLE_CHECK_NE(&from, this);
  listsev_.MergeFrom(from.listsev_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_last_server_id()) {
      set_last_server_id(from.last_server_id());
    }
    if (from.has_cur_time()) {
      set_cur_time(from.cur_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Login_STC_ServerList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Login_STC_ServerList::CopyFrom(const Login_STC_ServerList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Login_STC_ServerList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  for (int i = 0; i < listsev_size(); i++) {
    if (!this->listsev(i).IsInitialized()) return false;
  }
  return true;
}

void Login_STC_ServerList::Swap(Login_STC_ServerList* other) {
  if (other != this) {
    listsev_.Swap(&other->listsev_);
    std::swap(last_server_id_, other->last_server_id_);
    std::swap(cur_time_, other->cur_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Login_STC_ServerList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Login_STC_ServerList_descriptor_;
  metadata.reflection = Login_STC_ServerList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Login_CTS_CheckAccount::kAccountFieldNumber;
const int Login_CTS_CheckAccount::kPwdFieldNumber;
#endif  // !_MSC_VER

Login_CTS_CheckAccount::Login_CTS_CheckAccount()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Login_CTS_CheckAccount::InitAsDefaultInstance() {
}

Login_CTS_CheckAccount::Login_CTS_CheckAccount(const Login_CTS_CheckAccount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Login_CTS_CheckAccount::SharedCtor() {
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Login_CTS_CheckAccount::~Login_CTS_CheckAccount() {
  SharedDtor();
}

void Login_CTS_CheckAccount::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (pwd_ != &::google::protobuf::internal::kEmptyString) {
    delete pwd_;
  }
  if (this != default_instance_) {
  }
}

void Login_CTS_CheckAccount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Login_CTS_CheckAccount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Login_CTS_CheckAccount_descriptor_;
}

const Login_CTS_CheckAccount& Login_CTS_CheckAccount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login_2eproto();
  return *default_instance_;
}

Login_CTS_CheckAccount* Login_CTS_CheckAccount::default_instance_ = NULL;

Login_CTS_CheckAccount* Login_CTS_CheckAccount::New() const {
  return new Login_CTS_CheckAccount;
}

void Login_CTS_CheckAccount::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_pwd()) {
      if (pwd_ != &::google::protobuf::internal::kEmptyString) {
        pwd_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Login_CTS_CheckAccount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pwd;
        break;
      }

      // required string pwd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pwd().data(), this->pwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Login_CTS_CheckAccount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->account(), output);
  }

  // required string pwd = 2;
  if (has_pwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pwd().data(), this->pwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->pwd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Login_CTS_CheckAccount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account(), target);
  }

  // required string pwd = 2;
  if (has_pwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pwd().data(), this->pwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pwd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Login_CTS_CheckAccount::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // required string pwd = 2;
    if (has_pwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pwd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Login_CTS_CheckAccount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Login_CTS_CheckAccount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Login_CTS_CheckAccount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Login_CTS_CheckAccount::MergeFrom(const Login_CTS_CheckAccount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_pwd()) {
      set_pwd(from.pwd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Login_CTS_CheckAccount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Login_CTS_CheckAccount::CopyFrom(const Login_CTS_CheckAccount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Login_CTS_CheckAccount::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Login_CTS_CheckAccount::Swap(Login_CTS_CheckAccount* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(pwd_, other->pwd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Login_CTS_CheckAccount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Login_CTS_CheckAccount_descriptor_;
  metadata.reflection = Login_CTS_CheckAccount_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Login_STC_CheckAccountRe::kNErrFieldNumber;
#endif  // !_MSC_VER

Login_STC_CheckAccountRe::Login_STC_CheckAccountRe()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Login_STC_CheckAccountRe::InitAsDefaultInstance() {
}

Login_STC_CheckAccountRe::Login_STC_CheckAccountRe(const Login_STC_CheckAccountRe& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Login_STC_CheckAccountRe::SharedCtor() {
  _cached_size_ = 0;
  nerr_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Login_STC_CheckAccountRe::~Login_STC_CheckAccountRe() {
  SharedDtor();
}

void Login_STC_CheckAccountRe::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Login_STC_CheckAccountRe::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Login_STC_CheckAccountRe::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Login_STC_CheckAccountRe_descriptor_;
}

const Login_STC_CheckAccountRe& Login_STC_CheckAccountRe::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login_2eproto();
  return *default_instance_;
}

Login_STC_CheckAccountRe* Login_STC_CheckAccountRe::default_instance_ = NULL;

Login_STC_CheckAccountRe* Login_STC_CheckAccountRe::New() const {
  return new Login_STC_CheckAccountRe;
}

void Login_STC_CheckAccountRe::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nerr_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Login_STC_CheckAccountRe::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 nErr = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nerr_)));
          set_has_nerr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Login_STC_CheckAccountRe::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 nErr = 1;
  if (has_nerr()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nerr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Login_STC_CheckAccountRe::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 nErr = 1;
  if (has_nerr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nerr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Login_STC_CheckAccountRe::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 nErr = 1;
    if (has_nerr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nerr());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Login_STC_CheckAccountRe::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Login_STC_CheckAccountRe* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Login_STC_CheckAccountRe*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Login_STC_CheckAccountRe::MergeFrom(const Login_STC_CheckAccountRe& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nerr()) {
      set_nerr(from.nerr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Login_STC_CheckAccountRe::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Login_STC_CheckAccountRe::CopyFrom(const Login_STC_CheckAccountRe& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Login_STC_CheckAccountRe::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Login_STC_CheckAccountRe::Swap(Login_STC_CheckAccountRe* other) {
  if (other != this) {
    std::swap(nerr_, other->nerr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Login_STC_CheckAccountRe::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Login_STC_CheckAccountRe_descriptor_;
  metadata.reflection = Login_STC_CheckAccountRe_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Login_CTS_SelectServer::kServerIDFieldNumber;
#endif  // !_MSC_VER

Login_CTS_SelectServer::Login_CTS_SelectServer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Login_CTS_SelectServer::InitAsDefaultInstance() {
}

Login_CTS_SelectServer::Login_CTS_SelectServer(const Login_CTS_SelectServer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Login_CTS_SelectServer::SharedCtor() {
  _cached_size_ = 0;
  serverid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Login_CTS_SelectServer::~Login_CTS_SelectServer() {
  SharedDtor();
}

void Login_CTS_SelectServer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Login_CTS_SelectServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Login_CTS_SelectServer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Login_CTS_SelectServer_descriptor_;
}

const Login_CTS_SelectServer& Login_CTS_SelectServer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login_2eproto();
  return *default_instance_;
}

Login_CTS_SelectServer* Login_CTS_SelectServer::default_instance_ = NULL;

Login_CTS_SelectServer* Login_CTS_SelectServer::New() const {
  return new Login_CTS_SelectServer;
}

void Login_CTS_SelectServer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    serverid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Login_CTS_SelectServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ServerID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Login_CTS_SelectServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ServerID = 1;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->serverid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Login_CTS_SelectServer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ServerID = 1;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->serverid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Login_CTS_SelectServer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ServerID = 1;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serverid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Login_CTS_SelectServer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Login_CTS_SelectServer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Login_CTS_SelectServer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Login_CTS_SelectServer::MergeFrom(const Login_CTS_SelectServer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Login_CTS_SelectServer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Login_CTS_SelectServer::CopyFrom(const Login_CTS_SelectServer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Login_CTS_SelectServer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Login_CTS_SelectServer::Swap(Login_CTS_SelectServer* other) {
  if (other != this) {
    std::swap(serverid_, other->serverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Login_CTS_SelectServer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Login_CTS_SelectServer_descriptor_;
  metadata.reflection = Login_CTS_SelectServer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Login_STC_SelectServer::kResultFieldNumber;
const int Login_STC_SelectServer::kIpFieldNumber;
const int Login_STC_SelectServer::kPortFieldNumber;
#endif  // !_MSC_VER

Login_STC_SelectServer::Login_STC_SelectServer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Login_STC_SelectServer::InitAsDefaultInstance() {
}

Login_STC_SelectServer::Login_STC_SelectServer(const Login_STC_SelectServer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Login_STC_SelectServer::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Login_STC_SelectServer::~Login_STC_SelectServer() {
  SharedDtor();
}

void Login_STC_SelectServer::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void Login_STC_SelectServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Login_STC_SelectServer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Login_STC_SelectServer_descriptor_;
}

const Login_STC_SelectServer& Login_STC_SelectServer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login_2eproto();
  return *default_instance_;
}

Login_STC_SelectServer* Login_STC_SelectServer::default_instance_ = NULL;

Login_STC_SelectServer* Login_STC_SelectServer::New() const {
  return new Login_STC_SelectServer;
}

void Login_STC_SelectServer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    port_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Login_STC_SelectServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ip;
        break;
      }

      // optional string ip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_port;
        break;
      }

      // optional int32 port = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Login_STC_SelectServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ip(), output);
  }

  // optional int32 port = 3;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Login_STC_SelectServer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip(), target);
  }

  // optional int32 port = 3;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Login_STC_SelectServer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional string ip = 2;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional int32 port = 3;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Login_STC_SelectServer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Login_STC_SelectServer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Login_STC_SelectServer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Login_STC_SelectServer::MergeFrom(const Login_STC_SelectServer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Login_STC_SelectServer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Login_STC_SelectServer::CopyFrom(const Login_STC_SelectServer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Login_STC_SelectServer::IsInitialized() const {

  return true;
}

void Login_STC_SelectServer::Swap(Login_STC_SelectServer* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Login_STC_SelectServer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Login_STC_SelectServer_descriptor_;
  metadata.reflection = Login_STC_SelectServer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Login_CTS_Register::kAccountFieldNumber;
const int Login_CTS_Register::kPasswordFieldNumber;
#endif  // !_MSC_VER

Login_CTS_Register::Login_CTS_Register()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Login_CTS_Register::InitAsDefaultInstance() {
}

Login_CTS_Register::Login_CTS_Register(const Login_CTS_Register& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Login_CTS_Register::SharedCtor() {
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Login_CTS_Register::~Login_CTS_Register() {
  SharedDtor();
}

void Login_CTS_Register::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void Login_CTS_Register::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Login_CTS_Register::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Login_CTS_Register_descriptor_;
}

const Login_CTS_Register& Login_CTS_Register::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login_2eproto();
  return *default_instance_;
}

Login_CTS_Register* Login_CTS_Register::default_instance_ = NULL;

Login_CTS_Register* Login_CTS_Register::New() const {
  return new Login_CTS_Register;
}

void Login_CTS_Register::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Login_CTS_Register::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }

      // optional string password = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Login_CTS_Register::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->account(), output);
  }

  // optional string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->password(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Login_CTS_Register::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account(), target);
  }

  // optional string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Login_CTS_Register::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional string password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Login_CTS_Register::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Login_CTS_Register* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Login_CTS_Register*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Login_CTS_Register::MergeFrom(const Login_CTS_Register& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Login_CTS_Register::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Login_CTS_Register::CopyFrom(const Login_CTS_Register& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Login_CTS_Register::IsInitialized() const {

  return true;
}

void Login_CTS_Register::Swap(Login_CTS_Register* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(password_, other->password_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Login_CTS_Register::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Login_CTS_Register_descriptor_;
  metadata.reflection = Login_CTS_Register_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Login_STC_Register::kResultFieldNumber;
#endif  // !_MSC_VER

Login_STC_Register::Login_STC_Register()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Login_STC_Register::InitAsDefaultInstance() {
}

Login_STC_Register::Login_STC_Register(const Login_STC_Register& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Login_STC_Register::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Login_STC_Register::~Login_STC_Register() {
  SharedDtor();
}

void Login_STC_Register::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Login_STC_Register::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Login_STC_Register::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Login_STC_Register_descriptor_;
}

const Login_STC_Register& Login_STC_Register::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login_2eproto();
  return *default_instance_;
}

Login_STC_Register* Login_STC_Register::default_instance_ = NULL;

Login_STC_Register* Login_STC_Register::New() const {
  return new Login_STC_Register;
}

void Login_STC_Register::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Login_STC_Register::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Login_STC_Register::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Login_STC_Register::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Login_STC_Register::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Login_STC_Register::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Login_STC_Register* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Login_STC_Register*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Login_STC_Register::MergeFrom(const Login_STC_Register& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Login_STC_Register::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Login_STC_Register::CopyFrom(const Login_STC_Register& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Login_STC_Register::IsInitialized() const {

  return true;
}

void Login_STC_Register::Swap(Login_STC_Register* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Login_STC_Register::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Login_STC_Register_descriptor_;
  metadata.reflection = Login_STC_Register_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Login_CTS_Version::Login_CTS_Version()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Login_CTS_Version::InitAsDefaultInstance() {
}

Login_CTS_Version::Login_CTS_Version(const Login_CTS_Version& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Login_CTS_Version::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Login_CTS_Version::~Login_CTS_Version() {
  SharedDtor();
}

void Login_CTS_Version::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Login_CTS_Version::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Login_CTS_Version::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Login_CTS_Version_descriptor_;
}

const Login_CTS_Version& Login_CTS_Version::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login_2eproto();
  return *default_instance_;
}

Login_CTS_Version* Login_CTS_Version::default_instance_ = NULL;

Login_CTS_Version* Login_CTS_Version::New() const {
  return new Login_CTS_Version;
}

void Login_CTS_Version::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Login_CTS_Version::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Login_CTS_Version::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Login_CTS_Version::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Login_CTS_Version::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Login_CTS_Version::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Login_CTS_Version* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Login_CTS_Version*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Login_CTS_Version::MergeFrom(const Login_CTS_Version& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Login_CTS_Version::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Login_CTS_Version::CopyFrom(const Login_CTS_Version& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Login_CTS_Version::IsInitialized() const {

  return true;
}

void Login_CTS_Version::Swap(Login_CTS_Version* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Login_CTS_Version::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Login_CTS_Version_descriptor_;
  metadata.reflection = Login_CTS_Version_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Login_STC_Version::kVersionFieldNumber;
#endif  // !_MSC_VER

Login_STC_Version::Login_STC_Version()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Login_STC_Version::InitAsDefaultInstance() {
}

Login_STC_Version::Login_STC_Version(const Login_STC_Version& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Login_STC_Version::SharedCtor() {
  _cached_size_ = 0;
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Login_STC_Version::~Login_STC_Version() {
  SharedDtor();
}

void Login_STC_Version::SharedDtor() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (this != default_instance_) {
  }
}

void Login_STC_Version::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Login_STC_Version::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Login_STC_Version_descriptor_;
}

const Login_STC_Version& Login_STC_Version::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login_2eproto();
  return *default_instance_;
}

Login_STC_Version* Login_STC_Version::default_instance_ = NULL;

Login_STC_Version* Login_STC_Version::New() const {
  return new Login_STC_Version;
}

void Login_STC_Version::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Login_STC_Version::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Login_STC_Version::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Login_STC_Version::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Login_STC_Version::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Login_STC_Version::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Login_STC_Version* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Login_STC_Version*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Login_STC_Version::MergeFrom(const Login_STC_Version& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Login_STC_Version::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Login_STC_Version::CopyFrom(const Login_STC_Version& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Login_STC_Version::IsInitialized() const {

  return true;
}

void Login_STC_Version::Swap(Login_STC_Version* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Login_STC_Version::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Login_STC_Version_descriptor_;
  metadata.reflection = Login_STC_Version_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Login_CTS_QueryPlayerData::kAccountFieldNumber;
const int Login_CTS_QueryPlayerData::kServerIdFieldNumber;
#endif  // !_MSC_VER

Login_CTS_QueryPlayerData::Login_CTS_QueryPlayerData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Login_CTS_QueryPlayerData::InitAsDefaultInstance() {
}

Login_CTS_QueryPlayerData::Login_CTS_QueryPlayerData(const Login_CTS_QueryPlayerData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Login_CTS_QueryPlayerData::SharedCtor() {
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  serverid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Login_CTS_QueryPlayerData::~Login_CTS_QueryPlayerData() {
  SharedDtor();
}

void Login_CTS_QueryPlayerData::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (this != default_instance_) {
  }
}

void Login_CTS_QueryPlayerData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Login_CTS_QueryPlayerData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Login_CTS_QueryPlayerData_descriptor_;
}

const Login_CTS_QueryPlayerData& Login_CTS_QueryPlayerData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login_2eproto();
  return *default_instance_;
}

Login_CTS_QueryPlayerData* Login_CTS_QueryPlayerData::default_instance_ = NULL;

Login_CTS_QueryPlayerData* Login_CTS_QueryPlayerData::New() const {
  return new Login_CTS_QueryPlayerData;
}

void Login_CTS_QueryPlayerData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    serverid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Login_CTS_QueryPlayerData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ServerId;
        break;
      }

      // required int32 ServerId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ServerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Login_CTS_QueryPlayerData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string Account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->account(), output);
  }

  // required int32 ServerId = 2;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->serverid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Login_CTS_QueryPlayerData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string Account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account(), target);
  }

  // required int32 ServerId = 2;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->serverid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Login_CTS_QueryPlayerData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string Account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // required int32 ServerId = 2;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serverid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Login_CTS_QueryPlayerData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Login_CTS_QueryPlayerData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Login_CTS_QueryPlayerData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Login_CTS_QueryPlayerData::MergeFrom(const Login_CTS_QueryPlayerData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Login_CTS_QueryPlayerData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Login_CTS_QueryPlayerData::CopyFrom(const Login_CTS_QueryPlayerData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Login_CTS_QueryPlayerData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Login_CTS_QueryPlayerData::Swap(Login_CTS_QueryPlayerData* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(serverid_, other->serverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Login_CTS_QueryPlayerData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Login_CTS_QueryPlayerData_descriptor_;
  metadata.reflection = Login_CTS_QueryPlayerData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Login_STC_QueryPlayerData::kRtFieldNumber;
#endif  // !_MSC_VER

Login_STC_QueryPlayerData::Login_STC_QueryPlayerData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Login_STC_QueryPlayerData::InitAsDefaultInstance() {
}

Login_STC_QueryPlayerData::Login_STC_QueryPlayerData(const Login_STC_QueryPlayerData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Login_STC_QueryPlayerData::SharedCtor() {
  _cached_size_ = 0;
  rt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Login_STC_QueryPlayerData::~Login_STC_QueryPlayerData() {
  SharedDtor();
}

void Login_STC_QueryPlayerData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Login_STC_QueryPlayerData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Login_STC_QueryPlayerData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Login_STC_QueryPlayerData_descriptor_;
}

const Login_STC_QueryPlayerData& Login_STC_QueryPlayerData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login_2eproto();
  return *default_instance_;
}

Login_STC_QueryPlayerData* Login_STC_QueryPlayerData::default_instance_ = NULL;

Login_STC_QueryPlayerData* Login_STC_QueryPlayerData::New() const {
  return new Login_STC_QueryPlayerData;
}

void Login_STC_QueryPlayerData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rt_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Login_STC_QueryPlayerData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 rt = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rt_)));
          set_has_rt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Login_STC_QueryPlayerData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 rt = 1;
  if (has_rt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Login_STC_QueryPlayerData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 rt = 1;
  if (has_rt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Login_STC_QueryPlayerData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 rt = 1;
    if (has_rt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Login_STC_QueryPlayerData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Login_STC_QueryPlayerData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Login_STC_QueryPlayerData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Login_STC_QueryPlayerData::MergeFrom(const Login_STC_QueryPlayerData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rt()) {
      set_rt(from.rt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Login_STC_QueryPlayerData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Login_STC_QueryPlayerData::CopyFrom(const Login_STC_QueryPlayerData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Login_STC_QueryPlayerData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Login_STC_QueryPlayerData::Swap(Login_STC_QueryPlayerData* other) {
  if (other != this) {
    std::swap(rt_, other->rt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Login_STC_QueryPlayerData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Login_STC_QueryPlayerData_descriptor_;
  metadata.reflection = Login_STC_QueryPlayerData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Login_CTS_CreateChar::kServerIdFieldNumber;
const int Login_CTS_CreateChar::kSexFieldNumber;
const int Login_CTS_CreateChar::kWeaponFieldNumber;
const int Login_CTS_CreateChar::kCharNameFieldNumber;
const int Login_CTS_CreateChar::kAccountFieldNumber;
#endif  // !_MSC_VER

Login_CTS_CreateChar::Login_CTS_CreateChar()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Login_CTS_CreateChar::InitAsDefaultInstance() {
}

Login_CTS_CreateChar::Login_CTS_CreateChar(const Login_CTS_CreateChar& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Login_CTS_CreateChar::SharedCtor() {
  _cached_size_ = 0;
  serverid_ = 0;
  sex_ = 0;
  weapon_ = 0;
  charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Login_CTS_CreateChar::~Login_CTS_CreateChar() {
  SharedDtor();
}

void Login_CTS_CreateChar::SharedDtor() {
  if (charname_ != &::google::protobuf::internal::kEmptyString) {
    delete charname_;
  }
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (this != default_instance_) {
  }
}

void Login_CTS_CreateChar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Login_CTS_CreateChar::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Login_CTS_CreateChar_descriptor_;
}

const Login_CTS_CreateChar& Login_CTS_CreateChar::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login_2eproto();
  return *default_instance_;
}

Login_CTS_CreateChar* Login_CTS_CreateChar::default_instance_ = NULL;

Login_CTS_CreateChar* Login_CTS_CreateChar::New() const {
  return new Login_CTS_CreateChar;
}

void Login_CTS_CreateChar::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    serverid_ = 0;
    sex_ = 0;
    weapon_ = 0;
    if (has_charname()) {
      if (charname_ != &::google::protobuf::internal::kEmptyString) {
        charname_->clear();
      }
    }
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Login_CTS_CreateChar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ServerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sex;
        break;
      }

      // required int32 sex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_weapon;
        break;
      }

      // required int32 weapon = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weapon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weapon_)));
          set_has_weapon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_CharName;
        break;
      }

      // required string CharName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CharName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_charname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->charname().data(), this->charname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_account;
        break;
      }

      // required string account = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Login_CTS_CreateChar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ServerId = 1;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->serverid(), output);
  }

  // required int32 sex = 2;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sex(), output);
  }

  // required int32 weapon = 3;
  if (has_weapon()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->weapon(), output);
  }

  // required string CharName = 4;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->charname(), output);
  }

  // required string account = 5;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->account(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Login_CTS_CreateChar::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ServerId = 1;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->serverid(), target);
  }

  // required int32 sex = 2;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sex(), target);
  }

  // required int32 weapon = 3;
  if (has_weapon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->weapon(), target);
  }

  // required string CharName = 4;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->charname(), target);
  }

  // required string account = 5;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->account(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Login_CTS_CreateChar::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ServerId = 1;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serverid());
    }

    // required int32 sex = 2;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }

    // required int32 weapon = 3;
    if (has_weapon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->weapon());
    }

    // required string CharName = 4;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->charname());
    }

    // required string account = 5;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Login_CTS_CreateChar::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Login_CTS_CreateChar* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Login_CTS_CreateChar*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Login_CTS_CreateChar::MergeFrom(const Login_CTS_CreateChar& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_weapon()) {
      set_weapon(from.weapon());
    }
    if (from.has_charname()) {
      set_charname(from.charname());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Login_CTS_CreateChar::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Login_CTS_CreateChar::CopyFrom(const Login_CTS_CreateChar& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Login_CTS_CreateChar::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void Login_CTS_CreateChar::Swap(Login_CTS_CreateChar* other) {
  if (other != this) {
    std::swap(serverid_, other->serverid_);
    std::swap(sex_, other->sex_);
    std::swap(weapon_, other->weapon_);
    std::swap(charname_, other->charname_);
    std::swap(account_, other->account_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Login_CTS_CreateChar::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Login_CTS_CreateChar_descriptor_;
  metadata.reflection = Login_CTS_CreateChar_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Login_STC_CreateChar::kRtFieldNumber;
#endif  // !_MSC_VER

Login_STC_CreateChar::Login_STC_CreateChar()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Login_STC_CreateChar::InitAsDefaultInstance() {
}

Login_STC_CreateChar::Login_STC_CreateChar(const Login_STC_CreateChar& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Login_STC_CreateChar::SharedCtor() {
  _cached_size_ = 0;
  rt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Login_STC_CreateChar::~Login_STC_CreateChar() {
  SharedDtor();
}

void Login_STC_CreateChar::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Login_STC_CreateChar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Login_STC_CreateChar::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Login_STC_CreateChar_descriptor_;
}

const Login_STC_CreateChar& Login_STC_CreateChar::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login_2eproto();
  return *default_instance_;
}

Login_STC_CreateChar* Login_STC_CreateChar::default_instance_ = NULL;

Login_STC_CreateChar* Login_STC_CreateChar::New() const {
  return new Login_STC_CreateChar;
}

void Login_STC_CreateChar::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rt_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Login_STC_CreateChar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 rt = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rt_)));
          set_has_rt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Login_STC_CreateChar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 rt = 1;
  if (has_rt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Login_STC_CreateChar::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 rt = 1;
  if (has_rt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Login_STC_CreateChar::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 rt = 1;
    if (has_rt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Login_STC_CreateChar::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Login_STC_CreateChar* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Login_STC_CreateChar*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Login_STC_CreateChar::MergeFrom(const Login_STC_CreateChar& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rt()) {
      set_rt(from.rt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Login_STC_CreateChar::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Login_STC_CreateChar::CopyFrom(const Login_STC_CreateChar& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Login_STC_CreateChar::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Login_STC_CreateChar::Swap(Login_STC_CreateChar* other) {
  if (other != this) {
    std::swap(rt_, other->rt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Login_STC_CreateChar::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Login_STC_CreateChar_descriptor_;
  metadata.reflection = Login_STC_CreateChar_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Login_STC_PlayerData::kCharidFieldNumber;
const int Login_STC_PlayerData::kSexFieldNumber;
const int Login_STC_PlayerData::kWeaponFieldNumber;
const int Login_STC_PlayerData::kCharnameFieldNumber;
const int Login_STC_PlayerData::kPlayeridFieldNumber;
const int Login_STC_PlayerData::kLevelFieldNumber;
const int Login_STC_PlayerData::kMoneyItemFieldNumber;
const int Login_STC_PlayerData::kEquipListFieldNumber;
const int Login_STC_PlayerData::kCurTimeFieldNumber;
const int Login_STC_PlayerData::kQuestioncountsFieldNumber;
const int Login_STC_PlayerData::kRightcountsFieldNumber;
const int Login_STC_PlayerData::kRewardstateFieldNumber;
const int Login_STC_PlayerData::kButtonIdListFieldNumber;
const int Login_STC_PlayerData::kActivityListFieldNumber;
const int Login_STC_PlayerData::kGuildidFieldNumber;
const int Login_STC_PlayerData::kMoveSpeedFieldNumber;
const int Login_STC_PlayerData::kJewelryIdListFieldNumber;
const int Login_STC_PlayerData::kTitleIDFieldNumber;
const int Login_STC_PlayerData::kActivityLoopFieldNumber;
const int Login_STC_PlayerData::kVipLevelFieldNumber;
const int Login_STC_PlayerData::kReliveTimesFieldNumber;
const int Login_STC_PlayerData::kTitlenameFieldNumber;
const int Login_STC_PlayerData::kTitleishideFieldNumber;
const int Login_STC_PlayerData::kPosidListFieldNumber;
const int Login_STC_PlayerData::kGuildOfficeFieldNumber;
const int Login_STC_PlayerData::kTrialDungeonIdFieldNumber;
const int Login_STC_PlayerData::kCurIdentityFieldNumber;
const int Login_STC_PlayerData::kCurMultiChivalrousFieldNumber;
const int Login_STC_PlayerData::kCurEpicChivalrousFieldNumber;
const int Login_STC_PlayerData::kUiSuitIdFieldNumber;
const int Login_STC_PlayerData::kBoatInfoFieldNumber;
const int Login_STC_PlayerData::kUiAttackModeFieldNumber;
const int Login_STC_PlayerData::kFinishkeyFieldNumber;
const int Login_STC_PlayerData::kGuidepartFieldNumber;
const int Login_STC_PlayerData::kCreatetimeFieldNumber;
#endif  // !_MSC_VER

Login_STC_PlayerData::Login_STC_PlayerData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Login_STC_PlayerData::InitAsDefaultInstance() {
  money_item_ = const_cast< ::proto::message::MoneyItem*>(&::proto::message::MoneyItem::default_instance());
  boat_info_ = const_cast< ::proto::message::BattleBoatInfo*>(&::proto::message::BattleBoatInfo::default_instance());
}

Login_STC_PlayerData::Login_STC_PlayerData(const Login_STC_PlayerData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Login_STC_PlayerData::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  sex_ = 0;
  weapon_ = 0;
  charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  playerid_ = 0u;
  level_ = 0;
  money_item_ = NULL;
  cur_time_ = 0;
  questioncounts_ = 0u;
  rightcounts_ = 0u;
  rewardstate_ = 0u;
  guildid_ = GOOGLE_ULONGLONG(0);
  movespeed_ = 0u;
  titleid_ = 0;
  activity_loop_ = 0;
  vip_level_ = 0;
  relive_times_ = 0;
  titlename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  titleishide_ = 0;
  guild_office_ = 0;
  trial_dungeon_id_ = 0;
  cur_identity_ = 0;
  cur_multichivalrous_ = 0;
  cur_epicchivalrous_ = 0;
  uisuitid_ = 0u;
  boat_info_ = NULL;
  uiattackmode_ = 0u;
  finishkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  guidepart_ = 0u;
  createtime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Login_STC_PlayerData::~Login_STC_PlayerData() {
  SharedDtor();
}

void Login_STC_PlayerData::SharedDtor() {
  if (charname_ != &::google::protobuf::internal::kEmptyString) {
    delete charname_;
  }
  if (titlename_ != &::google::protobuf::internal::kEmptyString) {
    delete titlename_;
  }
  if (finishkey_ != &::google::protobuf::internal::kEmptyString) {
    delete finishkey_;
  }
  if (this != default_instance_) {
    delete money_item_;
    delete boat_info_;
  }
}

void Login_STC_PlayerData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Login_STC_PlayerData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Login_STC_PlayerData_descriptor_;
}

const Login_STC_PlayerData& Login_STC_PlayerData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login_2eproto();
  return *default_instance_;
}

Login_STC_PlayerData* Login_STC_PlayerData::default_instance_ = NULL;

Login_STC_PlayerData* Login_STC_PlayerData::New() const {
  return new Login_STC_PlayerData;
}

void Login_STC_PlayerData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_ULONGLONG(0);
    sex_ = 0;
    weapon_ = 0;
    if (has_charname()) {
      if (charname_ != &::google::protobuf::internal::kEmptyString) {
        charname_->clear();
      }
    }
    playerid_ = 0u;
    level_ = 0;
    if (has_money_item()) {
      if (money_item_ != NULL) money_item_->::proto::message::MoneyItem::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    cur_time_ = 0;
    questioncounts_ = 0u;
    rightcounts_ = 0u;
    rewardstate_ = 0u;
    guildid_ = GOOGLE_ULONGLONG(0);
    movespeed_ = 0u;
  }
  if (_has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    titleid_ = 0;
    activity_loop_ = 0;
    vip_level_ = 0;
    relive_times_ = 0;
    if (has_titlename()) {
      if (titlename_ != &::google::protobuf::internal::kEmptyString) {
        titlename_->clear();
      }
    }
    titleishide_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    guild_office_ = 0;
    trial_dungeon_id_ = 0;
    cur_identity_ = 0;
    cur_multichivalrous_ = 0;
    cur_epicchivalrous_ = 0;
    uisuitid_ = 0u;
    if (has_boat_info()) {
      if (boat_info_ != NULL) boat_info_->::proto::message::BattleBoatInfo::Clear();
    }
    uiattackmode_ = 0u;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (has_finishkey()) {
      if (finishkey_ != &::google::protobuf::internal::kEmptyString) {
        finishkey_->clear();
      }
    }
    guidepart_ = 0u;
    createtime_ = 0u;
  }
  equip_list_.Clear();
  button_id_list_.Clear();
  activity_list_.Clear();
  jewelry_id_list_.Clear();
  posid_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Login_STC_PlayerData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sex;
        break;
      }

      // required int32 sex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_weapon;
        break;
      }

      // required int32 weapon = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weapon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weapon_)));
          set_has_weapon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_charname;
        break;
      }

      // required string charname = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_charname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_charname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->charname().data(), this->charname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_playerid;
        break;
      }

      // required uint32 playerid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_level;
        break;
      }

      // required int32 level = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_money_item;
        break;
      }

      // required .proto.message.MoneyItem money_item = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_money_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_money_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_equip_list;
        break;
      }

      // repeated .proto.message.Equip equip_list = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equip_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_equip_list;
        if (input->ExpectTag(72)) goto parse_cur_time;
        break;
      }

      // optional int32 cur_time = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_time_)));
          set_has_cur_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_questioncounts;
        break;
      }

      // optional uint32 questioncounts = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_questioncounts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &questioncounts_)));
          set_has_questioncounts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_rightcounts;
        break;
      }

      // optional uint32 rightcounts = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rightcounts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rightcounts_)));
          set_has_rightcounts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_rewardstate;
        break;
      }

      // optional uint32 rewardstate = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rewardstate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rewardstate_)));
          set_has_rewardstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_button_id_list;
        break;
      }

      // repeated .proto.message.IDNum button_id_list = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_button_id_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_button_id_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_button_id_list;
        if (input->ExpectTag(114)) goto parse_activity_list;
        break;
      }

      // repeated .proto.message.ActivityIDTimes activity_list = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_activity_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_activity_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_activity_list;
        if (input->ExpectTag(120)) goto parse_guildid;
        break;
      }

      // optional uint64 guildid = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guildid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_MoveSpeed;
        break;
      }

      // optional uint32 MoveSpeed = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MoveSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &movespeed_)));
          set_has_movespeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_jewelry_id_list;
        break;
      }

      // repeated uint32 jewelry_id_list = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jewelry_id_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 136, input, this->mutable_jewelry_id_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_jewelry_id_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_jewelry_id_list;
        if (input->ExpectTag(144)) goto parse_titleID;
        break;
      }

      // optional int32 titleID = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_titleID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &titleid_)));
          set_has_titleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_activity_loop;
        break;
      }

      // optional int32 activity_loop = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_activity_loop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &activity_loop_)));
          set_has_activity_loop();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_vip_level;
        break;
      }

      // optional int32 vip_level = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_level_)));
          set_has_vip_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_relive_times;
        break;
      }

      // optional int32 relive_times = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_relive_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &relive_times_)));
          set_has_relive_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_titlename;
        break;
      }

      // optional string titlename = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_titlename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_titlename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->titlename().data(), this->titlename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_titleishide;
        break;
      }

      // optional int32 titleishide = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_titleishide:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &titleishide_)));
          set_has_titleishide();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_posid_list;
        break;
      }

      // repeated int32 posid_list = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_posid_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 192, input, this->mutable_posid_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_posid_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_posid_list;
        if (input->ExpectTag(200)) goto parse_guild_office;
        break;
      }

      // optional int32 guild_office = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guild_office:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guild_office_)));
          set_has_guild_office();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_trial_dungeon_id;
        break;
      }

      // optional int32 trial_dungeon_id = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trial_dungeon_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trial_dungeon_id_)));
          set_has_trial_dungeon_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_cur_identity;
        break;
      }

      // optional int32 cur_identity = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_identity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_identity_)));
          set_has_cur_identity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_cur_MultiChivalrous;
        break;
      }

      // optional int32 cur_MultiChivalrous = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_MultiChivalrous:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_multichivalrous_)));
          set_has_cur_multichivalrous();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_cur_EpicChivalrous;
        break;
      }

      // optional int32 cur_EpicChivalrous = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_EpicChivalrous:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_epicchivalrous_)));
          set_has_cur_epicchivalrous();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_uiSuitId;
        break;
      }

      // optional uint32 uiSuitId = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiSuitId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uisuitid_)));
          set_has_uisuitid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse_boat_info;
        break;
      }

      // optional .proto.message.BattleBoatInfo boat_info = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_boat_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_boat_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_uiAttackMode;
        break;
      }

      // optional uint32 uiAttackMode = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiAttackMode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiattackmode_)));
          set_has_uiattackmode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(266)) goto parse_finishkey;
        break;
      }

      // optional string finishkey = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_finishkey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_finishkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->finishkey().data(), this->finishkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_guidepart;
        break;
      }

      // optional uint32 guidepart = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guidepart:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guidepart_)));
          set_has_guidepart();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_createtime;
        break;
      }

      // optional uint32 createtime = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_createtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Login_STC_PlayerData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  // required int32 sex = 2;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sex(), output);
  }

  // required int32 weapon = 3;
  if (has_weapon()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->weapon(), output);
  }

  // required string charname = 4;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->charname(), output);
  }

  // required uint32 playerid = 5;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->playerid(), output);
  }

  // required int32 level = 6;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->level(), output);
  }

  // required .proto.message.MoneyItem money_item = 7;
  if (has_money_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->money_item(), output);
  }

  // repeated .proto.message.Equip equip_list = 8;
  for (int i = 0; i < this->equip_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->equip_list(i), output);
  }

  // optional int32 cur_time = 9;
  if (has_cur_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->cur_time(), output);
  }

  // optional uint32 questioncounts = 10;
  if (has_questioncounts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->questioncounts(), output);
  }

  // optional uint32 rightcounts = 11;
  if (has_rightcounts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->rightcounts(), output);
  }

  // optional uint32 rewardstate = 12;
  if (has_rewardstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->rewardstate(), output);
  }

  // repeated .proto.message.IDNum button_id_list = 13;
  for (int i = 0; i < this->button_id_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->button_id_list(i), output);
  }

  // repeated .proto.message.ActivityIDTimes activity_list = 14;
  for (int i = 0; i < this->activity_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->activity_list(i), output);
  }

  // optional uint64 guildid = 15;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(15, this->guildid(), output);
  }

  // optional uint32 MoveSpeed = 16;
  if (has_movespeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->movespeed(), output);
  }

  // repeated uint32 jewelry_id_list = 17;
  for (int i = 0; i < this->jewelry_id_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      17, this->jewelry_id_list(i), output);
  }

  // optional int32 titleID = 18;
  if (has_titleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->titleid(), output);
  }

  // optional int32 activity_loop = 19;
  if (has_activity_loop()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->activity_loop(), output);
  }

  // optional int32 vip_level = 20;
  if (has_vip_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->vip_level(), output);
  }

  // optional int32 relive_times = 21;
  if (has_relive_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->relive_times(), output);
  }

  // optional string titlename = 22;
  if (has_titlename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->titlename().data(), this->titlename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      22, this->titlename(), output);
  }

  // optional int32 titleishide = 23;
  if (has_titleishide()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->titleishide(), output);
  }

  // repeated int32 posid_list = 24;
  for (int i = 0; i < this->posid_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      24, this->posid_list(i), output);
  }

  // optional int32 guild_office = 25;
  if (has_guild_office()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->guild_office(), output);
  }

  // optional int32 trial_dungeon_id = 26;
  if (has_trial_dungeon_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->trial_dungeon_id(), output);
  }

  // optional int32 cur_identity = 27;
  if (has_cur_identity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->cur_identity(), output);
  }

  // optional int32 cur_MultiChivalrous = 28;
  if (has_cur_multichivalrous()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->cur_multichivalrous(), output);
  }

  // optional int32 cur_EpicChivalrous = 29;
  if (has_cur_epicchivalrous()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->cur_epicchivalrous(), output);
  }

  // optional uint32 uiSuitId = 30;
  if (has_uisuitid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->uisuitid(), output);
  }

  // optional .proto.message.BattleBoatInfo boat_info = 31;
  if (has_boat_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, this->boat_info(), output);
  }

  // optional uint32 uiAttackMode = 32;
  if (has_uiattackmode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(32, this->uiattackmode(), output);
  }

  // optional string finishkey = 33;
  if (has_finishkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->finishkey().data(), this->finishkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      33, this->finishkey(), output);
  }

  // optional uint32 guidepart = 34;
  if (has_guidepart()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(34, this->guidepart(), output);
  }

  // optional uint32 createtime = 35;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(35, this->createtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Login_STC_PlayerData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  // required int32 sex = 2;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sex(), target);
  }

  // required int32 weapon = 3;
  if (has_weapon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->weapon(), target);
  }

  // required string charname = 4;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->charname(), target);
  }

  // required uint32 playerid = 5;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->playerid(), target);
  }

  // required int32 level = 6;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->level(), target);
  }

  // required .proto.message.MoneyItem money_item = 7;
  if (has_money_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->money_item(), target);
  }

  // repeated .proto.message.Equip equip_list = 8;
  for (int i = 0; i < this->equip_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->equip_list(i), target);
  }

  // optional int32 cur_time = 9;
  if (has_cur_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->cur_time(), target);
  }

  // optional uint32 questioncounts = 10;
  if (has_questioncounts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->questioncounts(), target);
  }

  // optional uint32 rightcounts = 11;
  if (has_rightcounts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->rightcounts(), target);
  }

  // optional uint32 rewardstate = 12;
  if (has_rewardstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->rewardstate(), target);
  }

  // repeated .proto.message.IDNum button_id_list = 13;
  for (int i = 0; i < this->button_id_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->button_id_list(i), target);
  }

  // repeated .proto.message.ActivityIDTimes activity_list = 14;
  for (int i = 0; i < this->activity_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->activity_list(i), target);
  }

  // optional uint64 guildid = 15;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(15, this->guildid(), target);
  }

  // optional uint32 MoveSpeed = 16;
  if (has_movespeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->movespeed(), target);
  }

  // repeated uint32 jewelry_id_list = 17;
  for (int i = 0; i < this->jewelry_id_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(17, this->jewelry_id_list(i), target);
  }

  // optional int32 titleID = 18;
  if (has_titleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->titleid(), target);
  }

  // optional int32 activity_loop = 19;
  if (has_activity_loop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->activity_loop(), target);
  }

  // optional int32 vip_level = 20;
  if (has_vip_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->vip_level(), target);
  }

  // optional int32 relive_times = 21;
  if (has_relive_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->relive_times(), target);
  }

  // optional string titlename = 22;
  if (has_titlename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->titlename().data(), this->titlename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->titlename(), target);
  }

  // optional int32 titleishide = 23;
  if (has_titleishide()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->titleishide(), target);
  }

  // repeated int32 posid_list = 24;
  for (int i = 0; i < this->posid_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(24, this->posid_list(i), target);
  }

  // optional int32 guild_office = 25;
  if (has_guild_office()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->guild_office(), target);
  }

  // optional int32 trial_dungeon_id = 26;
  if (has_trial_dungeon_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->trial_dungeon_id(), target);
  }

  // optional int32 cur_identity = 27;
  if (has_cur_identity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->cur_identity(), target);
  }

  // optional int32 cur_MultiChivalrous = 28;
  if (has_cur_multichivalrous()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->cur_multichivalrous(), target);
  }

  // optional int32 cur_EpicChivalrous = 29;
  if (has_cur_epicchivalrous()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->cur_epicchivalrous(), target);
  }

  // optional uint32 uiSuitId = 30;
  if (has_uisuitid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->uisuitid(), target);
  }

  // optional .proto.message.BattleBoatInfo boat_info = 31;
  if (has_boat_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        31, this->boat_info(), target);
  }

  // optional uint32 uiAttackMode = 32;
  if (has_uiattackmode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(32, this->uiattackmode(), target);
  }

  // optional string finishkey = 33;
  if (has_finishkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->finishkey().data(), this->finishkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        33, this->finishkey(), target);
  }

  // optional uint32 guidepart = 34;
  if (has_guidepart()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(34, this->guidepart(), target);
  }

  // optional uint32 createtime = 35;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(35, this->createtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Login_STC_PlayerData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // required int32 sex = 2;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }

    // required int32 weapon = 3;
    if (has_weapon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->weapon());
    }

    // required string charname = 4;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->charname());
    }

    // required uint32 playerid = 5;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // required int32 level = 6;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required .proto.message.MoneyItem money_item = 7;
    if (has_money_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->money_item());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 cur_time = 9;
    if (has_cur_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_time());
    }

    // optional uint32 questioncounts = 10;
    if (has_questioncounts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->questioncounts());
    }

    // optional uint32 rightcounts = 11;
    if (has_rightcounts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rightcounts());
    }

    // optional uint32 rewardstate = 12;
    if (has_rewardstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rewardstate());
    }

    // optional uint64 guildid = 15;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

    // optional uint32 MoveSpeed = 16;
    if (has_movespeed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->movespeed());
    }

  }
  if (_has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    // optional int32 titleID = 18;
    if (has_titleid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->titleid());
    }

    // optional int32 activity_loop = 19;
    if (has_activity_loop()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->activity_loop());
    }

    // optional int32 vip_level = 20;
    if (has_vip_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip_level());
    }

    // optional int32 relive_times = 21;
    if (has_relive_times()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->relive_times());
    }

    // optional string titlename = 22;
    if (has_titlename()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->titlename());
    }

    // optional int32 titleishide = 23;
    if (has_titleishide()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->titleishide());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 guild_office = 25;
    if (has_guild_office()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guild_office());
    }

    // optional int32 trial_dungeon_id = 26;
    if (has_trial_dungeon_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->trial_dungeon_id());
    }

    // optional int32 cur_identity = 27;
    if (has_cur_identity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_identity());
    }

    // optional int32 cur_MultiChivalrous = 28;
    if (has_cur_multichivalrous()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_multichivalrous());
    }

    // optional int32 cur_EpicChivalrous = 29;
    if (has_cur_epicchivalrous()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_epicchivalrous());
    }

    // optional uint32 uiSuitId = 30;
    if (has_uisuitid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uisuitid());
    }

    // optional .proto.message.BattleBoatInfo boat_info = 31;
    if (has_boat_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->boat_info());
    }

    // optional uint32 uiAttackMode = 32;
    if (has_uiattackmode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiattackmode());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional string finishkey = 33;
    if (has_finishkey()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->finishkey());
    }

    // optional uint32 guidepart = 34;
    if (has_guidepart()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guidepart());
    }

    // optional uint32 createtime = 35;
    if (has_createtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->createtime());
    }

  }
  // repeated .proto.message.Equip equip_list = 8;
  total_size += 1 * this->equip_list_size();
  for (int i = 0; i < this->equip_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equip_list(i));
  }

  // repeated .proto.message.IDNum button_id_list = 13;
  total_size += 1 * this->button_id_list_size();
  for (int i = 0; i < this->button_id_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->button_id_list(i));
  }

  // repeated .proto.message.ActivityIDTimes activity_list = 14;
  total_size += 1 * this->activity_list_size();
  for (int i = 0; i < this->activity_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->activity_list(i));
  }

  // repeated uint32 jewelry_id_list = 17;
  {
    int data_size = 0;
    for (int i = 0; i < this->jewelry_id_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->jewelry_id_list(i));
    }
    total_size += 2 * this->jewelry_id_list_size() + data_size;
  }

  // repeated int32 posid_list = 24;
  {
    int data_size = 0;
    for (int i = 0; i < this->posid_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->posid_list(i));
    }
    total_size += 2 * this->posid_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Login_STC_PlayerData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Login_STC_PlayerData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Login_STC_PlayerData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Login_STC_PlayerData::MergeFrom(const Login_STC_PlayerData& from) {
  GOOGLE_CHECK_NE(&from, this);
  equip_list_.MergeFrom(from.equip_list_);
  button_id_list_.MergeFrom(from.button_id_list_);
  activity_list_.MergeFrom(from.activity_list_);
  jewelry_id_list_.MergeFrom(from.jewelry_id_list_);
  posid_list_.MergeFrom(from.posid_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_weapon()) {
      set_weapon(from.weapon());
    }
    if (from.has_charname()) {
      set_charname(from.charname());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_money_item()) {
      mutable_money_item()->::proto::message::MoneyItem::MergeFrom(from.money_item());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_cur_time()) {
      set_cur_time(from.cur_time());
    }
    if (from.has_questioncounts()) {
      set_questioncounts(from.questioncounts());
    }
    if (from.has_rightcounts()) {
      set_rightcounts(from.rightcounts());
    }
    if (from.has_rewardstate()) {
      set_rewardstate(from.rewardstate());
    }
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_movespeed()) {
      set_movespeed(from.movespeed());
    }
  }
  if (from._has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    if (from.has_titleid()) {
      set_titleid(from.titleid());
    }
    if (from.has_activity_loop()) {
      set_activity_loop(from.activity_loop());
    }
    if (from.has_vip_level()) {
      set_vip_level(from.vip_level());
    }
    if (from.has_relive_times()) {
      set_relive_times(from.relive_times());
    }
    if (from.has_titlename()) {
      set_titlename(from.titlename());
    }
    if (from.has_titleishide()) {
      set_titleishide(from.titleishide());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_guild_office()) {
      set_guild_office(from.guild_office());
    }
    if (from.has_trial_dungeon_id()) {
      set_trial_dungeon_id(from.trial_dungeon_id());
    }
    if (from.has_cur_identity()) {
      set_cur_identity(from.cur_identity());
    }
    if (from.has_cur_multichivalrous()) {
      set_cur_multichivalrous(from.cur_multichivalrous());
    }
    if (from.has_cur_epicchivalrous()) {
      set_cur_epicchivalrous(from.cur_epicchivalrous());
    }
    if (from.has_uisuitid()) {
      set_uisuitid(from.uisuitid());
    }
    if (from.has_boat_info()) {
      mutable_boat_info()->::proto::message::BattleBoatInfo::MergeFrom(from.boat_info());
    }
    if (from.has_uiattackmode()) {
      set_uiattackmode(from.uiattackmode());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_finishkey()) {
      set_finishkey(from.finishkey());
    }
    if (from.has_guidepart()) {
      set_guidepart(from.guidepart());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Login_STC_PlayerData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Login_STC_PlayerData::CopyFrom(const Login_STC_PlayerData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Login_STC_PlayerData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  if (has_money_item()) {
    if (!this->money_item().IsInitialized()) return false;
  }
  return true;
}

void Login_STC_PlayerData::Swap(Login_STC_PlayerData* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(sex_, other->sex_);
    std::swap(weapon_, other->weapon_);
    std::swap(charname_, other->charname_);
    std::swap(playerid_, other->playerid_);
    std::swap(level_, other->level_);
    std::swap(money_item_, other->money_item_);
    equip_list_.Swap(&other->equip_list_);
    std::swap(cur_time_, other->cur_time_);
    std::swap(questioncounts_, other->questioncounts_);
    std::swap(rightcounts_, other->rightcounts_);
    std::swap(rewardstate_, other->rewardstate_);
    button_id_list_.Swap(&other->button_id_list_);
    activity_list_.Swap(&other->activity_list_);
    std::swap(guildid_, other->guildid_);
    std::swap(movespeed_, other->movespeed_);
    jewelry_id_list_.Swap(&other->jewelry_id_list_);
    std::swap(titleid_, other->titleid_);
    std::swap(activity_loop_, other->activity_loop_);
    std::swap(vip_level_, other->vip_level_);
    std::swap(relive_times_, other->relive_times_);
    std::swap(titlename_, other->titlename_);
    std::swap(titleishide_, other->titleishide_);
    posid_list_.Swap(&other->posid_list_);
    std::swap(guild_office_, other->guild_office_);
    std::swap(trial_dungeon_id_, other->trial_dungeon_id_);
    std::swap(cur_identity_, other->cur_identity_);
    std::swap(cur_multichivalrous_, other->cur_multichivalrous_);
    std::swap(cur_epicchivalrous_, other->cur_epicchivalrous_);
    std::swap(uisuitid_, other->uisuitid_);
    std::swap(boat_info_, other->boat_info_);
    std::swap(uiattackmode_, other->uiattackmode_);
    std::swap(finishkey_, other->finishkey_);
    std::swap(guidepart_, other->guidepart_);
    std::swap(createtime_, other->createtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Login_STC_PlayerData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Login_STC_PlayerData_descriptor_;
  metadata.reflection = Login_STC_PlayerData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Login_STC_EnterScene::kMapidFieldNumber;
const int Login_STC_EnterScene::kPtFieldNumber;
const int Login_STC_EnterScene::kDirFieldNumber;
const int Login_STC_EnterScene::kLayerFieldNumber;
const int Login_STC_EnterScene::kIpFieldNumber;
const int Login_STC_EnterScene::kPortFieldNumber;
#endif  // !_MSC_VER

Login_STC_EnterScene::Login_STC_EnterScene()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Login_STC_EnterScene::InitAsDefaultInstance() {
  pt_ = const_cast< ::proto::message::Point3D*>(&::proto::message::Point3D::default_instance());
}

Login_STC_EnterScene::Login_STC_EnterScene(const Login_STC_EnterScene& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Login_STC_EnterScene::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = 0;
  pt_ = NULL;
  dir_ = 0;
  layer_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Login_STC_EnterScene::~Login_STC_EnterScene() {
  SharedDtor();
}

void Login_STC_EnterScene::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
    delete pt_;
  }
}

void Login_STC_EnterScene::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Login_STC_EnterScene::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Login_STC_EnterScene_descriptor_;
}

const Login_STC_EnterScene& Login_STC_EnterScene::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login_2eproto();
  return *default_instance_;
}

Login_STC_EnterScene* Login_STC_EnterScene::default_instance_ = NULL;

Login_STC_EnterScene* Login_STC_EnterScene::New() const {
  return new Login_STC_EnterScene;
}

void Login_STC_EnterScene::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mapid_ = 0;
    if (has_pt()) {
      if (pt_ != NULL) pt_->::proto::message::Point3D::Clear();
    }
    dir_ = 0;
    layer_ = 0;
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    port_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Login_STC_EnterScene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 mapid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pt;
        break;
      }

      // required .proto.message.Point3D pt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_dir;
        break;
      }

      // required float dir = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dir_)));
          set_has_dir();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_layer;
        break;
      }

      // optional int32 layer = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_layer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &layer_)));
          set_has_layer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_ip;
        break;
      }

      // optional string ip = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_port;
        break;
      }

      // optional int32 port = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Login_STC_EnterScene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 mapid = 1;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mapid(), output);
  }

  // required .proto.message.Point3D pt = 2;
  if (has_pt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pt(), output);
  }

  // required float dir = 3;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->dir(), output);
  }

  // optional int32 layer = 4;
  if (has_layer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->layer(), output);
  }

  // optional string ip = 5;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->ip(), output);
  }

  // optional int32 port = 6;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Login_STC_EnterScene::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 mapid = 1;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mapid(), target);
  }

  // required .proto.message.Point3D pt = 2;
  if (has_pt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pt(), target);
  }

  // required float dir = 3;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->dir(), target);
  }

  // optional int32 layer = 4;
  if (has_layer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->layer(), target);
  }

  // optional string ip = 5;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->ip(), target);
  }

  // optional int32 port = 6;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Login_STC_EnterScene::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 mapid = 1;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapid());
    }

    // required .proto.message.Point3D pt = 2;
    if (has_pt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pt());
    }

    // required float dir = 3;
    if (has_dir()) {
      total_size += 1 + 4;
    }

    // optional int32 layer = 4;
    if (has_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->layer());
    }

    // optional string ip = 5;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional int32 port = 6;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Login_STC_EnterScene::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Login_STC_EnterScene* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Login_STC_EnterScene*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Login_STC_EnterScene::MergeFrom(const Login_STC_EnterScene& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_pt()) {
      mutable_pt()->::proto::message::Point3D::MergeFrom(from.pt());
    }
    if (from.has_dir()) {
      set_dir(from.dir());
    }
    if (from.has_layer()) {
      set_layer(from.layer());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Login_STC_EnterScene::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Login_STC_EnterScene::CopyFrom(const Login_STC_EnterScene& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Login_STC_EnterScene::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  return true;
}

void Login_STC_EnterScene::Swap(Login_STC_EnterScene* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    std::swap(pt_, other->pt_);
    std::swap(dir_, other->dir_);
    std::swap(layer_, other->layer_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Login_STC_EnterScene::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Login_STC_EnterScene_descriptor_;
  metadata.reflection = Login_STC_EnterScene_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int player_sync_data::kSexFieldNumber;
const int player_sync_data::kWeaponFieldNumber;
const int player_sync_data::kCharNameFieldNumber;
#endif  // !_MSC_VER

player_sync_data::player_sync_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void player_sync_data::InitAsDefaultInstance() {
}

player_sync_data::player_sync_data(const player_sync_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void player_sync_data::SharedCtor() {
  _cached_size_ = 0;
  sex_ = 0;
  weapon_ = 0;
  charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

player_sync_data::~player_sync_data() {
  SharedDtor();
}

void player_sync_data::SharedDtor() {
  if (charname_ != &::google::protobuf::internal::kEmptyString) {
    delete charname_;
  }
  if (this != default_instance_) {
  }
}

void player_sync_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* player_sync_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return player_sync_data_descriptor_;
}

const player_sync_data& player_sync_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login_2eproto();
  return *default_instance_;
}

player_sync_data* player_sync_data::default_instance_ = NULL;

player_sync_data* player_sync_data::New() const {
  return new player_sync_data;
}

void player_sync_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sex_ = 0;
    weapon_ = 0;
    if (has_charname()) {
      if (charname_ != &::google::protobuf::internal::kEmptyString) {
        charname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool player_sync_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 sex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_weapon;
        break;
      }

      // required int32 weapon = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weapon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weapon_)));
          set_has_weapon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_CharName;
        break;
      }

      // required string CharName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CharName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_charname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->charname().data(), this->charname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void player_sync_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 sex = 1;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sex(), output);
  }

  // required int32 weapon = 2;
  if (has_weapon()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->weapon(), output);
  }

  // required string CharName = 3;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->charname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* player_sync_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 sex = 1;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sex(), target);
  }

  // required int32 weapon = 2;
  if (has_weapon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->weapon(), target);
  }

  // required string CharName = 3;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->charname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int player_sync_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 sex = 1;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }

    // required int32 weapon = 2;
    if (has_weapon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->weapon());
    }

    // required string CharName = 3;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->charname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void player_sync_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const player_sync_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const player_sync_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void player_sync_data::MergeFrom(const player_sync_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_weapon()) {
      set_weapon(from.weapon());
    }
    if (from.has_charname()) {
      set_charname(from.charname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void player_sync_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void player_sync_data::CopyFrom(const player_sync_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool player_sync_data::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void player_sync_data::Swap(player_sync_data* other) {
  if (other != this) {
    std::swap(sex_, other->sex_);
    std::swap(weapon_, other->weapon_);
    std::swap(charname_, other->charname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata player_sync_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = player_sync_data_descriptor_;
  metadata.reflection = player_sync_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Login_STC_Sync_Self::kOtherDataFieldNumber;
#endif  // !_MSC_VER

Login_STC_Sync_Self::Login_STC_Sync_Self()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Login_STC_Sync_Self::InitAsDefaultInstance() {
}

Login_STC_Sync_Self::Login_STC_Sync_Self(const Login_STC_Sync_Self& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Login_STC_Sync_Self::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Login_STC_Sync_Self::~Login_STC_Sync_Self() {
  SharedDtor();
}

void Login_STC_Sync_Self::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Login_STC_Sync_Self::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Login_STC_Sync_Self::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Login_STC_Sync_Self_descriptor_;
}

const Login_STC_Sync_Self& Login_STC_Sync_Self::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login_2eproto();
  return *default_instance_;
}

Login_STC_Sync_Self* Login_STC_Sync_Self::default_instance_ = NULL;

Login_STC_Sync_Self* Login_STC_Sync_Self::New() const {
  return new Login_STC_Sync_Self;
}

void Login_STC_Sync_Self::Clear() {
  otherdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Login_STC_Sync_Self::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.message.player_sync_data otherData = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_otherData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_otherdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_otherData;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Login_STC_Sync_Self::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.message.player_sync_data otherData = 1;
  for (int i = 0; i < this->otherdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->otherdata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Login_STC_Sync_Self::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.message.player_sync_data otherData = 1;
  for (int i = 0; i < this->otherdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->otherdata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Login_STC_Sync_Self::ByteSize() const {
  int total_size = 0;

  // repeated .proto.message.player_sync_data otherData = 1;
  total_size += 1 * this->otherdata_size();
  for (int i = 0; i < this->otherdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->otherdata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Login_STC_Sync_Self::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Login_STC_Sync_Self* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Login_STC_Sync_Self*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Login_STC_Sync_Self::MergeFrom(const Login_STC_Sync_Self& from) {
  GOOGLE_CHECK_NE(&from, this);
  otherdata_.MergeFrom(from.otherdata_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Login_STC_Sync_Self::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Login_STC_Sync_Self::CopyFrom(const Login_STC_Sync_Self& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Login_STC_Sync_Self::IsInitialized() const {

  for (int i = 0; i < otherdata_size(); i++) {
    if (!this->otherdata(i).IsInitialized()) return false;
  }
  return true;
}

void Login_STC_Sync_Self::Swap(Login_STC_Sync_Self* other) {
  if (other != this) {
    otherdata_.Swap(&other->otherdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Login_STC_Sync_Self::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Login_STC_Sync_Self_descriptor_;
  metadata.reflection = Login_STC_Sync_Self_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Login_STC_Sync_Other::kLoginDataFieldNumber;
#endif  // !_MSC_VER

Login_STC_Sync_Other::Login_STC_Sync_Other()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Login_STC_Sync_Other::InitAsDefaultInstance() {
  logindata_ = const_cast< ::proto::message::player_sync_data*>(&::proto::message::player_sync_data::default_instance());
}

Login_STC_Sync_Other::Login_STC_Sync_Other(const Login_STC_Sync_Other& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Login_STC_Sync_Other::SharedCtor() {
  _cached_size_ = 0;
  logindata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Login_STC_Sync_Other::~Login_STC_Sync_Other() {
  SharedDtor();
}

void Login_STC_Sync_Other::SharedDtor() {
  if (this != default_instance_) {
    delete logindata_;
  }
}

void Login_STC_Sync_Other::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Login_STC_Sync_Other::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Login_STC_Sync_Other_descriptor_;
}

const Login_STC_Sync_Other& Login_STC_Sync_Other::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login_2eproto();
  return *default_instance_;
}

Login_STC_Sync_Other* Login_STC_Sync_Other::default_instance_ = NULL;

Login_STC_Sync_Other* Login_STC_Sync_Other::New() const {
  return new Login_STC_Sync_Other;
}

void Login_STC_Sync_Other::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_logindata()) {
      if (logindata_ != NULL) logindata_->::proto::message::player_sync_data::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Login_STC_Sync_Other::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .proto.message.player_sync_data LoginData = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_logindata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Login_STC_Sync_Other::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .proto.message.player_sync_data LoginData = 2;
  if (has_logindata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->logindata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Login_STC_Sync_Other::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .proto.message.player_sync_data LoginData = 2;
  if (has_logindata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->logindata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Login_STC_Sync_Other::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .proto.message.player_sync_data LoginData = 2;
    if (has_logindata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->logindata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Login_STC_Sync_Other::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Login_STC_Sync_Other* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Login_STC_Sync_Other*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Login_STC_Sync_Other::MergeFrom(const Login_STC_Sync_Other& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_logindata()) {
      mutable_logindata()->::proto::message::player_sync_data::MergeFrom(from.logindata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Login_STC_Sync_Other::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Login_STC_Sync_Other::CopyFrom(const Login_STC_Sync_Other& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Login_STC_Sync_Other::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_logindata()) {
    if (!this->logindata().IsInitialized()) return false;
  }
  return true;
}

void Login_STC_Sync_Other::Swap(Login_STC_Sync_Other* other) {
  if (other != this) {
    std::swap(logindata_, other->logindata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Login_STC_Sync_Other::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Login_STC_Sync_Other_descriptor_;
  metadata.reflection = Login_STC_Sync_Other_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Login_STC_AnotherLogin::Login_STC_AnotherLogin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Login_STC_AnotherLogin::InitAsDefaultInstance() {
}

Login_STC_AnotherLogin::Login_STC_AnotherLogin(const Login_STC_AnotherLogin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Login_STC_AnotherLogin::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Login_STC_AnotherLogin::~Login_STC_AnotherLogin() {
  SharedDtor();
}

void Login_STC_AnotherLogin::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Login_STC_AnotherLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Login_STC_AnotherLogin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Login_STC_AnotherLogin_descriptor_;
}

const Login_STC_AnotherLogin& Login_STC_AnotherLogin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login_2eproto();
  return *default_instance_;
}

Login_STC_AnotherLogin* Login_STC_AnotherLogin::default_instance_ = NULL;

Login_STC_AnotherLogin* Login_STC_AnotherLogin::New() const {
  return new Login_STC_AnotherLogin;
}

void Login_STC_AnotherLogin::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Login_STC_AnotherLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Login_STC_AnotherLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Login_STC_AnotherLogin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Login_STC_AnotherLogin::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Login_STC_AnotherLogin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Login_STC_AnotherLogin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Login_STC_AnotherLogin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Login_STC_AnotherLogin::MergeFrom(const Login_STC_AnotherLogin& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Login_STC_AnotherLogin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Login_STC_AnotherLogin::CopyFrom(const Login_STC_AnotherLogin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Login_STC_AnotherLogin::IsInitialized() const {

  return true;
}

void Login_STC_AnotherLogin::Swap(Login_STC_AnotherLogin* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Login_STC_AnotherLogin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Login_STC_AnotherLogin_descriptor_;
  metadata.reflection = Login_STC_AnotherLogin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Login_STC_ClientLoadOK::kBranchFieldNumber;
#endif  // !_MSC_VER

Login_STC_ClientLoadOK::Login_STC_ClientLoadOK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Login_STC_ClientLoadOK::InitAsDefaultInstance() {
}

Login_STC_ClientLoadOK::Login_STC_ClientLoadOK(const Login_STC_ClientLoadOK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Login_STC_ClientLoadOK::SharedCtor() {
  _cached_size_ = 0;
  branch_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Login_STC_ClientLoadOK::~Login_STC_ClientLoadOK() {
  SharedDtor();
}

void Login_STC_ClientLoadOK::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Login_STC_ClientLoadOK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Login_STC_ClientLoadOK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Login_STC_ClientLoadOK_descriptor_;
}

const Login_STC_ClientLoadOK& Login_STC_ClientLoadOK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login_2eproto();
  return *default_instance_;
}

Login_STC_ClientLoadOK* Login_STC_ClientLoadOK::default_instance_ = NULL;

Login_STC_ClientLoadOK* Login_STC_ClientLoadOK::New() const {
  return new Login_STC_ClientLoadOK;
}

void Login_STC_ClientLoadOK::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    branch_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Login_STC_ClientLoadOK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Branch = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &branch_)));
          set_has_branch();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Login_STC_ClientLoadOK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 Branch = 1;
  if (has_branch()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->branch(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Login_STC_ClientLoadOK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 Branch = 1;
  if (has_branch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->branch(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Login_STC_ClientLoadOK::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 Branch = 1;
    if (has_branch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->branch());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Login_STC_ClientLoadOK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Login_STC_ClientLoadOK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Login_STC_ClientLoadOK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Login_STC_ClientLoadOK::MergeFrom(const Login_STC_ClientLoadOK& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_branch()) {
      set_branch(from.branch());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Login_STC_ClientLoadOK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Login_STC_ClientLoadOK::CopyFrom(const Login_STC_ClientLoadOK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Login_STC_ClientLoadOK::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Login_STC_ClientLoadOK::Swap(Login_STC_ClientLoadOK* other) {
  if (other != this) {
    std::swap(branch_, other->branch_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Login_STC_ClientLoadOK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Login_STC_ClientLoadOK_descriptor_;
  metadata.reflection = Login_STC_ClientLoadOK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Login_CS_ChangePlayerName::kCharnameFieldNumber;
#endif  // !_MSC_VER

Login_CS_ChangePlayerName::Login_CS_ChangePlayerName()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Login_CS_ChangePlayerName::InitAsDefaultInstance() {
}

Login_CS_ChangePlayerName::Login_CS_ChangePlayerName(const Login_CS_ChangePlayerName& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Login_CS_ChangePlayerName::SharedCtor() {
  _cached_size_ = 0;
  charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Login_CS_ChangePlayerName::~Login_CS_ChangePlayerName() {
  SharedDtor();
}

void Login_CS_ChangePlayerName::SharedDtor() {
  if (charname_ != &::google::protobuf::internal::kEmptyString) {
    delete charname_;
  }
  if (this != default_instance_) {
  }
}

void Login_CS_ChangePlayerName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Login_CS_ChangePlayerName::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Login_CS_ChangePlayerName_descriptor_;
}

const Login_CS_ChangePlayerName& Login_CS_ChangePlayerName::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login_2eproto();
  return *default_instance_;
}

Login_CS_ChangePlayerName* Login_CS_ChangePlayerName::default_instance_ = NULL;

Login_CS_ChangePlayerName* Login_CS_ChangePlayerName::New() const {
  return new Login_CS_ChangePlayerName;
}

void Login_CS_ChangePlayerName::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_charname()) {
      if (charname_ != &::google::protobuf::internal::kEmptyString) {
        charname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Login_CS_ChangePlayerName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string charname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_charname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->charname().data(), this->charname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Login_CS_ChangePlayerName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string charname = 1;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->charname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Login_CS_ChangePlayerName::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string charname = 1;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->charname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Login_CS_ChangePlayerName::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string charname = 1;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->charname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Login_CS_ChangePlayerName::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Login_CS_ChangePlayerName* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Login_CS_ChangePlayerName*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Login_CS_ChangePlayerName::MergeFrom(const Login_CS_ChangePlayerName& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charname()) {
      set_charname(from.charname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Login_CS_ChangePlayerName::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Login_CS_ChangePlayerName::CopyFrom(const Login_CS_ChangePlayerName& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Login_CS_ChangePlayerName::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Login_CS_ChangePlayerName::Swap(Login_CS_ChangePlayerName* other) {
  if (other != this) {
    std::swap(charname_, other->charname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Login_CS_ChangePlayerName::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Login_CS_ChangePlayerName_descriptor_;
  metadata.reflection = Login_CS_ChangePlayerName_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Login_STC_ChangePlayerName::kRtFieldNumber;
const int Login_STC_ChangePlayerName::kCharnameFieldNumber;
#endif  // !_MSC_VER

Login_STC_ChangePlayerName::Login_STC_ChangePlayerName()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Login_STC_ChangePlayerName::InitAsDefaultInstance() {
}

Login_STC_ChangePlayerName::Login_STC_ChangePlayerName(const Login_STC_ChangePlayerName& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Login_STC_ChangePlayerName::SharedCtor() {
  _cached_size_ = 0;
  rt_ = 0;
  charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Login_STC_ChangePlayerName::~Login_STC_ChangePlayerName() {
  SharedDtor();
}

void Login_STC_ChangePlayerName::SharedDtor() {
  if (charname_ != &::google::protobuf::internal::kEmptyString) {
    delete charname_;
  }
  if (this != default_instance_) {
  }
}

void Login_STC_ChangePlayerName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Login_STC_ChangePlayerName::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Login_STC_ChangePlayerName_descriptor_;
}

const Login_STC_ChangePlayerName& Login_STC_ChangePlayerName::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login_2eproto();
  return *default_instance_;
}

Login_STC_ChangePlayerName* Login_STC_ChangePlayerName::default_instance_ = NULL;

Login_STC_ChangePlayerName* Login_STC_ChangePlayerName::New() const {
  return new Login_STC_ChangePlayerName;
}

void Login_STC_ChangePlayerName::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rt_ = 0;
    if (has_charname()) {
      if (charname_ != &::google::protobuf::internal::kEmptyString) {
        charname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Login_STC_ChangePlayerName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 rt = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rt_)));
          set_has_rt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_charname;
        break;
      }

      // optional string charname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_charname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_charname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->charname().data(), this->charname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Login_STC_ChangePlayerName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 rt = 1;
  if (has_rt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rt(), output);
  }

  // optional string charname = 2;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->charname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Login_STC_ChangePlayerName::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 rt = 1;
  if (has_rt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rt(), target);
  }

  // optional string charname = 2;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->charname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Login_STC_ChangePlayerName::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 rt = 1;
    if (has_rt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rt());
    }

    // optional string charname = 2;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->charname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Login_STC_ChangePlayerName::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Login_STC_ChangePlayerName* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Login_STC_ChangePlayerName*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Login_STC_ChangePlayerName::MergeFrom(const Login_STC_ChangePlayerName& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rt()) {
      set_rt(from.rt());
    }
    if (from.has_charname()) {
      set_charname(from.charname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Login_STC_ChangePlayerName::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Login_STC_ChangePlayerName::CopyFrom(const Login_STC_ChangePlayerName& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Login_STC_ChangePlayerName::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Login_STC_ChangePlayerName::Swap(Login_STC_ChangePlayerName* other) {
  if (other != this) {
    std::swap(rt_, other->rt_);
    std::swap(charname_, other->charname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Login_STC_ChangePlayerName::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Login_STC_ChangePlayerName_descriptor_;
  metadata.reflection = Login_STC_ChangePlayerName_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Login_STC_NotifyActivity::kActivityHostFieldNumber;
const int Login_STC_NotifyActivity::kActivityPathFieldNumber;
#endif  // !_MSC_VER

Login_STC_NotifyActivity::Login_STC_NotifyActivity()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Login_STC_NotifyActivity::InitAsDefaultInstance() {
}

Login_STC_NotifyActivity::Login_STC_NotifyActivity(const Login_STC_NotifyActivity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Login_STC_NotifyActivity::SharedCtor() {
  _cached_size_ = 0;
  activityhost_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  activitypath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Login_STC_NotifyActivity::~Login_STC_NotifyActivity() {
  SharedDtor();
}

void Login_STC_NotifyActivity::SharedDtor() {
  if (activityhost_ != &::google::protobuf::internal::kEmptyString) {
    delete activityhost_;
  }
  if (activitypath_ != &::google::protobuf::internal::kEmptyString) {
    delete activitypath_;
  }
  if (this != default_instance_) {
  }
}

void Login_STC_NotifyActivity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Login_STC_NotifyActivity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Login_STC_NotifyActivity_descriptor_;
}

const Login_STC_NotifyActivity& Login_STC_NotifyActivity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login_2eproto();
  return *default_instance_;
}

Login_STC_NotifyActivity* Login_STC_NotifyActivity::default_instance_ = NULL;

Login_STC_NotifyActivity* Login_STC_NotifyActivity::New() const {
  return new Login_STC_NotifyActivity;
}

void Login_STC_NotifyActivity::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_activityhost()) {
      if (activityhost_ != &::google::protobuf::internal::kEmptyString) {
        activityhost_->clear();
      }
    }
    if (has_activitypath()) {
      if (activitypath_ != &::google::protobuf::internal::kEmptyString) {
        activitypath_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Login_STC_NotifyActivity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ActivityHost = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_activityhost()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->activityhost().data(), this->activityhost().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ActivityPath;
        break;
      }

      // optional string ActivityPath = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ActivityPath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_activitypath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->activitypath().data(), this->activitypath().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Login_STC_NotifyActivity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string ActivityHost = 1;
  if (has_activityhost()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->activityhost().data(), this->activityhost().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->activityhost(), output);
  }

  // optional string ActivityPath = 2;
  if (has_activitypath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->activitypath().data(), this->activitypath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->activitypath(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Login_STC_NotifyActivity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string ActivityHost = 1;
  if (has_activityhost()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->activityhost().data(), this->activityhost().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->activityhost(), target);
  }

  // optional string ActivityPath = 2;
  if (has_activitypath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->activitypath().data(), this->activitypath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->activitypath(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Login_STC_NotifyActivity::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string ActivityHost = 1;
    if (has_activityhost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->activityhost());
    }

    // optional string ActivityPath = 2;
    if (has_activitypath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->activitypath());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Login_STC_NotifyActivity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Login_STC_NotifyActivity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Login_STC_NotifyActivity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Login_STC_NotifyActivity::MergeFrom(const Login_STC_NotifyActivity& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activityhost()) {
      set_activityhost(from.activityhost());
    }
    if (from.has_activitypath()) {
      set_activitypath(from.activitypath());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Login_STC_NotifyActivity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Login_STC_NotifyActivity::CopyFrom(const Login_STC_NotifyActivity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Login_STC_NotifyActivity::IsInitialized() const {

  return true;
}

void Login_STC_NotifyActivity::Swap(Login_STC_NotifyActivity* other) {
  if (other != this) {
    std::swap(activityhost_, other->activityhost_);
    std::swap(activitypath_, other->activitypath_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Login_STC_NotifyActivity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Login_STC_NotifyActivity_descriptor_;
  metadata.reflection = Login_STC_NotifyActivity_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace proto

// @@protoc_insertion_point(global_scope)
