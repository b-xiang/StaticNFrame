// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "common.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace message {

namespace {

const ::google::protobuf::Descriptor* ErrorCode_SC_ErrorCodeMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ErrorCode_SC_ErrorCodeMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* NullMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NullMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* Point3D_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Point3D_reflection_ = NULL;
const ::google::protobuf::Descriptor* Point4D_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Point4D_reflection_ = NULL;
const ::google::protobuf::Descriptor* IDNum_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IDNum_reflection_ = NULL;
const ::google::protobuf::Descriptor* KeyValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeyValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActivityData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivityData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PairInt32_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PairInt32_reflection_ = NULL;
const ::google::protobuf::Descriptor* IDTimes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IDTimes_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipEffect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipEffect_reflection_ = NULL;
const ::google::protobuf::Descriptor* Equip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Equip_reflection_ = NULL;
const ::google::protobuf::Descriptor* DiamondDoubleHistory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DiamondDoubleHistory_reflection_ = NULL;
const ::google::protobuf::Descriptor* BatSkillInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BatSkillInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerEffect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerEffect_reflection_ = NULL;
const ::google::protobuf::Descriptor* BattlePlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BattlePlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BattleMercenaryInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BattleMercenaryInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BattleSingleHeadInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BattleSingleHeadInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BattleHeadInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BattleHeadInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BattleBoatInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BattleBoatInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MatchPlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MatchPlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* WolrdBossSaledItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WolrdBossSaledItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* OfflineDataDetail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OfflineDataDetail_reflection_ = NULL;
const ::google::protobuf::Descriptor* MailToMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MailToMap_reflection_ = NULL;
const ::google::protobuf::Descriptor* DreadDungeonData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DreadDungeonData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerBaseData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerBaseData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GrowData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GrowData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShowDataDetail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShowDataDetail_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerShow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerShow_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBSyncFlagPos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBSyncFlagPos_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBFieldInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBFieldInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBKillReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBKillReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBPlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBPlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBOverResultInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBOverResultInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_common_2eproto() {
  protobuf_AddDesc_common_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "common.proto");
  GOOGLE_CHECK(file != NULL);
  ErrorCode_SC_ErrorCodeMsg_descriptor_ = file->message_type(0);
  static const int ErrorCode_SC_ErrorCodeMsg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorCode_SC_ErrorCodeMsg, nresult_),
  };
  ErrorCode_SC_ErrorCodeMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ErrorCode_SC_ErrorCodeMsg_descriptor_,
      ErrorCode_SC_ErrorCodeMsg::default_instance_,
      ErrorCode_SC_ErrorCodeMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorCode_SC_ErrorCodeMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorCode_SC_ErrorCodeMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ErrorCode_SC_ErrorCodeMsg));
  NullMessage_descriptor_ = file->message_type(1);
  static const int NullMessage_offsets_[1] = {
  };
  NullMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NullMessage_descriptor_,
      NullMessage::default_instance_,
      NullMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NullMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NullMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NullMessage));
  Point3D_descriptor_ = file->message_type(2);
  static const int Point3D_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point3D, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point3D, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point3D, z_),
  };
  Point3D_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Point3D_descriptor_,
      Point3D::default_instance_,
      Point3D_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point3D, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point3D, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Point3D));
  Point4D_descriptor_ = file->message_type(3);
  static const int Point4D_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point4D, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point4D, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point4D, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point4D, w_),
  };
  Point4D_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Point4D_descriptor_,
      Point4D::default_instance_,
      Point4D_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point4D, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point4D, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Point4D));
  IDNum_descriptor_ = file->message_type(4);
  static const int IDNum_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IDNum, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IDNum, num_),
  };
  IDNum_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IDNum_descriptor_,
      IDNum::default_instance_,
      IDNum_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IDNum, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IDNum, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IDNum));
  KeyValue_descriptor_ = file->message_type(5);
  static const int KeyValue_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValue, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValue, ivalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValue, lvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValue, fvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValue, szvalue_),
  };
  KeyValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KeyValue_descriptor_,
      KeyValue::default_instance_,
      KeyValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KeyValue));
  ActivityData_descriptor_ = file->message_type(6);
  static const int ActivityData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityData, activityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityData, kv_),
  };
  ActivityData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActivityData_descriptor_,
      ActivityData::default_instance_,
      ActivityData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActivityData));
  PairInt32_descriptor_ = file->message_type(7);
  static const int PairInt32_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PairInt32, first_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PairInt32, second_),
  };
  PairInt32_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PairInt32_descriptor_,
      PairInt32::default_instance_,
      PairInt32_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PairInt32, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PairInt32, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PairInt32));
  IDTimes_descriptor_ = file->message_type(8);
  static const int IDTimes_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IDTimes, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IDTimes, times_),
  };
  IDTimes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IDTimes_descriptor_,
      IDTimes::default_instance_,
      IDTimes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IDTimes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IDTimes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IDTimes));
  EquipEffect_descriptor_ = file->message_type(9);
  static const int EquipEffect_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipEffect, etype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipEffect, eff_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipEffect, eff_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipEffect, data_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipEffect, data_num_),
  };
  EquipEffect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipEffect_descriptor_,
      EquipEffect::default_instance_,
      EquipEffect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipEffect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipEffect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipEffect));
  Equip_descriptor_ = file->message_type(10);
  static const int Equip_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equip, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equip, charname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equip, gain_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equip, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equip, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equip, is_equipon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equip, strength_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equip, increase_percent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equip, durability_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equip, times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equip, effect_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equip, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equip, frozen_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equip, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equip, bind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equip, best_attr_),
  };
  Equip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Equip_descriptor_,
      Equip::default_instance_,
      Equip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Equip));
  DiamondDoubleHistory_descriptor_ = file->message_type(11);
  static const int DiamondDoubleHistory_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiamondDoubleHistory, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiamondDoubleHistory, dimaond_),
  };
  DiamondDoubleHistory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DiamondDoubleHistory_descriptor_,
      DiamondDoubleHistory::default_instance_,
      DiamondDoubleHistory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiamondDoubleHistory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiamondDoubleHistory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DiamondDoubleHistory));
  BatSkillInfo_descriptor_ = file->message_type(12);
  static const int BatSkillInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatSkillInfo, playerskillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatSkillInfo, effectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatSkillInfo, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatSkillInfo, curmark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatSkillInfo, markid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatSkillInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatSkillInfo, effectid2_),
  };
  BatSkillInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BatSkillInfo_descriptor_,
      BatSkillInfo::default_instance_,
      BatSkillInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatSkillInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatSkillInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BatSkillInfo));
  PlayerEffect_descriptor_ = file->message_type(13);
  static const int PlayerEffect_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEffect, attdata_),
  };
  PlayerEffect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerEffect_descriptor_,
      PlayerEffect::default_instance_,
      PlayerEffect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEffect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEffect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerEffect));
  BattlePlayerInfo_descriptor_ = file->message_type(14);
  static const int BattlePlayerInfo_offsets_[46] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePlayerInfo, nplayerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePlayerInfo, pt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePlayerInfo, dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePlayerInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePlayerInfo, curhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePlayerInfo, attvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePlayerInfo, attprecent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePlayerInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePlayerInfo, equip_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePlayerInfo, career_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePlayerInfo, velocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePlayerInfo, titleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePlayerInfo, layer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePlayerInfo, titlename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePlayerInfo, titleishide_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePlayerInfo, skilllist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePlayerInfo, nplayeruuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePlayerInfo, nguildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePlayerInfo, guildname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePlayerInfo, xpenergy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePlayerInfo, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePlayerInfo, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePlayerInfo, pvpscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePlayerInfo, pvpteam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePlayerInfo, cur_petid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePlayerInfo, cur_rideid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePlayerInfo, cur_awakenid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePlayerInfo, cur_mercenaryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePlayerInfo, nmercenary_linkid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePlayerInfo, curtp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePlayerInfo, suitid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePlayerInfo, pkval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePlayerInfo, cur_avatarid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePlayerInfo, cur_avatarcolorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePlayerInfo, attackmode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePlayerInfo, dhlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePlayerInfo, linkid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePlayerInfo, headinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePlayerInfo, mercenaryscript_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePlayerInfo, ridescript_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePlayerInfo, awakenscript_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePlayerInfo, cur_petrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePlayerInfo, cur_mercenrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePlayerInfo, maxtp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePlayerInfo, maxhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePlayerInfo, baseequip_),
  };
  BattlePlayerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BattlePlayerInfo_descriptor_,
      BattlePlayerInfo::default_instance_,
      BattlePlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePlayerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BattlePlayerInfo));
  BattleMercenaryInfo_descriptor_ = file->message_type(15);
  static const int BattleMercenaryInfo_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleMercenaryInfo, nmercenaryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleMercenaryInfo, ntableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleMercenaryInfo, pt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleMercenaryInfo, dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleMercenaryInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleMercenaryInfo, curhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleMercenaryInfo, attvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleMercenaryInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleMercenaryInfo, velocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleMercenaryInfo, layer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleMercenaryInfo, ncampid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleMercenaryInfo, skilllist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleMercenaryInfo, ranking_),
  };
  BattleMercenaryInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BattleMercenaryInfo_descriptor_,
      BattleMercenaryInfo::default_instance_,
      BattleMercenaryInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleMercenaryInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleMercenaryInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BattleMercenaryInfo));
  BattleSingleHeadInfo_descriptor_ = file->message_type(16);
  static const int BattleSingleHeadInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleSingleHeadInfo, ntype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleSingleHeadInfo, plyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleSingleHeadInfo, param1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleSingleHeadInfo, param2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleSingleHeadInfo, param3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleSingleHeadInfo, param4_),
  };
  BattleSingleHeadInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BattleSingleHeadInfo_descriptor_,
      BattleSingleHeadInfo::default_instance_,
      BattleSingleHeadInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleSingleHeadInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleSingleHeadInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BattleSingleHeadInfo));
  BattleHeadInfo_descriptor_ = file->message_type(17);
  static const int BattleHeadInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleHeadInfo, infolist_),
  };
  BattleHeadInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BattleHeadInfo_descriptor_,
      BattleHeadInfo::default_instance_,
      BattleHeadInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleHeadInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleHeadInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BattleHeadInfo));
  BattleBoatInfo_descriptor_ = file->message_type(18);
  static const int BattleBoatInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleBoatInfo, boatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleBoatInfo, skinid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleBoatInfo, landskill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleBoatInfo, seaskill_),
  };
  BattleBoatInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BattleBoatInfo_descriptor_,
      BattleBoatInfo::default_instance_,
      BattleBoatInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleBoatInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleBoatInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BattleBoatInfo));
  MatchPlayerInfo_descriptor_ = file->message_type(19);
  static const int MatchPlayerInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchPlayerInfo, iscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchPlayerInfo, imatchscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchPlayerInfo, splyinfo_),
  };
  MatchPlayerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MatchPlayerInfo_descriptor_,
      MatchPlayerInfo::default_instance_,
      MatchPlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchPlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchPlayerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MatchPlayerInfo));
  WolrdBossSaledItem_descriptor_ = file->message_type(20);
  static const int WolrdBossSaledItem_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WolrdBossSaledItem, siteminfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WolrdBossSaledItem, uiplayername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WolrdBossSaledItem, uibossid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WolrdBossSaledItem, uiprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WolrdBossSaledItem, uiplayeruuid_),
  };
  WolrdBossSaledItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WolrdBossSaledItem_descriptor_,
      WolrdBossSaledItem::default_instance_,
      WolrdBossSaledItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WolrdBossSaledItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WolrdBossSaledItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WolrdBossSaledItem));
  OfflineDataDetail_descriptor_ = file->message_type(21);
  static const int OfflineDataDetail_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineDataDetail, playerskill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineDataDetail, playeratt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineDataDetail, artifactid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineDataDetail, artifactskill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineDataDetail, petid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineDataDetail, boatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineDataDetail, boatskin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineDataDetail, boatskill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineDataDetail, awakenid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineDataDetail, warlordid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineDataDetail, fightvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineDataDetail, skinid_),
  };
  OfflineDataDetail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OfflineDataDetail_descriptor_,
      OfflineDataDetail::default_instance_,
      OfflineDataDetail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineDataDetail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineDataDetail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OfflineDataDetail));
  MailToMap_descriptor_ = file->message_type(22);
  static const int MailToMap_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailToMap, dropid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailToMap, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailToMap, itemnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailToMap, rolelist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailToMap, mailid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailToMap, context_),
  };
  MailToMap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MailToMap_descriptor_,
      MailToMap::default_instance_,
      MailToMap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailToMap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailToMap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MailToMap));
  DreadDungeonData_descriptor_ = file->message_type(23);
  static const int DreadDungeonData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DreadDungeonData, secenid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DreadDungeonData, counts_),
  };
  DreadDungeonData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DreadDungeonData_descriptor_,
      DreadDungeonData::default_instance_,
      DreadDungeonData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DreadDungeonData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DreadDungeonData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DreadDungeonData));
  PlayerBaseData_descriptor_ = file->message_type(24);
  static const int PlayerBaseData_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBaseData, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBaseData, charname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBaseData, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBaseData, guildname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBaseData, career_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBaseData, dhlev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBaseData, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBaseData, fightval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBaseData, skinid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBaseData, weaponskin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBaseData, suitid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBaseData, equiplist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBaseData, attribut_),
  };
  PlayerBaseData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerBaseData_descriptor_,
      PlayerBaseData::default_instance_,
      PlayerBaseData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBaseData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBaseData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerBaseData));
  GrowData_descriptor_ = file->message_type(25);
  static const int GrowData_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowData, exid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowData, fitvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowData, equiplist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowData, skilllist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowData, skilllev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowData, eatcounts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowData, attribut_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowData, talent_),
  };
  GrowData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GrowData_descriptor_,
      GrowData::default_instance_,
      GrowData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GrowData));
  ShowDataDetail_descriptor_ = file->message_type(26);
  static const int ShowDataDetail_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowDataDetail, awaken_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowDataDetail, ride_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowDataDetail, pet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowDataDetail, mercenary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowDataDetail, godweapon_),
  };
  ShowDataDetail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShowDataDetail_descriptor_,
      ShowDataDetail::default_instance_,
      ShowDataDetail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowDataDetail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowDataDetail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShowDataDetail));
  PlayerShow_descriptor_ = file->message_type(27);
  static const int PlayerShow_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerShow, basedata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerShow, offdata_),
  };
  PlayerShow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerShow_descriptor_,
      PlayerShow::default_instance_,
      PlayerShow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerShow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerShow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerShow));
  TBSyncFlagPos_descriptor_ = file->message_type(28);
  static const int TBSyncFlagPos_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBSyncFlagPos, pt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBSyncFlagPos, flagobjid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBSyncFlagPos, getguildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBSyncFlagPos, getguildname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBSyncFlagPos, getflagtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBSyncFlagPos, onwergid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBSyncFlagPos, ownername_),
  };
  TBSyncFlagPos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBSyncFlagPos_descriptor_,
      TBSyncFlagPos::default_instance_,
      TBSyncFlagPos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBSyncFlagPos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBSyncFlagPos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBSyncFlagPos));
  TBFieldInfo_descriptor_ = file->message_type(29);
  static const int TBFieldInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBFieldInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBFieldInfo, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBFieldInfo, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBFieldInfo, guildname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBFieldInfo, overtime_),
  };
  TBFieldInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBFieldInfo_descriptor_,
      TBFieldInfo::default_instance_,
      TBFieldInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBFieldInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBFieldInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBFieldInfo));
  TBKillReward_descriptor_ = file->message_type(30);
  static const int TBKillReward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBKillReward, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBKillReward, num_),
  };
  TBKillReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBKillReward_descriptor_,
      TBKillReward::default_instance_,
      TBKillReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBKillReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBKillReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBKillReward));
  TBPlayer_descriptor_ = file->message_type(31);
  static const int TBPlayer_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBPlayer, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBPlayer, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBPlayer, onlinetime_),
  };
  TBPlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBPlayer_descriptor_,
      TBPlayer::default_instance_,
      TBPlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBPlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBPlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBPlayer));
  TBOverResultInfo_descriptor_ = file->message_type(32);
  static const int TBOverResultInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBOverResultInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBOverResultInfo, wingid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBOverResultInfo, winname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBOverResultInfo, losegid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBOverResultInfo, playeridlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBOverResultInfo, serverid_),
  };
  TBOverResultInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBOverResultInfo_descriptor_,
      TBOverResultInfo::default_instance_,
      TBOverResultInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBOverResultInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBOverResultInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBOverResultInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_common_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ErrorCode_SC_ErrorCodeMsg_descriptor_, &ErrorCode_SC_ErrorCodeMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NullMessage_descriptor_, &NullMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Point3D_descriptor_, &Point3D::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Point4D_descriptor_, &Point4D::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IDNum_descriptor_, &IDNum::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KeyValue_descriptor_, &KeyValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActivityData_descriptor_, &ActivityData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PairInt32_descriptor_, &PairInt32::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IDTimes_descriptor_, &IDTimes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipEffect_descriptor_, &EquipEffect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Equip_descriptor_, &Equip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DiamondDoubleHistory_descriptor_, &DiamondDoubleHistory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BatSkillInfo_descriptor_, &BatSkillInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerEffect_descriptor_, &PlayerEffect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BattlePlayerInfo_descriptor_, &BattlePlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BattleMercenaryInfo_descriptor_, &BattleMercenaryInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BattleSingleHeadInfo_descriptor_, &BattleSingleHeadInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BattleHeadInfo_descriptor_, &BattleHeadInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BattleBoatInfo_descriptor_, &BattleBoatInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MatchPlayerInfo_descriptor_, &MatchPlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WolrdBossSaledItem_descriptor_, &WolrdBossSaledItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OfflineDataDetail_descriptor_, &OfflineDataDetail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MailToMap_descriptor_, &MailToMap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DreadDungeonData_descriptor_, &DreadDungeonData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerBaseData_descriptor_, &PlayerBaseData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GrowData_descriptor_, &GrowData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShowDataDetail_descriptor_, &ShowDataDetail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerShow_descriptor_, &PlayerShow::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBSyncFlagPos_descriptor_, &TBSyncFlagPos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBFieldInfo_descriptor_, &TBFieldInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBKillReward_descriptor_, &TBKillReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBPlayer_descriptor_, &TBPlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBOverResultInfo_descriptor_, &TBOverResultInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_common_2eproto() {
  delete ErrorCode_SC_ErrorCodeMsg::default_instance_;
  delete ErrorCode_SC_ErrorCodeMsg_reflection_;
  delete NullMessage::default_instance_;
  delete NullMessage_reflection_;
  delete Point3D::default_instance_;
  delete Point3D_reflection_;
  delete Point4D::default_instance_;
  delete Point4D_reflection_;
  delete IDNum::default_instance_;
  delete IDNum_reflection_;
  delete KeyValue::default_instance_;
  delete KeyValue_reflection_;
  delete ActivityData::default_instance_;
  delete ActivityData_reflection_;
  delete PairInt32::default_instance_;
  delete PairInt32_reflection_;
  delete IDTimes::default_instance_;
  delete IDTimes_reflection_;
  delete EquipEffect::default_instance_;
  delete EquipEffect_reflection_;
  delete Equip::default_instance_;
  delete Equip_reflection_;
  delete DiamondDoubleHistory::default_instance_;
  delete DiamondDoubleHistory_reflection_;
  delete BatSkillInfo::default_instance_;
  delete BatSkillInfo_reflection_;
  delete PlayerEffect::default_instance_;
  delete PlayerEffect_reflection_;
  delete BattlePlayerInfo::default_instance_;
  delete BattlePlayerInfo_reflection_;
  delete BattleMercenaryInfo::default_instance_;
  delete BattleMercenaryInfo_reflection_;
  delete BattleSingleHeadInfo::default_instance_;
  delete BattleSingleHeadInfo_reflection_;
  delete BattleHeadInfo::default_instance_;
  delete BattleHeadInfo_reflection_;
  delete BattleBoatInfo::default_instance_;
  delete BattleBoatInfo_reflection_;
  delete MatchPlayerInfo::default_instance_;
  delete MatchPlayerInfo_reflection_;
  delete WolrdBossSaledItem::default_instance_;
  delete WolrdBossSaledItem_reflection_;
  delete OfflineDataDetail::default_instance_;
  delete OfflineDataDetail_reflection_;
  delete MailToMap::default_instance_;
  delete MailToMap_reflection_;
  delete DreadDungeonData::default_instance_;
  delete DreadDungeonData_reflection_;
  delete PlayerBaseData::default_instance_;
  delete PlayerBaseData_reflection_;
  delete GrowData::default_instance_;
  delete GrowData_reflection_;
  delete ShowDataDetail::default_instance_;
  delete ShowDataDetail_reflection_;
  delete PlayerShow::default_instance_;
  delete PlayerShow_reflection_;
  delete TBSyncFlagPos::default_instance_;
  delete TBSyncFlagPos_reflection_;
  delete TBFieldInfo::default_instance_;
  delete TBFieldInfo_reflection_;
  delete TBKillReward::default_instance_;
  delete TBKillReward_reflection_;
  delete TBPlayer::default_instance_;
  delete TBPlayer_reflection_;
  delete TBOverResultInfo::default_instance_;
  delete TBOverResultInfo_reflection_;
}

void protobuf_AddDesc_common_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014common.proto\022\rproto.message\",\n\031ErrorCo"
    "de_SC_ErrorCodeMsg\022\017\n\007nResult\030\001 \001(\005\"\r\n\013N"
    "ullMessage\"*\n\007Point3D\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 "
    "\001(\002\022\t\n\001z\030\003 \001(\002\"5\n\007Point4D\022\t\n\001x\030\001 \001(\002\022\t\n\001"
    "y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\022\t\n\001w\030\004 \001(\002\" \n\005IDNum\022\n"
    "\n\002id\030\001 \001(\005\022\013\n\003num\030\002 \001(\005\"X\n\010KeyValue\022\013\n\003k"
    "ey\030\001 \001(\005\022\016\n\006iValue\030\002 \001(\005\022\016\n\006lValue\030\003 \001(\003"
    "\022\016\n\006fValue\030\004 \001(\002\022\017\n\007szValue\030\005 \001(\t\"G\n\014Act"
    "ivityData\022\022\n\nactivityid\030\001 \001(\005\022#\n\002kv\030\002 \003("
    "\0132\027.proto.message.KeyValue\"*\n\tPairInt32\022"
    "\r\n\005first\030\001 \001(\005\022\016\n\006second\030\002 \001(\005\"$\n\007IDTime"
    "s\022\n\n\002id\030\001 \001(\005\022\r\n\005times\030\002 \001(\005\"c\n\013EquipEff"
    "ect\022\r\n\005etype\030\001 \001(\005\022\016\n\006eff_id\030\002 \001(\005\022\020\n\010ef"
    "f_type\030\003 \001(\005\022\021\n\tdata_type\030\004 \001(\005\022\020\n\010data_"
    "num\030\005 \001(\005\"\325\002\n\005Equip\022\014\n\004uuid\030\001 \001(\004\022\020\n\010cha"
    "rname\030\002 \001(\t\022\021\n\tgain_time\030\003 \001(\004\022\n\n\002id\030\004 \001"
    "(\005\022\r\n\005level\030\005 \001(\005\022\022\n\nis_equipon\030\006 \001(\005\022\023\n"
    "\013strength_lv\030\007 \001(\005\022\030\n\020increase_percent\030\010"
    " \001(\005\022\022\n\ndurability\030\t \001(\005\022\r\n\005times\030\n \001(\005\022"
    "/\n\013effect_list\030\013 \003(\0132\032.proto.message.Equ"
    "ipEffect\022\016\n\006source\030\014 \001(\005\022\023\n\013frozen_time\030"
    "\r \001(\005\022\013\n\003exp\030\016 \001(\r\022\014\n\004bind\030\017 \001(\r\022\'\n\tbest"
    "_attr\030\020 \003(\0132\024.proto.message.IDNum\"5\n\024Dia"
    "mondDoubleHistory\022\014\n\004name\030\001 \001(\t\022\017\n\007dimao"
    "nd\030\002 \001(\r\"\207\001\n\014BatSkillInfo\022\025\n\rplayerskill"
    "id\030\001 \001(\005\022\020\n\010effectid\030\002 \001(\005\022\013\n\003pos\030\003 \001(\005\022"
    "\017\n\007curmark\030\004 \001(\005\022\016\n\006markid\030\005 \003(\005\022\r\n\005leve"
    "l\030\006 \001(\005\022\021\n\teffectid2\030\007 \001(\005\"\037\n\014PlayerEffe"
    "ct\022\017\n\007attdata\030\001 \003(\005\"\324\007\n\020BattlePlayerInfo"
    "\022\021\n\tnplayerid\030\001 \002(\r\022\"\n\002pt\030\002 \002(\0132\026.proto."
    "message.Point3D\022\013\n\003dir\030\003 \002(\002\022\014\n\004name\030\004 \001"
    "(\t\022\r\n\005curhp\030\005 \001(\005\022\020\n\010attvalue\030\006 \003(\005\022\022\n\na"
    "ttprecent\030\007 \003(\005\022\r\n\005level\030\010 \001(\005\022(\n\nequip_"
    "list\030\t \003(\0132\024.proto.message.Equip\022\016\n\006care"
    "er\030\n \001(\005\022\020\n\010velocity\030\013 \001(\005\022\017\n\007titleID\030\014 "
    "\001(\005\022\r\n\005layer\030\r \001(\005\022\021\n\ttitlename\030\016 \001(\t\022\023\n"
    "\013titleishide\030\017 \001(\005\022.\n\tskilllist\030\020 \003(\0132\033."
    "proto.message.BatSkillInfo\022\023\n\013nplayeruui"
    "d\030\021 \001(\004\022\020\n\010nguildid\030\022 \001(\004\022\021\n\tguildName\030\023"
    " \001(\t\022\020\n\010xpenergy\030\024 \001(\r\022\020\n\010serverid\030\025 \001(\r"
    "\022\016\n\006teamid\030\026 \001(\005\022\020\n\010pvpscore\030\027 \001(\005\022\017\n\007pv"
    "pteam\030\030 \001(\005\022\021\n\tcur_petid\030\031 \001(\005\022\022\n\ncur_ri"
    "deid\030\032 \001(\005\022\024\n\014cur_awakenid\030\033 \001(\005\022\027\n\017cur_"
    "mercenaryid\030\034 \001(\005\022\031\n\021nmercenary_linkid\030\035"
    " \001(\r\022\r\n\005curtp\030\036 \001(\r\022\016\n\006suitid\030\037 \001(\r\022\r\n\005p"
    "kval\030  \001(\r\022\024\n\014cur_avatarid\030! \001(\r\022\031\n\021cur_"
    "avatarcolorid\030\" \001(\r\022\022\n\nattackmode\030# \001(\r\022"
    "\017\n\007dhlevel\030$ \001(\r\022\016\n\006linkid\030% \002(\r\022/\n\010head"
    "info\030& \001(\0132\035.proto.message.BattleHeadInf"
    "o\022\027\n\017mercenaryscript\030\' \003(\r\022\022\n\nridescript"
    "\030( \003(\r\022\024\n\014awakenscript\030) \003(\r\022\023\n\013cur_petr"
    "ank\030* \001(\r\022\026\n\016cur_mercenrank\030+ \001(\r\022\r\n\005max"
    "tp\030, \001(\005\022\r\n\005maxhp\030- \001(\005\022\021\n\tbaseequip\030. \001"
    "(\005\"\202\002\n\023BattleMercenaryInfo\022\024\n\014nmercenary"
    "id\030\001 \002(\r\022\020\n\010nTableid\030\002 \002(\r\022\"\n\002pt\030\003 \002(\0132\026"
    ".proto.message.Point3D\022\013\n\003dir\030\004 \002(\002\022\014\n\004n"
    "ame\030\005 \001(\t\022\r\n\005curhp\030\006 \001(\003\022\020\n\010attvalue\030\007 \003"
    "(\005\022\r\n\005level\030\010 \001(\005\022\020\n\010velocity\030\t \001(\005\022\r\n\005l"
    "ayer\030\n \001(\005\022\017\n\007ncampid\030\013 \001(\005\022\021\n\tskilllist"
    "\030\014 \003(\005\022\017\n\007ranking\030\r \001(\005\"t\n\024BattleSingleH"
    "eadInfo\022\r\n\005ntype\030\001 \001(\005\022\r\n\005plyid\030\002 \001(\005\022\016\n"
    "\006param1\030\003 \001(\005\022\016\n\006param2\030\004 \001(\005\022\016\n\006param3\030"
    "\005 \001(\003\022\016\n\006param4\030\006 \001(\t\"G\n\016BattleHeadInfo\022"
    "5\n\010infolist\030\001 \003(\0132#.proto.message.Battle"
    "SingleHeadInfo\"U\n\016BattleBoatInfo\022\016\n\006boat"
    "id\030\001 \001(\005\022\016\n\006skinid\030\002 \001(\005\022\021\n\tlandskill\030\003 "
    "\003(\005\022\020\n\010seaskill\030\004 \003(\005\"i\n\017MatchPlayerInfo"
    "\022\016\n\006iScore\030\001 \001(\005\022\023\n\013iMatchScore\030\002 \001(\005\0221\n"
    "\010sPlyInfo\030\003 \001(\0132\037.proto.message.BattlePl"
    "ayerInfo\"\214\001\n\022WolrdBossSaledItem\022\'\n\tsItem"
    "Info\030\001 \001(\0132\024.proto.message.IDNum\022\024\n\014uiPl"
    "ayerName\030\002 \001(\t\022\020\n\010uiBossId\030\003 \001(\r\022\017\n\007uiPr"
    "ice\030\004 \001(\r\022\024\n\014uiPlayerUUID\030\005 \001(\004\"\220\002\n\021Offl"
    "ineDataDetail\022\023\n\013playerskill\030\001 \003(\005\022.\n\tpl"
    "ayeratt\030\002 \001(\0132\033.proto.message.PlayerEffe"
    "ct\022\022\n\nartifactid\030\003 \001(\005\022\025\n\rartifactskill\030"
    "\004 \003(\005\022\r\n\005petid\030\005 \001(\005\022\016\n\006boatid\030\006 \001(\005\022\020\n\010"
    "boatskin\030\007 \001(\005\022\021\n\tboatskill\030\010 \003(\005\022\020\n\010awa"
    "kenid\030\t \001(\005\022\021\n\twarlordid\030\n \001(\005\022\022\n\nfightv"
    "alue\030\013 \001(\005\022\016\n\006skinid\030\014 \001(\005\"o\n\tMailToMap\022"
    "\016\n\006dropid\030\001 \001(\r\022\016\n\006itemid\030\002 \001(\005\022\017\n\007itemn"
    "um\030\003 \001(\005\022\020\n\010rolelist\030\004 \003(\004\022\016\n\006mailid\030\005 \001"
    "(\r\022\017\n\007context\030\006 \001(\t\"3\n\020DreadDungeonData\022"
    "\017\n\007secenID\030\001 \001(\r\022\016\n\006counts\030\002 \001(\r\"\357\001\n\016Pla"
    "yerBaseData\022\016\n\006charid\030\001 \001(\004\022\020\n\010charname\030"
    "\002 \001(\t\022\017\n\007guildid\030\003 \001(\004\022\021\n\tguildname\030\004 \001("
    "\t\022\016\n\006career\030\005 \001(\r\022\r\n\005dhlev\030\006 \001(\r\022\r\n\005leve"
    "l\030\007 \001(\r\022\020\n\010fightval\030\010 \001(\r\022\016\n\006skinid\030\t \001("
    "\r\022\022\n\nweaponskin\030\n \001(\r\022\016\n\006suitid\030\013 \001(\r\022\021\n"
    "\tequiplist\030\014 \003(\r\022\020\n\010attribut\030\r \003(\r\"\227\001\n\010G"
    "rowData\022\014\n\004exid\030\001 \001(\r\022\020\n\010fitvalue\030\002 \001(\r\022"
    "\021\n\tequiplist\030\003 \003(\r\022\021\n\tskilllist\030\004 \003(\r\022\020\n"
    "\010skilllev\030\005 \003(\r\022\021\n\teatcounts\030\006 \001(\r\022\020\n\010at"
    "tribut\030\007 \003(\r\022\016\n\006talent\030\010 \003(\r\"\336\001\n\016ShowDat"
    "aDetail\022\'\n\006awaken\030\001 \001(\0132\027.proto.message."
    "GrowData\022%\n\004ride\030\002 \001(\0132\027.proto.message.G"
    "rowData\022$\n\003pet\030\003 \003(\0132\027.proto.message.Gro"
    "wData\022*\n\tmercenary\030\004 \003(\0132\027.proto.message"
    ".GrowData\022*\n\tgodweapon\030\005 \003(\0132\027.proto.mes"
    "sage.GrowData\"m\n\nPlayerShow\022/\n\010basedata\030"
    "\001 \001(\0132\035.proto.message.PlayerBaseData\022.\n\007"
    "offdata\030\002 \001(\0132\035.proto.message.ShowDataDe"
    "tail\"\252\001\n\rTBSyncFlagPos\022\"\n\002pt\030\001 \001(\0132\026.pro"
    "to.message.Point3D\022\021\n\tflagobjid\030\002 \001(\r\022\022\n"
    "\ngetguildid\030\003 \001(\004\022\024\n\014getguildname\030\004 \001(\t\022"
    "\023\n\013getflagtime\030\005 \001(\r\022\020\n\010onwergid\030\006 \001(\004\022\021"
    "\n\townername\030\007 \001(\t\"^\n\013TBFieldInfo\022\n\n\002id\030\001"
    " \001(\r\022\r\n\005mapid\030\002 \001(\r\022\017\n\007guildid\030\003 \001(\004\022\021\n\t"
    "guildname\030\004 \001(\t\022\020\n\010overtime\030\005 \001(\r\"+\n\014TBK"
    "illReward\022\016\n\006itemid\030\001 \003(\r\022\013\n\003num\030\002 \003(\r\"A"
    "\n\010TBPlayer\022\020\n\010playerid\030\001 \001(\004\022\017\n\007guildid\030"
    "\002 \001(\004\022\022\n\nonlinetime\030\003 \001(\r\"\221\001\n\020TBOverResu"
    "ltInfo\022\n\n\002id\030\001 \001(\r\022\016\n\006wingid\030\002 \001(\004\022\017\n\007wi"
    "nname\030\003 \001(\t\022\017\n\007losegid\030\004 \001(\004\022-\n\014playerid"
    "list\030\005 \003(\0132\027.proto.message.TBPlayer\022\020\n\010s"
    "erverid\030\006 \001(\rB\017\n\rproto.message", 4630);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "common.proto", &protobuf_RegisterTypes);
  ErrorCode_SC_ErrorCodeMsg::default_instance_ = new ErrorCode_SC_ErrorCodeMsg();
  NullMessage::default_instance_ = new NullMessage();
  Point3D::default_instance_ = new Point3D();
  Point4D::default_instance_ = new Point4D();
  IDNum::default_instance_ = new IDNum();
  KeyValue::default_instance_ = new KeyValue();
  ActivityData::default_instance_ = new ActivityData();
  PairInt32::default_instance_ = new PairInt32();
  IDTimes::default_instance_ = new IDTimes();
  EquipEffect::default_instance_ = new EquipEffect();
  Equip::default_instance_ = new Equip();
  DiamondDoubleHistory::default_instance_ = new DiamondDoubleHistory();
  BatSkillInfo::default_instance_ = new BatSkillInfo();
  PlayerEffect::default_instance_ = new PlayerEffect();
  BattlePlayerInfo::default_instance_ = new BattlePlayerInfo();
  BattleMercenaryInfo::default_instance_ = new BattleMercenaryInfo();
  BattleSingleHeadInfo::default_instance_ = new BattleSingleHeadInfo();
  BattleHeadInfo::default_instance_ = new BattleHeadInfo();
  BattleBoatInfo::default_instance_ = new BattleBoatInfo();
  MatchPlayerInfo::default_instance_ = new MatchPlayerInfo();
  WolrdBossSaledItem::default_instance_ = new WolrdBossSaledItem();
  OfflineDataDetail::default_instance_ = new OfflineDataDetail();
  MailToMap::default_instance_ = new MailToMap();
  DreadDungeonData::default_instance_ = new DreadDungeonData();
  PlayerBaseData::default_instance_ = new PlayerBaseData();
  GrowData::default_instance_ = new GrowData();
  ShowDataDetail::default_instance_ = new ShowDataDetail();
  PlayerShow::default_instance_ = new PlayerShow();
  TBSyncFlagPos::default_instance_ = new TBSyncFlagPos();
  TBFieldInfo::default_instance_ = new TBFieldInfo();
  TBKillReward::default_instance_ = new TBKillReward();
  TBPlayer::default_instance_ = new TBPlayer();
  TBOverResultInfo::default_instance_ = new TBOverResultInfo();
  ErrorCode_SC_ErrorCodeMsg::default_instance_->InitAsDefaultInstance();
  NullMessage::default_instance_->InitAsDefaultInstance();
  Point3D::default_instance_->InitAsDefaultInstance();
  Point4D::default_instance_->InitAsDefaultInstance();
  IDNum::default_instance_->InitAsDefaultInstance();
  KeyValue::default_instance_->InitAsDefaultInstance();
  ActivityData::default_instance_->InitAsDefaultInstance();
  PairInt32::default_instance_->InitAsDefaultInstance();
  IDTimes::default_instance_->InitAsDefaultInstance();
  EquipEffect::default_instance_->InitAsDefaultInstance();
  Equip::default_instance_->InitAsDefaultInstance();
  DiamondDoubleHistory::default_instance_->InitAsDefaultInstance();
  BatSkillInfo::default_instance_->InitAsDefaultInstance();
  PlayerEffect::default_instance_->InitAsDefaultInstance();
  BattlePlayerInfo::default_instance_->InitAsDefaultInstance();
  BattleMercenaryInfo::default_instance_->InitAsDefaultInstance();
  BattleSingleHeadInfo::default_instance_->InitAsDefaultInstance();
  BattleHeadInfo::default_instance_->InitAsDefaultInstance();
  BattleBoatInfo::default_instance_->InitAsDefaultInstance();
  MatchPlayerInfo::default_instance_->InitAsDefaultInstance();
  WolrdBossSaledItem::default_instance_->InitAsDefaultInstance();
  OfflineDataDetail::default_instance_->InitAsDefaultInstance();
  MailToMap::default_instance_->InitAsDefaultInstance();
  DreadDungeonData::default_instance_->InitAsDefaultInstance();
  PlayerBaseData::default_instance_->InitAsDefaultInstance();
  GrowData::default_instance_->InitAsDefaultInstance();
  ShowDataDetail::default_instance_->InitAsDefaultInstance();
  PlayerShow::default_instance_->InitAsDefaultInstance();
  TBSyncFlagPos::default_instance_->InitAsDefaultInstance();
  TBFieldInfo::default_instance_->InitAsDefaultInstance();
  TBKillReward::default_instance_->InitAsDefaultInstance();
  TBPlayer::default_instance_->InitAsDefaultInstance();
  TBOverResultInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_common_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_common_2eproto {
  StaticDescriptorInitializer_common_2eproto() {
    protobuf_AddDesc_common_2eproto();
  }
} static_descriptor_initializer_common_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ErrorCode_SC_ErrorCodeMsg::kNResultFieldNumber;
#endif  // !_MSC_VER

ErrorCode_SC_ErrorCodeMsg::ErrorCode_SC_ErrorCodeMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ErrorCode_SC_ErrorCodeMsg::InitAsDefaultInstance() {
}

ErrorCode_SC_ErrorCodeMsg::ErrorCode_SC_ErrorCodeMsg(const ErrorCode_SC_ErrorCodeMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ErrorCode_SC_ErrorCodeMsg::SharedCtor() {
  _cached_size_ = 0;
  nresult_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ErrorCode_SC_ErrorCodeMsg::~ErrorCode_SC_ErrorCodeMsg() {
  SharedDtor();
}

void ErrorCode_SC_ErrorCodeMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ErrorCode_SC_ErrorCodeMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ErrorCode_SC_ErrorCodeMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ErrorCode_SC_ErrorCodeMsg_descriptor_;
}

const ErrorCode_SC_ErrorCodeMsg& ErrorCode_SC_ErrorCodeMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

ErrorCode_SC_ErrorCodeMsg* ErrorCode_SC_ErrorCodeMsg::default_instance_ = NULL;

ErrorCode_SC_ErrorCodeMsg* ErrorCode_SC_ErrorCodeMsg::New() const {
  return new ErrorCode_SC_ErrorCodeMsg;
}

void ErrorCode_SC_ErrorCodeMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nresult_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ErrorCode_SC_ErrorCodeMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 nResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nresult_)));
          set_has_nresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ErrorCode_SC_ErrorCodeMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 nResult = 1;
  if (has_nresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nresult(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ErrorCode_SC_ErrorCodeMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 nResult = 1;
  if (has_nresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nresult(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ErrorCode_SC_ErrorCodeMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 nResult = 1;
    if (has_nresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nresult());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ErrorCode_SC_ErrorCodeMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ErrorCode_SC_ErrorCodeMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ErrorCode_SC_ErrorCodeMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ErrorCode_SC_ErrorCodeMsg::MergeFrom(const ErrorCode_SC_ErrorCodeMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nresult()) {
      set_nresult(from.nresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ErrorCode_SC_ErrorCodeMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ErrorCode_SC_ErrorCodeMsg::CopyFrom(const ErrorCode_SC_ErrorCodeMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ErrorCode_SC_ErrorCodeMsg::IsInitialized() const {

  return true;
}

void ErrorCode_SC_ErrorCodeMsg::Swap(ErrorCode_SC_ErrorCodeMsg* other) {
  if (other != this) {
    std::swap(nresult_, other->nresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ErrorCode_SC_ErrorCodeMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ErrorCode_SC_ErrorCodeMsg_descriptor_;
  metadata.reflection = ErrorCode_SC_ErrorCodeMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

NullMessage::NullMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NullMessage::InitAsDefaultInstance() {
}

NullMessage::NullMessage(const NullMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NullMessage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NullMessage::~NullMessage() {
  SharedDtor();
}

void NullMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NullMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NullMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NullMessage_descriptor_;
}

const NullMessage& NullMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

NullMessage* NullMessage::default_instance_ = NULL;

NullMessage* NullMessage::New() const {
  return new NullMessage;
}

void NullMessage::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NullMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void NullMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NullMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NullMessage::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NullMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NullMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NullMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NullMessage::MergeFrom(const NullMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NullMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NullMessage::CopyFrom(const NullMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NullMessage::IsInitialized() const {

  return true;
}

void NullMessage::Swap(NullMessage* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NullMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NullMessage_descriptor_;
  metadata.reflection = NullMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Point3D::kXFieldNumber;
const int Point3D::kYFieldNumber;
const int Point3D::kZFieldNumber;
#endif  // !_MSC_VER

Point3D::Point3D()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Point3D::InitAsDefaultInstance() {
}

Point3D::Point3D(const Point3D& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Point3D::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Point3D::~Point3D() {
  SharedDtor();
}

void Point3D::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Point3D::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Point3D::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Point3D_descriptor_;
}

const Point3D& Point3D::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

Point3D* Point3D::default_instance_ = NULL;

Point3D* Point3D::New() const {
  return new Point3D;
}

void Point3D::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    z_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Point3D::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // optional float y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }

      // optional float z = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Point3D::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // optional float z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Point3D::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // optional float z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Point3D::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // optional float z = 3;
    if (has_z()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Point3D::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Point3D* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Point3D*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Point3D::MergeFrom(const Point3D& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Point3D::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point3D::CopyFrom(const Point3D& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point3D::IsInitialized() const {

  return true;
}

void Point3D::Swap(Point3D* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Point3D::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Point3D_descriptor_;
  metadata.reflection = Point3D_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Point4D::kXFieldNumber;
const int Point4D::kYFieldNumber;
const int Point4D::kZFieldNumber;
const int Point4D::kWFieldNumber;
#endif  // !_MSC_VER

Point4D::Point4D()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Point4D::InitAsDefaultInstance() {
}

Point4D::Point4D(const Point4D& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Point4D::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  w_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Point4D::~Point4D() {
  SharedDtor();
}

void Point4D::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Point4D::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Point4D::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Point4D_descriptor_;
}

const Point4D& Point4D::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

Point4D* Point4D::default_instance_ = NULL;

Point4D* Point4D::New() const {
  return new Point4D;
}

void Point4D::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    z_ = 0;
    w_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Point4D::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // optional float y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }

      // optional float z = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_w;
        break;
      }

      // optional float w = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &w_)));
          set_has_w();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Point4D::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // optional float z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  // optional float w = 4;
  if (has_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->w(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Point4D::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // optional float z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  // optional float w = 4;
  if (has_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->w(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Point4D::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // optional float z = 3;
    if (has_z()) {
      total_size += 1 + 4;
    }

    // optional float w = 4;
    if (has_w()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Point4D::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Point4D* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Point4D*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Point4D::MergeFrom(const Point4D& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
    if (from.has_w()) {
      set_w(from.w());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Point4D::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point4D::CopyFrom(const Point4D& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point4D::IsInitialized() const {

  return true;
}

void Point4D::Swap(Point4D* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(w_, other->w_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Point4D::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Point4D_descriptor_;
  metadata.reflection = Point4D_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IDNum::kIdFieldNumber;
const int IDNum::kNumFieldNumber;
#endif  // !_MSC_VER

IDNum::IDNum()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IDNum::InitAsDefaultInstance() {
}

IDNum::IDNum(const IDNum& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IDNum::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IDNum::~IDNum() {
  SharedDtor();
}

void IDNum::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IDNum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IDNum::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IDNum_descriptor_;
}

const IDNum& IDNum::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

IDNum* IDNum::default_instance_ = NULL;

IDNum* IDNum::New() const {
  return new IDNum;
}

void IDNum::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IDNum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional int32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IDNum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IDNum::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IDNum::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IDNum::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IDNum* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IDNum*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IDNum::MergeFrom(const IDNum& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IDNum::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IDNum::CopyFrom(const IDNum& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IDNum::IsInitialized() const {

  return true;
}

void IDNum::Swap(IDNum* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IDNum::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IDNum_descriptor_;
  metadata.reflection = IDNum_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KeyValue::kKeyFieldNumber;
const int KeyValue::kIValueFieldNumber;
const int KeyValue::kLValueFieldNumber;
const int KeyValue::kFValueFieldNumber;
const int KeyValue::kSzValueFieldNumber;
#endif  // !_MSC_VER

KeyValue::KeyValue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KeyValue::InitAsDefaultInstance() {
}

KeyValue::KeyValue(const KeyValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KeyValue::SharedCtor() {
  _cached_size_ = 0;
  key_ = 0;
  ivalue_ = 0;
  lvalue_ = GOOGLE_LONGLONG(0);
  fvalue_ = 0;
  szvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KeyValue::~KeyValue() {
  SharedDtor();
}

void KeyValue::SharedDtor() {
  if (szvalue_ != &::google::protobuf::internal::kEmptyString) {
    delete szvalue_;
  }
  if (this != default_instance_) {
  }
}

void KeyValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeyValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeyValue_descriptor_;
}

const KeyValue& KeyValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

KeyValue* KeyValue::default_instance_ = NULL;

KeyValue* KeyValue::New() const {
  return new KeyValue;
}

void KeyValue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    key_ = 0;
    ivalue_ = 0;
    lvalue_ = GOOGLE_LONGLONG(0);
    fvalue_ = 0;
    if (has_szvalue()) {
      if (szvalue_ != &::google::protobuf::internal::kEmptyString) {
        szvalue_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KeyValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iValue;
        break;
      }

      // optional int32 iValue = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ivalue_)));
          set_has_ivalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lValue;
        break;
      }

      // optional int64 lValue = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lvalue_)));
          set_has_lvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_fValue;
        break;
      }

      // optional float fValue = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_fValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fvalue_)));
          set_has_fvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_szValue;
        break;
      }

      // optional string szValue = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_szValue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szvalue()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->szvalue().data(), this->szvalue().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KeyValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->key(), output);
  }

  // optional int32 iValue = 2;
  if (has_ivalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ivalue(), output);
  }

  // optional int64 lValue = 3;
  if (has_lvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->lvalue(), output);
  }

  // optional float fValue = 4;
  if (has_fvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->fvalue(), output);
  }

  // optional string szValue = 5;
  if (has_szvalue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->szvalue().data(), this->szvalue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->szvalue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KeyValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->key(), target);
  }

  // optional int32 iValue = 2;
  if (has_ivalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ivalue(), target);
  }

  // optional int64 lValue = 3;
  if (has_lvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->lvalue(), target);
  }

  // optional float fValue = 4;
  if (has_fvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->fvalue(), target);
  }

  // optional string szValue = 5;
  if (has_szvalue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->szvalue().data(), this->szvalue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->szvalue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KeyValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->key());
    }

    // optional int32 iValue = 2;
    if (has_ivalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ivalue());
    }

    // optional int64 lValue = 3;
    if (has_lvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lvalue());
    }

    // optional float fValue = 4;
    if (has_fvalue()) {
      total_size += 1 + 4;
    }

    // optional string szValue = 5;
    if (has_szvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szvalue());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeyValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KeyValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KeyValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KeyValue::MergeFrom(const KeyValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_ivalue()) {
      set_ivalue(from.ivalue());
    }
    if (from.has_lvalue()) {
      set_lvalue(from.lvalue());
    }
    if (from.has_fvalue()) {
      set_fvalue(from.fvalue());
    }
    if (from.has_szvalue()) {
      set_szvalue(from.szvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KeyValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyValue::CopyFrom(const KeyValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyValue::IsInitialized() const {

  return true;
}

void KeyValue::Swap(KeyValue* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(ivalue_, other->ivalue_);
    std::swap(lvalue_, other->lvalue_);
    std::swap(fvalue_, other->fvalue_);
    std::swap(szvalue_, other->szvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KeyValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeyValue_descriptor_;
  metadata.reflection = KeyValue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActivityData::kActivityidFieldNumber;
const int ActivityData::kKvFieldNumber;
#endif  // !_MSC_VER

ActivityData::ActivityData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActivityData::InitAsDefaultInstance() {
}

ActivityData::ActivityData(const ActivityData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActivityData::SharedCtor() {
  _cached_size_ = 0;
  activityid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivityData::~ActivityData() {
  SharedDtor();
}

void ActivityData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActivityData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityData_descriptor_;
}

const ActivityData& ActivityData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

ActivityData* ActivityData::default_instance_ = NULL;

ActivityData* ActivityData::New() const {
  return new ActivityData;
}

void ActivityData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    activityid_ = 0;
  }
  kv_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActivityData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 activityid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &activityid_)));
          set_has_activityid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_kv;
        break;
      }

      // repeated .proto.message.KeyValue kv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_kv:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_kv()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_kv;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActivityData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 activityid = 1;
  if (has_activityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->activityid(), output);
  }

  // repeated .proto.message.KeyValue kv = 2;
  for (int i = 0; i < this->kv_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->kv(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActivityData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 activityid = 1;
  if (has_activityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->activityid(), target);
  }

  // repeated .proto.message.KeyValue kv = 2;
  for (int i = 0; i < this->kv_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->kv(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActivityData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 activityid = 1;
    if (has_activityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->activityid());
    }

  }
  // repeated .proto.message.KeyValue kv = 2;
  total_size += 1 * this->kv_size();
  for (int i = 0; i < this->kv_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->kv(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActivityData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActivityData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActivityData::MergeFrom(const ActivityData& from) {
  GOOGLE_CHECK_NE(&from, this);
  kv_.MergeFrom(from.kv_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activityid()) {
      set_activityid(from.activityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActivityData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityData::CopyFrom(const ActivityData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityData::IsInitialized() const {

  return true;
}

void ActivityData::Swap(ActivityData* other) {
  if (other != this) {
    std::swap(activityid_, other->activityid_);
    kv_.Swap(&other->kv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActivityData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivityData_descriptor_;
  metadata.reflection = ActivityData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PairInt32::kFirstFieldNumber;
const int PairInt32::kSecondFieldNumber;
#endif  // !_MSC_VER

PairInt32::PairInt32()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PairInt32::InitAsDefaultInstance() {
}

PairInt32::PairInt32(const PairInt32& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PairInt32::SharedCtor() {
  _cached_size_ = 0;
  first_ = 0;
  second_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PairInt32::~PairInt32() {
  SharedDtor();
}

void PairInt32::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PairInt32::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PairInt32::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PairInt32_descriptor_;
}

const PairInt32& PairInt32::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

PairInt32* PairInt32::default_instance_ = NULL;

PairInt32* PairInt32::New() const {
  return new PairInt32;
}

void PairInt32::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    first_ = 0;
    second_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PairInt32::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 first = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &first_)));
          set_has_first();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_second;
        break;
      }

      // optional int32 second = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_second:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &second_)));
          set_has_second();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PairInt32::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 first = 1;
  if (has_first()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->first(), output);
  }

  // optional int32 second = 2;
  if (has_second()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->second(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PairInt32::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 first = 1;
  if (has_first()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->first(), target);
  }

  // optional int32 second = 2;
  if (has_second()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->second(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PairInt32::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 first = 1;
    if (has_first()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->first());
    }

    // optional int32 second = 2;
    if (has_second()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->second());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PairInt32::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PairInt32* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PairInt32*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PairInt32::MergeFrom(const PairInt32& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_first()) {
      set_first(from.first());
    }
    if (from.has_second()) {
      set_second(from.second());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PairInt32::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PairInt32::CopyFrom(const PairInt32& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PairInt32::IsInitialized() const {

  return true;
}

void PairInt32::Swap(PairInt32* other) {
  if (other != this) {
    std::swap(first_, other->first_);
    std::swap(second_, other->second_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PairInt32::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PairInt32_descriptor_;
  metadata.reflection = PairInt32_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IDTimes::kIdFieldNumber;
const int IDTimes::kTimesFieldNumber;
#endif  // !_MSC_VER

IDTimes::IDTimes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IDTimes::InitAsDefaultInstance() {
}

IDTimes::IDTimes(const IDTimes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IDTimes::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  times_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IDTimes::~IDTimes() {
  SharedDtor();
}

void IDTimes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IDTimes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IDTimes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IDTimes_descriptor_;
}

const IDTimes& IDTimes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

IDTimes* IDTimes::default_instance_ = NULL;

IDTimes* IDTimes::New() const {
  return new IDTimes;
}

void IDTimes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    times_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IDTimes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_times;
        break;
      }

      // optional int32 times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IDTimes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 times = 2;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IDTimes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 times = 2;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IDTimes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 times = 2;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->times());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IDTimes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IDTimes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IDTimes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IDTimes::MergeFrom(const IDTimes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_times()) {
      set_times(from.times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IDTimes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IDTimes::CopyFrom(const IDTimes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IDTimes::IsInitialized() const {

  return true;
}

void IDTimes::Swap(IDTimes* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(times_, other->times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IDTimes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IDTimes_descriptor_;
  metadata.reflection = IDTimes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipEffect::kEtypeFieldNumber;
const int EquipEffect::kEffIdFieldNumber;
const int EquipEffect::kEffTypeFieldNumber;
const int EquipEffect::kDataTypeFieldNumber;
const int EquipEffect::kDataNumFieldNumber;
#endif  // !_MSC_VER

EquipEffect::EquipEffect()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipEffect::InitAsDefaultInstance() {
}

EquipEffect::EquipEffect(const EquipEffect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipEffect::SharedCtor() {
  _cached_size_ = 0;
  etype_ = 0;
  eff_id_ = 0;
  eff_type_ = 0;
  data_type_ = 0;
  data_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipEffect::~EquipEffect() {
  SharedDtor();
}

void EquipEffect::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipEffect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipEffect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipEffect_descriptor_;
}

const EquipEffect& EquipEffect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

EquipEffect* EquipEffect::default_instance_ = NULL;

EquipEffect* EquipEffect::New() const {
  return new EquipEffect;
}

void EquipEffect::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    etype_ = 0;
    eff_id_ = 0;
    eff_type_ = 0;
    data_type_ = 0;
    data_num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipEffect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 etype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &etype_)));
          set_has_etype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_eff_id;
        break;
      }

      // optional int32 eff_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eff_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eff_id_)));
          set_has_eff_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_eff_type;
        break;
      }

      // optional int32 eff_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eff_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eff_type_)));
          set_has_eff_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_data_type;
        break;
      }

      // optional int32 data_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_data_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &data_type_)));
          set_has_data_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_data_num;
        break;
      }

      // optional int32 data_num = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_data_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &data_num_)));
          set_has_data_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipEffect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 etype = 1;
  if (has_etype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->etype(), output);
  }

  // optional int32 eff_id = 2;
  if (has_eff_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->eff_id(), output);
  }

  // optional int32 eff_type = 3;
  if (has_eff_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->eff_type(), output);
  }

  // optional int32 data_type = 4;
  if (has_data_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->data_type(), output);
  }

  // optional int32 data_num = 5;
  if (has_data_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->data_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipEffect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 etype = 1;
  if (has_etype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->etype(), target);
  }

  // optional int32 eff_id = 2;
  if (has_eff_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->eff_id(), target);
  }

  // optional int32 eff_type = 3;
  if (has_eff_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->eff_type(), target);
  }

  // optional int32 data_type = 4;
  if (has_data_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->data_type(), target);
  }

  // optional int32 data_num = 5;
  if (has_data_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->data_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipEffect::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 etype = 1;
    if (has_etype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->etype());
    }

    // optional int32 eff_id = 2;
    if (has_eff_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eff_id());
    }

    // optional int32 eff_type = 3;
    if (has_eff_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eff_type());
    }

    // optional int32 data_type = 4;
    if (has_data_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->data_type());
    }

    // optional int32 data_num = 5;
    if (has_data_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->data_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipEffect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipEffect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipEffect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipEffect::MergeFrom(const EquipEffect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_etype()) {
      set_etype(from.etype());
    }
    if (from.has_eff_id()) {
      set_eff_id(from.eff_id());
    }
    if (from.has_eff_type()) {
      set_eff_type(from.eff_type());
    }
    if (from.has_data_type()) {
      set_data_type(from.data_type());
    }
    if (from.has_data_num()) {
      set_data_num(from.data_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipEffect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipEffect::CopyFrom(const EquipEffect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipEffect::IsInitialized() const {

  return true;
}

void EquipEffect::Swap(EquipEffect* other) {
  if (other != this) {
    std::swap(etype_, other->etype_);
    std::swap(eff_id_, other->eff_id_);
    std::swap(eff_type_, other->eff_type_);
    std::swap(data_type_, other->data_type_);
    std::swap(data_num_, other->data_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipEffect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipEffect_descriptor_;
  metadata.reflection = EquipEffect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Equip::kUuidFieldNumber;
const int Equip::kCharnameFieldNumber;
const int Equip::kGainTimeFieldNumber;
const int Equip::kIdFieldNumber;
const int Equip::kLevelFieldNumber;
const int Equip::kIsEquiponFieldNumber;
const int Equip::kStrengthLvFieldNumber;
const int Equip::kIncreasePercentFieldNumber;
const int Equip::kDurabilityFieldNumber;
const int Equip::kTimesFieldNumber;
const int Equip::kEffectListFieldNumber;
const int Equip::kSourceFieldNumber;
const int Equip::kFrozenTimeFieldNumber;
const int Equip::kExpFieldNumber;
const int Equip::kBindFieldNumber;
const int Equip::kBestAttrFieldNumber;
#endif  // !_MSC_VER

Equip::Equip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Equip::InitAsDefaultInstance() {
}

Equip::Equip(const Equip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Equip::SharedCtor() {
  _cached_size_ = 0;
  uuid_ = GOOGLE_ULONGLONG(0);
  charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gain_time_ = GOOGLE_ULONGLONG(0);
  id_ = 0;
  level_ = 0;
  is_equipon_ = 0;
  strength_lv_ = 0;
  increase_percent_ = 0;
  durability_ = 0;
  times_ = 0;
  source_ = 0;
  frozen_time_ = 0;
  exp_ = 0u;
  bind_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Equip::~Equip() {
  SharedDtor();
}

void Equip::SharedDtor() {
  if (charname_ != &::google::protobuf::internal::kEmptyString) {
    delete charname_;
  }
  if (this != default_instance_) {
  }
}

void Equip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Equip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Equip_descriptor_;
}

const Equip& Equip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

Equip* Equip::default_instance_ = NULL;

Equip* Equip::New() const {
  return new Equip;
}

void Equip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uuid_ = GOOGLE_ULONGLONG(0);
    if (has_charname()) {
      if (charname_ != &::google::protobuf::internal::kEmptyString) {
        charname_->clear();
      }
    }
    gain_time_ = GOOGLE_ULONGLONG(0);
    id_ = 0;
    level_ = 0;
    is_equipon_ = 0;
    strength_lv_ = 0;
    increase_percent_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    durability_ = 0;
    times_ = 0;
    source_ = 0;
    frozen_time_ = 0;
    exp_ = 0u;
    bind_ = 0u;
  }
  effect_list_.Clear();
  best_attr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Equip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_charname;
        break;
      }

      // optional string charname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_charname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_charname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->charname().data(), this->charname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gain_time;
        break;
      }

      // optional uint64 gain_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gain_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gain_time_)));
          set_has_gain_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_id;
        break;
      }

      // optional int32 id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_level;
        break;
      }

      // optional int32 level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_is_equipon;
        break;
      }

      // optional int32 is_equipon = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_equipon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_equipon_)));
          set_has_is_equipon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_strength_lv;
        break;
      }

      // optional int32 strength_lv = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_strength_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &strength_lv_)));
          set_has_strength_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_increase_percent;
        break;
      }

      // optional int32 increase_percent = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_increase_percent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &increase_percent_)));
          set_has_increase_percent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_durability;
        break;
      }

      // optional int32 durability = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_durability:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &durability_)));
          set_has_durability();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_times;
        break;
      }

      // optional int32 times = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_effect_list;
        break;
      }

      // repeated .proto.message.EquipEffect effect_list = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_effect_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_effect_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_effect_list;
        if (input->ExpectTag(96)) goto parse_source;
        break;
      }

      // optional int32 source = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &source_)));
          set_has_source();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_frozen_time;
        break;
      }

      // optional int32 frozen_time = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_frozen_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frozen_time_)));
          set_has_frozen_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_exp;
        break;
      }

      // optional uint32 exp = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_bind;
        break;
      }

      // optional uint32 bind = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bind_)));
          set_has_bind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_best_attr;
        break;
      }

      // repeated .proto.message.IDNum best_attr = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_best_attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_best_attr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_best_attr;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Equip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uuid(), output);
  }

  // optional string charname = 2;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->charname(), output);
  }

  // optional uint64 gain_time = 3;
  if (has_gain_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->gain_time(), output);
  }

  // optional int32 id = 4;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->id(), output);
  }

  // optional int32 level = 5;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->level(), output);
  }

  // optional int32 is_equipon = 6;
  if (has_is_equipon()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->is_equipon(), output);
  }

  // optional int32 strength_lv = 7;
  if (has_strength_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->strength_lv(), output);
  }

  // optional int32 increase_percent = 8;
  if (has_increase_percent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->increase_percent(), output);
  }

  // optional int32 durability = 9;
  if (has_durability()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->durability(), output);
  }

  // optional int32 times = 10;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->times(), output);
  }

  // repeated .proto.message.EquipEffect effect_list = 11;
  for (int i = 0; i < this->effect_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->effect_list(i), output);
  }

  // optional int32 source = 12;
  if (has_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->source(), output);
  }

  // optional int32 frozen_time = 13;
  if (has_frozen_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->frozen_time(), output);
  }

  // optional uint32 exp = 14;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->exp(), output);
  }

  // optional uint32 bind = 15;
  if (has_bind()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->bind(), output);
  }

  // repeated .proto.message.IDNum best_attr = 16;
  for (int i = 0; i < this->best_attr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->best_attr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Equip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 uuid = 1;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uuid(), target);
  }

  // optional string charname = 2;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->charname(), target);
  }

  // optional uint64 gain_time = 3;
  if (has_gain_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->gain_time(), target);
  }

  // optional int32 id = 4;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->id(), target);
  }

  // optional int32 level = 5;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->level(), target);
  }

  // optional int32 is_equipon = 6;
  if (has_is_equipon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->is_equipon(), target);
  }

  // optional int32 strength_lv = 7;
  if (has_strength_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->strength_lv(), target);
  }

  // optional int32 increase_percent = 8;
  if (has_increase_percent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->increase_percent(), target);
  }

  // optional int32 durability = 9;
  if (has_durability()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->durability(), target);
  }

  // optional int32 times = 10;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->times(), target);
  }

  // repeated .proto.message.EquipEffect effect_list = 11;
  for (int i = 0; i < this->effect_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->effect_list(i), target);
  }

  // optional int32 source = 12;
  if (has_source()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->source(), target);
  }

  // optional int32 frozen_time = 13;
  if (has_frozen_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->frozen_time(), target);
  }

  // optional uint32 exp = 14;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->exp(), target);
  }

  // optional uint32 bind = 15;
  if (has_bind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->bind(), target);
  }

  // repeated .proto.message.IDNum best_attr = 16;
  for (int i = 0; i < this->best_attr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->best_attr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Equip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 uuid = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

    // optional string charname = 2;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->charname());
    }

    // optional uint64 gain_time = 3;
    if (has_gain_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gain_time());
    }

    // optional int32 id = 4;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 is_equipon = 6;
    if (has_is_equipon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_equipon());
    }

    // optional int32 strength_lv = 7;
    if (has_strength_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->strength_lv());
    }

    // optional int32 increase_percent = 8;
    if (has_increase_percent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->increase_percent());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 durability = 9;
    if (has_durability()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->durability());
    }

    // optional int32 times = 10;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->times());
    }

    // optional int32 source = 12;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->source());
    }

    // optional int32 frozen_time = 13;
    if (has_frozen_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->frozen_time());
    }

    // optional uint32 exp = 14;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

    // optional uint32 bind = 15;
    if (has_bind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bind());
    }

  }
  // repeated .proto.message.EquipEffect effect_list = 11;
  total_size += 1 * this->effect_list_size();
  for (int i = 0; i < this->effect_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->effect_list(i));
  }

  // repeated .proto.message.IDNum best_attr = 16;
  total_size += 2 * this->best_attr_size();
  for (int i = 0; i < this->best_attr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->best_attr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Equip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Equip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Equip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Equip::MergeFrom(const Equip& from) {
  GOOGLE_CHECK_NE(&from, this);
  effect_list_.MergeFrom(from.effect_list_);
  best_attr_.MergeFrom(from.best_attr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_charname()) {
      set_charname(from.charname());
    }
    if (from.has_gain_time()) {
      set_gain_time(from.gain_time());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_is_equipon()) {
      set_is_equipon(from.is_equipon());
    }
    if (from.has_strength_lv()) {
      set_strength_lv(from.strength_lv());
    }
    if (from.has_increase_percent()) {
      set_increase_percent(from.increase_percent());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_durability()) {
      set_durability(from.durability());
    }
    if (from.has_times()) {
      set_times(from.times());
    }
    if (from.has_source()) {
      set_source(from.source());
    }
    if (from.has_frozen_time()) {
      set_frozen_time(from.frozen_time());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_bind()) {
      set_bind(from.bind());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Equip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Equip::CopyFrom(const Equip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Equip::IsInitialized() const {

  return true;
}

void Equip::Swap(Equip* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(charname_, other->charname_);
    std::swap(gain_time_, other->gain_time_);
    std::swap(id_, other->id_);
    std::swap(level_, other->level_);
    std::swap(is_equipon_, other->is_equipon_);
    std::swap(strength_lv_, other->strength_lv_);
    std::swap(increase_percent_, other->increase_percent_);
    std::swap(durability_, other->durability_);
    std::swap(times_, other->times_);
    effect_list_.Swap(&other->effect_list_);
    std::swap(source_, other->source_);
    std::swap(frozen_time_, other->frozen_time_);
    std::swap(exp_, other->exp_);
    std::swap(bind_, other->bind_);
    best_attr_.Swap(&other->best_attr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Equip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Equip_descriptor_;
  metadata.reflection = Equip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DiamondDoubleHistory::kNameFieldNumber;
const int DiamondDoubleHistory::kDimaondFieldNumber;
#endif  // !_MSC_VER

DiamondDoubleHistory::DiamondDoubleHistory()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DiamondDoubleHistory::InitAsDefaultInstance() {
}

DiamondDoubleHistory::DiamondDoubleHistory(const DiamondDoubleHistory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DiamondDoubleHistory::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dimaond_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DiamondDoubleHistory::~DiamondDoubleHistory() {
  SharedDtor();
}

void DiamondDoubleHistory::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void DiamondDoubleHistory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DiamondDoubleHistory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DiamondDoubleHistory_descriptor_;
}

const DiamondDoubleHistory& DiamondDoubleHistory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

DiamondDoubleHistory* DiamondDoubleHistory::default_instance_ = NULL;

DiamondDoubleHistory* DiamondDoubleHistory::New() const {
  return new DiamondDoubleHistory;
}

void DiamondDoubleHistory::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    dimaond_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DiamondDoubleHistory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dimaond;
        break;
      }

      // optional uint32 dimaond = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dimaond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dimaond_)));
          set_has_dimaond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DiamondDoubleHistory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional uint32 dimaond = 2;
  if (has_dimaond()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dimaond(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DiamondDoubleHistory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional uint32 dimaond = 2;
  if (has_dimaond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->dimaond(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DiamondDoubleHistory::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 dimaond = 2;
    if (has_dimaond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dimaond());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DiamondDoubleHistory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DiamondDoubleHistory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DiamondDoubleHistory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DiamondDoubleHistory::MergeFrom(const DiamondDoubleHistory& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_dimaond()) {
      set_dimaond(from.dimaond());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DiamondDoubleHistory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DiamondDoubleHistory::CopyFrom(const DiamondDoubleHistory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiamondDoubleHistory::IsInitialized() const {

  return true;
}

void DiamondDoubleHistory::Swap(DiamondDoubleHistory* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(dimaond_, other->dimaond_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DiamondDoubleHistory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DiamondDoubleHistory_descriptor_;
  metadata.reflection = DiamondDoubleHistory_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BatSkillInfo::kPlayerskillidFieldNumber;
const int BatSkillInfo::kEffectidFieldNumber;
const int BatSkillInfo::kPosFieldNumber;
const int BatSkillInfo::kCurmarkFieldNumber;
const int BatSkillInfo::kMarkidFieldNumber;
const int BatSkillInfo::kLevelFieldNumber;
const int BatSkillInfo::kEffectid2FieldNumber;
#endif  // !_MSC_VER

BatSkillInfo::BatSkillInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BatSkillInfo::InitAsDefaultInstance() {
}

BatSkillInfo::BatSkillInfo(const BatSkillInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BatSkillInfo::SharedCtor() {
  _cached_size_ = 0;
  playerskillid_ = 0;
  effectid_ = 0;
  pos_ = 0;
  curmark_ = 0;
  level_ = 0;
  effectid2_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BatSkillInfo::~BatSkillInfo() {
  SharedDtor();
}

void BatSkillInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BatSkillInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatSkillInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BatSkillInfo_descriptor_;
}

const BatSkillInfo& BatSkillInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

BatSkillInfo* BatSkillInfo::default_instance_ = NULL;

BatSkillInfo* BatSkillInfo::New() const {
  return new BatSkillInfo;
}

void BatSkillInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerskillid_ = 0;
    effectid_ = 0;
    pos_ = 0;
    curmark_ = 0;
    level_ = 0;
    effectid2_ = 0;
  }
  markid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BatSkillInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 playerskillid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerskillid_)));
          set_has_playerskillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_effectid;
        break;
      }

      // optional int32 effectid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_effectid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &effectid_)));
          set_has_effectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pos;
        break;
      }

      // optional int32 pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_curmark;
        break;
      }

      // optional int32 curmark = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curmark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curmark_)));
          set_has_curmark();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_markid;
        break;
      }

      // repeated int32 markid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_markid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_markid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_markid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_markid;
        if (input->ExpectTag(48)) goto parse_level;
        break;
      }

      // optional int32 level = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_effectid2;
        break;
      }

      // optional int32 effectid2 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_effectid2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &effectid2_)));
          set_has_effectid2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BatSkillInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 playerskillid = 1;
  if (has_playerskillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->playerskillid(), output);
  }

  // optional int32 effectid = 2;
  if (has_effectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->effectid(), output);
  }

  // optional int32 pos = 3;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pos(), output);
  }

  // optional int32 curmark = 4;
  if (has_curmark()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->curmark(), output);
  }

  // repeated int32 markid = 5;
  for (int i = 0; i < this->markid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->markid(i), output);
  }

  // optional int32 level = 6;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->level(), output);
  }

  // optional int32 effectid2 = 7;
  if (has_effectid2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->effectid2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BatSkillInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 playerskillid = 1;
  if (has_playerskillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->playerskillid(), target);
  }

  // optional int32 effectid = 2;
  if (has_effectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->effectid(), target);
  }

  // optional int32 pos = 3;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pos(), target);
  }

  // optional int32 curmark = 4;
  if (has_curmark()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->curmark(), target);
  }

  // repeated int32 markid = 5;
  for (int i = 0; i < this->markid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->markid(i), target);
  }

  // optional int32 level = 6;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->level(), target);
  }

  // optional int32 effectid2 = 7;
  if (has_effectid2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->effectid2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BatSkillInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 playerskillid = 1;
    if (has_playerskillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerskillid());
    }

    // optional int32 effectid = 2;
    if (has_effectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->effectid());
    }

    // optional int32 pos = 3;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }

    // optional int32 curmark = 4;
    if (has_curmark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curmark());
    }

    // optional int32 level = 6;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 effectid2 = 7;
    if (has_effectid2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->effectid2());
    }

  }
  // repeated int32 markid = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->markid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->markid(i));
    }
    total_size += 1 * this->markid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatSkillInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BatSkillInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BatSkillInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BatSkillInfo::MergeFrom(const BatSkillInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  markid_.MergeFrom(from.markid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerskillid()) {
      set_playerskillid(from.playerskillid());
    }
    if (from.has_effectid()) {
      set_effectid(from.effectid());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_curmark()) {
      set_curmark(from.curmark());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_effectid2()) {
      set_effectid2(from.effectid2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BatSkillInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatSkillInfo::CopyFrom(const BatSkillInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatSkillInfo::IsInitialized() const {

  return true;
}

void BatSkillInfo::Swap(BatSkillInfo* other) {
  if (other != this) {
    std::swap(playerskillid_, other->playerskillid_);
    std::swap(effectid_, other->effectid_);
    std::swap(pos_, other->pos_);
    std::swap(curmark_, other->curmark_);
    markid_.Swap(&other->markid_);
    std::swap(level_, other->level_);
    std::swap(effectid2_, other->effectid2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BatSkillInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BatSkillInfo_descriptor_;
  metadata.reflection = BatSkillInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerEffect::kAttdataFieldNumber;
#endif  // !_MSC_VER

PlayerEffect::PlayerEffect()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerEffect::InitAsDefaultInstance() {
}

PlayerEffect::PlayerEffect(const PlayerEffect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerEffect::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerEffect::~PlayerEffect() {
  SharedDtor();
}

void PlayerEffect::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerEffect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerEffect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerEffect_descriptor_;
}

const PlayerEffect& PlayerEffect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

PlayerEffect* PlayerEffect::default_instance_ = NULL;

PlayerEffect* PlayerEffect::New() const {
  return new PlayerEffect;
}

void PlayerEffect::Clear() {
  attdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerEffect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 attdata = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attdata:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_attdata())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_attdata())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_attdata;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerEffect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 attdata = 1;
  for (int i = 0; i < this->attdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->attdata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerEffect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 attdata = 1;
  for (int i = 0; i < this->attdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->attdata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerEffect::ByteSize() const {
  int total_size = 0;

  // repeated int32 attdata = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->attdata_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->attdata(i));
    }
    total_size += 1 * this->attdata_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerEffect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerEffect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerEffect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerEffect::MergeFrom(const PlayerEffect& from) {
  GOOGLE_CHECK_NE(&from, this);
  attdata_.MergeFrom(from.attdata_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerEffect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerEffect::CopyFrom(const PlayerEffect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerEffect::IsInitialized() const {

  return true;
}

void PlayerEffect::Swap(PlayerEffect* other) {
  if (other != this) {
    attdata_.Swap(&other->attdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerEffect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerEffect_descriptor_;
  metadata.reflection = PlayerEffect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BattlePlayerInfo::kNplayeridFieldNumber;
const int BattlePlayerInfo::kPtFieldNumber;
const int BattlePlayerInfo::kDirFieldNumber;
const int BattlePlayerInfo::kNameFieldNumber;
const int BattlePlayerInfo::kCurhpFieldNumber;
const int BattlePlayerInfo::kAttvalueFieldNumber;
const int BattlePlayerInfo::kAttprecentFieldNumber;
const int BattlePlayerInfo::kLevelFieldNumber;
const int BattlePlayerInfo::kEquipListFieldNumber;
const int BattlePlayerInfo::kCareerFieldNumber;
const int BattlePlayerInfo::kVelocityFieldNumber;
const int BattlePlayerInfo::kTitleIDFieldNumber;
const int BattlePlayerInfo::kLayerFieldNumber;
const int BattlePlayerInfo::kTitlenameFieldNumber;
const int BattlePlayerInfo::kTitleishideFieldNumber;
const int BattlePlayerInfo::kSkilllistFieldNumber;
const int BattlePlayerInfo::kNplayeruuidFieldNumber;
const int BattlePlayerInfo::kNguildidFieldNumber;
const int BattlePlayerInfo::kGuildNameFieldNumber;
const int BattlePlayerInfo::kXpenergyFieldNumber;
const int BattlePlayerInfo::kServeridFieldNumber;
const int BattlePlayerInfo::kTeamidFieldNumber;
const int BattlePlayerInfo::kPvpscoreFieldNumber;
const int BattlePlayerInfo::kPvpteamFieldNumber;
const int BattlePlayerInfo::kCurPetidFieldNumber;
const int BattlePlayerInfo::kCurRideidFieldNumber;
const int BattlePlayerInfo::kCurAwakenidFieldNumber;
const int BattlePlayerInfo::kCurMercenaryidFieldNumber;
const int BattlePlayerInfo::kNmercenaryLinkidFieldNumber;
const int BattlePlayerInfo::kCurtpFieldNumber;
const int BattlePlayerInfo::kSuitidFieldNumber;
const int BattlePlayerInfo::kPkvalFieldNumber;
const int BattlePlayerInfo::kCurAvataridFieldNumber;
const int BattlePlayerInfo::kCurAvatarcoloridFieldNumber;
const int BattlePlayerInfo::kAttackmodeFieldNumber;
const int BattlePlayerInfo::kDhlevelFieldNumber;
const int BattlePlayerInfo::kLinkidFieldNumber;
const int BattlePlayerInfo::kHeadinfoFieldNumber;
const int BattlePlayerInfo::kMercenaryscriptFieldNumber;
const int BattlePlayerInfo::kRidescriptFieldNumber;
const int BattlePlayerInfo::kAwakenscriptFieldNumber;
const int BattlePlayerInfo::kCurPetrankFieldNumber;
const int BattlePlayerInfo::kCurMercenrankFieldNumber;
const int BattlePlayerInfo::kMaxtpFieldNumber;
const int BattlePlayerInfo::kMaxhpFieldNumber;
const int BattlePlayerInfo::kBaseequipFieldNumber;
#endif  // !_MSC_VER

BattlePlayerInfo::BattlePlayerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BattlePlayerInfo::InitAsDefaultInstance() {
  pt_ = const_cast< ::proto::message::Point3D*>(&::proto::message::Point3D::default_instance());
  headinfo_ = const_cast< ::proto::message::BattleHeadInfo*>(&::proto::message::BattleHeadInfo::default_instance());
}

BattlePlayerInfo::BattlePlayerInfo(const BattlePlayerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BattlePlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  nplayerid_ = 0u;
  pt_ = NULL;
  dir_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  curhp_ = 0;
  level_ = 0;
  career_ = 0;
  velocity_ = 0;
  titleid_ = 0;
  layer_ = 0;
  titlename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  titleishide_ = 0;
  nplayeruuid_ = GOOGLE_ULONGLONG(0);
  nguildid_ = GOOGLE_ULONGLONG(0);
  guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  xpenergy_ = 0u;
  serverid_ = 0u;
  teamid_ = 0;
  pvpscore_ = 0;
  pvpteam_ = 0;
  cur_petid_ = 0;
  cur_rideid_ = 0;
  cur_awakenid_ = 0;
  cur_mercenaryid_ = 0;
  nmercenary_linkid_ = 0u;
  curtp_ = 0u;
  suitid_ = 0u;
  pkval_ = 0u;
  cur_avatarid_ = 0u;
  cur_avatarcolorid_ = 0u;
  attackmode_ = 0u;
  dhlevel_ = 0u;
  linkid_ = 0u;
  headinfo_ = NULL;
  cur_petrank_ = 0u;
  cur_mercenrank_ = 0u;
  maxtp_ = 0;
  maxhp_ = 0;
  baseequip_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattlePlayerInfo::~BattlePlayerInfo() {
  SharedDtor();
}

void BattlePlayerInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (titlename_ != &::google::protobuf::internal::kEmptyString) {
    delete titlename_;
  }
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    delete guildname_;
  }
  if (this != default_instance_) {
    delete pt_;
    delete headinfo_;
  }
}

void BattlePlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattlePlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattlePlayerInfo_descriptor_;
}

const BattlePlayerInfo& BattlePlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

BattlePlayerInfo* BattlePlayerInfo::default_instance_ = NULL;

BattlePlayerInfo* BattlePlayerInfo::New() const {
  return new BattlePlayerInfo;
}

void BattlePlayerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nplayerid_ = 0u;
    if (has_pt()) {
      if (pt_ != NULL) pt_->::proto::message::Point3D::Clear();
    }
    dir_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    curhp_ = 0;
    level_ = 0;
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    career_ = 0;
    velocity_ = 0;
    titleid_ = 0;
    layer_ = 0;
    if (has_titlename()) {
      if (titlename_ != &::google::protobuf::internal::kEmptyString) {
        titlename_->clear();
      }
    }
    titleishide_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    nplayeruuid_ = GOOGLE_ULONGLONG(0);
    nguildid_ = GOOGLE_ULONGLONG(0);
    if (has_guildname()) {
      if (guildname_ != &::google::protobuf::internal::kEmptyString) {
        guildname_->clear();
      }
    }
    xpenergy_ = 0u;
    serverid_ = 0u;
    teamid_ = 0;
    pvpscore_ = 0;
    pvpteam_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    cur_petid_ = 0;
    cur_rideid_ = 0;
    cur_awakenid_ = 0;
    cur_mercenaryid_ = 0;
    nmercenary_linkid_ = 0u;
    curtp_ = 0u;
    suitid_ = 0u;
    pkval_ = 0u;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    cur_avatarid_ = 0u;
    cur_avatarcolorid_ = 0u;
    attackmode_ = 0u;
    dhlevel_ = 0u;
    linkid_ = 0u;
    if (has_headinfo()) {
      if (headinfo_ != NULL) headinfo_->::proto::message::BattleHeadInfo::Clear();
    }
  }
  if (_has_bits_[41 / 32] & (0xffu << (41 % 32))) {
    cur_petrank_ = 0u;
    cur_mercenrank_ = 0u;
    maxtp_ = 0;
    maxhp_ = 0;
    baseequip_ = 0;
  }
  attvalue_.Clear();
  attprecent_.Clear();
  equip_list_.Clear();
  skilllist_.Clear();
  mercenaryscript_.Clear();
  ridescript_.Clear();
  awakenscript_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BattlePlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 nplayerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nplayerid_)));
          set_has_nplayerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pt;
        break;
      }

      // required .proto.message.Point3D pt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_dir;
        break;
      }

      // required float dir = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dir_)));
          set_has_dir();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional string name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_curhp;
        break;
      }

      // optional int32 curhp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curhp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curhp_)));
          set_has_curhp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_attvalue;
        break;
      }

      // repeated int32 attvalue = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_attvalue())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_attvalue())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_attvalue;
        if (input->ExpectTag(56)) goto parse_attprecent;
        break;
      }

      // repeated int32 attprecent = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attprecent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_attprecent())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_attprecent())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_attprecent;
        if (input->ExpectTag(64)) goto parse_level;
        break;
      }

      // optional int32 level = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_equip_list;
        break;
      }

      // repeated .proto.message.Equip equip_list = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equip_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_equip_list;
        if (input->ExpectTag(80)) goto parse_career;
        break;
      }

      // optional int32 career = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_career:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &career_)));
          set_has_career();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_velocity;
        break;
      }

      // optional int32 velocity = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_velocity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &velocity_)));
          set_has_velocity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_titleID;
        break;
      }

      // optional int32 titleID = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_titleID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &titleid_)));
          set_has_titleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_layer;
        break;
      }

      // optional int32 layer = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_layer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &layer_)));
          set_has_layer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_titlename;
        break;
      }

      // optional string titlename = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_titlename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_titlename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->titlename().data(), this->titlename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_titleishide;
        break;
      }

      // optional int32 titleishide = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_titleishide:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &titleishide_)));
          set_has_titleishide();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_skilllist;
        break;
      }

      // repeated .proto.message.BatSkillInfo skilllist = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skilllist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skilllist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_skilllist;
        if (input->ExpectTag(136)) goto parse_nplayeruuid;
        break;
      }

      // optional uint64 nplayeruuid = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nplayeruuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nplayeruuid_)));
          set_has_nplayeruuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_nguildid;
        break;
      }

      // optional uint64 nguildid = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nguildid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nguildid_)));
          set_has_nguildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_guildName;
        break;
      }

      // optional string guildName = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guildName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guildname().data(), this->guildname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_xpenergy;
        break;
      }

      // optional uint32 xpenergy = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_xpenergy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &xpenergy_)));
          set_has_xpenergy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_serverid;
        break;
      }

      // optional uint32 serverid = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_teamid;
        break;
      }

      // optional int32 teamid = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_teamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_pvpscore;
        break;
      }

      // optional int32 pvpscore = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pvpscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pvpscore_)));
          set_has_pvpscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_pvpteam;
        break;
      }

      // optional int32 pvpteam = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pvpteam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pvpteam_)));
          set_has_pvpteam();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_cur_petid;
        break;
      }

      // optional int32 cur_petid = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_petid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_petid_)));
          set_has_cur_petid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_cur_rideid;
        break;
      }

      // optional int32 cur_rideid = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_rideid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_rideid_)));
          set_has_cur_rideid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_cur_awakenid;
        break;
      }

      // optional int32 cur_awakenid = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_awakenid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_awakenid_)));
          set_has_cur_awakenid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_cur_mercenaryid;
        break;
      }

      // optional int32 cur_mercenaryid = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_mercenaryid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_mercenaryid_)));
          set_has_cur_mercenaryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_nmercenary_linkid;
        break;
      }

      // optional uint32 nmercenary_linkid = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nmercenary_linkid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nmercenary_linkid_)));
          set_has_nmercenary_linkid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_curtp;
        break;
      }

      // optional uint32 curtp = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curtp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curtp_)));
          set_has_curtp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_suitid;
        break;
      }

      // optional uint32 suitid = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_suitid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &suitid_)));
          set_has_suitid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_pkval;
        break;
      }

      // optional uint32 pkval = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pkval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pkval_)));
          set_has_pkval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_cur_avatarid;
        break;
      }

      // optional uint32 cur_avatarid = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_avatarid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_avatarid_)));
          set_has_cur_avatarid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_cur_avatarcolorid;
        break;
      }

      // optional uint32 cur_avatarcolorid = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_avatarcolorid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_avatarcolorid_)));
          set_has_cur_avatarcolorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_attackmode;
        break;
      }

      // optional uint32 attackmode = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attackmode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attackmode_)));
          set_has_attackmode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_dhlevel;
        break;
      }

      // optional uint32 dhlevel = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dhlevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dhlevel_)));
          set_has_dhlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(296)) goto parse_linkid;
        break;
      }

      // required uint32 linkid = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_linkid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &linkid_)));
          set_has_linkid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(306)) goto parse_headinfo;
        break;
      }

      // optional .proto.message.BattleHeadInfo headinfo = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_headinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_headinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(312)) goto parse_mercenaryscript;
        break;
      }

      // repeated uint32 mercenaryscript = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mercenaryscript:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 312, input, this->mutable_mercenaryscript())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_mercenaryscript())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(312)) goto parse_mercenaryscript;
        if (input->ExpectTag(320)) goto parse_ridescript;
        break;
      }

      // repeated uint32 ridescript = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ridescript:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 320, input, this->mutable_ridescript())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_ridescript())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_ridescript;
        if (input->ExpectTag(328)) goto parse_awakenscript;
        break;
      }

      // repeated uint32 awakenscript = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_awakenscript:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 328, input, this->mutable_awakenscript())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_awakenscript())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(328)) goto parse_awakenscript;
        if (input->ExpectTag(336)) goto parse_cur_petrank;
        break;
      }

      // optional uint32 cur_petrank = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_petrank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_petrank_)));
          set_has_cur_petrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(344)) goto parse_cur_mercenrank;
        break;
      }

      // optional uint32 cur_mercenrank = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_mercenrank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_mercenrank_)));
          set_has_cur_mercenrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(352)) goto parse_maxtp;
        break;
      }

      // optional int32 maxtp = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxtp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxtp_)));
          set_has_maxtp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(360)) goto parse_maxhp;
        break;
      }

      // optional int32 maxhp = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxhp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxhp_)));
          set_has_maxhp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(368)) goto parse_baseequip;
        break;
      }

      // optional int32 baseequip = 46;
      case 46: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_baseequip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &baseequip_)));
          set_has_baseequip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BattlePlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 nplayerid = 1;
  if (has_nplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->nplayerid(), output);
  }

  // required .proto.message.Point3D pt = 2;
  if (has_pt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pt(), output);
  }

  // required float dir = 3;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->dir(), output);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->name(), output);
  }

  // optional int32 curhp = 5;
  if (has_curhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->curhp(), output);
  }

  // repeated int32 attvalue = 6;
  for (int i = 0; i < this->attvalue_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->attvalue(i), output);
  }

  // repeated int32 attprecent = 7;
  for (int i = 0; i < this->attprecent_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->attprecent(i), output);
  }

  // optional int32 level = 8;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->level(), output);
  }

  // repeated .proto.message.Equip equip_list = 9;
  for (int i = 0; i < this->equip_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->equip_list(i), output);
  }

  // optional int32 career = 10;
  if (has_career()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->career(), output);
  }

  // optional int32 velocity = 11;
  if (has_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->velocity(), output);
  }

  // optional int32 titleID = 12;
  if (has_titleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->titleid(), output);
  }

  // optional int32 layer = 13;
  if (has_layer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->layer(), output);
  }

  // optional string titlename = 14;
  if (has_titlename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->titlename().data(), this->titlename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->titlename(), output);
  }

  // optional int32 titleishide = 15;
  if (has_titleishide()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->titleishide(), output);
  }

  // repeated .proto.message.BatSkillInfo skilllist = 16;
  for (int i = 0; i < this->skilllist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->skilllist(i), output);
  }

  // optional uint64 nplayeruuid = 17;
  if (has_nplayeruuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(17, this->nplayeruuid(), output);
  }

  // optional uint64 nguildid = 18;
  if (has_nguildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(18, this->nguildid(), output);
  }

  // optional string guildName = 19;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->guildname(), output);
  }

  // optional uint32 xpenergy = 20;
  if (has_xpenergy()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->xpenergy(), output);
  }

  // optional uint32 serverid = 21;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->serverid(), output);
  }

  // optional int32 teamid = 22;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->teamid(), output);
  }

  // optional int32 pvpscore = 23;
  if (has_pvpscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->pvpscore(), output);
  }

  // optional int32 pvpteam = 24;
  if (has_pvpteam()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->pvpteam(), output);
  }

  // optional int32 cur_petid = 25;
  if (has_cur_petid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->cur_petid(), output);
  }

  // optional int32 cur_rideid = 26;
  if (has_cur_rideid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->cur_rideid(), output);
  }

  // optional int32 cur_awakenid = 27;
  if (has_cur_awakenid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->cur_awakenid(), output);
  }

  // optional int32 cur_mercenaryid = 28;
  if (has_cur_mercenaryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->cur_mercenaryid(), output);
  }

  // optional uint32 nmercenary_linkid = 29;
  if (has_nmercenary_linkid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->nmercenary_linkid(), output);
  }

  // optional uint32 curtp = 30;
  if (has_curtp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->curtp(), output);
  }

  // optional uint32 suitid = 31;
  if (has_suitid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->suitid(), output);
  }

  // optional uint32 pkval = 32;
  if (has_pkval()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(32, this->pkval(), output);
  }

  // optional uint32 cur_avatarid = 33;
  if (has_cur_avatarid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(33, this->cur_avatarid(), output);
  }

  // optional uint32 cur_avatarcolorid = 34;
  if (has_cur_avatarcolorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(34, this->cur_avatarcolorid(), output);
  }

  // optional uint32 attackmode = 35;
  if (has_attackmode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(35, this->attackmode(), output);
  }

  // optional uint32 dhlevel = 36;
  if (has_dhlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(36, this->dhlevel(), output);
  }

  // required uint32 linkid = 37;
  if (has_linkid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(37, this->linkid(), output);
  }

  // optional .proto.message.BattleHeadInfo headinfo = 38;
  if (has_headinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      38, this->headinfo(), output);
  }

  // repeated uint32 mercenaryscript = 39;
  for (int i = 0; i < this->mercenaryscript_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      39, this->mercenaryscript(i), output);
  }

  // repeated uint32 ridescript = 40;
  for (int i = 0; i < this->ridescript_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      40, this->ridescript(i), output);
  }

  // repeated uint32 awakenscript = 41;
  for (int i = 0; i < this->awakenscript_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      41, this->awakenscript(i), output);
  }

  // optional uint32 cur_petrank = 42;
  if (has_cur_petrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(42, this->cur_petrank(), output);
  }

  // optional uint32 cur_mercenrank = 43;
  if (has_cur_mercenrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(43, this->cur_mercenrank(), output);
  }

  // optional int32 maxtp = 44;
  if (has_maxtp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(44, this->maxtp(), output);
  }

  // optional int32 maxhp = 45;
  if (has_maxhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(45, this->maxhp(), output);
  }

  // optional int32 baseequip = 46;
  if (has_baseequip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(46, this->baseequip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BattlePlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 nplayerid = 1;
  if (has_nplayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->nplayerid(), target);
  }

  // required .proto.message.Point3D pt = 2;
  if (has_pt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pt(), target);
  }

  // required float dir = 3;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->dir(), target);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // optional int32 curhp = 5;
  if (has_curhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->curhp(), target);
  }

  // repeated int32 attvalue = 6;
  for (int i = 0; i < this->attvalue_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->attvalue(i), target);
  }

  // repeated int32 attprecent = 7;
  for (int i = 0; i < this->attprecent_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->attprecent(i), target);
  }

  // optional int32 level = 8;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->level(), target);
  }

  // repeated .proto.message.Equip equip_list = 9;
  for (int i = 0; i < this->equip_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->equip_list(i), target);
  }

  // optional int32 career = 10;
  if (has_career()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->career(), target);
  }

  // optional int32 velocity = 11;
  if (has_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->velocity(), target);
  }

  // optional int32 titleID = 12;
  if (has_titleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->titleid(), target);
  }

  // optional int32 layer = 13;
  if (has_layer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->layer(), target);
  }

  // optional string titlename = 14;
  if (has_titlename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->titlename().data(), this->titlename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->titlename(), target);
  }

  // optional int32 titleishide = 15;
  if (has_titleishide()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->titleishide(), target);
  }

  // repeated .proto.message.BatSkillInfo skilllist = 16;
  for (int i = 0; i < this->skilllist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->skilllist(i), target);
  }

  // optional uint64 nplayeruuid = 17;
  if (has_nplayeruuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(17, this->nplayeruuid(), target);
  }

  // optional uint64 nguildid = 18;
  if (has_nguildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(18, this->nguildid(), target);
  }

  // optional string guildName = 19;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->guildname(), target);
  }

  // optional uint32 xpenergy = 20;
  if (has_xpenergy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->xpenergy(), target);
  }

  // optional uint32 serverid = 21;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->serverid(), target);
  }

  // optional int32 teamid = 22;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->teamid(), target);
  }

  // optional int32 pvpscore = 23;
  if (has_pvpscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->pvpscore(), target);
  }

  // optional int32 pvpteam = 24;
  if (has_pvpteam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->pvpteam(), target);
  }

  // optional int32 cur_petid = 25;
  if (has_cur_petid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->cur_petid(), target);
  }

  // optional int32 cur_rideid = 26;
  if (has_cur_rideid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->cur_rideid(), target);
  }

  // optional int32 cur_awakenid = 27;
  if (has_cur_awakenid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->cur_awakenid(), target);
  }

  // optional int32 cur_mercenaryid = 28;
  if (has_cur_mercenaryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->cur_mercenaryid(), target);
  }

  // optional uint32 nmercenary_linkid = 29;
  if (has_nmercenary_linkid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(29, this->nmercenary_linkid(), target);
  }

  // optional uint32 curtp = 30;
  if (has_curtp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->curtp(), target);
  }

  // optional uint32 suitid = 31;
  if (has_suitid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(31, this->suitid(), target);
  }

  // optional uint32 pkval = 32;
  if (has_pkval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(32, this->pkval(), target);
  }

  // optional uint32 cur_avatarid = 33;
  if (has_cur_avatarid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(33, this->cur_avatarid(), target);
  }

  // optional uint32 cur_avatarcolorid = 34;
  if (has_cur_avatarcolorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(34, this->cur_avatarcolorid(), target);
  }

  // optional uint32 attackmode = 35;
  if (has_attackmode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(35, this->attackmode(), target);
  }

  // optional uint32 dhlevel = 36;
  if (has_dhlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(36, this->dhlevel(), target);
  }

  // required uint32 linkid = 37;
  if (has_linkid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(37, this->linkid(), target);
  }

  // optional .proto.message.BattleHeadInfo headinfo = 38;
  if (has_headinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        38, this->headinfo(), target);
  }

  // repeated uint32 mercenaryscript = 39;
  for (int i = 0; i < this->mercenaryscript_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(39, this->mercenaryscript(i), target);
  }

  // repeated uint32 ridescript = 40;
  for (int i = 0; i < this->ridescript_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(40, this->ridescript(i), target);
  }

  // repeated uint32 awakenscript = 41;
  for (int i = 0; i < this->awakenscript_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(41, this->awakenscript(i), target);
  }

  // optional uint32 cur_petrank = 42;
  if (has_cur_petrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(42, this->cur_petrank(), target);
  }

  // optional uint32 cur_mercenrank = 43;
  if (has_cur_mercenrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(43, this->cur_mercenrank(), target);
  }

  // optional int32 maxtp = 44;
  if (has_maxtp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(44, this->maxtp(), target);
  }

  // optional int32 maxhp = 45;
  if (has_maxhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(45, this->maxhp(), target);
  }

  // optional int32 baseequip = 46;
  if (has_baseequip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(46, this->baseequip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BattlePlayerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 nplayerid = 1;
    if (has_nplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nplayerid());
    }

    // required .proto.message.Point3D pt = 2;
    if (has_pt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pt());
    }

    // required float dir = 3;
    if (has_dir()) {
      total_size += 1 + 4;
    }

    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 curhp = 5;
    if (has_curhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curhp());
    }

    // optional int32 level = 8;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional int32 career = 10;
    if (has_career()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->career());
    }

    // optional int32 velocity = 11;
    if (has_velocity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->velocity());
    }

    // optional int32 titleID = 12;
    if (has_titleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->titleid());
    }

    // optional int32 layer = 13;
    if (has_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->layer());
    }

    // optional string titlename = 14;
    if (has_titlename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->titlename());
    }

    // optional int32 titleishide = 15;
    if (has_titleishide()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->titleishide());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint64 nplayeruuid = 17;
    if (has_nplayeruuid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->nplayeruuid());
    }

    // optional uint64 nguildid = 18;
    if (has_nguildid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->nguildid());
    }

    // optional string guildName = 19;
    if (has_guildname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildname());
    }

    // optional uint32 xpenergy = 20;
    if (has_xpenergy()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->xpenergy());
    }

    // optional uint32 serverid = 21;
    if (has_serverid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverid());
    }

    // optional int32 teamid = 22;
    if (has_teamid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->teamid());
    }

    // optional int32 pvpscore = 23;
    if (has_pvpscore()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pvpscore());
    }

    // optional int32 pvpteam = 24;
    if (has_pvpteam()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pvpteam());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 cur_petid = 25;
    if (has_cur_petid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_petid());
    }

    // optional int32 cur_rideid = 26;
    if (has_cur_rideid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_rideid());
    }

    // optional int32 cur_awakenid = 27;
    if (has_cur_awakenid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_awakenid());
    }

    // optional int32 cur_mercenaryid = 28;
    if (has_cur_mercenaryid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_mercenaryid());
    }

    // optional uint32 nmercenary_linkid = 29;
    if (has_nmercenary_linkid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nmercenary_linkid());
    }

    // optional uint32 curtp = 30;
    if (has_curtp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curtp());
    }

    // optional uint32 suitid = 31;
    if (has_suitid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->suitid());
    }

    // optional uint32 pkval = 32;
    if (has_pkval()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pkval());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional uint32 cur_avatarid = 33;
    if (has_cur_avatarid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_avatarid());
    }

    // optional uint32 cur_avatarcolorid = 34;
    if (has_cur_avatarcolorid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_avatarcolorid());
    }

    // optional uint32 attackmode = 35;
    if (has_attackmode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attackmode());
    }

    // optional uint32 dhlevel = 36;
    if (has_dhlevel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dhlevel());
    }

    // required uint32 linkid = 37;
    if (has_linkid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->linkid());
    }

    // optional .proto.message.BattleHeadInfo headinfo = 38;
    if (has_headinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->headinfo());
    }

  }
  if (_has_bits_[41 / 32] & (0xffu << (41 % 32))) {
    // optional uint32 cur_petrank = 42;
    if (has_cur_petrank()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_petrank());
    }

    // optional uint32 cur_mercenrank = 43;
    if (has_cur_mercenrank()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_mercenrank());
    }

    // optional int32 maxtp = 44;
    if (has_maxtp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxtp());
    }

    // optional int32 maxhp = 45;
    if (has_maxhp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxhp());
    }

    // optional int32 baseequip = 46;
    if (has_baseequip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->baseequip());
    }

  }
  // repeated int32 attvalue = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->attvalue_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->attvalue(i));
    }
    total_size += 1 * this->attvalue_size() + data_size;
  }

  // repeated int32 attprecent = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->attprecent_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->attprecent(i));
    }
    total_size += 1 * this->attprecent_size() + data_size;
  }

  // repeated .proto.message.Equip equip_list = 9;
  total_size += 1 * this->equip_list_size();
  for (int i = 0; i < this->equip_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equip_list(i));
  }

  // repeated .proto.message.BatSkillInfo skilllist = 16;
  total_size += 2 * this->skilllist_size();
  for (int i = 0; i < this->skilllist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skilllist(i));
  }

  // repeated uint32 mercenaryscript = 39;
  {
    int data_size = 0;
    for (int i = 0; i < this->mercenaryscript_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->mercenaryscript(i));
    }
    total_size += 2 * this->mercenaryscript_size() + data_size;
  }

  // repeated uint32 ridescript = 40;
  {
    int data_size = 0;
    for (int i = 0; i < this->ridescript_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->ridescript(i));
    }
    total_size += 2 * this->ridescript_size() + data_size;
  }

  // repeated uint32 awakenscript = 41;
  {
    int data_size = 0;
    for (int i = 0; i < this->awakenscript_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->awakenscript(i));
    }
    total_size += 2 * this->awakenscript_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattlePlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BattlePlayerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BattlePlayerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BattlePlayerInfo::MergeFrom(const BattlePlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  attvalue_.MergeFrom(from.attvalue_);
  attprecent_.MergeFrom(from.attprecent_);
  equip_list_.MergeFrom(from.equip_list_);
  skilllist_.MergeFrom(from.skilllist_);
  mercenaryscript_.MergeFrom(from.mercenaryscript_);
  ridescript_.MergeFrom(from.ridescript_);
  awakenscript_.MergeFrom(from.awakenscript_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nplayerid()) {
      set_nplayerid(from.nplayerid());
    }
    if (from.has_pt()) {
      mutable_pt()->::proto::message::Point3D::MergeFrom(from.pt());
    }
    if (from.has_dir()) {
      set_dir(from.dir());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_curhp()) {
      set_curhp(from.curhp());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_career()) {
      set_career(from.career());
    }
    if (from.has_velocity()) {
      set_velocity(from.velocity());
    }
    if (from.has_titleid()) {
      set_titleid(from.titleid());
    }
    if (from.has_layer()) {
      set_layer(from.layer());
    }
    if (from.has_titlename()) {
      set_titlename(from.titlename());
    }
    if (from.has_titleishide()) {
      set_titleishide(from.titleishide());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_nplayeruuid()) {
      set_nplayeruuid(from.nplayeruuid());
    }
    if (from.has_nguildid()) {
      set_nguildid(from.nguildid());
    }
    if (from.has_guildname()) {
      set_guildname(from.guildname());
    }
    if (from.has_xpenergy()) {
      set_xpenergy(from.xpenergy());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_pvpscore()) {
      set_pvpscore(from.pvpscore());
    }
    if (from.has_pvpteam()) {
      set_pvpteam(from.pvpteam());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_cur_petid()) {
      set_cur_petid(from.cur_petid());
    }
    if (from.has_cur_rideid()) {
      set_cur_rideid(from.cur_rideid());
    }
    if (from.has_cur_awakenid()) {
      set_cur_awakenid(from.cur_awakenid());
    }
    if (from.has_cur_mercenaryid()) {
      set_cur_mercenaryid(from.cur_mercenaryid());
    }
    if (from.has_nmercenary_linkid()) {
      set_nmercenary_linkid(from.nmercenary_linkid());
    }
    if (from.has_curtp()) {
      set_curtp(from.curtp());
    }
    if (from.has_suitid()) {
      set_suitid(from.suitid());
    }
    if (from.has_pkval()) {
      set_pkval(from.pkval());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_cur_avatarid()) {
      set_cur_avatarid(from.cur_avatarid());
    }
    if (from.has_cur_avatarcolorid()) {
      set_cur_avatarcolorid(from.cur_avatarcolorid());
    }
    if (from.has_attackmode()) {
      set_attackmode(from.attackmode());
    }
    if (from.has_dhlevel()) {
      set_dhlevel(from.dhlevel());
    }
    if (from.has_linkid()) {
      set_linkid(from.linkid());
    }
    if (from.has_headinfo()) {
      mutable_headinfo()->::proto::message::BattleHeadInfo::MergeFrom(from.headinfo());
    }
  }
  if (from._has_bits_[41 / 32] & (0xffu << (41 % 32))) {
    if (from.has_cur_petrank()) {
      set_cur_petrank(from.cur_petrank());
    }
    if (from.has_cur_mercenrank()) {
      set_cur_mercenrank(from.cur_mercenrank());
    }
    if (from.has_maxtp()) {
      set_maxtp(from.maxtp());
    }
    if (from.has_maxhp()) {
      set_maxhp(from.maxhp());
    }
    if (from.has_baseequip()) {
      set_baseequip(from.baseequip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BattlePlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattlePlayerInfo::CopyFrom(const BattlePlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattlePlayerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if ((_has_bits_[1] & 0x00000010) != 0x00000010) return false;

  return true;
}

void BattlePlayerInfo::Swap(BattlePlayerInfo* other) {
  if (other != this) {
    std::swap(nplayerid_, other->nplayerid_);
    std::swap(pt_, other->pt_);
    std::swap(dir_, other->dir_);
    std::swap(name_, other->name_);
    std::swap(curhp_, other->curhp_);
    attvalue_.Swap(&other->attvalue_);
    attprecent_.Swap(&other->attprecent_);
    std::swap(level_, other->level_);
    equip_list_.Swap(&other->equip_list_);
    std::swap(career_, other->career_);
    std::swap(velocity_, other->velocity_);
    std::swap(titleid_, other->titleid_);
    std::swap(layer_, other->layer_);
    std::swap(titlename_, other->titlename_);
    std::swap(titleishide_, other->titleishide_);
    skilllist_.Swap(&other->skilllist_);
    std::swap(nplayeruuid_, other->nplayeruuid_);
    std::swap(nguildid_, other->nguildid_);
    std::swap(guildname_, other->guildname_);
    std::swap(xpenergy_, other->xpenergy_);
    std::swap(serverid_, other->serverid_);
    std::swap(teamid_, other->teamid_);
    std::swap(pvpscore_, other->pvpscore_);
    std::swap(pvpteam_, other->pvpteam_);
    std::swap(cur_petid_, other->cur_petid_);
    std::swap(cur_rideid_, other->cur_rideid_);
    std::swap(cur_awakenid_, other->cur_awakenid_);
    std::swap(cur_mercenaryid_, other->cur_mercenaryid_);
    std::swap(nmercenary_linkid_, other->nmercenary_linkid_);
    std::swap(curtp_, other->curtp_);
    std::swap(suitid_, other->suitid_);
    std::swap(pkval_, other->pkval_);
    std::swap(cur_avatarid_, other->cur_avatarid_);
    std::swap(cur_avatarcolorid_, other->cur_avatarcolorid_);
    std::swap(attackmode_, other->attackmode_);
    std::swap(dhlevel_, other->dhlevel_);
    std::swap(linkid_, other->linkid_);
    std::swap(headinfo_, other->headinfo_);
    mercenaryscript_.Swap(&other->mercenaryscript_);
    ridescript_.Swap(&other->ridescript_);
    awakenscript_.Swap(&other->awakenscript_);
    std::swap(cur_petrank_, other->cur_petrank_);
    std::swap(cur_mercenrank_, other->cur_mercenrank_);
    std::swap(maxtp_, other->maxtp_);
    std::swap(maxhp_, other->maxhp_);
    std::swap(baseequip_, other->baseequip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BattlePlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BattlePlayerInfo_descriptor_;
  metadata.reflection = BattlePlayerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BattleMercenaryInfo::kNmercenaryidFieldNumber;
const int BattleMercenaryInfo::kNTableidFieldNumber;
const int BattleMercenaryInfo::kPtFieldNumber;
const int BattleMercenaryInfo::kDirFieldNumber;
const int BattleMercenaryInfo::kNameFieldNumber;
const int BattleMercenaryInfo::kCurhpFieldNumber;
const int BattleMercenaryInfo::kAttvalueFieldNumber;
const int BattleMercenaryInfo::kLevelFieldNumber;
const int BattleMercenaryInfo::kVelocityFieldNumber;
const int BattleMercenaryInfo::kLayerFieldNumber;
const int BattleMercenaryInfo::kNcampidFieldNumber;
const int BattleMercenaryInfo::kSkilllistFieldNumber;
const int BattleMercenaryInfo::kRankingFieldNumber;
#endif  // !_MSC_VER

BattleMercenaryInfo::BattleMercenaryInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BattleMercenaryInfo::InitAsDefaultInstance() {
  pt_ = const_cast< ::proto::message::Point3D*>(&::proto::message::Point3D::default_instance());
}

BattleMercenaryInfo::BattleMercenaryInfo(const BattleMercenaryInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BattleMercenaryInfo::SharedCtor() {
  _cached_size_ = 0;
  nmercenaryid_ = 0u;
  ntableid_ = 0u;
  pt_ = NULL;
  dir_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  curhp_ = GOOGLE_LONGLONG(0);
  level_ = 0;
  velocity_ = 0;
  layer_ = 0;
  ncampid_ = 0;
  ranking_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleMercenaryInfo::~BattleMercenaryInfo() {
  SharedDtor();
}

void BattleMercenaryInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete pt_;
  }
}

void BattleMercenaryInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattleMercenaryInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleMercenaryInfo_descriptor_;
}

const BattleMercenaryInfo& BattleMercenaryInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

BattleMercenaryInfo* BattleMercenaryInfo::default_instance_ = NULL;

BattleMercenaryInfo* BattleMercenaryInfo::New() const {
  return new BattleMercenaryInfo;
}

void BattleMercenaryInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nmercenaryid_ = 0u;
    ntableid_ = 0u;
    if (has_pt()) {
      if (pt_ != NULL) pt_->::proto::message::Point3D::Clear();
    }
    dir_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    curhp_ = GOOGLE_LONGLONG(0);
    level_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    velocity_ = 0;
    layer_ = 0;
    ncampid_ = 0;
    ranking_ = 0;
  }
  attvalue_.Clear();
  skilllist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BattleMercenaryInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 nmercenaryid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nmercenaryid_)));
          set_has_nmercenaryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nTableid;
        break;
      }

      // required uint32 nTableid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nTableid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ntableid_)));
          set_has_ntableid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pt;
        break;
      }

      // required .proto.message.Point3D pt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_dir;
        break;
      }

      // required float dir = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dir_)));
          set_has_dir();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }

      // optional string name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_curhp;
        break;
      }

      // optional int64 curhp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curhp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &curhp_)));
          set_has_curhp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_attvalue;
        break;
      }

      // repeated int32 attvalue = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_attvalue())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_attvalue())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_attvalue;
        if (input->ExpectTag(64)) goto parse_level;
        break;
      }

      // optional int32 level = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_velocity;
        break;
      }

      // optional int32 velocity = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_velocity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &velocity_)));
          set_has_velocity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_layer;
        break;
      }

      // optional int32 layer = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_layer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &layer_)));
          set_has_layer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_ncampid;
        break;
      }

      // optional int32 ncampid = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ncampid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ncampid_)));
          set_has_ncampid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_skilllist;
        break;
      }

      // repeated int32 skilllist = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skilllist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 96, input, this->mutable_skilllist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_skilllist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_skilllist;
        if (input->ExpectTag(104)) goto parse_ranking;
        break;
      }

      // optional int32 ranking = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ranking:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ranking_)));
          set_has_ranking();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BattleMercenaryInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 nmercenaryid = 1;
  if (has_nmercenaryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->nmercenaryid(), output);
  }

  // required uint32 nTableid = 2;
  if (has_ntableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ntableid(), output);
  }

  // required .proto.message.Point3D pt = 3;
  if (has_pt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pt(), output);
  }

  // required float dir = 4;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->dir(), output);
  }

  // optional string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->name(), output);
  }

  // optional int64 curhp = 6;
  if (has_curhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->curhp(), output);
  }

  // repeated int32 attvalue = 7;
  for (int i = 0; i < this->attvalue_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->attvalue(i), output);
  }

  // optional int32 level = 8;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->level(), output);
  }

  // optional int32 velocity = 9;
  if (has_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->velocity(), output);
  }

  // optional int32 layer = 10;
  if (has_layer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->layer(), output);
  }

  // optional int32 ncampid = 11;
  if (has_ncampid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->ncampid(), output);
  }

  // repeated int32 skilllist = 12;
  for (int i = 0; i < this->skilllist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      12, this->skilllist(i), output);
  }

  // optional int32 ranking = 13;
  if (has_ranking()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->ranking(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BattleMercenaryInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 nmercenaryid = 1;
  if (has_nmercenaryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->nmercenaryid(), target);
  }

  // required uint32 nTableid = 2;
  if (has_ntableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ntableid(), target);
  }

  // required .proto.message.Point3D pt = 3;
  if (has_pt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pt(), target);
  }

  // required float dir = 4;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->dir(), target);
  }

  // optional string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }

  // optional int64 curhp = 6;
  if (has_curhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->curhp(), target);
  }

  // repeated int32 attvalue = 7;
  for (int i = 0; i < this->attvalue_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->attvalue(i), target);
  }

  // optional int32 level = 8;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->level(), target);
  }

  // optional int32 velocity = 9;
  if (has_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->velocity(), target);
  }

  // optional int32 layer = 10;
  if (has_layer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->layer(), target);
  }

  // optional int32 ncampid = 11;
  if (has_ncampid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->ncampid(), target);
  }

  // repeated int32 skilllist = 12;
  for (int i = 0; i < this->skilllist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(12, this->skilllist(i), target);
  }

  // optional int32 ranking = 13;
  if (has_ranking()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->ranking(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BattleMercenaryInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 nmercenaryid = 1;
    if (has_nmercenaryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nmercenaryid());
    }

    // required uint32 nTableid = 2;
    if (has_ntableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ntableid());
    }

    // required .proto.message.Point3D pt = 3;
    if (has_pt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pt());
    }

    // required float dir = 4;
    if (has_dir()) {
      total_size += 1 + 4;
    }

    // optional string name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int64 curhp = 6;
    if (has_curhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->curhp());
    }

    // optional int32 level = 8;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 velocity = 9;
    if (has_velocity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->velocity());
    }

    // optional int32 layer = 10;
    if (has_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->layer());
    }

    // optional int32 ncampid = 11;
    if (has_ncampid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ncampid());
    }

    // optional int32 ranking = 13;
    if (has_ranking()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ranking());
    }

  }
  // repeated int32 attvalue = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->attvalue_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->attvalue(i));
    }
    total_size += 1 * this->attvalue_size() + data_size;
  }

  // repeated int32 skilllist = 12;
  {
    int data_size = 0;
    for (int i = 0; i < this->skilllist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->skilllist(i));
    }
    total_size += 1 * this->skilllist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleMercenaryInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BattleMercenaryInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BattleMercenaryInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BattleMercenaryInfo::MergeFrom(const BattleMercenaryInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  attvalue_.MergeFrom(from.attvalue_);
  skilllist_.MergeFrom(from.skilllist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nmercenaryid()) {
      set_nmercenaryid(from.nmercenaryid());
    }
    if (from.has_ntableid()) {
      set_ntableid(from.ntableid());
    }
    if (from.has_pt()) {
      mutable_pt()->::proto::message::Point3D::MergeFrom(from.pt());
    }
    if (from.has_dir()) {
      set_dir(from.dir());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_curhp()) {
      set_curhp(from.curhp());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_velocity()) {
      set_velocity(from.velocity());
    }
    if (from.has_layer()) {
      set_layer(from.layer());
    }
    if (from.has_ncampid()) {
      set_ncampid(from.ncampid());
    }
    if (from.has_ranking()) {
      set_ranking(from.ranking());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BattleMercenaryInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleMercenaryInfo::CopyFrom(const BattleMercenaryInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleMercenaryInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void BattleMercenaryInfo::Swap(BattleMercenaryInfo* other) {
  if (other != this) {
    std::swap(nmercenaryid_, other->nmercenaryid_);
    std::swap(ntableid_, other->ntableid_);
    std::swap(pt_, other->pt_);
    std::swap(dir_, other->dir_);
    std::swap(name_, other->name_);
    std::swap(curhp_, other->curhp_);
    attvalue_.Swap(&other->attvalue_);
    std::swap(level_, other->level_);
    std::swap(velocity_, other->velocity_);
    std::swap(layer_, other->layer_);
    std::swap(ncampid_, other->ncampid_);
    skilllist_.Swap(&other->skilllist_);
    std::swap(ranking_, other->ranking_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BattleMercenaryInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BattleMercenaryInfo_descriptor_;
  metadata.reflection = BattleMercenaryInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BattleSingleHeadInfo::kNtypeFieldNumber;
const int BattleSingleHeadInfo::kPlyidFieldNumber;
const int BattleSingleHeadInfo::kParam1FieldNumber;
const int BattleSingleHeadInfo::kParam2FieldNumber;
const int BattleSingleHeadInfo::kParam3FieldNumber;
const int BattleSingleHeadInfo::kParam4FieldNumber;
#endif  // !_MSC_VER

BattleSingleHeadInfo::BattleSingleHeadInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BattleSingleHeadInfo::InitAsDefaultInstance() {
}

BattleSingleHeadInfo::BattleSingleHeadInfo(const BattleSingleHeadInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BattleSingleHeadInfo::SharedCtor() {
  _cached_size_ = 0;
  ntype_ = 0;
  plyid_ = 0;
  param1_ = 0;
  param2_ = 0;
  param3_ = GOOGLE_LONGLONG(0);
  param4_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleSingleHeadInfo::~BattleSingleHeadInfo() {
  SharedDtor();
}

void BattleSingleHeadInfo::SharedDtor() {
  if (param4_ != &::google::protobuf::internal::kEmptyString) {
    delete param4_;
  }
  if (this != default_instance_) {
  }
}

void BattleSingleHeadInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattleSingleHeadInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleSingleHeadInfo_descriptor_;
}

const BattleSingleHeadInfo& BattleSingleHeadInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

BattleSingleHeadInfo* BattleSingleHeadInfo::default_instance_ = NULL;

BattleSingleHeadInfo* BattleSingleHeadInfo::New() const {
  return new BattleSingleHeadInfo;
}

void BattleSingleHeadInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ntype_ = 0;
    plyid_ = 0;
    param1_ = 0;
    param2_ = 0;
    param3_ = GOOGLE_LONGLONG(0);
    if (has_param4()) {
      if (param4_ != &::google::protobuf::internal::kEmptyString) {
        param4_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BattleSingleHeadInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ntype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ntype_)));
          set_has_ntype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_plyid;
        break;
      }

      // optional int32 plyid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_plyid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &plyid_)));
          set_has_plyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_param1;
        break;
      }

      // optional int32 param1 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &param1_)));
          set_has_param1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_param2;
        break;
      }

      // optional int32 param2 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &param2_)));
          set_has_param2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_param3;
        break;
      }

      // optional int64 param3 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &param3_)));
          set_has_param3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_param4;
        break;
      }

      // optional string param4 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_param4:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_param4()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->param4().data(), this->param4().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BattleSingleHeadInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ntype = 1;
  if (has_ntype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ntype(), output);
  }

  // optional int32 plyid = 2;
  if (has_plyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->plyid(), output);
  }

  // optional int32 param1 = 3;
  if (has_param1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->param1(), output);
  }

  // optional int32 param2 = 4;
  if (has_param2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->param2(), output);
  }

  // optional int64 param3 = 5;
  if (has_param3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->param3(), output);
  }

  // optional string param4 = 6;
  if (has_param4()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->param4().data(), this->param4().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->param4(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BattleSingleHeadInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ntype = 1;
  if (has_ntype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ntype(), target);
  }

  // optional int32 plyid = 2;
  if (has_plyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->plyid(), target);
  }

  // optional int32 param1 = 3;
  if (has_param1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->param1(), target);
  }

  // optional int32 param2 = 4;
  if (has_param2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->param2(), target);
  }

  // optional int64 param3 = 5;
  if (has_param3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->param3(), target);
  }

  // optional string param4 = 6;
  if (has_param4()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->param4().data(), this->param4().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->param4(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BattleSingleHeadInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ntype = 1;
    if (has_ntype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ntype());
    }

    // optional int32 plyid = 2;
    if (has_plyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->plyid());
    }

    // optional int32 param1 = 3;
    if (has_param1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->param1());
    }

    // optional int32 param2 = 4;
    if (has_param2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->param2());
    }

    // optional int64 param3 = 5;
    if (has_param3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->param3());
    }

    // optional string param4 = 6;
    if (has_param4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->param4());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleSingleHeadInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BattleSingleHeadInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BattleSingleHeadInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BattleSingleHeadInfo::MergeFrom(const BattleSingleHeadInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ntype()) {
      set_ntype(from.ntype());
    }
    if (from.has_plyid()) {
      set_plyid(from.plyid());
    }
    if (from.has_param1()) {
      set_param1(from.param1());
    }
    if (from.has_param2()) {
      set_param2(from.param2());
    }
    if (from.has_param3()) {
      set_param3(from.param3());
    }
    if (from.has_param4()) {
      set_param4(from.param4());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BattleSingleHeadInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleSingleHeadInfo::CopyFrom(const BattleSingleHeadInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleSingleHeadInfo::IsInitialized() const {

  return true;
}

void BattleSingleHeadInfo::Swap(BattleSingleHeadInfo* other) {
  if (other != this) {
    std::swap(ntype_, other->ntype_);
    std::swap(plyid_, other->plyid_);
    std::swap(param1_, other->param1_);
    std::swap(param2_, other->param2_);
    std::swap(param3_, other->param3_);
    std::swap(param4_, other->param4_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BattleSingleHeadInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BattleSingleHeadInfo_descriptor_;
  metadata.reflection = BattleSingleHeadInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BattleHeadInfo::kInfolistFieldNumber;
#endif  // !_MSC_VER

BattleHeadInfo::BattleHeadInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BattleHeadInfo::InitAsDefaultInstance() {
}

BattleHeadInfo::BattleHeadInfo(const BattleHeadInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BattleHeadInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleHeadInfo::~BattleHeadInfo() {
  SharedDtor();
}

void BattleHeadInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BattleHeadInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattleHeadInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleHeadInfo_descriptor_;
}

const BattleHeadInfo& BattleHeadInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

BattleHeadInfo* BattleHeadInfo::default_instance_ = NULL;

BattleHeadInfo* BattleHeadInfo::New() const {
  return new BattleHeadInfo;
}

void BattleHeadInfo::Clear() {
  infolist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BattleHeadInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.message.BattleSingleHeadInfo infolist = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infolist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infolist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_infolist;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BattleHeadInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.message.BattleSingleHeadInfo infolist = 1;
  for (int i = 0; i < this->infolist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->infolist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BattleHeadInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.message.BattleSingleHeadInfo infolist = 1;
  for (int i = 0; i < this->infolist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->infolist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BattleHeadInfo::ByteSize() const {
  int total_size = 0;

  // repeated .proto.message.BattleSingleHeadInfo infolist = 1;
  total_size += 1 * this->infolist_size();
  for (int i = 0; i < this->infolist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infolist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleHeadInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BattleHeadInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BattleHeadInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BattleHeadInfo::MergeFrom(const BattleHeadInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  infolist_.MergeFrom(from.infolist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BattleHeadInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleHeadInfo::CopyFrom(const BattleHeadInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleHeadInfo::IsInitialized() const {

  return true;
}

void BattleHeadInfo::Swap(BattleHeadInfo* other) {
  if (other != this) {
    infolist_.Swap(&other->infolist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BattleHeadInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BattleHeadInfo_descriptor_;
  metadata.reflection = BattleHeadInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BattleBoatInfo::kBoatidFieldNumber;
const int BattleBoatInfo::kSkinidFieldNumber;
const int BattleBoatInfo::kLandskillFieldNumber;
const int BattleBoatInfo::kSeaskillFieldNumber;
#endif  // !_MSC_VER

BattleBoatInfo::BattleBoatInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BattleBoatInfo::InitAsDefaultInstance() {
}

BattleBoatInfo::BattleBoatInfo(const BattleBoatInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BattleBoatInfo::SharedCtor() {
  _cached_size_ = 0;
  boatid_ = 0;
  skinid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleBoatInfo::~BattleBoatInfo() {
  SharedDtor();
}

void BattleBoatInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BattleBoatInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattleBoatInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleBoatInfo_descriptor_;
}

const BattleBoatInfo& BattleBoatInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

BattleBoatInfo* BattleBoatInfo::default_instance_ = NULL;

BattleBoatInfo* BattleBoatInfo::New() const {
  return new BattleBoatInfo;
}

void BattleBoatInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    boatid_ = 0;
    skinid_ = 0;
  }
  landskill_.Clear();
  seaskill_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BattleBoatInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 boatid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &boatid_)));
          set_has_boatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skinid;
        break;
      }

      // optional int32 skinid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skinid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skinid_)));
          set_has_skinid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_landskill;
        break;
      }

      // repeated int32 landskill = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_landskill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_landskill())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_landskill())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_landskill;
        if (input->ExpectTag(32)) goto parse_seaskill;
        break;
      }

      // repeated int32 seaskill = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seaskill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_seaskill())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_seaskill())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_seaskill;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BattleBoatInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 boatid = 1;
  if (has_boatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->boatid(), output);
  }

  // optional int32 skinid = 2;
  if (has_skinid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->skinid(), output);
  }

  // repeated int32 landskill = 3;
  for (int i = 0; i < this->landskill_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->landskill(i), output);
  }

  // repeated int32 seaskill = 4;
  for (int i = 0; i < this->seaskill_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->seaskill(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BattleBoatInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 boatid = 1;
  if (has_boatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->boatid(), target);
  }

  // optional int32 skinid = 2;
  if (has_skinid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->skinid(), target);
  }

  // repeated int32 landskill = 3;
  for (int i = 0; i < this->landskill_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->landskill(i), target);
  }

  // repeated int32 seaskill = 4;
  for (int i = 0; i < this->seaskill_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->seaskill(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BattleBoatInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 boatid = 1;
    if (has_boatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->boatid());
    }

    // optional int32 skinid = 2;
    if (has_skinid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skinid());
    }

  }
  // repeated int32 landskill = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->landskill_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->landskill(i));
    }
    total_size += 1 * this->landskill_size() + data_size;
  }

  // repeated int32 seaskill = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->seaskill_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->seaskill(i));
    }
    total_size += 1 * this->seaskill_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleBoatInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BattleBoatInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BattleBoatInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BattleBoatInfo::MergeFrom(const BattleBoatInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  landskill_.MergeFrom(from.landskill_);
  seaskill_.MergeFrom(from.seaskill_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_boatid()) {
      set_boatid(from.boatid());
    }
    if (from.has_skinid()) {
      set_skinid(from.skinid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BattleBoatInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleBoatInfo::CopyFrom(const BattleBoatInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleBoatInfo::IsInitialized() const {

  return true;
}

void BattleBoatInfo::Swap(BattleBoatInfo* other) {
  if (other != this) {
    std::swap(boatid_, other->boatid_);
    std::swap(skinid_, other->skinid_);
    landskill_.Swap(&other->landskill_);
    seaskill_.Swap(&other->seaskill_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BattleBoatInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BattleBoatInfo_descriptor_;
  metadata.reflection = BattleBoatInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MatchPlayerInfo::kIScoreFieldNumber;
const int MatchPlayerInfo::kIMatchScoreFieldNumber;
const int MatchPlayerInfo::kSPlyInfoFieldNumber;
#endif  // !_MSC_VER

MatchPlayerInfo::MatchPlayerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MatchPlayerInfo::InitAsDefaultInstance() {
  splyinfo_ = const_cast< ::proto::message::BattlePlayerInfo*>(&::proto::message::BattlePlayerInfo::default_instance());
}

MatchPlayerInfo::MatchPlayerInfo(const MatchPlayerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MatchPlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  iscore_ = 0;
  imatchscore_ = 0;
  splyinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MatchPlayerInfo::~MatchPlayerInfo() {
  SharedDtor();
}

void MatchPlayerInfo::SharedDtor() {
  if (this != default_instance_) {
    delete splyinfo_;
  }
}

void MatchPlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatchPlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchPlayerInfo_descriptor_;
}

const MatchPlayerInfo& MatchPlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

MatchPlayerInfo* MatchPlayerInfo::default_instance_ = NULL;

MatchPlayerInfo* MatchPlayerInfo::New() const {
  return new MatchPlayerInfo;
}

void MatchPlayerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iscore_ = 0;
    imatchscore_ = 0;
    if (has_splyinfo()) {
      if (splyinfo_ != NULL) splyinfo_->::proto::message::BattlePlayerInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MatchPlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iScore = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iscore_)));
          set_has_iscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iMatchScore;
        break;
      }

      // optional int32 iMatchScore = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iMatchScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &imatchscore_)));
          set_has_imatchscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sPlyInfo;
        break;
      }

      // optional .proto.message.BattlePlayerInfo sPlyInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sPlyInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_splyinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MatchPlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iScore = 1;
  if (has_iscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iscore(), output);
  }

  // optional int32 iMatchScore = 2;
  if (has_imatchscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->imatchscore(), output);
  }

  // optional .proto.message.BattlePlayerInfo sPlyInfo = 3;
  if (has_splyinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->splyinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MatchPlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iScore = 1;
  if (has_iscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iscore(), target);
  }

  // optional int32 iMatchScore = 2;
  if (has_imatchscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->imatchscore(), target);
  }

  // optional .proto.message.BattlePlayerInfo sPlyInfo = 3;
  if (has_splyinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->splyinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MatchPlayerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iScore = 1;
    if (has_iscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iscore());
    }

    // optional int32 iMatchScore = 2;
    if (has_imatchscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->imatchscore());
    }

    // optional .proto.message.BattlePlayerInfo sPlyInfo = 3;
    if (has_splyinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->splyinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatchPlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MatchPlayerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MatchPlayerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MatchPlayerInfo::MergeFrom(const MatchPlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iscore()) {
      set_iscore(from.iscore());
    }
    if (from.has_imatchscore()) {
      set_imatchscore(from.imatchscore());
    }
    if (from.has_splyinfo()) {
      mutable_splyinfo()->::proto::message::BattlePlayerInfo::MergeFrom(from.splyinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MatchPlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchPlayerInfo::CopyFrom(const MatchPlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchPlayerInfo::IsInitialized() const {

  if (has_splyinfo()) {
    if (!this->splyinfo().IsInitialized()) return false;
  }
  return true;
}

void MatchPlayerInfo::Swap(MatchPlayerInfo* other) {
  if (other != this) {
    std::swap(iscore_, other->iscore_);
    std::swap(imatchscore_, other->imatchscore_);
    std::swap(splyinfo_, other->splyinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MatchPlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MatchPlayerInfo_descriptor_;
  metadata.reflection = MatchPlayerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WolrdBossSaledItem::kSItemInfoFieldNumber;
const int WolrdBossSaledItem::kUiPlayerNameFieldNumber;
const int WolrdBossSaledItem::kUiBossIdFieldNumber;
const int WolrdBossSaledItem::kUiPriceFieldNumber;
const int WolrdBossSaledItem::kUiPlayerUUIDFieldNumber;
#endif  // !_MSC_VER

WolrdBossSaledItem::WolrdBossSaledItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WolrdBossSaledItem::InitAsDefaultInstance() {
  siteminfo_ = const_cast< ::proto::message::IDNum*>(&::proto::message::IDNum::default_instance());
}

WolrdBossSaledItem::WolrdBossSaledItem(const WolrdBossSaledItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WolrdBossSaledItem::SharedCtor() {
  _cached_size_ = 0;
  siteminfo_ = NULL;
  uiplayername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uibossid_ = 0u;
  uiprice_ = 0u;
  uiplayeruuid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WolrdBossSaledItem::~WolrdBossSaledItem() {
  SharedDtor();
}

void WolrdBossSaledItem::SharedDtor() {
  if (uiplayername_ != &::google::protobuf::internal::kEmptyString) {
    delete uiplayername_;
  }
  if (this != default_instance_) {
    delete siteminfo_;
  }
}

void WolrdBossSaledItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WolrdBossSaledItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WolrdBossSaledItem_descriptor_;
}

const WolrdBossSaledItem& WolrdBossSaledItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

WolrdBossSaledItem* WolrdBossSaledItem::default_instance_ = NULL;

WolrdBossSaledItem* WolrdBossSaledItem::New() const {
  return new WolrdBossSaledItem;
}

void WolrdBossSaledItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_siteminfo()) {
      if (siteminfo_ != NULL) siteminfo_->::proto::message::IDNum::Clear();
    }
    if (has_uiplayername()) {
      if (uiplayername_ != &::google::protobuf::internal::kEmptyString) {
        uiplayername_->clear();
      }
    }
    uibossid_ = 0u;
    uiprice_ = 0u;
    uiplayeruuid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WolrdBossSaledItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.message.IDNum sItemInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_siteminfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_uiPlayerName;
        break;
      }

      // optional string uiPlayerName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uiPlayerName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uiplayername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uiplayername().data(), this->uiplayername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uiBossId;
        break;
      }

      // optional uint32 uiBossId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiBossId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uibossid_)));
          set_has_uibossid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_uiPrice;
        break;
      }

      // optional uint32 uiPrice = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiprice_)));
          set_has_uiprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_uiPlayerUUID;
        break;
      }

      // optional uint64 uiPlayerUUID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiPlayerUUID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uiplayeruuid_)));
          set_has_uiplayeruuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WolrdBossSaledItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto.message.IDNum sItemInfo = 1;
  if (has_siteminfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->siteminfo(), output);
  }

  // optional string uiPlayerName = 2;
  if (has_uiplayername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uiplayername().data(), this->uiplayername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->uiplayername(), output);
  }

  // optional uint32 uiBossId = 3;
  if (has_uibossid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->uibossid(), output);
  }

  // optional uint32 uiPrice = 4;
  if (has_uiprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->uiprice(), output);
  }

  // optional uint64 uiPlayerUUID = 5;
  if (has_uiplayeruuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->uiplayeruuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WolrdBossSaledItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto.message.IDNum sItemInfo = 1;
  if (has_siteminfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->siteminfo(), target);
  }

  // optional string uiPlayerName = 2;
  if (has_uiplayername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uiplayername().data(), this->uiplayername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->uiplayername(), target);
  }

  // optional uint32 uiBossId = 3;
  if (has_uibossid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->uibossid(), target);
  }

  // optional uint32 uiPrice = 4;
  if (has_uiprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->uiprice(), target);
  }

  // optional uint64 uiPlayerUUID = 5;
  if (has_uiplayeruuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->uiplayeruuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WolrdBossSaledItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto.message.IDNum sItemInfo = 1;
    if (has_siteminfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->siteminfo());
    }

    // optional string uiPlayerName = 2;
    if (has_uiplayername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uiplayername());
    }

    // optional uint32 uiBossId = 3;
    if (has_uibossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uibossid());
    }

    // optional uint32 uiPrice = 4;
    if (has_uiprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiprice());
    }

    // optional uint64 uiPlayerUUID = 5;
    if (has_uiplayeruuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uiplayeruuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WolrdBossSaledItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WolrdBossSaledItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WolrdBossSaledItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WolrdBossSaledItem::MergeFrom(const WolrdBossSaledItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_siteminfo()) {
      mutable_siteminfo()->::proto::message::IDNum::MergeFrom(from.siteminfo());
    }
    if (from.has_uiplayername()) {
      set_uiplayername(from.uiplayername());
    }
    if (from.has_uibossid()) {
      set_uibossid(from.uibossid());
    }
    if (from.has_uiprice()) {
      set_uiprice(from.uiprice());
    }
    if (from.has_uiplayeruuid()) {
      set_uiplayeruuid(from.uiplayeruuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WolrdBossSaledItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WolrdBossSaledItem::CopyFrom(const WolrdBossSaledItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WolrdBossSaledItem::IsInitialized() const {

  return true;
}

void WolrdBossSaledItem::Swap(WolrdBossSaledItem* other) {
  if (other != this) {
    std::swap(siteminfo_, other->siteminfo_);
    std::swap(uiplayername_, other->uiplayername_);
    std::swap(uibossid_, other->uibossid_);
    std::swap(uiprice_, other->uiprice_);
    std::swap(uiplayeruuid_, other->uiplayeruuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WolrdBossSaledItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WolrdBossSaledItem_descriptor_;
  metadata.reflection = WolrdBossSaledItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OfflineDataDetail::kPlayerskillFieldNumber;
const int OfflineDataDetail::kPlayerattFieldNumber;
const int OfflineDataDetail::kArtifactidFieldNumber;
const int OfflineDataDetail::kArtifactskillFieldNumber;
const int OfflineDataDetail::kPetidFieldNumber;
const int OfflineDataDetail::kBoatidFieldNumber;
const int OfflineDataDetail::kBoatskinFieldNumber;
const int OfflineDataDetail::kBoatskillFieldNumber;
const int OfflineDataDetail::kAwakenidFieldNumber;
const int OfflineDataDetail::kWarlordidFieldNumber;
const int OfflineDataDetail::kFightvalueFieldNumber;
const int OfflineDataDetail::kSkinidFieldNumber;
#endif  // !_MSC_VER

OfflineDataDetail::OfflineDataDetail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OfflineDataDetail::InitAsDefaultInstance() {
  playeratt_ = const_cast< ::proto::message::PlayerEffect*>(&::proto::message::PlayerEffect::default_instance());
}

OfflineDataDetail::OfflineDataDetail(const OfflineDataDetail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OfflineDataDetail::SharedCtor() {
  _cached_size_ = 0;
  playeratt_ = NULL;
  artifactid_ = 0;
  petid_ = 0;
  boatid_ = 0;
  boatskin_ = 0;
  awakenid_ = 0;
  warlordid_ = 0;
  fightvalue_ = 0;
  skinid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OfflineDataDetail::~OfflineDataDetail() {
  SharedDtor();
}

void OfflineDataDetail::SharedDtor() {
  if (this != default_instance_) {
    delete playeratt_;
  }
}

void OfflineDataDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OfflineDataDetail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OfflineDataDetail_descriptor_;
}

const OfflineDataDetail& OfflineDataDetail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

OfflineDataDetail* OfflineDataDetail::default_instance_ = NULL;

OfflineDataDetail* OfflineDataDetail::New() const {
  return new OfflineDataDetail;
}

void OfflineDataDetail::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_playeratt()) {
      if (playeratt_ != NULL) playeratt_->::proto::message::PlayerEffect::Clear();
    }
    artifactid_ = 0;
    petid_ = 0;
    boatid_ = 0;
    boatskin_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    awakenid_ = 0;
    warlordid_ = 0;
    fightvalue_ = 0;
    skinid_ = 0;
  }
  playerskill_.Clear();
  artifactskill_.Clear();
  boatskill_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OfflineDataDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 playerskill = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerskill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_playerskill())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_playerskill())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_playerskill;
        if (input->ExpectTag(18)) goto parse_playeratt;
        break;
      }

      // optional .proto.message.PlayerEffect playeratt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playeratt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playeratt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_artifactid;
        break;
      }

      // optional int32 artifactid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_artifactid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &artifactid_)));
          set_has_artifactid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_artifactskill;
        break;
      }

      // repeated int32 artifactskill = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_artifactskill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_artifactskill())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_artifactskill())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_artifactskill;
        if (input->ExpectTag(40)) goto parse_petid;
        break;
      }

      // optional int32 petid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_petid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &petid_)));
          set_has_petid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_boatid;
        break;
      }

      // optional int32 boatid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boatid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &boatid_)));
          set_has_boatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_boatskin;
        break;
      }

      // optional int32 boatskin = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boatskin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &boatskin_)));
          set_has_boatskin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_boatskill;
        break;
      }

      // repeated int32 boatskill = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boatskill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64, input, this->mutable_boatskill())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_boatskill())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_boatskill;
        if (input->ExpectTag(72)) goto parse_awakenid;
        break;
      }

      // optional int32 awakenid = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_awakenid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &awakenid_)));
          set_has_awakenid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_warlordid;
        break;
      }

      // optional int32 warlordid = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_warlordid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &warlordid_)));
          set_has_warlordid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_fightvalue;
        break;
      }

      // optional int32 fightvalue = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fightvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fightvalue_)));
          set_has_fightvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_skinid;
        break;
      }

      // optional int32 skinid = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skinid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skinid_)));
          set_has_skinid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OfflineDataDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 playerskill = 1;
  for (int i = 0; i < this->playerskill_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->playerskill(i), output);
  }

  // optional .proto.message.PlayerEffect playeratt = 2;
  if (has_playeratt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->playeratt(), output);
  }

  // optional int32 artifactid = 3;
  if (has_artifactid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->artifactid(), output);
  }

  // repeated int32 artifactskill = 4;
  for (int i = 0; i < this->artifactskill_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->artifactskill(i), output);
  }

  // optional int32 petid = 5;
  if (has_petid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->petid(), output);
  }

  // optional int32 boatid = 6;
  if (has_boatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->boatid(), output);
  }

  // optional int32 boatskin = 7;
  if (has_boatskin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->boatskin(), output);
  }

  // repeated int32 boatskill = 8;
  for (int i = 0; i < this->boatskill_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->boatskill(i), output);
  }

  // optional int32 awakenid = 9;
  if (has_awakenid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->awakenid(), output);
  }

  // optional int32 warlordid = 10;
  if (has_warlordid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->warlordid(), output);
  }

  // optional int32 fightvalue = 11;
  if (has_fightvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->fightvalue(), output);
  }

  // optional int32 skinid = 12;
  if (has_skinid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->skinid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OfflineDataDetail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 playerskill = 1;
  for (int i = 0; i < this->playerskill_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->playerskill(i), target);
  }

  // optional .proto.message.PlayerEffect playeratt = 2;
  if (has_playeratt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->playeratt(), target);
  }

  // optional int32 artifactid = 3;
  if (has_artifactid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->artifactid(), target);
  }

  // repeated int32 artifactskill = 4;
  for (int i = 0; i < this->artifactskill_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->artifactskill(i), target);
  }

  // optional int32 petid = 5;
  if (has_petid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->petid(), target);
  }

  // optional int32 boatid = 6;
  if (has_boatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->boatid(), target);
  }

  // optional int32 boatskin = 7;
  if (has_boatskin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->boatskin(), target);
  }

  // repeated int32 boatskill = 8;
  for (int i = 0; i < this->boatskill_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(8, this->boatskill(i), target);
  }

  // optional int32 awakenid = 9;
  if (has_awakenid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->awakenid(), target);
  }

  // optional int32 warlordid = 10;
  if (has_warlordid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->warlordid(), target);
  }

  // optional int32 fightvalue = 11;
  if (has_fightvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->fightvalue(), target);
  }

  // optional int32 skinid = 12;
  if (has_skinid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->skinid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OfflineDataDetail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .proto.message.PlayerEffect playeratt = 2;
    if (has_playeratt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playeratt());
    }

    // optional int32 artifactid = 3;
    if (has_artifactid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->artifactid());
    }

    // optional int32 petid = 5;
    if (has_petid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->petid());
    }

    // optional int32 boatid = 6;
    if (has_boatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->boatid());
    }

    // optional int32 boatskin = 7;
    if (has_boatskin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->boatskin());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 awakenid = 9;
    if (has_awakenid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->awakenid());
    }

    // optional int32 warlordid = 10;
    if (has_warlordid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->warlordid());
    }

    // optional int32 fightvalue = 11;
    if (has_fightvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fightvalue());
    }

    // optional int32 skinid = 12;
    if (has_skinid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skinid());
    }

  }
  // repeated int32 playerskill = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->playerskill_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->playerskill(i));
    }
    total_size += 1 * this->playerskill_size() + data_size;
  }

  // repeated int32 artifactskill = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->artifactskill_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->artifactskill(i));
    }
    total_size += 1 * this->artifactskill_size() + data_size;
  }

  // repeated int32 boatskill = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->boatskill_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->boatskill(i));
    }
    total_size += 1 * this->boatskill_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OfflineDataDetail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OfflineDataDetail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OfflineDataDetail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OfflineDataDetail::MergeFrom(const OfflineDataDetail& from) {
  GOOGLE_CHECK_NE(&from, this);
  playerskill_.MergeFrom(from.playerskill_);
  artifactskill_.MergeFrom(from.artifactskill_);
  boatskill_.MergeFrom(from.boatskill_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_playeratt()) {
      mutable_playeratt()->::proto::message::PlayerEffect::MergeFrom(from.playeratt());
    }
    if (from.has_artifactid()) {
      set_artifactid(from.artifactid());
    }
    if (from.has_petid()) {
      set_petid(from.petid());
    }
    if (from.has_boatid()) {
      set_boatid(from.boatid());
    }
    if (from.has_boatskin()) {
      set_boatskin(from.boatskin());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_awakenid()) {
      set_awakenid(from.awakenid());
    }
    if (from.has_warlordid()) {
      set_warlordid(from.warlordid());
    }
    if (from.has_fightvalue()) {
      set_fightvalue(from.fightvalue());
    }
    if (from.has_skinid()) {
      set_skinid(from.skinid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OfflineDataDetail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OfflineDataDetail::CopyFrom(const OfflineDataDetail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OfflineDataDetail::IsInitialized() const {

  return true;
}

void OfflineDataDetail::Swap(OfflineDataDetail* other) {
  if (other != this) {
    playerskill_.Swap(&other->playerskill_);
    std::swap(playeratt_, other->playeratt_);
    std::swap(artifactid_, other->artifactid_);
    artifactskill_.Swap(&other->artifactskill_);
    std::swap(petid_, other->petid_);
    std::swap(boatid_, other->boatid_);
    std::swap(boatskin_, other->boatskin_);
    boatskill_.Swap(&other->boatskill_);
    std::swap(awakenid_, other->awakenid_);
    std::swap(warlordid_, other->warlordid_);
    std::swap(fightvalue_, other->fightvalue_);
    std::swap(skinid_, other->skinid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OfflineDataDetail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OfflineDataDetail_descriptor_;
  metadata.reflection = OfflineDataDetail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MailToMap::kDropidFieldNumber;
const int MailToMap::kItemidFieldNumber;
const int MailToMap::kItemnumFieldNumber;
const int MailToMap::kRolelistFieldNumber;
const int MailToMap::kMailidFieldNumber;
const int MailToMap::kContextFieldNumber;
#endif  // !_MSC_VER

MailToMap::MailToMap()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MailToMap::InitAsDefaultInstance() {
}

MailToMap::MailToMap(const MailToMap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MailToMap::SharedCtor() {
  _cached_size_ = 0;
  dropid_ = 0u;
  itemid_ = 0;
  itemnum_ = 0;
  mailid_ = 0u;
  context_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MailToMap::~MailToMap() {
  SharedDtor();
}

void MailToMap::SharedDtor() {
  if (context_ != &::google::protobuf::internal::kEmptyString) {
    delete context_;
  }
  if (this != default_instance_) {
  }
}

void MailToMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MailToMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MailToMap_descriptor_;
}

const MailToMap& MailToMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

MailToMap* MailToMap::default_instance_ = NULL;

MailToMap* MailToMap::New() const {
  return new MailToMap;
}

void MailToMap::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dropid_ = 0u;
    itemid_ = 0;
    itemnum_ = 0;
    mailid_ = 0u;
    if (has_context()) {
      if (context_ != &::google::protobuf::internal::kEmptyString) {
        context_->clear();
      }
    }
  }
  rolelist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MailToMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 dropid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dropid_)));
          set_has_dropid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemid;
        break;
      }

      // optional int32 itemid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_itemnum;
        break;
      }

      // optional int32 itemnum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemnum_)));
          set_has_itemnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_rolelist;
        break;
      }

      // repeated uint64 rolelist = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rolelist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 32, input, this->mutable_rolelist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_rolelist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_rolelist;
        if (input->ExpectTag(40)) goto parse_mailid;
        break;
      }

      // optional uint32 mailid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mailid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mailid_)));
          set_has_mailid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_context;
        break;
      }

      // optional string context = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_context:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_context()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->context().data(), this->context().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MailToMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 dropid = 1;
  if (has_dropid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dropid(), output);
  }

  // optional int32 itemid = 2;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->itemid(), output);
  }

  // optional int32 itemnum = 3;
  if (has_itemnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->itemnum(), output);
  }

  // repeated uint64 rolelist = 4;
  for (int i = 0; i < this->rolelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      4, this->rolelist(i), output);
  }

  // optional uint32 mailid = 5;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->mailid(), output);
  }

  // optional string context = 6;
  if (has_context()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->context().data(), this->context().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->context(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MailToMap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 dropid = 1;
  if (has_dropid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dropid(), target);
  }

  // optional int32 itemid = 2;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->itemid(), target);
  }

  // optional int32 itemnum = 3;
  if (has_itemnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->itemnum(), target);
  }

  // repeated uint64 rolelist = 4;
  for (int i = 0; i < this->rolelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(4, this->rolelist(i), target);
  }

  // optional uint32 mailid = 5;
  if (has_mailid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->mailid(), target);
  }

  // optional string context = 6;
  if (has_context()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->context().data(), this->context().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->context(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MailToMap::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 dropid = 1;
    if (has_dropid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dropid());
    }

    // optional int32 itemid = 2;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // optional int32 itemnum = 3;
    if (has_itemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemnum());
    }

    // optional uint32 mailid = 5;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mailid());
    }

    // optional string context = 6;
    if (has_context()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->context());
    }

  }
  // repeated uint64 rolelist = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->rolelist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->rolelist(i));
    }
    total_size += 1 * this->rolelist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MailToMap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MailToMap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MailToMap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MailToMap::MergeFrom(const MailToMap& from) {
  GOOGLE_CHECK_NE(&from, this);
  rolelist_.MergeFrom(from.rolelist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dropid()) {
      set_dropid(from.dropid());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_itemnum()) {
      set_itemnum(from.itemnum());
    }
    if (from.has_mailid()) {
      set_mailid(from.mailid());
    }
    if (from.has_context()) {
      set_context(from.context());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MailToMap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MailToMap::CopyFrom(const MailToMap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MailToMap::IsInitialized() const {

  return true;
}

void MailToMap::Swap(MailToMap* other) {
  if (other != this) {
    std::swap(dropid_, other->dropid_);
    std::swap(itemid_, other->itemid_);
    std::swap(itemnum_, other->itemnum_);
    rolelist_.Swap(&other->rolelist_);
    std::swap(mailid_, other->mailid_);
    std::swap(context_, other->context_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MailToMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MailToMap_descriptor_;
  metadata.reflection = MailToMap_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DreadDungeonData::kSecenIDFieldNumber;
const int DreadDungeonData::kCountsFieldNumber;
#endif  // !_MSC_VER

DreadDungeonData::DreadDungeonData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DreadDungeonData::InitAsDefaultInstance() {
}

DreadDungeonData::DreadDungeonData(const DreadDungeonData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DreadDungeonData::SharedCtor() {
  _cached_size_ = 0;
  secenid_ = 0u;
  counts_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DreadDungeonData::~DreadDungeonData() {
  SharedDtor();
}

void DreadDungeonData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DreadDungeonData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DreadDungeonData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DreadDungeonData_descriptor_;
}

const DreadDungeonData& DreadDungeonData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

DreadDungeonData* DreadDungeonData::default_instance_ = NULL;

DreadDungeonData* DreadDungeonData::New() const {
  return new DreadDungeonData;
}

void DreadDungeonData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    secenid_ = 0u;
    counts_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DreadDungeonData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 secenID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &secenid_)));
          set_has_secenid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_counts;
        break;
      }

      // optional uint32 counts = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_counts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &counts_)));
          set_has_counts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DreadDungeonData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 secenID = 1;
  if (has_secenid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->secenid(), output);
  }

  // optional uint32 counts = 2;
  if (has_counts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->counts(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DreadDungeonData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 secenID = 1;
  if (has_secenid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->secenid(), target);
  }

  // optional uint32 counts = 2;
  if (has_counts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->counts(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DreadDungeonData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 secenID = 1;
    if (has_secenid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->secenid());
    }

    // optional uint32 counts = 2;
    if (has_counts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->counts());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DreadDungeonData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DreadDungeonData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DreadDungeonData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DreadDungeonData::MergeFrom(const DreadDungeonData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_secenid()) {
      set_secenid(from.secenid());
    }
    if (from.has_counts()) {
      set_counts(from.counts());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DreadDungeonData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DreadDungeonData::CopyFrom(const DreadDungeonData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DreadDungeonData::IsInitialized() const {

  return true;
}

void DreadDungeonData::Swap(DreadDungeonData* other) {
  if (other != this) {
    std::swap(secenid_, other->secenid_);
    std::swap(counts_, other->counts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DreadDungeonData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DreadDungeonData_descriptor_;
  metadata.reflection = DreadDungeonData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerBaseData::kCharidFieldNumber;
const int PlayerBaseData::kCharnameFieldNumber;
const int PlayerBaseData::kGuildidFieldNumber;
const int PlayerBaseData::kGuildnameFieldNumber;
const int PlayerBaseData::kCareerFieldNumber;
const int PlayerBaseData::kDhlevFieldNumber;
const int PlayerBaseData::kLevelFieldNumber;
const int PlayerBaseData::kFightvalFieldNumber;
const int PlayerBaseData::kSkinidFieldNumber;
const int PlayerBaseData::kWeaponskinFieldNumber;
const int PlayerBaseData::kSuitidFieldNumber;
const int PlayerBaseData::kEquiplistFieldNumber;
const int PlayerBaseData::kAttributFieldNumber;
#endif  // !_MSC_VER

PlayerBaseData::PlayerBaseData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerBaseData::InitAsDefaultInstance() {
}

PlayerBaseData::PlayerBaseData(const PlayerBaseData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerBaseData::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  guildid_ = GOOGLE_ULONGLONG(0);
  guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  career_ = 0u;
  dhlev_ = 0u;
  level_ = 0u;
  fightval_ = 0u;
  skinid_ = 0u;
  weaponskin_ = 0u;
  suitid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerBaseData::~PlayerBaseData() {
  SharedDtor();
}

void PlayerBaseData::SharedDtor() {
  if (charname_ != &::google::protobuf::internal::kEmptyString) {
    delete charname_;
  }
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    delete guildname_;
  }
  if (this != default_instance_) {
  }
}

void PlayerBaseData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerBaseData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerBaseData_descriptor_;
}

const PlayerBaseData& PlayerBaseData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

PlayerBaseData* PlayerBaseData::default_instance_ = NULL;

PlayerBaseData* PlayerBaseData::New() const {
  return new PlayerBaseData;
}

void PlayerBaseData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_ULONGLONG(0);
    if (has_charname()) {
      if (charname_ != &::google::protobuf::internal::kEmptyString) {
        charname_->clear();
      }
    }
    guildid_ = GOOGLE_ULONGLONG(0);
    if (has_guildname()) {
      if (guildname_ != &::google::protobuf::internal::kEmptyString) {
        guildname_->clear();
      }
    }
    career_ = 0u;
    dhlev_ = 0u;
    level_ = 0u;
    fightval_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    skinid_ = 0u;
    weaponskin_ = 0u;
    suitid_ = 0u;
  }
  equiplist_.Clear();
  attribut_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerBaseData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_charname;
        break;
      }

      // optional string charname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_charname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_charname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->charname().data(), this->charname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_guildid;
        break;
      }

      // optional uint64 guildid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guildid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_guildname;
        break;
      }

      // optional string guildname = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guildname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guildname().data(), this->guildname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_career;
        break;
      }

      // optional uint32 career = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_career:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &career_)));
          set_has_career();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_dhlev;
        break;
      }

      // optional uint32 dhlev = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dhlev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dhlev_)));
          set_has_dhlev();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_level;
        break;
      }

      // optional uint32 level = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_fightval;
        break;
      }

      // optional uint32 fightval = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fightval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fightval_)));
          set_has_fightval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_skinid;
        break;
      }

      // optional uint32 skinid = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skinid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skinid_)));
          set_has_skinid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_weaponskin;
        break;
      }

      // optional uint32 weaponskin = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weaponskin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weaponskin_)));
          set_has_weaponskin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_suitid;
        break;
      }

      // optional uint32 suitid = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_suitid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &suitid_)));
          set_has_suitid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_equiplist;
        break;
      }

      // repeated uint32 equiplist = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equiplist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 96, input, this->mutable_equiplist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_equiplist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_equiplist;
        if (input->ExpectTag(104)) goto parse_attribut;
        break;
      }

      // repeated uint32 attribut = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attribut:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 104, input, this->mutable_attribut())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_attribut())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_attribut;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerBaseData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  // optional string charname = 2;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->charname(), output);
  }

  // optional uint64 guildid = 3;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->guildid(), output);
  }

  // optional string guildname = 4;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->guildname(), output);
  }

  // optional uint32 career = 5;
  if (has_career()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->career(), output);
  }

  // optional uint32 dhlev = 6;
  if (has_dhlev()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->dhlev(), output);
  }

  // optional uint32 level = 7;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->level(), output);
  }

  // optional uint32 fightval = 8;
  if (has_fightval()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->fightval(), output);
  }

  // optional uint32 skinid = 9;
  if (has_skinid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->skinid(), output);
  }

  // optional uint32 weaponskin = 10;
  if (has_weaponskin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->weaponskin(), output);
  }

  // optional uint32 suitid = 11;
  if (has_suitid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->suitid(), output);
  }

  // repeated uint32 equiplist = 12;
  for (int i = 0; i < this->equiplist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      12, this->equiplist(i), output);
  }

  // repeated uint32 attribut = 13;
  for (int i = 0; i < this->attribut_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      13, this->attribut(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerBaseData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  // optional string charname = 2;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->charname(), target);
  }

  // optional uint64 guildid = 3;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->guildid(), target);
  }

  // optional string guildname = 4;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->guildname(), target);
  }

  // optional uint32 career = 5;
  if (has_career()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->career(), target);
  }

  // optional uint32 dhlev = 6;
  if (has_dhlev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->dhlev(), target);
  }

  // optional uint32 level = 7;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->level(), target);
  }

  // optional uint32 fightval = 8;
  if (has_fightval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->fightval(), target);
  }

  // optional uint32 skinid = 9;
  if (has_skinid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->skinid(), target);
  }

  // optional uint32 weaponskin = 10;
  if (has_weaponskin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->weaponskin(), target);
  }

  // optional uint32 suitid = 11;
  if (has_suitid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->suitid(), target);
  }

  // repeated uint32 equiplist = 12;
  for (int i = 0; i < this->equiplist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(12, this->equiplist(i), target);
  }

  // repeated uint32 attribut = 13;
  for (int i = 0; i < this->attribut_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(13, this->attribut(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerBaseData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional string charname = 2;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->charname());
    }

    // optional uint64 guildid = 3;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

    // optional string guildname = 4;
    if (has_guildname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildname());
    }

    // optional uint32 career = 5;
    if (has_career()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->career());
    }

    // optional uint32 dhlev = 6;
    if (has_dhlev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dhlev());
    }

    // optional uint32 level = 7;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 fightval = 8;
    if (has_fightval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fightval());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 skinid = 9;
    if (has_skinid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skinid());
    }

    // optional uint32 weaponskin = 10;
    if (has_weaponskin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weaponskin());
    }

    // optional uint32 suitid = 11;
    if (has_suitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->suitid());
    }

  }
  // repeated uint32 equiplist = 12;
  {
    int data_size = 0;
    for (int i = 0; i < this->equiplist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->equiplist(i));
    }
    total_size += 1 * this->equiplist_size() + data_size;
  }

  // repeated uint32 attribut = 13;
  {
    int data_size = 0;
    for (int i = 0; i < this->attribut_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->attribut(i));
    }
    total_size += 1 * this->attribut_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerBaseData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerBaseData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerBaseData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerBaseData::MergeFrom(const PlayerBaseData& from) {
  GOOGLE_CHECK_NE(&from, this);
  equiplist_.MergeFrom(from.equiplist_);
  attribut_.MergeFrom(from.attribut_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_charname()) {
      set_charname(from.charname());
    }
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_guildname()) {
      set_guildname(from.guildname());
    }
    if (from.has_career()) {
      set_career(from.career());
    }
    if (from.has_dhlev()) {
      set_dhlev(from.dhlev());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_fightval()) {
      set_fightval(from.fightval());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_skinid()) {
      set_skinid(from.skinid());
    }
    if (from.has_weaponskin()) {
      set_weaponskin(from.weaponskin());
    }
    if (from.has_suitid()) {
      set_suitid(from.suitid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerBaseData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerBaseData::CopyFrom(const PlayerBaseData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerBaseData::IsInitialized() const {

  return true;
}

void PlayerBaseData::Swap(PlayerBaseData* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(charname_, other->charname_);
    std::swap(guildid_, other->guildid_);
    std::swap(guildname_, other->guildname_);
    std::swap(career_, other->career_);
    std::swap(dhlev_, other->dhlev_);
    std::swap(level_, other->level_);
    std::swap(fightval_, other->fightval_);
    std::swap(skinid_, other->skinid_);
    std::swap(weaponskin_, other->weaponskin_);
    std::swap(suitid_, other->suitid_);
    equiplist_.Swap(&other->equiplist_);
    attribut_.Swap(&other->attribut_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerBaseData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerBaseData_descriptor_;
  metadata.reflection = PlayerBaseData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GrowData::kExidFieldNumber;
const int GrowData::kFitvalueFieldNumber;
const int GrowData::kEquiplistFieldNumber;
const int GrowData::kSkilllistFieldNumber;
const int GrowData::kSkilllevFieldNumber;
const int GrowData::kEatcountsFieldNumber;
const int GrowData::kAttributFieldNumber;
const int GrowData::kTalentFieldNumber;
#endif  // !_MSC_VER

GrowData::GrowData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GrowData::InitAsDefaultInstance() {
}

GrowData::GrowData(const GrowData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GrowData::SharedCtor() {
  _cached_size_ = 0;
  exid_ = 0u;
  fitvalue_ = 0u;
  eatcounts_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GrowData::~GrowData() {
  SharedDtor();
}

void GrowData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GrowData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GrowData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GrowData_descriptor_;
}

const GrowData& GrowData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

GrowData* GrowData::default_instance_ = NULL;

GrowData* GrowData::New() const {
  return new GrowData;
}

void GrowData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    exid_ = 0u;
    fitvalue_ = 0u;
    eatcounts_ = 0u;
  }
  equiplist_.Clear();
  skilllist_.Clear();
  skilllev_.Clear();
  attribut_.Clear();
  talent_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GrowData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 exid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exid_)));
          set_has_exid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fitvalue;
        break;
      }

      // optional uint32 fitvalue = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fitvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fitvalue_)));
          set_has_fitvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_equiplist;
        break;
      }

      // repeated uint32 equiplist = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equiplist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_equiplist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_equiplist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_equiplist;
        if (input->ExpectTag(32)) goto parse_skilllist;
        break;
      }

      // repeated uint32 skilllist = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skilllist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_skilllist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_skilllist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_skilllist;
        if (input->ExpectTag(40)) goto parse_skilllev;
        break;
      }

      // repeated uint32 skilllev = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skilllev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_skilllev())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_skilllev())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_skilllev;
        if (input->ExpectTag(48)) goto parse_eatcounts;
        break;
      }

      // optional uint32 eatcounts = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eatcounts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eatcounts_)));
          set_has_eatcounts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_attribut;
        break;
      }

      // repeated uint32 attribut = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attribut:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 56, input, this->mutable_attribut())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_attribut())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_attribut;
        if (input->ExpectTag(64)) goto parse_talent;
        break;
      }

      // repeated uint32 talent = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_talent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 64, input, this->mutable_talent())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_talent())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_talent;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GrowData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 exid = 1;
  if (has_exid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->exid(), output);
  }

  // optional uint32 fitvalue = 2;
  if (has_fitvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->fitvalue(), output);
  }

  // repeated uint32 equiplist = 3;
  for (int i = 0; i < this->equiplist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->equiplist(i), output);
  }

  // repeated uint32 skilllist = 4;
  for (int i = 0; i < this->skilllist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->skilllist(i), output);
  }

  // repeated uint32 skilllev = 5;
  for (int i = 0; i < this->skilllev_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->skilllev(i), output);
  }

  // optional uint32 eatcounts = 6;
  if (has_eatcounts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->eatcounts(), output);
  }

  // repeated uint32 attribut = 7;
  for (int i = 0; i < this->attribut_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      7, this->attribut(i), output);
  }

  // repeated uint32 talent = 8;
  for (int i = 0; i < this->talent_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      8, this->talent(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GrowData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 exid = 1;
  if (has_exid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->exid(), target);
  }

  // optional uint32 fitvalue = 2;
  if (has_fitvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->fitvalue(), target);
  }

  // repeated uint32 equiplist = 3;
  for (int i = 0; i < this->equiplist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->equiplist(i), target);
  }

  // repeated uint32 skilllist = 4;
  for (int i = 0; i < this->skilllist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->skilllist(i), target);
  }

  // repeated uint32 skilllev = 5;
  for (int i = 0; i < this->skilllev_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->skilllev(i), target);
  }

  // optional uint32 eatcounts = 6;
  if (has_eatcounts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->eatcounts(), target);
  }

  // repeated uint32 attribut = 7;
  for (int i = 0; i < this->attribut_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(7, this->attribut(i), target);
  }

  // repeated uint32 talent = 8;
  for (int i = 0; i < this->talent_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(8, this->talent(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GrowData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 exid = 1;
    if (has_exid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exid());
    }

    // optional uint32 fitvalue = 2;
    if (has_fitvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fitvalue());
    }

    // optional uint32 eatcounts = 6;
    if (has_eatcounts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eatcounts());
    }

  }
  // repeated uint32 equiplist = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->equiplist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->equiplist(i));
    }
    total_size += 1 * this->equiplist_size() + data_size;
  }

  // repeated uint32 skilllist = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->skilllist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->skilllist(i));
    }
    total_size += 1 * this->skilllist_size() + data_size;
  }

  // repeated uint32 skilllev = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->skilllev_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->skilllev(i));
    }
    total_size += 1 * this->skilllev_size() + data_size;
  }

  // repeated uint32 attribut = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->attribut_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->attribut(i));
    }
    total_size += 1 * this->attribut_size() + data_size;
  }

  // repeated uint32 talent = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->talent_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->talent(i));
    }
    total_size += 1 * this->talent_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GrowData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GrowData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GrowData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GrowData::MergeFrom(const GrowData& from) {
  GOOGLE_CHECK_NE(&from, this);
  equiplist_.MergeFrom(from.equiplist_);
  skilllist_.MergeFrom(from.skilllist_);
  skilllev_.MergeFrom(from.skilllev_);
  attribut_.MergeFrom(from.attribut_);
  talent_.MergeFrom(from.talent_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_exid()) {
      set_exid(from.exid());
    }
    if (from.has_fitvalue()) {
      set_fitvalue(from.fitvalue());
    }
    if (from.has_eatcounts()) {
      set_eatcounts(from.eatcounts());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GrowData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GrowData::CopyFrom(const GrowData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GrowData::IsInitialized() const {

  return true;
}

void GrowData::Swap(GrowData* other) {
  if (other != this) {
    std::swap(exid_, other->exid_);
    std::swap(fitvalue_, other->fitvalue_);
    equiplist_.Swap(&other->equiplist_);
    skilllist_.Swap(&other->skilllist_);
    skilllev_.Swap(&other->skilllev_);
    std::swap(eatcounts_, other->eatcounts_);
    attribut_.Swap(&other->attribut_);
    talent_.Swap(&other->talent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GrowData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GrowData_descriptor_;
  metadata.reflection = GrowData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShowDataDetail::kAwakenFieldNumber;
const int ShowDataDetail::kRideFieldNumber;
const int ShowDataDetail::kPetFieldNumber;
const int ShowDataDetail::kMercenaryFieldNumber;
const int ShowDataDetail::kGodweaponFieldNumber;
#endif  // !_MSC_VER

ShowDataDetail::ShowDataDetail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ShowDataDetail::InitAsDefaultInstance() {
  awaken_ = const_cast< ::proto::message::GrowData*>(&::proto::message::GrowData::default_instance());
  ride_ = const_cast< ::proto::message::GrowData*>(&::proto::message::GrowData::default_instance());
}

ShowDataDetail::ShowDataDetail(const ShowDataDetail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ShowDataDetail::SharedCtor() {
  _cached_size_ = 0;
  awaken_ = NULL;
  ride_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShowDataDetail::~ShowDataDetail() {
  SharedDtor();
}

void ShowDataDetail::SharedDtor() {
  if (this != default_instance_) {
    delete awaken_;
    delete ride_;
  }
}

void ShowDataDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShowDataDetail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShowDataDetail_descriptor_;
}

const ShowDataDetail& ShowDataDetail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

ShowDataDetail* ShowDataDetail::default_instance_ = NULL;

ShowDataDetail* ShowDataDetail::New() const {
  return new ShowDataDetail;
}

void ShowDataDetail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_awaken()) {
      if (awaken_ != NULL) awaken_->::proto::message::GrowData::Clear();
    }
    if (has_ride()) {
      if (ride_ != NULL) ride_->::proto::message::GrowData::Clear();
    }
  }
  pet_.Clear();
  mercenary_.Clear();
  godweapon_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShowDataDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.message.GrowData awaken = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_awaken()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ride;
        break;
      }

      // optional .proto.message.GrowData ride = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ride:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ride()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pet;
        break;
      }

      // repeated .proto.message.GrowData pet = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pet()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pet;
        if (input->ExpectTag(34)) goto parse_mercenary;
        break;
      }

      // repeated .proto.message.GrowData mercenary = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mercenary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mercenary()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_mercenary;
        if (input->ExpectTag(42)) goto parse_godweapon;
        break;
      }

      // repeated .proto.message.GrowData godweapon = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_godweapon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_godweapon()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_godweapon;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShowDataDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto.message.GrowData awaken = 1;
  if (has_awaken()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->awaken(), output);
  }

  // optional .proto.message.GrowData ride = 2;
  if (has_ride()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ride(), output);
  }

  // repeated .proto.message.GrowData pet = 3;
  for (int i = 0; i < this->pet_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pet(i), output);
  }

  // repeated .proto.message.GrowData mercenary = 4;
  for (int i = 0; i < this->mercenary_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->mercenary(i), output);
  }

  // repeated .proto.message.GrowData godweapon = 5;
  for (int i = 0; i < this->godweapon_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->godweapon(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ShowDataDetail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto.message.GrowData awaken = 1;
  if (has_awaken()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->awaken(), target);
  }

  // optional .proto.message.GrowData ride = 2;
  if (has_ride()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ride(), target);
  }

  // repeated .proto.message.GrowData pet = 3;
  for (int i = 0; i < this->pet_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pet(i), target);
  }

  // repeated .proto.message.GrowData mercenary = 4;
  for (int i = 0; i < this->mercenary_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->mercenary(i), target);
  }

  // repeated .proto.message.GrowData godweapon = 5;
  for (int i = 0; i < this->godweapon_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->godweapon(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ShowDataDetail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto.message.GrowData awaken = 1;
    if (has_awaken()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->awaken());
    }

    // optional .proto.message.GrowData ride = 2;
    if (has_ride()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ride());
    }

  }
  // repeated .proto.message.GrowData pet = 3;
  total_size += 1 * this->pet_size();
  for (int i = 0; i < this->pet_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pet(i));
  }

  // repeated .proto.message.GrowData mercenary = 4;
  total_size += 1 * this->mercenary_size();
  for (int i = 0; i < this->mercenary_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mercenary(i));
  }

  // repeated .proto.message.GrowData godweapon = 5;
  total_size += 1 * this->godweapon_size();
  for (int i = 0; i < this->godweapon_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->godweapon(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShowDataDetail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShowDataDetail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShowDataDetail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShowDataDetail::MergeFrom(const ShowDataDetail& from) {
  GOOGLE_CHECK_NE(&from, this);
  pet_.MergeFrom(from.pet_);
  mercenary_.MergeFrom(from.mercenary_);
  godweapon_.MergeFrom(from.godweapon_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_awaken()) {
      mutable_awaken()->::proto::message::GrowData::MergeFrom(from.awaken());
    }
    if (from.has_ride()) {
      mutable_ride()->::proto::message::GrowData::MergeFrom(from.ride());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShowDataDetail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShowDataDetail::CopyFrom(const ShowDataDetail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShowDataDetail::IsInitialized() const {

  return true;
}

void ShowDataDetail::Swap(ShowDataDetail* other) {
  if (other != this) {
    std::swap(awaken_, other->awaken_);
    std::swap(ride_, other->ride_);
    pet_.Swap(&other->pet_);
    mercenary_.Swap(&other->mercenary_);
    godweapon_.Swap(&other->godweapon_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShowDataDetail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShowDataDetail_descriptor_;
  metadata.reflection = ShowDataDetail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerShow::kBasedataFieldNumber;
const int PlayerShow::kOffdataFieldNumber;
#endif  // !_MSC_VER

PlayerShow::PlayerShow()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerShow::InitAsDefaultInstance() {
  basedata_ = const_cast< ::proto::message::PlayerBaseData*>(&::proto::message::PlayerBaseData::default_instance());
  offdata_ = const_cast< ::proto::message::ShowDataDetail*>(&::proto::message::ShowDataDetail::default_instance());
}

PlayerShow::PlayerShow(const PlayerShow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerShow::SharedCtor() {
  _cached_size_ = 0;
  basedata_ = NULL;
  offdata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerShow::~PlayerShow() {
  SharedDtor();
}

void PlayerShow::SharedDtor() {
  if (this != default_instance_) {
    delete basedata_;
    delete offdata_;
  }
}

void PlayerShow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerShow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerShow_descriptor_;
}

const PlayerShow& PlayerShow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

PlayerShow* PlayerShow::default_instance_ = NULL;

PlayerShow* PlayerShow::New() const {
  return new PlayerShow;
}

void PlayerShow::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_basedata()) {
      if (basedata_ != NULL) basedata_->::proto::message::PlayerBaseData::Clear();
    }
    if (has_offdata()) {
      if (offdata_ != NULL) offdata_->::proto::message::ShowDataDetail::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerShow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.message.PlayerBaseData basedata = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_basedata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_offdata;
        break;
      }

      // optional .proto.message.ShowDataDetail offdata = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_offdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_offdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerShow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto.message.PlayerBaseData basedata = 1;
  if (has_basedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->basedata(), output);
  }

  // optional .proto.message.ShowDataDetail offdata = 2;
  if (has_offdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->offdata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerShow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto.message.PlayerBaseData basedata = 1;
  if (has_basedata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->basedata(), target);
  }

  // optional .proto.message.ShowDataDetail offdata = 2;
  if (has_offdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->offdata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerShow::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto.message.PlayerBaseData basedata = 1;
    if (has_basedata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->basedata());
    }

    // optional .proto.message.ShowDataDetail offdata = 2;
    if (has_offdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->offdata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerShow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerShow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerShow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerShow::MergeFrom(const PlayerShow& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_basedata()) {
      mutable_basedata()->::proto::message::PlayerBaseData::MergeFrom(from.basedata());
    }
    if (from.has_offdata()) {
      mutable_offdata()->::proto::message::ShowDataDetail::MergeFrom(from.offdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerShow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerShow::CopyFrom(const PlayerShow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerShow::IsInitialized() const {

  return true;
}

void PlayerShow::Swap(PlayerShow* other) {
  if (other != this) {
    std::swap(basedata_, other->basedata_);
    std::swap(offdata_, other->offdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerShow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerShow_descriptor_;
  metadata.reflection = PlayerShow_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBSyncFlagPos::kPtFieldNumber;
const int TBSyncFlagPos::kFlagobjidFieldNumber;
const int TBSyncFlagPos::kGetguildidFieldNumber;
const int TBSyncFlagPos::kGetguildnameFieldNumber;
const int TBSyncFlagPos::kGetflagtimeFieldNumber;
const int TBSyncFlagPos::kOnwergidFieldNumber;
const int TBSyncFlagPos::kOwnernameFieldNumber;
#endif  // !_MSC_VER

TBSyncFlagPos::TBSyncFlagPos()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TBSyncFlagPos::InitAsDefaultInstance() {
  pt_ = const_cast< ::proto::message::Point3D*>(&::proto::message::Point3D::default_instance());
}

TBSyncFlagPos::TBSyncFlagPos(const TBSyncFlagPos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TBSyncFlagPos::SharedCtor() {
  _cached_size_ = 0;
  pt_ = NULL;
  flagobjid_ = 0u;
  getguildid_ = GOOGLE_ULONGLONG(0);
  getguildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  getflagtime_ = 0u;
  onwergid_ = GOOGLE_ULONGLONG(0);
  ownername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBSyncFlagPos::~TBSyncFlagPos() {
  SharedDtor();
}

void TBSyncFlagPos::SharedDtor() {
  if (getguildname_ != &::google::protobuf::internal::kEmptyString) {
    delete getguildname_;
  }
  if (ownername_ != &::google::protobuf::internal::kEmptyString) {
    delete ownername_;
  }
  if (this != default_instance_) {
    delete pt_;
  }
}

void TBSyncFlagPos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBSyncFlagPos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBSyncFlagPos_descriptor_;
}

const TBSyncFlagPos& TBSyncFlagPos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

TBSyncFlagPos* TBSyncFlagPos::default_instance_ = NULL;

TBSyncFlagPos* TBSyncFlagPos::New() const {
  return new TBSyncFlagPos;
}

void TBSyncFlagPos::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_pt()) {
      if (pt_ != NULL) pt_->::proto::message::Point3D::Clear();
    }
    flagobjid_ = 0u;
    getguildid_ = GOOGLE_ULONGLONG(0);
    if (has_getguildname()) {
      if (getguildname_ != &::google::protobuf::internal::kEmptyString) {
        getguildname_->clear();
      }
    }
    getflagtime_ = 0u;
    onwergid_ = GOOGLE_ULONGLONG(0);
    if (has_ownername()) {
      if (ownername_ != &::google::protobuf::internal::kEmptyString) {
        ownername_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBSyncFlagPos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.message.Point3D pt = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_flagobjid;
        break;
      }

      // optional uint32 flagobjid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flagobjid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flagobjid_)));
          set_has_flagobjid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_getguildid;
        break;
      }

      // optional uint64 getguildid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_getguildid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &getguildid_)));
          set_has_getguildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_getguildname;
        break;
      }

      // optional string getguildname = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_getguildname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_getguildname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->getguildname().data(), this->getguildname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_getflagtime;
        break;
      }

      // optional uint32 getflagtime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_getflagtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &getflagtime_)));
          set_has_getflagtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_onwergid;
        break;
      }

      // optional uint64 onwergid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_onwergid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &onwergid_)));
          set_has_onwergid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_ownername;
        break;
      }

      // optional string ownername = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ownername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ownername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ownername().data(), this->ownername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TBSyncFlagPos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto.message.Point3D pt = 1;
  if (has_pt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pt(), output);
  }

  // optional uint32 flagobjid = 2;
  if (has_flagobjid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->flagobjid(), output);
  }

  // optional uint64 getguildid = 3;
  if (has_getguildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->getguildid(), output);
  }

  // optional string getguildname = 4;
  if (has_getguildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->getguildname().data(), this->getguildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->getguildname(), output);
  }

  // optional uint32 getflagtime = 5;
  if (has_getflagtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->getflagtime(), output);
  }

  // optional uint64 onwergid = 6;
  if (has_onwergid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->onwergid(), output);
  }

  // optional string ownername = 7;
  if (has_ownername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ownername().data(), this->ownername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->ownername(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TBSyncFlagPos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto.message.Point3D pt = 1;
  if (has_pt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pt(), target);
  }

  // optional uint32 flagobjid = 2;
  if (has_flagobjid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->flagobjid(), target);
  }

  // optional uint64 getguildid = 3;
  if (has_getguildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->getguildid(), target);
  }

  // optional string getguildname = 4;
  if (has_getguildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->getguildname().data(), this->getguildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->getguildname(), target);
  }

  // optional uint32 getflagtime = 5;
  if (has_getflagtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->getflagtime(), target);
  }

  // optional uint64 onwergid = 6;
  if (has_onwergid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->onwergid(), target);
  }

  // optional string ownername = 7;
  if (has_ownername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ownername().data(), this->ownername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->ownername(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TBSyncFlagPos::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto.message.Point3D pt = 1;
    if (has_pt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pt());
    }

    // optional uint32 flagobjid = 2;
    if (has_flagobjid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flagobjid());
    }

    // optional uint64 getguildid = 3;
    if (has_getguildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->getguildid());
    }

    // optional string getguildname = 4;
    if (has_getguildname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->getguildname());
    }

    // optional uint32 getflagtime = 5;
    if (has_getflagtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->getflagtime());
    }

    // optional uint64 onwergid = 6;
    if (has_onwergid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->onwergid());
    }

    // optional string ownername = 7;
    if (has_ownername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ownername());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBSyncFlagPos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBSyncFlagPos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBSyncFlagPos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBSyncFlagPos::MergeFrom(const TBSyncFlagPos& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pt()) {
      mutable_pt()->::proto::message::Point3D::MergeFrom(from.pt());
    }
    if (from.has_flagobjid()) {
      set_flagobjid(from.flagobjid());
    }
    if (from.has_getguildid()) {
      set_getguildid(from.getguildid());
    }
    if (from.has_getguildname()) {
      set_getguildname(from.getguildname());
    }
    if (from.has_getflagtime()) {
      set_getflagtime(from.getflagtime());
    }
    if (from.has_onwergid()) {
      set_onwergid(from.onwergid());
    }
    if (from.has_ownername()) {
      set_ownername(from.ownername());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBSyncFlagPos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBSyncFlagPos::CopyFrom(const TBSyncFlagPos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBSyncFlagPos::IsInitialized() const {

  return true;
}

void TBSyncFlagPos::Swap(TBSyncFlagPos* other) {
  if (other != this) {
    std::swap(pt_, other->pt_);
    std::swap(flagobjid_, other->flagobjid_);
    std::swap(getguildid_, other->getguildid_);
    std::swap(getguildname_, other->getguildname_);
    std::swap(getflagtime_, other->getflagtime_);
    std::swap(onwergid_, other->onwergid_);
    std::swap(ownername_, other->ownername_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBSyncFlagPos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBSyncFlagPos_descriptor_;
  metadata.reflection = TBSyncFlagPos_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBFieldInfo::kIdFieldNumber;
const int TBFieldInfo::kMapidFieldNumber;
const int TBFieldInfo::kGuildidFieldNumber;
const int TBFieldInfo::kGuildnameFieldNumber;
const int TBFieldInfo::kOvertimeFieldNumber;
#endif  // !_MSC_VER

TBFieldInfo::TBFieldInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TBFieldInfo::InitAsDefaultInstance() {
}

TBFieldInfo::TBFieldInfo(const TBFieldInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TBFieldInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  mapid_ = 0u;
  guildid_ = GOOGLE_ULONGLONG(0);
  guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  overtime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBFieldInfo::~TBFieldInfo() {
  SharedDtor();
}

void TBFieldInfo::SharedDtor() {
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    delete guildname_;
  }
  if (this != default_instance_) {
  }
}

void TBFieldInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBFieldInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBFieldInfo_descriptor_;
}

const TBFieldInfo& TBFieldInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

TBFieldInfo* TBFieldInfo::default_instance_ = NULL;

TBFieldInfo* TBFieldInfo::New() const {
  return new TBFieldInfo;
}

void TBFieldInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    mapid_ = 0u;
    guildid_ = GOOGLE_ULONGLONG(0);
    if (has_guildname()) {
      if (guildname_ != &::google::protobuf::internal::kEmptyString) {
        guildname_->clear();
      }
    }
    overtime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBFieldInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mapid;
        break;
      }

      // optional uint32 mapid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_guildid;
        break;
      }

      // optional uint64 guildid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guildid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_guildname;
        break;
      }

      // optional string guildname = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guildname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guildname().data(), this->guildname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_overtime;
        break;
      }

      // optional uint32 overtime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_overtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &overtime_)));
          set_has_overtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TBFieldInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 mapid = 2;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mapid(), output);
  }

  // optional uint64 guildid = 3;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->guildid(), output);
  }

  // optional string guildname = 4;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->guildname(), output);
  }

  // optional uint32 overtime = 5;
  if (has_overtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->overtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TBFieldInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 mapid = 2;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mapid(), target);
  }

  // optional uint64 guildid = 3;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->guildid(), target);
  }

  // optional string guildname = 4;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->guildname(), target);
  }

  // optional uint32 overtime = 5;
  if (has_overtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->overtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TBFieldInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 mapid = 2;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }

    // optional uint64 guildid = 3;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

    // optional string guildname = 4;
    if (has_guildname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildname());
    }

    // optional uint32 overtime = 5;
    if (has_overtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->overtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBFieldInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBFieldInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBFieldInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBFieldInfo::MergeFrom(const TBFieldInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_guildname()) {
      set_guildname(from.guildname());
    }
    if (from.has_overtime()) {
      set_overtime(from.overtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBFieldInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBFieldInfo::CopyFrom(const TBFieldInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBFieldInfo::IsInitialized() const {

  return true;
}

void TBFieldInfo::Swap(TBFieldInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(mapid_, other->mapid_);
    std::swap(guildid_, other->guildid_);
    std::swap(guildname_, other->guildname_);
    std::swap(overtime_, other->overtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBFieldInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBFieldInfo_descriptor_;
  metadata.reflection = TBFieldInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBKillReward::kItemidFieldNumber;
const int TBKillReward::kNumFieldNumber;
#endif  // !_MSC_VER

TBKillReward::TBKillReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TBKillReward::InitAsDefaultInstance() {
}

TBKillReward::TBKillReward(const TBKillReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TBKillReward::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBKillReward::~TBKillReward() {
  SharedDtor();
}

void TBKillReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TBKillReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBKillReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBKillReward_descriptor_;
}

const TBKillReward& TBKillReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

TBKillReward* TBKillReward::default_instance_ = NULL;

TBKillReward* TBKillReward::New() const {
  return new TBKillReward;
}

void TBKillReward::Clear() {
  itemid_.Clear();
  num_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBKillReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 itemid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_itemid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_itemid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_itemid;
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // repeated uint32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_num())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_num())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TBKillReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 itemid = 1;
  for (int i = 0; i < this->itemid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->itemid(i), output);
  }

  // repeated uint32 num = 2;
  for (int i = 0; i < this->num_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->num(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TBKillReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 itemid = 1;
  for (int i = 0; i < this->itemid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->itemid(i), target);
  }

  // repeated uint32 num = 2;
  for (int i = 0; i < this->num_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->num(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TBKillReward::ByteSize() const {
  int total_size = 0;

  // repeated uint32 itemid = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->itemid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->itemid(i));
    }
    total_size += 1 * this->itemid_size() + data_size;
  }

  // repeated uint32 num = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->num_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->num(i));
    }
    total_size += 1 * this->num_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBKillReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBKillReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBKillReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBKillReward::MergeFrom(const TBKillReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  itemid_.MergeFrom(from.itemid_);
  num_.MergeFrom(from.num_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBKillReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBKillReward::CopyFrom(const TBKillReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBKillReward::IsInitialized() const {

  return true;
}

void TBKillReward::Swap(TBKillReward* other) {
  if (other != this) {
    itemid_.Swap(&other->itemid_);
    num_.Swap(&other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBKillReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBKillReward_descriptor_;
  metadata.reflection = TBKillReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBPlayer::kPlayeridFieldNumber;
const int TBPlayer::kGuildidFieldNumber;
const int TBPlayer::kOnlinetimeFieldNumber;
#endif  // !_MSC_VER

TBPlayer::TBPlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TBPlayer::InitAsDefaultInstance() {
}

TBPlayer::TBPlayer(const TBPlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TBPlayer::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_ULONGLONG(0);
  guildid_ = GOOGLE_ULONGLONG(0);
  onlinetime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBPlayer::~TBPlayer() {
  SharedDtor();
}

void TBPlayer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TBPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBPlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBPlayer_descriptor_;
}

const TBPlayer& TBPlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

TBPlayer* TBPlayer::default_instance_ = NULL;

TBPlayer* TBPlayer::New() const {
  return new TBPlayer;
}

void TBPlayer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = GOOGLE_ULONGLONG(0);
    guildid_ = GOOGLE_ULONGLONG(0);
    onlinetime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_guildid;
        break;
      }

      // optional uint64 guildid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guildid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_onlinetime;
        break;
      }

      // optional uint32 onlinetime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_onlinetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &onlinetime_)));
          set_has_onlinetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TBPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->playerid(), output);
  }

  // optional uint64 guildid = 2;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->guildid(), output);
  }

  // optional uint32 onlinetime = 3;
  if (has_onlinetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->onlinetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TBPlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->playerid(), target);
  }

  // optional uint64 guildid = 2;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->guildid(), target);
  }

  // optional uint32 onlinetime = 3;
  if (has_onlinetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->onlinetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TBPlayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerid());
    }

    // optional uint64 guildid = 2;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

    // optional uint32 onlinetime = 3;
    if (has_onlinetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->onlinetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBPlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBPlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBPlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBPlayer::MergeFrom(const TBPlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_onlinetime()) {
      set_onlinetime(from.onlinetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBPlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBPlayer::CopyFrom(const TBPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBPlayer::IsInitialized() const {

  return true;
}

void TBPlayer::Swap(TBPlayer* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(guildid_, other->guildid_);
    std::swap(onlinetime_, other->onlinetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBPlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBPlayer_descriptor_;
  metadata.reflection = TBPlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBOverResultInfo::kIdFieldNumber;
const int TBOverResultInfo::kWingidFieldNumber;
const int TBOverResultInfo::kWinnameFieldNumber;
const int TBOverResultInfo::kLosegidFieldNumber;
const int TBOverResultInfo::kPlayeridlistFieldNumber;
const int TBOverResultInfo::kServeridFieldNumber;
#endif  // !_MSC_VER

TBOverResultInfo::TBOverResultInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TBOverResultInfo::InitAsDefaultInstance() {
}

TBOverResultInfo::TBOverResultInfo(const TBOverResultInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TBOverResultInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  wingid_ = GOOGLE_ULONGLONG(0);
  winname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  losegid_ = GOOGLE_ULONGLONG(0);
  serverid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBOverResultInfo::~TBOverResultInfo() {
  SharedDtor();
}

void TBOverResultInfo::SharedDtor() {
  if (winname_ != &::google::protobuf::internal::kEmptyString) {
    delete winname_;
  }
  if (this != default_instance_) {
  }
}

void TBOverResultInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBOverResultInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBOverResultInfo_descriptor_;
}

const TBOverResultInfo& TBOverResultInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

TBOverResultInfo* TBOverResultInfo::default_instance_ = NULL;

TBOverResultInfo* TBOverResultInfo::New() const {
  return new TBOverResultInfo;
}

void TBOverResultInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    wingid_ = GOOGLE_ULONGLONG(0);
    if (has_winname()) {
      if (winname_ != &::google::protobuf::internal::kEmptyString) {
        winname_->clear();
      }
    }
    losegid_ = GOOGLE_ULONGLONG(0);
    serverid_ = 0u;
  }
  playeridlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBOverResultInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_wingid;
        break;
      }

      // optional uint64 wingid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wingid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &wingid_)));
          set_has_wingid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_winname;
        break;
      }

      // optional string winname = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_winname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_winname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->winname().data(), this->winname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_losegid;
        break;
      }

      // optional uint64 losegid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_losegid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &losegid_)));
          set_has_losegid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_playeridlist;
        break;
      }

      // repeated .proto.message.TBPlayer playeridlist = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playeridlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_playeridlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_playeridlist;
        if (input->ExpectTag(48)) goto parse_serverid;
        break;
      }

      // optional uint32 serverid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TBOverResultInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint64 wingid = 2;
  if (has_wingid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->wingid(), output);
  }

  // optional string winname = 3;
  if (has_winname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->winname().data(), this->winname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->winname(), output);
  }

  // optional uint64 losegid = 4;
  if (has_losegid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->losegid(), output);
  }

  // repeated .proto.message.TBPlayer playeridlist = 5;
  for (int i = 0; i < this->playeridlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->playeridlist(i), output);
  }

  // optional uint32 serverid = 6;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->serverid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TBOverResultInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint64 wingid = 2;
  if (has_wingid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->wingid(), target);
  }

  // optional string winname = 3;
  if (has_winname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->winname().data(), this->winname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->winname(), target);
  }

  // optional uint64 losegid = 4;
  if (has_losegid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->losegid(), target);
  }

  // repeated .proto.message.TBPlayer playeridlist = 5;
  for (int i = 0; i < this->playeridlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->playeridlist(i), target);
  }

  // optional uint32 serverid = 6;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->serverid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TBOverResultInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint64 wingid = 2;
    if (has_wingid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->wingid());
    }

    // optional string winname = 3;
    if (has_winname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->winname());
    }

    // optional uint64 losegid = 4;
    if (has_losegid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->losegid());
    }

    // optional uint32 serverid = 6;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverid());
    }

  }
  // repeated .proto.message.TBPlayer playeridlist = 5;
  total_size += 1 * this->playeridlist_size();
  for (int i = 0; i < this->playeridlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->playeridlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBOverResultInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBOverResultInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBOverResultInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBOverResultInfo::MergeFrom(const TBOverResultInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  playeridlist_.MergeFrom(from.playeridlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_wingid()) {
      set_wingid(from.wingid());
    }
    if (from.has_winname()) {
      set_winname(from.winname());
    }
    if (from.has_losegid()) {
      set_losegid(from.losegid());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBOverResultInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBOverResultInfo::CopyFrom(const TBOverResultInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBOverResultInfo::IsInitialized() const {

  return true;
}

void TBOverResultInfo::Swap(TBOverResultInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(wingid_, other->wingid_);
    std::swap(winname_, other->winname_);
    std::swap(losegid_, other->losegid_);
    playeridlist_.Swap(&other->playeridlist_);
    std::swap(serverid_, other->serverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBOverResultInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBOverResultInfo_descriptor_;
  metadata.reflection = TBOverResultInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace proto

// @@protoc_insertion_point(global_scope)
