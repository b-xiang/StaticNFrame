// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: skill.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "skill.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace message {

namespace {

const ::google::protobuf::Descriptor* SkillInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarkInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarkInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Skill_CS_GetSkillInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Skill_CS_GetSkillInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Skill_SC_GetSkillInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Skill_SC_GetSkillInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Skill_CS_UpSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Skill_CS_UpSkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* Skill_SC_UpSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Skill_SC_UpSkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* Skill_CS_SetFightSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Skill_CS_SetFightSkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* Skill_SC_SetFightSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Skill_SC_SetFightSkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* Skill_CS_UpMarkSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Skill_CS_UpMarkSkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* Skill_SC_UpMarkSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Skill_SC_UpMarkSkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* Skill_CS_SetMarkSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Skill_CS_SetMarkSkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* Skill_SC_SetMarkSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Skill_SC_SetMarkSkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoOnKeySkillInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoOnKeySkillInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Skill_CS_UpTenSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Skill_CS_UpTenSkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* Skill_SC_UpTenSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Skill_SC_UpTenSkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpSkillData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpSkillData_reflection_ = NULL;
const ::google::protobuf::Descriptor* Skill_CS_UpOnKeySkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Skill_CS_UpOnKeySkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* Skill_SC_UpOnKeySkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Skill_SC_UpOnKeySkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* Skill_SC_UpdateSkillInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Skill_SC_UpdateSkillInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_skill_2eproto() {
  protobuf_AddDesc_skill_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "skill.proto");
  GOOGLE_CHECK(file != NULL);
  SkillInfo_descriptor_ = file->message_type(0);
  static const int SkillInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, curmark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, skillexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, markinfo_),
  };
  SkillInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillInfo_descriptor_,
      SkillInfo::default_instance_,
      SkillInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillInfo));
  MarkInfo_descriptor_ = file->message_type(1);
  static const int MarkInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarkInfo, markid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarkInfo, level_),
  };
  MarkInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarkInfo_descriptor_,
      MarkInfo::default_instance_,
      MarkInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarkInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarkInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarkInfo));
  Skill_CS_GetSkillInfo_descriptor_ = file->message_type(2);
  static const int Skill_CS_GetSkillInfo_offsets_[1] = {
  };
  Skill_CS_GetSkillInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Skill_CS_GetSkillInfo_descriptor_,
      Skill_CS_GetSkillInfo::default_instance_,
      Skill_CS_GetSkillInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_CS_GetSkillInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_CS_GetSkillInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Skill_CS_GetSkillInfo));
  Skill_SC_GetSkillInfo_descriptor_ = file->message_type(3);
  static const int Skill_SC_GetSkillInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_SC_GetSkillInfo, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_SC_GetSkillInfo, skillinfo_),
  };
  Skill_SC_GetSkillInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Skill_SC_GetSkillInfo_descriptor_,
      Skill_SC_GetSkillInfo::default_instance_,
      Skill_SC_GetSkillInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_SC_GetSkillInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_SC_GetSkillInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Skill_SC_GetSkillInfo));
  Skill_CS_UpSkill_descriptor_ = file->message_type(4);
  static const int Skill_CS_UpSkill_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_CS_UpSkill, skillid_),
  };
  Skill_CS_UpSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Skill_CS_UpSkill_descriptor_,
      Skill_CS_UpSkill::default_instance_,
      Skill_CS_UpSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_CS_UpSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_CS_UpSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Skill_CS_UpSkill));
  Skill_SC_UpSkill_descriptor_ = file->message_type(5);
  static const int Skill_SC_UpSkill_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_SC_UpSkill, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_SC_UpSkill, oldskillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_SC_UpSkill, skillinfo_),
  };
  Skill_SC_UpSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Skill_SC_UpSkill_descriptor_,
      Skill_SC_UpSkill::default_instance_,
      Skill_SC_UpSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_SC_UpSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_SC_UpSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Skill_SC_UpSkill));
  Skill_CS_SetFightSkill_descriptor_ = file->message_type(6);
  static const int Skill_CS_SetFightSkill_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_CS_SetFightSkill, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_CS_SetFightSkill, posdes_),
  };
  Skill_CS_SetFightSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Skill_CS_SetFightSkill_descriptor_,
      Skill_CS_SetFightSkill::default_instance_,
      Skill_CS_SetFightSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_CS_SetFightSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_CS_SetFightSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Skill_CS_SetFightSkill));
  Skill_SC_SetFightSkill_descriptor_ = file->message_type(7);
  static const int Skill_SC_SetFightSkill_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_SC_SetFightSkill, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_SC_SetFightSkill, skillinfo_),
  };
  Skill_SC_SetFightSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Skill_SC_SetFightSkill_descriptor_,
      Skill_SC_SetFightSkill::default_instance_,
      Skill_SC_SetFightSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_SC_SetFightSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_SC_SetFightSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Skill_SC_SetFightSkill));
  Skill_CS_UpMarkSkill_descriptor_ = file->message_type(8);
  static const int Skill_CS_UpMarkSkill_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_CS_UpMarkSkill, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_CS_UpMarkSkill, markid_),
  };
  Skill_CS_UpMarkSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Skill_CS_UpMarkSkill_descriptor_,
      Skill_CS_UpMarkSkill::default_instance_,
      Skill_CS_UpMarkSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_CS_UpMarkSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_CS_UpMarkSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Skill_CS_UpMarkSkill));
  Skill_SC_UpMarkSkill_descriptor_ = file->message_type(9);
  static const int Skill_SC_UpMarkSkill_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_SC_UpMarkSkill, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_SC_UpMarkSkill, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_SC_UpMarkSkill, oldmarkid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_SC_UpMarkSkill, markinfo_),
  };
  Skill_SC_UpMarkSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Skill_SC_UpMarkSkill_descriptor_,
      Skill_SC_UpMarkSkill::default_instance_,
      Skill_SC_UpMarkSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_SC_UpMarkSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_SC_UpMarkSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Skill_SC_UpMarkSkill));
  Skill_CS_SetMarkSkill_descriptor_ = file->message_type(10);
  static const int Skill_CS_SetMarkSkill_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_CS_SetMarkSkill, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_CS_SetMarkSkill, markid_),
  };
  Skill_CS_SetMarkSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Skill_CS_SetMarkSkill_descriptor_,
      Skill_CS_SetMarkSkill::default_instance_,
      Skill_CS_SetMarkSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_CS_SetMarkSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_CS_SetMarkSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Skill_CS_SetMarkSkill));
  Skill_SC_SetMarkSkill_descriptor_ = file->message_type(11);
  static const int Skill_SC_SetMarkSkill_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_SC_SetMarkSkill, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_SC_SetMarkSkill, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_SC_SetMarkSkill, curmark_),
  };
  Skill_SC_SetMarkSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Skill_SC_SetMarkSkill_descriptor_,
      Skill_SC_SetMarkSkill::default_instance_,
      Skill_SC_SetMarkSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_SC_SetMarkSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_SC_SetMarkSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Skill_SC_SetMarkSkill));
  ProtoOnKeySkillInfo_descriptor_ = file->message_type(12);
  static const int ProtoOnKeySkillInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoOnKeySkillInfo, oldskillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoOnKeySkillInfo, skillinfo_),
  };
  ProtoOnKeySkillInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoOnKeySkillInfo_descriptor_,
      ProtoOnKeySkillInfo::default_instance_,
      ProtoOnKeySkillInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoOnKeySkillInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoOnKeySkillInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoOnKeySkillInfo));
  Skill_CS_UpTenSkill_descriptor_ = file->message_type(13);
  static const int Skill_CS_UpTenSkill_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_CS_UpTenSkill, oldskillid_),
  };
  Skill_CS_UpTenSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Skill_CS_UpTenSkill_descriptor_,
      Skill_CS_UpTenSkill::default_instance_,
      Skill_CS_UpTenSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_CS_UpTenSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_CS_UpTenSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Skill_CS_UpTenSkill));
  Skill_SC_UpTenSkill_descriptor_ = file->message_type(14);
  static const int Skill_SC_UpTenSkill_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_SC_UpTenSkill, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_SC_UpTenSkill, skillinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_SC_UpTenSkill, rollexp_),
  };
  Skill_SC_UpTenSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Skill_SC_UpTenSkill_descriptor_,
      Skill_SC_UpTenSkill::default_instance_,
      Skill_SC_UpTenSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_SC_UpTenSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_SC_UpTenSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Skill_SC_UpTenSkill));
  UpSkillData_descriptor_ = file->message_type(15);
  static const int UpSkillData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpSkillData, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpSkillData, upcounts_),
  };
  UpSkillData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpSkillData_descriptor_,
      UpSkillData::default_instance_,
      UpSkillData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpSkillData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpSkillData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpSkillData));
  Skill_CS_UpOnKeySkill_descriptor_ = file->message_type(16);
  static const int Skill_CS_UpOnKeySkill_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_CS_UpOnKeySkill, upskillid_),
  };
  Skill_CS_UpOnKeySkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Skill_CS_UpOnKeySkill_descriptor_,
      Skill_CS_UpOnKeySkill::default_instance_,
      Skill_CS_UpOnKeySkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_CS_UpOnKeySkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_CS_UpOnKeySkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Skill_CS_UpOnKeySkill));
  Skill_SC_UpOnKeySkill_descriptor_ = file->message_type(17);
  static const int Skill_SC_UpOnKeySkill_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_SC_UpOnKeySkill, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_SC_UpOnKeySkill, upinfo_),
  };
  Skill_SC_UpOnKeySkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Skill_SC_UpOnKeySkill_descriptor_,
      Skill_SC_UpOnKeySkill::default_instance_,
      Skill_SC_UpOnKeySkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_SC_UpOnKeySkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_SC_UpOnKeySkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Skill_SC_UpOnKeySkill));
  Skill_SC_UpdateSkillInfo_descriptor_ = file->message_type(18);
  static const int Skill_SC_UpdateSkillInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_SC_UpdateSkillInfo, skillinfo_),
  };
  Skill_SC_UpdateSkillInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Skill_SC_UpdateSkillInfo_descriptor_,
      Skill_SC_UpdateSkillInfo::default_instance_,
      Skill_SC_UpdateSkillInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_SC_UpdateSkillInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_SC_UpdateSkillInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Skill_SC_UpdateSkillInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_skill_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillInfo_descriptor_, &SkillInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarkInfo_descriptor_, &MarkInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Skill_CS_GetSkillInfo_descriptor_, &Skill_CS_GetSkillInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Skill_SC_GetSkillInfo_descriptor_, &Skill_SC_GetSkillInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Skill_CS_UpSkill_descriptor_, &Skill_CS_UpSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Skill_SC_UpSkill_descriptor_, &Skill_SC_UpSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Skill_CS_SetFightSkill_descriptor_, &Skill_CS_SetFightSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Skill_SC_SetFightSkill_descriptor_, &Skill_SC_SetFightSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Skill_CS_UpMarkSkill_descriptor_, &Skill_CS_UpMarkSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Skill_SC_UpMarkSkill_descriptor_, &Skill_SC_UpMarkSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Skill_CS_SetMarkSkill_descriptor_, &Skill_CS_SetMarkSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Skill_SC_SetMarkSkill_descriptor_, &Skill_SC_SetMarkSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoOnKeySkillInfo_descriptor_, &ProtoOnKeySkillInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Skill_CS_UpTenSkill_descriptor_, &Skill_CS_UpTenSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Skill_SC_UpTenSkill_descriptor_, &Skill_SC_UpTenSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpSkillData_descriptor_, &UpSkillData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Skill_CS_UpOnKeySkill_descriptor_, &Skill_CS_UpOnKeySkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Skill_SC_UpOnKeySkill_descriptor_, &Skill_SC_UpOnKeySkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Skill_SC_UpdateSkillInfo_descriptor_, &Skill_SC_UpdateSkillInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_skill_2eproto() {
  delete SkillInfo::default_instance_;
  delete SkillInfo_reflection_;
  delete MarkInfo::default_instance_;
  delete MarkInfo_reflection_;
  delete Skill_CS_GetSkillInfo::default_instance_;
  delete Skill_CS_GetSkillInfo_reflection_;
  delete Skill_SC_GetSkillInfo::default_instance_;
  delete Skill_SC_GetSkillInfo_reflection_;
  delete Skill_CS_UpSkill::default_instance_;
  delete Skill_CS_UpSkill_reflection_;
  delete Skill_SC_UpSkill::default_instance_;
  delete Skill_SC_UpSkill_reflection_;
  delete Skill_CS_SetFightSkill::default_instance_;
  delete Skill_CS_SetFightSkill_reflection_;
  delete Skill_SC_SetFightSkill::default_instance_;
  delete Skill_SC_SetFightSkill_reflection_;
  delete Skill_CS_UpMarkSkill::default_instance_;
  delete Skill_CS_UpMarkSkill_reflection_;
  delete Skill_SC_UpMarkSkill::default_instance_;
  delete Skill_SC_UpMarkSkill_reflection_;
  delete Skill_CS_SetMarkSkill::default_instance_;
  delete Skill_CS_SetMarkSkill_reflection_;
  delete Skill_SC_SetMarkSkill::default_instance_;
  delete Skill_SC_SetMarkSkill_reflection_;
  delete ProtoOnKeySkillInfo::default_instance_;
  delete ProtoOnKeySkillInfo_reflection_;
  delete Skill_CS_UpTenSkill::default_instance_;
  delete Skill_CS_UpTenSkill_reflection_;
  delete Skill_SC_UpTenSkill::default_instance_;
  delete Skill_SC_UpTenSkill_reflection_;
  delete UpSkillData::default_instance_;
  delete UpSkillData_reflection_;
  delete Skill_CS_UpOnKeySkill::default_instance_;
  delete Skill_CS_UpOnKeySkill_reflection_;
  delete Skill_SC_UpOnKeySkill::default_instance_;
  delete Skill_SC_UpOnKeySkill_reflection_;
  delete Skill_SC_UpdateSkillInfo::default_instance_;
  delete Skill_SC_UpdateSkillInfo_reflection_;
}

void protobuf_AddDesc_skill_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013skill.proto\022\rproto.message\"\206\001\n\tSkillIn"
    "fo\022\017\n\007skillId\030\001 \002(\005\022\r\n\005level\030\002 \002(\005\022\013\n\003po"
    "s\030\003 \002(\005\022\017\n\007curMark\030\004 \002(\005\022\020\n\010skillexp\030\005 \001"
    "(\005\022)\n\010markInfo\030\006 \003(\0132\027.proto.message.Mar"
    "kInfo\")\n\010MarkInfo\022\016\n\006markId\030\001 \002(\005\022\r\n\005lev"
    "el\030\002 \002(\005\"\027\n\025Skill_CS_GetSkillInfo\"T\n\025Ski"
    "ll_SC_GetSkillInfo\022\016\n\006result\030\001 \002(\005\022+\n\tsk"
    "illInfo\030\002 \003(\0132\030.proto.message.SkillInfo\""
    "#\n\020Skill_CS_UpSkill\022\017\n\007skillId\030\001 \002(\005\"c\n\020"
    "Skill_SC_UpSkill\022\016\n\006result\030\001 \002(\005\022\022\n\noldS"
    "killId\030\002 \001(\005\022+\n\tskillInfo\030\003 \001(\0132\030.proto."
    "message.SkillInfo\"9\n\026Skill_CS_SetFightSk"
    "ill\022\017\n\007skillId\030\001 \002(\005\022\016\n\006posDes\030\002 \002(\005\"U\n\026"
    "Skill_SC_SetFightSkill\022\016\n\006result\030\001 \002(\005\022+"
    "\n\tskillInfo\030\002 \003(\0132\030.proto.message.SkillI"
    "nfo\"7\n\024Skill_CS_UpMarkSkill\022\017\n\007skillId\030\001"
    " \002(\005\022\016\n\006markId\030\002 \002(\005\"u\n\024Skill_SC_UpMarkS"
    "kill\022\016\n\006result\030\001 \002(\005\022\017\n\007skillId\030\002 \001(\005\022\021\n"
    "\toldMarkId\030\003 \001(\005\022)\n\010markInfo\030\004 \001(\0132\027.pro"
    "to.message.MarkInfo\"8\n\025Skill_CS_SetMarkS"
    "kill\022\017\n\007skillId\030\001 \002(\005\022\016\n\006markId\030\002 \002(\005\"I\n"
    "\025Skill_SC_SetMarkSkill\022\016\n\006result\030\001 \002(\005\022\017"
    "\n\007skillId\030\002 \001(\005\022\017\n\007curMark\030\003 \001(\005\"V\n\023Prot"
    "oOnKeySkillInfo\022\022\n\noldSkillId\030\001 \001(\005\022+\n\ts"
    "killInfo\030\002 \001(\0132\030.proto.message.SkillInfo"
    "\")\n\023Skill_CS_UpTenSkill\022\022\n\noldSkillId\030\001 "
    "\002(\005\"m\n\023Skill_SC_UpTenSkill\022\016\n\006result\030\001 \002"
    "(\005\0225\n\tskillInfo\030\002 \002(\0132\".proto.message.Pr"
    "otoOnKeySkillInfo\022\017\n\007rollexp\030\003 \003(\005\"0\n\013Up"
    "SkillData\022\017\n\007skillid\030\001 \001(\r\022\020\n\010upcounts\030\002"
    " \001(\r\"F\n\025Skill_CS_UpOnKeySkill\022-\n\tupskill"
    "id\030\001 \003(\0132\032.proto.message.UpSkillData\"[\n\025"
    "Skill_SC_UpOnKeySkill\022\016\n\006result\030\001 \002(\005\0222\n"
    "\006upinfo\030\002 \003(\0132\".proto.message.ProtoOnKey"
    "SkillInfo\"G\n\030Skill_SC_UpdateSkillInfo\022+\n"
    "\tskillInfo\030\001 \003(\0132\030.proto.message.SkillIn"
    "fo", 1442);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "skill.proto", &protobuf_RegisterTypes);
  SkillInfo::default_instance_ = new SkillInfo();
  MarkInfo::default_instance_ = new MarkInfo();
  Skill_CS_GetSkillInfo::default_instance_ = new Skill_CS_GetSkillInfo();
  Skill_SC_GetSkillInfo::default_instance_ = new Skill_SC_GetSkillInfo();
  Skill_CS_UpSkill::default_instance_ = new Skill_CS_UpSkill();
  Skill_SC_UpSkill::default_instance_ = new Skill_SC_UpSkill();
  Skill_CS_SetFightSkill::default_instance_ = new Skill_CS_SetFightSkill();
  Skill_SC_SetFightSkill::default_instance_ = new Skill_SC_SetFightSkill();
  Skill_CS_UpMarkSkill::default_instance_ = new Skill_CS_UpMarkSkill();
  Skill_SC_UpMarkSkill::default_instance_ = new Skill_SC_UpMarkSkill();
  Skill_CS_SetMarkSkill::default_instance_ = new Skill_CS_SetMarkSkill();
  Skill_SC_SetMarkSkill::default_instance_ = new Skill_SC_SetMarkSkill();
  ProtoOnKeySkillInfo::default_instance_ = new ProtoOnKeySkillInfo();
  Skill_CS_UpTenSkill::default_instance_ = new Skill_CS_UpTenSkill();
  Skill_SC_UpTenSkill::default_instance_ = new Skill_SC_UpTenSkill();
  UpSkillData::default_instance_ = new UpSkillData();
  Skill_CS_UpOnKeySkill::default_instance_ = new Skill_CS_UpOnKeySkill();
  Skill_SC_UpOnKeySkill::default_instance_ = new Skill_SC_UpOnKeySkill();
  Skill_SC_UpdateSkillInfo::default_instance_ = new Skill_SC_UpdateSkillInfo();
  SkillInfo::default_instance_->InitAsDefaultInstance();
  MarkInfo::default_instance_->InitAsDefaultInstance();
  Skill_CS_GetSkillInfo::default_instance_->InitAsDefaultInstance();
  Skill_SC_GetSkillInfo::default_instance_->InitAsDefaultInstance();
  Skill_CS_UpSkill::default_instance_->InitAsDefaultInstance();
  Skill_SC_UpSkill::default_instance_->InitAsDefaultInstance();
  Skill_CS_SetFightSkill::default_instance_->InitAsDefaultInstance();
  Skill_SC_SetFightSkill::default_instance_->InitAsDefaultInstance();
  Skill_CS_UpMarkSkill::default_instance_->InitAsDefaultInstance();
  Skill_SC_UpMarkSkill::default_instance_->InitAsDefaultInstance();
  Skill_CS_SetMarkSkill::default_instance_->InitAsDefaultInstance();
  Skill_SC_SetMarkSkill::default_instance_->InitAsDefaultInstance();
  ProtoOnKeySkillInfo::default_instance_->InitAsDefaultInstance();
  Skill_CS_UpTenSkill::default_instance_->InitAsDefaultInstance();
  Skill_SC_UpTenSkill::default_instance_->InitAsDefaultInstance();
  UpSkillData::default_instance_->InitAsDefaultInstance();
  Skill_CS_UpOnKeySkill::default_instance_->InitAsDefaultInstance();
  Skill_SC_UpOnKeySkill::default_instance_->InitAsDefaultInstance();
  Skill_SC_UpdateSkillInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_skill_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_skill_2eproto {
  StaticDescriptorInitializer_skill_2eproto() {
    protobuf_AddDesc_skill_2eproto();
  }
} static_descriptor_initializer_skill_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int SkillInfo::kSkillIdFieldNumber;
const int SkillInfo::kLevelFieldNumber;
const int SkillInfo::kPosFieldNumber;
const int SkillInfo::kCurMarkFieldNumber;
const int SkillInfo::kSkillexpFieldNumber;
const int SkillInfo::kMarkInfoFieldNumber;
#endif  // !_MSC_VER

SkillInfo::SkillInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillInfo::InitAsDefaultInstance() {
}

SkillInfo::SkillInfo(const SkillInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillInfo::SharedCtor() {
  _cached_size_ = 0;
  skillid_ = 0;
  level_ = 0;
  pos_ = 0;
  curmark_ = 0;
  skillexp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillInfo::~SkillInfo() {
  SharedDtor();
}

void SkillInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillInfo_descriptor_;
}

const SkillInfo& SkillInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_skill_2eproto();
  return *default_instance_;
}

SkillInfo* SkillInfo::default_instance_ = NULL;

SkillInfo* SkillInfo::New() const {
  return new SkillInfo;
}

void SkillInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skillid_ = 0;
    level_ = 0;
    pos_ = 0;
    curmark_ = 0;
    skillexp_ = 0;
  }
  markinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 skillId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // required int32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pos;
        break;
      }

      // required int32 pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_curMark;
        break;
      }

      // required int32 curMark = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curMark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curmark_)));
          set_has_curmark();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_skillexp;
        break;
      }

      // optional int32 skillexp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillexp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillexp_)));
          set_has_skillexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_markInfo;
        break;
      }

      // repeated .proto.message.MarkInfo markInfo = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_markInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_markinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_markInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 skillId = 1;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->skillid(), output);
  }

  // required int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // required int32 pos = 3;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pos(), output);
  }

  // required int32 curMark = 4;
  if (has_curmark()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->curmark(), output);
  }

  // optional int32 skillexp = 5;
  if (has_skillexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->skillexp(), output);
  }

  // repeated .proto.message.MarkInfo markInfo = 6;
  for (int i = 0; i < this->markinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->markinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 skillId = 1;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->skillid(), target);
  }

  // required int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  // required int32 pos = 3;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pos(), target);
  }

  // required int32 curMark = 4;
  if (has_curmark()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->curmark(), target);
  }

  // optional int32 skillexp = 5;
  if (has_skillexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->skillexp(), target);
  }

  // repeated .proto.message.MarkInfo markInfo = 6;
  for (int i = 0; i < this->markinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->markinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 skillId = 1;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillid());
    }

    // required int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required int32 pos = 3;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }

    // required int32 curMark = 4;
    if (has_curmark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curmark());
    }

    // optional int32 skillexp = 5;
    if (has_skillexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillexp());
    }

  }
  // repeated .proto.message.MarkInfo markInfo = 6;
  total_size += 1 * this->markinfo_size();
  for (int i = 0; i < this->markinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->markinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillInfo::MergeFrom(const SkillInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  markinfo_.MergeFrom(from.markinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_curmark()) {
      set_curmark(from.curmark());
    }
    if (from.has_skillexp()) {
      set_skillexp(from.skillexp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillInfo::CopyFrom(const SkillInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  for (int i = 0; i < markinfo_size(); i++) {
    if (!this->markinfo(i).IsInitialized()) return false;
  }
  return true;
}

void SkillInfo::Swap(SkillInfo* other) {
  if (other != this) {
    std::swap(skillid_, other->skillid_);
    std::swap(level_, other->level_);
    std::swap(pos_, other->pos_);
    std::swap(curmark_, other->curmark_);
    std::swap(skillexp_, other->skillexp_);
    markinfo_.Swap(&other->markinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillInfo_descriptor_;
  metadata.reflection = SkillInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarkInfo::kMarkIdFieldNumber;
const int MarkInfo::kLevelFieldNumber;
#endif  // !_MSC_VER

MarkInfo::MarkInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MarkInfo::InitAsDefaultInstance() {
}

MarkInfo::MarkInfo(const MarkInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MarkInfo::SharedCtor() {
  _cached_size_ = 0;
  markid_ = 0;
  level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarkInfo::~MarkInfo() {
  SharedDtor();
}

void MarkInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MarkInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarkInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarkInfo_descriptor_;
}

const MarkInfo& MarkInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_skill_2eproto();
  return *default_instance_;
}

MarkInfo* MarkInfo::default_instance_ = NULL;

MarkInfo* MarkInfo::New() const {
  return new MarkInfo;
}

void MarkInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    markid_ = 0;
    level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarkInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 markId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &markid_)));
          set_has_markid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // required int32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MarkInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 markId = 1;
  if (has_markid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->markid(), output);
  }

  // required int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MarkInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 markId = 1;
  if (has_markid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->markid(), target);
  }

  // required int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MarkInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 markId = 1;
    if (has_markid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->markid());
    }

    // required int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarkInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarkInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarkInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarkInfo::MergeFrom(const MarkInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_markid()) {
      set_markid(from.markid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarkInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarkInfo::CopyFrom(const MarkInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarkInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MarkInfo::Swap(MarkInfo* other) {
  if (other != this) {
    std::swap(markid_, other->markid_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarkInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarkInfo_descriptor_;
  metadata.reflection = MarkInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Skill_CS_GetSkillInfo::Skill_CS_GetSkillInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Skill_CS_GetSkillInfo::InitAsDefaultInstance() {
}

Skill_CS_GetSkillInfo::Skill_CS_GetSkillInfo(const Skill_CS_GetSkillInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Skill_CS_GetSkillInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Skill_CS_GetSkillInfo::~Skill_CS_GetSkillInfo() {
  SharedDtor();
}

void Skill_CS_GetSkillInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Skill_CS_GetSkillInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Skill_CS_GetSkillInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Skill_CS_GetSkillInfo_descriptor_;
}

const Skill_CS_GetSkillInfo& Skill_CS_GetSkillInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_skill_2eproto();
  return *default_instance_;
}

Skill_CS_GetSkillInfo* Skill_CS_GetSkillInfo::default_instance_ = NULL;

Skill_CS_GetSkillInfo* Skill_CS_GetSkillInfo::New() const {
  return new Skill_CS_GetSkillInfo;
}

void Skill_CS_GetSkillInfo::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Skill_CS_GetSkillInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Skill_CS_GetSkillInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Skill_CS_GetSkillInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Skill_CS_GetSkillInfo::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Skill_CS_GetSkillInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Skill_CS_GetSkillInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Skill_CS_GetSkillInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Skill_CS_GetSkillInfo::MergeFrom(const Skill_CS_GetSkillInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Skill_CS_GetSkillInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Skill_CS_GetSkillInfo::CopyFrom(const Skill_CS_GetSkillInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Skill_CS_GetSkillInfo::IsInitialized() const {

  return true;
}

void Skill_CS_GetSkillInfo::Swap(Skill_CS_GetSkillInfo* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Skill_CS_GetSkillInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Skill_CS_GetSkillInfo_descriptor_;
  metadata.reflection = Skill_CS_GetSkillInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Skill_SC_GetSkillInfo::kResultFieldNumber;
const int Skill_SC_GetSkillInfo::kSkillInfoFieldNumber;
#endif  // !_MSC_VER

Skill_SC_GetSkillInfo::Skill_SC_GetSkillInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Skill_SC_GetSkillInfo::InitAsDefaultInstance() {
}

Skill_SC_GetSkillInfo::Skill_SC_GetSkillInfo(const Skill_SC_GetSkillInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Skill_SC_GetSkillInfo::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Skill_SC_GetSkillInfo::~Skill_SC_GetSkillInfo() {
  SharedDtor();
}

void Skill_SC_GetSkillInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Skill_SC_GetSkillInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Skill_SC_GetSkillInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Skill_SC_GetSkillInfo_descriptor_;
}

const Skill_SC_GetSkillInfo& Skill_SC_GetSkillInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_skill_2eproto();
  return *default_instance_;
}

Skill_SC_GetSkillInfo* Skill_SC_GetSkillInfo::default_instance_ = NULL;

Skill_SC_GetSkillInfo* Skill_SC_GetSkillInfo::New() const {
  return new Skill_SC_GetSkillInfo;
}

void Skill_SC_GetSkillInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  skillinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Skill_SC_GetSkillInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_skillInfo;
        break;
      }

      // repeated .proto.message.SkillInfo skillInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skillInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skillinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_skillInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Skill_SC_GetSkillInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated .proto.message.SkillInfo skillInfo = 2;
  for (int i = 0; i < this->skillinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->skillinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Skill_SC_GetSkillInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated .proto.message.SkillInfo skillInfo = 2;
  for (int i = 0; i < this->skillinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->skillinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Skill_SC_GetSkillInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated .proto.message.SkillInfo skillInfo = 2;
  total_size += 1 * this->skillinfo_size();
  for (int i = 0; i < this->skillinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skillinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Skill_SC_GetSkillInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Skill_SC_GetSkillInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Skill_SC_GetSkillInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Skill_SC_GetSkillInfo::MergeFrom(const Skill_SC_GetSkillInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  skillinfo_.MergeFrom(from.skillinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Skill_SC_GetSkillInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Skill_SC_GetSkillInfo::CopyFrom(const Skill_SC_GetSkillInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Skill_SC_GetSkillInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < skillinfo_size(); i++) {
    if (!this->skillinfo(i).IsInitialized()) return false;
  }
  return true;
}

void Skill_SC_GetSkillInfo::Swap(Skill_SC_GetSkillInfo* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    skillinfo_.Swap(&other->skillinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Skill_SC_GetSkillInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Skill_SC_GetSkillInfo_descriptor_;
  metadata.reflection = Skill_SC_GetSkillInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Skill_CS_UpSkill::kSkillIdFieldNumber;
#endif  // !_MSC_VER

Skill_CS_UpSkill::Skill_CS_UpSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Skill_CS_UpSkill::InitAsDefaultInstance() {
}

Skill_CS_UpSkill::Skill_CS_UpSkill(const Skill_CS_UpSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Skill_CS_UpSkill::SharedCtor() {
  _cached_size_ = 0;
  skillid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Skill_CS_UpSkill::~Skill_CS_UpSkill() {
  SharedDtor();
}

void Skill_CS_UpSkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Skill_CS_UpSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Skill_CS_UpSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Skill_CS_UpSkill_descriptor_;
}

const Skill_CS_UpSkill& Skill_CS_UpSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_skill_2eproto();
  return *default_instance_;
}

Skill_CS_UpSkill* Skill_CS_UpSkill::default_instance_ = NULL;

Skill_CS_UpSkill* Skill_CS_UpSkill::New() const {
  return new Skill_CS_UpSkill;
}

void Skill_CS_UpSkill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skillid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Skill_CS_UpSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 skillId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Skill_CS_UpSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 skillId = 1;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->skillid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Skill_CS_UpSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 skillId = 1;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->skillid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Skill_CS_UpSkill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 skillId = 1;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Skill_CS_UpSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Skill_CS_UpSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Skill_CS_UpSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Skill_CS_UpSkill::MergeFrom(const Skill_CS_UpSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Skill_CS_UpSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Skill_CS_UpSkill::CopyFrom(const Skill_CS_UpSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Skill_CS_UpSkill::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Skill_CS_UpSkill::Swap(Skill_CS_UpSkill* other) {
  if (other != this) {
    std::swap(skillid_, other->skillid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Skill_CS_UpSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Skill_CS_UpSkill_descriptor_;
  metadata.reflection = Skill_CS_UpSkill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Skill_SC_UpSkill::kResultFieldNumber;
const int Skill_SC_UpSkill::kOldSkillIdFieldNumber;
const int Skill_SC_UpSkill::kSkillInfoFieldNumber;
#endif  // !_MSC_VER

Skill_SC_UpSkill::Skill_SC_UpSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Skill_SC_UpSkill::InitAsDefaultInstance() {
  skillinfo_ = const_cast< ::proto::message::SkillInfo*>(&::proto::message::SkillInfo::default_instance());
}

Skill_SC_UpSkill::Skill_SC_UpSkill(const Skill_SC_UpSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Skill_SC_UpSkill::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  oldskillid_ = 0;
  skillinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Skill_SC_UpSkill::~Skill_SC_UpSkill() {
  SharedDtor();
}

void Skill_SC_UpSkill::SharedDtor() {
  if (this != default_instance_) {
    delete skillinfo_;
  }
}

void Skill_SC_UpSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Skill_SC_UpSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Skill_SC_UpSkill_descriptor_;
}

const Skill_SC_UpSkill& Skill_SC_UpSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_skill_2eproto();
  return *default_instance_;
}

Skill_SC_UpSkill* Skill_SC_UpSkill::default_instance_ = NULL;

Skill_SC_UpSkill* Skill_SC_UpSkill::New() const {
  return new Skill_SC_UpSkill;
}

void Skill_SC_UpSkill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    oldskillid_ = 0;
    if (has_skillinfo()) {
      if (skillinfo_ != NULL) skillinfo_->::proto::message::SkillInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Skill_SC_UpSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_oldSkillId;
        break;
      }

      // optional int32 oldSkillId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_oldSkillId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &oldskillid_)));
          set_has_oldskillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_skillInfo;
        break;
      }

      // optional .proto.message.SkillInfo skillInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skillInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_skillinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Skill_SC_UpSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 oldSkillId = 2;
  if (has_oldskillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->oldskillid(), output);
  }

  // optional .proto.message.SkillInfo skillInfo = 3;
  if (has_skillinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->skillinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Skill_SC_UpSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 oldSkillId = 2;
  if (has_oldskillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->oldskillid(), target);
  }

  // optional .proto.message.SkillInfo skillInfo = 3;
  if (has_skillinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->skillinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Skill_SC_UpSkill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 oldSkillId = 2;
    if (has_oldskillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oldskillid());
    }

    // optional .proto.message.SkillInfo skillInfo = 3;
    if (has_skillinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->skillinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Skill_SC_UpSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Skill_SC_UpSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Skill_SC_UpSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Skill_SC_UpSkill::MergeFrom(const Skill_SC_UpSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_oldskillid()) {
      set_oldskillid(from.oldskillid());
    }
    if (from.has_skillinfo()) {
      mutable_skillinfo()->::proto::message::SkillInfo::MergeFrom(from.skillinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Skill_SC_UpSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Skill_SC_UpSkill::CopyFrom(const Skill_SC_UpSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Skill_SC_UpSkill::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_skillinfo()) {
    if (!this->skillinfo().IsInitialized()) return false;
  }
  return true;
}

void Skill_SC_UpSkill::Swap(Skill_SC_UpSkill* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(oldskillid_, other->oldskillid_);
    std::swap(skillinfo_, other->skillinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Skill_SC_UpSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Skill_SC_UpSkill_descriptor_;
  metadata.reflection = Skill_SC_UpSkill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Skill_CS_SetFightSkill::kSkillIdFieldNumber;
const int Skill_CS_SetFightSkill::kPosDesFieldNumber;
#endif  // !_MSC_VER

Skill_CS_SetFightSkill::Skill_CS_SetFightSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Skill_CS_SetFightSkill::InitAsDefaultInstance() {
}

Skill_CS_SetFightSkill::Skill_CS_SetFightSkill(const Skill_CS_SetFightSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Skill_CS_SetFightSkill::SharedCtor() {
  _cached_size_ = 0;
  skillid_ = 0;
  posdes_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Skill_CS_SetFightSkill::~Skill_CS_SetFightSkill() {
  SharedDtor();
}

void Skill_CS_SetFightSkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Skill_CS_SetFightSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Skill_CS_SetFightSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Skill_CS_SetFightSkill_descriptor_;
}

const Skill_CS_SetFightSkill& Skill_CS_SetFightSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_skill_2eproto();
  return *default_instance_;
}

Skill_CS_SetFightSkill* Skill_CS_SetFightSkill::default_instance_ = NULL;

Skill_CS_SetFightSkill* Skill_CS_SetFightSkill::New() const {
  return new Skill_CS_SetFightSkill;
}

void Skill_CS_SetFightSkill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skillid_ = 0;
    posdes_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Skill_CS_SetFightSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 skillId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_posDes;
        break;
      }

      // required int32 posDes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_posDes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posdes_)));
          set_has_posdes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Skill_CS_SetFightSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 skillId = 1;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->skillid(), output);
  }

  // required int32 posDes = 2;
  if (has_posdes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->posdes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Skill_CS_SetFightSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 skillId = 1;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->skillid(), target);
  }

  // required int32 posDes = 2;
  if (has_posdes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->posdes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Skill_CS_SetFightSkill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 skillId = 1;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillid());
    }

    // required int32 posDes = 2;
    if (has_posdes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posdes());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Skill_CS_SetFightSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Skill_CS_SetFightSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Skill_CS_SetFightSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Skill_CS_SetFightSkill::MergeFrom(const Skill_CS_SetFightSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_posdes()) {
      set_posdes(from.posdes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Skill_CS_SetFightSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Skill_CS_SetFightSkill::CopyFrom(const Skill_CS_SetFightSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Skill_CS_SetFightSkill::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Skill_CS_SetFightSkill::Swap(Skill_CS_SetFightSkill* other) {
  if (other != this) {
    std::swap(skillid_, other->skillid_);
    std::swap(posdes_, other->posdes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Skill_CS_SetFightSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Skill_CS_SetFightSkill_descriptor_;
  metadata.reflection = Skill_CS_SetFightSkill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Skill_SC_SetFightSkill::kResultFieldNumber;
const int Skill_SC_SetFightSkill::kSkillInfoFieldNumber;
#endif  // !_MSC_VER

Skill_SC_SetFightSkill::Skill_SC_SetFightSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Skill_SC_SetFightSkill::InitAsDefaultInstance() {
}

Skill_SC_SetFightSkill::Skill_SC_SetFightSkill(const Skill_SC_SetFightSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Skill_SC_SetFightSkill::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Skill_SC_SetFightSkill::~Skill_SC_SetFightSkill() {
  SharedDtor();
}

void Skill_SC_SetFightSkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Skill_SC_SetFightSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Skill_SC_SetFightSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Skill_SC_SetFightSkill_descriptor_;
}

const Skill_SC_SetFightSkill& Skill_SC_SetFightSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_skill_2eproto();
  return *default_instance_;
}

Skill_SC_SetFightSkill* Skill_SC_SetFightSkill::default_instance_ = NULL;

Skill_SC_SetFightSkill* Skill_SC_SetFightSkill::New() const {
  return new Skill_SC_SetFightSkill;
}

void Skill_SC_SetFightSkill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  skillinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Skill_SC_SetFightSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_skillInfo;
        break;
      }

      // repeated .proto.message.SkillInfo skillInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skillInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skillinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_skillInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Skill_SC_SetFightSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated .proto.message.SkillInfo skillInfo = 2;
  for (int i = 0; i < this->skillinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->skillinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Skill_SC_SetFightSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated .proto.message.SkillInfo skillInfo = 2;
  for (int i = 0; i < this->skillinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->skillinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Skill_SC_SetFightSkill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated .proto.message.SkillInfo skillInfo = 2;
  total_size += 1 * this->skillinfo_size();
  for (int i = 0; i < this->skillinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skillinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Skill_SC_SetFightSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Skill_SC_SetFightSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Skill_SC_SetFightSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Skill_SC_SetFightSkill::MergeFrom(const Skill_SC_SetFightSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  skillinfo_.MergeFrom(from.skillinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Skill_SC_SetFightSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Skill_SC_SetFightSkill::CopyFrom(const Skill_SC_SetFightSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Skill_SC_SetFightSkill::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < skillinfo_size(); i++) {
    if (!this->skillinfo(i).IsInitialized()) return false;
  }
  return true;
}

void Skill_SC_SetFightSkill::Swap(Skill_SC_SetFightSkill* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    skillinfo_.Swap(&other->skillinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Skill_SC_SetFightSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Skill_SC_SetFightSkill_descriptor_;
  metadata.reflection = Skill_SC_SetFightSkill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Skill_CS_UpMarkSkill::kSkillIdFieldNumber;
const int Skill_CS_UpMarkSkill::kMarkIdFieldNumber;
#endif  // !_MSC_VER

Skill_CS_UpMarkSkill::Skill_CS_UpMarkSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Skill_CS_UpMarkSkill::InitAsDefaultInstance() {
}

Skill_CS_UpMarkSkill::Skill_CS_UpMarkSkill(const Skill_CS_UpMarkSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Skill_CS_UpMarkSkill::SharedCtor() {
  _cached_size_ = 0;
  skillid_ = 0;
  markid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Skill_CS_UpMarkSkill::~Skill_CS_UpMarkSkill() {
  SharedDtor();
}

void Skill_CS_UpMarkSkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Skill_CS_UpMarkSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Skill_CS_UpMarkSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Skill_CS_UpMarkSkill_descriptor_;
}

const Skill_CS_UpMarkSkill& Skill_CS_UpMarkSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_skill_2eproto();
  return *default_instance_;
}

Skill_CS_UpMarkSkill* Skill_CS_UpMarkSkill::default_instance_ = NULL;

Skill_CS_UpMarkSkill* Skill_CS_UpMarkSkill::New() const {
  return new Skill_CS_UpMarkSkill;
}

void Skill_CS_UpMarkSkill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skillid_ = 0;
    markid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Skill_CS_UpMarkSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 skillId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_markId;
        break;
      }

      // required int32 markId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_markId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &markid_)));
          set_has_markid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Skill_CS_UpMarkSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 skillId = 1;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->skillid(), output);
  }

  // required int32 markId = 2;
  if (has_markid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->markid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Skill_CS_UpMarkSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 skillId = 1;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->skillid(), target);
  }

  // required int32 markId = 2;
  if (has_markid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->markid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Skill_CS_UpMarkSkill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 skillId = 1;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillid());
    }

    // required int32 markId = 2;
    if (has_markid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->markid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Skill_CS_UpMarkSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Skill_CS_UpMarkSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Skill_CS_UpMarkSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Skill_CS_UpMarkSkill::MergeFrom(const Skill_CS_UpMarkSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_markid()) {
      set_markid(from.markid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Skill_CS_UpMarkSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Skill_CS_UpMarkSkill::CopyFrom(const Skill_CS_UpMarkSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Skill_CS_UpMarkSkill::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Skill_CS_UpMarkSkill::Swap(Skill_CS_UpMarkSkill* other) {
  if (other != this) {
    std::swap(skillid_, other->skillid_);
    std::swap(markid_, other->markid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Skill_CS_UpMarkSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Skill_CS_UpMarkSkill_descriptor_;
  metadata.reflection = Skill_CS_UpMarkSkill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Skill_SC_UpMarkSkill::kResultFieldNumber;
const int Skill_SC_UpMarkSkill::kSkillIdFieldNumber;
const int Skill_SC_UpMarkSkill::kOldMarkIdFieldNumber;
const int Skill_SC_UpMarkSkill::kMarkInfoFieldNumber;
#endif  // !_MSC_VER

Skill_SC_UpMarkSkill::Skill_SC_UpMarkSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Skill_SC_UpMarkSkill::InitAsDefaultInstance() {
  markinfo_ = const_cast< ::proto::message::MarkInfo*>(&::proto::message::MarkInfo::default_instance());
}

Skill_SC_UpMarkSkill::Skill_SC_UpMarkSkill(const Skill_SC_UpMarkSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Skill_SC_UpMarkSkill::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  skillid_ = 0;
  oldmarkid_ = 0;
  markinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Skill_SC_UpMarkSkill::~Skill_SC_UpMarkSkill() {
  SharedDtor();
}

void Skill_SC_UpMarkSkill::SharedDtor() {
  if (this != default_instance_) {
    delete markinfo_;
  }
}

void Skill_SC_UpMarkSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Skill_SC_UpMarkSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Skill_SC_UpMarkSkill_descriptor_;
}

const Skill_SC_UpMarkSkill& Skill_SC_UpMarkSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_skill_2eproto();
  return *default_instance_;
}

Skill_SC_UpMarkSkill* Skill_SC_UpMarkSkill::default_instance_ = NULL;

Skill_SC_UpMarkSkill* Skill_SC_UpMarkSkill::New() const {
  return new Skill_SC_UpMarkSkill;
}

void Skill_SC_UpMarkSkill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    skillid_ = 0;
    oldmarkid_ = 0;
    if (has_markinfo()) {
      if (markinfo_ != NULL) markinfo_->::proto::message::MarkInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Skill_SC_UpMarkSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skillId;
        break;
      }

      // optional int32 skillId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_oldMarkId;
        break;
      }

      // optional int32 oldMarkId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_oldMarkId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &oldmarkid_)));
          set_has_oldmarkid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_markInfo;
        break;
      }

      // optional .proto.message.MarkInfo markInfo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_markInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_markinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Skill_SC_UpMarkSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 skillId = 2;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->skillid(), output);
  }

  // optional int32 oldMarkId = 3;
  if (has_oldmarkid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->oldmarkid(), output);
  }

  // optional .proto.message.MarkInfo markInfo = 4;
  if (has_markinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->markinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Skill_SC_UpMarkSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 skillId = 2;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->skillid(), target);
  }

  // optional int32 oldMarkId = 3;
  if (has_oldmarkid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->oldmarkid(), target);
  }

  // optional .proto.message.MarkInfo markInfo = 4;
  if (has_markinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->markinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Skill_SC_UpMarkSkill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 skillId = 2;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillid());
    }

    // optional int32 oldMarkId = 3;
    if (has_oldmarkid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oldmarkid());
    }

    // optional .proto.message.MarkInfo markInfo = 4;
    if (has_markinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->markinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Skill_SC_UpMarkSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Skill_SC_UpMarkSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Skill_SC_UpMarkSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Skill_SC_UpMarkSkill::MergeFrom(const Skill_SC_UpMarkSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_oldmarkid()) {
      set_oldmarkid(from.oldmarkid());
    }
    if (from.has_markinfo()) {
      mutable_markinfo()->::proto::message::MarkInfo::MergeFrom(from.markinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Skill_SC_UpMarkSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Skill_SC_UpMarkSkill::CopyFrom(const Skill_SC_UpMarkSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Skill_SC_UpMarkSkill::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_markinfo()) {
    if (!this->markinfo().IsInitialized()) return false;
  }
  return true;
}

void Skill_SC_UpMarkSkill::Swap(Skill_SC_UpMarkSkill* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(skillid_, other->skillid_);
    std::swap(oldmarkid_, other->oldmarkid_);
    std::swap(markinfo_, other->markinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Skill_SC_UpMarkSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Skill_SC_UpMarkSkill_descriptor_;
  metadata.reflection = Skill_SC_UpMarkSkill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Skill_CS_SetMarkSkill::kSkillIdFieldNumber;
const int Skill_CS_SetMarkSkill::kMarkIdFieldNumber;
#endif  // !_MSC_VER

Skill_CS_SetMarkSkill::Skill_CS_SetMarkSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Skill_CS_SetMarkSkill::InitAsDefaultInstance() {
}

Skill_CS_SetMarkSkill::Skill_CS_SetMarkSkill(const Skill_CS_SetMarkSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Skill_CS_SetMarkSkill::SharedCtor() {
  _cached_size_ = 0;
  skillid_ = 0;
  markid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Skill_CS_SetMarkSkill::~Skill_CS_SetMarkSkill() {
  SharedDtor();
}

void Skill_CS_SetMarkSkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Skill_CS_SetMarkSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Skill_CS_SetMarkSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Skill_CS_SetMarkSkill_descriptor_;
}

const Skill_CS_SetMarkSkill& Skill_CS_SetMarkSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_skill_2eproto();
  return *default_instance_;
}

Skill_CS_SetMarkSkill* Skill_CS_SetMarkSkill::default_instance_ = NULL;

Skill_CS_SetMarkSkill* Skill_CS_SetMarkSkill::New() const {
  return new Skill_CS_SetMarkSkill;
}

void Skill_CS_SetMarkSkill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skillid_ = 0;
    markid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Skill_CS_SetMarkSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 skillId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_markId;
        break;
      }

      // required int32 markId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_markId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &markid_)));
          set_has_markid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Skill_CS_SetMarkSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 skillId = 1;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->skillid(), output);
  }

  // required int32 markId = 2;
  if (has_markid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->markid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Skill_CS_SetMarkSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 skillId = 1;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->skillid(), target);
  }

  // required int32 markId = 2;
  if (has_markid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->markid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Skill_CS_SetMarkSkill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 skillId = 1;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillid());
    }

    // required int32 markId = 2;
    if (has_markid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->markid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Skill_CS_SetMarkSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Skill_CS_SetMarkSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Skill_CS_SetMarkSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Skill_CS_SetMarkSkill::MergeFrom(const Skill_CS_SetMarkSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_markid()) {
      set_markid(from.markid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Skill_CS_SetMarkSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Skill_CS_SetMarkSkill::CopyFrom(const Skill_CS_SetMarkSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Skill_CS_SetMarkSkill::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Skill_CS_SetMarkSkill::Swap(Skill_CS_SetMarkSkill* other) {
  if (other != this) {
    std::swap(skillid_, other->skillid_);
    std::swap(markid_, other->markid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Skill_CS_SetMarkSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Skill_CS_SetMarkSkill_descriptor_;
  metadata.reflection = Skill_CS_SetMarkSkill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Skill_SC_SetMarkSkill::kResultFieldNumber;
const int Skill_SC_SetMarkSkill::kSkillIdFieldNumber;
const int Skill_SC_SetMarkSkill::kCurMarkFieldNumber;
#endif  // !_MSC_VER

Skill_SC_SetMarkSkill::Skill_SC_SetMarkSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Skill_SC_SetMarkSkill::InitAsDefaultInstance() {
}

Skill_SC_SetMarkSkill::Skill_SC_SetMarkSkill(const Skill_SC_SetMarkSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Skill_SC_SetMarkSkill::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  skillid_ = 0;
  curmark_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Skill_SC_SetMarkSkill::~Skill_SC_SetMarkSkill() {
  SharedDtor();
}

void Skill_SC_SetMarkSkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Skill_SC_SetMarkSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Skill_SC_SetMarkSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Skill_SC_SetMarkSkill_descriptor_;
}

const Skill_SC_SetMarkSkill& Skill_SC_SetMarkSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_skill_2eproto();
  return *default_instance_;
}

Skill_SC_SetMarkSkill* Skill_SC_SetMarkSkill::default_instance_ = NULL;

Skill_SC_SetMarkSkill* Skill_SC_SetMarkSkill::New() const {
  return new Skill_SC_SetMarkSkill;
}

void Skill_SC_SetMarkSkill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    skillid_ = 0;
    curmark_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Skill_SC_SetMarkSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skillId;
        break;
      }

      // optional int32 skillId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_curMark;
        break;
      }

      // optional int32 curMark = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curMark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curmark_)));
          set_has_curmark();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Skill_SC_SetMarkSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 skillId = 2;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->skillid(), output);
  }

  // optional int32 curMark = 3;
  if (has_curmark()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->curmark(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Skill_SC_SetMarkSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 skillId = 2;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->skillid(), target);
  }

  // optional int32 curMark = 3;
  if (has_curmark()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->curmark(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Skill_SC_SetMarkSkill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 skillId = 2;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillid());
    }

    // optional int32 curMark = 3;
    if (has_curmark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curmark());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Skill_SC_SetMarkSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Skill_SC_SetMarkSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Skill_SC_SetMarkSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Skill_SC_SetMarkSkill::MergeFrom(const Skill_SC_SetMarkSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_curmark()) {
      set_curmark(from.curmark());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Skill_SC_SetMarkSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Skill_SC_SetMarkSkill::CopyFrom(const Skill_SC_SetMarkSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Skill_SC_SetMarkSkill::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Skill_SC_SetMarkSkill::Swap(Skill_SC_SetMarkSkill* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(skillid_, other->skillid_);
    std::swap(curmark_, other->curmark_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Skill_SC_SetMarkSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Skill_SC_SetMarkSkill_descriptor_;
  metadata.reflection = Skill_SC_SetMarkSkill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoOnKeySkillInfo::kOldSkillIdFieldNumber;
const int ProtoOnKeySkillInfo::kSkillInfoFieldNumber;
#endif  // !_MSC_VER

ProtoOnKeySkillInfo::ProtoOnKeySkillInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoOnKeySkillInfo::InitAsDefaultInstance() {
  skillinfo_ = const_cast< ::proto::message::SkillInfo*>(&::proto::message::SkillInfo::default_instance());
}

ProtoOnKeySkillInfo::ProtoOnKeySkillInfo(const ProtoOnKeySkillInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoOnKeySkillInfo::SharedCtor() {
  _cached_size_ = 0;
  oldskillid_ = 0;
  skillinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoOnKeySkillInfo::~ProtoOnKeySkillInfo() {
  SharedDtor();
}

void ProtoOnKeySkillInfo::SharedDtor() {
  if (this != default_instance_) {
    delete skillinfo_;
  }
}

void ProtoOnKeySkillInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoOnKeySkillInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoOnKeySkillInfo_descriptor_;
}

const ProtoOnKeySkillInfo& ProtoOnKeySkillInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_skill_2eproto();
  return *default_instance_;
}

ProtoOnKeySkillInfo* ProtoOnKeySkillInfo::default_instance_ = NULL;

ProtoOnKeySkillInfo* ProtoOnKeySkillInfo::New() const {
  return new ProtoOnKeySkillInfo;
}

void ProtoOnKeySkillInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    oldskillid_ = 0;
    if (has_skillinfo()) {
      if (skillinfo_ != NULL) skillinfo_->::proto::message::SkillInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoOnKeySkillInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 oldSkillId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &oldskillid_)));
          set_has_oldskillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_skillInfo;
        break;
      }

      // optional .proto.message.SkillInfo skillInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skillInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_skillinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoOnKeySkillInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 oldSkillId = 1;
  if (has_oldskillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->oldskillid(), output);
  }

  // optional .proto.message.SkillInfo skillInfo = 2;
  if (has_skillinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->skillinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoOnKeySkillInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 oldSkillId = 1;
  if (has_oldskillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->oldskillid(), target);
  }

  // optional .proto.message.SkillInfo skillInfo = 2;
  if (has_skillinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->skillinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoOnKeySkillInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 oldSkillId = 1;
    if (has_oldskillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oldskillid());
    }

    // optional .proto.message.SkillInfo skillInfo = 2;
    if (has_skillinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->skillinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoOnKeySkillInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoOnKeySkillInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoOnKeySkillInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoOnKeySkillInfo::MergeFrom(const ProtoOnKeySkillInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_oldskillid()) {
      set_oldskillid(from.oldskillid());
    }
    if (from.has_skillinfo()) {
      mutable_skillinfo()->::proto::message::SkillInfo::MergeFrom(from.skillinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoOnKeySkillInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoOnKeySkillInfo::CopyFrom(const ProtoOnKeySkillInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoOnKeySkillInfo::IsInitialized() const {

  if (has_skillinfo()) {
    if (!this->skillinfo().IsInitialized()) return false;
  }
  return true;
}

void ProtoOnKeySkillInfo::Swap(ProtoOnKeySkillInfo* other) {
  if (other != this) {
    std::swap(oldskillid_, other->oldskillid_);
    std::swap(skillinfo_, other->skillinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoOnKeySkillInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoOnKeySkillInfo_descriptor_;
  metadata.reflection = ProtoOnKeySkillInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Skill_CS_UpTenSkill::kOldSkillIdFieldNumber;
#endif  // !_MSC_VER

Skill_CS_UpTenSkill::Skill_CS_UpTenSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Skill_CS_UpTenSkill::InitAsDefaultInstance() {
}

Skill_CS_UpTenSkill::Skill_CS_UpTenSkill(const Skill_CS_UpTenSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Skill_CS_UpTenSkill::SharedCtor() {
  _cached_size_ = 0;
  oldskillid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Skill_CS_UpTenSkill::~Skill_CS_UpTenSkill() {
  SharedDtor();
}

void Skill_CS_UpTenSkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Skill_CS_UpTenSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Skill_CS_UpTenSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Skill_CS_UpTenSkill_descriptor_;
}

const Skill_CS_UpTenSkill& Skill_CS_UpTenSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_skill_2eproto();
  return *default_instance_;
}

Skill_CS_UpTenSkill* Skill_CS_UpTenSkill::default_instance_ = NULL;

Skill_CS_UpTenSkill* Skill_CS_UpTenSkill::New() const {
  return new Skill_CS_UpTenSkill;
}

void Skill_CS_UpTenSkill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    oldskillid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Skill_CS_UpTenSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 oldSkillId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &oldskillid_)));
          set_has_oldskillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Skill_CS_UpTenSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 oldSkillId = 1;
  if (has_oldskillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->oldskillid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Skill_CS_UpTenSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 oldSkillId = 1;
  if (has_oldskillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->oldskillid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Skill_CS_UpTenSkill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 oldSkillId = 1;
    if (has_oldskillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oldskillid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Skill_CS_UpTenSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Skill_CS_UpTenSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Skill_CS_UpTenSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Skill_CS_UpTenSkill::MergeFrom(const Skill_CS_UpTenSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_oldskillid()) {
      set_oldskillid(from.oldskillid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Skill_CS_UpTenSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Skill_CS_UpTenSkill::CopyFrom(const Skill_CS_UpTenSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Skill_CS_UpTenSkill::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Skill_CS_UpTenSkill::Swap(Skill_CS_UpTenSkill* other) {
  if (other != this) {
    std::swap(oldskillid_, other->oldskillid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Skill_CS_UpTenSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Skill_CS_UpTenSkill_descriptor_;
  metadata.reflection = Skill_CS_UpTenSkill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Skill_SC_UpTenSkill::kResultFieldNumber;
const int Skill_SC_UpTenSkill::kSkillInfoFieldNumber;
const int Skill_SC_UpTenSkill::kRollexpFieldNumber;
#endif  // !_MSC_VER

Skill_SC_UpTenSkill::Skill_SC_UpTenSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Skill_SC_UpTenSkill::InitAsDefaultInstance() {
  skillinfo_ = const_cast< ::proto::message::ProtoOnKeySkillInfo*>(&::proto::message::ProtoOnKeySkillInfo::default_instance());
}

Skill_SC_UpTenSkill::Skill_SC_UpTenSkill(const Skill_SC_UpTenSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Skill_SC_UpTenSkill::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  skillinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Skill_SC_UpTenSkill::~Skill_SC_UpTenSkill() {
  SharedDtor();
}

void Skill_SC_UpTenSkill::SharedDtor() {
  if (this != default_instance_) {
    delete skillinfo_;
  }
}

void Skill_SC_UpTenSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Skill_SC_UpTenSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Skill_SC_UpTenSkill_descriptor_;
}

const Skill_SC_UpTenSkill& Skill_SC_UpTenSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_skill_2eproto();
  return *default_instance_;
}

Skill_SC_UpTenSkill* Skill_SC_UpTenSkill::default_instance_ = NULL;

Skill_SC_UpTenSkill* Skill_SC_UpTenSkill::New() const {
  return new Skill_SC_UpTenSkill;
}

void Skill_SC_UpTenSkill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_skillinfo()) {
      if (skillinfo_ != NULL) skillinfo_->::proto::message::ProtoOnKeySkillInfo::Clear();
    }
  }
  rollexp_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Skill_SC_UpTenSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_skillInfo;
        break;
      }

      // required .proto.message.ProtoOnKeySkillInfo skillInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skillInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_skillinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rollexp;
        break;
      }

      // repeated int32 rollexp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rollexp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_rollexp())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_rollexp())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rollexp;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Skill_SC_UpTenSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // required .proto.message.ProtoOnKeySkillInfo skillInfo = 2;
  if (has_skillinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->skillinfo(), output);
  }

  // repeated int32 rollexp = 3;
  for (int i = 0; i < this->rollexp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->rollexp(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Skill_SC_UpTenSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // required .proto.message.ProtoOnKeySkillInfo skillInfo = 2;
  if (has_skillinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->skillinfo(), target);
  }

  // repeated int32 rollexp = 3;
  for (int i = 0; i < this->rollexp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->rollexp(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Skill_SC_UpTenSkill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required .proto.message.ProtoOnKeySkillInfo skillInfo = 2;
    if (has_skillinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->skillinfo());
    }

  }
  // repeated int32 rollexp = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->rollexp_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->rollexp(i));
    }
    total_size += 1 * this->rollexp_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Skill_SC_UpTenSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Skill_SC_UpTenSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Skill_SC_UpTenSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Skill_SC_UpTenSkill::MergeFrom(const Skill_SC_UpTenSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  rollexp_.MergeFrom(from.rollexp_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_skillinfo()) {
      mutable_skillinfo()->::proto::message::ProtoOnKeySkillInfo::MergeFrom(from.skillinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Skill_SC_UpTenSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Skill_SC_UpTenSkill::CopyFrom(const Skill_SC_UpTenSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Skill_SC_UpTenSkill::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_skillinfo()) {
    if (!this->skillinfo().IsInitialized()) return false;
  }
  return true;
}

void Skill_SC_UpTenSkill::Swap(Skill_SC_UpTenSkill* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(skillinfo_, other->skillinfo_);
    rollexp_.Swap(&other->rollexp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Skill_SC_UpTenSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Skill_SC_UpTenSkill_descriptor_;
  metadata.reflection = Skill_SC_UpTenSkill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpSkillData::kSkillidFieldNumber;
const int UpSkillData::kUpcountsFieldNumber;
#endif  // !_MSC_VER

UpSkillData::UpSkillData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpSkillData::InitAsDefaultInstance() {
}

UpSkillData::UpSkillData(const UpSkillData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpSkillData::SharedCtor() {
  _cached_size_ = 0;
  skillid_ = 0u;
  upcounts_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpSkillData::~UpSkillData() {
  SharedDtor();
}

void UpSkillData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpSkillData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpSkillData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpSkillData_descriptor_;
}

const UpSkillData& UpSkillData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_skill_2eproto();
  return *default_instance_;
}

UpSkillData* UpSkillData::default_instance_ = NULL;

UpSkillData* UpSkillData::New() const {
  return new UpSkillData;
}

void UpSkillData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skillid_ = 0u;
    upcounts_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpSkillData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 skillid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_upcounts;
        break;
      }

      // optional uint32 upcounts = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_upcounts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &upcounts_)));
          set_has_upcounts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpSkillData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 skillid = 1;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->skillid(), output);
  }

  // optional uint32 upcounts = 2;
  if (has_upcounts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->upcounts(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpSkillData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 skillid = 1;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->skillid(), target);
  }

  // optional uint32 upcounts = 2;
  if (has_upcounts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->upcounts(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpSkillData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 skillid = 1;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillid());
    }

    // optional uint32 upcounts = 2;
    if (has_upcounts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->upcounts());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpSkillData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpSkillData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpSkillData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpSkillData::MergeFrom(const UpSkillData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_upcounts()) {
      set_upcounts(from.upcounts());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpSkillData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpSkillData::CopyFrom(const UpSkillData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpSkillData::IsInitialized() const {

  return true;
}

void UpSkillData::Swap(UpSkillData* other) {
  if (other != this) {
    std::swap(skillid_, other->skillid_);
    std::swap(upcounts_, other->upcounts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpSkillData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpSkillData_descriptor_;
  metadata.reflection = UpSkillData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Skill_CS_UpOnKeySkill::kUpskillidFieldNumber;
#endif  // !_MSC_VER

Skill_CS_UpOnKeySkill::Skill_CS_UpOnKeySkill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Skill_CS_UpOnKeySkill::InitAsDefaultInstance() {
}

Skill_CS_UpOnKeySkill::Skill_CS_UpOnKeySkill(const Skill_CS_UpOnKeySkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Skill_CS_UpOnKeySkill::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Skill_CS_UpOnKeySkill::~Skill_CS_UpOnKeySkill() {
  SharedDtor();
}

void Skill_CS_UpOnKeySkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Skill_CS_UpOnKeySkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Skill_CS_UpOnKeySkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Skill_CS_UpOnKeySkill_descriptor_;
}

const Skill_CS_UpOnKeySkill& Skill_CS_UpOnKeySkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_skill_2eproto();
  return *default_instance_;
}

Skill_CS_UpOnKeySkill* Skill_CS_UpOnKeySkill::default_instance_ = NULL;

Skill_CS_UpOnKeySkill* Skill_CS_UpOnKeySkill::New() const {
  return new Skill_CS_UpOnKeySkill;
}

void Skill_CS_UpOnKeySkill::Clear() {
  upskillid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Skill_CS_UpOnKeySkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.message.UpSkillData upskillid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_upskillid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_upskillid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_upskillid;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Skill_CS_UpOnKeySkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.message.UpSkillData upskillid = 1;
  for (int i = 0; i < this->upskillid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->upskillid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Skill_CS_UpOnKeySkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.message.UpSkillData upskillid = 1;
  for (int i = 0; i < this->upskillid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->upskillid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Skill_CS_UpOnKeySkill::ByteSize() const {
  int total_size = 0;

  // repeated .proto.message.UpSkillData upskillid = 1;
  total_size += 1 * this->upskillid_size();
  for (int i = 0; i < this->upskillid_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->upskillid(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Skill_CS_UpOnKeySkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Skill_CS_UpOnKeySkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Skill_CS_UpOnKeySkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Skill_CS_UpOnKeySkill::MergeFrom(const Skill_CS_UpOnKeySkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  upskillid_.MergeFrom(from.upskillid_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Skill_CS_UpOnKeySkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Skill_CS_UpOnKeySkill::CopyFrom(const Skill_CS_UpOnKeySkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Skill_CS_UpOnKeySkill::IsInitialized() const {

  return true;
}

void Skill_CS_UpOnKeySkill::Swap(Skill_CS_UpOnKeySkill* other) {
  if (other != this) {
    upskillid_.Swap(&other->upskillid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Skill_CS_UpOnKeySkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Skill_CS_UpOnKeySkill_descriptor_;
  metadata.reflection = Skill_CS_UpOnKeySkill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Skill_SC_UpOnKeySkill::kResultFieldNumber;
const int Skill_SC_UpOnKeySkill::kUpinfoFieldNumber;
#endif  // !_MSC_VER

Skill_SC_UpOnKeySkill::Skill_SC_UpOnKeySkill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Skill_SC_UpOnKeySkill::InitAsDefaultInstance() {
}

Skill_SC_UpOnKeySkill::Skill_SC_UpOnKeySkill(const Skill_SC_UpOnKeySkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Skill_SC_UpOnKeySkill::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Skill_SC_UpOnKeySkill::~Skill_SC_UpOnKeySkill() {
  SharedDtor();
}

void Skill_SC_UpOnKeySkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Skill_SC_UpOnKeySkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Skill_SC_UpOnKeySkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Skill_SC_UpOnKeySkill_descriptor_;
}

const Skill_SC_UpOnKeySkill& Skill_SC_UpOnKeySkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_skill_2eproto();
  return *default_instance_;
}

Skill_SC_UpOnKeySkill* Skill_SC_UpOnKeySkill::default_instance_ = NULL;

Skill_SC_UpOnKeySkill* Skill_SC_UpOnKeySkill::New() const {
  return new Skill_SC_UpOnKeySkill;
}

void Skill_SC_UpOnKeySkill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  upinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Skill_SC_UpOnKeySkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_upinfo;
        break;
      }

      // repeated .proto.message.ProtoOnKeySkillInfo upinfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_upinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_upinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_upinfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Skill_SC_UpOnKeySkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated .proto.message.ProtoOnKeySkillInfo upinfo = 2;
  for (int i = 0; i < this->upinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->upinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Skill_SC_UpOnKeySkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated .proto.message.ProtoOnKeySkillInfo upinfo = 2;
  for (int i = 0; i < this->upinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->upinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Skill_SC_UpOnKeySkill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated .proto.message.ProtoOnKeySkillInfo upinfo = 2;
  total_size += 1 * this->upinfo_size();
  for (int i = 0; i < this->upinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->upinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Skill_SC_UpOnKeySkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Skill_SC_UpOnKeySkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Skill_SC_UpOnKeySkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Skill_SC_UpOnKeySkill::MergeFrom(const Skill_SC_UpOnKeySkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  upinfo_.MergeFrom(from.upinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Skill_SC_UpOnKeySkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Skill_SC_UpOnKeySkill::CopyFrom(const Skill_SC_UpOnKeySkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Skill_SC_UpOnKeySkill::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < upinfo_size(); i++) {
    if (!this->upinfo(i).IsInitialized()) return false;
  }
  return true;
}

void Skill_SC_UpOnKeySkill::Swap(Skill_SC_UpOnKeySkill* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    upinfo_.Swap(&other->upinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Skill_SC_UpOnKeySkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Skill_SC_UpOnKeySkill_descriptor_;
  metadata.reflection = Skill_SC_UpOnKeySkill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Skill_SC_UpdateSkillInfo::kSkillInfoFieldNumber;
#endif  // !_MSC_VER

Skill_SC_UpdateSkillInfo::Skill_SC_UpdateSkillInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Skill_SC_UpdateSkillInfo::InitAsDefaultInstance() {
}

Skill_SC_UpdateSkillInfo::Skill_SC_UpdateSkillInfo(const Skill_SC_UpdateSkillInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Skill_SC_UpdateSkillInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Skill_SC_UpdateSkillInfo::~Skill_SC_UpdateSkillInfo() {
  SharedDtor();
}

void Skill_SC_UpdateSkillInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Skill_SC_UpdateSkillInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Skill_SC_UpdateSkillInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Skill_SC_UpdateSkillInfo_descriptor_;
}

const Skill_SC_UpdateSkillInfo& Skill_SC_UpdateSkillInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_skill_2eproto();
  return *default_instance_;
}

Skill_SC_UpdateSkillInfo* Skill_SC_UpdateSkillInfo::default_instance_ = NULL;

Skill_SC_UpdateSkillInfo* Skill_SC_UpdateSkillInfo::New() const {
  return new Skill_SC_UpdateSkillInfo;
}

void Skill_SC_UpdateSkillInfo::Clear() {
  skillinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Skill_SC_UpdateSkillInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.message.SkillInfo skillInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skillInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skillinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_skillInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Skill_SC_UpdateSkillInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.message.SkillInfo skillInfo = 1;
  for (int i = 0; i < this->skillinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->skillinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Skill_SC_UpdateSkillInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.message.SkillInfo skillInfo = 1;
  for (int i = 0; i < this->skillinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->skillinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Skill_SC_UpdateSkillInfo::ByteSize() const {
  int total_size = 0;

  // repeated .proto.message.SkillInfo skillInfo = 1;
  total_size += 1 * this->skillinfo_size();
  for (int i = 0; i < this->skillinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skillinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Skill_SC_UpdateSkillInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Skill_SC_UpdateSkillInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Skill_SC_UpdateSkillInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Skill_SC_UpdateSkillInfo::MergeFrom(const Skill_SC_UpdateSkillInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  skillinfo_.MergeFrom(from.skillinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Skill_SC_UpdateSkillInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Skill_SC_UpdateSkillInfo::CopyFrom(const Skill_SC_UpdateSkillInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Skill_SC_UpdateSkillInfo::IsInitialized() const {

  for (int i = 0; i < skillinfo_size(); i++) {
    if (!this->skillinfo(i).IsInitialized()) return false;
  }
  return true;
}

void Skill_SC_UpdateSkillInfo::Swap(Skill_SC_UpdateSkillInfo* other) {
  if (other != this) {
    skillinfo_.Swap(&other->skillinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Skill_SC_UpdateSkillInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Skill_SC_UpdateSkillInfo_descriptor_;
  metadata.reflection = Skill_SC_UpdateSkillInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace proto

// @@protoc_insertion_point(global_scope)
