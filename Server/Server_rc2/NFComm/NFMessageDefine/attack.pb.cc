// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: attack.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "attack.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace message {

namespace {

const ::google::protobuf::Descriptor* Attack_SC_UpdateXP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Attack_SC_UpdateXP_reflection_ = NULL;
const ::google::protobuf::Descriptor* Attack_CS_PlayerExcuteSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Attack_CS_PlayerExcuteSkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* Attack_CS_RequestHurt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Attack_CS_RequestHurt_reflection_ = NULL;
const ::google::protobuf::Descriptor* Attack_CS_AttackSprint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Attack_CS_AttackSprint_reflection_ = NULL;
const ::google::protobuf::Descriptor* Attack_SC_ExcuteSkillSelf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Attack_SC_ExcuteSkillSelf_reflection_ = NULL;
const ::google::protobuf::Descriptor* Attack_SC_ExcuteSkillOther_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Attack_SC_ExcuteSkillOther_reflection_ = NULL;
const ::google::protobuf::Descriptor* Attack_SC_UpdateHurtData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Attack_SC_UpdateHurtData_reflection_ = NULL;
const ::google::protobuf::Descriptor* Attack_SC_AttackBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Attack_SC_AttackBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* Attack_SC_AddBuffer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Attack_SC_AddBuffer_reflection_ = NULL;
const ::google::protobuf::Descriptor* Attack_SC_DelBuffer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Attack_SC_DelBuffer_reflection_ = NULL;
const ::google::protobuf::Descriptor* Attack_SC_UpdateBuffer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Attack_SC_UpdateBuffer_reflection_ = NULL;
const ::google::protobuf::Descriptor* Attack_SC_AttackDie_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Attack_SC_AttackDie_reflection_ = NULL;
const ::google::protobuf::Descriptor* Attack_CS_BlockSkillStart_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Attack_CS_BlockSkillStart_reflection_ = NULL;
const ::google::protobuf::Descriptor* Attack_CS_BlockSkillEnd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Attack_CS_BlockSkillEnd_reflection_ = NULL;
const ::google::protobuf::Descriptor* Attack_SC_BlockSkillStart_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Attack_SC_BlockSkillStart_reflection_ = NULL;
const ::google::protobuf::Descriptor* Attack_SC_BlockSkillEnd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Attack_SC_BlockSkillEnd_reflection_ = NULL;
const ::google::protobuf::Descriptor* Attack_SC_UpdateAttacking_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Attack_SC_UpdateAttacking_reflection_ = NULL;
const ::google::protobuf::Descriptor* Attack_SC_UpdateTP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Attack_SC_UpdateTP_reflection_ = NULL;
const ::google::protobuf::Descriptor* Attack_SC_Strike_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Attack_SC_Strike_reflection_ = NULL;
const ::google::protobuf::Descriptor* Attack_SC_Die_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Attack_SC_Die_reflection_ = NULL;
const ::google::protobuf::Descriptor* Attack_SC_Shout_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Attack_SC_Shout_reflection_ = NULL;
const ::google::protobuf::Descriptor* Attack_CS_Relive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Attack_CS_Relive_reflection_ = NULL;
const ::google::protobuf::Descriptor* Attack_SC_Relive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Attack_SC_Relive_reflection_ = NULL;
const ::google::protobuf::Descriptor* Attack_SC_ClearSkillCD_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Attack_SC_ClearSkillCD_reflection_ = NULL;
const ::google::protobuf::Descriptor* Attack_SC_UpdateAttackStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Attack_SC_UpdateAttackStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* Attack_SC_UpdateMonsterAttackStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Attack_SC_UpdateMonsterAttackStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* Attack_SC_Block_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Attack_SC_Block_reflection_ = NULL;
const ::google::protobuf::Descriptor* Attack_SC_UpdateFlagCamp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Attack_SC_UpdateFlagCamp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Attack_SC_RelivePos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Attack_SC_RelivePos_reflection_ = NULL;
const ::google::protobuf::Descriptor* Attack_SC_UpdateGroupCD_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Attack_SC_UpdateGroupCD_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_attack_2eproto() {
  protobuf_AddDesc_attack_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "attack.proto");
  GOOGLE_CHECK(file != NULL);
  Attack_SC_UpdateXP_descriptor_ = file->message_type(0);
  static const int Attack_SC_UpdateXP_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_UpdateXP, xpenergy_),
  };
  Attack_SC_UpdateXP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Attack_SC_UpdateXP_descriptor_,
      Attack_SC_UpdateXP::default_instance_,
      Attack_SC_UpdateXP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_UpdateXP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_UpdateXP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Attack_SC_UpdateXP));
  Attack_CS_PlayerExcuteSkill_descriptor_ = file->message_type(1);
  static const int Attack_CS_PlayerExcuteSkill_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_CS_PlayerExcuteSkill, playerskillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_CS_PlayerExcuteSkill, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_CS_PlayerExcuteSkill, dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_CS_PlayerExcuteSkill, pt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_CS_PlayerExcuteSkill, targetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_CS_PlayerExcuteSkill, objtype_),
  };
  Attack_CS_PlayerExcuteSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Attack_CS_PlayerExcuteSkill_descriptor_,
      Attack_CS_PlayerExcuteSkill::default_instance_,
      Attack_CS_PlayerExcuteSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_CS_PlayerExcuteSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_CS_PlayerExcuteSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Attack_CS_PlayerExcuteSkill));
  Attack_CS_RequestHurt_descriptor_ = file->message_type(2);
  static const int Attack_CS_RequestHurt_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_CS_RequestHurt, playerskillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_CS_RequestHurt, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_CS_RequestHurt, listdesid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_CS_RequestHurt, objtype_),
  };
  Attack_CS_RequestHurt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Attack_CS_RequestHurt_descriptor_,
      Attack_CS_RequestHurt::default_instance_,
      Attack_CS_RequestHurt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_CS_RequestHurt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_CS_RequestHurt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Attack_CS_RequestHurt));
  Attack_CS_AttackSprint_descriptor_ = file->message_type(3);
  static const int Attack_CS_AttackSprint_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_CS_AttackSprint, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_CS_AttackSprint, pt_),
  };
  Attack_CS_AttackSprint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Attack_CS_AttackSprint_descriptor_,
      Attack_CS_AttackSprint::default_instance_,
      Attack_CS_AttackSprint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_CS_AttackSprint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_CS_AttackSprint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Attack_CS_AttackSprint));
  Attack_SC_ExcuteSkillSelf_descriptor_ = file->message_type(4);
  static const int Attack_SC_ExcuteSkillSelf_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_ExcuteSkillSelf, playerskillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_ExcuteSkillSelf, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_ExcuteSkillSelf, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_ExcuteSkillSelf, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_ExcuteSkillSelf, dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_ExcuteSkillSelf, pt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_ExcuteSkillSelf, targetid_),
  };
  Attack_SC_ExcuteSkillSelf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Attack_SC_ExcuteSkillSelf_descriptor_,
      Attack_SC_ExcuteSkillSelf::default_instance_,
      Attack_SC_ExcuteSkillSelf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_ExcuteSkillSelf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_ExcuteSkillSelf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Attack_SC_ExcuteSkillSelf));
  Attack_SC_ExcuteSkillOther_descriptor_ = file->message_type(5);
  static const int Attack_SC_ExcuteSkillOther_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_ExcuteSkillOther, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_ExcuteSkillOther, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_ExcuteSkillOther, dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_ExcuteSkillOther, pt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_ExcuteSkillOther, targetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_ExcuteSkillOther, objtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_ExcuteSkillOther, camp_),
  };
  Attack_SC_ExcuteSkillOther_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Attack_SC_ExcuteSkillOther_descriptor_,
      Attack_SC_ExcuteSkillOther::default_instance_,
      Attack_SC_ExcuteSkillOther_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_ExcuteSkillOther, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_ExcuteSkillOther, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Attack_SC_ExcuteSkillOther));
  Attack_SC_UpdateHurtData_descriptor_ = file->message_type(6);
  static const int Attack_SC_UpdateHurtData_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_UpdateHurtData, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_UpdateHurtData, nhurt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_UpdateHurtData, ncurhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_UpdateHurtData, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_UpdateHurtData, nmaxhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_UpdateHurtData, nhurttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_UpdateHurtData, attacker_),
  };
  Attack_SC_UpdateHurtData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Attack_SC_UpdateHurtData_descriptor_,
      Attack_SC_UpdateHurtData::default_instance_,
      Attack_SC_UpdateHurtData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_UpdateHurtData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_UpdateHurtData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Attack_SC_UpdateHurtData));
  Attack_SC_AttackBack_descriptor_ = file->message_type(7);
  static const int Attack_SC_AttackBack_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_AttackBack, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_AttackBack, attcharid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_AttackBack, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_AttackBack, pt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_AttackBack, dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_AttackBack, ntime_),
  };
  Attack_SC_AttackBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Attack_SC_AttackBack_descriptor_,
      Attack_SC_AttackBack::default_instance_,
      Attack_SC_AttackBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_AttackBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_AttackBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Attack_SC_AttackBack));
  Attack_SC_AddBuffer_descriptor_ = file->message_type(8);
  static const int Attack_SC_AddBuffer_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_AddBuffer, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_AddBuffer, bufferid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_AddBuffer, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_AddBuffer, lasttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_AddBuffer, isdisplayinproto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_AddBuffer, property_),
  };
  Attack_SC_AddBuffer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Attack_SC_AddBuffer_descriptor_,
      Attack_SC_AddBuffer::default_instance_,
      Attack_SC_AddBuffer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_AddBuffer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_AddBuffer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Attack_SC_AddBuffer));
  Attack_SC_DelBuffer_descriptor_ = file->message_type(9);
  static const int Attack_SC_DelBuffer_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_DelBuffer, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_DelBuffer, bufferid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_DelBuffer, status_),
  };
  Attack_SC_DelBuffer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Attack_SC_DelBuffer_descriptor_,
      Attack_SC_DelBuffer::default_instance_,
      Attack_SC_DelBuffer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_DelBuffer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_DelBuffer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Attack_SC_DelBuffer));
  Attack_SC_UpdateBuffer_descriptor_ = file->message_type(10);
  static const int Attack_SC_UpdateBuffer_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_UpdateBuffer, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_UpdateBuffer, bufferid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_UpdateBuffer, lasttime_),
  };
  Attack_SC_UpdateBuffer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Attack_SC_UpdateBuffer_descriptor_,
      Attack_SC_UpdateBuffer::default_instance_,
      Attack_SC_UpdateBuffer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_UpdateBuffer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_UpdateBuffer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Attack_SC_UpdateBuffer));
  Attack_SC_AttackDie_descriptor_ = file->message_type(11);
  static const int Attack_SC_AttackDie_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_AttackDie, charid_),
  };
  Attack_SC_AttackDie_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Attack_SC_AttackDie_descriptor_,
      Attack_SC_AttackDie::default_instance_,
      Attack_SC_AttackDie_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_AttackDie, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_AttackDie, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Attack_SC_AttackDie));
  Attack_CS_BlockSkillStart_descriptor_ = file->message_type(12);
  static const int Attack_CS_BlockSkillStart_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_CS_BlockSkillStart, dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_CS_BlockSkillStart, pt_),
  };
  Attack_CS_BlockSkillStart_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Attack_CS_BlockSkillStart_descriptor_,
      Attack_CS_BlockSkillStart::default_instance_,
      Attack_CS_BlockSkillStart_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_CS_BlockSkillStart, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_CS_BlockSkillStart, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Attack_CS_BlockSkillStart));
  Attack_CS_BlockSkillEnd_descriptor_ = file->message_type(13);
  static const int Attack_CS_BlockSkillEnd_offsets_[1] = {
  };
  Attack_CS_BlockSkillEnd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Attack_CS_BlockSkillEnd_descriptor_,
      Attack_CS_BlockSkillEnd::default_instance_,
      Attack_CS_BlockSkillEnd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_CS_BlockSkillEnd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_CS_BlockSkillEnd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Attack_CS_BlockSkillEnd));
  Attack_SC_BlockSkillStart_descriptor_ = file->message_type(14);
  static const int Attack_SC_BlockSkillStart_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_BlockSkillStart, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_BlockSkillStart, dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_BlockSkillStart, pt_),
  };
  Attack_SC_BlockSkillStart_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Attack_SC_BlockSkillStart_descriptor_,
      Attack_SC_BlockSkillStart::default_instance_,
      Attack_SC_BlockSkillStart_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_BlockSkillStart, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_BlockSkillStart, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Attack_SC_BlockSkillStart));
  Attack_SC_BlockSkillEnd_descriptor_ = file->message_type(15);
  static const int Attack_SC_BlockSkillEnd_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_BlockSkillEnd, charid_),
  };
  Attack_SC_BlockSkillEnd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Attack_SC_BlockSkillEnd_descriptor_,
      Attack_SC_BlockSkillEnd::default_instance_,
      Attack_SC_BlockSkillEnd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_BlockSkillEnd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_BlockSkillEnd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Attack_SC_BlockSkillEnd));
  Attack_SC_UpdateAttacking_descriptor_ = file->message_type(16);
  static const int Attack_SC_UpdateAttacking_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_UpdateAttacking, attacking_),
  };
  Attack_SC_UpdateAttacking_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Attack_SC_UpdateAttacking_descriptor_,
      Attack_SC_UpdateAttacking::default_instance_,
      Attack_SC_UpdateAttacking_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_UpdateAttacking, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_UpdateAttacking, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Attack_SC_UpdateAttacking));
  Attack_SC_UpdateTP_descriptor_ = file->message_type(17);
  static const int Attack_SC_UpdateTP_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_UpdateTP, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_UpdateTP, total_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_UpdateTP, cur_num_),
  };
  Attack_SC_UpdateTP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Attack_SC_UpdateTP_descriptor_,
      Attack_SC_UpdateTP::default_instance_,
      Attack_SC_UpdateTP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_UpdateTP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_UpdateTP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Attack_SC_UpdateTP));
  Attack_SC_Strike_descriptor_ = file->message_type(18);
  static const int Attack_SC_Strike_offsets_[1] = {
  };
  Attack_SC_Strike_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Attack_SC_Strike_descriptor_,
      Attack_SC_Strike::default_instance_,
      Attack_SC_Strike_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_Strike, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_Strike, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Attack_SC_Strike));
  Attack_SC_Die_descriptor_ = file->message_type(19);
  static const int Attack_SC_Die_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_Die, charid_),
  };
  Attack_SC_Die_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Attack_SC_Die_descriptor_,
      Attack_SC_Die::default_instance_,
      Attack_SC_Die_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_Die, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_Die, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Attack_SC_Die));
  Attack_SC_Shout_descriptor_ = file->message_type(20);
  static const int Attack_SC_Shout_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_Shout, nid_),
  };
  Attack_SC_Shout_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Attack_SC_Shout_descriptor_,
      Attack_SC_Shout::default_instance_,
      Attack_SC_Shout_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_Shout, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_Shout, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Attack_SC_Shout));
  Attack_CS_Relive_descriptor_ = file->message_type(21);
  static const int Attack_CS_Relive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_CS_Relive, type_),
  };
  Attack_CS_Relive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Attack_CS_Relive_descriptor_,
      Attack_CS_Relive::default_instance_,
      Attack_CS_Relive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_CS_Relive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_CS_Relive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Attack_CS_Relive));
  Attack_SC_Relive_descriptor_ = file->message_type(22);
  static const int Attack_SC_Relive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_Relive, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_Relive, relive_times_),
  };
  Attack_SC_Relive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Attack_SC_Relive_descriptor_,
      Attack_SC_Relive::default_instance_,
      Attack_SC_Relive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_Relive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_Relive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Attack_SC_Relive));
  Attack_SC_ClearSkillCD_descriptor_ = file->message_type(23);
  static const int Attack_SC_ClearSkillCD_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_ClearSkillCD, skillid_),
  };
  Attack_SC_ClearSkillCD_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Attack_SC_ClearSkillCD_descriptor_,
      Attack_SC_ClearSkillCD::default_instance_,
      Attack_SC_ClearSkillCD_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_ClearSkillCD, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_ClearSkillCD, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Attack_SC_ClearSkillCD));
  Attack_SC_UpdateAttackStatus_descriptor_ = file->message_type(24);
  static const int Attack_SC_UpdateAttackStatus_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_UpdateAttackStatus, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_UpdateAttackStatus, id_),
  };
  Attack_SC_UpdateAttackStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Attack_SC_UpdateAttackStatus_descriptor_,
      Attack_SC_UpdateAttackStatus::default_instance_,
      Attack_SC_UpdateAttackStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_UpdateAttackStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_UpdateAttackStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Attack_SC_UpdateAttackStatus));
  Attack_SC_UpdateMonsterAttackStatus_descriptor_ = file->message_type(25);
  static const int Attack_SC_UpdateMonsterAttackStatus_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_UpdateMonsterAttackStatus, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_UpdateMonsterAttackStatus, status_),
  };
  Attack_SC_UpdateMonsterAttackStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Attack_SC_UpdateMonsterAttackStatus_descriptor_,
      Attack_SC_UpdateMonsterAttackStatus::default_instance_,
      Attack_SC_UpdateMonsterAttackStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_UpdateMonsterAttackStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_UpdateMonsterAttackStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Attack_SC_UpdateMonsterAttackStatus));
  Attack_SC_Block_descriptor_ = file->message_type(26);
  static const int Attack_SC_Block_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_Block, charid_),
  };
  Attack_SC_Block_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Attack_SC_Block_descriptor_,
      Attack_SC_Block::default_instance_,
      Attack_SC_Block_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_Block, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_Block, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Attack_SC_Block));
  Attack_SC_UpdateFlagCamp_descriptor_ = file->message_type(27);
  static const int Attack_SC_UpdateFlagCamp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_UpdateFlagCamp, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_UpdateFlagCamp, flag_camp_),
  };
  Attack_SC_UpdateFlagCamp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Attack_SC_UpdateFlagCamp_descriptor_,
      Attack_SC_UpdateFlagCamp::default_instance_,
      Attack_SC_UpdateFlagCamp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_UpdateFlagCamp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_UpdateFlagCamp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Attack_SC_UpdateFlagCamp));
  Attack_SC_RelivePos_descriptor_ = file->message_type(28);
  static const int Attack_SC_RelivePos_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_RelivePos, plyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_RelivePos, curhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_RelivePos, maxhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_RelivePos, pt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_RelivePos, dir_),
  };
  Attack_SC_RelivePos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Attack_SC_RelivePos_descriptor_,
      Attack_SC_RelivePos::default_instance_,
      Attack_SC_RelivePos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_RelivePos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_RelivePos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Attack_SC_RelivePos));
  Attack_SC_UpdateGroupCD_descriptor_ = file->message_type(29);
  static const int Attack_SC_UpdateGroupCD_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_UpdateGroupCD, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_UpdateGroupCD, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_UpdateGroupCD, endtick_),
  };
  Attack_SC_UpdateGroupCD_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Attack_SC_UpdateGroupCD_descriptor_,
      Attack_SC_UpdateGroupCD::default_instance_,
      Attack_SC_UpdateGroupCD_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_UpdateGroupCD, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attack_SC_UpdateGroupCD, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Attack_SC_UpdateGroupCD));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_attack_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Attack_SC_UpdateXP_descriptor_, &Attack_SC_UpdateXP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Attack_CS_PlayerExcuteSkill_descriptor_, &Attack_CS_PlayerExcuteSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Attack_CS_RequestHurt_descriptor_, &Attack_CS_RequestHurt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Attack_CS_AttackSprint_descriptor_, &Attack_CS_AttackSprint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Attack_SC_ExcuteSkillSelf_descriptor_, &Attack_SC_ExcuteSkillSelf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Attack_SC_ExcuteSkillOther_descriptor_, &Attack_SC_ExcuteSkillOther::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Attack_SC_UpdateHurtData_descriptor_, &Attack_SC_UpdateHurtData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Attack_SC_AttackBack_descriptor_, &Attack_SC_AttackBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Attack_SC_AddBuffer_descriptor_, &Attack_SC_AddBuffer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Attack_SC_DelBuffer_descriptor_, &Attack_SC_DelBuffer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Attack_SC_UpdateBuffer_descriptor_, &Attack_SC_UpdateBuffer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Attack_SC_AttackDie_descriptor_, &Attack_SC_AttackDie::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Attack_CS_BlockSkillStart_descriptor_, &Attack_CS_BlockSkillStart::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Attack_CS_BlockSkillEnd_descriptor_, &Attack_CS_BlockSkillEnd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Attack_SC_BlockSkillStart_descriptor_, &Attack_SC_BlockSkillStart::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Attack_SC_BlockSkillEnd_descriptor_, &Attack_SC_BlockSkillEnd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Attack_SC_UpdateAttacking_descriptor_, &Attack_SC_UpdateAttacking::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Attack_SC_UpdateTP_descriptor_, &Attack_SC_UpdateTP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Attack_SC_Strike_descriptor_, &Attack_SC_Strike::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Attack_SC_Die_descriptor_, &Attack_SC_Die::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Attack_SC_Shout_descriptor_, &Attack_SC_Shout::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Attack_CS_Relive_descriptor_, &Attack_CS_Relive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Attack_SC_Relive_descriptor_, &Attack_SC_Relive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Attack_SC_ClearSkillCD_descriptor_, &Attack_SC_ClearSkillCD::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Attack_SC_UpdateAttackStatus_descriptor_, &Attack_SC_UpdateAttackStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Attack_SC_UpdateMonsterAttackStatus_descriptor_, &Attack_SC_UpdateMonsterAttackStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Attack_SC_Block_descriptor_, &Attack_SC_Block::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Attack_SC_UpdateFlagCamp_descriptor_, &Attack_SC_UpdateFlagCamp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Attack_SC_RelivePos_descriptor_, &Attack_SC_RelivePos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Attack_SC_UpdateGroupCD_descriptor_, &Attack_SC_UpdateGroupCD::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_attack_2eproto() {
  delete Attack_SC_UpdateXP::default_instance_;
  delete Attack_SC_UpdateXP_reflection_;
  delete Attack_CS_PlayerExcuteSkill::default_instance_;
  delete Attack_CS_PlayerExcuteSkill_reflection_;
  delete Attack_CS_RequestHurt::default_instance_;
  delete Attack_CS_RequestHurt_reflection_;
  delete Attack_CS_AttackSprint::default_instance_;
  delete Attack_CS_AttackSprint_reflection_;
  delete Attack_SC_ExcuteSkillSelf::default_instance_;
  delete Attack_SC_ExcuteSkillSelf_reflection_;
  delete Attack_SC_ExcuteSkillOther::default_instance_;
  delete Attack_SC_ExcuteSkillOther_reflection_;
  delete Attack_SC_UpdateHurtData::default_instance_;
  delete Attack_SC_UpdateHurtData_reflection_;
  delete Attack_SC_AttackBack::default_instance_;
  delete Attack_SC_AttackBack_reflection_;
  delete Attack_SC_AddBuffer::default_instance_;
  delete Attack_SC_AddBuffer_reflection_;
  delete Attack_SC_DelBuffer::default_instance_;
  delete Attack_SC_DelBuffer_reflection_;
  delete Attack_SC_UpdateBuffer::default_instance_;
  delete Attack_SC_UpdateBuffer_reflection_;
  delete Attack_SC_AttackDie::default_instance_;
  delete Attack_SC_AttackDie_reflection_;
  delete Attack_CS_BlockSkillStart::default_instance_;
  delete Attack_CS_BlockSkillStart_reflection_;
  delete Attack_CS_BlockSkillEnd::default_instance_;
  delete Attack_CS_BlockSkillEnd_reflection_;
  delete Attack_SC_BlockSkillStart::default_instance_;
  delete Attack_SC_BlockSkillStart_reflection_;
  delete Attack_SC_BlockSkillEnd::default_instance_;
  delete Attack_SC_BlockSkillEnd_reflection_;
  delete Attack_SC_UpdateAttacking::default_instance_;
  delete Attack_SC_UpdateAttacking_reflection_;
  delete Attack_SC_UpdateTP::default_instance_;
  delete Attack_SC_UpdateTP_reflection_;
  delete Attack_SC_Strike::default_instance_;
  delete Attack_SC_Strike_reflection_;
  delete Attack_SC_Die::default_instance_;
  delete Attack_SC_Die_reflection_;
  delete Attack_SC_Shout::default_instance_;
  delete Attack_SC_Shout_reflection_;
  delete Attack_CS_Relive::default_instance_;
  delete Attack_CS_Relive_reflection_;
  delete Attack_SC_Relive::default_instance_;
  delete Attack_SC_Relive_reflection_;
  delete Attack_SC_ClearSkillCD::default_instance_;
  delete Attack_SC_ClearSkillCD_reflection_;
  delete Attack_SC_UpdateAttackStatus::default_instance_;
  delete Attack_SC_UpdateAttackStatus_reflection_;
  delete Attack_SC_UpdateMonsterAttackStatus::default_instance_;
  delete Attack_SC_UpdateMonsterAttackStatus_reflection_;
  delete Attack_SC_Block::default_instance_;
  delete Attack_SC_Block_reflection_;
  delete Attack_SC_UpdateFlagCamp::default_instance_;
  delete Attack_SC_UpdateFlagCamp_reflection_;
  delete Attack_SC_RelivePos::default_instance_;
  delete Attack_SC_RelivePos_reflection_;
  delete Attack_SC_UpdateGroupCD::default_instance_;
  delete Attack_SC_UpdateGroupCD_reflection_;
}

void protobuf_AddDesc_attack_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::proto::message::protobuf_AddDesc_common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014attack.proto\022\rproto.message\032\014common.pr"
    "oto\"&\n\022Attack_SC_UpdateXP\022\020\n\010xpenergy\030\001 "
    "\001(\r\"\231\001\n\033Attack_CS_PlayerExcuteSkill\022\025\n\rP"
    "layerSkillId\030\001 \002(\005\022\017\n\007SkillId\030\002 \001(\r\022\013\n\003D"
    "ir\030\003 \001(\002\022\"\n\002pt\030\004 \001(\0132\026.proto.message.Poi"
    "nt3D\022\020\n\010targetID\030\005 \001(\r\022\017\n\007objType\030\006 \001(\005\""
    "c\n\025Attack_CS_RequestHurt\022\025\n\rPlayerSkillI"
    "d\030\001 \002(\005\022\017\n\007SkillId\030\002 \001(\r\022\021\n\tListDesId\030\003 "
    "\003(\r\022\017\n\007objType\030\004 \001(\005\"M\n\026Attack_CS_Attack"
    "Sprint\022\017\n\007SkillId\030\002 \001(\r\022\"\n\002pt\030\003 \001(\0132\026.pr"
    "oto.message.Point3D\"\245\001\n\031Attack_SC_Excute"
    "SkillSelf\022\025\n\rPlayerSkillId\030\001 \002(\005\022\017\n\007Skil"
    "lId\030\002 \002(\005\022\r\n\005error\030\003 \002(\005\022\016\n\006charId\030\004 \001(\r"
    "\022\013\n\003Dir\030\005 \001(\002\022\"\n\002pt\030\006 \001(\0132\026.proto.messag"
    "e.Point3D\022\020\n\010targetID\030\007 \001(\r\"\237\001\n\032Attack_S"
    "C_ExcuteSkillOther\022\016\n\006CharId\030\001 \002(\r\022\017\n\007Sk"
    "illId\030\002 \002(\005\022\013\n\003dir\030\003 \001(\002\022\"\n\002pt\030\004 \001(\0132\026.p"
    "roto.message.Point3D\022\020\n\010targetID\030\005 \001(\r\022\017"
    "\n\007objType\030\006 \001(\005\022\014\n\004camp\030\007 \001(\005\"\217\001\n\030Attack"
    "_SC_UpdateHurtData\022\016\n\006CharId\030\001 \002(\r\022\r\n\005nH"
    "urt\030\002 \002(\005\022\016\n\006nCurHP\030\003 \001(\005\022\017\n\007SkillId\030\004 \001"
    "(\005\022\016\n\006nMaxHP\030\005 \001(\005\022\021\n\tnHurtType\030\006 \001(\005\022\020\n"
    "\010attacker\030\007 \001(\004\"\212\001\n\024Attack_SC_AttackBack"
    "\022\016\n\006CharId\030\001 \002(\r\022\021\n\tAttCharId\030\002 \001(\r\022\017\n\007S"
    "killId\030\003 \001(\r\022\"\n\002pt\030\004 \001(\0132\026.proto.message"
    ".Point3D\022\013\n\003Dir\030\005 \001(\002\022\r\n\005nTime\030\006 \001(\005\"\205\001\n"
    "\023Attack_SC_AddBuffer\022\016\n\006CharId\030\001 \002(\r\022\020\n\010"
    "BufferId\030\002 \001(\r\022\016\n\006Status\030\003 \001(\004\022\020\n\010LastTi"
    "me\030\004 \001(\005\022\030\n\020isDisPlayInProto\030\005 \001(\005\022\020\n\010pr"
    "operty\030\006 \001(\005\"G\n\023Attack_SC_DelBuffer\022\016\n\006C"
    "harId\030\001 \002(\r\022\020\n\010BufferId\030\002 \001(\r\022\016\n\006Status\030"
    "\003 \001(\004\"L\n\026Attack_SC_UpdateBuffer\022\016\n\006CharI"
    "d\030\001 \002(\r\022\020\n\010BufferId\030\002 \001(\r\022\020\n\010LastTime\030\003 "
    "\001(\005\"%\n\023Attack_SC_AttackDie\022\016\n\006CharId\030\001 \002"
    "(\r\"L\n\031Attack_CS_BlockSkillStart\022\013\n\003dir\030\001"
    " \002(\002\022\"\n\002pt\030\002 \001(\0132\026.proto.message.Point3D"
    "\"\031\n\027Attack_CS_BlockSkillEnd\"\\\n\031Attack_SC"
    "_BlockSkillStart\022\016\n\006CharId\030\001 \002(\r\022\013\n\003dir\030"
    "\002 \001(\002\022\"\n\002pt\030\003 \001(\0132\026.proto.message.Point3"
    "D\")\n\027Attack_SC_BlockSkillEnd\022\016\n\006CharId\030\001"
    " \002(\r\".\n\031Attack_SC_UpdateAttacking\022\021\n\tatt"
    "acking\030\001 \002(\010\"H\n\022Attack_SC_UpdateTP\022\016\n\006ch"
    "arid\030\001 \001(\005\022\021\n\ttotal_num\030\002 \001(\005\022\017\n\007cur_num"
    "\030\003 \001(\005\"\022\n\020Attack_SC_Strike\"\037\n\rAttack_SC_"
    "Die\022\016\n\006charid\030\001 \001(\005\"\036\n\017Attack_SC_Shout\022\013"
    "\n\003nID\030\001 \001(\005\" \n\020Attack_CS_Relive\022\014\n\004type\030"
    "\001 \002(\r\"8\n\020Attack_SC_Relive\022\016\n\006result\030\001 \001("
    "\005\022\024\n\014relive_times\030\002 \001(\005\")\n\026Attack_SC_Cle"
    "arSkillCD\022\017\n\007SkillId\030\001 \002(\r\":\n\034Attack_SC_"
    "UpdateAttackStatus\022\016\n\006Status\030\001 \002(\004\022\n\n\002ID"
    "\030\002 \001(\r\"E\n#Attack_SC_UpdateMonsterAttackS"
    "tatus\022\016\n\006charid\030\001 \002(\r\022\016\n\006status\030\002 \001(\010\"!\n"
    "\017Attack_SC_Block\022\016\n\006charid\030\001 \002(\r\"=\n\030Atta"
    "ck_SC_UpdateFlagCamp\022\016\n\006charid\030\001 \001(\005\022\021\n\t"
    "flag_camp\030\002 \001(\005\"s\n\023Attack_SC_RelivePos\022\r"
    "\n\005PlyId\030\001 \002(\r\022\r\n\005CurHP\030\002 \001(\005\022\r\n\005MaxHP\030\003 "
    "\001(\r\022\"\n\002Pt\030\004 \001(\0132\026.proto.message.Point3D\022"
    "\013\n\003Dir\030\005 \001(\002\"L\n\027Attack_SC_UpdateGroupCD\022"
    "\017\n\007skillid\030\001 \001(\005\022\017\n\007groupid\030\002 \001(\005\022\017\n\007end"
    "tick\030\003 \001(\003B\017\n\rproto.message", 2387);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "attack.proto", &protobuf_RegisterTypes);
  Attack_SC_UpdateXP::default_instance_ = new Attack_SC_UpdateXP();
  Attack_CS_PlayerExcuteSkill::default_instance_ = new Attack_CS_PlayerExcuteSkill();
  Attack_CS_RequestHurt::default_instance_ = new Attack_CS_RequestHurt();
  Attack_CS_AttackSprint::default_instance_ = new Attack_CS_AttackSprint();
  Attack_SC_ExcuteSkillSelf::default_instance_ = new Attack_SC_ExcuteSkillSelf();
  Attack_SC_ExcuteSkillOther::default_instance_ = new Attack_SC_ExcuteSkillOther();
  Attack_SC_UpdateHurtData::default_instance_ = new Attack_SC_UpdateHurtData();
  Attack_SC_AttackBack::default_instance_ = new Attack_SC_AttackBack();
  Attack_SC_AddBuffer::default_instance_ = new Attack_SC_AddBuffer();
  Attack_SC_DelBuffer::default_instance_ = new Attack_SC_DelBuffer();
  Attack_SC_UpdateBuffer::default_instance_ = new Attack_SC_UpdateBuffer();
  Attack_SC_AttackDie::default_instance_ = new Attack_SC_AttackDie();
  Attack_CS_BlockSkillStart::default_instance_ = new Attack_CS_BlockSkillStart();
  Attack_CS_BlockSkillEnd::default_instance_ = new Attack_CS_BlockSkillEnd();
  Attack_SC_BlockSkillStart::default_instance_ = new Attack_SC_BlockSkillStart();
  Attack_SC_BlockSkillEnd::default_instance_ = new Attack_SC_BlockSkillEnd();
  Attack_SC_UpdateAttacking::default_instance_ = new Attack_SC_UpdateAttacking();
  Attack_SC_UpdateTP::default_instance_ = new Attack_SC_UpdateTP();
  Attack_SC_Strike::default_instance_ = new Attack_SC_Strike();
  Attack_SC_Die::default_instance_ = new Attack_SC_Die();
  Attack_SC_Shout::default_instance_ = new Attack_SC_Shout();
  Attack_CS_Relive::default_instance_ = new Attack_CS_Relive();
  Attack_SC_Relive::default_instance_ = new Attack_SC_Relive();
  Attack_SC_ClearSkillCD::default_instance_ = new Attack_SC_ClearSkillCD();
  Attack_SC_UpdateAttackStatus::default_instance_ = new Attack_SC_UpdateAttackStatus();
  Attack_SC_UpdateMonsterAttackStatus::default_instance_ = new Attack_SC_UpdateMonsterAttackStatus();
  Attack_SC_Block::default_instance_ = new Attack_SC_Block();
  Attack_SC_UpdateFlagCamp::default_instance_ = new Attack_SC_UpdateFlagCamp();
  Attack_SC_RelivePos::default_instance_ = new Attack_SC_RelivePos();
  Attack_SC_UpdateGroupCD::default_instance_ = new Attack_SC_UpdateGroupCD();
  Attack_SC_UpdateXP::default_instance_->InitAsDefaultInstance();
  Attack_CS_PlayerExcuteSkill::default_instance_->InitAsDefaultInstance();
  Attack_CS_RequestHurt::default_instance_->InitAsDefaultInstance();
  Attack_CS_AttackSprint::default_instance_->InitAsDefaultInstance();
  Attack_SC_ExcuteSkillSelf::default_instance_->InitAsDefaultInstance();
  Attack_SC_ExcuteSkillOther::default_instance_->InitAsDefaultInstance();
  Attack_SC_UpdateHurtData::default_instance_->InitAsDefaultInstance();
  Attack_SC_AttackBack::default_instance_->InitAsDefaultInstance();
  Attack_SC_AddBuffer::default_instance_->InitAsDefaultInstance();
  Attack_SC_DelBuffer::default_instance_->InitAsDefaultInstance();
  Attack_SC_UpdateBuffer::default_instance_->InitAsDefaultInstance();
  Attack_SC_AttackDie::default_instance_->InitAsDefaultInstance();
  Attack_CS_BlockSkillStart::default_instance_->InitAsDefaultInstance();
  Attack_CS_BlockSkillEnd::default_instance_->InitAsDefaultInstance();
  Attack_SC_BlockSkillStart::default_instance_->InitAsDefaultInstance();
  Attack_SC_BlockSkillEnd::default_instance_->InitAsDefaultInstance();
  Attack_SC_UpdateAttacking::default_instance_->InitAsDefaultInstance();
  Attack_SC_UpdateTP::default_instance_->InitAsDefaultInstance();
  Attack_SC_Strike::default_instance_->InitAsDefaultInstance();
  Attack_SC_Die::default_instance_->InitAsDefaultInstance();
  Attack_SC_Shout::default_instance_->InitAsDefaultInstance();
  Attack_CS_Relive::default_instance_->InitAsDefaultInstance();
  Attack_SC_Relive::default_instance_->InitAsDefaultInstance();
  Attack_SC_ClearSkillCD::default_instance_->InitAsDefaultInstance();
  Attack_SC_UpdateAttackStatus::default_instance_->InitAsDefaultInstance();
  Attack_SC_UpdateMonsterAttackStatus::default_instance_->InitAsDefaultInstance();
  Attack_SC_Block::default_instance_->InitAsDefaultInstance();
  Attack_SC_UpdateFlagCamp::default_instance_->InitAsDefaultInstance();
  Attack_SC_RelivePos::default_instance_->InitAsDefaultInstance();
  Attack_SC_UpdateGroupCD::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_attack_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_attack_2eproto {
  StaticDescriptorInitializer_attack_2eproto() {
    protobuf_AddDesc_attack_2eproto();
  }
} static_descriptor_initializer_attack_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Attack_SC_UpdateXP::kXpenergyFieldNumber;
#endif  // !_MSC_VER

Attack_SC_UpdateXP::Attack_SC_UpdateXP()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Attack_SC_UpdateXP::InitAsDefaultInstance() {
}

Attack_SC_UpdateXP::Attack_SC_UpdateXP(const Attack_SC_UpdateXP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Attack_SC_UpdateXP::SharedCtor() {
  _cached_size_ = 0;
  xpenergy_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Attack_SC_UpdateXP::~Attack_SC_UpdateXP() {
  SharedDtor();
}

void Attack_SC_UpdateXP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Attack_SC_UpdateXP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Attack_SC_UpdateXP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Attack_SC_UpdateXP_descriptor_;
}

const Attack_SC_UpdateXP& Attack_SC_UpdateXP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_attack_2eproto();
  return *default_instance_;
}

Attack_SC_UpdateXP* Attack_SC_UpdateXP::default_instance_ = NULL;

Attack_SC_UpdateXP* Attack_SC_UpdateXP::New() const {
  return new Attack_SC_UpdateXP;
}

void Attack_SC_UpdateXP::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    xpenergy_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Attack_SC_UpdateXP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 xpenergy = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &xpenergy_)));
          set_has_xpenergy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Attack_SC_UpdateXP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 xpenergy = 1;
  if (has_xpenergy()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->xpenergy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Attack_SC_UpdateXP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 xpenergy = 1;
  if (has_xpenergy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->xpenergy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Attack_SC_UpdateXP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 xpenergy = 1;
    if (has_xpenergy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->xpenergy());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Attack_SC_UpdateXP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Attack_SC_UpdateXP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Attack_SC_UpdateXP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Attack_SC_UpdateXP::MergeFrom(const Attack_SC_UpdateXP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_xpenergy()) {
      set_xpenergy(from.xpenergy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Attack_SC_UpdateXP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Attack_SC_UpdateXP::CopyFrom(const Attack_SC_UpdateXP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Attack_SC_UpdateXP::IsInitialized() const {

  return true;
}

void Attack_SC_UpdateXP::Swap(Attack_SC_UpdateXP* other) {
  if (other != this) {
    std::swap(xpenergy_, other->xpenergy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Attack_SC_UpdateXP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Attack_SC_UpdateXP_descriptor_;
  metadata.reflection = Attack_SC_UpdateXP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Attack_CS_PlayerExcuteSkill::kPlayerSkillIdFieldNumber;
const int Attack_CS_PlayerExcuteSkill::kSkillIdFieldNumber;
const int Attack_CS_PlayerExcuteSkill::kDirFieldNumber;
const int Attack_CS_PlayerExcuteSkill::kPtFieldNumber;
const int Attack_CS_PlayerExcuteSkill::kTargetIDFieldNumber;
const int Attack_CS_PlayerExcuteSkill::kObjTypeFieldNumber;
#endif  // !_MSC_VER

Attack_CS_PlayerExcuteSkill::Attack_CS_PlayerExcuteSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Attack_CS_PlayerExcuteSkill::InitAsDefaultInstance() {
  pt_ = const_cast< ::proto::message::Point3D*>(&::proto::message::Point3D::default_instance());
}

Attack_CS_PlayerExcuteSkill::Attack_CS_PlayerExcuteSkill(const Attack_CS_PlayerExcuteSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Attack_CS_PlayerExcuteSkill::SharedCtor() {
  _cached_size_ = 0;
  playerskillid_ = 0;
  skillid_ = 0u;
  dir_ = 0;
  pt_ = NULL;
  targetid_ = 0u;
  objtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Attack_CS_PlayerExcuteSkill::~Attack_CS_PlayerExcuteSkill() {
  SharedDtor();
}

void Attack_CS_PlayerExcuteSkill::SharedDtor() {
  if (this != default_instance_) {
    delete pt_;
  }
}

void Attack_CS_PlayerExcuteSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Attack_CS_PlayerExcuteSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Attack_CS_PlayerExcuteSkill_descriptor_;
}

const Attack_CS_PlayerExcuteSkill& Attack_CS_PlayerExcuteSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_attack_2eproto();
  return *default_instance_;
}

Attack_CS_PlayerExcuteSkill* Attack_CS_PlayerExcuteSkill::default_instance_ = NULL;

Attack_CS_PlayerExcuteSkill* Attack_CS_PlayerExcuteSkill::New() const {
  return new Attack_CS_PlayerExcuteSkill;
}

void Attack_CS_PlayerExcuteSkill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerskillid_ = 0;
    skillid_ = 0u;
    dir_ = 0;
    if (has_pt()) {
      if (pt_ != NULL) pt_->::proto::message::Point3D::Clear();
    }
    targetid_ = 0u;
    objtype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Attack_CS_PlayerExcuteSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 PlayerSkillId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerskillid_)));
          set_has_playerskillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_SkillId;
        break;
      }

      // optional uint32 SkillId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SkillId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_Dir;
        break;
      }

      // optional float Dir = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Dir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dir_)));
          set_has_dir();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_pt;
        break;
      }

      // optional .proto.message.Point3D pt = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_targetID;
        break;
      }

      // optional uint32 targetID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_targetID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &targetid_)));
          set_has_targetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_objType;
        break;
      }

      // optional int32 objType = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_objType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objtype_)));
          set_has_objtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Attack_CS_PlayerExcuteSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 PlayerSkillId = 1;
  if (has_playerskillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->playerskillid(), output);
  }

  // optional uint32 SkillId = 2;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->skillid(), output);
  }

  // optional float Dir = 3;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->dir(), output);
  }

  // optional .proto.message.Point3D pt = 4;
  if (has_pt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->pt(), output);
  }

  // optional uint32 targetID = 5;
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->targetid(), output);
  }

  // optional int32 objType = 6;
  if (has_objtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->objtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Attack_CS_PlayerExcuteSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 PlayerSkillId = 1;
  if (has_playerskillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->playerskillid(), target);
  }

  // optional uint32 SkillId = 2;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->skillid(), target);
  }

  // optional float Dir = 3;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->dir(), target);
  }

  // optional .proto.message.Point3D pt = 4;
  if (has_pt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->pt(), target);
  }

  // optional uint32 targetID = 5;
  if (has_targetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->targetid(), target);
  }

  // optional int32 objType = 6;
  if (has_objtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->objtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Attack_CS_PlayerExcuteSkill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 PlayerSkillId = 1;
    if (has_playerskillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerskillid());
    }

    // optional uint32 SkillId = 2;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillid());
    }

    // optional float Dir = 3;
    if (has_dir()) {
      total_size += 1 + 4;
    }

    // optional .proto.message.Point3D pt = 4;
    if (has_pt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pt());
    }

    // optional uint32 targetID = 5;
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->targetid());
    }

    // optional int32 objType = 6;
    if (has_objtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Attack_CS_PlayerExcuteSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Attack_CS_PlayerExcuteSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Attack_CS_PlayerExcuteSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Attack_CS_PlayerExcuteSkill::MergeFrom(const Attack_CS_PlayerExcuteSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerskillid()) {
      set_playerskillid(from.playerskillid());
    }
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_dir()) {
      set_dir(from.dir());
    }
    if (from.has_pt()) {
      mutable_pt()->::proto::message::Point3D::MergeFrom(from.pt());
    }
    if (from.has_targetid()) {
      set_targetid(from.targetid());
    }
    if (from.has_objtype()) {
      set_objtype(from.objtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Attack_CS_PlayerExcuteSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Attack_CS_PlayerExcuteSkill::CopyFrom(const Attack_CS_PlayerExcuteSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Attack_CS_PlayerExcuteSkill::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Attack_CS_PlayerExcuteSkill::Swap(Attack_CS_PlayerExcuteSkill* other) {
  if (other != this) {
    std::swap(playerskillid_, other->playerskillid_);
    std::swap(skillid_, other->skillid_);
    std::swap(dir_, other->dir_);
    std::swap(pt_, other->pt_);
    std::swap(targetid_, other->targetid_);
    std::swap(objtype_, other->objtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Attack_CS_PlayerExcuteSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Attack_CS_PlayerExcuteSkill_descriptor_;
  metadata.reflection = Attack_CS_PlayerExcuteSkill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Attack_CS_RequestHurt::kPlayerSkillIdFieldNumber;
const int Attack_CS_RequestHurt::kSkillIdFieldNumber;
const int Attack_CS_RequestHurt::kListDesIdFieldNumber;
const int Attack_CS_RequestHurt::kObjTypeFieldNumber;
#endif  // !_MSC_VER

Attack_CS_RequestHurt::Attack_CS_RequestHurt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Attack_CS_RequestHurt::InitAsDefaultInstance() {
}

Attack_CS_RequestHurt::Attack_CS_RequestHurt(const Attack_CS_RequestHurt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Attack_CS_RequestHurt::SharedCtor() {
  _cached_size_ = 0;
  playerskillid_ = 0;
  skillid_ = 0u;
  objtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Attack_CS_RequestHurt::~Attack_CS_RequestHurt() {
  SharedDtor();
}

void Attack_CS_RequestHurt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Attack_CS_RequestHurt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Attack_CS_RequestHurt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Attack_CS_RequestHurt_descriptor_;
}

const Attack_CS_RequestHurt& Attack_CS_RequestHurt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_attack_2eproto();
  return *default_instance_;
}

Attack_CS_RequestHurt* Attack_CS_RequestHurt::default_instance_ = NULL;

Attack_CS_RequestHurt* Attack_CS_RequestHurt::New() const {
  return new Attack_CS_RequestHurt;
}

void Attack_CS_RequestHurt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerskillid_ = 0;
    skillid_ = 0u;
    objtype_ = 0;
  }
  listdesid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Attack_CS_RequestHurt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 PlayerSkillId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerskillid_)));
          set_has_playerskillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_SkillId;
        break;
      }

      // optional uint32 SkillId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SkillId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ListDesId;
        break;
      }

      // repeated uint32 ListDesId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ListDesId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_listdesid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_listdesid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ListDesId;
        if (input->ExpectTag(32)) goto parse_objType;
        break;
      }

      // optional int32 objType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_objType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objtype_)));
          set_has_objtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Attack_CS_RequestHurt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 PlayerSkillId = 1;
  if (has_playerskillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->playerskillid(), output);
  }

  // optional uint32 SkillId = 2;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->skillid(), output);
  }

  // repeated uint32 ListDesId = 3;
  for (int i = 0; i < this->listdesid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->listdesid(i), output);
  }

  // optional int32 objType = 4;
  if (has_objtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->objtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Attack_CS_RequestHurt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 PlayerSkillId = 1;
  if (has_playerskillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->playerskillid(), target);
  }

  // optional uint32 SkillId = 2;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->skillid(), target);
  }

  // repeated uint32 ListDesId = 3;
  for (int i = 0; i < this->listdesid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->listdesid(i), target);
  }

  // optional int32 objType = 4;
  if (has_objtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->objtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Attack_CS_RequestHurt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 PlayerSkillId = 1;
    if (has_playerskillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerskillid());
    }

    // optional uint32 SkillId = 2;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillid());
    }

    // optional int32 objType = 4;
    if (has_objtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objtype());
    }

  }
  // repeated uint32 ListDesId = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->listdesid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->listdesid(i));
    }
    total_size += 1 * this->listdesid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Attack_CS_RequestHurt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Attack_CS_RequestHurt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Attack_CS_RequestHurt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Attack_CS_RequestHurt::MergeFrom(const Attack_CS_RequestHurt& from) {
  GOOGLE_CHECK_NE(&from, this);
  listdesid_.MergeFrom(from.listdesid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerskillid()) {
      set_playerskillid(from.playerskillid());
    }
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_objtype()) {
      set_objtype(from.objtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Attack_CS_RequestHurt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Attack_CS_RequestHurt::CopyFrom(const Attack_CS_RequestHurt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Attack_CS_RequestHurt::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Attack_CS_RequestHurt::Swap(Attack_CS_RequestHurt* other) {
  if (other != this) {
    std::swap(playerskillid_, other->playerskillid_);
    std::swap(skillid_, other->skillid_);
    listdesid_.Swap(&other->listdesid_);
    std::swap(objtype_, other->objtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Attack_CS_RequestHurt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Attack_CS_RequestHurt_descriptor_;
  metadata.reflection = Attack_CS_RequestHurt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Attack_CS_AttackSprint::kSkillIdFieldNumber;
const int Attack_CS_AttackSprint::kPtFieldNumber;
#endif  // !_MSC_VER

Attack_CS_AttackSprint::Attack_CS_AttackSprint()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Attack_CS_AttackSprint::InitAsDefaultInstance() {
  pt_ = const_cast< ::proto::message::Point3D*>(&::proto::message::Point3D::default_instance());
}

Attack_CS_AttackSprint::Attack_CS_AttackSprint(const Attack_CS_AttackSprint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Attack_CS_AttackSprint::SharedCtor() {
  _cached_size_ = 0;
  skillid_ = 0u;
  pt_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Attack_CS_AttackSprint::~Attack_CS_AttackSprint() {
  SharedDtor();
}

void Attack_CS_AttackSprint::SharedDtor() {
  if (this != default_instance_) {
    delete pt_;
  }
}

void Attack_CS_AttackSprint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Attack_CS_AttackSprint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Attack_CS_AttackSprint_descriptor_;
}

const Attack_CS_AttackSprint& Attack_CS_AttackSprint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_attack_2eproto();
  return *default_instance_;
}

Attack_CS_AttackSprint* Attack_CS_AttackSprint::default_instance_ = NULL;

Attack_CS_AttackSprint* Attack_CS_AttackSprint::New() const {
  return new Attack_CS_AttackSprint;
}

void Attack_CS_AttackSprint::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skillid_ = 0u;
    if (has_pt()) {
      if (pt_ != NULL) pt_->::proto::message::Point3D::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Attack_CS_AttackSprint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 SkillId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pt;
        break;
      }

      // optional .proto.message.Point3D pt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Attack_CS_AttackSprint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 SkillId = 2;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->skillid(), output);
  }

  // optional .proto.message.Point3D pt = 3;
  if (has_pt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Attack_CS_AttackSprint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 SkillId = 2;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->skillid(), target);
  }

  // optional .proto.message.Point3D pt = 3;
  if (has_pt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Attack_CS_AttackSprint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 SkillId = 2;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillid());
    }

    // optional .proto.message.Point3D pt = 3;
    if (has_pt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Attack_CS_AttackSprint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Attack_CS_AttackSprint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Attack_CS_AttackSprint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Attack_CS_AttackSprint::MergeFrom(const Attack_CS_AttackSprint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_pt()) {
      mutable_pt()->::proto::message::Point3D::MergeFrom(from.pt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Attack_CS_AttackSprint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Attack_CS_AttackSprint::CopyFrom(const Attack_CS_AttackSprint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Attack_CS_AttackSprint::IsInitialized() const {

  return true;
}

void Attack_CS_AttackSprint::Swap(Attack_CS_AttackSprint* other) {
  if (other != this) {
    std::swap(skillid_, other->skillid_);
    std::swap(pt_, other->pt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Attack_CS_AttackSprint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Attack_CS_AttackSprint_descriptor_;
  metadata.reflection = Attack_CS_AttackSprint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Attack_SC_ExcuteSkillSelf::kPlayerSkillIdFieldNumber;
const int Attack_SC_ExcuteSkillSelf::kSkillIdFieldNumber;
const int Attack_SC_ExcuteSkillSelf::kErrorFieldNumber;
const int Attack_SC_ExcuteSkillSelf::kCharIdFieldNumber;
const int Attack_SC_ExcuteSkillSelf::kDirFieldNumber;
const int Attack_SC_ExcuteSkillSelf::kPtFieldNumber;
const int Attack_SC_ExcuteSkillSelf::kTargetIDFieldNumber;
#endif  // !_MSC_VER

Attack_SC_ExcuteSkillSelf::Attack_SC_ExcuteSkillSelf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Attack_SC_ExcuteSkillSelf::InitAsDefaultInstance() {
  pt_ = const_cast< ::proto::message::Point3D*>(&::proto::message::Point3D::default_instance());
}

Attack_SC_ExcuteSkillSelf::Attack_SC_ExcuteSkillSelf(const Attack_SC_ExcuteSkillSelf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Attack_SC_ExcuteSkillSelf::SharedCtor() {
  _cached_size_ = 0;
  playerskillid_ = 0;
  skillid_ = 0;
  error_ = 0;
  charid_ = 0u;
  dir_ = 0;
  pt_ = NULL;
  targetid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Attack_SC_ExcuteSkillSelf::~Attack_SC_ExcuteSkillSelf() {
  SharedDtor();
}

void Attack_SC_ExcuteSkillSelf::SharedDtor() {
  if (this != default_instance_) {
    delete pt_;
  }
}

void Attack_SC_ExcuteSkillSelf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Attack_SC_ExcuteSkillSelf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Attack_SC_ExcuteSkillSelf_descriptor_;
}

const Attack_SC_ExcuteSkillSelf& Attack_SC_ExcuteSkillSelf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_attack_2eproto();
  return *default_instance_;
}

Attack_SC_ExcuteSkillSelf* Attack_SC_ExcuteSkillSelf::default_instance_ = NULL;

Attack_SC_ExcuteSkillSelf* Attack_SC_ExcuteSkillSelf::New() const {
  return new Attack_SC_ExcuteSkillSelf;
}

void Attack_SC_ExcuteSkillSelf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerskillid_ = 0;
    skillid_ = 0;
    error_ = 0;
    charid_ = 0u;
    dir_ = 0;
    if (has_pt()) {
      if (pt_ != NULL) pt_->::proto::message::Point3D::Clear();
    }
    targetid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Attack_SC_ExcuteSkillSelf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 PlayerSkillId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerskillid_)));
          set_has_playerskillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_SkillId;
        break;
      }

      // required int32 SkillId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SkillId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_error;
        break;
      }

      // required int32 error = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_)));
          set_has_error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_charId;
        break;
      }

      // optional uint32 charId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_Dir;
        break;
      }

      // optional float Dir = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Dir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dir_)));
          set_has_dir();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_pt;
        break;
      }

      // optional .proto.message.Point3D pt = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_targetID;
        break;
      }

      // optional uint32 targetID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_targetID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &targetid_)));
          set_has_targetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Attack_SC_ExcuteSkillSelf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 PlayerSkillId = 1;
  if (has_playerskillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->playerskillid(), output);
  }

  // required int32 SkillId = 2;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->skillid(), output);
  }

  // required int32 error = 3;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->error(), output);
  }

  // optional uint32 charId = 4;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->charid(), output);
  }

  // optional float Dir = 5;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->dir(), output);
  }

  // optional .proto.message.Point3D pt = 6;
  if (has_pt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->pt(), output);
  }

  // optional uint32 targetID = 7;
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->targetid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Attack_SC_ExcuteSkillSelf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 PlayerSkillId = 1;
  if (has_playerskillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->playerskillid(), target);
  }

  // required int32 SkillId = 2;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->skillid(), target);
  }

  // required int32 error = 3;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->error(), target);
  }

  // optional uint32 charId = 4;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->charid(), target);
  }

  // optional float Dir = 5;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->dir(), target);
  }

  // optional .proto.message.Point3D pt = 6;
  if (has_pt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->pt(), target);
  }

  // optional uint32 targetID = 7;
  if (has_targetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->targetid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Attack_SC_ExcuteSkillSelf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 PlayerSkillId = 1;
    if (has_playerskillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerskillid());
    }

    // required int32 SkillId = 2;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillid());
    }

    // required int32 error = 3;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error());
    }

    // optional uint32 charId = 4;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional float Dir = 5;
    if (has_dir()) {
      total_size += 1 + 4;
    }

    // optional .proto.message.Point3D pt = 6;
    if (has_pt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pt());
    }

    // optional uint32 targetID = 7;
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->targetid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Attack_SC_ExcuteSkillSelf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Attack_SC_ExcuteSkillSelf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Attack_SC_ExcuteSkillSelf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Attack_SC_ExcuteSkillSelf::MergeFrom(const Attack_SC_ExcuteSkillSelf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerskillid()) {
      set_playerskillid(from.playerskillid());
    }
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_error()) {
      set_error(from.error());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_dir()) {
      set_dir(from.dir());
    }
    if (from.has_pt()) {
      mutable_pt()->::proto::message::Point3D::MergeFrom(from.pt());
    }
    if (from.has_targetid()) {
      set_targetid(from.targetid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Attack_SC_ExcuteSkillSelf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Attack_SC_ExcuteSkillSelf::CopyFrom(const Attack_SC_ExcuteSkillSelf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Attack_SC_ExcuteSkillSelf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Attack_SC_ExcuteSkillSelf::Swap(Attack_SC_ExcuteSkillSelf* other) {
  if (other != this) {
    std::swap(playerskillid_, other->playerskillid_);
    std::swap(skillid_, other->skillid_);
    std::swap(error_, other->error_);
    std::swap(charid_, other->charid_);
    std::swap(dir_, other->dir_);
    std::swap(pt_, other->pt_);
    std::swap(targetid_, other->targetid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Attack_SC_ExcuteSkillSelf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Attack_SC_ExcuteSkillSelf_descriptor_;
  metadata.reflection = Attack_SC_ExcuteSkillSelf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Attack_SC_ExcuteSkillOther::kCharIdFieldNumber;
const int Attack_SC_ExcuteSkillOther::kSkillIdFieldNumber;
const int Attack_SC_ExcuteSkillOther::kDirFieldNumber;
const int Attack_SC_ExcuteSkillOther::kPtFieldNumber;
const int Attack_SC_ExcuteSkillOther::kTargetIDFieldNumber;
const int Attack_SC_ExcuteSkillOther::kObjTypeFieldNumber;
const int Attack_SC_ExcuteSkillOther::kCampFieldNumber;
#endif  // !_MSC_VER

Attack_SC_ExcuteSkillOther::Attack_SC_ExcuteSkillOther()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Attack_SC_ExcuteSkillOther::InitAsDefaultInstance() {
  pt_ = const_cast< ::proto::message::Point3D*>(&::proto::message::Point3D::default_instance());
}

Attack_SC_ExcuteSkillOther::Attack_SC_ExcuteSkillOther(const Attack_SC_ExcuteSkillOther& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Attack_SC_ExcuteSkillOther::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  skillid_ = 0;
  dir_ = 0;
  pt_ = NULL;
  targetid_ = 0u;
  objtype_ = 0;
  camp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Attack_SC_ExcuteSkillOther::~Attack_SC_ExcuteSkillOther() {
  SharedDtor();
}

void Attack_SC_ExcuteSkillOther::SharedDtor() {
  if (this != default_instance_) {
    delete pt_;
  }
}

void Attack_SC_ExcuteSkillOther::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Attack_SC_ExcuteSkillOther::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Attack_SC_ExcuteSkillOther_descriptor_;
}

const Attack_SC_ExcuteSkillOther& Attack_SC_ExcuteSkillOther::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_attack_2eproto();
  return *default_instance_;
}

Attack_SC_ExcuteSkillOther* Attack_SC_ExcuteSkillOther::default_instance_ = NULL;

Attack_SC_ExcuteSkillOther* Attack_SC_ExcuteSkillOther::New() const {
  return new Attack_SC_ExcuteSkillOther;
}

void Attack_SC_ExcuteSkillOther::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    skillid_ = 0;
    dir_ = 0;
    if (has_pt()) {
      if (pt_ != NULL) pt_->::proto::message::Point3D::Clear();
    }
    targetid_ = 0u;
    objtype_ = 0;
    camp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Attack_SC_ExcuteSkillOther::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 CharId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_SkillId;
        break;
      }

      // required int32 SkillId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SkillId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_dir;
        break;
      }

      // optional float dir = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dir_)));
          set_has_dir();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_pt;
        break;
      }

      // optional .proto.message.Point3D pt = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_targetID;
        break;
      }

      // optional uint32 targetID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_targetID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &targetid_)));
          set_has_targetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_objType;
        break;
      }

      // optional int32 objType = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_objType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objtype_)));
          set_has_objtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_camp;
        break;
      }

      // optional int32 camp = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_camp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &camp_)));
          set_has_camp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Attack_SC_ExcuteSkillOther::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 CharId = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // required int32 SkillId = 2;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->skillid(), output);
  }

  // optional float dir = 3;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->dir(), output);
  }

  // optional .proto.message.Point3D pt = 4;
  if (has_pt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->pt(), output);
  }

  // optional uint32 targetID = 5;
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->targetid(), output);
  }

  // optional int32 objType = 6;
  if (has_objtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->objtype(), output);
  }

  // optional int32 camp = 7;
  if (has_camp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->camp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Attack_SC_ExcuteSkillOther::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 CharId = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // required int32 SkillId = 2;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->skillid(), target);
  }

  // optional float dir = 3;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->dir(), target);
  }

  // optional .proto.message.Point3D pt = 4;
  if (has_pt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->pt(), target);
  }

  // optional uint32 targetID = 5;
  if (has_targetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->targetid(), target);
  }

  // optional int32 objType = 6;
  if (has_objtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->objtype(), target);
  }

  // optional int32 camp = 7;
  if (has_camp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->camp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Attack_SC_ExcuteSkillOther::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 CharId = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // required int32 SkillId = 2;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillid());
    }

    // optional float dir = 3;
    if (has_dir()) {
      total_size += 1 + 4;
    }

    // optional .proto.message.Point3D pt = 4;
    if (has_pt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pt());
    }

    // optional uint32 targetID = 5;
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->targetid());
    }

    // optional int32 objType = 6;
    if (has_objtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objtype());
    }

    // optional int32 camp = 7;
    if (has_camp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->camp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Attack_SC_ExcuteSkillOther::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Attack_SC_ExcuteSkillOther* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Attack_SC_ExcuteSkillOther*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Attack_SC_ExcuteSkillOther::MergeFrom(const Attack_SC_ExcuteSkillOther& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_dir()) {
      set_dir(from.dir());
    }
    if (from.has_pt()) {
      mutable_pt()->::proto::message::Point3D::MergeFrom(from.pt());
    }
    if (from.has_targetid()) {
      set_targetid(from.targetid());
    }
    if (from.has_objtype()) {
      set_objtype(from.objtype());
    }
    if (from.has_camp()) {
      set_camp(from.camp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Attack_SC_ExcuteSkillOther::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Attack_SC_ExcuteSkillOther::CopyFrom(const Attack_SC_ExcuteSkillOther& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Attack_SC_ExcuteSkillOther::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Attack_SC_ExcuteSkillOther::Swap(Attack_SC_ExcuteSkillOther* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(skillid_, other->skillid_);
    std::swap(dir_, other->dir_);
    std::swap(pt_, other->pt_);
    std::swap(targetid_, other->targetid_);
    std::swap(objtype_, other->objtype_);
    std::swap(camp_, other->camp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Attack_SC_ExcuteSkillOther::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Attack_SC_ExcuteSkillOther_descriptor_;
  metadata.reflection = Attack_SC_ExcuteSkillOther_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Attack_SC_UpdateHurtData::kCharIdFieldNumber;
const int Attack_SC_UpdateHurtData::kNHurtFieldNumber;
const int Attack_SC_UpdateHurtData::kNCurHPFieldNumber;
const int Attack_SC_UpdateHurtData::kSkillIdFieldNumber;
const int Attack_SC_UpdateHurtData::kNMaxHPFieldNumber;
const int Attack_SC_UpdateHurtData::kNHurtTypeFieldNumber;
const int Attack_SC_UpdateHurtData::kAttackerFieldNumber;
#endif  // !_MSC_VER

Attack_SC_UpdateHurtData::Attack_SC_UpdateHurtData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Attack_SC_UpdateHurtData::InitAsDefaultInstance() {
}

Attack_SC_UpdateHurtData::Attack_SC_UpdateHurtData(const Attack_SC_UpdateHurtData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Attack_SC_UpdateHurtData::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  nhurt_ = 0;
  ncurhp_ = 0;
  skillid_ = 0;
  nmaxhp_ = 0;
  nhurttype_ = 0;
  attacker_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Attack_SC_UpdateHurtData::~Attack_SC_UpdateHurtData() {
  SharedDtor();
}

void Attack_SC_UpdateHurtData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Attack_SC_UpdateHurtData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Attack_SC_UpdateHurtData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Attack_SC_UpdateHurtData_descriptor_;
}

const Attack_SC_UpdateHurtData& Attack_SC_UpdateHurtData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_attack_2eproto();
  return *default_instance_;
}

Attack_SC_UpdateHurtData* Attack_SC_UpdateHurtData::default_instance_ = NULL;

Attack_SC_UpdateHurtData* Attack_SC_UpdateHurtData::New() const {
  return new Attack_SC_UpdateHurtData;
}

void Attack_SC_UpdateHurtData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    nhurt_ = 0;
    ncurhp_ = 0;
    skillid_ = 0;
    nmaxhp_ = 0;
    nhurttype_ = 0;
    attacker_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Attack_SC_UpdateHurtData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 CharId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nHurt;
        break;
      }

      // required int32 nHurt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nHurt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nhurt_)));
          set_has_nhurt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nCurHP;
        break;
      }

      // optional int32 nCurHP = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nCurHP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ncurhp_)));
          set_has_ncurhp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_SkillId;
        break;
      }

      // optional int32 SkillId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SkillId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_nMaxHP;
        break;
      }

      // optional int32 nMaxHP = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nMaxHP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nmaxhp_)));
          set_has_nmaxhp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_nHurtType;
        break;
      }

      // optional int32 nHurtType = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nHurtType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nhurttype_)));
          set_has_nhurttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_attacker;
        break;
      }

      // optional uint64 attacker = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attacker:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &attacker_)));
          set_has_attacker();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Attack_SC_UpdateHurtData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 CharId = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // required int32 nHurt = 2;
  if (has_nhurt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nhurt(), output);
  }

  // optional int32 nCurHP = 3;
  if (has_ncurhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ncurhp(), output);
  }

  // optional int32 SkillId = 4;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->skillid(), output);
  }

  // optional int32 nMaxHP = 5;
  if (has_nmaxhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->nmaxhp(), output);
  }

  // optional int32 nHurtType = 6;
  if (has_nhurttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->nhurttype(), output);
  }

  // optional uint64 attacker = 7;
  if (has_attacker()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->attacker(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Attack_SC_UpdateHurtData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 CharId = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // required int32 nHurt = 2;
  if (has_nhurt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->nhurt(), target);
  }

  // optional int32 nCurHP = 3;
  if (has_ncurhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ncurhp(), target);
  }

  // optional int32 SkillId = 4;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->skillid(), target);
  }

  // optional int32 nMaxHP = 5;
  if (has_nmaxhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->nmaxhp(), target);
  }

  // optional int32 nHurtType = 6;
  if (has_nhurttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->nhurttype(), target);
  }

  // optional uint64 attacker = 7;
  if (has_attacker()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->attacker(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Attack_SC_UpdateHurtData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 CharId = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // required int32 nHurt = 2;
    if (has_nhurt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nhurt());
    }

    // optional int32 nCurHP = 3;
    if (has_ncurhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ncurhp());
    }

    // optional int32 SkillId = 4;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillid());
    }

    // optional int32 nMaxHP = 5;
    if (has_nmaxhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nmaxhp());
    }

    // optional int32 nHurtType = 6;
    if (has_nhurttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nhurttype());
    }

    // optional uint64 attacker = 7;
    if (has_attacker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->attacker());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Attack_SC_UpdateHurtData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Attack_SC_UpdateHurtData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Attack_SC_UpdateHurtData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Attack_SC_UpdateHurtData::MergeFrom(const Attack_SC_UpdateHurtData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_nhurt()) {
      set_nhurt(from.nhurt());
    }
    if (from.has_ncurhp()) {
      set_ncurhp(from.ncurhp());
    }
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_nmaxhp()) {
      set_nmaxhp(from.nmaxhp());
    }
    if (from.has_nhurttype()) {
      set_nhurttype(from.nhurttype());
    }
    if (from.has_attacker()) {
      set_attacker(from.attacker());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Attack_SC_UpdateHurtData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Attack_SC_UpdateHurtData::CopyFrom(const Attack_SC_UpdateHurtData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Attack_SC_UpdateHurtData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Attack_SC_UpdateHurtData::Swap(Attack_SC_UpdateHurtData* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(nhurt_, other->nhurt_);
    std::swap(ncurhp_, other->ncurhp_);
    std::swap(skillid_, other->skillid_);
    std::swap(nmaxhp_, other->nmaxhp_);
    std::swap(nhurttype_, other->nhurttype_);
    std::swap(attacker_, other->attacker_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Attack_SC_UpdateHurtData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Attack_SC_UpdateHurtData_descriptor_;
  metadata.reflection = Attack_SC_UpdateHurtData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Attack_SC_AttackBack::kCharIdFieldNumber;
const int Attack_SC_AttackBack::kAttCharIdFieldNumber;
const int Attack_SC_AttackBack::kSkillIdFieldNumber;
const int Attack_SC_AttackBack::kPtFieldNumber;
const int Attack_SC_AttackBack::kDirFieldNumber;
const int Attack_SC_AttackBack::kNTimeFieldNumber;
#endif  // !_MSC_VER

Attack_SC_AttackBack::Attack_SC_AttackBack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Attack_SC_AttackBack::InitAsDefaultInstance() {
  pt_ = const_cast< ::proto::message::Point3D*>(&::proto::message::Point3D::default_instance());
}

Attack_SC_AttackBack::Attack_SC_AttackBack(const Attack_SC_AttackBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Attack_SC_AttackBack::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  attcharid_ = 0u;
  skillid_ = 0u;
  pt_ = NULL;
  dir_ = 0;
  ntime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Attack_SC_AttackBack::~Attack_SC_AttackBack() {
  SharedDtor();
}

void Attack_SC_AttackBack::SharedDtor() {
  if (this != default_instance_) {
    delete pt_;
  }
}

void Attack_SC_AttackBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Attack_SC_AttackBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Attack_SC_AttackBack_descriptor_;
}

const Attack_SC_AttackBack& Attack_SC_AttackBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_attack_2eproto();
  return *default_instance_;
}

Attack_SC_AttackBack* Attack_SC_AttackBack::default_instance_ = NULL;

Attack_SC_AttackBack* Attack_SC_AttackBack::New() const {
  return new Attack_SC_AttackBack;
}

void Attack_SC_AttackBack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    attcharid_ = 0u;
    skillid_ = 0u;
    if (has_pt()) {
      if (pt_ != NULL) pt_->::proto::message::Point3D::Clear();
    }
    dir_ = 0;
    ntime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Attack_SC_AttackBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 CharId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_AttCharId;
        break;
      }

      // optional uint32 AttCharId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AttCharId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attcharid_)));
          set_has_attcharid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_SkillId;
        break;
      }

      // optional uint32 SkillId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SkillId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_pt;
        break;
      }

      // optional .proto.message.Point3D pt = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_Dir;
        break;
      }

      // optional float Dir = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Dir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dir_)));
          set_has_dir();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_nTime;
        break;
      }

      // optional int32 nTime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ntime_)));
          set_has_ntime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Attack_SC_AttackBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 CharId = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 AttCharId = 2;
  if (has_attcharid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->attcharid(), output);
  }

  // optional uint32 SkillId = 3;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->skillid(), output);
  }

  // optional .proto.message.Point3D pt = 4;
  if (has_pt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->pt(), output);
  }

  // optional float Dir = 5;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->dir(), output);
  }

  // optional int32 nTime = 6;
  if (has_ntime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->ntime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Attack_SC_AttackBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 CharId = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 AttCharId = 2;
  if (has_attcharid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->attcharid(), target);
  }

  // optional uint32 SkillId = 3;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->skillid(), target);
  }

  // optional .proto.message.Point3D pt = 4;
  if (has_pt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->pt(), target);
  }

  // optional float Dir = 5;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->dir(), target);
  }

  // optional int32 nTime = 6;
  if (has_ntime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->ntime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Attack_SC_AttackBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 CharId = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 AttCharId = 2;
    if (has_attcharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attcharid());
    }

    // optional uint32 SkillId = 3;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillid());
    }

    // optional .proto.message.Point3D pt = 4;
    if (has_pt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pt());
    }

    // optional float Dir = 5;
    if (has_dir()) {
      total_size += 1 + 4;
    }

    // optional int32 nTime = 6;
    if (has_ntime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ntime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Attack_SC_AttackBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Attack_SC_AttackBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Attack_SC_AttackBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Attack_SC_AttackBack::MergeFrom(const Attack_SC_AttackBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_attcharid()) {
      set_attcharid(from.attcharid());
    }
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_pt()) {
      mutable_pt()->::proto::message::Point3D::MergeFrom(from.pt());
    }
    if (from.has_dir()) {
      set_dir(from.dir());
    }
    if (from.has_ntime()) {
      set_ntime(from.ntime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Attack_SC_AttackBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Attack_SC_AttackBack::CopyFrom(const Attack_SC_AttackBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Attack_SC_AttackBack::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Attack_SC_AttackBack::Swap(Attack_SC_AttackBack* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(attcharid_, other->attcharid_);
    std::swap(skillid_, other->skillid_);
    std::swap(pt_, other->pt_);
    std::swap(dir_, other->dir_);
    std::swap(ntime_, other->ntime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Attack_SC_AttackBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Attack_SC_AttackBack_descriptor_;
  metadata.reflection = Attack_SC_AttackBack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Attack_SC_AddBuffer::kCharIdFieldNumber;
const int Attack_SC_AddBuffer::kBufferIdFieldNumber;
const int Attack_SC_AddBuffer::kStatusFieldNumber;
const int Attack_SC_AddBuffer::kLastTimeFieldNumber;
const int Attack_SC_AddBuffer::kIsDisPlayInProtoFieldNumber;
const int Attack_SC_AddBuffer::kPropertyFieldNumber;
#endif  // !_MSC_VER

Attack_SC_AddBuffer::Attack_SC_AddBuffer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Attack_SC_AddBuffer::InitAsDefaultInstance() {
}

Attack_SC_AddBuffer::Attack_SC_AddBuffer(const Attack_SC_AddBuffer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Attack_SC_AddBuffer::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  bufferid_ = 0u;
  status_ = GOOGLE_ULONGLONG(0);
  lasttime_ = 0;
  isdisplayinproto_ = 0;
  property_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Attack_SC_AddBuffer::~Attack_SC_AddBuffer() {
  SharedDtor();
}

void Attack_SC_AddBuffer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Attack_SC_AddBuffer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Attack_SC_AddBuffer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Attack_SC_AddBuffer_descriptor_;
}

const Attack_SC_AddBuffer& Attack_SC_AddBuffer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_attack_2eproto();
  return *default_instance_;
}

Attack_SC_AddBuffer* Attack_SC_AddBuffer::default_instance_ = NULL;

Attack_SC_AddBuffer* Attack_SC_AddBuffer::New() const {
  return new Attack_SC_AddBuffer;
}

void Attack_SC_AddBuffer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    bufferid_ = 0u;
    status_ = GOOGLE_ULONGLONG(0);
    lasttime_ = 0;
    isdisplayinproto_ = 0;
    property_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Attack_SC_AddBuffer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 CharId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_BufferId;
        break;
      }

      // optional uint32 BufferId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BufferId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bufferid_)));
          set_has_bufferid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Status;
        break;
      }

      // optional uint64 Status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_LastTime;
        break;
      }

      // optional int32 LastTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LastTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lasttime_)));
          set_has_lasttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_isDisPlayInProto;
        break;
      }

      // optional int32 isDisPlayInProto = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isDisPlayInProto:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isdisplayinproto_)));
          set_has_isdisplayinproto();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_property;
        break;
      }

      // optional int32 property = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_property:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &property_)));
          set_has_property();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Attack_SC_AddBuffer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 CharId = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 BufferId = 2;
  if (has_bufferid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->bufferid(), output);
  }

  // optional uint64 Status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->status(), output);
  }

  // optional int32 LastTime = 4;
  if (has_lasttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->lasttime(), output);
  }

  // optional int32 isDisPlayInProto = 5;
  if (has_isdisplayinproto()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->isdisplayinproto(), output);
  }

  // optional int32 property = 6;
  if (has_property()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->property(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Attack_SC_AddBuffer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 CharId = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 BufferId = 2;
  if (has_bufferid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->bufferid(), target);
  }

  // optional uint64 Status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->status(), target);
  }

  // optional int32 LastTime = 4;
  if (has_lasttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->lasttime(), target);
  }

  // optional int32 isDisPlayInProto = 5;
  if (has_isdisplayinproto()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->isdisplayinproto(), target);
  }

  // optional int32 property = 6;
  if (has_property()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->property(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Attack_SC_AddBuffer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 CharId = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 BufferId = 2;
    if (has_bufferid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bufferid());
    }

    // optional uint64 Status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->status());
    }

    // optional int32 LastTime = 4;
    if (has_lasttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lasttime());
    }

    // optional int32 isDisPlayInProto = 5;
    if (has_isdisplayinproto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isdisplayinproto());
    }

    // optional int32 property = 6;
    if (has_property()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->property());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Attack_SC_AddBuffer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Attack_SC_AddBuffer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Attack_SC_AddBuffer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Attack_SC_AddBuffer::MergeFrom(const Attack_SC_AddBuffer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_bufferid()) {
      set_bufferid(from.bufferid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_lasttime()) {
      set_lasttime(from.lasttime());
    }
    if (from.has_isdisplayinproto()) {
      set_isdisplayinproto(from.isdisplayinproto());
    }
    if (from.has_property()) {
      set_property(from.property());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Attack_SC_AddBuffer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Attack_SC_AddBuffer::CopyFrom(const Attack_SC_AddBuffer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Attack_SC_AddBuffer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Attack_SC_AddBuffer::Swap(Attack_SC_AddBuffer* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(bufferid_, other->bufferid_);
    std::swap(status_, other->status_);
    std::swap(lasttime_, other->lasttime_);
    std::swap(isdisplayinproto_, other->isdisplayinproto_);
    std::swap(property_, other->property_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Attack_SC_AddBuffer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Attack_SC_AddBuffer_descriptor_;
  metadata.reflection = Attack_SC_AddBuffer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Attack_SC_DelBuffer::kCharIdFieldNumber;
const int Attack_SC_DelBuffer::kBufferIdFieldNumber;
const int Attack_SC_DelBuffer::kStatusFieldNumber;
#endif  // !_MSC_VER

Attack_SC_DelBuffer::Attack_SC_DelBuffer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Attack_SC_DelBuffer::InitAsDefaultInstance() {
}

Attack_SC_DelBuffer::Attack_SC_DelBuffer(const Attack_SC_DelBuffer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Attack_SC_DelBuffer::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  bufferid_ = 0u;
  status_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Attack_SC_DelBuffer::~Attack_SC_DelBuffer() {
  SharedDtor();
}

void Attack_SC_DelBuffer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Attack_SC_DelBuffer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Attack_SC_DelBuffer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Attack_SC_DelBuffer_descriptor_;
}

const Attack_SC_DelBuffer& Attack_SC_DelBuffer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_attack_2eproto();
  return *default_instance_;
}

Attack_SC_DelBuffer* Attack_SC_DelBuffer::default_instance_ = NULL;

Attack_SC_DelBuffer* Attack_SC_DelBuffer::New() const {
  return new Attack_SC_DelBuffer;
}

void Attack_SC_DelBuffer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    bufferid_ = 0u;
    status_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Attack_SC_DelBuffer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 CharId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_BufferId;
        break;
      }

      // optional uint32 BufferId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BufferId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bufferid_)));
          set_has_bufferid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Status;
        break;
      }

      // optional uint64 Status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Attack_SC_DelBuffer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 CharId = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 BufferId = 2;
  if (has_bufferid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->bufferid(), output);
  }

  // optional uint64 Status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Attack_SC_DelBuffer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 CharId = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 BufferId = 2;
  if (has_bufferid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->bufferid(), target);
  }

  // optional uint64 Status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Attack_SC_DelBuffer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 CharId = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 BufferId = 2;
    if (has_bufferid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bufferid());
    }

    // optional uint64 Status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Attack_SC_DelBuffer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Attack_SC_DelBuffer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Attack_SC_DelBuffer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Attack_SC_DelBuffer::MergeFrom(const Attack_SC_DelBuffer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_bufferid()) {
      set_bufferid(from.bufferid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Attack_SC_DelBuffer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Attack_SC_DelBuffer::CopyFrom(const Attack_SC_DelBuffer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Attack_SC_DelBuffer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Attack_SC_DelBuffer::Swap(Attack_SC_DelBuffer* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(bufferid_, other->bufferid_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Attack_SC_DelBuffer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Attack_SC_DelBuffer_descriptor_;
  metadata.reflection = Attack_SC_DelBuffer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Attack_SC_UpdateBuffer::kCharIdFieldNumber;
const int Attack_SC_UpdateBuffer::kBufferIdFieldNumber;
const int Attack_SC_UpdateBuffer::kLastTimeFieldNumber;
#endif  // !_MSC_VER

Attack_SC_UpdateBuffer::Attack_SC_UpdateBuffer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Attack_SC_UpdateBuffer::InitAsDefaultInstance() {
}

Attack_SC_UpdateBuffer::Attack_SC_UpdateBuffer(const Attack_SC_UpdateBuffer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Attack_SC_UpdateBuffer::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  bufferid_ = 0u;
  lasttime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Attack_SC_UpdateBuffer::~Attack_SC_UpdateBuffer() {
  SharedDtor();
}

void Attack_SC_UpdateBuffer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Attack_SC_UpdateBuffer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Attack_SC_UpdateBuffer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Attack_SC_UpdateBuffer_descriptor_;
}

const Attack_SC_UpdateBuffer& Attack_SC_UpdateBuffer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_attack_2eproto();
  return *default_instance_;
}

Attack_SC_UpdateBuffer* Attack_SC_UpdateBuffer::default_instance_ = NULL;

Attack_SC_UpdateBuffer* Attack_SC_UpdateBuffer::New() const {
  return new Attack_SC_UpdateBuffer;
}

void Attack_SC_UpdateBuffer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    bufferid_ = 0u;
    lasttime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Attack_SC_UpdateBuffer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 CharId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_BufferId;
        break;
      }

      // optional uint32 BufferId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BufferId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bufferid_)));
          set_has_bufferid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_LastTime;
        break;
      }

      // optional int32 LastTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LastTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lasttime_)));
          set_has_lasttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Attack_SC_UpdateBuffer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 CharId = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 BufferId = 2;
  if (has_bufferid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->bufferid(), output);
  }

  // optional int32 LastTime = 3;
  if (has_lasttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->lasttime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Attack_SC_UpdateBuffer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 CharId = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 BufferId = 2;
  if (has_bufferid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->bufferid(), target);
  }

  // optional int32 LastTime = 3;
  if (has_lasttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->lasttime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Attack_SC_UpdateBuffer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 CharId = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 BufferId = 2;
    if (has_bufferid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bufferid());
    }

    // optional int32 LastTime = 3;
    if (has_lasttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lasttime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Attack_SC_UpdateBuffer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Attack_SC_UpdateBuffer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Attack_SC_UpdateBuffer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Attack_SC_UpdateBuffer::MergeFrom(const Attack_SC_UpdateBuffer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_bufferid()) {
      set_bufferid(from.bufferid());
    }
    if (from.has_lasttime()) {
      set_lasttime(from.lasttime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Attack_SC_UpdateBuffer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Attack_SC_UpdateBuffer::CopyFrom(const Attack_SC_UpdateBuffer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Attack_SC_UpdateBuffer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Attack_SC_UpdateBuffer::Swap(Attack_SC_UpdateBuffer* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(bufferid_, other->bufferid_);
    std::swap(lasttime_, other->lasttime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Attack_SC_UpdateBuffer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Attack_SC_UpdateBuffer_descriptor_;
  metadata.reflection = Attack_SC_UpdateBuffer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Attack_SC_AttackDie::kCharIdFieldNumber;
#endif  // !_MSC_VER

Attack_SC_AttackDie::Attack_SC_AttackDie()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Attack_SC_AttackDie::InitAsDefaultInstance() {
}

Attack_SC_AttackDie::Attack_SC_AttackDie(const Attack_SC_AttackDie& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Attack_SC_AttackDie::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Attack_SC_AttackDie::~Attack_SC_AttackDie() {
  SharedDtor();
}

void Attack_SC_AttackDie::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Attack_SC_AttackDie::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Attack_SC_AttackDie::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Attack_SC_AttackDie_descriptor_;
}

const Attack_SC_AttackDie& Attack_SC_AttackDie::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_attack_2eproto();
  return *default_instance_;
}

Attack_SC_AttackDie* Attack_SC_AttackDie::default_instance_ = NULL;

Attack_SC_AttackDie* Attack_SC_AttackDie::New() const {
  return new Attack_SC_AttackDie;
}

void Attack_SC_AttackDie::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Attack_SC_AttackDie::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 CharId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Attack_SC_AttackDie::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 CharId = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Attack_SC_AttackDie::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 CharId = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Attack_SC_AttackDie::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 CharId = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Attack_SC_AttackDie::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Attack_SC_AttackDie* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Attack_SC_AttackDie*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Attack_SC_AttackDie::MergeFrom(const Attack_SC_AttackDie& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Attack_SC_AttackDie::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Attack_SC_AttackDie::CopyFrom(const Attack_SC_AttackDie& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Attack_SC_AttackDie::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Attack_SC_AttackDie::Swap(Attack_SC_AttackDie* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Attack_SC_AttackDie::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Attack_SC_AttackDie_descriptor_;
  metadata.reflection = Attack_SC_AttackDie_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Attack_CS_BlockSkillStart::kDirFieldNumber;
const int Attack_CS_BlockSkillStart::kPtFieldNumber;
#endif  // !_MSC_VER

Attack_CS_BlockSkillStart::Attack_CS_BlockSkillStart()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Attack_CS_BlockSkillStart::InitAsDefaultInstance() {
  pt_ = const_cast< ::proto::message::Point3D*>(&::proto::message::Point3D::default_instance());
}

Attack_CS_BlockSkillStart::Attack_CS_BlockSkillStart(const Attack_CS_BlockSkillStart& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Attack_CS_BlockSkillStart::SharedCtor() {
  _cached_size_ = 0;
  dir_ = 0;
  pt_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Attack_CS_BlockSkillStart::~Attack_CS_BlockSkillStart() {
  SharedDtor();
}

void Attack_CS_BlockSkillStart::SharedDtor() {
  if (this != default_instance_) {
    delete pt_;
  }
}

void Attack_CS_BlockSkillStart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Attack_CS_BlockSkillStart::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Attack_CS_BlockSkillStart_descriptor_;
}

const Attack_CS_BlockSkillStart& Attack_CS_BlockSkillStart::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_attack_2eproto();
  return *default_instance_;
}

Attack_CS_BlockSkillStart* Attack_CS_BlockSkillStart::default_instance_ = NULL;

Attack_CS_BlockSkillStart* Attack_CS_BlockSkillStart::New() const {
  return new Attack_CS_BlockSkillStart;
}

void Attack_CS_BlockSkillStart::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dir_ = 0;
    if (has_pt()) {
      if (pt_ != NULL) pt_->::proto::message::Point3D::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Attack_CS_BlockSkillStart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float dir = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dir_)));
          set_has_dir();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pt;
        break;
      }

      // optional .proto.message.Point3D pt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Attack_CS_BlockSkillStart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float dir = 1;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->dir(), output);
  }

  // optional .proto.message.Point3D pt = 2;
  if (has_pt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Attack_CS_BlockSkillStart::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float dir = 1;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->dir(), target);
  }

  // optional .proto.message.Point3D pt = 2;
  if (has_pt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Attack_CS_BlockSkillStart::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float dir = 1;
    if (has_dir()) {
      total_size += 1 + 4;
    }

    // optional .proto.message.Point3D pt = 2;
    if (has_pt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Attack_CS_BlockSkillStart::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Attack_CS_BlockSkillStart* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Attack_CS_BlockSkillStart*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Attack_CS_BlockSkillStart::MergeFrom(const Attack_CS_BlockSkillStart& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dir()) {
      set_dir(from.dir());
    }
    if (from.has_pt()) {
      mutable_pt()->::proto::message::Point3D::MergeFrom(from.pt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Attack_CS_BlockSkillStart::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Attack_CS_BlockSkillStart::CopyFrom(const Attack_CS_BlockSkillStart& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Attack_CS_BlockSkillStart::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Attack_CS_BlockSkillStart::Swap(Attack_CS_BlockSkillStart* other) {
  if (other != this) {
    std::swap(dir_, other->dir_);
    std::swap(pt_, other->pt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Attack_CS_BlockSkillStart::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Attack_CS_BlockSkillStart_descriptor_;
  metadata.reflection = Attack_CS_BlockSkillStart_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Attack_CS_BlockSkillEnd::Attack_CS_BlockSkillEnd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Attack_CS_BlockSkillEnd::InitAsDefaultInstance() {
}

Attack_CS_BlockSkillEnd::Attack_CS_BlockSkillEnd(const Attack_CS_BlockSkillEnd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Attack_CS_BlockSkillEnd::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Attack_CS_BlockSkillEnd::~Attack_CS_BlockSkillEnd() {
  SharedDtor();
}

void Attack_CS_BlockSkillEnd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Attack_CS_BlockSkillEnd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Attack_CS_BlockSkillEnd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Attack_CS_BlockSkillEnd_descriptor_;
}

const Attack_CS_BlockSkillEnd& Attack_CS_BlockSkillEnd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_attack_2eproto();
  return *default_instance_;
}

Attack_CS_BlockSkillEnd* Attack_CS_BlockSkillEnd::default_instance_ = NULL;

Attack_CS_BlockSkillEnd* Attack_CS_BlockSkillEnd::New() const {
  return new Attack_CS_BlockSkillEnd;
}

void Attack_CS_BlockSkillEnd::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Attack_CS_BlockSkillEnd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Attack_CS_BlockSkillEnd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Attack_CS_BlockSkillEnd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Attack_CS_BlockSkillEnd::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Attack_CS_BlockSkillEnd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Attack_CS_BlockSkillEnd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Attack_CS_BlockSkillEnd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Attack_CS_BlockSkillEnd::MergeFrom(const Attack_CS_BlockSkillEnd& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Attack_CS_BlockSkillEnd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Attack_CS_BlockSkillEnd::CopyFrom(const Attack_CS_BlockSkillEnd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Attack_CS_BlockSkillEnd::IsInitialized() const {

  return true;
}

void Attack_CS_BlockSkillEnd::Swap(Attack_CS_BlockSkillEnd* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Attack_CS_BlockSkillEnd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Attack_CS_BlockSkillEnd_descriptor_;
  metadata.reflection = Attack_CS_BlockSkillEnd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Attack_SC_BlockSkillStart::kCharIdFieldNumber;
const int Attack_SC_BlockSkillStart::kDirFieldNumber;
const int Attack_SC_BlockSkillStart::kPtFieldNumber;
#endif  // !_MSC_VER

Attack_SC_BlockSkillStart::Attack_SC_BlockSkillStart()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Attack_SC_BlockSkillStart::InitAsDefaultInstance() {
  pt_ = const_cast< ::proto::message::Point3D*>(&::proto::message::Point3D::default_instance());
}

Attack_SC_BlockSkillStart::Attack_SC_BlockSkillStart(const Attack_SC_BlockSkillStart& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Attack_SC_BlockSkillStart::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  dir_ = 0;
  pt_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Attack_SC_BlockSkillStart::~Attack_SC_BlockSkillStart() {
  SharedDtor();
}

void Attack_SC_BlockSkillStart::SharedDtor() {
  if (this != default_instance_) {
    delete pt_;
  }
}

void Attack_SC_BlockSkillStart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Attack_SC_BlockSkillStart::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Attack_SC_BlockSkillStart_descriptor_;
}

const Attack_SC_BlockSkillStart& Attack_SC_BlockSkillStart::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_attack_2eproto();
  return *default_instance_;
}

Attack_SC_BlockSkillStart* Attack_SC_BlockSkillStart::default_instance_ = NULL;

Attack_SC_BlockSkillStart* Attack_SC_BlockSkillStart::New() const {
  return new Attack_SC_BlockSkillStart;
}

void Attack_SC_BlockSkillStart::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    dir_ = 0;
    if (has_pt()) {
      if (pt_ != NULL) pt_->::proto::message::Point3D::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Attack_SC_BlockSkillStart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 CharId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_dir;
        break;
      }

      // optional float dir = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dir_)));
          set_has_dir();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pt;
        break;
      }

      // optional .proto.message.Point3D pt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Attack_SC_BlockSkillStart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 CharId = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional float dir = 2;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->dir(), output);
  }

  // optional .proto.message.Point3D pt = 3;
  if (has_pt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Attack_SC_BlockSkillStart::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 CharId = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional float dir = 2;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->dir(), target);
  }

  // optional .proto.message.Point3D pt = 3;
  if (has_pt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Attack_SC_BlockSkillStart::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 CharId = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional float dir = 2;
    if (has_dir()) {
      total_size += 1 + 4;
    }

    // optional .proto.message.Point3D pt = 3;
    if (has_pt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Attack_SC_BlockSkillStart::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Attack_SC_BlockSkillStart* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Attack_SC_BlockSkillStart*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Attack_SC_BlockSkillStart::MergeFrom(const Attack_SC_BlockSkillStart& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_dir()) {
      set_dir(from.dir());
    }
    if (from.has_pt()) {
      mutable_pt()->::proto::message::Point3D::MergeFrom(from.pt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Attack_SC_BlockSkillStart::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Attack_SC_BlockSkillStart::CopyFrom(const Attack_SC_BlockSkillStart& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Attack_SC_BlockSkillStart::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Attack_SC_BlockSkillStart::Swap(Attack_SC_BlockSkillStart* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(dir_, other->dir_);
    std::swap(pt_, other->pt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Attack_SC_BlockSkillStart::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Attack_SC_BlockSkillStart_descriptor_;
  metadata.reflection = Attack_SC_BlockSkillStart_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Attack_SC_BlockSkillEnd::kCharIdFieldNumber;
#endif  // !_MSC_VER

Attack_SC_BlockSkillEnd::Attack_SC_BlockSkillEnd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Attack_SC_BlockSkillEnd::InitAsDefaultInstance() {
}

Attack_SC_BlockSkillEnd::Attack_SC_BlockSkillEnd(const Attack_SC_BlockSkillEnd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Attack_SC_BlockSkillEnd::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Attack_SC_BlockSkillEnd::~Attack_SC_BlockSkillEnd() {
  SharedDtor();
}

void Attack_SC_BlockSkillEnd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Attack_SC_BlockSkillEnd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Attack_SC_BlockSkillEnd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Attack_SC_BlockSkillEnd_descriptor_;
}

const Attack_SC_BlockSkillEnd& Attack_SC_BlockSkillEnd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_attack_2eproto();
  return *default_instance_;
}

Attack_SC_BlockSkillEnd* Attack_SC_BlockSkillEnd::default_instance_ = NULL;

Attack_SC_BlockSkillEnd* Attack_SC_BlockSkillEnd::New() const {
  return new Attack_SC_BlockSkillEnd;
}

void Attack_SC_BlockSkillEnd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Attack_SC_BlockSkillEnd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 CharId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Attack_SC_BlockSkillEnd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 CharId = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Attack_SC_BlockSkillEnd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 CharId = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Attack_SC_BlockSkillEnd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 CharId = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Attack_SC_BlockSkillEnd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Attack_SC_BlockSkillEnd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Attack_SC_BlockSkillEnd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Attack_SC_BlockSkillEnd::MergeFrom(const Attack_SC_BlockSkillEnd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Attack_SC_BlockSkillEnd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Attack_SC_BlockSkillEnd::CopyFrom(const Attack_SC_BlockSkillEnd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Attack_SC_BlockSkillEnd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Attack_SC_BlockSkillEnd::Swap(Attack_SC_BlockSkillEnd* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Attack_SC_BlockSkillEnd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Attack_SC_BlockSkillEnd_descriptor_;
  metadata.reflection = Attack_SC_BlockSkillEnd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Attack_SC_UpdateAttacking::kAttackingFieldNumber;
#endif  // !_MSC_VER

Attack_SC_UpdateAttacking::Attack_SC_UpdateAttacking()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Attack_SC_UpdateAttacking::InitAsDefaultInstance() {
}

Attack_SC_UpdateAttacking::Attack_SC_UpdateAttacking(const Attack_SC_UpdateAttacking& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Attack_SC_UpdateAttacking::SharedCtor() {
  _cached_size_ = 0;
  attacking_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Attack_SC_UpdateAttacking::~Attack_SC_UpdateAttacking() {
  SharedDtor();
}

void Attack_SC_UpdateAttacking::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Attack_SC_UpdateAttacking::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Attack_SC_UpdateAttacking::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Attack_SC_UpdateAttacking_descriptor_;
}

const Attack_SC_UpdateAttacking& Attack_SC_UpdateAttacking::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_attack_2eproto();
  return *default_instance_;
}

Attack_SC_UpdateAttacking* Attack_SC_UpdateAttacking::default_instance_ = NULL;

Attack_SC_UpdateAttacking* Attack_SC_UpdateAttacking::New() const {
  return new Attack_SC_UpdateAttacking;
}

void Attack_SC_UpdateAttacking::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    attacking_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Attack_SC_UpdateAttacking::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool attacking = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &attacking_)));
          set_has_attacking();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Attack_SC_UpdateAttacking::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool attacking = 1;
  if (has_attacking()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->attacking(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Attack_SC_UpdateAttacking::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool attacking = 1;
  if (has_attacking()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->attacking(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Attack_SC_UpdateAttacking::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool attacking = 1;
    if (has_attacking()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Attack_SC_UpdateAttacking::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Attack_SC_UpdateAttacking* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Attack_SC_UpdateAttacking*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Attack_SC_UpdateAttacking::MergeFrom(const Attack_SC_UpdateAttacking& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attacking()) {
      set_attacking(from.attacking());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Attack_SC_UpdateAttacking::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Attack_SC_UpdateAttacking::CopyFrom(const Attack_SC_UpdateAttacking& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Attack_SC_UpdateAttacking::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Attack_SC_UpdateAttacking::Swap(Attack_SC_UpdateAttacking* other) {
  if (other != this) {
    std::swap(attacking_, other->attacking_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Attack_SC_UpdateAttacking::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Attack_SC_UpdateAttacking_descriptor_;
  metadata.reflection = Attack_SC_UpdateAttacking_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Attack_SC_UpdateTP::kCharidFieldNumber;
const int Attack_SC_UpdateTP::kTotalNumFieldNumber;
const int Attack_SC_UpdateTP::kCurNumFieldNumber;
#endif  // !_MSC_VER

Attack_SC_UpdateTP::Attack_SC_UpdateTP()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Attack_SC_UpdateTP::InitAsDefaultInstance() {
}

Attack_SC_UpdateTP::Attack_SC_UpdateTP(const Attack_SC_UpdateTP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Attack_SC_UpdateTP::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0;
  total_num_ = 0;
  cur_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Attack_SC_UpdateTP::~Attack_SC_UpdateTP() {
  SharedDtor();
}

void Attack_SC_UpdateTP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Attack_SC_UpdateTP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Attack_SC_UpdateTP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Attack_SC_UpdateTP_descriptor_;
}

const Attack_SC_UpdateTP& Attack_SC_UpdateTP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_attack_2eproto();
  return *default_instance_;
}

Attack_SC_UpdateTP* Attack_SC_UpdateTP::default_instance_ = NULL;

Attack_SC_UpdateTP* Attack_SC_UpdateTP::New() const {
  return new Attack_SC_UpdateTP;
}

void Attack_SC_UpdateTP::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0;
    total_num_ = 0;
    cur_num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Attack_SC_UpdateTP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_total_num;
        break;
      }

      // optional int32 total_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_num_)));
          set_has_total_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cur_num;
        break;
      }

      // optional int32 cur_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_num_)));
          set_has_cur_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Attack_SC_UpdateTP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->charid(), output);
  }

  // optional int32 total_num = 2;
  if (has_total_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->total_num(), output);
  }

  // optional int32 cur_num = 3;
  if (has_cur_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cur_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Attack_SC_UpdateTP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->charid(), target);
  }

  // optional int32 total_num = 2;
  if (has_total_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->total_num(), target);
  }

  // optional int32 cur_num = 3;
  if (has_cur_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cur_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Attack_SC_UpdateTP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->charid());
    }

    // optional int32 total_num = 2;
    if (has_total_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_num());
    }

    // optional int32 cur_num = 3;
    if (has_cur_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Attack_SC_UpdateTP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Attack_SC_UpdateTP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Attack_SC_UpdateTP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Attack_SC_UpdateTP::MergeFrom(const Attack_SC_UpdateTP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_total_num()) {
      set_total_num(from.total_num());
    }
    if (from.has_cur_num()) {
      set_cur_num(from.cur_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Attack_SC_UpdateTP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Attack_SC_UpdateTP::CopyFrom(const Attack_SC_UpdateTP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Attack_SC_UpdateTP::IsInitialized() const {

  return true;
}

void Attack_SC_UpdateTP::Swap(Attack_SC_UpdateTP* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(total_num_, other->total_num_);
    std::swap(cur_num_, other->cur_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Attack_SC_UpdateTP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Attack_SC_UpdateTP_descriptor_;
  metadata.reflection = Attack_SC_UpdateTP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Attack_SC_Strike::Attack_SC_Strike()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Attack_SC_Strike::InitAsDefaultInstance() {
}

Attack_SC_Strike::Attack_SC_Strike(const Attack_SC_Strike& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Attack_SC_Strike::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Attack_SC_Strike::~Attack_SC_Strike() {
  SharedDtor();
}

void Attack_SC_Strike::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Attack_SC_Strike::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Attack_SC_Strike::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Attack_SC_Strike_descriptor_;
}

const Attack_SC_Strike& Attack_SC_Strike::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_attack_2eproto();
  return *default_instance_;
}

Attack_SC_Strike* Attack_SC_Strike::default_instance_ = NULL;

Attack_SC_Strike* Attack_SC_Strike::New() const {
  return new Attack_SC_Strike;
}

void Attack_SC_Strike::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Attack_SC_Strike::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Attack_SC_Strike::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Attack_SC_Strike::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Attack_SC_Strike::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Attack_SC_Strike::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Attack_SC_Strike* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Attack_SC_Strike*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Attack_SC_Strike::MergeFrom(const Attack_SC_Strike& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Attack_SC_Strike::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Attack_SC_Strike::CopyFrom(const Attack_SC_Strike& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Attack_SC_Strike::IsInitialized() const {

  return true;
}

void Attack_SC_Strike::Swap(Attack_SC_Strike* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Attack_SC_Strike::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Attack_SC_Strike_descriptor_;
  metadata.reflection = Attack_SC_Strike_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Attack_SC_Die::kCharidFieldNumber;
#endif  // !_MSC_VER

Attack_SC_Die::Attack_SC_Die()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Attack_SC_Die::InitAsDefaultInstance() {
}

Attack_SC_Die::Attack_SC_Die(const Attack_SC_Die& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Attack_SC_Die::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Attack_SC_Die::~Attack_SC_Die() {
  SharedDtor();
}

void Attack_SC_Die::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Attack_SC_Die::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Attack_SC_Die::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Attack_SC_Die_descriptor_;
}

const Attack_SC_Die& Attack_SC_Die::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_attack_2eproto();
  return *default_instance_;
}

Attack_SC_Die* Attack_SC_Die::default_instance_ = NULL;

Attack_SC_Die* Attack_SC_Die::New() const {
  return new Attack_SC_Die;
}

void Attack_SC_Die::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Attack_SC_Die::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Attack_SC_Die::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Attack_SC_Die::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Attack_SC_Die::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Attack_SC_Die::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Attack_SC_Die* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Attack_SC_Die*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Attack_SC_Die::MergeFrom(const Attack_SC_Die& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Attack_SC_Die::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Attack_SC_Die::CopyFrom(const Attack_SC_Die& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Attack_SC_Die::IsInitialized() const {

  return true;
}

void Attack_SC_Die::Swap(Attack_SC_Die* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Attack_SC_Die::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Attack_SC_Die_descriptor_;
  metadata.reflection = Attack_SC_Die_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Attack_SC_Shout::kNIDFieldNumber;
#endif  // !_MSC_VER

Attack_SC_Shout::Attack_SC_Shout()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Attack_SC_Shout::InitAsDefaultInstance() {
}

Attack_SC_Shout::Attack_SC_Shout(const Attack_SC_Shout& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Attack_SC_Shout::SharedCtor() {
  _cached_size_ = 0;
  nid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Attack_SC_Shout::~Attack_SC_Shout() {
  SharedDtor();
}

void Attack_SC_Shout::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Attack_SC_Shout::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Attack_SC_Shout::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Attack_SC_Shout_descriptor_;
}

const Attack_SC_Shout& Attack_SC_Shout::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_attack_2eproto();
  return *default_instance_;
}

Attack_SC_Shout* Attack_SC_Shout::default_instance_ = NULL;

Attack_SC_Shout* Attack_SC_Shout::New() const {
  return new Attack_SC_Shout;
}

void Attack_SC_Shout::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Attack_SC_Shout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 nID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nid_)));
          set_has_nid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Attack_SC_Shout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 nID = 1;
  if (has_nid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Attack_SC_Shout::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 nID = 1;
  if (has_nid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Attack_SC_Shout::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 nID = 1;
    if (has_nid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Attack_SC_Shout::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Attack_SC_Shout* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Attack_SC_Shout*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Attack_SC_Shout::MergeFrom(const Attack_SC_Shout& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nid()) {
      set_nid(from.nid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Attack_SC_Shout::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Attack_SC_Shout::CopyFrom(const Attack_SC_Shout& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Attack_SC_Shout::IsInitialized() const {

  return true;
}

void Attack_SC_Shout::Swap(Attack_SC_Shout* other) {
  if (other != this) {
    std::swap(nid_, other->nid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Attack_SC_Shout::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Attack_SC_Shout_descriptor_;
  metadata.reflection = Attack_SC_Shout_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Attack_CS_Relive::kTypeFieldNumber;
#endif  // !_MSC_VER

Attack_CS_Relive::Attack_CS_Relive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Attack_CS_Relive::InitAsDefaultInstance() {
}

Attack_CS_Relive::Attack_CS_Relive(const Attack_CS_Relive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Attack_CS_Relive::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Attack_CS_Relive::~Attack_CS_Relive() {
  SharedDtor();
}

void Attack_CS_Relive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Attack_CS_Relive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Attack_CS_Relive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Attack_CS_Relive_descriptor_;
}

const Attack_CS_Relive& Attack_CS_Relive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_attack_2eproto();
  return *default_instance_;
}

Attack_CS_Relive* Attack_CS_Relive::default_instance_ = NULL;

Attack_CS_Relive* Attack_CS_Relive::New() const {
  return new Attack_CS_Relive;
}

void Attack_CS_Relive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Attack_CS_Relive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Attack_CS_Relive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Attack_CS_Relive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Attack_CS_Relive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Attack_CS_Relive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Attack_CS_Relive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Attack_CS_Relive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Attack_CS_Relive::MergeFrom(const Attack_CS_Relive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Attack_CS_Relive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Attack_CS_Relive::CopyFrom(const Attack_CS_Relive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Attack_CS_Relive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Attack_CS_Relive::Swap(Attack_CS_Relive* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Attack_CS_Relive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Attack_CS_Relive_descriptor_;
  metadata.reflection = Attack_CS_Relive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Attack_SC_Relive::kResultFieldNumber;
const int Attack_SC_Relive::kReliveTimesFieldNumber;
#endif  // !_MSC_VER

Attack_SC_Relive::Attack_SC_Relive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Attack_SC_Relive::InitAsDefaultInstance() {
}

Attack_SC_Relive::Attack_SC_Relive(const Attack_SC_Relive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Attack_SC_Relive::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  relive_times_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Attack_SC_Relive::~Attack_SC_Relive() {
  SharedDtor();
}

void Attack_SC_Relive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Attack_SC_Relive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Attack_SC_Relive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Attack_SC_Relive_descriptor_;
}

const Attack_SC_Relive& Attack_SC_Relive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_attack_2eproto();
  return *default_instance_;
}

Attack_SC_Relive* Attack_SC_Relive::default_instance_ = NULL;

Attack_SC_Relive* Attack_SC_Relive::New() const {
  return new Attack_SC_Relive;
}

void Attack_SC_Relive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    relive_times_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Attack_SC_Relive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_relive_times;
        break;
      }

      // optional int32 relive_times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_relive_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &relive_times_)));
          set_has_relive_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Attack_SC_Relive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 relive_times = 2;
  if (has_relive_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->relive_times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Attack_SC_Relive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 relive_times = 2;
  if (has_relive_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->relive_times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Attack_SC_Relive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 relive_times = 2;
    if (has_relive_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->relive_times());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Attack_SC_Relive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Attack_SC_Relive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Attack_SC_Relive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Attack_SC_Relive::MergeFrom(const Attack_SC_Relive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_relive_times()) {
      set_relive_times(from.relive_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Attack_SC_Relive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Attack_SC_Relive::CopyFrom(const Attack_SC_Relive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Attack_SC_Relive::IsInitialized() const {

  return true;
}

void Attack_SC_Relive::Swap(Attack_SC_Relive* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(relive_times_, other->relive_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Attack_SC_Relive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Attack_SC_Relive_descriptor_;
  metadata.reflection = Attack_SC_Relive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Attack_SC_ClearSkillCD::kSkillIdFieldNumber;
#endif  // !_MSC_VER

Attack_SC_ClearSkillCD::Attack_SC_ClearSkillCD()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Attack_SC_ClearSkillCD::InitAsDefaultInstance() {
}

Attack_SC_ClearSkillCD::Attack_SC_ClearSkillCD(const Attack_SC_ClearSkillCD& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Attack_SC_ClearSkillCD::SharedCtor() {
  _cached_size_ = 0;
  skillid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Attack_SC_ClearSkillCD::~Attack_SC_ClearSkillCD() {
  SharedDtor();
}

void Attack_SC_ClearSkillCD::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Attack_SC_ClearSkillCD::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Attack_SC_ClearSkillCD::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Attack_SC_ClearSkillCD_descriptor_;
}

const Attack_SC_ClearSkillCD& Attack_SC_ClearSkillCD::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_attack_2eproto();
  return *default_instance_;
}

Attack_SC_ClearSkillCD* Attack_SC_ClearSkillCD::default_instance_ = NULL;

Attack_SC_ClearSkillCD* Attack_SC_ClearSkillCD::New() const {
  return new Attack_SC_ClearSkillCD;
}

void Attack_SC_ClearSkillCD::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skillid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Attack_SC_ClearSkillCD::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 SkillId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Attack_SC_ClearSkillCD::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 SkillId = 1;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->skillid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Attack_SC_ClearSkillCD::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 SkillId = 1;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->skillid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Attack_SC_ClearSkillCD::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 SkillId = 1;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Attack_SC_ClearSkillCD::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Attack_SC_ClearSkillCD* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Attack_SC_ClearSkillCD*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Attack_SC_ClearSkillCD::MergeFrom(const Attack_SC_ClearSkillCD& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Attack_SC_ClearSkillCD::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Attack_SC_ClearSkillCD::CopyFrom(const Attack_SC_ClearSkillCD& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Attack_SC_ClearSkillCD::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Attack_SC_ClearSkillCD::Swap(Attack_SC_ClearSkillCD* other) {
  if (other != this) {
    std::swap(skillid_, other->skillid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Attack_SC_ClearSkillCD::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Attack_SC_ClearSkillCD_descriptor_;
  metadata.reflection = Attack_SC_ClearSkillCD_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Attack_SC_UpdateAttackStatus::kStatusFieldNumber;
const int Attack_SC_UpdateAttackStatus::kIDFieldNumber;
#endif  // !_MSC_VER

Attack_SC_UpdateAttackStatus::Attack_SC_UpdateAttackStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Attack_SC_UpdateAttackStatus::InitAsDefaultInstance() {
}

Attack_SC_UpdateAttackStatus::Attack_SC_UpdateAttackStatus(const Attack_SC_UpdateAttackStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Attack_SC_UpdateAttackStatus::SharedCtor() {
  _cached_size_ = 0;
  status_ = GOOGLE_ULONGLONG(0);
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Attack_SC_UpdateAttackStatus::~Attack_SC_UpdateAttackStatus() {
  SharedDtor();
}

void Attack_SC_UpdateAttackStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Attack_SC_UpdateAttackStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Attack_SC_UpdateAttackStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Attack_SC_UpdateAttackStatus_descriptor_;
}

const Attack_SC_UpdateAttackStatus& Attack_SC_UpdateAttackStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_attack_2eproto();
  return *default_instance_;
}

Attack_SC_UpdateAttackStatus* Attack_SC_UpdateAttackStatus::default_instance_ = NULL;

Attack_SC_UpdateAttackStatus* Attack_SC_UpdateAttackStatus::New() const {
  return new Attack_SC_UpdateAttackStatus;
}

void Attack_SC_UpdateAttackStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = GOOGLE_ULONGLONG(0);
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Attack_SC_UpdateAttackStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 Status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ID;
        break;
      }

      // optional uint32 ID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Attack_SC_UpdateAttackStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 Status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->status(), output);
  }

  // optional uint32 ID = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Attack_SC_UpdateAttackStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 Status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->status(), target);
  }

  // optional uint32 ID = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Attack_SC_UpdateAttackStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 Status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->status());
    }

    // optional uint32 ID = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Attack_SC_UpdateAttackStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Attack_SC_UpdateAttackStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Attack_SC_UpdateAttackStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Attack_SC_UpdateAttackStatus::MergeFrom(const Attack_SC_UpdateAttackStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Attack_SC_UpdateAttackStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Attack_SC_UpdateAttackStatus::CopyFrom(const Attack_SC_UpdateAttackStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Attack_SC_UpdateAttackStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Attack_SC_UpdateAttackStatus::Swap(Attack_SC_UpdateAttackStatus* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Attack_SC_UpdateAttackStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Attack_SC_UpdateAttackStatus_descriptor_;
  metadata.reflection = Attack_SC_UpdateAttackStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Attack_SC_UpdateMonsterAttackStatus::kCharidFieldNumber;
const int Attack_SC_UpdateMonsterAttackStatus::kStatusFieldNumber;
#endif  // !_MSC_VER

Attack_SC_UpdateMonsterAttackStatus::Attack_SC_UpdateMonsterAttackStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Attack_SC_UpdateMonsterAttackStatus::InitAsDefaultInstance() {
}

Attack_SC_UpdateMonsterAttackStatus::Attack_SC_UpdateMonsterAttackStatus(const Attack_SC_UpdateMonsterAttackStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Attack_SC_UpdateMonsterAttackStatus::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  status_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Attack_SC_UpdateMonsterAttackStatus::~Attack_SC_UpdateMonsterAttackStatus() {
  SharedDtor();
}

void Attack_SC_UpdateMonsterAttackStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Attack_SC_UpdateMonsterAttackStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Attack_SC_UpdateMonsterAttackStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Attack_SC_UpdateMonsterAttackStatus_descriptor_;
}

const Attack_SC_UpdateMonsterAttackStatus& Attack_SC_UpdateMonsterAttackStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_attack_2eproto();
  return *default_instance_;
}

Attack_SC_UpdateMonsterAttackStatus* Attack_SC_UpdateMonsterAttackStatus::default_instance_ = NULL;

Attack_SC_UpdateMonsterAttackStatus* Attack_SC_UpdateMonsterAttackStatus::New() const {
  return new Attack_SC_UpdateMonsterAttackStatus;
}

void Attack_SC_UpdateMonsterAttackStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    status_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Attack_SC_UpdateMonsterAttackStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // optional bool status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Attack_SC_UpdateMonsterAttackStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional bool status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Attack_SC_UpdateMonsterAttackStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional bool status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Attack_SC_UpdateMonsterAttackStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional bool status = 2;
    if (has_status()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Attack_SC_UpdateMonsterAttackStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Attack_SC_UpdateMonsterAttackStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Attack_SC_UpdateMonsterAttackStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Attack_SC_UpdateMonsterAttackStatus::MergeFrom(const Attack_SC_UpdateMonsterAttackStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Attack_SC_UpdateMonsterAttackStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Attack_SC_UpdateMonsterAttackStatus::CopyFrom(const Attack_SC_UpdateMonsterAttackStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Attack_SC_UpdateMonsterAttackStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Attack_SC_UpdateMonsterAttackStatus::Swap(Attack_SC_UpdateMonsterAttackStatus* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Attack_SC_UpdateMonsterAttackStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Attack_SC_UpdateMonsterAttackStatus_descriptor_;
  metadata.reflection = Attack_SC_UpdateMonsterAttackStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Attack_SC_Block::kCharidFieldNumber;
#endif  // !_MSC_VER

Attack_SC_Block::Attack_SC_Block()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Attack_SC_Block::InitAsDefaultInstance() {
}

Attack_SC_Block::Attack_SC_Block(const Attack_SC_Block& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Attack_SC_Block::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Attack_SC_Block::~Attack_SC_Block() {
  SharedDtor();
}

void Attack_SC_Block::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Attack_SC_Block::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Attack_SC_Block::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Attack_SC_Block_descriptor_;
}

const Attack_SC_Block& Attack_SC_Block::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_attack_2eproto();
  return *default_instance_;
}

Attack_SC_Block* Attack_SC_Block::default_instance_ = NULL;

Attack_SC_Block* Attack_SC_Block::New() const {
  return new Attack_SC_Block;
}

void Attack_SC_Block::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Attack_SC_Block::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Attack_SC_Block::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Attack_SC_Block::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Attack_SC_Block::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Attack_SC_Block::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Attack_SC_Block* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Attack_SC_Block*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Attack_SC_Block::MergeFrom(const Attack_SC_Block& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Attack_SC_Block::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Attack_SC_Block::CopyFrom(const Attack_SC_Block& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Attack_SC_Block::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Attack_SC_Block::Swap(Attack_SC_Block* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Attack_SC_Block::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Attack_SC_Block_descriptor_;
  metadata.reflection = Attack_SC_Block_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Attack_SC_UpdateFlagCamp::kCharidFieldNumber;
const int Attack_SC_UpdateFlagCamp::kFlagCampFieldNumber;
#endif  // !_MSC_VER

Attack_SC_UpdateFlagCamp::Attack_SC_UpdateFlagCamp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Attack_SC_UpdateFlagCamp::InitAsDefaultInstance() {
}

Attack_SC_UpdateFlagCamp::Attack_SC_UpdateFlagCamp(const Attack_SC_UpdateFlagCamp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Attack_SC_UpdateFlagCamp::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0;
  flag_camp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Attack_SC_UpdateFlagCamp::~Attack_SC_UpdateFlagCamp() {
  SharedDtor();
}

void Attack_SC_UpdateFlagCamp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Attack_SC_UpdateFlagCamp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Attack_SC_UpdateFlagCamp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Attack_SC_UpdateFlagCamp_descriptor_;
}

const Attack_SC_UpdateFlagCamp& Attack_SC_UpdateFlagCamp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_attack_2eproto();
  return *default_instance_;
}

Attack_SC_UpdateFlagCamp* Attack_SC_UpdateFlagCamp::default_instance_ = NULL;

Attack_SC_UpdateFlagCamp* Attack_SC_UpdateFlagCamp::New() const {
  return new Attack_SC_UpdateFlagCamp;
}

void Attack_SC_UpdateFlagCamp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0;
    flag_camp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Attack_SC_UpdateFlagCamp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_flag_camp;
        break;
      }

      // optional int32 flag_camp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag_camp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_camp_)));
          set_has_flag_camp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Attack_SC_UpdateFlagCamp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->charid(), output);
  }

  // optional int32 flag_camp = 2;
  if (has_flag_camp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->flag_camp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Attack_SC_UpdateFlagCamp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->charid(), target);
  }

  // optional int32 flag_camp = 2;
  if (has_flag_camp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->flag_camp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Attack_SC_UpdateFlagCamp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->charid());
    }

    // optional int32 flag_camp = 2;
    if (has_flag_camp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag_camp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Attack_SC_UpdateFlagCamp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Attack_SC_UpdateFlagCamp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Attack_SC_UpdateFlagCamp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Attack_SC_UpdateFlagCamp::MergeFrom(const Attack_SC_UpdateFlagCamp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_flag_camp()) {
      set_flag_camp(from.flag_camp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Attack_SC_UpdateFlagCamp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Attack_SC_UpdateFlagCamp::CopyFrom(const Attack_SC_UpdateFlagCamp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Attack_SC_UpdateFlagCamp::IsInitialized() const {

  return true;
}

void Attack_SC_UpdateFlagCamp::Swap(Attack_SC_UpdateFlagCamp* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(flag_camp_, other->flag_camp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Attack_SC_UpdateFlagCamp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Attack_SC_UpdateFlagCamp_descriptor_;
  metadata.reflection = Attack_SC_UpdateFlagCamp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Attack_SC_RelivePos::kPlyIdFieldNumber;
const int Attack_SC_RelivePos::kCurHPFieldNumber;
const int Attack_SC_RelivePos::kMaxHPFieldNumber;
const int Attack_SC_RelivePos::kPtFieldNumber;
const int Attack_SC_RelivePos::kDirFieldNumber;
#endif  // !_MSC_VER

Attack_SC_RelivePos::Attack_SC_RelivePos()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Attack_SC_RelivePos::InitAsDefaultInstance() {
  pt_ = const_cast< ::proto::message::Point3D*>(&::proto::message::Point3D::default_instance());
}

Attack_SC_RelivePos::Attack_SC_RelivePos(const Attack_SC_RelivePos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Attack_SC_RelivePos::SharedCtor() {
  _cached_size_ = 0;
  plyid_ = 0u;
  curhp_ = 0;
  maxhp_ = 0u;
  pt_ = NULL;
  dir_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Attack_SC_RelivePos::~Attack_SC_RelivePos() {
  SharedDtor();
}

void Attack_SC_RelivePos::SharedDtor() {
  if (this != default_instance_) {
    delete pt_;
  }
}

void Attack_SC_RelivePos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Attack_SC_RelivePos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Attack_SC_RelivePos_descriptor_;
}

const Attack_SC_RelivePos& Attack_SC_RelivePos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_attack_2eproto();
  return *default_instance_;
}

Attack_SC_RelivePos* Attack_SC_RelivePos::default_instance_ = NULL;

Attack_SC_RelivePos* Attack_SC_RelivePos::New() const {
  return new Attack_SC_RelivePos;
}

void Attack_SC_RelivePos::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    plyid_ = 0u;
    curhp_ = 0;
    maxhp_ = 0u;
    if (has_pt()) {
      if (pt_ != NULL) pt_->::proto::message::Point3D::Clear();
    }
    dir_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Attack_SC_RelivePos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 PlyId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &plyid_)));
          set_has_plyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_CurHP;
        break;
      }

      // optional int32 CurHP = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CurHP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curhp_)));
          set_has_curhp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_MaxHP;
        break;
      }

      // optional uint32 MaxHP = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MaxHP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxhp_)));
          set_has_maxhp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_Pt;
        break;
      }

      // optional .proto.message.Point3D Pt = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Pt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_Dir;
        break;
      }

      // optional float Dir = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Dir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dir_)));
          set_has_dir();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Attack_SC_RelivePos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 PlyId = 1;
  if (has_plyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->plyid(), output);
  }

  // optional int32 CurHP = 2;
  if (has_curhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->curhp(), output);
  }

  // optional uint32 MaxHP = 3;
  if (has_maxhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->maxhp(), output);
  }

  // optional .proto.message.Point3D Pt = 4;
  if (has_pt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->pt(), output);
  }

  // optional float Dir = 5;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->dir(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Attack_SC_RelivePos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 PlyId = 1;
  if (has_plyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->plyid(), target);
  }

  // optional int32 CurHP = 2;
  if (has_curhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->curhp(), target);
  }

  // optional uint32 MaxHP = 3;
  if (has_maxhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->maxhp(), target);
  }

  // optional .proto.message.Point3D Pt = 4;
  if (has_pt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->pt(), target);
  }

  // optional float Dir = 5;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->dir(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Attack_SC_RelivePos::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 PlyId = 1;
    if (has_plyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->plyid());
    }

    // optional int32 CurHP = 2;
    if (has_curhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curhp());
    }

    // optional uint32 MaxHP = 3;
    if (has_maxhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxhp());
    }

    // optional .proto.message.Point3D Pt = 4;
    if (has_pt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pt());
    }

    // optional float Dir = 5;
    if (has_dir()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Attack_SC_RelivePos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Attack_SC_RelivePos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Attack_SC_RelivePos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Attack_SC_RelivePos::MergeFrom(const Attack_SC_RelivePos& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_plyid()) {
      set_plyid(from.plyid());
    }
    if (from.has_curhp()) {
      set_curhp(from.curhp());
    }
    if (from.has_maxhp()) {
      set_maxhp(from.maxhp());
    }
    if (from.has_pt()) {
      mutable_pt()->::proto::message::Point3D::MergeFrom(from.pt());
    }
    if (from.has_dir()) {
      set_dir(from.dir());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Attack_SC_RelivePos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Attack_SC_RelivePos::CopyFrom(const Attack_SC_RelivePos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Attack_SC_RelivePos::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Attack_SC_RelivePos::Swap(Attack_SC_RelivePos* other) {
  if (other != this) {
    std::swap(plyid_, other->plyid_);
    std::swap(curhp_, other->curhp_);
    std::swap(maxhp_, other->maxhp_);
    std::swap(pt_, other->pt_);
    std::swap(dir_, other->dir_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Attack_SC_RelivePos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Attack_SC_RelivePos_descriptor_;
  metadata.reflection = Attack_SC_RelivePos_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Attack_SC_UpdateGroupCD::kSkillidFieldNumber;
const int Attack_SC_UpdateGroupCD::kGroupidFieldNumber;
const int Attack_SC_UpdateGroupCD::kEndtickFieldNumber;
#endif  // !_MSC_VER

Attack_SC_UpdateGroupCD::Attack_SC_UpdateGroupCD()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Attack_SC_UpdateGroupCD::InitAsDefaultInstance() {
}

Attack_SC_UpdateGroupCD::Attack_SC_UpdateGroupCD(const Attack_SC_UpdateGroupCD& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Attack_SC_UpdateGroupCD::SharedCtor() {
  _cached_size_ = 0;
  skillid_ = 0;
  groupid_ = 0;
  endtick_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Attack_SC_UpdateGroupCD::~Attack_SC_UpdateGroupCD() {
  SharedDtor();
}

void Attack_SC_UpdateGroupCD::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Attack_SC_UpdateGroupCD::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Attack_SC_UpdateGroupCD::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Attack_SC_UpdateGroupCD_descriptor_;
}

const Attack_SC_UpdateGroupCD& Attack_SC_UpdateGroupCD::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_attack_2eproto();
  return *default_instance_;
}

Attack_SC_UpdateGroupCD* Attack_SC_UpdateGroupCD::default_instance_ = NULL;

Attack_SC_UpdateGroupCD* Attack_SC_UpdateGroupCD::New() const {
  return new Attack_SC_UpdateGroupCD;
}

void Attack_SC_UpdateGroupCD::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skillid_ = 0;
    groupid_ = 0;
    endtick_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Attack_SC_UpdateGroupCD::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 skillid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_groupid;
        break;
      }

      // optional int32 groupid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_groupid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_endtick;
        break;
      }

      // optional int64 endtick = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endtick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &endtick_)));
          set_has_endtick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Attack_SC_UpdateGroupCD::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 skillid = 1;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->skillid(), output);
  }

  // optional int32 groupid = 2;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->groupid(), output);
  }

  // optional int64 endtick = 3;
  if (has_endtick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->endtick(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Attack_SC_UpdateGroupCD::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 skillid = 1;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->skillid(), target);
  }

  // optional int32 groupid = 2;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->groupid(), target);
  }

  // optional int64 endtick = 3;
  if (has_endtick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->endtick(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Attack_SC_UpdateGroupCD::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 skillid = 1;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillid());
    }

    // optional int32 groupid = 2;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->groupid());
    }

    // optional int64 endtick = 3;
    if (has_endtick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->endtick());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Attack_SC_UpdateGroupCD::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Attack_SC_UpdateGroupCD* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Attack_SC_UpdateGroupCD*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Attack_SC_UpdateGroupCD::MergeFrom(const Attack_SC_UpdateGroupCD& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_endtick()) {
      set_endtick(from.endtick());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Attack_SC_UpdateGroupCD::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Attack_SC_UpdateGroupCD::CopyFrom(const Attack_SC_UpdateGroupCD& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Attack_SC_UpdateGroupCD::IsInitialized() const {

  return true;
}

void Attack_SC_UpdateGroupCD::Swap(Attack_SC_UpdateGroupCD* other) {
  if (other != this) {
    std::swap(skillid_, other->skillid_);
    std::swap(groupid_, other->groupid_);
    std::swap(endtick_, other->endtick_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Attack_SC_UpdateGroupCD::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Attack_SC_UpdateGroupCD_descriptor_;
  metadata.reflection = Attack_SC_UpdateGroupCD_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace proto

// @@protoc_insertion_point(global_scope)
