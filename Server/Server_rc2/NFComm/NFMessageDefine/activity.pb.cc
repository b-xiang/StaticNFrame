// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: activity.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "activity.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace message {

namespace {

const ::google::protobuf::Descriptor* ActivityIDTimes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivityIDTimes_reflection_ = NULL;
const ::google::protobuf::Descriptor* Activity_CS_EnterActivity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Activity_CS_EnterActivity_reflection_ = NULL;
const ::google::protobuf::Descriptor* Activity_SC_EnterActivity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Activity_SC_EnterActivity_reflection_ = NULL;
const ::google::protobuf::Descriptor* Activity_SC_UpdateRewardTimes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Activity_SC_UpdateRewardTimes_reflection_ = NULL;
const ::google::protobuf::Descriptor* Activity_CS_GetOpenActivity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Activity_CS_GetOpenActivity_reflection_ = NULL;
const ::google::protobuf::Descriptor* Activity_SC_GetOpenActivity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Activity_SC_GetOpenActivity_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActivityStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivityStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* Activity_SC_UpdteActivityStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Activity_SC_UpdteActivityStatus_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_activity_2eproto() {
  protobuf_AddDesc_activity_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "activity.proto");
  GOOGLE_CHECK(file != NULL);
  ActivityIDTimes_descriptor_ = file->message_type(0);
  static const int ActivityIDTimes_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityIDTimes, usual_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityIDTimes, reward_times_),
  };
  ActivityIDTimes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActivityIDTimes_descriptor_,
      ActivityIDTimes::default_instance_,
      ActivityIDTimes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityIDTimes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityIDTimes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActivityIDTimes));
  Activity_CS_EnterActivity_descriptor_ = file->message_type(1);
  static const int Activity_CS_EnterActivity_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_CS_EnterActivity, usual_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_CS_EnterActivity, parameter_),
  };
  Activity_CS_EnterActivity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Activity_CS_EnterActivity_descriptor_,
      Activity_CS_EnterActivity::default_instance_,
      Activity_CS_EnterActivity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_CS_EnterActivity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_CS_EnterActivity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Activity_CS_EnterActivity));
  Activity_SC_EnterActivity_descriptor_ = file->message_type(2);
  static const int Activity_SC_EnterActivity_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_EnterActivity, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_EnterActivity, usual_id_),
  };
  Activity_SC_EnterActivity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Activity_SC_EnterActivity_descriptor_,
      Activity_SC_EnterActivity::default_instance_,
      Activity_SC_EnterActivity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_EnterActivity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_EnterActivity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Activity_SC_EnterActivity));
  Activity_SC_UpdateRewardTimes_descriptor_ = file->message_type(3);
  static const int Activity_SC_UpdateRewardTimes_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_UpdateRewardTimes, activity_list_),
  };
  Activity_SC_UpdateRewardTimes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Activity_SC_UpdateRewardTimes_descriptor_,
      Activity_SC_UpdateRewardTimes::default_instance_,
      Activity_SC_UpdateRewardTimes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_UpdateRewardTimes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_UpdateRewardTimes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Activity_SC_UpdateRewardTimes));
  Activity_CS_GetOpenActivity_descriptor_ = file->message_type(4);
  static const int Activity_CS_GetOpenActivity_offsets_[1] = {
  };
  Activity_CS_GetOpenActivity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Activity_CS_GetOpenActivity_descriptor_,
      Activity_CS_GetOpenActivity::default_instance_,
      Activity_CS_GetOpenActivity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_CS_GetOpenActivity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_CS_GetOpenActivity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Activity_CS_GetOpenActivity));
  Activity_SC_GetOpenActivity_descriptor_ = file->message_type(5);
  static const int Activity_SC_GetOpenActivity_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_GetOpenActivity, usual_id_list_),
  };
  Activity_SC_GetOpenActivity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Activity_SC_GetOpenActivity_descriptor_,
      Activity_SC_GetOpenActivity::default_instance_,
      Activity_SC_GetOpenActivity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_GetOpenActivity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_GetOpenActivity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Activity_SC_GetOpenActivity));
  ActivityStatus_descriptor_ = file->message_type(6);
  static const int ActivityStatus_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityStatus, usual_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityStatus, status_),
  };
  ActivityStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActivityStatus_descriptor_,
      ActivityStatus::default_instance_,
      ActivityStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActivityStatus));
  Activity_SC_UpdteActivityStatus_descriptor_ = file->message_type(7);
  static const int Activity_SC_UpdteActivityStatus_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_UpdteActivityStatus, usual_list_),
  };
  Activity_SC_UpdteActivityStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Activity_SC_UpdteActivityStatus_descriptor_,
      Activity_SC_UpdteActivityStatus::default_instance_,
      Activity_SC_UpdteActivityStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_UpdteActivityStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_UpdteActivityStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Activity_SC_UpdteActivityStatus));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_activity_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActivityIDTimes_descriptor_, &ActivityIDTimes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Activity_CS_EnterActivity_descriptor_, &Activity_CS_EnterActivity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Activity_SC_EnterActivity_descriptor_, &Activity_SC_EnterActivity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Activity_SC_UpdateRewardTimes_descriptor_, &Activity_SC_UpdateRewardTimes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Activity_CS_GetOpenActivity_descriptor_, &Activity_CS_GetOpenActivity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Activity_SC_GetOpenActivity_descriptor_, &Activity_SC_GetOpenActivity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActivityStatus_descriptor_, &ActivityStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Activity_SC_UpdteActivityStatus_descriptor_, &Activity_SC_UpdteActivityStatus::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_activity_2eproto() {
  delete ActivityIDTimes::default_instance_;
  delete ActivityIDTimes_reflection_;
  delete Activity_CS_EnterActivity::default_instance_;
  delete Activity_CS_EnterActivity_reflection_;
  delete Activity_SC_EnterActivity::default_instance_;
  delete Activity_SC_EnterActivity_reflection_;
  delete Activity_SC_UpdateRewardTimes::default_instance_;
  delete Activity_SC_UpdateRewardTimes_reflection_;
  delete Activity_CS_GetOpenActivity::default_instance_;
  delete Activity_CS_GetOpenActivity_reflection_;
  delete Activity_SC_GetOpenActivity::default_instance_;
  delete Activity_SC_GetOpenActivity_reflection_;
  delete ActivityStatus::default_instance_;
  delete ActivityStatus_reflection_;
  delete Activity_SC_UpdteActivityStatus::default_instance_;
  delete Activity_SC_UpdteActivityStatus_reflection_;
}

void protobuf_AddDesc_activity_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016activity.proto\022\rproto.message\"9\n\017Activ"
    "ityIDTimes\022\020\n\010usual_id\030\001 \001(\005\022\024\n\014reward_t"
    "imes\030\002 \001(\005\"@\n\031Activity_CS_EnterActivity\022"
    "\020\n\010usual_id\030\001 \001(\005\022\021\n\tparameter\030\002 \001(\005\"=\n\031"
    "Activity_SC_EnterActivity\022\016\n\006result\030\001 \001("
    "\005\022\020\n\010usual_id\030\002 \001(\005\"V\n\035Activity_SC_Updat"
    "eRewardTimes\0225\n\ractivity_list\030\001 \003(\0132\036.pr"
    "oto.message.ActivityIDTimes\"\035\n\033Activity_"
    "CS_GetOpenActivity\"4\n\033Activity_SC_GetOpe"
    "nActivity\022\025\n\rusual_id_list\030\001 \003(\r\"2\n\016Acti"
    "vityStatus\022\020\n\010usual_id\030\001 \001(\r\022\016\n\006status\030\002"
    " \001(\005\"T\n\037Activity_SC_UpdteActivityStatus\022"
    "1\n\nusual_list\030\001 \003(\0132\035.proto.message.Acti"
    "vityStatusB\017\n\rproto.message", 547);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "activity.proto", &protobuf_RegisterTypes);
  ActivityIDTimes::default_instance_ = new ActivityIDTimes();
  Activity_CS_EnterActivity::default_instance_ = new Activity_CS_EnterActivity();
  Activity_SC_EnterActivity::default_instance_ = new Activity_SC_EnterActivity();
  Activity_SC_UpdateRewardTimes::default_instance_ = new Activity_SC_UpdateRewardTimes();
  Activity_CS_GetOpenActivity::default_instance_ = new Activity_CS_GetOpenActivity();
  Activity_SC_GetOpenActivity::default_instance_ = new Activity_SC_GetOpenActivity();
  ActivityStatus::default_instance_ = new ActivityStatus();
  Activity_SC_UpdteActivityStatus::default_instance_ = new Activity_SC_UpdteActivityStatus();
  ActivityIDTimes::default_instance_->InitAsDefaultInstance();
  Activity_CS_EnterActivity::default_instance_->InitAsDefaultInstance();
  Activity_SC_EnterActivity::default_instance_->InitAsDefaultInstance();
  Activity_SC_UpdateRewardTimes::default_instance_->InitAsDefaultInstance();
  Activity_CS_GetOpenActivity::default_instance_->InitAsDefaultInstance();
  Activity_SC_GetOpenActivity::default_instance_->InitAsDefaultInstance();
  ActivityStatus::default_instance_->InitAsDefaultInstance();
  Activity_SC_UpdteActivityStatus::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_activity_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_activity_2eproto {
  StaticDescriptorInitializer_activity_2eproto() {
    protobuf_AddDesc_activity_2eproto();
  }
} static_descriptor_initializer_activity_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ActivityIDTimes::kUsualIdFieldNumber;
const int ActivityIDTimes::kRewardTimesFieldNumber;
#endif  // !_MSC_VER

ActivityIDTimes::ActivityIDTimes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActivityIDTimes::InitAsDefaultInstance() {
}

ActivityIDTimes::ActivityIDTimes(const ActivityIDTimes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActivityIDTimes::SharedCtor() {
  _cached_size_ = 0;
  usual_id_ = 0;
  reward_times_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivityIDTimes::~ActivityIDTimes() {
  SharedDtor();
}

void ActivityIDTimes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActivityIDTimes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityIDTimes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityIDTimes_descriptor_;
}

const ActivityIDTimes& ActivityIDTimes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_activity_2eproto();
  return *default_instance_;
}

ActivityIDTimes* ActivityIDTimes::default_instance_ = NULL;

ActivityIDTimes* ActivityIDTimes::New() const {
  return new ActivityIDTimes;
}

void ActivityIDTimes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    usual_id_ = 0;
    reward_times_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActivityIDTimes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 usual_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usual_id_)));
          set_has_usual_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reward_times;
        break;
      }

      // optional int32 reward_times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_times_)));
          set_has_reward_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActivityIDTimes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 usual_id = 1;
  if (has_usual_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->usual_id(), output);
  }

  // optional int32 reward_times = 2;
  if (has_reward_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->reward_times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActivityIDTimes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 usual_id = 1;
  if (has_usual_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->usual_id(), target);
  }

  // optional int32 reward_times = 2;
  if (has_reward_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->reward_times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActivityIDTimes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 usual_id = 1;
    if (has_usual_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usual_id());
    }

    // optional int32 reward_times = 2;
    if (has_reward_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_times());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityIDTimes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActivityIDTimes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActivityIDTimes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActivityIDTimes::MergeFrom(const ActivityIDTimes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_usual_id()) {
      set_usual_id(from.usual_id());
    }
    if (from.has_reward_times()) {
      set_reward_times(from.reward_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActivityIDTimes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityIDTimes::CopyFrom(const ActivityIDTimes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityIDTimes::IsInitialized() const {

  return true;
}

void ActivityIDTimes::Swap(ActivityIDTimes* other) {
  if (other != this) {
    std::swap(usual_id_, other->usual_id_);
    std::swap(reward_times_, other->reward_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActivityIDTimes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivityIDTimes_descriptor_;
  metadata.reflection = ActivityIDTimes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Activity_CS_EnterActivity::kUsualIdFieldNumber;
const int Activity_CS_EnterActivity::kParameterFieldNumber;
#endif  // !_MSC_VER

Activity_CS_EnterActivity::Activity_CS_EnterActivity()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Activity_CS_EnterActivity::InitAsDefaultInstance() {
}

Activity_CS_EnterActivity::Activity_CS_EnterActivity(const Activity_CS_EnterActivity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Activity_CS_EnterActivity::SharedCtor() {
  _cached_size_ = 0;
  usual_id_ = 0;
  parameter_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Activity_CS_EnterActivity::~Activity_CS_EnterActivity() {
  SharedDtor();
}

void Activity_CS_EnterActivity::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Activity_CS_EnterActivity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Activity_CS_EnterActivity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Activity_CS_EnterActivity_descriptor_;
}

const Activity_CS_EnterActivity& Activity_CS_EnterActivity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_activity_2eproto();
  return *default_instance_;
}

Activity_CS_EnterActivity* Activity_CS_EnterActivity::default_instance_ = NULL;

Activity_CS_EnterActivity* Activity_CS_EnterActivity::New() const {
  return new Activity_CS_EnterActivity;
}

void Activity_CS_EnterActivity::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    usual_id_ = 0;
    parameter_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Activity_CS_EnterActivity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 usual_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usual_id_)));
          set_has_usual_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_parameter;
        break;
      }

      // optional int32 parameter = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_parameter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &parameter_)));
          set_has_parameter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Activity_CS_EnterActivity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 usual_id = 1;
  if (has_usual_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->usual_id(), output);
  }

  // optional int32 parameter = 2;
  if (has_parameter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->parameter(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Activity_CS_EnterActivity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 usual_id = 1;
  if (has_usual_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->usual_id(), target);
  }

  // optional int32 parameter = 2;
  if (has_parameter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->parameter(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Activity_CS_EnterActivity::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 usual_id = 1;
    if (has_usual_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usual_id());
    }

    // optional int32 parameter = 2;
    if (has_parameter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->parameter());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Activity_CS_EnterActivity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Activity_CS_EnterActivity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Activity_CS_EnterActivity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Activity_CS_EnterActivity::MergeFrom(const Activity_CS_EnterActivity& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_usual_id()) {
      set_usual_id(from.usual_id());
    }
    if (from.has_parameter()) {
      set_parameter(from.parameter());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Activity_CS_EnterActivity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Activity_CS_EnterActivity::CopyFrom(const Activity_CS_EnterActivity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Activity_CS_EnterActivity::IsInitialized() const {

  return true;
}

void Activity_CS_EnterActivity::Swap(Activity_CS_EnterActivity* other) {
  if (other != this) {
    std::swap(usual_id_, other->usual_id_);
    std::swap(parameter_, other->parameter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Activity_CS_EnterActivity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Activity_CS_EnterActivity_descriptor_;
  metadata.reflection = Activity_CS_EnterActivity_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Activity_SC_EnterActivity::kResultFieldNumber;
const int Activity_SC_EnterActivity::kUsualIdFieldNumber;
#endif  // !_MSC_VER

Activity_SC_EnterActivity::Activity_SC_EnterActivity()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Activity_SC_EnterActivity::InitAsDefaultInstance() {
}

Activity_SC_EnterActivity::Activity_SC_EnterActivity(const Activity_SC_EnterActivity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Activity_SC_EnterActivity::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  usual_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Activity_SC_EnterActivity::~Activity_SC_EnterActivity() {
  SharedDtor();
}

void Activity_SC_EnterActivity::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Activity_SC_EnterActivity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Activity_SC_EnterActivity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Activity_SC_EnterActivity_descriptor_;
}

const Activity_SC_EnterActivity& Activity_SC_EnterActivity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_activity_2eproto();
  return *default_instance_;
}

Activity_SC_EnterActivity* Activity_SC_EnterActivity::default_instance_ = NULL;

Activity_SC_EnterActivity* Activity_SC_EnterActivity::New() const {
  return new Activity_SC_EnterActivity;
}

void Activity_SC_EnterActivity::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    usual_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Activity_SC_EnterActivity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_usual_id;
        break;
      }

      // optional int32 usual_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usual_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usual_id_)));
          set_has_usual_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Activity_SC_EnterActivity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 usual_id = 2;
  if (has_usual_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->usual_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Activity_SC_EnterActivity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 usual_id = 2;
  if (has_usual_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->usual_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Activity_SC_EnterActivity::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 usual_id = 2;
    if (has_usual_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usual_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Activity_SC_EnterActivity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Activity_SC_EnterActivity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Activity_SC_EnterActivity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Activity_SC_EnterActivity::MergeFrom(const Activity_SC_EnterActivity& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_usual_id()) {
      set_usual_id(from.usual_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Activity_SC_EnterActivity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Activity_SC_EnterActivity::CopyFrom(const Activity_SC_EnterActivity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Activity_SC_EnterActivity::IsInitialized() const {

  return true;
}

void Activity_SC_EnterActivity::Swap(Activity_SC_EnterActivity* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(usual_id_, other->usual_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Activity_SC_EnterActivity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Activity_SC_EnterActivity_descriptor_;
  metadata.reflection = Activity_SC_EnterActivity_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Activity_SC_UpdateRewardTimes::kActivityListFieldNumber;
#endif  // !_MSC_VER

Activity_SC_UpdateRewardTimes::Activity_SC_UpdateRewardTimes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Activity_SC_UpdateRewardTimes::InitAsDefaultInstance() {
}

Activity_SC_UpdateRewardTimes::Activity_SC_UpdateRewardTimes(const Activity_SC_UpdateRewardTimes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Activity_SC_UpdateRewardTimes::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Activity_SC_UpdateRewardTimes::~Activity_SC_UpdateRewardTimes() {
  SharedDtor();
}

void Activity_SC_UpdateRewardTimes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Activity_SC_UpdateRewardTimes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Activity_SC_UpdateRewardTimes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Activity_SC_UpdateRewardTimes_descriptor_;
}

const Activity_SC_UpdateRewardTimes& Activity_SC_UpdateRewardTimes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_activity_2eproto();
  return *default_instance_;
}

Activity_SC_UpdateRewardTimes* Activity_SC_UpdateRewardTimes::default_instance_ = NULL;

Activity_SC_UpdateRewardTimes* Activity_SC_UpdateRewardTimes::New() const {
  return new Activity_SC_UpdateRewardTimes;
}

void Activity_SC_UpdateRewardTimes::Clear() {
  activity_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Activity_SC_UpdateRewardTimes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.message.ActivityIDTimes activity_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_activity_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_activity_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_activity_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Activity_SC_UpdateRewardTimes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.message.ActivityIDTimes activity_list = 1;
  for (int i = 0; i < this->activity_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->activity_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Activity_SC_UpdateRewardTimes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.message.ActivityIDTimes activity_list = 1;
  for (int i = 0; i < this->activity_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->activity_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Activity_SC_UpdateRewardTimes::ByteSize() const {
  int total_size = 0;

  // repeated .proto.message.ActivityIDTimes activity_list = 1;
  total_size += 1 * this->activity_list_size();
  for (int i = 0; i < this->activity_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->activity_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Activity_SC_UpdateRewardTimes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Activity_SC_UpdateRewardTimes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Activity_SC_UpdateRewardTimes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Activity_SC_UpdateRewardTimes::MergeFrom(const Activity_SC_UpdateRewardTimes& from) {
  GOOGLE_CHECK_NE(&from, this);
  activity_list_.MergeFrom(from.activity_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Activity_SC_UpdateRewardTimes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Activity_SC_UpdateRewardTimes::CopyFrom(const Activity_SC_UpdateRewardTimes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Activity_SC_UpdateRewardTimes::IsInitialized() const {

  return true;
}

void Activity_SC_UpdateRewardTimes::Swap(Activity_SC_UpdateRewardTimes* other) {
  if (other != this) {
    activity_list_.Swap(&other->activity_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Activity_SC_UpdateRewardTimes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Activity_SC_UpdateRewardTimes_descriptor_;
  metadata.reflection = Activity_SC_UpdateRewardTimes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Activity_CS_GetOpenActivity::Activity_CS_GetOpenActivity()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Activity_CS_GetOpenActivity::InitAsDefaultInstance() {
}

Activity_CS_GetOpenActivity::Activity_CS_GetOpenActivity(const Activity_CS_GetOpenActivity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Activity_CS_GetOpenActivity::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Activity_CS_GetOpenActivity::~Activity_CS_GetOpenActivity() {
  SharedDtor();
}

void Activity_CS_GetOpenActivity::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Activity_CS_GetOpenActivity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Activity_CS_GetOpenActivity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Activity_CS_GetOpenActivity_descriptor_;
}

const Activity_CS_GetOpenActivity& Activity_CS_GetOpenActivity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_activity_2eproto();
  return *default_instance_;
}

Activity_CS_GetOpenActivity* Activity_CS_GetOpenActivity::default_instance_ = NULL;

Activity_CS_GetOpenActivity* Activity_CS_GetOpenActivity::New() const {
  return new Activity_CS_GetOpenActivity;
}

void Activity_CS_GetOpenActivity::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Activity_CS_GetOpenActivity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Activity_CS_GetOpenActivity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Activity_CS_GetOpenActivity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Activity_CS_GetOpenActivity::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Activity_CS_GetOpenActivity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Activity_CS_GetOpenActivity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Activity_CS_GetOpenActivity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Activity_CS_GetOpenActivity::MergeFrom(const Activity_CS_GetOpenActivity& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Activity_CS_GetOpenActivity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Activity_CS_GetOpenActivity::CopyFrom(const Activity_CS_GetOpenActivity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Activity_CS_GetOpenActivity::IsInitialized() const {

  return true;
}

void Activity_CS_GetOpenActivity::Swap(Activity_CS_GetOpenActivity* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Activity_CS_GetOpenActivity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Activity_CS_GetOpenActivity_descriptor_;
  metadata.reflection = Activity_CS_GetOpenActivity_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Activity_SC_GetOpenActivity::kUsualIdListFieldNumber;
#endif  // !_MSC_VER

Activity_SC_GetOpenActivity::Activity_SC_GetOpenActivity()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Activity_SC_GetOpenActivity::InitAsDefaultInstance() {
}

Activity_SC_GetOpenActivity::Activity_SC_GetOpenActivity(const Activity_SC_GetOpenActivity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Activity_SC_GetOpenActivity::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Activity_SC_GetOpenActivity::~Activity_SC_GetOpenActivity() {
  SharedDtor();
}

void Activity_SC_GetOpenActivity::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Activity_SC_GetOpenActivity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Activity_SC_GetOpenActivity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Activity_SC_GetOpenActivity_descriptor_;
}

const Activity_SC_GetOpenActivity& Activity_SC_GetOpenActivity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_activity_2eproto();
  return *default_instance_;
}

Activity_SC_GetOpenActivity* Activity_SC_GetOpenActivity::default_instance_ = NULL;

Activity_SC_GetOpenActivity* Activity_SC_GetOpenActivity::New() const {
  return new Activity_SC_GetOpenActivity;
}

void Activity_SC_GetOpenActivity::Clear() {
  usual_id_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Activity_SC_GetOpenActivity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 usual_id_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usual_id_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_usual_id_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_usual_id_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_usual_id_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Activity_SC_GetOpenActivity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 usual_id_list = 1;
  for (int i = 0; i < this->usual_id_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->usual_id_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Activity_SC_GetOpenActivity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 usual_id_list = 1;
  for (int i = 0; i < this->usual_id_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->usual_id_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Activity_SC_GetOpenActivity::ByteSize() const {
  int total_size = 0;

  // repeated uint32 usual_id_list = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->usual_id_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->usual_id_list(i));
    }
    total_size += 1 * this->usual_id_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Activity_SC_GetOpenActivity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Activity_SC_GetOpenActivity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Activity_SC_GetOpenActivity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Activity_SC_GetOpenActivity::MergeFrom(const Activity_SC_GetOpenActivity& from) {
  GOOGLE_CHECK_NE(&from, this);
  usual_id_list_.MergeFrom(from.usual_id_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Activity_SC_GetOpenActivity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Activity_SC_GetOpenActivity::CopyFrom(const Activity_SC_GetOpenActivity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Activity_SC_GetOpenActivity::IsInitialized() const {

  return true;
}

void Activity_SC_GetOpenActivity::Swap(Activity_SC_GetOpenActivity* other) {
  if (other != this) {
    usual_id_list_.Swap(&other->usual_id_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Activity_SC_GetOpenActivity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Activity_SC_GetOpenActivity_descriptor_;
  metadata.reflection = Activity_SC_GetOpenActivity_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActivityStatus::kUsualIdFieldNumber;
const int ActivityStatus::kStatusFieldNumber;
#endif  // !_MSC_VER

ActivityStatus::ActivityStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActivityStatus::InitAsDefaultInstance() {
}

ActivityStatus::ActivityStatus(const ActivityStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActivityStatus::SharedCtor() {
  _cached_size_ = 0;
  usual_id_ = 0u;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivityStatus::~ActivityStatus() {
  SharedDtor();
}

void ActivityStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActivityStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityStatus_descriptor_;
}

const ActivityStatus& ActivityStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_activity_2eproto();
  return *default_instance_;
}

ActivityStatus* ActivityStatus::default_instance_ = NULL;

ActivityStatus* ActivityStatus::New() const {
  return new ActivityStatus;
}

void ActivityStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    usual_id_ = 0u;
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActivityStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 usual_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usual_id_)));
          set_has_usual_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // optional int32 status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActivityStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 usual_id = 1;
  if (has_usual_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->usual_id(), output);
  }

  // optional int32 status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActivityStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 usual_id = 1;
  if (has_usual_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->usual_id(), target);
  }

  // optional int32 status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActivityStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 usual_id = 1;
    if (has_usual_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usual_id());
    }

    // optional int32 status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActivityStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActivityStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActivityStatus::MergeFrom(const ActivityStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_usual_id()) {
      set_usual_id(from.usual_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActivityStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityStatus::CopyFrom(const ActivityStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityStatus::IsInitialized() const {

  return true;
}

void ActivityStatus::Swap(ActivityStatus* other) {
  if (other != this) {
    std::swap(usual_id_, other->usual_id_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActivityStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivityStatus_descriptor_;
  metadata.reflection = ActivityStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Activity_SC_UpdteActivityStatus::kUsualListFieldNumber;
#endif  // !_MSC_VER

Activity_SC_UpdteActivityStatus::Activity_SC_UpdteActivityStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Activity_SC_UpdteActivityStatus::InitAsDefaultInstance() {
}

Activity_SC_UpdteActivityStatus::Activity_SC_UpdteActivityStatus(const Activity_SC_UpdteActivityStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Activity_SC_UpdteActivityStatus::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Activity_SC_UpdteActivityStatus::~Activity_SC_UpdteActivityStatus() {
  SharedDtor();
}

void Activity_SC_UpdteActivityStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Activity_SC_UpdteActivityStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Activity_SC_UpdteActivityStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Activity_SC_UpdteActivityStatus_descriptor_;
}

const Activity_SC_UpdteActivityStatus& Activity_SC_UpdteActivityStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_activity_2eproto();
  return *default_instance_;
}

Activity_SC_UpdteActivityStatus* Activity_SC_UpdteActivityStatus::default_instance_ = NULL;

Activity_SC_UpdteActivityStatus* Activity_SC_UpdteActivityStatus::New() const {
  return new Activity_SC_UpdteActivityStatus;
}

void Activity_SC_UpdteActivityStatus::Clear() {
  usual_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Activity_SC_UpdteActivityStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.message.ActivityStatus usual_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_usual_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_usual_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_usual_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Activity_SC_UpdteActivityStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.message.ActivityStatus usual_list = 1;
  for (int i = 0; i < this->usual_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->usual_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Activity_SC_UpdteActivityStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.message.ActivityStatus usual_list = 1;
  for (int i = 0; i < this->usual_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->usual_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Activity_SC_UpdteActivityStatus::ByteSize() const {
  int total_size = 0;

  // repeated .proto.message.ActivityStatus usual_list = 1;
  total_size += 1 * this->usual_list_size();
  for (int i = 0; i < this->usual_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->usual_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Activity_SC_UpdteActivityStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Activity_SC_UpdteActivityStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Activity_SC_UpdteActivityStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Activity_SC_UpdteActivityStatus::MergeFrom(const Activity_SC_UpdteActivityStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  usual_list_.MergeFrom(from.usual_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Activity_SC_UpdteActivityStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Activity_SC_UpdteActivityStatus::CopyFrom(const Activity_SC_UpdteActivityStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Activity_SC_UpdteActivityStatus::IsInitialized() const {

  return true;
}

void Activity_SC_UpdteActivityStatus::Swap(Activity_SC_UpdteActivityStatus* other) {
  if (other != this) {
    usual_list_.Swap(&other->usual_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Activity_SC_UpdteActivityStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Activity_SC_UpdteActivityStatus_descriptor_;
  metadata.reflection = Activity_SC_UpdteActivityStatus_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace proto

// @@protoc_insertion_point(global_scope)
