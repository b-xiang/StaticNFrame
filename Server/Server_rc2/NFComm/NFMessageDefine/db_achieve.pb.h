// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: db_achieve.proto

#ifndef PROTOBUF_db_5fachieve_2eproto__INCLUDED
#define PROTOBUF_db_5fachieve_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "achieve.pb.h"
// @@protoc_insertion_point(includes)

namespace proto {
namespace message {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_db_5fachieve_2eproto();
void protobuf_AssignDesc_db_5fachieve_2eproto();
void protobuf_ShutdownFile_db_5fachieve_2eproto();

class DBAchieveInfo;

// ===================================================================

class DBAchieveInfo : public ::google::protobuf::Message {
 public:
  DBAchieveInfo();
  virtual ~DBAchieveInfo();

  DBAchieveInfo(const DBAchieveInfo& from);

  inline DBAchieveInfo& operator=(const DBAchieveInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DBAchieveInfo& default_instance();

  void Swap(DBAchieveInfo* other);

  // implements Message ----------------------------------------------

  DBAchieveInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DBAchieveInfo& from);
  void MergeFrom(const DBAchieveInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 achieve_points = 1;
  inline bool has_achieve_points() const;
  inline void clear_achieve_points();
  static const int kAchievePointsFieldNumber = 1;
  inline ::google::protobuf::int32 achieve_points() const;
  inline void set_achieve_points(::google::protobuf::int32 value);

  // repeated .proto.message.AchieveInfo achieve_list = 2;
  inline int achieve_list_size() const;
  inline void clear_achieve_list();
  static const int kAchieveListFieldNumber = 2;
  inline const ::proto::message::AchieveInfo& achieve_list(int index) const;
  inline ::proto::message::AchieveInfo* mutable_achieve_list(int index);
  inline ::proto::message::AchieveInfo* add_achieve_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::message::AchieveInfo >&
      achieve_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::message::AchieveInfo >*
      mutable_achieve_list();

  // repeated int32 achieve_pt_id_list = 3;
  inline int achieve_pt_id_list_size() const;
  inline void clear_achieve_pt_id_list();
  static const int kAchievePtIdListFieldNumber = 3;
  inline ::google::protobuf::int32 achieve_pt_id_list(int index) const;
  inline void set_achieve_pt_id_list(int index, ::google::protobuf::int32 value);
  inline void add_achieve_pt_id_list(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      achieve_pt_id_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_achieve_pt_id_list();

  // optional uint32 cup_id = 4;
  inline bool has_cup_id() const;
  inline void clear_cup_id();
  static const int kCupIdFieldNumber = 4;
  inline ::google::protobuf::uint32 cup_id() const;
  inline void set_cup_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.message.DBAchieveInfo)
 private:
  inline void set_has_achieve_points();
  inline void clear_has_achieve_points();
  inline void set_has_cup_id();
  inline void clear_has_cup_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto::message::AchieveInfo > achieve_list_;
  ::google::protobuf::int32 achieve_points_;
  ::google::protobuf::uint32 cup_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > achieve_pt_id_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_db_5fachieve_2eproto();
  friend void protobuf_AssignDesc_db_5fachieve_2eproto();
  friend void protobuf_ShutdownFile_db_5fachieve_2eproto();

  void InitAsDefaultInstance();
  static DBAchieveInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// DBAchieveInfo

// optional int32 achieve_points = 1;
inline bool DBAchieveInfo::has_achieve_points() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DBAchieveInfo::set_has_achieve_points() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DBAchieveInfo::clear_has_achieve_points() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DBAchieveInfo::clear_achieve_points() {
  achieve_points_ = 0;
  clear_has_achieve_points();
}
inline ::google::protobuf::int32 DBAchieveInfo::achieve_points() const {
  return achieve_points_;
}
inline void DBAchieveInfo::set_achieve_points(::google::protobuf::int32 value) {
  set_has_achieve_points();
  achieve_points_ = value;
}

// repeated .proto.message.AchieveInfo achieve_list = 2;
inline int DBAchieveInfo::achieve_list_size() const {
  return achieve_list_.size();
}
inline void DBAchieveInfo::clear_achieve_list() {
  achieve_list_.Clear();
}
inline const ::proto::message::AchieveInfo& DBAchieveInfo::achieve_list(int index) const {
  return achieve_list_.Get(index);
}
inline ::proto::message::AchieveInfo* DBAchieveInfo::mutable_achieve_list(int index) {
  return achieve_list_.Mutable(index);
}
inline ::proto::message::AchieveInfo* DBAchieveInfo::add_achieve_list() {
  return achieve_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::message::AchieveInfo >&
DBAchieveInfo::achieve_list() const {
  return achieve_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::message::AchieveInfo >*
DBAchieveInfo::mutable_achieve_list() {
  return &achieve_list_;
}

// repeated int32 achieve_pt_id_list = 3;
inline int DBAchieveInfo::achieve_pt_id_list_size() const {
  return achieve_pt_id_list_.size();
}
inline void DBAchieveInfo::clear_achieve_pt_id_list() {
  achieve_pt_id_list_.Clear();
}
inline ::google::protobuf::int32 DBAchieveInfo::achieve_pt_id_list(int index) const {
  return achieve_pt_id_list_.Get(index);
}
inline void DBAchieveInfo::set_achieve_pt_id_list(int index, ::google::protobuf::int32 value) {
  achieve_pt_id_list_.Set(index, value);
}
inline void DBAchieveInfo::add_achieve_pt_id_list(::google::protobuf::int32 value) {
  achieve_pt_id_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DBAchieveInfo::achieve_pt_id_list() const {
  return achieve_pt_id_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DBAchieveInfo::mutable_achieve_pt_id_list() {
  return &achieve_pt_id_list_;
}

// optional uint32 cup_id = 4;
inline bool DBAchieveInfo::has_cup_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DBAchieveInfo::set_has_cup_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DBAchieveInfo::clear_has_cup_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DBAchieveInfo::clear_cup_id() {
  cup_id_ = 0u;
  clear_has_cup_id();
}
inline ::google::protobuf::uint32 DBAchieveInfo::cup_id() const {
  return cup_id_;
}
inline void DBAchieveInfo::set_cup_id(::google::protobuf::uint32 value) {
  set_has_cup_id();
  cup_id_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace proto

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_db_5fachieve_2eproto__INCLUDED
