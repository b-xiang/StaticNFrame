// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: item.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "item.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace message {

namespace {

const ::google::protobuf::Descriptor* Item_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Item_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoneyItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoneyItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* SRandAttr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SRandAttr_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipGird_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipGird_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipSuit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipSuit_reflection_ = NULL;
const ::google::protobuf::Descriptor* Item_CS_GetBagInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Item_CS_GetBagInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Item_SC_GetBagInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Item_SC_GetBagInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Item_CS_UseBagItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Item_CS_UseBagItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* Item_SC_UseBagItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Item_SC_UseBagItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* Item_CS_SellItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Item_CS_SellItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* Item_SC_SellItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Item_SC_SellItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* Item_CS_DiscardItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Item_CS_DiscardItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* Item_SC_DiscardItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Item_SC_DiscardItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* Item_CS_AddBagGird_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Item_CS_AddBagGird_reflection_ = NULL;
const ::google::protobuf::Descriptor* Item_SC_AddBagGird_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Item_SC_AddBagGird_reflection_ = NULL;
const ::google::protobuf::Descriptor* Item_CS_GetTempBagInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Item_CS_GetTempBagInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Item_SC_GetTempBagInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Item_SC_GetTempBagInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Item_CS_GetBackItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Item_CS_GetBackItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* Item_SC_GetBackItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Item_SC_GetBackItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* Item_CS_GetBackAllItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Item_CS_GetBackAllItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* Item_CS_QueryChatItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Item_CS_QueryChatItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* Item_SC_QueryChatItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Item_SC_QueryChatItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* Item_CS_SetItemIDPos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Item_CS_SetItemIDPos_reflection_ = NULL;
const ::google::protobuf::Descriptor* Item_SC_SetItemIDPos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Item_SC_SetItemIDPos_reflection_ = NULL;
const ::google::protobuf::Descriptor* Item_SC_GetBackAllItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Item_SC_GetBackAllItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* Item_SC_UpdateBag_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Item_SC_UpdateBag_reflection_ = NULL;
const ::google::protobuf::Descriptor* Item_SC_UpdateChangeItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Item_SC_UpdateChangeItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* Item_SC_UpTempBag_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Item_SC_UpTempBag_reflection_ = NULL;
const ::google::protobuf::Descriptor* Item_SC_UpTempBagItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Item_SC_UpTempBagItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* Item_SC_UpSpecialItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Item_SC_UpSpecialItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* Item_SC_GetItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Item_SC_GetItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* DropItemNum_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DropItemNum_reflection_ = NULL;
const ::google::protobuf::Descriptor* Item_SC_DropItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Item_SC_DropItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* Item_SC_GetItemTips_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Item_SC_GetItemTips_reflection_ = NULL;
const ::google::protobuf::Descriptor* Item_CS_GetStoreInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Item_CS_GetStoreInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* StoreInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StoreInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Item_SC_GetStoreInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Item_SC_GetStoreInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Item_CS_ActivateStore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Item_CS_ActivateStore_reflection_ = NULL;
const ::google::protobuf::Descriptor* Item_SC_ActivateStore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Item_SC_ActivateStore_reflection_ = NULL;
const ::google::protobuf::Descriptor* Item_CS_InToStore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Item_CS_InToStore_reflection_ = NULL;
const ::google::protobuf::Descriptor* Item_SC_InToStore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Item_SC_InToStore_reflection_ = NULL;
const ::google::protobuf::Descriptor* Item_CS_OutFromStore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Item_CS_OutFromStore_reflection_ = NULL;
const ::google::protobuf::Descriptor* Item_SC_OutFromStore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Item_SC_OutFromStore_reflection_ = NULL;
const ::google::protobuf::Descriptor* Item_CS_PutOnEquip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Item_CS_PutOnEquip_reflection_ = NULL;
const ::google::protobuf::Descriptor* Item_SC_PutOnEquip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Item_SC_PutOnEquip_reflection_ = NULL;
const ::google::protobuf::Descriptor* Item_CS_GetOffEquip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Item_CS_GetOffEquip_reflection_ = NULL;
const ::google::protobuf::Descriptor* Item_SC_GetOffEquip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Item_SC_GetOffEquip_reflection_ = NULL;
const ::google::protobuf::Descriptor* Item_CS_EquipStrength_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Item_CS_EquipStrength_reflection_ = NULL;
const ::google::protobuf::Descriptor* Item_SC_EquipStrength_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Item_SC_EquipStrength_reflection_ = NULL;
const ::google::protobuf::Descriptor* Item_CS_EquipStarUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Item_CS_EquipStarUp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Item_SC_EquipStarUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Item_SC_EquipStarUp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Item_CS_EquipInlay_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Item_CS_EquipInlay_reflection_ = NULL;
const ::google::protobuf::Descriptor* Item_SC_EquipInlay_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Item_SC_EquipInlay_reflection_ = NULL;
const ::google::protobuf::Descriptor* Item_CS_EquipLevelUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Item_CS_EquipLevelUp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Item_SC_EquipLevelUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Item_SC_EquipLevelUp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Item_CS_EquipQualityUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Item_CS_EquipQualityUp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Item_SC_EquipQualityUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Item_SC_EquipQualityUp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Item_CS_IncreaseEquip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Item_CS_IncreaseEquip_reflection_ = NULL;
const ::google::protobuf::Descriptor* Item_SC_IncreaseEquip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Item_SC_IncreaseEquip_reflection_ = NULL;
const ::google::protobuf::Descriptor* Item_CS_ResolveEquip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Item_CS_ResolveEquip_reflection_ = NULL;
const ::google::protobuf::Descriptor* Item_SC_ResolveEquip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Item_SC_ResolveEquip_reflection_ = NULL;
const ::google::protobuf::Descriptor* Item_CS_EquipRandAttr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Item_CS_EquipRandAttr_reflection_ = NULL;
const ::google::protobuf::Descriptor* Item_SC_EquipRandAttr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Item_SC_EquipRandAttr_reflection_ = NULL;
const ::google::protobuf::Descriptor* Item_CS_EquipRefine_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Item_CS_EquipRefine_reflection_ = NULL;
const ::google::protobuf::Descriptor* Item_SC_EquipRefine_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Item_SC_EquipRefine_reflection_ = NULL;
const ::google::protobuf::Descriptor* Item_CS_EquipActiveSuit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Item_CS_EquipActiveSuit_reflection_ = NULL;
const ::google::protobuf::Descriptor* Item_SC_EquipActiveSuit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Item_SC_EquipActiveSuit_reflection_ = NULL;
const ::google::protobuf::Descriptor* Item_CS_EquipExchange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Item_CS_EquipExchange_reflection_ = NULL;
const ::google::protobuf::Descriptor* Item_SC_EquipExchange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Item_SC_EquipExchange_reflection_ = NULL;
const ::google::protobuf::Descriptor* Item_CS_Compose_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Item_CS_Compose_reflection_ = NULL;
const ::google::protobuf::Descriptor* Item_SC_Compose_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Item_SC_Compose_reflection_ = NULL;
const ::google::protobuf::Descriptor* Item_CS_Compose_Gem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Item_CS_Compose_Gem_reflection_ = NULL;
const ::google::protobuf::Descriptor* Item_SC_Compose_Gem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Item_SC_Compose_Gem_reflection_ = NULL;
const ::google::protobuf::Descriptor* Item_CS_EquipOrdRepair_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Item_CS_EquipOrdRepair_reflection_ = NULL;
const ::google::protobuf::Descriptor* Item_SC_EquipOrdRepair_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Item_SC_EquipOrdRepair_reflection_ = NULL;
const ::google::protobuf::Descriptor* Item_CS_EquipSpeRepair_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Item_CS_EquipSpeRepair_reflection_ = NULL;
const ::google::protobuf::Descriptor* Item_SC_EquipSpeRepair_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Item_SC_EquipSpeRepair_reflection_ = NULL;
const ::google::protobuf::Descriptor* Item_CS_JewelryExchange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Item_CS_JewelryExchange_reflection_ = NULL;
const ::google::protobuf::Descriptor* Item_SC_JewelryExchange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Item_SC_JewelryExchange_reflection_ = NULL;
const ::google::protobuf::Descriptor* Item_CS_IntegralExchange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Item_CS_IntegralExchange_reflection_ = NULL;
const ::google::protobuf::Descriptor* Item_SC_IntegralExchange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Item_SC_IntegralExchange_reflection_ = NULL;
const ::google::protobuf::Descriptor* Item_CS_MoneyExchange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Item_CS_MoneyExchange_reflection_ = NULL;
const ::google::protobuf::Descriptor* Item_SC_MoneyExchange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Item_SC_MoneyExchange_reflection_ = NULL;
const ::google::protobuf::Descriptor* IntegralPrice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IntegralPrice_reflection_ = NULL;
const ::google::protobuf::Descriptor* IntegralTimes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IntegralTimes_reflection_ = NULL;
const ::google::protobuf::Descriptor* Item_CS_GetIntegralPrice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Item_CS_GetIntegralPrice_reflection_ = NULL;
const ::google::protobuf::Descriptor* Item_SC_GetIntegralPrice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Item_SC_GetIntegralPrice_reflection_ = NULL;
const ::google::protobuf::Descriptor* Item_CS_FastBuy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Item_CS_FastBuy_reflection_ = NULL;
const ::google::protobuf::Descriptor* Item_SC_FastBuy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Item_SC_FastBuy_reflection_ = NULL;
const ::google::protobuf::Descriptor* DragonSoul_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DragonSoul_reflection_ = NULL;
const ::google::protobuf::Descriptor* Potential_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Potential_reflection_ = NULL;
const ::google::protobuf::Descriptor* Item_CS_Potential_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Item_CS_Potential_reflection_ = NULL;
const ::google::protobuf::Descriptor* Item_SC_Potential_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Item_SC_Potential_reflection_ = NULL;
const ::google::protobuf::Descriptor* Item_CS_PutOnSuit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Item_CS_PutOnSuit_reflection_ = NULL;
const ::google::protobuf::Descriptor* Item_SC_PutOnSuit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Item_SC_PutOnSuit_reflection_ = NULL;
const ::google::protobuf::Descriptor* Item_CS_TakeOpenReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Item_CS_TakeOpenReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* Item_SC_TakeOpenReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Item_SC_TakeOpenReward_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_item_2eproto() {
  protobuf_AddDesc_item_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "item.proto");
  GOOGLE_CHECK(file != NULL);
  Item_descriptor_ = file->message_type(0);
  static const int Item_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, gain_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, parameter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, frozen_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, qualitey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, bind_),
  };
  Item_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Item_descriptor_,
      Item::default_instance_,
      Item_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Item));
  MoneyItem_descriptor_ = file->message_type(1);
  static const int MoneyItem_offsets_[23] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyItem, silver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyItem, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyItem, diamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyItem, energy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyItem, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyItem, vigor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyItem, idy_points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyItem, friendship_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyItem, tal_points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyItem, guild_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyItem, guild_bonus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyItem, guild_contribution_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyItem, honour_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyItem, achieve_points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyItem, tutor_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyItem, festival_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyItem, chivalry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyItem, return_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyItem, awaken_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyItem, soulboxpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyItem, diamond_bind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyItem, mintage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyItem, roulette_score_),
  };
  MoneyItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoneyItem_descriptor_,
      MoneyItem::default_instance_,
      MoneyItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoneyItem));
  SRandAttr_descriptor_ = file->message_type(2);
  static const int SRandAttr_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRandAttr, uiattrid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRandAttr, uiattrval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRandAttr, uirefinelevel_),
  };
  SRandAttr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SRandAttr_descriptor_,
      SRandAttr::default_instance_,
      SRandAttr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRandAttr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRandAttr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SRandAttr));
  EquipGird_descriptor_ = file->message_type(3);
  static const int EquipGird_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipGird, uigirdpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipGird, uiupgradelevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipGird, uistarlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipGird, vecgem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipGird, vecrandattr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipGird, uistarupcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipGird, uibestequip_),
  };
  EquipGird_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipGird_descriptor_,
      EquipGird::default_instance_,
      EquipGird_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipGird, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipGird, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipGird));
  EquipSuit_descriptor_ = file->message_type(4);
  static const int EquipSuit_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipSuit, uisuitid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipSuit, uisuitattr_),
  };
  EquipSuit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipSuit_descriptor_,
      EquipSuit::default_instance_,
      EquipSuit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipSuit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipSuit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipSuit));
  Item_CS_GetBagInfo_descriptor_ = file->message_type(5);
  static const int Item_CS_GetBagInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_GetBagInfo, needredpointinfo_),
  };
  Item_CS_GetBagInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Item_CS_GetBagInfo_descriptor_,
      Item_CS_GetBagInfo::default_instance_,
      Item_CS_GetBagInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_GetBagInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_GetBagInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Item_CS_GetBagInfo));
  Item_SC_GetBagInfo_descriptor_ = file->message_type(6);
  static const int Item_SC_GetBagInfo_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_GetBagInfo, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_GetBagInfo, grid_num_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_GetBagInfo, grid_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_GetBagInfo, buy_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_GetBagInfo, item_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_GetBagInfo, equip_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_GetBagInfo, equipgird_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_GetBagInfo, suit_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_GetBagInfo, itemusecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_GetBagInfo, itemusecd_),
  };
  Item_SC_GetBagInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Item_SC_GetBagInfo_descriptor_,
      Item_SC_GetBagInfo::default_instance_,
      Item_SC_GetBagInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_GetBagInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_GetBagInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Item_SC_GetBagInfo));
  Item_CS_UseBagItem_descriptor_ = file->message_type(7);
  static const int Item_CS_UseBagItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_UseBagItem, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_UseBagItem, item_num_),
  };
  Item_CS_UseBagItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Item_CS_UseBagItem_descriptor_,
      Item_CS_UseBagItem::default_instance_,
      Item_CS_UseBagItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_UseBagItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_UseBagItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Item_CS_UseBagItem));
  Item_SC_UseBagItem_descriptor_ = file->message_type(8);
  static const int Item_SC_UseBagItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_UseBagItem, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_UseBagItem, item_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_UseBagItem, item_id_),
  };
  Item_SC_UseBagItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Item_SC_UseBagItem_descriptor_,
      Item_SC_UseBagItem::default_instance_,
      Item_SC_UseBagItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_UseBagItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_UseBagItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Item_SC_UseBagItem));
  Item_CS_SellItem_descriptor_ = file->message_type(9);
  static const int Item_CS_SellItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_SellItem, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_SellItem, item_num_),
  };
  Item_CS_SellItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Item_CS_SellItem_descriptor_,
      Item_CS_SellItem::default_instance_,
      Item_CS_SellItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_SellItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_SellItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Item_CS_SellItem));
  Item_SC_SellItem_descriptor_ = file->message_type(10);
  static const int Item_SC_SellItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_SellItem, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_SellItem, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_SellItem, item_num_),
  };
  Item_SC_SellItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Item_SC_SellItem_descriptor_,
      Item_SC_SellItem::default_instance_,
      Item_SC_SellItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_SellItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_SellItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Item_SC_SellItem));
  Item_CS_DiscardItem_descriptor_ = file->message_type(11);
  static const int Item_CS_DiscardItem_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_DiscardItem, uuid_),
  };
  Item_CS_DiscardItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Item_CS_DiscardItem_descriptor_,
      Item_CS_DiscardItem::default_instance_,
      Item_CS_DiscardItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_DiscardItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_DiscardItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Item_CS_DiscardItem));
  Item_SC_DiscardItem_descriptor_ = file->message_type(12);
  static const int Item_SC_DiscardItem_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_DiscardItem, result_),
  };
  Item_SC_DiscardItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Item_SC_DiscardItem_descriptor_,
      Item_SC_DiscardItem::default_instance_,
      Item_SC_DiscardItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_DiscardItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_DiscardItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Item_SC_DiscardItem));
  Item_CS_AddBagGird_descriptor_ = file->message_type(13);
  static const int Item_CS_AddBagGird_offsets_[1] = {
  };
  Item_CS_AddBagGird_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Item_CS_AddBagGird_descriptor_,
      Item_CS_AddBagGird::default_instance_,
      Item_CS_AddBagGird_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_AddBagGird, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_AddBagGird, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Item_CS_AddBagGird));
  Item_SC_AddBagGird_descriptor_ = file->message_type(14);
  static const int Item_SC_AddBagGird_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_AddBagGird, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_AddBagGird, gird_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_AddBagGird, buy_times_),
  };
  Item_SC_AddBagGird_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Item_SC_AddBagGird_descriptor_,
      Item_SC_AddBagGird::default_instance_,
      Item_SC_AddBagGird_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_AddBagGird, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_AddBagGird, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Item_SC_AddBagGird));
  Item_CS_GetTempBagInfo_descriptor_ = file->message_type(15);
  static const int Item_CS_GetTempBagInfo_offsets_[1] = {
  };
  Item_CS_GetTempBagInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Item_CS_GetTempBagInfo_descriptor_,
      Item_CS_GetTempBagInfo::default_instance_,
      Item_CS_GetTempBagInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_GetTempBagInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_GetTempBagInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Item_CS_GetTempBagInfo));
  Item_SC_GetTempBagInfo_descriptor_ = file->message_type(16);
  static const int Item_SC_GetTempBagInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_GetTempBagInfo, grid_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_GetTempBagInfo, item_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_GetTempBagInfo, equip_list_),
  };
  Item_SC_GetTempBagInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Item_SC_GetTempBagInfo_descriptor_,
      Item_SC_GetTempBagInfo::default_instance_,
      Item_SC_GetTempBagInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_GetTempBagInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_GetTempBagInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Item_SC_GetTempBagInfo));
  Item_CS_GetBackItem_descriptor_ = file->message_type(17);
  static const int Item_CS_GetBackItem_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_GetBackItem, uuid_),
  };
  Item_CS_GetBackItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Item_CS_GetBackItem_descriptor_,
      Item_CS_GetBackItem::default_instance_,
      Item_CS_GetBackItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_GetBackItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_GetBackItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Item_CS_GetBackItem));
  Item_SC_GetBackItem_descriptor_ = file->message_type(18);
  static const int Item_SC_GetBackItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_GetBackItem, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_GetBackItem, uuid_),
  };
  Item_SC_GetBackItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Item_SC_GetBackItem_descriptor_,
      Item_SC_GetBackItem::default_instance_,
      Item_SC_GetBackItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_GetBackItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_GetBackItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Item_SC_GetBackItem));
  Item_CS_GetBackAllItem_descriptor_ = file->message_type(19);
  static const int Item_CS_GetBackAllItem_offsets_[1] = {
  };
  Item_CS_GetBackAllItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Item_CS_GetBackAllItem_descriptor_,
      Item_CS_GetBackAllItem::default_instance_,
      Item_CS_GetBackAllItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_GetBackAllItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_GetBackAllItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Item_CS_GetBackAllItem));
  Item_CS_QueryChatItem_descriptor_ = file->message_type(20);
  static const int Item_CS_QueryChatItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_QueryChatItem, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_QueryChatItem, uuid_),
  };
  Item_CS_QueryChatItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Item_CS_QueryChatItem_descriptor_,
      Item_CS_QueryChatItem::default_instance_,
      Item_CS_QueryChatItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_QueryChatItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_QueryChatItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Item_CS_QueryChatItem));
  Item_SC_QueryChatItem_descriptor_ = file->message_type(21);
  static const int Item_SC_QueryChatItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_QueryChatItem, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_QueryChatItem, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_QueryChatItem, equip_),
  };
  Item_SC_QueryChatItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Item_SC_QueryChatItem_descriptor_,
      Item_SC_QueryChatItem::default_instance_,
      Item_SC_QueryChatItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_QueryChatItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_QueryChatItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Item_SC_QueryChatItem));
  Item_CS_SetItemIDPos_descriptor_ = file->message_type(22);
  static const int Item_CS_SetItemIDPos_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_SetItemIDPos, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_SetItemIDPos, pos_),
  };
  Item_CS_SetItemIDPos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Item_CS_SetItemIDPos_descriptor_,
      Item_CS_SetItemIDPos::default_instance_,
      Item_CS_SetItemIDPos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_SetItemIDPos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_SetItemIDPos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Item_CS_SetItemIDPos));
  Item_SC_SetItemIDPos_descriptor_ = file->message_type(23);
  static const int Item_SC_SetItemIDPos_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_SetItemIDPos, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_SetItemIDPos, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_SetItemIDPos, pos_),
  };
  Item_SC_SetItemIDPos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Item_SC_SetItemIDPos_descriptor_,
      Item_SC_SetItemIDPos::default_instance_,
      Item_SC_SetItemIDPos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_SetItemIDPos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_SetItemIDPos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Item_SC_SetItemIDPos));
  Item_SC_GetBackAllItem_descriptor_ = file->message_type(24);
  static const int Item_SC_GetBackAllItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_GetBackAllItem, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_GetBackAllItem, uuid_list_),
  };
  Item_SC_GetBackAllItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Item_SC_GetBackAllItem_descriptor_,
      Item_SC_GetBackAllItem::default_instance_,
      Item_SC_GetBackAllItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_GetBackAllItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_GetBackAllItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Item_SC_GetBackAllItem));
  Item_SC_UpdateBag_descriptor_ = file->message_type(25);
  static const int Item_SC_UpdateBag_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_UpdateBag, grid_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_UpdateBag, item_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_UpdateBag, equip_list_),
  };
  Item_SC_UpdateBag_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Item_SC_UpdateBag_descriptor_,
      Item_SC_UpdateBag::default_instance_,
      Item_SC_UpdateBag_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_UpdateBag, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_UpdateBag, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Item_SC_UpdateBag));
  Item_SC_UpdateChangeItem_descriptor_ = file->message_type(26);
  static const int Item_SC_UpdateChangeItem_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_UpdateChangeItem, bag_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_UpdateChangeItem, del_item_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_UpdateChangeItem, item_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_UpdateChangeItem, equip_list_),
  };
  Item_SC_UpdateChangeItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Item_SC_UpdateChangeItem_descriptor_,
      Item_SC_UpdateChangeItem::default_instance_,
      Item_SC_UpdateChangeItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_UpdateChangeItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_UpdateChangeItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Item_SC_UpdateChangeItem));
  Item_SC_UpTempBag_descriptor_ = file->message_type(27);
  static const int Item_SC_UpTempBag_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_UpTempBag, grid_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_UpTempBag, item_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_UpTempBag, equip_list_),
  };
  Item_SC_UpTempBag_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Item_SC_UpTempBag_descriptor_,
      Item_SC_UpTempBag::default_instance_,
      Item_SC_UpTempBag_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_UpTempBag, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_UpTempBag, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Item_SC_UpTempBag));
  Item_SC_UpTempBagItem_descriptor_ = file->message_type(28);
  static const int Item_SC_UpTempBagItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_UpTempBagItem, del_item_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_UpTempBagItem, item_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_UpTempBagItem, equip_list_),
  };
  Item_SC_UpTempBagItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Item_SC_UpTempBagItem_descriptor_,
      Item_SC_UpTempBagItem::default_instance_,
      Item_SC_UpTempBagItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_UpTempBagItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_UpTempBagItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Item_SC_UpTempBagItem));
  Item_SC_UpSpecialItem_descriptor_ = file->message_type(29);
  static const int Item_SC_UpSpecialItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_UpSpecialItem, stype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_UpSpecialItem, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_UpSpecialItem, getway_),
  };
  Item_SC_UpSpecialItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Item_SC_UpSpecialItem_descriptor_,
      Item_SC_UpSpecialItem::default_instance_,
      Item_SC_UpSpecialItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_UpSpecialItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_UpSpecialItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Item_SC_UpSpecialItem));
  Item_SC_GetItem_descriptor_ = file->message_type(30);
  static const int Item_SC_GetItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_GetItem, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_GetItem, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_GetItem, getway_),
  };
  Item_SC_GetItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Item_SC_GetItem_descriptor_,
      Item_SC_GetItem::default_instance_,
      Item_SC_GetItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_GetItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_GetItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Item_SC_GetItem));
  DropItemNum_descriptor_ = file->message_type(31);
  static const int DropItemNum_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropItemNum, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropItemNum, num_),
  };
  DropItemNum_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DropItemNum_descriptor_,
      DropItemNum::default_instance_,
      DropItemNum_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropItemNum, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropItemNum, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DropItemNum));
  Item_SC_DropItem_descriptor_ = file->message_type(32);
  static const int Item_SC_DropItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_DropItem, npc_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_DropItem, item_list_),
  };
  Item_SC_DropItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Item_SC_DropItem_descriptor_,
      Item_SC_DropItem::default_instance_,
      Item_SC_DropItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_DropItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_DropItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Item_SC_DropItem));
  Item_SC_GetItemTips_descriptor_ = file->message_type(33);
  static const int Item_SC_GetItemTips_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_GetItemTips, item_list_),
  };
  Item_SC_GetItemTips_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Item_SC_GetItemTips_descriptor_,
      Item_SC_GetItemTips::default_instance_,
      Item_SC_GetItemTips_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_GetItemTips, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_GetItemTips, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Item_SC_GetItemTips));
  Item_CS_GetStoreInfo_descriptor_ = file->message_type(34);
  static const int Item_CS_GetStoreInfo_offsets_[1] = {
  };
  Item_CS_GetStoreInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Item_CS_GetStoreInfo_descriptor_,
      Item_CS_GetStoreInfo::default_instance_,
      Item_CS_GetStoreInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_GetStoreInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_GetStoreInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Item_CS_GetStoreInfo));
  StoreInfo_descriptor_ = file->message_type(35);
  static const int StoreInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreInfo, grid_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreInfo, item_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreInfo, equip_list_),
  };
  StoreInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StoreInfo_descriptor_,
      StoreInfo::default_instance_,
      StoreInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StoreInfo));
  Item_SC_GetStoreInfo_descriptor_ = file->message_type(36);
  static const int Item_SC_GetStoreInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_GetStoreInfo, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_GetStoreInfo, store_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_GetStoreInfo, store_list_),
  };
  Item_SC_GetStoreInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Item_SC_GetStoreInfo_descriptor_,
      Item_SC_GetStoreInfo::default_instance_,
      Item_SC_GetStoreInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_GetStoreInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_GetStoreInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Item_SC_GetStoreInfo));
  Item_CS_ActivateStore_descriptor_ = file->message_type(37);
  static const int Item_CS_ActivateStore_offsets_[1] = {
  };
  Item_CS_ActivateStore_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Item_CS_ActivateStore_descriptor_,
      Item_CS_ActivateStore::default_instance_,
      Item_CS_ActivateStore_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_ActivateStore, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_ActivateStore, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Item_CS_ActivateStore));
  Item_SC_ActivateStore_descriptor_ = file->message_type(38);
  static const int Item_SC_ActivateStore_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_ActivateStore, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_ActivateStore, store_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_ActivateStore, gird_num_),
  };
  Item_SC_ActivateStore_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Item_SC_ActivateStore_descriptor_,
      Item_SC_ActivateStore::default_instance_,
      Item_SC_ActivateStore_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_ActivateStore, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_ActivateStore, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Item_SC_ActivateStore));
  Item_CS_InToStore_descriptor_ = file->message_type(39);
  static const int Item_CS_InToStore_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_InToStore, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_InToStore, storeid_),
  };
  Item_CS_InToStore_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Item_CS_InToStore_descriptor_,
      Item_CS_InToStore::default_instance_,
      Item_CS_InToStore_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_InToStore, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_InToStore, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Item_CS_InToStore));
  Item_SC_InToStore_descriptor_ = file->message_type(40);
  static const int Item_SC_InToStore_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_InToStore, result_),
  };
  Item_SC_InToStore_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Item_SC_InToStore_descriptor_,
      Item_SC_InToStore::default_instance_,
      Item_SC_InToStore_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_InToStore, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_InToStore, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Item_SC_InToStore));
  Item_CS_OutFromStore_descriptor_ = file->message_type(41);
  static const int Item_CS_OutFromStore_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_OutFromStore, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_OutFromStore, storeid_),
  };
  Item_CS_OutFromStore_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Item_CS_OutFromStore_descriptor_,
      Item_CS_OutFromStore::default_instance_,
      Item_CS_OutFromStore_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_OutFromStore, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_OutFromStore, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Item_CS_OutFromStore));
  Item_SC_OutFromStore_descriptor_ = file->message_type(42);
  static const int Item_SC_OutFromStore_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_OutFromStore, result_),
  };
  Item_SC_OutFromStore_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Item_SC_OutFromStore_descriptor_,
      Item_SC_OutFromStore::default_instance_,
      Item_SC_OutFromStore_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_OutFromStore, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_OutFromStore, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Item_SC_OutFromStore));
  Item_CS_PutOnEquip_descriptor_ = file->message_type(43);
  static const int Item_CS_PutOnEquip_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_PutOnEquip, uuid_),
  };
  Item_CS_PutOnEquip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Item_CS_PutOnEquip_descriptor_,
      Item_CS_PutOnEquip::default_instance_,
      Item_CS_PutOnEquip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_PutOnEquip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_PutOnEquip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Item_CS_PutOnEquip));
  Item_SC_PutOnEquip_descriptor_ = file->message_type(44);
  static const int Item_SC_PutOnEquip_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_PutOnEquip, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_PutOnEquip, equip_list_),
  };
  Item_SC_PutOnEquip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Item_SC_PutOnEquip_descriptor_,
      Item_SC_PutOnEquip::default_instance_,
      Item_SC_PutOnEquip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_PutOnEquip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_PutOnEquip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Item_SC_PutOnEquip));
  Item_CS_GetOffEquip_descriptor_ = file->message_type(45);
  static const int Item_CS_GetOffEquip_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_GetOffEquip, uuid_),
  };
  Item_CS_GetOffEquip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Item_CS_GetOffEquip_descriptor_,
      Item_CS_GetOffEquip::default_instance_,
      Item_CS_GetOffEquip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_GetOffEquip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_GetOffEquip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Item_CS_GetOffEquip));
  Item_SC_GetOffEquip_descriptor_ = file->message_type(46);
  static const int Item_SC_GetOffEquip_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_GetOffEquip, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_GetOffEquip, getoff_equip_),
  };
  Item_SC_GetOffEquip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Item_SC_GetOffEquip_descriptor_,
      Item_SC_GetOffEquip::default_instance_,
      Item_SC_GetOffEquip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_GetOffEquip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_GetOffEquip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Item_SC_GetOffEquip));
  Item_CS_EquipStrength_descriptor_ = file->message_type(47);
  static const int Item_CS_EquipStrength_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_EquipStrength, uiequippos_),
  };
  Item_CS_EquipStrength_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Item_CS_EquipStrength_descriptor_,
      Item_CS_EquipStrength::default_instance_,
      Item_CS_EquipStrength_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_EquipStrength, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_EquipStrength, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Item_CS_EquipStrength));
  Item_SC_EquipStrength_descriptor_ = file->message_type(48);
  static const int Item_SC_EquipStrength_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_EquipStrength, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_EquipStrength, uiequippos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_EquipStrength, uinewlevel_),
  };
  Item_SC_EquipStrength_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Item_SC_EquipStrength_descriptor_,
      Item_SC_EquipStrength::default_instance_,
      Item_SC_EquipStrength_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_EquipStrength, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_EquipStrength, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Item_SC_EquipStrength));
  Item_CS_EquipStarUp_descriptor_ = file->message_type(49);
  static const int Item_CS_EquipStarUp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_EquipStarUp, uiequippos_),
  };
  Item_CS_EquipStarUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Item_CS_EquipStarUp_descriptor_,
      Item_CS_EquipStarUp::default_instance_,
      Item_CS_EquipStarUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_EquipStarUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_EquipStarUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Item_CS_EquipStarUp));
  Item_SC_EquipStarUp_descriptor_ = file->message_type(50);
  static const int Item_SC_EquipStarUp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_EquipStarUp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_EquipStarUp, uiequippos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_EquipStarUp, uinewlevel_),
  };
  Item_SC_EquipStarUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Item_SC_EquipStarUp_descriptor_,
      Item_SC_EquipStarUp::default_instance_,
      Item_SC_EquipStarUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_EquipStarUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_EquipStarUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Item_SC_EquipStarUp));
  Item_CS_EquipInlay_descriptor_ = file->message_type(51);
  static const int Item_CS_EquipInlay_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_EquipInlay, uiequippos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_EquipInlay, uiinlaypos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_EquipInlay, uigemuuid_),
  };
  Item_CS_EquipInlay_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Item_CS_EquipInlay_descriptor_,
      Item_CS_EquipInlay::default_instance_,
      Item_CS_EquipInlay_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_EquipInlay, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_EquipInlay, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Item_CS_EquipInlay));
  Item_SC_EquipInlay_descriptor_ = file->message_type(52);
  static const int Item_SC_EquipInlay_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_EquipInlay, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_EquipInlay, uiequippos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_EquipInlay, uiinlaypos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_EquipInlay, uigemid_),
  };
  Item_SC_EquipInlay_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Item_SC_EquipInlay_descriptor_,
      Item_SC_EquipInlay::default_instance_,
      Item_SC_EquipInlay_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_EquipInlay, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_EquipInlay, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Item_SC_EquipInlay));
  Item_CS_EquipLevelUp_descriptor_ = file->message_type(53);
  static const int Item_CS_EquipLevelUp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_EquipLevelUp, uitargetuuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_EquipLevelUp, uimaterialuuid_),
  };
  Item_CS_EquipLevelUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Item_CS_EquipLevelUp_descriptor_,
      Item_CS_EquipLevelUp::default_instance_,
      Item_CS_EquipLevelUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_EquipLevelUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_EquipLevelUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Item_CS_EquipLevelUp));
  Item_SC_EquipLevelUp_descriptor_ = file->message_type(54);
  static const int Item_SC_EquipLevelUp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_EquipLevelUp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_EquipLevelUp, equip_),
  };
  Item_SC_EquipLevelUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Item_SC_EquipLevelUp_descriptor_,
      Item_SC_EquipLevelUp::default_instance_,
      Item_SC_EquipLevelUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_EquipLevelUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_EquipLevelUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Item_SC_EquipLevelUp));
  Item_CS_EquipQualityUp_descriptor_ = file->message_type(55);
  static const int Item_CS_EquipQualityUp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_EquipQualityUp, uuid_),
  };
  Item_CS_EquipQualityUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Item_CS_EquipQualityUp_descriptor_,
      Item_CS_EquipQualityUp::default_instance_,
      Item_CS_EquipQualityUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_EquipQualityUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_EquipQualityUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Item_CS_EquipQualityUp));
  Item_SC_EquipQualityUp_descriptor_ = file->message_type(56);
  static const int Item_SC_EquipQualityUp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_EquipQualityUp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_EquipQualityUp, equip_),
  };
  Item_SC_EquipQualityUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Item_SC_EquipQualityUp_descriptor_,
      Item_SC_EquipQualityUp::default_instance_,
      Item_SC_EquipQualityUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_EquipQualityUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_EquipQualityUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Item_SC_EquipQualityUp));
  Item_CS_IncreaseEquip_descriptor_ = file->message_type(57);
  static const int Item_CS_IncreaseEquip_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_IncreaseEquip, uuid_),
  };
  Item_CS_IncreaseEquip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Item_CS_IncreaseEquip_descriptor_,
      Item_CS_IncreaseEquip::default_instance_,
      Item_CS_IncreaseEquip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_IncreaseEquip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_IncreaseEquip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Item_CS_IncreaseEquip));
  Item_SC_IncreaseEquip_descriptor_ = file->message_type(58);
  static const int Item_SC_IncreaseEquip_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_IncreaseEquip, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_IncreaseEquip, equip_),
  };
  Item_SC_IncreaseEquip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Item_SC_IncreaseEquip_descriptor_,
      Item_SC_IncreaseEquip::default_instance_,
      Item_SC_IncreaseEquip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_IncreaseEquip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_IncreaseEquip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Item_SC_IncreaseEquip));
  Item_CS_ResolveEquip_descriptor_ = file->message_type(59);
  static const int Item_CS_ResolveEquip_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_ResolveEquip, uuid_),
  };
  Item_CS_ResolveEquip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Item_CS_ResolveEquip_descriptor_,
      Item_CS_ResolveEquip::default_instance_,
      Item_CS_ResolveEquip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_ResolveEquip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_ResolveEquip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Item_CS_ResolveEquip));
  Item_SC_ResolveEquip_descriptor_ = file->message_type(60);
  static const int Item_SC_ResolveEquip_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_ResolveEquip, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_ResolveEquip, item_id_),
  };
  Item_SC_ResolveEquip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Item_SC_ResolveEquip_descriptor_,
      Item_SC_ResolveEquip::default_instance_,
      Item_SC_ResolveEquip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_ResolveEquip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_ResolveEquip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Item_SC_ResolveEquip));
  Item_CS_EquipRandAttr_descriptor_ = file->message_type(61);
  static const int Item_CS_EquipRandAttr_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_EquipRandAttr, uiequippos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_EquipRandAttr, veclockpos_),
  };
  Item_CS_EquipRandAttr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Item_CS_EquipRandAttr_descriptor_,
      Item_CS_EquipRandAttr::default_instance_,
      Item_CS_EquipRandAttr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_EquipRandAttr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_EquipRandAttr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Item_CS_EquipRandAttr));
  Item_SC_EquipRandAttr_descriptor_ = file->message_type(62);
  static const int Item_SC_EquipRandAttr_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_EquipRandAttr, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_EquipRandAttr, uiequippos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_EquipRandAttr, vecrandattr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_EquipRandAttr, uiattrpos_),
  };
  Item_SC_EquipRandAttr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Item_SC_EquipRandAttr_descriptor_,
      Item_SC_EquipRandAttr::default_instance_,
      Item_SC_EquipRandAttr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_EquipRandAttr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_EquipRandAttr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Item_SC_EquipRandAttr));
  Item_CS_EquipRefine_descriptor_ = file->message_type(63);
  static const int Item_CS_EquipRefine_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_EquipRefine, uiequippos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_EquipRefine, vecrefinepos_),
  };
  Item_CS_EquipRefine_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Item_CS_EquipRefine_descriptor_,
      Item_CS_EquipRefine::default_instance_,
      Item_CS_EquipRefine_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_EquipRefine, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_EquipRefine, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Item_CS_EquipRefine));
  Item_SC_EquipRefine_descriptor_ = file->message_type(64);
  static const int Item_SC_EquipRefine_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_EquipRefine, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_EquipRefine, uiequippos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_EquipRefine, vecrandattr_),
  };
  Item_SC_EquipRefine_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Item_SC_EquipRefine_descriptor_,
      Item_SC_EquipRefine::default_instance_,
      Item_SC_EquipRefine_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_EquipRefine, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_EquipRefine, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Item_SC_EquipRefine));
  Item_CS_EquipActiveSuit_descriptor_ = file->message_type(65);
  static const int Item_CS_EquipActiveSuit_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_EquipActiveSuit, uisuitid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_EquipActiveSuit, uistep_),
  };
  Item_CS_EquipActiveSuit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Item_CS_EquipActiveSuit_descriptor_,
      Item_CS_EquipActiveSuit::default_instance_,
      Item_CS_EquipActiveSuit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_EquipActiveSuit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_EquipActiveSuit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Item_CS_EquipActiveSuit));
  Item_SC_EquipActiveSuit_descriptor_ = file->message_type(66);
  static const int Item_SC_EquipActiveSuit_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_EquipActiveSuit, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_EquipActiveSuit, uisuitid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_EquipActiveSuit, uistep_),
  };
  Item_SC_EquipActiveSuit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Item_SC_EquipActiveSuit_descriptor_,
      Item_SC_EquipActiveSuit::default_instance_,
      Item_SC_EquipActiveSuit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_EquipActiveSuit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_EquipActiveSuit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Item_SC_EquipActiveSuit));
  Item_CS_EquipExchange_descriptor_ = file->message_type(67);
  static const int Item_CS_EquipExchange_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_EquipExchange, uiexchangeid_),
  };
  Item_CS_EquipExchange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Item_CS_EquipExchange_descriptor_,
      Item_CS_EquipExchange::default_instance_,
      Item_CS_EquipExchange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_EquipExchange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_EquipExchange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Item_CS_EquipExchange));
  Item_SC_EquipExchange_descriptor_ = file->message_type(68);
  static const int Item_SC_EquipExchange_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_EquipExchange, result_),
  };
  Item_SC_EquipExchange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Item_SC_EquipExchange_descriptor_,
      Item_SC_EquipExchange::default_instance_,
      Item_SC_EquipExchange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_EquipExchange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_EquipExchange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Item_SC_EquipExchange));
  Item_CS_Compose_descriptor_ = file->message_type(69);
  static const int Item_CS_Compose_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_Compose, uitableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_Compose, uinum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_Compose, uimaterialuuid_),
  };
  Item_CS_Compose_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Item_CS_Compose_descriptor_,
      Item_CS_Compose::default_instance_,
      Item_CS_Compose_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_Compose, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_Compose, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Item_CS_Compose));
  Item_SC_Compose_descriptor_ = file->message_type(70);
  static const int Item_SC_Compose_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_Compose, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_Compose, newitem_),
  };
  Item_SC_Compose_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Item_SC_Compose_descriptor_,
      Item_SC_Compose::default_instance_,
      Item_SC_Compose_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_Compose, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_Compose, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Item_SC_Compose));
  Item_CS_Compose_Gem_descriptor_ = file->message_type(71);
  static const int Item_CS_Compose_Gem_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_Compose_Gem, uiequippos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_Compose_Gem, uiinlaypos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_Compose_Gem, vecmaterialuuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_Compose_Gem, vecmaterialnum_),
  };
  Item_CS_Compose_Gem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Item_CS_Compose_Gem_descriptor_,
      Item_CS_Compose_Gem::default_instance_,
      Item_CS_Compose_Gem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_Compose_Gem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_Compose_Gem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Item_CS_Compose_Gem));
  Item_SC_Compose_Gem_descriptor_ = file->message_type(72);
  static const int Item_SC_Compose_Gem_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_Compose_Gem, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_Compose_Gem, uiequippos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_Compose_Gem, uiinlaypos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_Compose_Gem, uinewgemid_),
  };
  Item_SC_Compose_Gem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Item_SC_Compose_Gem_descriptor_,
      Item_SC_Compose_Gem::default_instance_,
      Item_SC_Compose_Gem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_Compose_Gem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_Compose_Gem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Item_SC_Compose_Gem));
  Item_CS_EquipOrdRepair_descriptor_ = file->message_type(73);
  static const int Item_CS_EquipOrdRepair_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_EquipOrdRepair, uuid_),
  };
  Item_CS_EquipOrdRepair_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Item_CS_EquipOrdRepair_descriptor_,
      Item_CS_EquipOrdRepair::default_instance_,
      Item_CS_EquipOrdRepair_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_EquipOrdRepair, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_EquipOrdRepair, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Item_CS_EquipOrdRepair));
  Item_SC_EquipOrdRepair_descriptor_ = file->message_type(74);
  static const int Item_SC_EquipOrdRepair_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_EquipOrdRepair, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_EquipOrdRepair, equip_),
  };
  Item_SC_EquipOrdRepair_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Item_SC_EquipOrdRepair_descriptor_,
      Item_SC_EquipOrdRepair::default_instance_,
      Item_SC_EquipOrdRepair_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_EquipOrdRepair, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_EquipOrdRepair, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Item_SC_EquipOrdRepair));
  Item_CS_EquipSpeRepair_descriptor_ = file->message_type(75);
  static const int Item_CS_EquipSpeRepair_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_EquipSpeRepair, uuid_),
  };
  Item_CS_EquipSpeRepair_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Item_CS_EquipSpeRepair_descriptor_,
      Item_CS_EquipSpeRepair::default_instance_,
      Item_CS_EquipSpeRepair_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_EquipSpeRepair, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_EquipSpeRepair, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Item_CS_EquipSpeRepair));
  Item_SC_EquipSpeRepair_descriptor_ = file->message_type(76);
  static const int Item_SC_EquipSpeRepair_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_EquipSpeRepair, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_EquipSpeRepair, equip_),
  };
  Item_SC_EquipSpeRepair_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Item_SC_EquipSpeRepair_descriptor_,
      Item_SC_EquipSpeRepair::default_instance_,
      Item_SC_EquipSpeRepair_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_EquipSpeRepair, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_EquipSpeRepair, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Item_SC_EquipSpeRepair));
  Item_CS_JewelryExchange_descriptor_ = file->message_type(77);
  static const int Item_CS_JewelryExchange_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_JewelryExchange, pro_id_),
  };
  Item_CS_JewelryExchange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Item_CS_JewelryExchange_descriptor_,
      Item_CS_JewelryExchange::default_instance_,
      Item_CS_JewelryExchange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_JewelryExchange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_JewelryExchange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Item_CS_JewelryExchange));
  Item_SC_JewelryExchange_descriptor_ = file->message_type(78);
  static const int Item_SC_JewelryExchange_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_JewelryExchange, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_JewelryExchange, pro_id_),
  };
  Item_SC_JewelryExchange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Item_SC_JewelryExchange_descriptor_,
      Item_SC_JewelryExchange::default_instance_,
      Item_SC_JewelryExchange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_JewelryExchange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_JewelryExchange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Item_SC_JewelryExchange));
  Item_CS_IntegralExchange_descriptor_ = file->message_type(79);
  static const int Item_CS_IntegralExchange_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_IntegralExchange, pro_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_IntegralExchange, num_),
  };
  Item_CS_IntegralExchange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Item_CS_IntegralExchange_descriptor_,
      Item_CS_IntegralExchange::default_instance_,
      Item_CS_IntegralExchange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_IntegralExchange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_IntegralExchange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Item_CS_IntegralExchange));
  Item_SC_IntegralExchange_descriptor_ = file->message_type(80);
  static const int Item_SC_IntegralExchange_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_IntegralExchange, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_IntegralExchange, pro_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_IntegralExchange, buy_times_),
  };
  Item_SC_IntegralExchange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Item_SC_IntegralExchange_descriptor_,
      Item_SC_IntegralExchange::default_instance_,
      Item_SC_IntegralExchange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_IntegralExchange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_IntegralExchange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Item_SC_IntegralExchange));
  Item_CS_MoneyExchange_descriptor_ = file->message_type(81);
  static const int Item_CS_MoneyExchange_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_MoneyExchange, pro_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_MoneyExchange, num_),
  };
  Item_CS_MoneyExchange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Item_CS_MoneyExchange_descriptor_,
      Item_CS_MoneyExchange::default_instance_,
      Item_CS_MoneyExchange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_MoneyExchange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_MoneyExchange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Item_CS_MoneyExchange));
  Item_SC_MoneyExchange_descriptor_ = file->message_type(82);
  static const int Item_SC_MoneyExchange_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_MoneyExchange, result_),
  };
  Item_SC_MoneyExchange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Item_SC_MoneyExchange_descriptor_,
      Item_SC_MoneyExchange::default_instance_,
      Item_SC_MoneyExchange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_MoneyExchange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_MoneyExchange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Item_SC_MoneyExchange));
  IntegralPrice_descriptor_ = file->message_type(83);
  static const int IntegralPrice_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntegralPrice, pro_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntegralPrice, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntegralPrice, item_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntegralPrice, buy_times_),
  };
  IntegralPrice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IntegralPrice_descriptor_,
      IntegralPrice::default_instance_,
      IntegralPrice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntegralPrice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntegralPrice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IntegralPrice));
  IntegralTimes_descriptor_ = file->message_type(84);
  static const int IntegralTimes_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntegralTimes, pro_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntegralTimes, buy_times_),
  };
  IntegralTimes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IntegralTimes_descriptor_,
      IntegralTimes::default_instance_,
      IntegralTimes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntegralTimes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntegralTimes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IntegralTimes));
  Item_CS_GetIntegralPrice_descriptor_ = file->message_type(85);
  static const int Item_CS_GetIntegralPrice_offsets_[1] = {
  };
  Item_CS_GetIntegralPrice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Item_CS_GetIntegralPrice_descriptor_,
      Item_CS_GetIntegralPrice::default_instance_,
      Item_CS_GetIntegralPrice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_GetIntegralPrice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_GetIntegralPrice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Item_CS_GetIntegralPrice));
  Item_SC_GetIntegralPrice_descriptor_ = file->message_type(86);
  static const int Item_SC_GetIntegralPrice_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_GetIntegralPrice, integral_price_list_),
  };
  Item_SC_GetIntegralPrice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Item_SC_GetIntegralPrice_descriptor_,
      Item_SC_GetIntegralPrice::default_instance_,
      Item_SC_GetIntegralPrice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_GetIntegralPrice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_GetIntegralPrice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Item_SC_GetIntegralPrice));
  Item_CS_FastBuy_descriptor_ = file->message_type(87);
  static const int Item_CS_FastBuy_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_FastBuy, uitableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_FastBuy, uinum_),
  };
  Item_CS_FastBuy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Item_CS_FastBuy_descriptor_,
      Item_CS_FastBuy::default_instance_,
      Item_CS_FastBuy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_FastBuy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_FastBuy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Item_CS_FastBuy));
  Item_SC_FastBuy_descriptor_ = file->message_type(88);
  static const int Item_SC_FastBuy_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_FastBuy, uitableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_FastBuy, uiresult_),
  };
  Item_SC_FastBuy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Item_SC_FastBuy_descriptor_,
      Item_SC_FastBuy::default_instance_,
      Item_SC_FastBuy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_FastBuy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_FastBuy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Item_SC_FastBuy));
  DragonSoul_descriptor_ = file->message_type(89);
  static const int DragonSoul_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DragonSoul, uidragonsoulid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DragonSoul, uidragonsoullevel_),
  };
  DragonSoul_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DragonSoul_descriptor_,
      DragonSoul::default_instance_,
      DragonSoul_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DragonSoul, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DragonSoul, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DragonSoul));
  Potential_descriptor_ = file->message_type(90);
  static const int Potential_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Potential, vecdragonsoul_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Potential, uitotalusenum_),
  };
  Potential_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Potential_descriptor_,
      Potential::default_instance_,
      Potential_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Potential, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Potential, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Potential));
  Item_CS_Potential_descriptor_ = file->message_type(91);
  static const int Item_CS_Potential_offsets_[1] = {
  };
  Item_CS_Potential_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Item_CS_Potential_descriptor_,
      Item_CS_Potential::default_instance_,
      Item_CS_Potential_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_Potential, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_Potential, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Item_CS_Potential));
  Item_SC_Potential_descriptor_ = file->message_type(92);
  static const int Item_SC_Potential_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_Potential, spotential_),
  };
  Item_SC_Potential_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Item_SC_Potential_descriptor_,
      Item_SC_Potential::default_instance_,
      Item_SC_Potential_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_Potential, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_Potential, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Item_SC_Potential));
  Item_CS_PutOnSuit_descriptor_ = file->message_type(93);
  static const int Item_CS_PutOnSuit_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_PutOnSuit, uisuitid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_PutOnSuit, uioperate_),
  };
  Item_CS_PutOnSuit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Item_CS_PutOnSuit_descriptor_,
      Item_CS_PutOnSuit::default_instance_,
      Item_CS_PutOnSuit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_PutOnSuit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_PutOnSuit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Item_CS_PutOnSuit));
  Item_SC_PutOnSuit_descriptor_ = file->message_type(94);
  static const int Item_SC_PutOnSuit_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_PutOnSuit, uiresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_PutOnSuit, uisuitid_),
  };
  Item_SC_PutOnSuit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Item_SC_PutOnSuit_descriptor_,
      Item_SC_PutOnSuit::default_instance_,
      Item_SC_PutOnSuit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_PutOnSuit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_PutOnSuit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Item_SC_PutOnSuit));
  Item_CS_TakeOpenReward_descriptor_ = file->message_type(95);
  static const int Item_CS_TakeOpenReward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_TakeOpenReward, uiopenid_),
  };
  Item_CS_TakeOpenReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Item_CS_TakeOpenReward_descriptor_,
      Item_CS_TakeOpenReward::default_instance_,
      Item_CS_TakeOpenReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_TakeOpenReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_CS_TakeOpenReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Item_CS_TakeOpenReward));
  Item_SC_TakeOpenReward_descriptor_ = file->message_type(96);
  static const int Item_SC_TakeOpenReward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_TakeOpenReward, uiresult_),
  };
  Item_SC_TakeOpenReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Item_SC_TakeOpenReward_descriptor_,
      Item_SC_TakeOpenReward::default_instance_,
      Item_SC_TakeOpenReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_TakeOpenReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_SC_TakeOpenReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Item_SC_TakeOpenReward));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_item_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Item_descriptor_, &Item::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoneyItem_descriptor_, &MoneyItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SRandAttr_descriptor_, &SRandAttr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipGird_descriptor_, &EquipGird::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipSuit_descriptor_, &EquipSuit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Item_CS_GetBagInfo_descriptor_, &Item_CS_GetBagInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Item_SC_GetBagInfo_descriptor_, &Item_SC_GetBagInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Item_CS_UseBagItem_descriptor_, &Item_CS_UseBagItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Item_SC_UseBagItem_descriptor_, &Item_SC_UseBagItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Item_CS_SellItem_descriptor_, &Item_CS_SellItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Item_SC_SellItem_descriptor_, &Item_SC_SellItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Item_CS_DiscardItem_descriptor_, &Item_CS_DiscardItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Item_SC_DiscardItem_descriptor_, &Item_SC_DiscardItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Item_CS_AddBagGird_descriptor_, &Item_CS_AddBagGird::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Item_SC_AddBagGird_descriptor_, &Item_SC_AddBagGird::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Item_CS_GetTempBagInfo_descriptor_, &Item_CS_GetTempBagInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Item_SC_GetTempBagInfo_descriptor_, &Item_SC_GetTempBagInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Item_CS_GetBackItem_descriptor_, &Item_CS_GetBackItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Item_SC_GetBackItem_descriptor_, &Item_SC_GetBackItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Item_CS_GetBackAllItem_descriptor_, &Item_CS_GetBackAllItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Item_CS_QueryChatItem_descriptor_, &Item_CS_QueryChatItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Item_SC_QueryChatItem_descriptor_, &Item_SC_QueryChatItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Item_CS_SetItemIDPos_descriptor_, &Item_CS_SetItemIDPos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Item_SC_SetItemIDPos_descriptor_, &Item_SC_SetItemIDPos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Item_SC_GetBackAllItem_descriptor_, &Item_SC_GetBackAllItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Item_SC_UpdateBag_descriptor_, &Item_SC_UpdateBag::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Item_SC_UpdateChangeItem_descriptor_, &Item_SC_UpdateChangeItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Item_SC_UpTempBag_descriptor_, &Item_SC_UpTempBag::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Item_SC_UpTempBagItem_descriptor_, &Item_SC_UpTempBagItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Item_SC_UpSpecialItem_descriptor_, &Item_SC_UpSpecialItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Item_SC_GetItem_descriptor_, &Item_SC_GetItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DropItemNum_descriptor_, &DropItemNum::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Item_SC_DropItem_descriptor_, &Item_SC_DropItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Item_SC_GetItemTips_descriptor_, &Item_SC_GetItemTips::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Item_CS_GetStoreInfo_descriptor_, &Item_CS_GetStoreInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StoreInfo_descriptor_, &StoreInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Item_SC_GetStoreInfo_descriptor_, &Item_SC_GetStoreInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Item_CS_ActivateStore_descriptor_, &Item_CS_ActivateStore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Item_SC_ActivateStore_descriptor_, &Item_SC_ActivateStore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Item_CS_InToStore_descriptor_, &Item_CS_InToStore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Item_SC_InToStore_descriptor_, &Item_SC_InToStore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Item_CS_OutFromStore_descriptor_, &Item_CS_OutFromStore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Item_SC_OutFromStore_descriptor_, &Item_SC_OutFromStore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Item_CS_PutOnEquip_descriptor_, &Item_CS_PutOnEquip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Item_SC_PutOnEquip_descriptor_, &Item_SC_PutOnEquip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Item_CS_GetOffEquip_descriptor_, &Item_CS_GetOffEquip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Item_SC_GetOffEquip_descriptor_, &Item_SC_GetOffEquip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Item_CS_EquipStrength_descriptor_, &Item_CS_EquipStrength::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Item_SC_EquipStrength_descriptor_, &Item_SC_EquipStrength::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Item_CS_EquipStarUp_descriptor_, &Item_CS_EquipStarUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Item_SC_EquipStarUp_descriptor_, &Item_SC_EquipStarUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Item_CS_EquipInlay_descriptor_, &Item_CS_EquipInlay::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Item_SC_EquipInlay_descriptor_, &Item_SC_EquipInlay::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Item_CS_EquipLevelUp_descriptor_, &Item_CS_EquipLevelUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Item_SC_EquipLevelUp_descriptor_, &Item_SC_EquipLevelUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Item_CS_EquipQualityUp_descriptor_, &Item_CS_EquipQualityUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Item_SC_EquipQualityUp_descriptor_, &Item_SC_EquipQualityUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Item_CS_IncreaseEquip_descriptor_, &Item_CS_IncreaseEquip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Item_SC_IncreaseEquip_descriptor_, &Item_SC_IncreaseEquip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Item_CS_ResolveEquip_descriptor_, &Item_CS_ResolveEquip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Item_SC_ResolveEquip_descriptor_, &Item_SC_ResolveEquip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Item_CS_EquipRandAttr_descriptor_, &Item_CS_EquipRandAttr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Item_SC_EquipRandAttr_descriptor_, &Item_SC_EquipRandAttr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Item_CS_EquipRefine_descriptor_, &Item_CS_EquipRefine::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Item_SC_EquipRefine_descriptor_, &Item_SC_EquipRefine::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Item_CS_EquipActiveSuit_descriptor_, &Item_CS_EquipActiveSuit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Item_SC_EquipActiveSuit_descriptor_, &Item_SC_EquipActiveSuit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Item_CS_EquipExchange_descriptor_, &Item_CS_EquipExchange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Item_SC_EquipExchange_descriptor_, &Item_SC_EquipExchange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Item_CS_Compose_descriptor_, &Item_CS_Compose::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Item_SC_Compose_descriptor_, &Item_SC_Compose::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Item_CS_Compose_Gem_descriptor_, &Item_CS_Compose_Gem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Item_SC_Compose_Gem_descriptor_, &Item_SC_Compose_Gem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Item_CS_EquipOrdRepair_descriptor_, &Item_CS_EquipOrdRepair::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Item_SC_EquipOrdRepair_descriptor_, &Item_SC_EquipOrdRepair::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Item_CS_EquipSpeRepair_descriptor_, &Item_CS_EquipSpeRepair::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Item_SC_EquipSpeRepair_descriptor_, &Item_SC_EquipSpeRepair::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Item_CS_JewelryExchange_descriptor_, &Item_CS_JewelryExchange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Item_SC_JewelryExchange_descriptor_, &Item_SC_JewelryExchange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Item_CS_IntegralExchange_descriptor_, &Item_CS_IntegralExchange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Item_SC_IntegralExchange_descriptor_, &Item_SC_IntegralExchange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Item_CS_MoneyExchange_descriptor_, &Item_CS_MoneyExchange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Item_SC_MoneyExchange_descriptor_, &Item_SC_MoneyExchange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IntegralPrice_descriptor_, &IntegralPrice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IntegralTimes_descriptor_, &IntegralTimes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Item_CS_GetIntegralPrice_descriptor_, &Item_CS_GetIntegralPrice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Item_SC_GetIntegralPrice_descriptor_, &Item_SC_GetIntegralPrice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Item_CS_FastBuy_descriptor_, &Item_CS_FastBuy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Item_SC_FastBuy_descriptor_, &Item_SC_FastBuy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DragonSoul_descriptor_, &DragonSoul::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Potential_descriptor_, &Potential::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Item_CS_Potential_descriptor_, &Item_CS_Potential::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Item_SC_Potential_descriptor_, &Item_SC_Potential::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Item_CS_PutOnSuit_descriptor_, &Item_CS_PutOnSuit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Item_SC_PutOnSuit_descriptor_, &Item_SC_PutOnSuit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Item_CS_TakeOpenReward_descriptor_, &Item_CS_TakeOpenReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Item_SC_TakeOpenReward_descriptor_, &Item_SC_TakeOpenReward::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_item_2eproto() {
  delete Item::default_instance_;
  delete Item_reflection_;
  delete MoneyItem::default_instance_;
  delete MoneyItem_reflection_;
  delete SRandAttr::default_instance_;
  delete SRandAttr_reflection_;
  delete EquipGird::default_instance_;
  delete EquipGird_reflection_;
  delete EquipSuit::default_instance_;
  delete EquipSuit_reflection_;
  delete Item_CS_GetBagInfo::default_instance_;
  delete Item_CS_GetBagInfo_reflection_;
  delete Item_SC_GetBagInfo::default_instance_;
  delete Item_SC_GetBagInfo_reflection_;
  delete Item_CS_UseBagItem::default_instance_;
  delete Item_CS_UseBagItem_reflection_;
  delete Item_SC_UseBagItem::default_instance_;
  delete Item_SC_UseBagItem_reflection_;
  delete Item_CS_SellItem::default_instance_;
  delete Item_CS_SellItem_reflection_;
  delete Item_SC_SellItem::default_instance_;
  delete Item_SC_SellItem_reflection_;
  delete Item_CS_DiscardItem::default_instance_;
  delete Item_CS_DiscardItem_reflection_;
  delete Item_SC_DiscardItem::default_instance_;
  delete Item_SC_DiscardItem_reflection_;
  delete Item_CS_AddBagGird::default_instance_;
  delete Item_CS_AddBagGird_reflection_;
  delete Item_SC_AddBagGird::default_instance_;
  delete Item_SC_AddBagGird_reflection_;
  delete Item_CS_GetTempBagInfo::default_instance_;
  delete Item_CS_GetTempBagInfo_reflection_;
  delete Item_SC_GetTempBagInfo::default_instance_;
  delete Item_SC_GetTempBagInfo_reflection_;
  delete Item_CS_GetBackItem::default_instance_;
  delete Item_CS_GetBackItem_reflection_;
  delete Item_SC_GetBackItem::default_instance_;
  delete Item_SC_GetBackItem_reflection_;
  delete Item_CS_GetBackAllItem::default_instance_;
  delete Item_CS_GetBackAllItem_reflection_;
  delete Item_CS_QueryChatItem::default_instance_;
  delete Item_CS_QueryChatItem_reflection_;
  delete Item_SC_QueryChatItem::default_instance_;
  delete Item_SC_QueryChatItem_reflection_;
  delete Item_CS_SetItemIDPos::default_instance_;
  delete Item_CS_SetItemIDPos_reflection_;
  delete Item_SC_SetItemIDPos::default_instance_;
  delete Item_SC_SetItemIDPos_reflection_;
  delete Item_SC_GetBackAllItem::default_instance_;
  delete Item_SC_GetBackAllItem_reflection_;
  delete Item_SC_UpdateBag::default_instance_;
  delete Item_SC_UpdateBag_reflection_;
  delete Item_SC_UpdateChangeItem::default_instance_;
  delete Item_SC_UpdateChangeItem_reflection_;
  delete Item_SC_UpTempBag::default_instance_;
  delete Item_SC_UpTempBag_reflection_;
  delete Item_SC_UpTempBagItem::default_instance_;
  delete Item_SC_UpTempBagItem_reflection_;
  delete Item_SC_UpSpecialItem::default_instance_;
  delete Item_SC_UpSpecialItem_reflection_;
  delete Item_SC_GetItem::default_instance_;
  delete Item_SC_GetItem_reflection_;
  delete DropItemNum::default_instance_;
  delete DropItemNum_reflection_;
  delete Item_SC_DropItem::default_instance_;
  delete Item_SC_DropItem_reflection_;
  delete Item_SC_GetItemTips::default_instance_;
  delete Item_SC_GetItemTips_reflection_;
  delete Item_CS_GetStoreInfo::default_instance_;
  delete Item_CS_GetStoreInfo_reflection_;
  delete StoreInfo::default_instance_;
  delete StoreInfo_reflection_;
  delete Item_SC_GetStoreInfo::default_instance_;
  delete Item_SC_GetStoreInfo_reflection_;
  delete Item_CS_ActivateStore::default_instance_;
  delete Item_CS_ActivateStore_reflection_;
  delete Item_SC_ActivateStore::default_instance_;
  delete Item_SC_ActivateStore_reflection_;
  delete Item_CS_InToStore::default_instance_;
  delete Item_CS_InToStore_reflection_;
  delete Item_SC_InToStore::default_instance_;
  delete Item_SC_InToStore_reflection_;
  delete Item_CS_OutFromStore::default_instance_;
  delete Item_CS_OutFromStore_reflection_;
  delete Item_SC_OutFromStore::default_instance_;
  delete Item_SC_OutFromStore_reflection_;
  delete Item_CS_PutOnEquip::default_instance_;
  delete Item_CS_PutOnEquip_reflection_;
  delete Item_SC_PutOnEquip::default_instance_;
  delete Item_SC_PutOnEquip_reflection_;
  delete Item_CS_GetOffEquip::default_instance_;
  delete Item_CS_GetOffEquip_reflection_;
  delete Item_SC_GetOffEquip::default_instance_;
  delete Item_SC_GetOffEquip_reflection_;
  delete Item_CS_EquipStrength::default_instance_;
  delete Item_CS_EquipStrength_reflection_;
  delete Item_SC_EquipStrength::default_instance_;
  delete Item_SC_EquipStrength_reflection_;
  delete Item_CS_EquipStarUp::default_instance_;
  delete Item_CS_EquipStarUp_reflection_;
  delete Item_SC_EquipStarUp::default_instance_;
  delete Item_SC_EquipStarUp_reflection_;
  delete Item_CS_EquipInlay::default_instance_;
  delete Item_CS_EquipInlay_reflection_;
  delete Item_SC_EquipInlay::default_instance_;
  delete Item_SC_EquipInlay_reflection_;
  delete Item_CS_EquipLevelUp::default_instance_;
  delete Item_CS_EquipLevelUp_reflection_;
  delete Item_SC_EquipLevelUp::default_instance_;
  delete Item_SC_EquipLevelUp_reflection_;
  delete Item_CS_EquipQualityUp::default_instance_;
  delete Item_CS_EquipQualityUp_reflection_;
  delete Item_SC_EquipQualityUp::default_instance_;
  delete Item_SC_EquipQualityUp_reflection_;
  delete Item_CS_IncreaseEquip::default_instance_;
  delete Item_CS_IncreaseEquip_reflection_;
  delete Item_SC_IncreaseEquip::default_instance_;
  delete Item_SC_IncreaseEquip_reflection_;
  delete Item_CS_ResolveEquip::default_instance_;
  delete Item_CS_ResolveEquip_reflection_;
  delete Item_SC_ResolveEquip::default_instance_;
  delete Item_SC_ResolveEquip_reflection_;
  delete Item_CS_EquipRandAttr::default_instance_;
  delete Item_CS_EquipRandAttr_reflection_;
  delete Item_SC_EquipRandAttr::default_instance_;
  delete Item_SC_EquipRandAttr_reflection_;
  delete Item_CS_EquipRefine::default_instance_;
  delete Item_CS_EquipRefine_reflection_;
  delete Item_SC_EquipRefine::default_instance_;
  delete Item_SC_EquipRefine_reflection_;
  delete Item_CS_EquipActiveSuit::default_instance_;
  delete Item_CS_EquipActiveSuit_reflection_;
  delete Item_SC_EquipActiveSuit::default_instance_;
  delete Item_SC_EquipActiveSuit_reflection_;
  delete Item_CS_EquipExchange::default_instance_;
  delete Item_CS_EquipExchange_reflection_;
  delete Item_SC_EquipExchange::default_instance_;
  delete Item_SC_EquipExchange_reflection_;
  delete Item_CS_Compose::default_instance_;
  delete Item_CS_Compose_reflection_;
  delete Item_SC_Compose::default_instance_;
  delete Item_SC_Compose_reflection_;
  delete Item_CS_Compose_Gem::default_instance_;
  delete Item_CS_Compose_Gem_reflection_;
  delete Item_SC_Compose_Gem::default_instance_;
  delete Item_SC_Compose_Gem_reflection_;
  delete Item_CS_EquipOrdRepair::default_instance_;
  delete Item_CS_EquipOrdRepair_reflection_;
  delete Item_SC_EquipOrdRepair::default_instance_;
  delete Item_SC_EquipOrdRepair_reflection_;
  delete Item_CS_EquipSpeRepair::default_instance_;
  delete Item_CS_EquipSpeRepair_reflection_;
  delete Item_SC_EquipSpeRepair::default_instance_;
  delete Item_SC_EquipSpeRepair_reflection_;
  delete Item_CS_JewelryExchange::default_instance_;
  delete Item_CS_JewelryExchange_reflection_;
  delete Item_SC_JewelryExchange::default_instance_;
  delete Item_SC_JewelryExchange_reflection_;
  delete Item_CS_IntegralExchange::default_instance_;
  delete Item_CS_IntegralExchange_reflection_;
  delete Item_SC_IntegralExchange::default_instance_;
  delete Item_SC_IntegralExchange_reflection_;
  delete Item_CS_MoneyExchange::default_instance_;
  delete Item_CS_MoneyExchange_reflection_;
  delete Item_SC_MoneyExchange::default_instance_;
  delete Item_SC_MoneyExchange_reflection_;
  delete IntegralPrice::default_instance_;
  delete IntegralPrice_reflection_;
  delete IntegralTimes::default_instance_;
  delete IntegralTimes_reflection_;
  delete Item_CS_GetIntegralPrice::default_instance_;
  delete Item_CS_GetIntegralPrice_reflection_;
  delete Item_SC_GetIntegralPrice::default_instance_;
  delete Item_SC_GetIntegralPrice_reflection_;
  delete Item_CS_FastBuy::default_instance_;
  delete Item_CS_FastBuy_reflection_;
  delete Item_SC_FastBuy::default_instance_;
  delete Item_SC_FastBuy_reflection_;
  delete DragonSoul::default_instance_;
  delete DragonSoul_reflection_;
  delete Potential::default_instance_;
  delete Potential_reflection_;
  delete Item_CS_Potential::default_instance_;
  delete Item_CS_Potential_reflection_;
  delete Item_SC_Potential::default_instance_;
  delete Item_SC_Potential_reflection_;
  delete Item_CS_PutOnSuit::default_instance_;
  delete Item_CS_PutOnSuit_reflection_;
  delete Item_SC_PutOnSuit::default_instance_;
  delete Item_SC_PutOnSuit_reflection_;
  delete Item_CS_TakeOpenReward::default_instance_;
  delete Item_CS_TakeOpenReward_reflection_;
  delete Item_SC_TakeOpenReward::default_instance_;
  delete Item_SC_TakeOpenReward_reflection_;
}

void protobuf_AddDesc_item_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::proto::message::protobuf_AddDesc_common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nitem.proto\022\rproto.message\032\014common.prot"
    "o\"\230\001\n\004Item\022\014\n\004uuid\030\001 \001(\004\022\021\n\tgain_time\030\002 "
    "\001(\004\022\n\n\002id\030\003 \001(\005\022\013\n\003num\030\004 \001(\005\022\021\n\tparamete"
    "r\030\005 \001(\005\022\016\n\006source\030\006 \001(\005\022\023\n\013frozen_time\030\007"
    " \001(\005\022\020\n\010qualitey\030\010 \001(\005\022\014\n\004bind\030\t \001(\005\"\320\003\n"
    "\tMoneyItem\022\016\n\006silver\030\001 \002(\003\022\014\n\004gold\030\002 \002(\003"
    "\022\017\n\007diamond\030\003 \002(\003\022\016\n\006energy\030\004 \002(\003\022\013\n\003exp"
    "\030\005 \002(\003\022\r\n\005vigor\030\006 \002(\003\022\022\n\nidy_points\030\007 \002("
    "\003\022\022\n\nfriendship\030\010 \002(\003\022\022\n\ntal_points\030\t \002("
    "\003\022\023\n\013guild_money\030\n \002(\003\022\023\n\013guild_bonus\030\013 "
    "\002(\003\022\032\n\022guild_contribution\030\014 \002(\003\022\016\n\006honou"
    "r\030\r \002(\003\022\026\n\016achieve_points\030\016 \002(\003\022\023\n\013tutor"
    "_score\030\017 \002(\003\022\026\n\016festival_score\030\020 \002(\003\022\020\n\010"
    "chivalry\030\021 \002(\003\022\024\n\014return_score\030\022 \002(\003\022\024\n\014"
    "awaken_point\030\023 \002(\003\022\024\n\014soulboxpoint\030\024 \002(\003"
    "\022\024\n\014diamond_bind\030\031 \002(\003\022\017\n\007mintage\030\032 \002(\003\022"
    "\026\n\016roulette_score\030\035 \002(\003\"G\n\tSRandAttr\022\020\n\010"
    "uiAttrId\030\001 \001(\r\022\021\n\tuiAttrVal\030\002 \001(\r\022\025\n\ruiR"
    "efineLevel\030\003 \001(\r\"\266\001\n\tEquipGird\022\021\n\tuiGird"
    "Pos\030\001 \001(\r\022\026\n\016uiUpgradeLevel\030\002 \001(\r\022\023\n\013uiS"
    "tarLevel\030\003 \001(\r\022\016\n\006vecGem\030\004 \003(\r\022-\n\013vecRan"
    "dAttr\030\005 \003(\0132\030.proto.message.SRandAttr\022\025\n"
    "\ruiStarUpCount\030\006 \001(\r\022\023\n\013uiBestEquip\030\007 \001("
    "\r\"1\n\tEquipSuit\022\020\n\010uiSuitId\030\001 \001(\r\022\022\n\nuiSu"
    "itAttr\030\002 \003(\r\".\n\022Item_CS_GetBagInfo\022\030\n\020ne"
    "edRedPointInfo\030\001 \001(\010\"\345\002\n\022Item_SC_GetBagI"
    "nfo\022\016\n\006result\030\001 \001(\005\022\024\n\014grid_num_max\030\002 \001("
    "\005\022\020\n\010grid_num\030\003 \001(\005\022\021\n\tbuy_times\030\004 \001(\005\022&"
    "\n\titem_list\030\005 \003(\0132\023.proto.message.Item\022("
    "\n\nequip_list\030\006 \003(\0132\024.proto.message.Equip"
    "\0220\n\016equipgird_list\030\007 \003(\0132\030.proto.message"
    ".EquipGird\022+\n\tsuit_list\030\010 \003(\0132\030.proto.me"
    "ssage.EquipSuit\022*\n\014itemUseCount\030\t \003(\0132\024."
    "proto.message.IDNum\022\'\n\titemUseCD\030\n \003(\0132\024"
    ".proto.message.IDNum\"4\n\022Item_CS_UseBagIt"
    "em\022\014\n\004uuid\030\001 \001(\004\022\020\n\010item_num\030\002 \001(\005\"H\n\022It"
    "em_SC_UseBagItem\022\016\n\006result\030\001 \001(\005\022\021\n\titem"
    "_uuid\030\002 \001(\004\022\017\n\007item_id\030\003 \001(\005\"2\n\020Item_CS_"
    "SellItem\022\014\n\004uuid\030\001 \001(\004\022\020\n\010item_num\030\002 \001(\005"
    "\"E\n\020Item_SC_SellItem\022\016\n\006result\030\001 \001(\005\022\017\n\007"
    "item_id\030\002 \001(\005\022\020\n\010item_num\030\003 \001(\005\"#\n\023Item_"
    "CS_DiscardItem\022\014\n\004uuid\030\001 \001(\004\"%\n\023Item_SC_"
    "DiscardItem\022\016\n\006result\030\001 \001(\005\"\024\n\022Item_CS_A"
    "ddBagGird\"I\n\022Item_SC_AddBagGird\022\016\n\006resul"
    "t\030\001 \001(\005\022\020\n\010gird_num\030\002 \001(\005\022\021\n\tbuy_times\030\003"
    " \001(\005\"\030\n\026Item_CS_GetTempBagInfo\"|\n\026Item_S"
    "C_GetTempBagInfo\022\020\n\010grid_num\030\001 \001(\005\022&\n\tit"
    "em_list\030\002 \003(\0132\023.proto.message.Item\022(\n\neq"
    "uip_list\030\003 \003(\0132\024.proto.message.Equip\"#\n\023"
    "Item_CS_GetBackItem\022\014\n\004uuid\030\002 \001(\004\"3\n\023Ite"
    "m_SC_GetBackItem\022\016\n\006result\030\001 \001(\005\022\014\n\004uuid"
    "\030\002 \001(\004\"\030\n\026Item_CS_GetBackAllItem\"5\n\025Item"
    "_CS_QueryChatItem\022\016\n\006charid\030\001 \001(\004\022\014\n\004uui"
    "d\030\002 \001(\004\"o\n\025Item_SC_QueryChatItem\022\016\n\006resu"
    "lt\030\001 \001(\005\022!\n\004item\030\002 \001(\0132\023.proto.message.I"
    "tem\022#\n\005equip\030\003 \001(\0132\024.proto.message.Equip"
    "\"4\n\024Item_CS_SetItemIDPos\022\017\n\007item_id\030\001 \001("
    "\005\022\013\n\003pos\030\002 \001(\005\"D\n\024Item_SC_SetItemIDPos\022\016"
    "\n\006result\030\001 \001(\005\022\017\n\007item_id\030\002 \001(\005\022\013\n\003pos\030\003"
    " \001(\005\";\n\026Item_SC_GetBackAllItem\022\016\n\006result"
    "\030\001 \001(\005\022\021\n\tuuid_list\030\002 \003(\004\"w\n\021Item_SC_Upd"
    "ateBag\022\020\n\010grid_num\030\001 \001(\005\022&\n\titem_list\030\002 "
    "\003(\0132\023.proto.message.Item\022(\n\nequip_list\030\003"
    " \003(\0132\024.proto.message.Equip\"\225\001\n\030Item_SC_U"
    "pdateChangeItem\022\020\n\010bag_type\030\001 \001(\005\022\025\n\rdel"
    "_item_list\030\002 \003(\004\022&\n\titem_list\030\003 \003(\0132\023.pr"
    "oto.message.Item\022(\n\nequip_list\030\004 \003(\0132\024.p"
    "roto.message.Equip\"w\n\021Item_SC_UpTempBag\022"
    "\020\n\010grid_num\030\001 \001(\005\022&\n\titem_list\030\002 \003(\0132\023.p"
    "roto.message.Item\022(\n\nequip_list\030\003 \003(\0132\024."
    "proto.message.Equip\"\200\001\n\025Item_SC_UpTempBa"
    "gItem\022\025\n\rdel_item_list\030\001 \003(\004\022&\n\titem_lis"
    "t\030\002 \003(\0132\023.proto.message.Item\022(\n\nequip_li"
    "st\030\003 \003(\0132\024.proto.message.Equip\"C\n\025Item_S"
    "C_UpSpecialItem\022\r\n\005stype\030\001 \001(\005\022\013\n\003num\030\002 "
    "\001(\003\022\016\n\006getway\030\003 \001(\005\">\n\017Item_SC_GetItem\022\016"
    "\n\006itemid\030\001 \001(\005\022\013\n\003num\030\002 \001(\003\022\016\n\006getway\030\003 "
    "\001(\005\"&\n\013DropItemNum\022\n\n\002id\030\001 \001(\005\022\013\n\003num\030\002 "
    "\001(\005\"Q\n\020Item_SC_DropItem\022\016\n\006npc_id\030\001 \001(\r\022"
    "-\n\titem_list\030\002 \003(\0132\032.proto.message.DropI"
    "temNum\">\n\023Item_SC_GetItemTips\022\'\n\titem_li"
    "st\030\001 \003(\0132\024.proto.message.IDNum\"\026\n\024Item_C"
    "S_GetStoreInfo\"{\n\tStoreInfo\022\n\n\002id\030\001 \001(\005\022"
    "\020\n\010grid_num\030\002 \001(\005\022&\n\titem_list\030\003 \003(\0132\023.p"
    "roto.message.Item\022(\n\nequip_list\030\004 \003(\0132\024."
    "proto.message.Equip\"g\n\024Item_SC_GetStoreI"
    "nfo\022\016\n\006result\030\001 \001(\005\022\021\n\tstore_num\030\002 \001(\005\022,"
    "\n\nstore_list\030\003 \003(\0132\030.proto.message.Store"
    "Info\"\027\n\025Item_CS_ActivateStore\"K\n\025Item_SC"
    "_ActivateStore\022\016\n\006result\030\001 \001(\005\022\020\n\010store_"
    "id\030\002 \001(\005\022\020\n\010gird_num\030\003 \001(\005\"2\n\021Item_CS_In"
    "ToStore\022\014\n\004uuid\030\001 \001(\004\022\017\n\007storeid\030\002 \001(\005\"#"
    "\n\021Item_SC_InToStore\022\016\n\006result\030\001 \001(\005\"5\n\024I"
    "tem_CS_OutFromStore\022\014\n\004uuid\030\001 \001(\004\022\017\n\007sto"
    "reid\030\002 \001(\005\"&\n\024Item_SC_OutFromStore\022\016\n\006re"
    "sult\030\001 \001(\005\"\"\n\022Item_CS_PutOnEquip\022\014\n\004uuid"
    "\030\001 \001(\004\"N\n\022Item_SC_PutOnEquip\022\016\n\006result\030\001"
    " \001(\005\022(\n\nequip_list\030\002 \003(\0132\024.proto.message"
    ".Equip\"#\n\023Item_CS_GetOffEquip\022\014\n\004uuid\030\001 "
    "\001(\004\"Q\n\023Item_SC_GetOffEquip\022\016\n\006result\030\001 \001"
    "(\005\022*\n\014getoff_equip\030\002 \001(\0132\024.proto.message"
    ".Equip\"+\n\025Item_CS_EquipStrength\022\022\n\nuiEqu"
    "ipPos\030\001 \003(\r\"O\n\025Item_SC_EquipStrength\022\016\n\006"
    "result\030\001 \001(\005\022\022\n\nuiEquipPos\030\002 \001(\r\022\022\n\nuiNe"
    "wLevel\030\003 \001(\r\")\n\023Item_CS_EquipStarUp\022\022\n\nu"
    "iEquipPos\030\001 \001(\r\"M\n\023Item_SC_EquipStarUp\022\016"
    "\n\006result\030\001 \001(\005\022\022\n\nuiEquipPos\030\002 \001(\r\022\022\n\nui"
    "NewLevel\030\003 \001(\r\"O\n\022Item_CS_EquipInlay\022\022\n\n"
    "uiEquipPos\030\001 \001(\r\022\022\n\nuiInlayPos\030\002 \001(\r\022\021\n\t"
    "uiGemUUID\030\003 \001(\004\"]\n\022Item_SC_EquipInlay\022\016\n"
    "\006result\030\001 \001(\005\022\022\n\nuiEquipPos\030\002 \001(\r\022\022\n\nuiI"
    "nlayPos\030\003 \001(\r\022\017\n\007uiGemId\030\004 \001(\r\"D\n\024Item_C"
    "S_EquipLevelUp\022\024\n\014uiTargetUUID\030\001 \001(\004\022\026\n\016"
    "uiMaterialUUID\030\002 \003(\004\"K\n\024Item_SC_EquipLev"
    "elUp\022\016\n\006result\030\001 \001(\005\022#\n\005equip\030\002 \001(\0132\024.pr"
    "oto.message.Equip\"&\n\026Item_CS_EquipQualit"
    "yUp\022\014\n\004uuid\030\001 \001(\004\"M\n\026Item_SC_EquipQualit"
    "yUp\022\016\n\006result\030\001 \001(\005\022#\n\005equip\030\002 \001(\0132\024.pro"
    "to.message.Equip\"%\n\025Item_CS_IncreaseEqui"
    "p\022\014\n\004uuid\030\001 \001(\004\"L\n\025Item_SC_IncreaseEquip"
    "\022\016\n\006result\030\001 \001(\005\022#\n\005equip\030\002 \001(\0132\024.proto."
    "message.Equip\"$\n\024Item_CS_ResolveEquip\022\014\n"
    "\004uuid\030\001 \003(\004\"7\n\024Item_SC_ResolveEquip\022\016\n\006r"
    "esult\030\001 \001(\005\022\017\n\007item_id\030\002 \001(\005\"\?\n\025Item_CS_"
    "EquipRandAttr\022\022\n\nuiEquipPos\030\001 \001(\r\022\022\n\nvec"
    "LockPos\030\002 \003(\005\"}\n\025Item_SC_EquipRandAttr\022\016"
    "\n\006result\030\001 \001(\005\022\022\n\nuiEquipPos\030\002 \001(\r\022-\n\013ve"
    "cRandAttr\030\003 \003(\0132\030.proto.message.SRandAtt"
    "r\022\021\n\tuiAttrPos\030\004 \001(\r\"\?\n\023Item_CS_EquipRef"
    "ine\022\022\n\nuiEquipPos\030\001 \001(\r\022\024\n\014vecRefinePos\030"
    "\002 \003(\005\"h\n\023Item_SC_EquipRefine\022\016\n\006result\030\001"
    " \001(\005\022\022\n\nuiEquipPos\030\002 \001(\r\022-\n\013vecRandAttr\030"
    "\003 \003(\0132\030.proto.message.SRandAttr\";\n\027Item_"
    "CS_EquipActiveSuit\022\020\n\010uiSuitId\030\001 \001(\r\022\016\n\006"
    "uiStep\030\002 \001(\r\"K\n\027Item_SC_EquipActiveSuit\022"
    "\016\n\006result\030\001 \001(\005\022\020\n\010uiSuitId\030\002 \001(\r\022\016\n\006uiS"
    "tep\030\003 \001(\r\"-\n\025Item_CS_EquipExchange\022\024\n\014ui"
    "ExchangeId\030\001 \001(\r\"\'\n\025Item_SC_EquipExchang"
    "e\022\016\n\006result\030\001 \001(\005\"K\n\017Item_CS_Compose\022\021\n\t"
    "uiTableId\030\001 \001(\r\022\r\n\005uiNum\030\002 \001(\r\022\026\n\016uiMate"
    "rialUUID\030\003 \003(\004\"H\n\017Item_SC_Compose\022\016\n\006res"
    "ult\030\001 \001(\005\022%\n\007newitem\030\002 \001(\0132\024.proto.messa"
    "ge.IDNum\"n\n\023Item_CS_Compose_Gem\022\022\n\nuiEqu"
    "ipPos\030\001 \001(\r\022\022\n\nuiInlayPos\030\002 \001(\r\022\027\n\017vecMa"
    "terialUUID\030\003 \003(\004\022\026\n\016vecMaterialNum\030\004 \003(\r"
    "\"a\n\023Item_SC_Compose_Gem\022\016\n\006result\030\001 \001(\005\022"
    "\022\n\nuiEquipPos\030\002 \001(\r\022\022\n\nuiInlayPos\030\003 \001(\r\022"
    "\022\n\nuiNewGemId\030\004 \001(\r\"&\n\026Item_CS_EquipOrdR"
    "epair\022\014\n\004uuid\030\001 \001(\004\"M\n\026Item_SC_EquipOrdR"
    "epair\022\016\n\006result\030\001 \001(\005\022#\n\005equip\030\002 \001(\0132\024.p"
    "roto.message.Equip\"&\n\026Item_CS_EquipSpeRe"
    "pair\022\014\n\004uuid\030\001 \001(\004\"M\n\026Item_SC_EquipSpeRe"
    "pair\022\016\n\006result\030\001 \001(\005\022#\n\005equip\030\002 \001(\0132\024.pr"
    "oto.message.Equip\")\n\027Item_CS_JewelryExch"
    "ange\022\016\n\006pro_id\030\001 \001(\005\"9\n\027Item_SC_JewelryE"
    "xchange\022\016\n\006result\030\001 \001(\005\022\016\n\006pro_id\030\002 \001(\005\""
    "7\n\030Item_CS_IntegralExchange\022\016\n\006pro_id\030\001 "
    "\001(\005\022\013\n\003num\030\002 \001(\005\"M\n\030Item_SC_IntegralExch"
    "ange\022\016\n\006result\030\001 \001(\005\022\016\n\006pro_id\030\002 \001(\005\022\021\n\t"
    "buy_times\030\003 \001(\005\"4\n\025Item_CS_MoneyExchange"
    "\022\016\n\006pro_id\030\001 \001(\005\022\013\n\003num\030\002 \001(\005\"\'\n\025Item_SC"
    "_MoneyExchange\022\016\n\006result\030\001 \001(\005\"U\n\rIntegr"
    "alPrice\022\016\n\006pro_id\030\001 \001(\r\022\017\n\007item_id\030\002 \001(\005"
    "\022\020\n\010item_num\030\003 \001(\005\022\021\n\tbuy_times\030\004 \001(\005\"2\n"
    "\rIntegralTimes\022\016\n\006pro_id\030\001 \001(\r\022\021\n\tbuy_ti"
    "mes\030\002 \001(\005\"\032\n\030Item_CS_GetIntegralPrice\"U\n"
    "\030Item_SC_GetIntegralPrice\0229\n\023integral_pr"
    "ice_list\030\001 \003(\0132\034.proto.message.IntegralP"
    "rice\"3\n\017Item_CS_FastBuy\022\021\n\tuiTableId\030\001 \002"
    "(\r\022\r\n\005uiNum\030\002 \002(\r\"6\n\017Item_SC_FastBuy\022\021\n\t"
    "uiTableId\030\001 \002(\r\022\020\n\010uiResult\030\002 \002(\r\"\?\n\nDra"
    "gonSoul\022\026\n\016uiDragonSoulId\030\001 \002(\r\022\031\n\021uiDra"
    "gonSoulLevel\030\002 \002(\r\"T\n\tPotential\0220\n\rvecDr"
    "agonSoul\030\001 \003(\0132\031.proto.message.DragonSou"
    "l\022\025\n\ruiTotalUseNum\030\002 \001(\r\"\023\n\021Item_CS_Pote"
    "ntial\"A\n\021Item_SC_Potential\022,\n\nsPotential"
    "\030\001 \002(\0132\030.proto.message.Potential\"8\n\021Item"
    "_CS_PutOnSuit\022\020\n\010uiSuitId\030\001 \001(\r\022\021\n\tuiOpe"
    "rate\030\002 \001(\r\"7\n\021Item_SC_PutOnSuit\022\020\n\010uiRes"
    "ult\030\001 \001(\r\022\020\n\010uiSuitId\030\002 \001(\r\"*\n\026Item_CS_T"
    "akeOpenReward\022\020\n\010uiOpenId\030\001 \001(\r\"*\n\026Item_"
    "SC_TakeOpenReward\022\020\n\010uiResult\030\001 \001(\rB\017\n\rp"
    "roto.message", 7292);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "item.proto", &protobuf_RegisterTypes);
  Item::default_instance_ = new Item();
  MoneyItem::default_instance_ = new MoneyItem();
  SRandAttr::default_instance_ = new SRandAttr();
  EquipGird::default_instance_ = new EquipGird();
  EquipSuit::default_instance_ = new EquipSuit();
  Item_CS_GetBagInfo::default_instance_ = new Item_CS_GetBagInfo();
  Item_SC_GetBagInfo::default_instance_ = new Item_SC_GetBagInfo();
  Item_CS_UseBagItem::default_instance_ = new Item_CS_UseBagItem();
  Item_SC_UseBagItem::default_instance_ = new Item_SC_UseBagItem();
  Item_CS_SellItem::default_instance_ = new Item_CS_SellItem();
  Item_SC_SellItem::default_instance_ = new Item_SC_SellItem();
  Item_CS_DiscardItem::default_instance_ = new Item_CS_DiscardItem();
  Item_SC_DiscardItem::default_instance_ = new Item_SC_DiscardItem();
  Item_CS_AddBagGird::default_instance_ = new Item_CS_AddBagGird();
  Item_SC_AddBagGird::default_instance_ = new Item_SC_AddBagGird();
  Item_CS_GetTempBagInfo::default_instance_ = new Item_CS_GetTempBagInfo();
  Item_SC_GetTempBagInfo::default_instance_ = new Item_SC_GetTempBagInfo();
  Item_CS_GetBackItem::default_instance_ = new Item_CS_GetBackItem();
  Item_SC_GetBackItem::default_instance_ = new Item_SC_GetBackItem();
  Item_CS_GetBackAllItem::default_instance_ = new Item_CS_GetBackAllItem();
  Item_CS_QueryChatItem::default_instance_ = new Item_CS_QueryChatItem();
  Item_SC_QueryChatItem::default_instance_ = new Item_SC_QueryChatItem();
  Item_CS_SetItemIDPos::default_instance_ = new Item_CS_SetItemIDPos();
  Item_SC_SetItemIDPos::default_instance_ = new Item_SC_SetItemIDPos();
  Item_SC_GetBackAllItem::default_instance_ = new Item_SC_GetBackAllItem();
  Item_SC_UpdateBag::default_instance_ = new Item_SC_UpdateBag();
  Item_SC_UpdateChangeItem::default_instance_ = new Item_SC_UpdateChangeItem();
  Item_SC_UpTempBag::default_instance_ = new Item_SC_UpTempBag();
  Item_SC_UpTempBagItem::default_instance_ = new Item_SC_UpTempBagItem();
  Item_SC_UpSpecialItem::default_instance_ = new Item_SC_UpSpecialItem();
  Item_SC_GetItem::default_instance_ = new Item_SC_GetItem();
  DropItemNum::default_instance_ = new DropItemNum();
  Item_SC_DropItem::default_instance_ = new Item_SC_DropItem();
  Item_SC_GetItemTips::default_instance_ = new Item_SC_GetItemTips();
  Item_CS_GetStoreInfo::default_instance_ = new Item_CS_GetStoreInfo();
  StoreInfo::default_instance_ = new StoreInfo();
  Item_SC_GetStoreInfo::default_instance_ = new Item_SC_GetStoreInfo();
  Item_CS_ActivateStore::default_instance_ = new Item_CS_ActivateStore();
  Item_SC_ActivateStore::default_instance_ = new Item_SC_ActivateStore();
  Item_CS_InToStore::default_instance_ = new Item_CS_InToStore();
  Item_SC_InToStore::default_instance_ = new Item_SC_InToStore();
  Item_CS_OutFromStore::default_instance_ = new Item_CS_OutFromStore();
  Item_SC_OutFromStore::default_instance_ = new Item_SC_OutFromStore();
  Item_CS_PutOnEquip::default_instance_ = new Item_CS_PutOnEquip();
  Item_SC_PutOnEquip::default_instance_ = new Item_SC_PutOnEquip();
  Item_CS_GetOffEquip::default_instance_ = new Item_CS_GetOffEquip();
  Item_SC_GetOffEquip::default_instance_ = new Item_SC_GetOffEquip();
  Item_CS_EquipStrength::default_instance_ = new Item_CS_EquipStrength();
  Item_SC_EquipStrength::default_instance_ = new Item_SC_EquipStrength();
  Item_CS_EquipStarUp::default_instance_ = new Item_CS_EquipStarUp();
  Item_SC_EquipStarUp::default_instance_ = new Item_SC_EquipStarUp();
  Item_CS_EquipInlay::default_instance_ = new Item_CS_EquipInlay();
  Item_SC_EquipInlay::default_instance_ = new Item_SC_EquipInlay();
  Item_CS_EquipLevelUp::default_instance_ = new Item_CS_EquipLevelUp();
  Item_SC_EquipLevelUp::default_instance_ = new Item_SC_EquipLevelUp();
  Item_CS_EquipQualityUp::default_instance_ = new Item_CS_EquipQualityUp();
  Item_SC_EquipQualityUp::default_instance_ = new Item_SC_EquipQualityUp();
  Item_CS_IncreaseEquip::default_instance_ = new Item_CS_IncreaseEquip();
  Item_SC_IncreaseEquip::default_instance_ = new Item_SC_IncreaseEquip();
  Item_CS_ResolveEquip::default_instance_ = new Item_CS_ResolveEquip();
  Item_SC_ResolveEquip::default_instance_ = new Item_SC_ResolveEquip();
  Item_CS_EquipRandAttr::default_instance_ = new Item_CS_EquipRandAttr();
  Item_SC_EquipRandAttr::default_instance_ = new Item_SC_EquipRandAttr();
  Item_CS_EquipRefine::default_instance_ = new Item_CS_EquipRefine();
  Item_SC_EquipRefine::default_instance_ = new Item_SC_EquipRefine();
  Item_CS_EquipActiveSuit::default_instance_ = new Item_CS_EquipActiveSuit();
  Item_SC_EquipActiveSuit::default_instance_ = new Item_SC_EquipActiveSuit();
  Item_CS_EquipExchange::default_instance_ = new Item_CS_EquipExchange();
  Item_SC_EquipExchange::default_instance_ = new Item_SC_EquipExchange();
  Item_CS_Compose::default_instance_ = new Item_CS_Compose();
  Item_SC_Compose::default_instance_ = new Item_SC_Compose();
  Item_CS_Compose_Gem::default_instance_ = new Item_CS_Compose_Gem();
  Item_SC_Compose_Gem::default_instance_ = new Item_SC_Compose_Gem();
  Item_CS_EquipOrdRepair::default_instance_ = new Item_CS_EquipOrdRepair();
  Item_SC_EquipOrdRepair::default_instance_ = new Item_SC_EquipOrdRepair();
  Item_CS_EquipSpeRepair::default_instance_ = new Item_CS_EquipSpeRepair();
  Item_SC_EquipSpeRepair::default_instance_ = new Item_SC_EquipSpeRepair();
  Item_CS_JewelryExchange::default_instance_ = new Item_CS_JewelryExchange();
  Item_SC_JewelryExchange::default_instance_ = new Item_SC_JewelryExchange();
  Item_CS_IntegralExchange::default_instance_ = new Item_CS_IntegralExchange();
  Item_SC_IntegralExchange::default_instance_ = new Item_SC_IntegralExchange();
  Item_CS_MoneyExchange::default_instance_ = new Item_CS_MoneyExchange();
  Item_SC_MoneyExchange::default_instance_ = new Item_SC_MoneyExchange();
  IntegralPrice::default_instance_ = new IntegralPrice();
  IntegralTimes::default_instance_ = new IntegralTimes();
  Item_CS_GetIntegralPrice::default_instance_ = new Item_CS_GetIntegralPrice();
  Item_SC_GetIntegralPrice::default_instance_ = new Item_SC_GetIntegralPrice();
  Item_CS_FastBuy::default_instance_ = new Item_CS_FastBuy();
  Item_SC_FastBuy::default_instance_ = new Item_SC_FastBuy();
  DragonSoul::default_instance_ = new DragonSoul();
  Potential::default_instance_ = new Potential();
  Item_CS_Potential::default_instance_ = new Item_CS_Potential();
  Item_SC_Potential::default_instance_ = new Item_SC_Potential();
  Item_CS_PutOnSuit::default_instance_ = new Item_CS_PutOnSuit();
  Item_SC_PutOnSuit::default_instance_ = new Item_SC_PutOnSuit();
  Item_CS_TakeOpenReward::default_instance_ = new Item_CS_TakeOpenReward();
  Item_SC_TakeOpenReward::default_instance_ = new Item_SC_TakeOpenReward();
  Item::default_instance_->InitAsDefaultInstance();
  MoneyItem::default_instance_->InitAsDefaultInstance();
  SRandAttr::default_instance_->InitAsDefaultInstance();
  EquipGird::default_instance_->InitAsDefaultInstance();
  EquipSuit::default_instance_->InitAsDefaultInstance();
  Item_CS_GetBagInfo::default_instance_->InitAsDefaultInstance();
  Item_SC_GetBagInfo::default_instance_->InitAsDefaultInstance();
  Item_CS_UseBagItem::default_instance_->InitAsDefaultInstance();
  Item_SC_UseBagItem::default_instance_->InitAsDefaultInstance();
  Item_CS_SellItem::default_instance_->InitAsDefaultInstance();
  Item_SC_SellItem::default_instance_->InitAsDefaultInstance();
  Item_CS_DiscardItem::default_instance_->InitAsDefaultInstance();
  Item_SC_DiscardItem::default_instance_->InitAsDefaultInstance();
  Item_CS_AddBagGird::default_instance_->InitAsDefaultInstance();
  Item_SC_AddBagGird::default_instance_->InitAsDefaultInstance();
  Item_CS_GetTempBagInfo::default_instance_->InitAsDefaultInstance();
  Item_SC_GetTempBagInfo::default_instance_->InitAsDefaultInstance();
  Item_CS_GetBackItem::default_instance_->InitAsDefaultInstance();
  Item_SC_GetBackItem::default_instance_->InitAsDefaultInstance();
  Item_CS_GetBackAllItem::default_instance_->InitAsDefaultInstance();
  Item_CS_QueryChatItem::default_instance_->InitAsDefaultInstance();
  Item_SC_QueryChatItem::default_instance_->InitAsDefaultInstance();
  Item_CS_SetItemIDPos::default_instance_->InitAsDefaultInstance();
  Item_SC_SetItemIDPos::default_instance_->InitAsDefaultInstance();
  Item_SC_GetBackAllItem::default_instance_->InitAsDefaultInstance();
  Item_SC_UpdateBag::default_instance_->InitAsDefaultInstance();
  Item_SC_UpdateChangeItem::default_instance_->InitAsDefaultInstance();
  Item_SC_UpTempBag::default_instance_->InitAsDefaultInstance();
  Item_SC_UpTempBagItem::default_instance_->InitAsDefaultInstance();
  Item_SC_UpSpecialItem::default_instance_->InitAsDefaultInstance();
  Item_SC_GetItem::default_instance_->InitAsDefaultInstance();
  DropItemNum::default_instance_->InitAsDefaultInstance();
  Item_SC_DropItem::default_instance_->InitAsDefaultInstance();
  Item_SC_GetItemTips::default_instance_->InitAsDefaultInstance();
  Item_CS_GetStoreInfo::default_instance_->InitAsDefaultInstance();
  StoreInfo::default_instance_->InitAsDefaultInstance();
  Item_SC_GetStoreInfo::default_instance_->InitAsDefaultInstance();
  Item_CS_ActivateStore::default_instance_->InitAsDefaultInstance();
  Item_SC_ActivateStore::default_instance_->InitAsDefaultInstance();
  Item_CS_InToStore::default_instance_->InitAsDefaultInstance();
  Item_SC_InToStore::default_instance_->InitAsDefaultInstance();
  Item_CS_OutFromStore::default_instance_->InitAsDefaultInstance();
  Item_SC_OutFromStore::default_instance_->InitAsDefaultInstance();
  Item_CS_PutOnEquip::default_instance_->InitAsDefaultInstance();
  Item_SC_PutOnEquip::default_instance_->InitAsDefaultInstance();
  Item_CS_GetOffEquip::default_instance_->InitAsDefaultInstance();
  Item_SC_GetOffEquip::default_instance_->InitAsDefaultInstance();
  Item_CS_EquipStrength::default_instance_->InitAsDefaultInstance();
  Item_SC_EquipStrength::default_instance_->InitAsDefaultInstance();
  Item_CS_EquipStarUp::default_instance_->InitAsDefaultInstance();
  Item_SC_EquipStarUp::default_instance_->InitAsDefaultInstance();
  Item_CS_EquipInlay::default_instance_->InitAsDefaultInstance();
  Item_SC_EquipInlay::default_instance_->InitAsDefaultInstance();
  Item_CS_EquipLevelUp::default_instance_->InitAsDefaultInstance();
  Item_SC_EquipLevelUp::default_instance_->InitAsDefaultInstance();
  Item_CS_EquipQualityUp::default_instance_->InitAsDefaultInstance();
  Item_SC_EquipQualityUp::default_instance_->InitAsDefaultInstance();
  Item_CS_IncreaseEquip::default_instance_->InitAsDefaultInstance();
  Item_SC_IncreaseEquip::default_instance_->InitAsDefaultInstance();
  Item_CS_ResolveEquip::default_instance_->InitAsDefaultInstance();
  Item_SC_ResolveEquip::default_instance_->InitAsDefaultInstance();
  Item_CS_EquipRandAttr::default_instance_->InitAsDefaultInstance();
  Item_SC_EquipRandAttr::default_instance_->InitAsDefaultInstance();
  Item_CS_EquipRefine::default_instance_->InitAsDefaultInstance();
  Item_SC_EquipRefine::default_instance_->InitAsDefaultInstance();
  Item_CS_EquipActiveSuit::default_instance_->InitAsDefaultInstance();
  Item_SC_EquipActiveSuit::default_instance_->InitAsDefaultInstance();
  Item_CS_EquipExchange::default_instance_->InitAsDefaultInstance();
  Item_SC_EquipExchange::default_instance_->InitAsDefaultInstance();
  Item_CS_Compose::default_instance_->InitAsDefaultInstance();
  Item_SC_Compose::default_instance_->InitAsDefaultInstance();
  Item_CS_Compose_Gem::default_instance_->InitAsDefaultInstance();
  Item_SC_Compose_Gem::default_instance_->InitAsDefaultInstance();
  Item_CS_EquipOrdRepair::default_instance_->InitAsDefaultInstance();
  Item_SC_EquipOrdRepair::default_instance_->InitAsDefaultInstance();
  Item_CS_EquipSpeRepair::default_instance_->InitAsDefaultInstance();
  Item_SC_EquipSpeRepair::default_instance_->InitAsDefaultInstance();
  Item_CS_JewelryExchange::default_instance_->InitAsDefaultInstance();
  Item_SC_JewelryExchange::default_instance_->InitAsDefaultInstance();
  Item_CS_IntegralExchange::default_instance_->InitAsDefaultInstance();
  Item_SC_IntegralExchange::default_instance_->InitAsDefaultInstance();
  Item_CS_MoneyExchange::default_instance_->InitAsDefaultInstance();
  Item_SC_MoneyExchange::default_instance_->InitAsDefaultInstance();
  IntegralPrice::default_instance_->InitAsDefaultInstance();
  IntegralTimes::default_instance_->InitAsDefaultInstance();
  Item_CS_GetIntegralPrice::default_instance_->InitAsDefaultInstance();
  Item_SC_GetIntegralPrice::default_instance_->InitAsDefaultInstance();
  Item_CS_FastBuy::default_instance_->InitAsDefaultInstance();
  Item_SC_FastBuy::default_instance_->InitAsDefaultInstance();
  DragonSoul::default_instance_->InitAsDefaultInstance();
  Potential::default_instance_->InitAsDefaultInstance();
  Item_CS_Potential::default_instance_->InitAsDefaultInstance();
  Item_SC_Potential::default_instance_->InitAsDefaultInstance();
  Item_CS_PutOnSuit::default_instance_->InitAsDefaultInstance();
  Item_SC_PutOnSuit::default_instance_->InitAsDefaultInstance();
  Item_CS_TakeOpenReward::default_instance_->InitAsDefaultInstance();
  Item_SC_TakeOpenReward::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_item_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_item_2eproto {
  StaticDescriptorInitializer_item_2eproto() {
    protobuf_AddDesc_item_2eproto();
  }
} static_descriptor_initializer_item_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Item::kUuidFieldNumber;
const int Item::kGainTimeFieldNumber;
const int Item::kIdFieldNumber;
const int Item::kNumFieldNumber;
const int Item::kParameterFieldNumber;
const int Item::kSourceFieldNumber;
const int Item::kFrozenTimeFieldNumber;
const int Item::kQualiteyFieldNumber;
const int Item::kBindFieldNumber;
#endif  // !_MSC_VER

Item::Item()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Item::InitAsDefaultInstance() {
}

Item::Item(const Item& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Item::SharedCtor() {
  _cached_size_ = 0;
  uuid_ = GOOGLE_ULONGLONG(0);
  gain_time_ = GOOGLE_ULONGLONG(0);
  id_ = 0;
  num_ = 0;
  parameter_ = 0;
  source_ = 0;
  frozen_time_ = 0;
  qualitey_ = 0;
  bind_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Item::~Item() {
  SharedDtor();
}

void Item::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Item::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_descriptor_;
}

const Item& Item::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

Item* Item::default_instance_ = NULL;

Item* Item::New() const {
  return new Item;
}

void Item::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uuid_ = GOOGLE_ULONGLONG(0);
    gain_time_ = GOOGLE_ULONGLONG(0);
    id_ = 0;
    num_ = 0;
    parameter_ = 0;
    source_ = 0;
    frozen_time_ = 0;
    qualitey_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    bind_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gain_time;
        break;
      }

      // optional uint64 gain_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gain_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gain_time_)));
          set_has_gain_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional int32 id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_num;
        break;
      }

      // optional int32 num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_parameter;
        break;
      }

      // optional int32 parameter = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_parameter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &parameter_)));
          set_has_parameter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_source;
        break;
      }

      // optional int32 source = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &source_)));
          set_has_source();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_frozen_time;
        break;
      }

      // optional int32 frozen_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_frozen_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frozen_time_)));
          set_has_frozen_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_qualitey;
        break;
      }

      // optional int32 qualitey = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qualitey:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &qualitey_)));
          set_has_qualitey();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_bind;
        break;
      }

      // optional int32 bind = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bind_)));
          set_has_bind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uuid(), output);
  }

  // optional uint64 gain_time = 2;
  if (has_gain_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->gain_time(), output);
  }

  // optional int32 id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->id(), output);
  }

  // optional int32 num = 4;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->num(), output);
  }

  // optional int32 parameter = 5;
  if (has_parameter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->parameter(), output);
  }

  // optional int32 source = 6;
  if (has_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->source(), output);
  }

  // optional int32 frozen_time = 7;
  if (has_frozen_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->frozen_time(), output);
  }

  // optional int32 qualitey = 8;
  if (has_qualitey()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->qualitey(), output);
  }

  // optional int32 bind = 9;
  if (has_bind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->bind(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Item::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 uuid = 1;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uuid(), target);
  }

  // optional uint64 gain_time = 2;
  if (has_gain_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->gain_time(), target);
  }

  // optional int32 id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->id(), target);
  }

  // optional int32 num = 4;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->num(), target);
  }

  // optional int32 parameter = 5;
  if (has_parameter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->parameter(), target);
  }

  // optional int32 source = 6;
  if (has_source()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->source(), target);
  }

  // optional int32 frozen_time = 7;
  if (has_frozen_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->frozen_time(), target);
  }

  // optional int32 qualitey = 8;
  if (has_qualitey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->qualitey(), target);
  }

  // optional int32 bind = 9;
  if (has_bind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->bind(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Item::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 uuid = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

    // optional uint64 gain_time = 2;
    if (has_gain_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gain_time());
    }

    // optional int32 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 num = 4;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int32 parameter = 5;
    if (has_parameter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->parameter());
    }

    // optional int32 source = 6;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->source());
    }

    // optional int32 frozen_time = 7;
    if (has_frozen_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->frozen_time());
    }

    // optional int32 qualitey = 8;
    if (has_qualitey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->qualitey());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 bind = 9;
    if (has_bind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bind());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Item* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Item*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Item::MergeFrom(const Item& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_gain_time()) {
      set_gain_time(from.gain_time());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_parameter()) {
      set_parameter(from.parameter());
    }
    if (from.has_source()) {
      set_source(from.source());
    }
    if (from.has_frozen_time()) {
      set_frozen_time(from.frozen_time());
    }
    if (from.has_qualitey()) {
      set_qualitey(from.qualitey());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_bind()) {
      set_bind(from.bind());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Item::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item::CopyFrom(const Item& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item::IsInitialized() const {

  return true;
}

void Item::Swap(Item* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(gain_time_, other->gain_time_);
    std::swap(id_, other->id_);
    std::swap(num_, other->num_);
    std::swap(parameter_, other->parameter_);
    std::swap(source_, other->source_);
    std::swap(frozen_time_, other->frozen_time_);
    std::swap(qualitey_, other->qualitey_);
    std::swap(bind_, other->bind_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Item::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Item_descriptor_;
  metadata.reflection = Item_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MoneyItem::kSilverFieldNumber;
const int MoneyItem::kGoldFieldNumber;
const int MoneyItem::kDiamondFieldNumber;
const int MoneyItem::kEnergyFieldNumber;
const int MoneyItem::kExpFieldNumber;
const int MoneyItem::kVigorFieldNumber;
const int MoneyItem::kIdyPointsFieldNumber;
const int MoneyItem::kFriendshipFieldNumber;
const int MoneyItem::kTalPointsFieldNumber;
const int MoneyItem::kGuildMoneyFieldNumber;
const int MoneyItem::kGuildBonusFieldNumber;
const int MoneyItem::kGuildContributionFieldNumber;
const int MoneyItem::kHonourFieldNumber;
const int MoneyItem::kAchievePointsFieldNumber;
const int MoneyItem::kTutorScoreFieldNumber;
const int MoneyItem::kFestivalScoreFieldNumber;
const int MoneyItem::kChivalryFieldNumber;
const int MoneyItem::kReturnScoreFieldNumber;
const int MoneyItem::kAwakenPointFieldNumber;
const int MoneyItem::kSoulboxpointFieldNumber;
const int MoneyItem::kDiamondBindFieldNumber;
const int MoneyItem::kMintageFieldNumber;
const int MoneyItem::kRouletteScoreFieldNumber;
#endif  // !_MSC_VER

MoneyItem::MoneyItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MoneyItem::InitAsDefaultInstance() {
}

MoneyItem::MoneyItem(const MoneyItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MoneyItem::SharedCtor() {
  _cached_size_ = 0;
  silver_ = GOOGLE_LONGLONG(0);
  gold_ = GOOGLE_LONGLONG(0);
  diamond_ = GOOGLE_LONGLONG(0);
  energy_ = GOOGLE_LONGLONG(0);
  exp_ = GOOGLE_LONGLONG(0);
  vigor_ = GOOGLE_LONGLONG(0);
  idy_points_ = GOOGLE_LONGLONG(0);
  friendship_ = GOOGLE_LONGLONG(0);
  tal_points_ = GOOGLE_LONGLONG(0);
  guild_money_ = GOOGLE_LONGLONG(0);
  guild_bonus_ = GOOGLE_LONGLONG(0);
  guild_contribution_ = GOOGLE_LONGLONG(0);
  honour_ = GOOGLE_LONGLONG(0);
  achieve_points_ = GOOGLE_LONGLONG(0);
  tutor_score_ = GOOGLE_LONGLONG(0);
  festival_score_ = GOOGLE_LONGLONG(0);
  chivalry_ = GOOGLE_LONGLONG(0);
  return_score_ = GOOGLE_LONGLONG(0);
  awaken_point_ = GOOGLE_LONGLONG(0);
  soulboxpoint_ = GOOGLE_LONGLONG(0);
  diamond_bind_ = GOOGLE_LONGLONG(0);
  mintage_ = GOOGLE_LONGLONG(0);
  roulette_score_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoneyItem::~MoneyItem() {
  SharedDtor();
}

void MoneyItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MoneyItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoneyItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoneyItem_descriptor_;
}

const MoneyItem& MoneyItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

MoneyItem* MoneyItem::default_instance_ = NULL;

MoneyItem* MoneyItem::New() const {
  return new MoneyItem;
}

void MoneyItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    silver_ = GOOGLE_LONGLONG(0);
    gold_ = GOOGLE_LONGLONG(0);
    diamond_ = GOOGLE_LONGLONG(0);
    energy_ = GOOGLE_LONGLONG(0);
    exp_ = GOOGLE_LONGLONG(0);
    vigor_ = GOOGLE_LONGLONG(0);
    idy_points_ = GOOGLE_LONGLONG(0);
    friendship_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    tal_points_ = GOOGLE_LONGLONG(0);
    guild_money_ = GOOGLE_LONGLONG(0);
    guild_bonus_ = GOOGLE_LONGLONG(0);
    guild_contribution_ = GOOGLE_LONGLONG(0);
    honour_ = GOOGLE_LONGLONG(0);
    achieve_points_ = GOOGLE_LONGLONG(0);
    tutor_score_ = GOOGLE_LONGLONG(0);
    festival_score_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    chivalry_ = GOOGLE_LONGLONG(0);
    return_score_ = GOOGLE_LONGLONG(0);
    awaken_point_ = GOOGLE_LONGLONG(0);
    soulboxpoint_ = GOOGLE_LONGLONG(0);
    diamond_bind_ = GOOGLE_LONGLONG(0);
    mintage_ = GOOGLE_LONGLONG(0);
    roulette_score_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoneyItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 silver = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &silver_)));
          set_has_silver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gold;
        break;
      }

      // required int64 gold = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_diamond;
        break;
      }

      // required int64 diamond = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_diamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &diamond_)));
          set_has_diamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_energy;
        break;
      }

      // required int64 energy = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_energy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &energy_)));
          set_has_energy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_exp;
        break;
      }

      // required int64 exp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_vigor;
        break;
      }

      // required int64 vigor = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vigor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vigor_)));
          set_has_vigor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_idy_points;
        break;
      }

      // required int64 idy_points = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_idy_points:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &idy_points_)));
          set_has_idy_points();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_friendship;
        break;
      }

      // required int64 friendship = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_friendship:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &friendship_)));
          set_has_friendship();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_tal_points;
        break;
      }

      // required int64 tal_points = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tal_points:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tal_points_)));
          set_has_tal_points();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_guild_money;
        break;
      }

      // required int64 guild_money = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guild_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guild_money_)));
          set_has_guild_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_guild_bonus;
        break;
      }

      // required int64 guild_bonus = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guild_bonus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guild_bonus_)));
          set_has_guild_bonus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_guild_contribution;
        break;
      }

      // required int64 guild_contribution = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guild_contribution:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guild_contribution_)));
          set_has_guild_contribution();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_honour;
        break;
      }

      // required int64 honour = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_honour:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &honour_)));
          set_has_honour();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_achieve_points;
        break;
      }

      // required int64 achieve_points = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_achieve_points:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &achieve_points_)));
          set_has_achieve_points();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_tutor_score;
        break;
      }

      // required int64 tutor_score = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tutor_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tutor_score_)));
          set_has_tutor_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_festival_score;
        break;
      }

      // required int64 festival_score = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_festival_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &festival_score_)));
          set_has_festival_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_chivalry;
        break;
      }

      // required int64 chivalry = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chivalry:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &chivalry_)));
          set_has_chivalry();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_return_score;
        break;
      }

      // required int64 return_score = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_return_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &return_score_)));
          set_has_return_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_awaken_point;
        break;
      }

      // required int64 awaken_point = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_awaken_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &awaken_point_)));
          set_has_awaken_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_soulboxpoint;
        break;
      }

      // required int64 soulboxpoint = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_soulboxpoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &soulboxpoint_)));
          set_has_soulboxpoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_diamond_bind;
        break;
      }

      // required int64 diamond_bind = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_diamond_bind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &diamond_bind_)));
          set_has_diamond_bind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_mintage;
        break;
      }

      // required int64 mintage = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mintage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mintage_)));
          set_has_mintage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_roulette_score;
        break;
      }

      // required int64 roulette_score = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roulette_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roulette_score_)));
          set_has_roulette_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MoneyItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 silver = 1;
  if (has_silver()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->silver(), output);
  }

  // required int64 gold = 2;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->gold(), output);
  }

  // required int64 diamond = 3;
  if (has_diamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->diamond(), output);
  }

  // required int64 energy = 4;
  if (has_energy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->energy(), output);
  }

  // required int64 exp = 5;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->exp(), output);
  }

  // required int64 vigor = 6;
  if (has_vigor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->vigor(), output);
  }

  // required int64 idy_points = 7;
  if (has_idy_points()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->idy_points(), output);
  }

  // required int64 friendship = 8;
  if (has_friendship()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->friendship(), output);
  }

  // required int64 tal_points = 9;
  if (has_tal_points()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->tal_points(), output);
  }

  // required int64 guild_money = 10;
  if (has_guild_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->guild_money(), output);
  }

  // required int64 guild_bonus = 11;
  if (has_guild_bonus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->guild_bonus(), output);
  }

  // required int64 guild_contribution = 12;
  if (has_guild_contribution()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->guild_contribution(), output);
  }

  // required int64 honour = 13;
  if (has_honour()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->honour(), output);
  }

  // required int64 achieve_points = 14;
  if (has_achieve_points()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->achieve_points(), output);
  }

  // required int64 tutor_score = 15;
  if (has_tutor_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->tutor_score(), output);
  }

  // required int64 festival_score = 16;
  if (has_festival_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->festival_score(), output);
  }

  // required int64 chivalry = 17;
  if (has_chivalry()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(17, this->chivalry(), output);
  }

  // required int64 return_score = 18;
  if (has_return_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(18, this->return_score(), output);
  }

  // required int64 awaken_point = 19;
  if (has_awaken_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(19, this->awaken_point(), output);
  }

  // required int64 soulboxpoint = 20;
  if (has_soulboxpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(20, this->soulboxpoint(), output);
  }

  // required int64 diamond_bind = 25;
  if (has_diamond_bind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(25, this->diamond_bind(), output);
  }

  // required int64 mintage = 26;
  if (has_mintage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(26, this->mintage(), output);
  }

  // required int64 roulette_score = 29;
  if (has_roulette_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(29, this->roulette_score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MoneyItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 silver = 1;
  if (has_silver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->silver(), target);
  }

  // required int64 gold = 2;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->gold(), target);
  }

  // required int64 diamond = 3;
  if (has_diamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->diamond(), target);
  }

  // required int64 energy = 4;
  if (has_energy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->energy(), target);
  }

  // required int64 exp = 5;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->exp(), target);
  }

  // required int64 vigor = 6;
  if (has_vigor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->vigor(), target);
  }

  // required int64 idy_points = 7;
  if (has_idy_points()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->idy_points(), target);
  }

  // required int64 friendship = 8;
  if (has_friendship()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->friendship(), target);
  }

  // required int64 tal_points = 9;
  if (has_tal_points()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->tal_points(), target);
  }

  // required int64 guild_money = 10;
  if (has_guild_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->guild_money(), target);
  }

  // required int64 guild_bonus = 11;
  if (has_guild_bonus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->guild_bonus(), target);
  }

  // required int64 guild_contribution = 12;
  if (has_guild_contribution()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->guild_contribution(), target);
  }

  // required int64 honour = 13;
  if (has_honour()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->honour(), target);
  }

  // required int64 achieve_points = 14;
  if (has_achieve_points()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->achieve_points(), target);
  }

  // required int64 tutor_score = 15;
  if (has_tutor_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->tutor_score(), target);
  }

  // required int64 festival_score = 16;
  if (has_festival_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(16, this->festival_score(), target);
  }

  // required int64 chivalry = 17;
  if (has_chivalry()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(17, this->chivalry(), target);
  }

  // required int64 return_score = 18;
  if (has_return_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(18, this->return_score(), target);
  }

  // required int64 awaken_point = 19;
  if (has_awaken_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(19, this->awaken_point(), target);
  }

  // required int64 soulboxpoint = 20;
  if (has_soulboxpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(20, this->soulboxpoint(), target);
  }

  // required int64 diamond_bind = 25;
  if (has_diamond_bind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(25, this->diamond_bind(), target);
  }

  // required int64 mintage = 26;
  if (has_mintage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(26, this->mintage(), target);
  }

  // required int64 roulette_score = 29;
  if (has_roulette_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(29, this->roulette_score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MoneyItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 silver = 1;
    if (has_silver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->silver());
    }

    // required int64 gold = 2;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gold());
    }

    // required int64 diamond = 3;
    if (has_diamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->diamond());
    }

    // required int64 energy = 4;
    if (has_energy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->energy());
    }

    // required int64 exp = 5;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->exp());
    }

    // required int64 vigor = 6;
    if (has_vigor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vigor());
    }

    // required int64 idy_points = 7;
    if (has_idy_points()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->idy_points());
    }

    // required int64 friendship = 8;
    if (has_friendship()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->friendship());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int64 tal_points = 9;
    if (has_tal_points()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tal_points());
    }

    // required int64 guild_money = 10;
    if (has_guild_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->guild_money());
    }

    // required int64 guild_bonus = 11;
    if (has_guild_bonus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->guild_bonus());
    }

    // required int64 guild_contribution = 12;
    if (has_guild_contribution()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->guild_contribution());
    }

    // required int64 honour = 13;
    if (has_honour()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->honour());
    }

    // required int64 achieve_points = 14;
    if (has_achieve_points()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->achieve_points());
    }

    // required int64 tutor_score = 15;
    if (has_tutor_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tutor_score());
    }

    // required int64 festival_score = 16;
    if (has_festival_score()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->festival_score());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required int64 chivalry = 17;
    if (has_chivalry()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->chivalry());
    }

    // required int64 return_score = 18;
    if (has_return_score()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->return_score());
    }

    // required int64 awaken_point = 19;
    if (has_awaken_point()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->awaken_point());
    }

    // required int64 soulboxpoint = 20;
    if (has_soulboxpoint()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->soulboxpoint());
    }

    // required int64 diamond_bind = 25;
    if (has_diamond_bind()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->diamond_bind());
    }

    // required int64 mintage = 26;
    if (has_mintage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mintage());
    }

    // required int64 roulette_score = 29;
    if (has_roulette_score()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->roulette_score());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoneyItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoneyItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoneyItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoneyItem::MergeFrom(const MoneyItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_silver()) {
      set_silver(from.silver());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_diamond()) {
      set_diamond(from.diamond());
    }
    if (from.has_energy()) {
      set_energy(from.energy());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_vigor()) {
      set_vigor(from.vigor());
    }
    if (from.has_idy_points()) {
      set_idy_points(from.idy_points());
    }
    if (from.has_friendship()) {
      set_friendship(from.friendship());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_tal_points()) {
      set_tal_points(from.tal_points());
    }
    if (from.has_guild_money()) {
      set_guild_money(from.guild_money());
    }
    if (from.has_guild_bonus()) {
      set_guild_bonus(from.guild_bonus());
    }
    if (from.has_guild_contribution()) {
      set_guild_contribution(from.guild_contribution());
    }
    if (from.has_honour()) {
      set_honour(from.honour());
    }
    if (from.has_achieve_points()) {
      set_achieve_points(from.achieve_points());
    }
    if (from.has_tutor_score()) {
      set_tutor_score(from.tutor_score());
    }
    if (from.has_festival_score()) {
      set_festival_score(from.festival_score());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_chivalry()) {
      set_chivalry(from.chivalry());
    }
    if (from.has_return_score()) {
      set_return_score(from.return_score());
    }
    if (from.has_awaken_point()) {
      set_awaken_point(from.awaken_point());
    }
    if (from.has_soulboxpoint()) {
      set_soulboxpoint(from.soulboxpoint());
    }
    if (from.has_diamond_bind()) {
      set_diamond_bind(from.diamond_bind());
    }
    if (from.has_mintage()) {
      set_mintage(from.mintage());
    }
    if (from.has_roulette_score()) {
      set_roulette_score(from.roulette_score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoneyItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneyItem::CopyFrom(const MoneyItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneyItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x007fffff) != 0x007fffff) return false;

  return true;
}

void MoneyItem::Swap(MoneyItem* other) {
  if (other != this) {
    std::swap(silver_, other->silver_);
    std::swap(gold_, other->gold_);
    std::swap(diamond_, other->diamond_);
    std::swap(energy_, other->energy_);
    std::swap(exp_, other->exp_);
    std::swap(vigor_, other->vigor_);
    std::swap(idy_points_, other->idy_points_);
    std::swap(friendship_, other->friendship_);
    std::swap(tal_points_, other->tal_points_);
    std::swap(guild_money_, other->guild_money_);
    std::swap(guild_bonus_, other->guild_bonus_);
    std::swap(guild_contribution_, other->guild_contribution_);
    std::swap(honour_, other->honour_);
    std::swap(achieve_points_, other->achieve_points_);
    std::swap(tutor_score_, other->tutor_score_);
    std::swap(festival_score_, other->festival_score_);
    std::swap(chivalry_, other->chivalry_);
    std::swap(return_score_, other->return_score_);
    std::swap(awaken_point_, other->awaken_point_);
    std::swap(soulboxpoint_, other->soulboxpoint_);
    std::swap(diamond_bind_, other->diamond_bind_);
    std::swap(mintage_, other->mintage_);
    std::swap(roulette_score_, other->roulette_score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoneyItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoneyItem_descriptor_;
  metadata.reflection = MoneyItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SRandAttr::kUiAttrIdFieldNumber;
const int SRandAttr::kUiAttrValFieldNumber;
const int SRandAttr::kUiRefineLevelFieldNumber;
#endif  // !_MSC_VER

SRandAttr::SRandAttr()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SRandAttr::InitAsDefaultInstance() {
}

SRandAttr::SRandAttr(const SRandAttr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SRandAttr::SharedCtor() {
  _cached_size_ = 0;
  uiattrid_ = 0u;
  uiattrval_ = 0u;
  uirefinelevel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SRandAttr::~SRandAttr() {
  SharedDtor();
}

void SRandAttr::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SRandAttr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SRandAttr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SRandAttr_descriptor_;
}

const SRandAttr& SRandAttr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

SRandAttr* SRandAttr::default_instance_ = NULL;

SRandAttr* SRandAttr::New() const {
  return new SRandAttr;
}

void SRandAttr::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uiattrid_ = 0u;
    uiattrval_ = 0u;
    uirefinelevel_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SRandAttr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uiAttrId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiattrid_)));
          set_has_uiattrid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uiAttrVal;
        break;
      }

      // optional uint32 uiAttrVal = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiAttrVal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiattrval_)));
          set_has_uiattrval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uiRefineLevel;
        break;
      }

      // optional uint32 uiRefineLevel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiRefineLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uirefinelevel_)));
          set_has_uirefinelevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SRandAttr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uiAttrId = 1;
  if (has_uiattrid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uiattrid(), output);
  }

  // optional uint32 uiAttrVal = 2;
  if (has_uiattrval()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uiattrval(), output);
  }

  // optional uint32 uiRefineLevel = 3;
  if (has_uirefinelevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->uirefinelevel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SRandAttr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uiAttrId = 1;
  if (has_uiattrid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uiattrid(), target);
  }

  // optional uint32 uiAttrVal = 2;
  if (has_uiattrval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uiattrval(), target);
  }

  // optional uint32 uiRefineLevel = 3;
  if (has_uirefinelevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->uirefinelevel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SRandAttr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uiAttrId = 1;
    if (has_uiattrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiattrid());
    }

    // optional uint32 uiAttrVal = 2;
    if (has_uiattrval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiattrval());
    }

    // optional uint32 uiRefineLevel = 3;
    if (has_uirefinelevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uirefinelevel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SRandAttr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SRandAttr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SRandAttr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SRandAttr::MergeFrom(const SRandAttr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uiattrid()) {
      set_uiattrid(from.uiattrid());
    }
    if (from.has_uiattrval()) {
      set_uiattrval(from.uiattrval());
    }
    if (from.has_uirefinelevel()) {
      set_uirefinelevel(from.uirefinelevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SRandAttr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SRandAttr::CopyFrom(const SRandAttr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SRandAttr::IsInitialized() const {

  return true;
}

void SRandAttr::Swap(SRandAttr* other) {
  if (other != this) {
    std::swap(uiattrid_, other->uiattrid_);
    std::swap(uiattrval_, other->uiattrval_);
    std::swap(uirefinelevel_, other->uirefinelevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SRandAttr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SRandAttr_descriptor_;
  metadata.reflection = SRandAttr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipGird::kUiGirdPosFieldNumber;
const int EquipGird::kUiUpgradeLevelFieldNumber;
const int EquipGird::kUiStarLevelFieldNumber;
const int EquipGird::kVecGemFieldNumber;
const int EquipGird::kVecRandAttrFieldNumber;
const int EquipGird::kUiStarUpCountFieldNumber;
const int EquipGird::kUiBestEquipFieldNumber;
#endif  // !_MSC_VER

EquipGird::EquipGird()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipGird::InitAsDefaultInstance() {
}

EquipGird::EquipGird(const EquipGird& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipGird::SharedCtor() {
  _cached_size_ = 0;
  uigirdpos_ = 0u;
  uiupgradelevel_ = 0u;
  uistarlevel_ = 0u;
  uistarupcount_ = 0u;
  uibestequip_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipGird::~EquipGird() {
  SharedDtor();
}

void EquipGird::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipGird::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipGird::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipGird_descriptor_;
}

const EquipGird& EquipGird::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

EquipGird* EquipGird::default_instance_ = NULL;

EquipGird* EquipGird::New() const {
  return new EquipGird;
}

void EquipGird::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uigirdpos_ = 0u;
    uiupgradelevel_ = 0u;
    uistarlevel_ = 0u;
    uistarupcount_ = 0u;
    uibestequip_ = 0u;
  }
  vecgem_.Clear();
  vecrandattr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipGird::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uiGirdPos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uigirdpos_)));
          set_has_uigirdpos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uiUpgradeLevel;
        break;
      }

      // optional uint32 uiUpgradeLevel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiUpgradeLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiupgradelevel_)));
          set_has_uiupgradelevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uiStarLevel;
        break;
      }

      // optional uint32 uiStarLevel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiStarLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uistarlevel_)));
          set_has_uistarlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_vecGem;
        break;
      }

      // repeated uint32 vecGem = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vecGem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_vecgem())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_vecgem())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_vecGem;
        if (input->ExpectTag(42)) goto parse_vecRandAttr;
        break;
      }

      // repeated .proto.message.SRandAttr vecRandAttr = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vecRandAttr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vecrandattr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_vecRandAttr;
        if (input->ExpectTag(48)) goto parse_uiStarUpCount;
        break;
      }

      // optional uint32 uiStarUpCount = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiStarUpCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uistarupcount_)));
          set_has_uistarupcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_uiBestEquip;
        break;
      }

      // optional uint32 uiBestEquip = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiBestEquip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uibestequip_)));
          set_has_uibestequip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipGird::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uiGirdPos = 1;
  if (has_uigirdpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uigirdpos(), output);
  }

  // optional uint32 uiUpgradeLevel = 2;
  if (has_uiupgradelevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uiupgradelevel(), output);
  }

  // optional uint32 uiStarLevel = 3;
  if (has_uistarlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->uistarlevel(), output);
  }

  // repeated uint32 vecGem = 4;
  for (int i = 0; i < this->vecgem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->vecgem(i), output);
  }

  // repeated .proto.message.SRandAttr vecRandAttr = 5;
  for (int i = 0; i < this->vecrandattr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->vecrandattr(i), output);
  }

  // optional uint32 uiStarUpCount = 6;
  if (has_uistarupcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->uistarupcount(), output);
  }

  // optional uint32 uiBestEquip = 7;
  if (has_uibestequip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->uibestequip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipGird::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uiGirdPos = 1;
  if (has_uigirdpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uigirdpos(), target);
  }

  // optional uint32 uiUpgradeLevel = 2;
  if (has_uiupgradelevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uiupgradelevel(), target);
  }

  // optional uint32 uiStarLevel = 3;
  if (has_uistarlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->uistarlevel(), target);
  }

  // repeated uint32 vecGem = 4;
  for (int i = 0; i < this->vecgem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->vecgem(i), target);
  }

  // repeated .proto.message.SRandAttr vecRandAttr = 5;
  for (int i = 0; i < this->vecrandattr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->vecrandattr(i), target);
  }

  // optional uint32 uiStarUpCount = 6;
  if (has_uistarupcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->uistarupcount(), target);
  }

  // optional uint32 uiBestEquip = 7;
  if (has_uibestequip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->uibestequip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipGird::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uiGirdPos = 1;
    if (has_uigirdpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uigirdpos());
    }

    // optional uint32 uiUpgradeLevel = 2;
    if (has_uiupgradelevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiupgradelevel());
    }

    // optional uint32 uiStarLevel = 3;
    if (has_uistarlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uistarlevel());
    }

    // optional uint32 uiStarUpCount = 6;
    if (has_uistarupcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uistarupcount());
    }

    // optional uint32 uiBestEquip = 7;
    if (has_uibestequip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uibestequip());
    }

  }
  // repeated uint32 vecGem = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->vecgem_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->vecgem(i));
    }
    total_size += 1 * this->vecgem_size() + data_size;
  }

  // repeated .proto.message.SRandAttr vecRandAttr = 5;
  total_size += 1 * this->vecrandattr_size();
  for (int i = 0; i < this->vecrandattr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vecrandattr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipGird::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipGird* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipGird*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipGird::MergeFrom(const EquipGird& from) {
  GOOGLE_CHECK_NE(&from, this);
  vecgem_.MergeFrom(from.vecgem_);
  vecrandattr_.MergeFrom(from.vecrandattr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uigirdpos()) {
      set_uigirdpos(from.uigirdpos());
    }
    if (from.has_uiupgradelevel()) {
      set_uiupgradelevel(from.uiupgradelevel());
    }
    if (from.has_uistarlevel()) {
      set_uistarlevel(from.uistarlevel());
    }
    if (from.has_uistarupcount()) {
      set_uistarupcount(from.uistarupcount());
    }
    if (from.has_uibestequip()) {
      set_uibestequip(from.uibestequip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipGird::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipGird::CopyFrom(const EquipGird& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipGird::IsInitialized() const {

  return true;
}

void EquipGird::Swap(EquipGird* other) {
  if (other != this) {
    std::swap(uigirdpos_, other->uigirdpos_);
    std::swap(uiupgradelevel_, other->uiupgradelevel_);
    std::swap(uistarlevel_, other->uistarlevel_);
    vecgem_.Swap(&other->vecgem_);
    vecrandattr_.Swap(&other->vecrandattr_);
    std::swap(uistarupcount_, other->uistarupcount_);
    std::swap(uibestequip_, other->uibestequip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipGird::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipGird_descriptor_;
  metadata.reflection = EquipGird_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipSuit::kUiSuitIdFieldNumber;
const int EquipSuit::kUiSuitAttrFieldNumber;
#endif  // !_MSC_VER

EquipSuit::EquipSuit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipSuit::InitAsDefaultInstance() {
}

EquipSuit::EquipSuit(const EquipSuit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipSuit::SharedCtor() {
  _cached_size_ = 0;
  uisuitid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipSuit::~EquipSuit() {
  SharedDtor();
}

void EquipSuit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipSuit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipSuit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipSuit_descriptor_;
}

const EquipSuit& EquipSuit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

EquipSuit* EquipSuit::default_instance_ = NULL;

EquipSuit* EquipSuit::New() const {
  return new EquipSuit;
}

void EquipSuit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uisuitid_ = 0u;
  }
  uisuitattr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipSuit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uiSuitId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uisuitid_)));
          set_has_uisuitid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uiSuitAttr;
        break;
      }

      // repeated uint32 uiSuitAttr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiSuitAttr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_uisuitattr())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_uisuitattr())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uiSuitAttr;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipSuit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uiSuitId = 1;
  if (has_uisuitid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uisuitid(), output);
  }

  // repeated uint32 uiSuitAttr = 2;
  for (int i = 0; i < this->uisuitattr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->uisuitattr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipSuit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uiSuitId = 1;
  if (has_uisuitid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uisuitid(), target);
  }

  // repeated uint32 uiSuitAttr = 2;
  for (int i = 0; i < this->uisuitattr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->uisuitattr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipSuit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uiSuitId = 1;
    if (has_uisuitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uisuitid());
    }

  }
  // repeated uint32 uiSuitAttr = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->uisuitattr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->uisuitattr(i));
    }
    total_size += 1 * this->uisuitattr_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipSuit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipSuit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipSuit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipSuit::MergeFrom(const EquipSuit& from) {
  GOOGLE_CHECK_NE(&from, this);
  uisuitattr_.MergeFrom(from.uisuitattr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uisuitid()) {
      set_uisuitid(from.uisuitid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipSuit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipSuit::CopyFrom(const EquipSuit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipSuit::IsInitialized() const {

  return true;
}

void EquipSuit::Swap(EquipSuit* other) {
  if (other != this) {
    std::swap(uisuitid_, other->uisuitid_);
    uisuitattr_.Swap(&other->uisuitattr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipSuit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipSuit_descriptor_;
  metadata.reflection = EquipSuit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Item_CS_GetBagInfo::kNeedRedPointInfoFieldNumber;
#endif  // !_MSC_VER

Item_CS_GetBagInfo::Item_CS_GetBagInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Item_CS_GetBagInfo::InitAsDefaultInstance() {
}

Item_CS_GetBagInfo::Item_CS_GetBagInfo(const Item_CS_GetBagInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Item_CS_GetBagInfo::SharedCtor() {
  _cached_size_ = 0;
  needredpointinfo_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Item_CS_GetBagInfo::~Item_CS_GetBagInfo() {
  SharedDtor();
}

void Item_CS_GetBagInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Item_CS_GetBagInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Item_CS_GetBagInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_CS_GetBagInfo_descriptor_;
}

const Item_CS_GetBagInfo& Item_CS_GetBagInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

Item_CS_GetBagInfo* Item_CS_GetBagInfo::default_instance_ = NULL;

Item_CS_GetBagInfo* Item_CS_GetBagInfo::New() const {
  return new Item_CS_GetBagInfo;
}

void Item_CS_GetBagInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    needredpointinfo_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Item_CS_GetBagInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool needRedPointInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &needredpointinfo_)));
          set_has_needredpointinfo();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Item_CS_GetBagInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool needRedPointInfo = 1;
  if (has_needredpointinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->needredpointinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Item_CS_GetBagInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool needRedPointInfo = 1;
  if (has_needredpointinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->needredpointinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Item_CS_GetBagInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool needRedPointInfo = 1;
    if (has_needredpointinfo()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item_CS_GetBagInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Item_CS_GetBagInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Item_CS_GetBagInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Item_CS_GetBagInfo::MergeFrom(const Item_CS_GetBagInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_needredpointinfo()) {
      set_needredpointinfo(from.needredpointinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Item_CS_GetBagInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item_CS_GetBagInfo::CopyFrom(const Item_CS_GetBagInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item_CS_GetBagInfo::IsInitialized() const {

  return true;
}

void Item_CS_GetBagInfo::Swap(Item_CS_GetBagInfo* other) {
  if (other != this) {
    std::swap(needredpointinfo_, other->needredpointinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Item_CS_GetBagInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Item_CS_GetBagInfo_descriptor_;
  metadata.reflection = Item_CS_GetBagInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Item_SC_GetBagInfo::kResultFieldNumber;
const int Item_SC_GetBagInfo::kGridNumMaxFieldNumber;
const int Item_SC_GetBagInfo::kGridNumFieldNumber;
const int Item_SC_GetBagInfo::kBuyTimesFieldNumber;
const int Item_SC_GetBagInfo::kItemListFieldNumber;
const int Item_SC_GetBagInfo::kEquipListFieldNumber;
const int Item_SC_GetBagInfo::kEquipgirdListFieldNumber;
const int Item_SC_GetBagInfo::kSuitListFieldNumber;
const int Item_SC_GetBagInfo::kItemUseCountFieldNumber;
const int Item_SC_GetBagInfo::kItemUseCDFieldNumber;
#endif  // !_MSC_VER

Item_SC_GetBagInfo::Item_SC_GetBagInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Item_SC_GetBagInfo::InitAsDefaultInstance() {
}

Item_SC_GetBagInfo::Item_SC_GetBagInfo(const Item_SC_GetBagInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Item_SC_GetBagInfo::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  grid_num_max_ = 0;
  grid_num_ = 0;
  buy_times_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Item_SC_GetBagInfo::~Item_SC_GetBagInfo() {
  SharedDtor();
}

void Item_SC_GetBagInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Item_SC_GetBagInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Item_SC_GetBagInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_SC_GetBagInfo_descriptor_;
}

const Item_SC_GetBagInfo& Item_SC_GetBagInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

Item_SC_GetBagInfo* Item_SC_GetBagInfo::default_instance_ = NULL;

Item_SC_GetBagInfo* Item_SC_GetBagInfo::New() const {
  return new Item_SC_GetBagInfo;
}

void Item_SC_GetBagInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    grid_num_max_ = 0;
    grid_num_ = 0;
    buy_times_ = 0;
  }
  item_list_.Clear();
  equip_list_.Clear();
  equipgird_list_.Clear();
  suit_list_.Clear();
  itemusecount_.Clear();
  itemusecd_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Item_SC_GetBagInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_grid_num_max;
        break;
      }

      // optional int32 grid_num_max = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grid_num_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grid_num_max_)));
          set_has_grid_num_max();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_grid_num;
        break;
      }

      // optional int32 grid_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grid_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grid_num_)));
          set_has_grid_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_buy_times;
        break;
      }

      // optional int32 buy_times = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buy_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buy_times_)));
          set_has_buy_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_item_list;
        break;
      }

      // repeated .proto.message.Item item_list = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_item_list;
        if (input->ExpectTag(50)) goto parse_equip_list;
        break;
      }

      // repeated .proto.message.Equip equip_list = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equip_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_equip_list;
        if (input->ExpectTag(58)) goto parse_equipgird_list;
        break;
      }

      // repeated .proto.message.EquipGird equipgird_list = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equipgird_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equipgird_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_equipgird_list;
        if (input->ExpectTag(66)) goto parse_suit_list;
        break;
      }

      // repeated .proto.message.EquipSuit suit_list = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_suit_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_suit_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_suit_list;
        if (input->ExpectTag(74)) goto parse_itemUseCount;
        break;
      }

      // repeated .proto.message.IDNum itemUseCount = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_itemUseCount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_itemusecount()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_itemUseCount;
        if (input->ExpectTag(82)) goto parse_itemUseCD;
        break;
      }

      // repeated .proto.message.IDNum itemUseCD = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_itemUseCD:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_itemusecd()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_itemUseCD;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Item_SC_GetBagInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 grid_num_max = 2;
  if (has_grid_num_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->grid_num_max(), output);
  }

  // optional int32 grid_num = 3;
  if (has_grid_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->grid_num(), output);
  }

  // optional int32 buy_times = 4;
  if (has_buy_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->buy_times(), output);
  }

  // repeated .proto.message.Item item_list = 5;
  for (int i = 0; i < this->item_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->item_list(i), output);
  }

  // repeated .proto.message.Equip equip_list = 6;
  for (int i = 0; i < this->equip_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->equip_list(i), output);
  }

  // repeated .proto.message.EquipGird equipgird_list = 7;
  for (int i = 0; i < this->equipgird_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->equipgird_list(i), output);
  }

  // repeated .proto.message.EquipSuit suit_list = 8;
  for (int i = 0; i < this->suit_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->suit_list(i), output);
  }

  // repeated .proto.message.IDNum itemUseCount = 9;
  for (int i = 0; i < this->itemusecount_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->itemusecount(i), output);
  }

  // repeated .proto.message.IDNum itemUseCD = 10;
  for (int i = 0; i < this->itemusecd_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->itemusecd(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Item_SC_GetBagInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 grid_num_max = 2;
  if (has_grid_num_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->grid_num_max(), target);
  }

  // optional int32 grid_num = 3;
  if (has_grid_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->grid_num(), target);
  }

  // optional int32 buy_times = 4;
  if (has_buy_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->buy_times(), target);
  }

  // repeated .proto.message.Item item_list = 5;
  for (int i = 0; i < this->item_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->item_list(i), target);
  }

  // repeated .proto.message.Equip equip_list = 6;
  for (int i = 0; i < this->equip_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->equip_list(i), target);
  }

  // repeated .proto.message.EquipGird equipgird_list = 7;
  for (int i = 0; i < this->equipgird_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->equipgird_list(i), target);
  }

  // repeated .proto.message.EquipSuit suit_list = 8;
  for (int i = 0; i < this->suit_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->suit_list(i), target);
  }

  // repeated .proto.message.IDNum itemUseCount = 9;
  for (int i = 0; i < this->itemusecount_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->itemusecount(i), target);
  }

  // repeated .proto.message.IDNum itemUseCD = 10;
  for (int i = 0; i < this->itemusecd_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->itemusecd(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Item_SC_GetBagInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 grid_num_max = 2;
    if (has_grid_num_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grid_num_max());
    }

    // optional int32 grid_num = 3;
    if (has_grid_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grid_num());
    }

    // optional int32 buy_times = 4;
    if (has_buy_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buy_times());
    }

  }
  // repeated .proto.message.Item item_list = 5;
  total_size += 1 * this->item_list_size();
  for (int i = 0; i < this->item_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_list(i));
  }

  // repeated .proto.message.Equip equip_list = 6;
  total_size += 1 * this->equip_list_size();
  for (int i = 0; i < this->equip_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equip_list(i));
  }

  // repeated .proto.message.EquipGird equipgird_list = 7;
  total_size += 1 * this->equipgird_list_size();
  for (int i = 0; i < this->equipgird_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equipgird_list(i));
  }

  // repeated .proto.message.EquipSuit suit_list = 8;
  total_size += 1 * this->suit_list_size();
  for (int i = 0; i < this->suit_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->suit_list(i));
  }

  // repeated .proto.message.IDNum itemUseCount = 9;
  total_size += 1 * this->itemusecount_size();
  for (int i = 0; i < this->itemusecount_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->itemusecount(i));
  }

  // repeated .proto.message.IDNum itemUseCD = 10;
  total_size += 1 * this->itemusecd_size();
  for (int i = 0; i < this->itemusecd_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->itemusecd(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item_SC_GetBagInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Item_SC_GetBagInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Item_SC_GetBagInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Item_SC_GetBagInfo::MergeFrom(const Item_SC_GetBagInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_list_.MergeFrom(from.item_list_);
  equip_list_.MergeFrom(from.equip_list_);
  equipgird_list_.MergeFrom(from.equipgird_list_);
  suit_list_.MergeFrom(from.suit_list_);
  itemusecount_.MergeFrom(from.itemusecount_);
  itemusecd_.MergeFrom(from.itemusecd_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_grid_num_max()) {
      set_grid_num_max(from.grid_num_max());
    }
    if (from.has_grid_num()) {
      set_grid_num(from.grid_num());
    }
    if (from.has_buy_times()) {
      set_buy_times(from.buy_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Item_SC_GetBagInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item_SC_GetBagInfo::CopyFrom(const Item_SC_GetBagInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item_SC_GetBagInfo::IsInitialized() const {

  return true;
}

void Item_SC_GetBagInfo::Swap(Item_SC_GetBagInfo* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(grid_num_max_, other->grid_num_max_);
    std::swap(grid_num_, other->grid_num_);
    std::swap(buy_times_, other->buy_times_);
    item_list_.Swap(&other->item_list_);
    equip_list_.Swap(&other->equip_list_);
    equipgird_list_.Swap(&other->equipgird_list_);
    suit_list_.Swap(&other->suit_list_);
    itemusecount_.Swap(&other->itemusecount_);
    itemusecd_.Swap(&other->itemusecd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Item_SC_GetBagInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Item_SC_GetBagInfo_descriptor_;
  metadata.reflection = Item_SC_GetBagInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Item_CS_UseBagItem::kUuidFieldNumber;
const int Item_CS_UseBagItem::kItemNumFieldNumber;
#endif  // !_MSC_VER

Item_CS_UseBagItem::Item_CS_UseBagItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Item_CS_UseBagItem::InitAsDefaultInstance() {
}

Item_CS_UseBagItem::Item_CS_UseBagItem(const Item_CS_UseBagItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Item_CS_UseBagItem::SharedCtor() {
  _cached_size_ = 0;
  uuid_ = GOOGLE_ULONGLONG(0);
  item_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Item_CS_UseBagItem::~Item_CS_UseBagItem() {
  SharedDtor();
}

void Item_CS_UseBagItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Item_CS_UseBagItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Item_CS_UseBagItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_CS_UseBagItem_descriptor_;
}

const Item_CS_UseBagItem& Item_CS_UseBagItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

Item_CS_UseBagItem* Item_CS_UseBagItem::default_instance_ = NULL;

Item_CS_UseBagItem* Item_CS_UseBagItem::New() const {
  return new Item_CS_UseBagItem;
}

void Item_CS_UseBagItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uuid_ = GOOGLE_ULONGLONG(0);
    item_num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Item_CS_UseBagItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_num;
        break;
      }

      // optional int32 item_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_num_)));
          set_has_item_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Item_CS_UseBagItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uuid(), output);
  }

  // optional int32 item_num = 2;
  if (has_item_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->item_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Item_CS_UseBagItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 uuid = 1;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uuid(), target);
  }

  // optional int32 item_num = 2;
  if (has_item_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->item_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Item_CS_UseBagItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 uuid = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

    // optional int32 item_num = 2;
    if (has_item_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item_CS_UseBagItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Item_CS_UseBagItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Item_CS_UseBagItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Item_CS_UseBagItem::MergeFrom(const Item_CS_UseBagItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_item_num()) {
      set_item_num(from.item_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Item_CS_UseBagItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item_CS_UseBagItem::CopyFrom(const Item_CS_UseBagItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item_CS_UseBagItem::IsInitialized() const {

  return true;
}

void Item_CS_UseBagItem::Swap(Item_CS_UseBagItem* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(item_num_, other->item_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Item_CS_UseBagItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Item_CS_UseBagItem_descriptor_;
  metadata.reflection = Item_CS_UseBagItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Item_SC_UseBagItem::kResultFieldNumber;
const int Item_SC_UseBagItem::kItemUuidFieldNumber;
const int Item_SC_UseBagItem::kItemIdFieldNumber;
#endif  // !_MSC_VER

Item_SC_UseBagItem::Item_SC_UseBagItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Item_SC_UseBagItem::InitAsDefaultInstance() {
}

Item_SC_UseBagItem::Item_SC_UseBagItem(const Item_SC_UseBagItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Item_SC_UseBagItem::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  item_uuid_ = GOOGLE_ULONGLONG(0);
  item_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Item_SC_UseBagItem::~Item_SC_UseBagItem() {
  SharedDtor();
}

void Item_SC_UseBagItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Item_SC_UseBagItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Item_SC_UseBagItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_SC_UseBagItem_descriptor_;
}

const Item_SC_UseBagItem& Item_SC_UseBagItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

Item_SC_UseBagItem* Item_SC_UseBagItem::default_instance_ = NULL;

Item_SC_UseBagItem* Item_SC_UseBagItem::New() const {
  return new Item_SC_UseBagItem;
}

void Item_SC_UseBagItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    item_uuid_ = GOOGLE_ULONGLONG(0);
    item_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Item_SC_UseBagItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_uuid;
        break;
      }

      // optional uint64 item_uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_uuid_)));
          set_has_item_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item_id;
        break;
      }

      // optional int32 item_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Item_SC_UseBagItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional uint64 item_uuid = 2;
  if (has_item_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->item_uuid(), output);
  }

  // optional int32 item_id = 3;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->item_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Item_SC_UseBagItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional uint64 item_uuid = 2;
  if (has_item_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->item_uuid(), target);
  }

  // optional int32 item_id = 3;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->item_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Item_SC_UseBagItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional uint64 item_uuid = 2;
    if (has_item_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_uuid());
    }

    // optional int32 item_id = 3;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item_SC_UseBagItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Item_SC_UseBagItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Item_SC_UseBagItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Item_SC_UseBagItem::MergeFrom(const Item_SC_UseBagItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_item_uuid()) {
      set_item_uuid(from.item_uuid());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Item_SC_UseBagItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item_SC_UseBagItem::CopyFrom(const Item_SC_UseBagItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item_SC_UseBagItem::IsInitialized() const {

  return true;
}

void Item_SC_UseBagItem::Swap(Item_SC_UseBagItem* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(item_uuid_, other->item_uuid_);
    std::swap(item_id_, other->item_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Item_SC_UseBagItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Item_SC_UseBagItem_descriptor_;
  metadata.reflection = Item_SC_UseBagItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Item_CS_SellItem::kUuidFieldNumber;
const int Item_CS_SellItem::kItemNumFieldNumber;
#endif  // !_MSC_VER

Item_CS_SellItem::Item_CS_SellItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Item_CS_SellItem::InitAsDefaultInstance() {
}

Item_CS_SellItem::Item_CS_SellItem(const Item_CS_SellItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Item_CS_SellItem::SharedCtor() {
  _cached_size_ = 0;
  uuid_ = GOOGLE_ULONGLONG(0);
  item_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Item_CS_SellItem::~Item_CS_SellItem() {
  SharedDtor();
}

void Item_CS_SellItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Item_CS_SellItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Item_CS_SellItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_CS_SellItem_descriptor_;
}

const Item_CS_SellItem& Item_CS_SellItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

Item_CS_SellItem* Item_CS_SellItem::default_instance_ = NULL;

Item_CS_SellItem* Item_CS_SellItem::New() const {
  return new Item_CS_SellItem;
}

void Item_CS_SellItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uuid_ = GOOGLE_ULONGLONG(0);
    item_num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Item_CS_SellItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_num;
        break;
      }

      // optional int32 item_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_num_)));
          set_has_item_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Item_CS_SellItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uuid(), output);
  }

  // optional int32 item_num = 2;
  if (has_item_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->item_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Item_CS_SellItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 uuid = 1;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uuid(), target);
  }

  // optional int32 item_num = 2;
  if (has_item_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->item_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Item_CS_SellItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 uuid = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

    // optional int32 item_num = 2;
    if (has_item_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item_CS_SellItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Item_CS_SellItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Item_CS_SellItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Item_CS_SellItem::MergeFrom(const Item_CS_SellItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_item_num()) {
      set_item_num(from.item_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Item_CS_SellItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item_CS_SellItem::CopyFrom(const Item_CS_SellItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item_CS_SellItem::IsInitialized() const {

  return true;
}

void Item_CS_SellItem::Swap(Item_CS_SellItem* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(item_num_, other->item_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Item_CS_SellItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Item_CS_SellItem_descriptor_;
  metadata.reflection = Item_CS_SellItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Item_SC_SellItem::kResultFieldNumber;
const int Item_SC_SellItem::kItemIdFieldNumber;
const int Item_SC_SellItem::kItemNumFieldNumber;
#endif  // !_MSC_VER

Item_SC_SellItem::Item_SC_SellItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Item_SC_SellItem::InitAsDefaultInstance() {
}

Item_SC_SellItem::Item_SC_SellItem(const Item_SC_SellItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Item_SC_SellItem::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  item_id_ = 0;
  item_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Item_SC_SellItem::~Item_SC_SellItem() {
  SharedDtor();
}

void Item_SC_SellItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Item_SC_SellItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Item_SC_SellItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_SC_SellItem_descriptor_;
}

const Item_SC_SellItem& Item_SC_SellItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

Item_SC_SellItem* Item_SC_SellItem::default_instance_ = NULL;

Item_SC_SellItem* Item_SC_SellItem::New() const {
  return new Item_SC_SellItem;
}

void Item_SC_SellItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    item_id_ = 0;
    item_num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Item_SC_SellItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_id;
        break;
      }

      // optional int32 item_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item_num;
        break;
      }

      // optional int32 item_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_num_)));
          set_has_item_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Item_SC_SellItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 item_id = 2;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->item_id(), output);
  }

  // optional int32 item_num = 3;
  if (has_item_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->item_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Item_SC_SellItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 item_id = 2;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->item_id(), target);
  }

  // optional int32 item_num = 3;
  if (has_item_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->item_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Item_SC_SellItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 item_id = 2;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_id());
    }

    // optional int32 item_num = 3;
    if (has_item_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item_SC_SellItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Item_SC_SellItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Item_SC_SellItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Item_SC_SellItem::MergeFrom(const Item_SC_SellItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_item_num()) {
      set_item_num(from.item_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Item_SC_SellItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item_SC_SellItem::CopyFrom(const Item_SC_SellItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item_SC_SellItem::IsInitialized() const {

  return true;
}

void Item_SC_SellItem::Swap(Item_SC_SellItem* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(item_id_, other->item_id_);
    std::swap(item_num_, other->item_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Item_SC_SellItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Item_SC_SellItem_descriptor_;
  metadata.reflection = Item_SC_SellItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Item_CS_DiscardItem::kUuidFieldNumber;
#endif  // !_MSC_VER

Item_CS_DiscardItem::Item_CS_DiscardItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Item_CS_DiscardItem::InitAsDefaultInstance() {
}

Item_CS_DiscardItem::Item_CS_DiscardItem(const Item_CS_DiscardItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Item_CS_DiscardItem::SharedCtor() {
  _cached_size_ = 0;
  uuid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Item_CS_DiscardItem::~Item_CS_DiscardItem() {
  SharedDtor();
}

void Item_CS_DiscardItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Item_CS_DiscardItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Item_CS_DiscardItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_CS_DiscardItem_descriptor_;
}

const Item_CS_DiscardItem& Item_CS_DiscardItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

Item_CS_DiscardItem* Item_CS_DiscardItem::default_instance_ = NULL;

Item_CS_DiscardItem* Item_CS_DiscardItem::New() const {
  return new Item_CS_DiscardItem;
}

void Item_CS_DiscardItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uuid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Item_CS_DiscardItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Item_CS_DiscardItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Item_CS_DiscardItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 uuid = 1;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Item_CS_DiscardItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 uuid = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item_CS_DiscardItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Item_CS_DiscardItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Item_CS_DiscardItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Item_CS_DiscardItem::MergeFrom(const Item_CS_DiscardItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Item_CS_DiscardItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item_CS_DiscardItem::CopyFrom(const Item_CS_DiscardItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item_CS_DiscardItem::IsInitialized() const {

  return true;
}

void Item_CS_DiscardItem::Swap(Item_CS_DiscardItem* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Item_CS_DiscardItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Item_CS_DiscardItem_descriptor_;
  metadata.reflection = Item_CS_DiscardItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Item_SC_DiscardItem::kResultFieldNumber;
#endif  // !_MSC_VER

Item_SC_DiscardItem::Item_SC_DiscardItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Item_SC_DiscardItem::InitAsDefaultInstance() {
}

Item_SC_DiscardItem::Item_SC_DiscardItem(const Item_SC_DiscardItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Item_SC_DiscardItem::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Item_SC_DiscardItem::~Item_SC_DiscardItem() {
  SharedDtor();
}

void Item_SC_DiscardItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Item_SC_DiscardItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Item_SC_DiscardItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_SC_DiscardItem_descriptor_;
}

const Item_SC_DiscardItem& Item_SC_DiscardItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

Item_SC_DiscardItem* Item_SC_DiscardItem::default_instance_ = NULL;

Item_SC_DiscardItem* Item_SC_DiscardItem::New() const {
  return new Item_SC_DiscardItem;
}

void Item_SC_DiscardItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Item_SC_DiscardItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Item_SC_DiscardItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Item_SC_DiscardItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Item_SC_DiscardItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item_SC_DiscardItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Item_SC_DiscardItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Item_SC_DiscardItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Item_SC_DiscardItem::MergeFrom(const Item_SC_DiscardItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Item_SC_DiscardItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item_SC_DiscardItem::CopyFrom(const Item_SC_DiscardItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item_SC_DiscardItem::IsInitialized() const {

  return true;
}

void Item_SC_DiscardItem::Swap(Item_SC_DiscardItem* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Item_SC_DiscardItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Item_SC_DiscardItem_descriptor_;
  metadata.reflection = Item_SC_DiscardItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Item_CS_AddBagGird::Item_CS_AddBagGird()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Item_CS_AddBagGird::InitAsDefaultInstance() {
}

Item_CS_AddBagGird::Item_CS_AddBagGird(const Item_CS_AddBagGird& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Item_CS_AddBagGird::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Item_CS_AddBagGird::~Item_CS_AddBagGird() {
  SharedDtor();
}

void Item_CS_AddBagGird::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Item_CS_AddBagGird::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Item_CS_AddBagGird::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_CS_AddBagGird_descriptor_;
}

const Item_CS_AddBagGird& Item_CS_AddBagGird::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

Item_CS_AddBagGird* Item_CS_AddBagGird::default_instance_ = NULL;

Item_CS_AddBagGird* Item_CS_AddBagGird::New() const {
  return new Item_CS_AddBagGird;
}

void Item_CS_AddBagGird::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Item_CS_AddBagGird::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Item_CS_AddBagGird::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Item_CS_AddBagGird::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Item_CS_AddBagGird::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item_CS_AddBagGird::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Item_CS_AddBagGird* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Item_CS_AddBagGird*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Item_CS_AddBagGird::MergeFrom(const Item_CS_AddBagGird& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Item_CS_AddBagGird::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item_CS_AddBagGird::CopyFrom(const Item_CS_AddBagGird& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item_CS_AddBagGird::IsInitialized() const {

  return true;
}

void Item_CS_AddBagGird::Swap(Item_CS_AddBagGird* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Item_CS_AddBagGird::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Item_CS_AddBagGird_descriptor_;
  metadata.reflection = Item_CS_AddBagGird_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Item_SC_AddBagGird::kResultFieldNumber;
const int Item_SC_AddBagGird::kGirdNumFieldNumber;
const int Item_SC_AddBagGird::kBuyTimesFieldNumber;
#endif  // !_MSC_VER

Item_SC_AddBagGird::Item_SC_AddBagGird()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Item_SC_AddBagGird::InitAsDefaultInstance() {
}

Item_SC_AddBagGird::Item_SC_AddBagGird(const Item_SC_AddBagGird& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Item_SC_AddBagGird::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  gird_num_ = 0;
  buy_times_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Item_SC_AddBagGird::~Item_SC_AddBagGird() {
  SharedDtor();
}

void Item_SC_AddBagGird::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Item_SC_AddBagGird::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Item_SC_AddBagGird::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_SC_AddBagGird_descriptor_;
}

const Item_SC_AddBagGird& Item_SC_AddBagGird::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

Item_SC_AddBagGird* Item_SC_AddBagGird::default_instance_ = NULL;

Item_SC_AddBagGird* Item_SC_AddBagGird::New() const {
  return new Item_SC_AddBagGird;
}

void Item_SC_AddBagGird::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    gird_num_ = 0;
    buy_times_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Item_SC_AddBagGird::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gird_num;
        break;
      }

      // optional int32 gird_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gird_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gird_num_)));
          set_has_gird_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_buy_times;
        break;
      }

      // optional int32 buy_times = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buy_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buy_times_)));
          set_has_buy_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Item_SC_AddBagGird::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 gird_num = 2;
  if (has_gird_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gird_num(), output);
  }

  // optional int32 buy_times = 3;
  if (has_buy_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->buy_times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Item_SC_AddBagGird::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 gird_num = 2;
  if (has_gird_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gird_num(), target);
  }

  // optional int32 buy_times = 3;
  if (has_buy_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->buy_times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Item_SC_AddBagGird::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 gird_num = 2;
    if (has_gird_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gird_num());
    }

    // optional int32 buy_times = 3;
    if (has_buy_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buy_times());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item_SC_AddBagGird::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Item_SC_AddBagGird* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Item_SC_AddBagGird*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Item_SC_AddBagGird::MergeFrom(const Item_SC_AddBagGird& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_gird_num()) {
      set_gird_num(from.gird_num());
    }
    if (from.has_buy_times()) {
      set_buy_times(from.buy_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Item_SC_AddBagGird::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item_SC_AddBagGird::CopyFrom(const Item_SC_AddBagGird& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item_SC_AddBagGird::IsInitialized() const {

  return true;
}

void Item_SC_AddBagGird::Swap(Item_SC_AddBagGird* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(gird_num_, other->gird_num_);
    std::swap(buy_times_, other->buy_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Item_SC_AddBagGird::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Item_SC_AddBagGird_descriptor_;
  metadata.reflection = Item_SC_AddBagGird_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Item_CS_GetTempBagInfo::Item_CS_GetTempBagInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Item_CS_GetTempBagInfo::InitAsDefaultInstance() {
}

Item_CS_GetTempBagInfo::Item_CS_GetTempBagInfo(const Item_CS_GetTempBagInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Item_CS_GetTempBagInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Item_CS_GetTempBagInfo::~Item_CS_GetTempBagInfo() {
  SharedDtor();
}

void Item_CS_GetTempBagInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Item_CS_GetTempBagInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Item_CS_GetTempBagInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_CS_GetTempBagInfo_descriptor_;
}

const Item_CS_GetTempBagInfo& Item_CS_GetTempBagInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

Item_CS_GetTempBagInfo* Item_CS_GetTempBagInfo::default_instance_ = NULL;

Item_CS_GetTempBagInfo* Item_CS_GetTempBagInfo::New() const {
  return new Item_CS_GetTempBagInfo;
}

void Item_CS_GetTempBagInfo::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Item_CS_GetTempBagInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Item_CS_GetTempBagInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Item_CS_GetTempBagInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Item_CS_GetTempBagInfo::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item_CS_GetTempBagInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Item_CS_GetTempBagInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Item_CS_GetTempBagInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Item_CS_GetTempBagInfo::MergeFrom(const Item_CS_GetTempBagInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Item_CS_GetTempBagInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item_CS_GetTempBagInfo::CopyFrom(const Item_CS_GetTempBagInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item_CS_GetTempBagInfo::IsInitialized() const {

  return true;
}

void Item_CS_GetTempBagInfo::Swap(Item_CS_GetTempBagInfo* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Item_CS_GetTempBagInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Item_CS_GetTempBagInfo_descriptor_;
  metadata.reflection = Item_CS_GetTempBagInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Item_SC_GetTempBagInfo::kGridNumFieldNumber;
const int Item_SC_GetTempBagInfo::kItemListFieldNumber;
const int Item_SC_GetTempBagInfo::kEquipListFieldNumber;
#endif  // !_MSC_VER

Item_SC_GetTempBagInfo::Item_SC_GetTempBagInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Item_SC_GetTempBagInfo::InitAsDefaultInstance() {
}

Item_SC_GetTempBagInfo::Item_SC_GetTempBagInfo(const Item_SC_GetTempBagInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Item_SC_GetTempBagInfo::SharedCtor() {
  _cached_size_ = 0;
  grid_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Item_SC_GetTempBagInfo::~Item_SC_GetTempBagInfo() {
  SharedDtor();
}

void Item_SC_GetTempBagInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Item_SC_GetTempBagInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Item_SC_GetTempBagInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_SC_GetTempBagInfo_descriptor_;
}

const Item_SC_GetTempBagInfo& Item_SC_GetTempBagInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

Item_SC_GetTempBagInfo* Item_SC_GetTempBagInfo::default_instance_ = NULL;

Item_SC_GetTempBagInfo* Item_SC_GetTempBagInfo::New() const {
  return new Item_SC_GetTempBagInfo;
}

void Item_SC_GetTempBagInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    grid_num_ = 0;
  }
  item_list_.Clear();
  equip_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Item_SC_GetTempBagInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 grid_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grid_num_)));
          set_has_grid_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item_list;
        break;
      }

      // repeated .proto.message.Item item_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item_list;
        if (input->ExpectTag(26)) goto parse_equip_list;
        break;
      }

      // repeated .proto.message.Equip equip_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equip_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_equip_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Item_SC_GetTempBagInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 grid_num = 1;
  if (has_grid_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->grid_num(), output);
  }

  // repeated .proto.message.Item item_list = 2;
  for (int i = 0; i < this->item_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item_list(i), output);
  }

  // repeated .proto.message.Equip equip_list = 3;
  for (int i = 0; i < this->equip_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->equip_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Item_SC_GetTempBagInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 grid_num = 1;
  if (has_grid_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->grid_num(), target);
  }

  // repeated .proto.message.Item item_list = 2;
  for (int i = 0; i < this->item_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item_list(i), target);
  }

  // repeated .proto.message.Equip equip_list = 3;
  for (int i = 0; i < this->equip_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->equip_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Item_SC_GetTempBagInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 grid_num = 1;
    if (has_grid_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grid_num());
    }

  }
  // repeated .proto.message.Item item_list = 2;
  total_size += 1 * this->item_list_size();
  for (int i = 0; i < this->item_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_list(i));
  }

  // repeated .proto.message.Equip equip_list = 3;
  total_size += 1 * this->equip_list_size();
  for (int i = 0; i < this->equip_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equip_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item_SC_GetTempBagInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Item_SC_GetTempBagInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Item_SC_GetTempBagInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Item_SC_GetTempBagInfo::MergeFrom(const Item_SC_GetTempBagInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_list_.MergeFrom(from.item_list_);
  equip_list_.MergeFrom(from.equip_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_grid_num()) {
      set_grid_num(from.grid_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Item_SC_GetTempBagInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item_SC_GetTempBagInfo::CopyFrom(const Item_SC_GetTempBagInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item_SC_GetTempBagInfo::IsInitialized() const {

  return true;
}

void Item_SC_GetTempBagInfo::Swap(Item_SC_GetTempBagInfo* other) {
  if (other != this) {
    std::swap(grid_num_, other->grid_num_);
    item_list_.Swap(&other->item_list_);
    equip_list_.Swap(&other->equip_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Item_SC_GetTempBagInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Item_SC_GetTempBagInfo_descriptor_;
  metadata.reflection = Item_SC_GetTempBagInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Item_CS_GetBackItem::kUuidFieldNumber;
#endif  // !_MSC_VER

Item_CS_GetBackItem::Item_CS_GetBackItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Item_CS_GetBackItem::InitAsDefaultInstance() {
}

Item_CS_GetBackItem::Item_CS_GetBackItem(const Item_CS_GetBackItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Item_CS_GetBackItem::SharedCtor() {
  _cached_size_ = 0;
  uuid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Item_CS_GetBackItem::~Item_CS_GetBackItem() {
  SharedDtor();
}

void Item_CS_GetBackItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Item_CS_GetBackItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Item_CS_GetBackItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_CS_GetBackItem_descriptor_;
}

const Item_CS_GetBackItem& Item_CS_GetBackItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

Item_CS_GetBackItem* Item_CS_GetBackItem::default_instance_ = NULL;

Item_CS_GetBackItem* Item_CS_GetBackItem::New() const {
  return new Item_CS_GetBackItem;
}

void Item_CS_GetBackItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uuid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Item_CS_GetBackItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Item_CS_GetBackItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Item_CS_GetBackItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 uuid = 2;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Item_CS_GetBackItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item_CS_GetBackItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Item_CS_GetBackItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Item_CS_GetBackItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Item_CS_GetBackItem::MergeFrom(const Item_CS_GetBackItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Item_CS_GetBackItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item_CS_GetBackItem::CopyFrom(const Item_CS_GetBackItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item_CS_GetBackItem::IsInitialized() const {

  return true;
}

void Item_CS_GetBackItem::Swap(Item_CS_GetBackItem* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Item_CS_GetBackItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Item_CS_GetBackItem_descriptor_;
  metadata.reflection = Item_CS_GetBackItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Item_SC_GetBackItem::kResultFieldNumber;
const int Item_SC_GetBackItem::kUuidFieldNumber;
#endif  // !_MSC_VER

Item_SC_GetBackItem::Item_SC_GetBackItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Item_SC_GetBackItem::InitAsDefaultInstance() {
}

Item_SC_GetBackItem::Item_SC_GetBackItem(const Item_SC_GetBackItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Item_SC_GetBackItem::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  uuid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Item_SC_GetBackItem::~Item_SC_GetBackItem() {
  SharedDtor();
}

void Item_SC_GetBackItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Item_SC_GetBackItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Item_SC_GetBackItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_SC_GetBackItem_descriptor_;
}

const Item_SC_GetBackItem& Item_SC_GetBackItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

Item_SC_GetBackItem* Item_SC_GetBackItem::default_instance_ = NULL;

Item_SC_GetBackItem* Item_SC_GetBackItem::New() const {
  return new Item_SC_GetBackItem;
}

void Item_SC_GetBackItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    uuid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Item_SC_GetBackItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uuid;
        break;
      }

      // optional uint64 uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Item_SC_GetBackItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Item_SC_GetBackItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Item_SC_GetBackItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional uint64 uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item_SC_GetBackItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Item_SC_GetBackItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Item_SC_GetBackItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Item_SC_GetBackItem::MergeFrom(const Item_SC_GetBackItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Item_SC_GetBackItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item_SC_GetBackItem::CopyFrom(const Item_SC_GetBackItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item_SC_GetBackItem::IsInitialized() const {

  return true;
}

void Item_SC_GetBackItem::Swap(Item_SC_GetBackItem* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(uuid_, other->uuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Item_SC_GetBackItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Item_SC_GetBackItem_descriptor_;
  metadata.reflection = Item_SC_GetBackItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Item_CS_GetBackAllItem::Item_CS_GetBackAllItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Item_CS_GetBackAllItem::InitAsDefaultInstance() {
}

Item_CS_GetBackAllItem::Item_CS_GetBackAllItem(const Item_CS_GetBackAllItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Item_CS_GetBackAllItem::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Item_CS_GetBackAllItem::~Item_CS_GetBackAllItem() {
  SharedDtor();
}

void Item_CS_GetBackAllItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Item_CS_GetBackAllItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Item_CS_GetBackAllItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_CS_GetBackAllItem_descriptor_;
}

const Item_CS_GetBackAllItem& Item_CS_GetBackAllItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

Item_CS_GetBackAllItem* Item_CS_GetBackAllItem::default_instance_ = NULL;

Item_CS_GetBackAllItem* Item_CS_GetBackAllItem::New() const {
  return new Item_CS_GetBackAllItem;
}

void Item_CS_GetBackAllItem::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Item_CS_GetBackAllItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Item_CS_GetBackAllItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Item_CS_GetBackAllItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Item_CS_GetBackAllItem::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item_CS_GetBackAllItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Item_CS_GetBackAllItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Item_CS_GetBackAllItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Item_CS_GetBackAllItem::MergeFrom(const Item_CS_GetBackAllItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Item_CS_GetBackAllItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item_CS_GetBackAllItem::CopyFrom(const Item_CS_GetBackAllItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item_CS_GetBackAllItem::IsInitialized() const {

  return true;
}

void Item_CS_GetBackAllItem::Swap(Item_CS_GetBackAllItem* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Item_CS_GetBackAllItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Item_CS_GetBackAllItem_descriptor_;
  metadata.reflection = Item_CS_GetBackAllItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Item_CS_QueryChatItem::kCharidFieldNumber;
const int Item_CS_QueryChatItem::kUuidFieldNumber;
#endif  // !_MSC_VER

Item_CS_QueryChatItem::Item_CS_QueryChatItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Item_CS_QueryChatItem::InitAsDefaultInstance() {
}

Item_CS_QueryChatItem::Item_CS_QueryChatItem(const Item_CS_QueryChatItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Item_CS_QueryChatItem::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  uuid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Item_CS_QueryChatItem::~Item_CS_QueryChatItem() {
  SharedDtor();
}

void Item_CS_QueryChatItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Item_CS_QueryChatItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Item_CS_QueryChatItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_CS_QueryChatItem_descriptor_;
}

const Item_CS_QueryChatItem& Item_CS_QueryChatItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

Item_CS_QueryChatItem* Item_CS_QueryChatItem::default_instance_ = NULL;

Item_CS_QueryChatItem* Item_CS_QueryChatItem::New() const {
  return new Item_CS_QueryChatItem;
}

void Item_CS_QueryChatItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_ULONGLONG(0);
    uuid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Item_CS_QueryChatItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uuid;
        break;
      }

      // optional uint64 uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Item_CS_QueryChatItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Item_CS_QueryChatItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Item_CS_QueryChatItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint64 uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item_CS_QueryChatItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Item_CS_QueryChatItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Item_CS_QueryChatItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Item_CS_QueryChatItem::MergeFrom(const Item_CS_QueryChatItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Item_CS_QueryChatItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item_CS_QueryChatItem::CopyFrom(const Item_CS_QueryChatItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item_CS_QueryChatItem::IsInitialized() const {

  return true;
}

void Item_CS_QueryChatItem::Swap(Item_CS_QueryChatItem* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(uuid_, other->uuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Item_CS_QueryChatItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Item_CS_QueryChatItem_descriptor_;
  metadata.reflection = Item_CS_QueryChatItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Item_SC_QueryChatItem::kResultFieldNumber;
const int Item_SC_QueryChatItem::kItemFieldNumber;
const int Item_SC_QueryChatItem::kEquipFieldNumber;
#endif  // !_MSC_VER

Item_SC_QueryChatItem::Item_SC_QueryChatItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Item_SC_QueryChatItem::InitAsDefaultInstance() {
  item_ = const_cast< ::proto::message::Item*>(&::proto::message::Item::default_instance());
  equip_ = const_cast< ::proto::message::Equip*>(&::proto::message::Equip::default_instance());
}

Item_SC_QueryChatItem::Item_SC_QueryChatItem(const Item_SC_QueryChatItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Item_SC_QueryChatItem::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  item_ = NULL;
  equip_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Item_SC_QueryChatItem::~Item_SC_QueryChatItem() {
  SharedDtor();
}

void Item_SC_QueryChatItem::SharedDtor() {
  if (this != default_instance_) {
    delete item_;
    delete equip_;
  }
}

void Item_SC_QueryChatItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Item_SC_QueryChatItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_SC_QueryChatItem_descriptor_;
}

const Item_SC_QueryChatItem& Item_SC_QueryChatItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

Item_SC_QueryChatItem* Item_SC_QueryChatItem::default_instance_ = NULL;

Item_SC_QueryChatItem* Item_SC_QueryChatItem::New() const {
  return new Item_SC_QueryChatItem;
}

void Item_SC_QueryChatItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_item()) {
      if (item_ != NULL) item_->::proto::message::Item::Clear();
    }
    if (has_equip()) {
      if (equip_ != NULL) equip_->::proto::message::Equip::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Item_SC_QueryChatItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item;
        break;
      }

      // optional .proto.message.Item item = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_equip;
        break;
      }

      // optional .proto.message.Equip equip = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Item_SC_QueryChatItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .proto.message.Item item = 2;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item(), output);
  }

  // optional .proto.message.Equip equip = 3;
  if (has_equip()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->equip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Item_SC_QueryChatItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .proto.message.Item item = 2;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item(), target);
  }

  // optional .proto.message.Equip equip = 3;
  if (has_equip()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->equip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Item_SC_QueryChatItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .proto.message.Item item = 2;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item());
    }

    // optional .proto.message.Equip equip = 3;
    if (has_equip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equip());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item_SC_QueryChatItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Item_SC_QueryChatItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Item_SC_QueryChatItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Item_SC_QueryChatItem::MergeFrom(const Item_SC_QueryChatItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_item()) {
      mutable_item()->::proto::message::Item::MergeFrom(from.item());
    }
    if (from.has_equip()) {
      mutable_equip()->::proto::message::Equip::MergeFrom(from.equip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Item_SC_QueryChatItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item_SC_QueryChatItem::CopyFrom(const Item_SC_QueryChatItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item_SC_QueryChatItem::IsInitialized() const {

  return true;
}

void Item_SC_QueryChatItem::Swap(Item_SC_QueryChatItem* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(item_, other->item_);
    std::swap(equip_, other->equip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Item_SC_QueryChatItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Item_SC_QueryChatItem_descriptor_;
  metadata.reflection = Item_SC_QueryChatItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Item_CS_SetItemIDPos::kItemIdFieldNumber;
const int Item_CS_SetItemIDPos::kPosFieldNumber;
#endif  // !_MSC_VER

Item_CS_SetItemIDPos::Item_CS_SetItemIDPos()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Item_CS_SetItemIDPos::InitAsDefaultInstance() {
}

Item_CS_SetItemIDPos::Item_CS_SetItemIDPos(const Item_CS_SetItemIDPos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Item_CS_SetItemIDPos::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = 0;
  pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Item_CS_SetItemIDPos::~Item_CS_SetItemIDPos() {
  SharedDtor();
}

void Item_CS_SetItemIDPos::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Item_CS_SetItemIDPos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Item_CS_SetItemIDPos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_CS_SetItemIDPos_descriptor_;
}

const Item_CS_SetItemIDPos& Item_CS_SetItemIDPos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

Item_CS_SetItemIDPos* Item_CS_SetItemIDPos::default_instance_ = NULL;

Item_CS_SetItemIDPos* Item_CS_SetItemIDPos::New() const {
  return new Item_CS_SetItemIDPos;
}

void Item_CS_SetItemIDPos::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_id_ = 0;
    pos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Item_CS_SetItemIDPos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pos;
        break;
      }

      // optional int32 pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Item_CS_SetItemIDPos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->item_id(), output);
  }

  // optional int32 pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Item_CS_SetItemIDPos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 item_id = 1;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->item_id(), target);
  }

  // optional int32 pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Item_CS_SetItemIDPos::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_id());
    }

    // optional int32 pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item_CS_SetItemIDPos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Item_CS_SetItemIDPos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Item_CS_SetItemIDPos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Item_CS_SetItemIDPos::MergeFrom(const Item_CS_SetItemIDPos& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Item_CS_SetItemIDPos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item_CS_SetItemIDPos::CopyFrom(const Item_CS_SetItemIDPos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item_CS_SetItemIDPos::IsInitialized() const {

  return true;
}

void Item_CS_SetItemIDPos::Swap(Item_CS_SetItemIDPos* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Item_CS_SetItemIDPos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Item_CS_SetItemIDPos_descriptor_;
  metadata.reflection = Item_CS_SetItemIDPos_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Item_SC_SetItemIDPos::kResultFieldNumber;
const int Item_SC_SetItemIDPos::kItemIdFieldNumber;
const int Item_SC_SetItemIDPos::kPosFieldNumber;
#endif  // !_MSC_VER

Item_SC_SetItemIDPos::Item_SC_SetItemIDPos()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Item_SC_SetItemIDPos::InitAsDefaultInstance() {
}

Item_SC_SetItemIDPos::Item_SC_SetItemIDPos(const Item_SC_SetItemIDPos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Item_SC_SetItemIDPos::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  item_id_ = 0;
  pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Item_SC_SetItemIDPos::~Item_SC_SetItemIDPos() {
  SharedDtor();
}

void Item_SC_SetItemIDPos::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Item_SC_SetItemIDPos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Item_SC_SetItemIDPos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_SC_SetItemIDPos_descriptor_;
}

const Item_SC_SetItemIDPos& Item_SC_SetItemIDPos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

Item_SC_SetItemIDPos* Item_SC_SetItemIDPos::default_instance_ = NULL;

Item_SC_SetItemIDPos* Item_SC_SetItemIDPos::New() const {
  return new Item_SC_SetItemIDPos;
}

void Item_SC_SetItemIDPos::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    item_id_ = 0;
    pos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Item_SC_SetItemIDPos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_id;
        break;
      }

      // optional int32 item_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pos;
        break;
      }

      // optional int32 pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Item_SC_SetItemIDPos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 item_id = 2;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->item_id(), output);
  }

  // optional int32 pos = 3;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Item_SC_SetItemIDPos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 item_id = 2;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->item_id(), target);
  }

  // optional int32 pos = 3;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Item_SC_SetItemIDPos::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 item_id = 2;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_id());
    }

    // optional int32 pos = 3;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item_SC_SetItemIDPos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Item_SC_SetItemIDPos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Item_SC_SetItemIDPos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Item_SC_SetItemIDPos::MergeFrom(const Item_SC_SetItemIDPos& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Item_SC_SetItemIDPos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item_SC_SetItemIDPos::CopyFrom(const Item_SC_SetItemIDPos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item_SC_SetItemIDPos::IsInitialized() const {

  return true;
}

void Item_SC_SetItemIDPos::Swap(Item_SC_SetItemIDPos* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(item_id_, other->item_id_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Item_SC_SetItemIDPos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Item_SC_SetItemIDPos_descriptor_;
  metadata.reflection = Item_SC_SetItemIDPos_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Item_SC_GetBackAllItem::kResultFieldNumber;
const int Item_SC_GetBackAllItem::kUuidListFieldNumber;
#endif  // !_MSC_VER

Item_SC_GetBackAllItem::Item_SC_GetBackAllItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Item_SC_GetBackAllItem::InitAsDefaultInstance() {
}

Item_SC_GetBackAllItem::Item_SC_GetBackAllItem(const Item_SC_GetBackAllItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Item_SC_GetBackAllItem::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Item_SC_GetBackAllItem::~Item_SC_GetBackAllItem() {
  SharedDtor();
}

void Item_SC_GetBackAllItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Item_SC_GetBackAllItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Item_SC_GetBackAllItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_SC_GetBackAllItem_descriptor_;
}

const Item_SC_GetBackAllItem& Item_SC_GetBackAllItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

Item_SC_GetBackAllItem* Item_SC_GetBackAllItem::default_instance_ = NULL;

Item_SC_GetBackAllItem* Item_SC_GetBackAllItem::New() const {
  return new Item_SC_GetBackAllItem;
}

void Item_SC_GetBackAllItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  uuid_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Item_SC_GetBackAllItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uuid_list;
        break;
      }

      // repeated uint64 uuid_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_uuid_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_uuid_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uuid_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Item_SC_GetBackAllItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated uint64 uuid_list = 2;
  for (int i = 0; i < this->uuid_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->uuid_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Item_SC_GetBackAllItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated uint64 uuid_list = 2;
  for (int i = 0; i < this->uuid_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->uuid_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Item_SC_GetBackAllItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated uint64 uuid_list = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->uuid_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->uuid_list(i));
    }
    total_size += 1 * this->uuid_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item_SC_GetBackAllItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Item_SC_GetBackAllItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Item_SC_GetBackAllItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Item_SC_GetBackAllItem::MergeFrom(const Item_SC_GetBackAllItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  uuid_list_.MergeFrom(from.uuid_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Item_SC_GetBackAllItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item_SC_GetBackAllItem::CopyFrom(const Item_SC_GetBackAllItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item_SC_GetBackAllItem::IsInitialized() const {

  return true;
}

void Item_SC_GetBackAllItem::Swap(Item_SC_GetBackAllItem* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    uuid_list_.Swap(&other->uuid_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Item_SC_GetBackAllItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Item_SC_GetBackAllItem_descriptor_;
  metadata.reflection = Item_SC_GetBackAllItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Item_SC_UpdateBag::kGridNumFieldNumber;
const int Item_SC_UpdateBag::kItemListFieldNumber;
const int Item_SC_UpdateBag::kEquipListFieldNumber;
#endif  // !_MSC_VER

Item_SC_UpdateBag::Item_SC_UpdateBag()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Item_SC_UpdateBag::InitAsDefaultInstance() {
}

Item_SC_UpdateBag::Item_SC_UpdateBag(const Item_SC_UpdateBag& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Item_SC_UpdateBag::SharedCtor() {
  _cached_size_ = 0;
  grid_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Item_SC_UpdateBag::~Item_SC_UpdateBag() {
  SharedDtor();
}

void Item_SC_UpdateBag::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Item_SC_UpdateBag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Item_SC_UpdateBag::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_SC_UpdateBag_descriptor_;
}

const Item_SC_UpdateBag& Item_SC_UpdateBag::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

Item_SC_UpdateBag* Item_SC_UpdateBag::default_instance_ = NULL;

Item_SC_UpdateBag* Item_SC_UpdateBag::New() const {
  return new Item_SC_UpdateBag;
}

void Item_SC_UpdateBag::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    grid_num_ = 0;
  }
  item_list_.Clear();
  equip_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Item_SC_UpdateBag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 grid_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grid_num_)));
          set_has_grid_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item_list;
        break;
      }

      // repeated .proto.message.Item item_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item_list;
        if (input->ExpectTag(26)) goto parse_equip_list;
        break;
      }

      // repeated .proto.message.Equip equip_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equip_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_equip_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Item_SC_UpdateBag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 grid_num = 1;
  if (has_grid_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->grid_num(), output);
  }

  // repeated .proto.message.Item item_list = 2;
  for (int i = 0; i < this->item_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item_list(i), output);
  }

  // repeated .proto.message.Equip equip_list = 3;
  for (int i = 0; i < this->equip_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->equip_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Item_SC_UpdateBag::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 grid_num = 1;
  if (has_grid_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->grid_num(), target);
  }

  // repeated .proto.message.Item item_list = 2;
  for (int i = 0; i < this->item_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item_list(i), target);
  }

  // repeated .proto.message.Equip equip_list = 3;
  for (int i = 0; i < this->equip_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->equip_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Item_SC_UpdateBag::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 grid_num = 1;
    if (has_grid_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grid_num());
    }

  }
  // repeated .proto.message.Item item_list = 2;
  total_size += 1 * this->item_list_size();
  for (int i = 0; i < this->item_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_list(i));
  }

  // repeated .proto.message.Equip equip_list = 3;
  total_size += 1 * this->equip_list_size();
  for (int i = 0; i < this->equip_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equip_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item_SC_UpdateBag::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Item_SC_UpdateBag* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Item_SC_UpdateBag*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Item_SC_UpdateBag::MergeFrom(const Item_SC_UpdateBag& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_list_.MergeFrom(from.item_list_);
  equip_list_.MergeFrom(from.equip_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_grid_num()) {
      set_grid_num(from.grid_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Item_SC_UpdateBag::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item_SC_UpdateBag::CopyFrom(const Item_SC_UpdateBag& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item_SC_UpdateBag::IsInitialized() const {

  return true;
}

void Item_SC_UpdateBag::Swap(Item_SC_UpdateBag* other) {
  if (other != this) {
    std::swap(grid_num_, other->grid_num_);
    item_list_.Swap(&other->item_list_);
    equip_list_.Swap(&other->equip_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Item_SC_UpdateBag::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Item_SC_UpdateBag_descriptor_;
  metadata.reflection = Item_SC_UpdateBag_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Item_SC_UpdateChangeItem::kBagTypeFieldNumber;
const int Item_SC_UpdateChangeItem::kDelItemListFieldNumber;
const int Item_SC_UpdateChangeItem::kItemListFieldNumber;
const int Item_SC_UpdateChangeItem::kEquipListFieldNumber;
#endif  // !_MSC_VER

Item_SC_UpdateChangeItem::Item_SC_UpdateChangeItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Item_SC_UpdateChangeItem::InitAsDefaultInstance() {
}

Item_SC_UpdateChangeItem::Item_SC_UpdateChangeItem(const Item_SC_UpdateChangeItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Item_SC_UpdateChangeItem::SharedCtor() {
  _cached_size_ = 0;
  bag_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Item_SC_UpdateChangeItem::~Item_SC_UpdateChangeItem() {
  SharedDtor();
}

void Item_SC_UpdateChangeItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Item_SC_UpdateChangeItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Item_SC_UpdateChangeItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_SC_UpdateChangeItem_descriptor_;
}

const Item_SC_UpdateChangeItem& Item_SC_UpdateChangeItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

Item_SC_UpdateChangeItem* Item_SC_UpdateChangeItem::default_instance_ = NULL;

Item_SC_UpdateChangeItem* Item_SC_UpdateChangeItem::New() const {
  return new Item_SC_UpdateChangeItem;
}

void Item_SC_UpdateChangeItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bag_type_ = 0;
  }
  del_item_list_.Clear();
  item_list_.Clear();
  equip_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Item_SC_UpdateChangeItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 bag_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bag_type_)));
          set_has_bag_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_del_item_list;
        break;
      }

      // repeated uint64 del_item_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_del_item_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_del_item_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_del_item_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_del_item_list;
        if (input->ExpectTag(26)) goto parse_item_list;
        break;
      }

      // repeated .proto.message.Item item_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_item_list;
        if (input->ExpectTag(34)) goto parse_equip_list;
        break;
      }

      // repeated .proto.message.Equip equip_list = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equip_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_equip_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Item_SC_UpdateChangeItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 bag_type = 1;
  if (has_bag_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bag_type(), output);
  }

  // repeated uint64 del_item_list = 2;
  for (int i = 0; i < this->del_item_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->del_item_list(i), output);
  }

  // repeated .proto.message.Item item_list = 3;
  for (int i = 0; i < this->item_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->item_list(i), output);
  }

  // repeated .proto.message.Equip equip_list = 4;
  for (int i = 0; i < this->equip_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->equip_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Item_SC_UpdateChangeItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 bag_type = 1;
  if (has_bag_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bag_type(), target);
  }

  // repeated uint64 del_item_list = 2;
  for (int i = 0; i < this->del_item_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->del_item_list(i), target);
  }

  // repeated .proto.message.Item item_list = 3;
  for (int i = 0; i < this->item_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->item_list(i), target);
  }

  // repeated .proto.message.Equip equip_list = 4;
  for (int i = 0; i < this->equip_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->equip_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Item_SC_UpdateChangeItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 bag_type = 1;
    if (has_bag_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bag_type());
    }

  }
  // repeated uint64 del_item_list = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->del_item_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->del_item_list(i));
    }
    total_size += 1 * this->del_item_list_size() + data_size;
  }

  // repeated .proto.message.Item item_list = 3;
  total_size += 1 * this->item_list_size();
  for (int i = 0; i < this->item_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_list(i));
  }

  // repeated .proto.message.Equip equip_list = 4;
  total_size += 1 * this->equip_list_size();
  for (int i = 0; i < this->equip_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equip_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item_SC_UpdateChangeItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Item_SC_UpdateChangeItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Item_SC_UpdateChangeItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Item_SC_UpdateChangeItem::MergeFrom(const Item_SC_UpdateChangeItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  del_item_list_.MergeFrom(from.del_item_list_);
  item_list_.MergeFrom(from.item_list_);
  equip_list_.MergeFrom(from.equip_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bag_type()) {
      set_bag_type(from.bag_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Item_SC_UpdateChangeItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item_SC_UpdateChangeItem::CopyFrom(const Item_SC_UpdateChangeItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item_SC_UpdateChangeItem::IsInitialized() const {

  return true;
}

void Item_SC_UpdateChangeItem::Swap(Item_SC_UpdateChangeItem* other) {
  if (other != this) {
    std::swap(bag_type_, other->bag_type_);
    del_item_list_.Swap(&other->del_item_list_);
    item_list_.Swap(&other->item_list_);
    equip_list_.Swap(&other->equip_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Item_SC_UpdateChangeItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Item_SC_UpdateChangeItem_descriptor_;
  metadata.reflection = Item_SC_UpdateChangeItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Item_SC_UpTempBag::kGridNumFieldNumber;
const int Item_SC_UpTempBag::kItemListFieldNumber;
const int Item_SC_UpTempBag::kEquipListFieldNumber;
#endif  // !_MSC_VER

Item_SC_UpTempBag::Item_SC_UpTempBag()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Item_SC_UpTempBag::InitAsDefaultInstance() {
}

Item_SC_UpTempBag::Item_SC_UpTempBag(const Item_SC_UpTempBag& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Item_SC_UpTempBag::SharedCtor() {
  _cached_size_ = 0;
  grid_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Item_SC_UpTempBag::~Item_SC_UpTempBag() {
  SharedDtor();
}

void Item_SC_UpTempBag::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Item_SC_UpTempBag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Item_SC_UpTempBag::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_SC_UpTempBag_descriptor_;
}

const Item_SC_UpTempBag& Item_SC_UpTempBag::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

Item_SC_UpTempBag* Item_SC_UpTempBag::default_instance_ = NULL;

Item_SC_UpTempBag* Item_SC_UpTempBag::New() const {
  return new Item_SC_UpTempBag;
}

void Item_SC_UpTempBag::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    grid_num_ = 0;
  }
  item_list_.Clear();
  equip_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Item_SC_UpTempBag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 grid_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grid_num_)));
          set_has_grid_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item_list;
        break;
      }

      // repeated .proto.message.Item item_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item_list;
        if (input->ExpectTag(26)) goto parse_equip_list;
        break;
      }

      // repeated .proto.message.Equip equip_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equip_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_equip_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Item_SC_UpTempBag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 grid_num = 1;
  if (has_grid_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->grid_num(), output);
  }

  // repeated .proto.message.Item item_list = 2;
  for (int i = 0; i < this->item_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item_list(i), output);
  }

  // repeated .proto.message.Equip equip_list = 3;
  for (int i = 0; i < this->equip_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->equip_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Item_SC_UpTempBag::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 grid_num = 1;
  if (has_grid_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->grid_num(), target);
  }

  // repeated .proto.message.Item item_list = 2;
  for (int i = 0; i < this->item_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item_list(i), target);
  }

  // repeated .proto.message.Equip equip_list = 3;
  for (int i = 0; i < this->equip_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->equip_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Item_SC_UpTempBag::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 grid_num = 1;
    if (has_grid_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grid_num());
    }

  }
  // repeated .proto.message.Item item_list = 2;
  total_size += 1 * this->item_list_size();
  for (int i = 0; i < this->item_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_list(i));
  }

  // repeated .proto.message.Equip equip_list = 3;
  total_size += 1 * this->equip_list_size();
  for (int i = 0; i < this->equip_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equip_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item_SC_UpTempBag::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Item_SC_UpTempBag* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Item_SC_UpTempBag*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Item_SC_UpTempBag::MergeFrom(const Item_SC_UpTempBag& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_list_.MergeFrom(from.item_list_);
  equip_list_.MergeFrom(from.equip_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_grid_num()) {
      set_grid_num(from.grid_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Item_SC_UpTempBag::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item_SC_UpTempBag::CopyFrom(const Item_SC_UpTempBag& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item_SC_UpTempBag::IsInitialized() const {

  return true;
}

void Item_SC_UpTempBag::Swap(Item_SC_UpTempBag* other) {
  if (other != this) {
    std::swap(grid_num_, other->grid_num_);
    item_list_.Swap(&other->item_list_);
    equip_list_.Swap(&other->equip_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Item_SC_UpTempBag::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Item_SC_UpTempBag_descriptor_;
  metadata.reflection = Item_SC_UpTempBag_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Item_SC_UpTempBagItem::kDelItemListFieldNumber;
const int Item_SC_UpTempBagItem::kItemListFieldNumber;
const int Item_SC_UpTempBagItem::kEquipListFieldNumber;
#endif  // !_MSC_VER

Item_SC_UpTempBagItem::Item_SC_UpTempBagItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Item_SC_UpTempBagItem::InitAsDefaultInstance() {
}

Item_SC_UpTempBagItem::Item_SC_UpTempBagItem(const Item_SC_UpTempBagItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Item_SC_UpTempBagItem::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Item_SC_UpTempBagItem::~Item_SC_UpTempBagItem() {
  SharedDtor();
}

void Item_SC_UpTempBagItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Item_SC_UpTempBagItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Item_SC_UpTempBagItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_SC_UpTempBagItem_descriptor_;
}

const Item_SC_UpTempBagItem& Item_SC_UpTempBagItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

Item_SC_UpTempBagItem* Item_SC_UpTempBagItem::default_instance_ = NULL;

Item_SC_UpTempBagItem* Item_SC_UpTempBagItem::New() const {
  return new Item_SC_UpTempBagItem;
}

void Item_SC_UpTempBagItem::Clear() {
  del_item_list_.Clear();
  item_list_.Clear();
  equip_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Item_SC_UpTempBagItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 del_item_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_del_item_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_del_item_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_del_item_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_del_item_list;
        if (input->ExpectTag(18)) goto parse_item_list;
        break;
      }

      // repeated .proto.message.Item item_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item_list;
        if (input->ExpectTag(26)) goto parse_equip_list;
        break;
      }

      // repeated .proto.message.Equip equip_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equip_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_equip_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Item_SC_UpTempBagItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint64 del_item_list = 1;
  for (int i = 0; i < this->del_item_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->del_item_list(i), output);
  }

  // repeated .proto.message.Item item_list = 2;
  for (int i = 0; i < this->item_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item_list(i), output);
  }

  // repeated .proto.message.Equip equip_list = 3;
  for (int i = 0; i < this->equip_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->equip_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Item_SC_UpTempBagItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint64 del_item_list = 1;
  for (int i = 0; i < this->del_item_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->del_item_list(i), target);
  }

  // repeated .proto.message.Item item_list = 2;
  for (int i = 0; i < this->item_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item_list(i), target);
  }

  // repeated .proto.message.Equip equip_list = 3;
  for (int i = 0; i < this->equip_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->equip_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Item_SC_UpTempBagItem::ByteSize() const {
  int total_size = 0;

  // repeated uint64 del_item_list = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->del_item_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->del_item_list(i));
    }
    total_size += 1 * this->del_item_list_size() + data_size;
  }

  // repeated .proto.message.Item item_list = 2;
  total_size += 1 * this->item_list_size();
  for (int i = 0; i < this->item_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_list(i));
  }

  // repeated .proto.message.Equip equip_list = 3;
  total_size += 1 * this->equip_list_size();
  for (int i = 0; i < this->equip_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equip_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item_SC_UpTempBagItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Item_SC_UpTempBagItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Item_SC_UpTempBagItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Item_SC_UpTempBagItem::MergeFrom(const Item_SC_UpTempBagItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  del_item_list_.MergeFrom(from.del_item_list_);
  item_list_.MergeFrom(from.item_list_);
  equip_list_.MergeFrom(from.equip_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Item_SC_UpTempBagItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item_SC_UpTempBagItem::CopyFrom(const Item_SC_UpTempBagItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item_SC_UpTempBagItem::IsInitialized() const {

  return true;
}

void Item_SC_UpTempBagItem::Swap(Item_SC_UpTempBagItem* other) {
  if (other != this) {
    del_item_list_.Swap(&other->del_item_list_);
    item_list_.Swap(&other->item_list_);
    equip_list_.Swap(&other->equip_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Item_SC_UpTempBagItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Item_SC_UpTempBagItem_descriptor_;
  metadata.reflection = Item_SC_UpTempBagItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Item_SC_UpSpecialItem::kStypeFieldNumber;
const int Item_SC_UpSpecialItem::kNumFieldNumber;
const int Item_SC_UpSpecialItem::kGetwayFieldNumber;
#endif  // !_MSC_VER

Item_SC_UpSpecialItem::Item_SC_UpSpecialItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Item_SC_UpSpecialItem::InitAsDefaultInstance() {
}

Item_SC_UpSpecialItem::Item_SC_UpSpecialItem(const Item_SC_UpSpecialItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Item_SC_UpSpecialItem::SharedCtor() {
  _cached_size_ = 0;
  stype_ = 0;
  num_ = GOOGLE_LONGLONG(0);
  getway_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Item_SC_UpSpecialItem::~Item_SC_UpSpecialItem() {
  SharedDtor();
}

void Item_SC_UpSpecialItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Item_SC_UpSpecialItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Item_SC_UpSpecialItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_SC_UpSpecialItem_descriptor_;
}

const Item_SC_UpSpecialItem& Item_SC_UpSpecialItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

Item_SC_UpSpecialItem* Item_SC_UpSpecialItem::default_instance_ = NULL;

Item_SC_UpSpecialItem* Item_SC_UpSpecialItem::New() const {
  return new Item_SC_UpSpecialItem;
}

void Item_SC_UpSpecialItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stype_ = 0;
    num_ = GOOGLE_LONGLONG(0);
    getway_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Item_SC_UpSpecialItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 stype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stype_)));
          set_has_stype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional int64 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_getway;
        break;
      }

      // optional int32 getway = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_getway:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &getway_)));
          set_has_getway();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Item_SC_UpSpecialItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 stype = 1;
  if (has_stype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->stype(), output);
  }

  // optional int64 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->num(), output);
  }

  // optional int32 getway = 3;
  if (has_getway()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->getway(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Item_SC_UpSpecialItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 stype = 1;
  if (has_stype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->stype(), target);
  }

  // optional int64 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->num(), target);
  }

  // optional int32 getway = 3;
  if (has_getway()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->getway(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Item_SC_UpSpecialItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 stype = 1;
    if (has_stype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stype());
    }

    // optional int64 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->num());
    }

    // optional int32 getway = 3;
    if (has_getway()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->getway());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item_SC_UpSpecialItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Item_SC_UpSpecialItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Item_SC_UpSpecialItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Item_SC_UpSpecialItem::MergeFrom(const Item_SC_UpSpecialItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stype()) {
      set_stype(from.stype());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_getway()) {
      set_getway(from.getway());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Item_SC_UpSpecialItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item_SC_UpSpecialItem::CopyFrom(const Item_SC_UpSpecialItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item_SC_UpSpecialItem::IsInitialized() const {

  return true;
}

void Item_SC_UpSpecialItem::Swap(Item_SC_UpSpecialItem* other) {
  if (other != this) {
    std::swap(stype_, other->stype_);
    std::swap(num_, other->num_);
    std::swap(getway_, other->getway_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Item_SC_UpSpecialItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Item_SC_UpSpecialItem_descriptor_;
  metadata.reflection = Item_SC_UpSpecialItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Item_SC_GetItem::kItemidFieldNumber;
const int Item_SC_GetItem::kNumFieldNumber;
const int Item_SC_GetItem::kGetwayFieldNumber;
#endif  // !_MSC_VER

Item_SC_GetItem::Item_SC_GetItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Item_SC_GetItem::InitAsDefaultInstance() {
}

Item_SC_GetItem::Item_SC_GetItem(const Item_SC_GetItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Item_SC_GetItem::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0;
  num_ = GOOGLE_LONGLONG(0);
  getway_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Item_SC_GetItem::~Item_SC_GetItem() {
  SharedDtor();
}

void Item_SC_GetItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Item_SC_GetItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Item_SC_GetItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_SC_GetItem_descriptor_;
}

const Item_SC_GetItem& Item_SC_GetItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

Item_SC_GetItem* Item_SC_GetItem::default_instance_ = NULL;

Item_SC_GetItem* Item_SC_GetItem::New() const {
  return new Item_SC_GetItem;
}

void Item_SC_GetItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0;
    num_ = GOOGLE_LONGLONG(0);
    getway_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Item_SC_GetItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 itemid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional int64 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_getway;
        break;
      }

      // optional int32 getway = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_getway:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &getway_)));
          set_has_getway();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Item_SC_GetItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 itemid = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemid(), output);
  }

  // optional int64 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->num(), output);
  }

  // optional int32 getway = 3;
  if (has_getway()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->getway(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Item_SC_GetItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 itemid = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itemid(), target);
  }

  // optional int64 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->num(), target);
  }

  // optional int32 getway = 3;
  if (has_getway()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->getway(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Item_SC_GetItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 itemid = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // optional int64 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->num());
    }

    // optional int32 getway = 3;
    if (has_getway()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->getway());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item_SC_GetItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Item_SC_GetItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Item_SC_GetItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Item_SC_GetItem::MergeFrom(const Item_SC_GetItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_getway()) {
      set_getway(from.getway());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Item_SC_GetItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item_SC_GetItem::CopyFrom(const Item_SC_GetItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item_SC_GetItem::IsInitialized() const {

  return true;
}

void Item_SC_GetItem::Swap(Item_SC_GetItem* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(num_, other->num_);
    std::swap(getway_, other->getway_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Item_SC_GetItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Item_SC_GetItem_descriptor_;
  metadata.reflection = Item_SC_GetItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DropItemNum::kIdFieldNumber;
const int DropItemNum::kNumFieldNumber;
#endif  // !_MSC_VER

DropItemNum::DropItemNum()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DropItemNum::InitAsDefaultInstance() {
}

DropItemNum::DropItemNum(const DropItemNum& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DropItemNum::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DropItemNum::~DropItemNum() {
  SharedDtor();
}

void DropItemNum::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DropItemNum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DropItemNum::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DropItemNum_descriptor_;
}

const DropItemNum& DropItemNum::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

DropItemNum* DropItemNum::default_instance_ = NULL;

DropItemNum* DropItemNum::New() const {
  return new DropItemNum;
}

void DropItemNum::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DropItemNum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional int32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DropItemNum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DropItemNum::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DropItemNum::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DropItemNum::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DropItemNum* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DropItemNum*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DropItemNum::MergeFrom(const DropItemNum& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DropItemNum::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DropItemNum::CopyFrom(const DropItemNum& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DropItemNum::IsInitialized() const {

  return true;
}

void DropItemNum::Swap(DropItemNum* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DropItemNum::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DropItemNum_descriptor_;
  metadata.reflection = DropItemNum_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Item_SC_DropItem::kNpcIdFieldNumber;
const int Item_SC_DropItem::kItemListFieldNumber;
#endif  // !_MSC_VER

Item_SC_DropItem::Item_SC_DropItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Item_SC_DropItem::InitAsDefaultInstance() {
}

Item_SC_DropItem::Item_SC_DropItem(const Item_SC_DropItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Item_SC_DropItem::SharedCtor() {
  _cached_size_ = 0;
  npc_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Item_SC_DropItem::~Item_SC_DropItem() {
  SharedDtor();
}

void Item_SC_DropItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Item_SC_DropItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Item_SC_DropItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_SC_DropItem_descriptor_;
}

const Item_SC_DropItem& Item_SC_DropItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

Item_SC_DropItem* Item_SC_DropItem::default_instance_ = NULL;

Item_SC_DropItem* Item_SC_DropItem::New() const {
  return new Item_SC_DropItem;
}

void Item_SC_DropItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    npc_id_ = 0u;
  }
  item_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Item_SC_DropItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 npc_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &npc_id_)));
          set_has_npc_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item_list;
        break;
      }

      // repeated .proto.message.DropItemNum item_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Item_SC_DropItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 npc_id = 1;
  if (has_npc_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->npc_id(), output);
  }

  // repeated .proto.message.DropItemNum item_list = 2;
  for (int i = 0; i < this->item_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Item_SC_DropItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 npc_id = 1;
  if (has_npc_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->npc_id(), target);
  }

  // repeated .proto.message.DropItemNum item_list = 2;
  for (int i = 0; i < this->item_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Item_SC_DropItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 npc_id = 1;
    if (has_npc_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->npc_id());
    }

  }
  // repeated .proto.message.DropItemNum item_list = 2;
  total_size += 1 * this->item_list_size();
  for (int i = 0; i < this->item_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item_SC_DropItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Item_SC_DropItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Item_SC_DropItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Item_SC_DropItem::MergeFrom(const Item_SC_DropItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_list_.MergeFrom(from.item_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_npc_id()) {
      set_npc_id(from.npc_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Item_SC_DropItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item_SC_DropItem::CopyFrom(const Item_SC_DropItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item_SC_DropItem::IsInitialized() const {

  return true;
}

void Item_SC_DropItem::Swap(Item_SC_DropItem* other) {
  if (other != this) {
    std::swap(npc_id_, other->npc_id_);
    item_list_.Swap(&other->item_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Item_SC_DropItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Item_SC_DropItem_descriptor_;
  metadata.reflection = Item_SC_DropItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Item_SC_GetItemTips::kItemListFieldNumber;
#endif  // !_MSC_VER

Item_SC_GetItemTips::Item_SC_GetItemTips()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Item_SC_GetItemTips::InitAsDefaultInstance() {
}

Item_SC_GetItemTips::Item_SC_GetItemTips(const Item_SC_GetItemTips& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Item_SC_GetItemTips::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Item_SC_GetItemTips::~Item_SC_GetItemTips() {
  SharedDtor();
}

void Item_SC_GetItemTips::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Item_SC_GetItemTips::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Item_SC_GetItemTips::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_SC_GetItemTips_descriptor_;
}

const Item_SC_GetItemTips& Item_SC_GetItemTips::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

Item_SC_GetItemTips* Item_SC_GetItemTips::default_instance_ = NULL;

Item_SC_GetItemTips* Item_SC_GetItemTips::New() const {
  return new Item_SC_GetItemTips;
}

void Item_SC_GetItemTips::Clear() {
  item_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Item_SC_GetItemTips::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.message.IDNum item_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_item_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Item_SC_GetItemTips::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.message.IDNum item_list = 1;
  for (int i = 0; i < this->item_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->item_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Item_SC_GetItemTips::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.message.IDNum item_list = 1;
  for (int i = 0; i < this->item_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->item_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Item_SC_GetItemTips::ByteSize() const {
  int total_size = 0;

  // repeated .proto.message.IDNum item_list = 1;
  total_size += 1 * this->item_list_size();
  for (int i = 0; i < this->item_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item_SC_GetItemTips::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Item_SC_GetItemTips* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Item_SC_GetItemTips*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Item_SC_GetItemTips::MergeFrom(const Item_SC_GetItemTips& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_list_.MergeFrom(from.item_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Item_SC_GetItemTips::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item_SC_GetItemTips::CopyFrom(const Item_SC_GetItemTips& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item_SC_GetItemTips::IsInitialized() const {

  return true;
}

void Item_SC_GetItemTips::Swap(Item_SC_GetItemTips* other) {
  if (other != this) {
    item_list_.Swap(&other->item_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Item_SC_GetItemTips::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Item_SC_GetItemTips_descriptor_;
  metadata.reflection = Item_SC_GetItemTips_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Item_CS_GetStoreInfo::Item_CS_GetStoreInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Item_CS_GetStoreInfo::InitAsDefaultInstance() {
}

Item_CS_GetStoreInfo::Item_CS_GetStoreInfo(const Item_CS_GetStoreInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Item_CS_GetStoreInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Item_CS_GetStoreInfo::~Item_CS_GetStoreInfo() {
  SharedDtor();
}

void Item_CS_GetStoreInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Item_CS_GetStoreInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Item_CS_GetStoreInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_CS_GetStoreInfo_descriptor_;
}

const Item_CS_GetStoreInfo& Item_CS_GetStoreInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

Item_CS_GetStoreInfo* Item_CS_GetStoreInfo::default_instance_ = NULL;

Item_CS_GetStoreInfo* Item_CS_GetStoreInfo::New() const {
  return new Item_CS_GetStoreInfo;
}

void Item_CS_GetStoreInfo::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Item_CS_GetStoreInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Item_CS_GetStoreInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Item_CS_GetStoreInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Item_CS_GetStoreInfo::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item_CS_GetStoreInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Item_CS_GetStoreInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Item_CS_GetStoreInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Item_CS_GetStoreInfo::MergeFrom(const Item_CS_GetStoreInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Item_CS_GetStoreInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item_CS_GetStoreInfo::CopyFrom(const Item_CS_GetStoreInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item_CS_GetStoreInfo::IsInitialized() const {

  return true;
}

void Item_CS_GetStoreInfo::Swap(Item_CS_GetStoreInfo* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Item_CS_GetStoreInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Item_CS_GetStoreInfo_descriptor_;
  metadata.reflection = Item_CS_GetStoreInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StoreInfo::kIdFieldNumber;
const int StoreInfo::kGridNumFieldNumber;
const int StoreInfo::kItemListFieldNumber;
const int StoreInfo::kEquipListFieldNumber;
#endif  // !_MSC_VER

StoreInfo::StoreInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StoreInfo::InitAsDefaultInstance() {
}

StoreInfo::StoreInfo(const StoreInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StoreInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  grid_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StoreInfo::~StoreInfo() {
  SharedDtor();
}

void StoreInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StoreInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StoreInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StoreInfo_descriptor_;
}

const StoreInfo& StoreInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

StoreInfo* StoreInfo::default_instance_ = NULL;

StoreInfo* StoreInfo::New() const {
  return new StoreInfo;
}

void StoreInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    grid_num_ = 0;
  }
  item_list_.Clear();
  equip_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StoreInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_grid_num;
        break;
      }

      // optional int32 grid_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grid_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grid_num_)));
          set_has_grid_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_item_list;
        break;
      }

      // repeated .proto.message.Item item_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_item_list;
        if (input->ExpectTag(34)) goto parse_equip_list;
        break;
      }

      // repeated .proto.message.Equip equip_list = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equip_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_equip_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StoreInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 grid_num = 2;
  if (has_grid_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->grid_num(), output);
  }

  // repeated .proto.message.Item item_list = 3;
  for (int i = 0; i < this->item_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->item_list(i), output);
  }

  // repeated .proto.message.Equip equip_list = 4;
  for (int i = 0; i < this->equip_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->equip_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StoreInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 grid_num = 2;
  if (has_grid_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->grid_num(), target);
  }

  // repeated .proto.message.Item item_list = 3;
  for (int i = 0; i < this->item_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->item_list(i), target);
  }

  // repeated .proto.message.Equip equip_list = 4;
  for (int i = 0; i < this->equip_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->equip_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StoreInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 grid_num = 2;
    if (has_grid_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grid_num());
    }

  }
  // repeated .proto.message.Item item_list = 3;
  total_size += 1 * this->item_list_size();
  for (int i = 0; i < this->item_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_list(i));
  }

  // repeated .proto.message.Equip equip_list = 4;
  total_size += 1 * this->equip_list_size();
  for (int i = 0; i < this->equip_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equip_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StoreInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StoreInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StoreInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StoreInfo::MergeFrom(const StoreInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_list_.MergeFrom(from.item_list_);
  equip_list_.MergeFrom(from.equip_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_grid_num()) {
      set_grid_num(from.grid_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StoreInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoreInfo::CopyFrom(const StoreInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoreInfo::IsInitialized() const {

  return true;
}

void StoreInfo::Swap(StoreInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(grid_num_, other->grid_num_);
    item_list_.Swap(&other->item_list_);
    equip_list_.Swap(&other->equip_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StoreInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StoreInfo_descriptor_;
  metadata.reflection = StoreInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Item_SC_GetStoreInfo::kResultFieldNumber;
const int Item_SC_GetStoreInfo::kStoreNumFieldNumber;
const int Item_SC_GetStoreInfo::kStoreListFieldNumber;
#endif  // !_MSC_VER

Item_SC_GetStoreInfo::Item_SC_GetStoreInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Item_SC_GetStoreInfo::InitAsDefaultInstance() {
}

Item_SC_GetStoreInfo::Item_SC_GetStoreInfo(const Item_SC_GetStoreInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Item_SC_GetStoreInfo::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  store_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Item_SC_GetStoreInfo::~Item_SC_GetStoreInfo() {
  SharedDtor();
}

void Item_SC_GetStoreInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Item_SC_GetStoreInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Item_SC_GetStoreInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_SC_GetStoreInfo_descriptor_;
}

const Item_SC_GetStoreInfo& Item_SC_GetStoreInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

Item_SC_GetStoreInfo* Item_SC_GetStoreInfo::default_instance_ = NULL;

Item_SC_GetStoreInfo* Item_SC_GetStoreInfo::New() const {
  return new Item_SC_GetStoreInfo;
}

void Item_SC_GetStoreInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    store_num_ = 0;
  }
  store_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Item_SC_GetStoreInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_store_num;
        break;
      }

      // optional int32 store_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_store_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &store_num_)));
          set_has_store_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_store_list;
        break;
      }

      // repeated .proto.message.StoreInfo store_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_store_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_store_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_store_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Item_SC_GetStoreInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 store_num = 2;
  if (has_store_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->store_num(), output);
  }

  // repeated .proto.message.StoreInfo store_list = 3;
  for (int i = 0; i < this->store_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->store_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Item_SC_GetStoreInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 store_num = 2;
  if (has_store_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->store_num(), target);
  }

  // repeated .proto.message.StoreInfo store_list = 3;
  for (int i = 0; i < this->store_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->store_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Item_SC_GetStoreInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 store_num = 2;
    if (has_store_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->store_num());
    }

  }
  // repeated .proto.message.StoreInfo store_list = 3;
  total_size += 1 * this->store_list_size();
  for (int i = 0; i < this->store_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->store_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item_SC_GetStoreInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Item_SC_GetStoreInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Item_SC_GetStoreInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Item_SC_GetStoreInfo::MergeFrom(const Item_SC_GetStoreInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  store_list_.MergeFrom(from.store_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_store_num()) {
      set_store_num(from.store_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Item_SC_GetStoreInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item_SC_GetStoreInfo::CopyFrom(const Item_SC_GetStoreInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item_SC_GetStoreInfo::IsInitialized() const {

  return true;
}

void Item_SC_GetStoreInfo::Swap(Item_SC_GetStoreInfo* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(store_num_, other->store_num_);
    store_list_.Swap(&other->store_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Item_SC_GetStoreInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Item_SC_GetStoreInfo_descriptor_;
  metadata.reflection = Item_SC_GetStoreInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Item_CS_ActivateStore::Item_CS_ActivateStore()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Item_CS_ActivateStore::InitAsDefaultInstance() {
}

Item_CS_ActivateStore::Item_CS_ActivateStore(const Item_CS_ActivateStore& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Item_CS_ActivateStore::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Item_CS_ActivateStore::~Item_CS_ActivateStore() {
  SharedDtor();
}

void Item_CS_ActivateStore::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Item_CS_ActivateStore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Item_CS_ActivateStore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_CS_ActivateStore_descriptor_;
}

const Item_CS_ActivateStore& Item_CS_ActivateStore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

Item_CS_ActivateStore* Item_CS_ActivateStore::default_instance_ = NULL;

Item_CS_ActivateStore* Item_CS_ActivateStore::New() const {
  return new Item_CS_ActivateStore;
}

void Item_CS_ActivateStore::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Item_CS_ActivateStore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Item_CS_ActivateStore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Item_CS_ActivateStore::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Item_CS_ActivateStore::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item_CS_ActivateStore::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Item_CS_ActivateStore* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Item_CS_ActivateStore*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Item_CS_ActivateStore::MergeFrom(const Item_CS_ActivateStore& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Item_CS_ActivateStore::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item_CS_ActivateStore::CopyFrom(const Item_CS_ActivateStore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item_CS_ActivateStore::IsInitialized() const {

  return true;
}

void Item_CS_ActivateStore::Swap(Item_CS_ActivateStore* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Item_CS_ActivateStore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Item_CS_ActivateStore_descriptor_;
  metadata.reflection = Item_CS_ActivateStore_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Item_SC_ActivateStore::kResultFieldNumber;
const int Item_SC_ActivateStore::kStoreIdFieldNumber;
const int Item_SC_ActivateStore::kGirdNumFieldNumber;
#endif  // !_MSC_VER

Item_SC_ActivateStore::Item_SC_ActivateStore()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Item_SC_ActivateStore::InitAsDefaultInstance() {
}

Item_SC_ActivateStore::Item_SC_ActivateStore(const Item_SC_ActivateStore& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Item_SC_ActivateStore::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  store_id_ = 0;
  gird_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Item_SC_ActivateStore::~Item_SC_ActivateStore() {
  SharedDtor();
}

void Item_SC_ActivateStore::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Item_SC_ActivateStore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Item_SC_ActivateStore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_SC_ActivateStore_descriptor_;
}

const Item_SC_ActivateStore& Item_SC_ActivateStore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

Item_SC_ActivateStore* Item_SC_ActivateStore::default_instance_ = NULL;

Item_SC_ActivateStore* Item_SC_ActivateStore::New() const {
  return new Item_SC_ActivateStore;
}

void Item_SC_ActivateStore::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    store_id_ = 0;
    gird_num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Item_SC_ActivateStore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_store_id;
        break;
      }

      // optional int32 store_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_store_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &store_id_)));
          set_has_store_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gird_num;
        break;
      }

      // optional int32 gird_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gird_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gird_num_)));
          set_has_gird_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Item_SC_ActivateStore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 store_id = 2;
  if (has_store_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->store_id(), output);
  }

  // optional int32 gird_num = 3;
  if (has_gird_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gird_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Item_SC_ActivateStore::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 store_id = 2;
  if (has_store_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->store_id(), target);
  }

  // optional int32 gird_num = 3;
  if (has_gird_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gird_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Item_SC_ActivateStore::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 store_id = 2;
    if (has_store_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->store_id());
    }

    // optional int32 gird_num = 3;
    if (has_gird_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gird_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item_SC_ActivateStore::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Item_SC_ActivateStore* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Item_SC_ActivateStore*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Item_SC_ActivateStore::MergeFrom(const Item_SC_ActivateStore& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_store_id()) {
      set_store_id(from.store_id());
    }
    if (from.has_gird_num()) {
      set_gird_num(from.gird_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Item_SC_ActivateStore::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item_SC_ActivateStore::CopyFrom(const Item_SC_ActivateStore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item_SC_ActivateStore::IsInitialized() const {

  return true;
}

void Item_SC_ActivateStore::Swap(Item_SC_ActivateStore* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(store_id_, other->store_id_);
    std::swap(gird_num_, other->gird_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Item_SC_ActivateStore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Item_SC_ActivateStore_descriptor_;
  metadata.reflection = Item_SC_ActivateStore_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Item_CS_InToStore::kUuidFieldNumber;
const int Item_CS_InToStore::kStoreidFieldNumber;
#endif  // !_MSC_VER

Item_CS_InToStore::Item_CS_InToStore()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Item_CS_InToStore::InitAsDefaultInstance() {
}

Item_CS_InToStore::Item_CS_InToStore(const Item_CS_InToStore& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Item_CS_InToStore::SharedCtor() {
  _cached_size_ = 0;
  uuid_ = GOOGLE_ULONGLONG(0);
  storeid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Item_CS_InToStore::~Item_CS_InToStore() {
  SharedDtor();
}

void Item_CS_InToStore::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Item_CS_InToStore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Item_CS_InToStore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_CS_InToStore_descriptor_;
}

const Item_CS_InToStore& Item_CS_InToStore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

Item_CS_InToStore* Item_CS_InToStore::default_instance_ = NULL;

Item_CS_InToStore* Item_CS_InToStore::New() const {
  return new Item_CS_InToStore;
}

void Item_CS_InToStore::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uuid_ = GOOGLE_ULONGLONG(0);
    storeid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Item_CS_InToStore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_storeid;
        break;
      }

      // optional int32 storeid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_storeid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &storeid_)));
          set_has_storeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Item_CS_InToStore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uuid(), output);
  }

  // optional int32 storeid = 2;
  if (has_storeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->storeid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Item_CS_InToStore::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 uuid = 1;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uuid(), target);
  }

  // optional int32 storeid = 2;
  if (has_storeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->storeid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Item_CS_InToStore::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 uuid = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

    // optional int32 storeid = 2;
    if (has_storeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->storeid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item_CS_InToStore::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Item_CS_InToStore* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Item_CS_InToStore*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Item_CS_InToStore::MergeFrom(const Item_CS_InToStore& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_storeid()) {
      set_storeid(from.storeid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Item_CS_InToStore::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item_CS_InToStore::CopyFrom(const Item_CS_InToStore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item_CS_InToStore::IsInitialized() const {

  return true;
}

void Item_CS_InToStore::Swap(Item_CS_InToStore* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(storeid_, other->storeid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Item_CS_InToStore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Item_CS_InToStore_descriptor_;
  metadata.reflection = Item_CS_InToStore_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Item_SC_InToStore::kResultFieldNumber;
#endif  // !_MSC_VER

Item_SC_InToStore::Item_SC_InToStore()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Item_SC_InToStore::InitAsDefaultInstance() {
}

Item_SC_InToStore::Item_SC_InToStore(const Item_SC_InToStore& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Item_SC_InToStore::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Item_SC_InToStore::~Item_SC_InToStore() {
  SharedDtor();
}

void Item_SC_InToStore::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Item_SC_InToStore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Item_SC_InToStore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_SC_InToStore_descriptor_;
}

const Item_SC_InToStore& Item_SC_InToStore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

Item_SC_InToStore* Item_SC_InToStore::default_instance_ = NULL;

Item_SC_InToStore* Item_SC_InToStore::New() const {
  return new Item_SC_InToStore;
}

void Item_SC_InToStore::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Item_SC_InToStore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Item_SC_InToStore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Item_SC_InToStore::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Item_SC_InToStore::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item_SC_InToStore::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Item_SC_InToStore* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Item_SC_InToStore*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Item_SC_InToStore::MergeFrom(const Item_SC_InToStore& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Item_SC_InToStore::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item_SC_InToStore::CopyFrom(const Item_SC_InToStore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item_SC_InToStore::IsInitialized() const {

  return true;
}

void Item_SC_InToStore::Swap(Item_SC_InToStore* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Item_SC_InToStore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Item_SC_InToStore_descriptor_;
  metadata.reflection = Item_SC_InToStore_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Item_CS_OutFromStore::kUuidFieldNumber;
const int Item_CS_OutFromStore::kStoreidFieldNumber;
#endif  // !_MSC_VER

Item_CS_OutFromStore::Item_CS_OutFromStore()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Item_CS_OutFromStore::InitAsDefaultInstance() {
}

Item_CS_OutFromStore::Item_CS_OutFromStore(const Item_CS_OutFromStore& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Item_CS_OutFromStore::SharedCtor() {
  _cached_size_ = 0;
  uuid_ = GOOGLE_ULONGLONG(0);
  storeid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Item_CS_OutFromStore::~Item_CS_OutFromStore() {
  SharedDtor();
}

void Item_CS_OutFromStore::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Item_CS_OutFromStore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Item_CS_OutFromStore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_CS_OutFromStore_descriptor_;
}

const Item_CS_OutFromStore& Item_CS_OutFromStore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

Item_CS_OutFromStore* Item_CS_OutFromStore::default_instance_ = NULL;

Item_CS_OutFromStore* Item_CS_OutFromStore::New() const {
  return new Item_CS_OutFromStore;
}

void Item_CS_OutFromStore::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uuid_ = GOOGLE_ULONGLONG(0);
    storeid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Item_CS_OutFromStore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_storeid;
        break;
      }

      // optional int32 storeid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_storeid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &storeid_)));
          set_has_storeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Item_CS_OutFromStore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uuid(), output);
  }

  // optional int32 storeid = 2;
  if (has_storeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->storeid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Item_CS_OutFromStore::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 uuid = 1;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uuid(), target);
  }

  // optional int32 storeid = 2;
  if (has_storeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->storeid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Item_CS_OutFromStore::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 uuid = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

    // optional int32 storeid = 2;
    if (has_storeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->storeid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item_CS_OutFromStore::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Item_CS_OutFromStore* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Item_CS_OutFromStore*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Item_CS_OutFromStore::MergeFrom(const Item_CS_OutFromStore& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_storeid()) {
      set_storeid(from.storeid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Item_CS_OutFromStore::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item_CS_OutFromStore::CopyFrom(const Item_CS_OutFromStore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item_CS_OutFromStore::IsInitialized() const {

  return true;
}

void Item_CS_OutFromStore::Swap(Item_CS_OutFromStore* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(storeid_, other->storeid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Item_CS_OutFromStore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Item_CS_OutFromStore_descriptor_;
  metadata.reflection = Item_CS_OutFromStore_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Item_SC_OutFromStore::kResultFieldNumber;
#endif  // !_MSC_VER

Item_SC_OutFromStore::Item_SC_OutFromStore()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Item_SC_OutFromStore::InitAsDefaultInstance() {
}

Item_SC_OutFromStore::Item_SC_OutFromStore(const Item_SC_OutFromStore& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Item_SC_OutFromStore::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Item_SC_OutFromStore::~Item_SC_OutFromStore() {
  SharedDtor();
}

void Item_SC_OutFromStore::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Item_SC_OutFromStore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Item_SC_OutFromStore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_SC_OutFromStore_descriptor_;
}

const Item_SC_OutFromStore& Item_SC_OutFromStore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

Item_SC_OutFromStore* Item_SC_OutFromStore::default_instance_ = NULL;

Item_SC_OutFromStore* Item_SC_OutFromStore::New() const {
  return new Item_SC_OutFromStore;
}

void Item_SC_OutFromStore::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Item_SC_OutFromStore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Item_SC_OutFromStore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Item_SC_OutFromStore::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Item_SC_OutFromStore::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item_SC_OutFromStore::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Item_SC_OutFromStore* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Item_SC_OutFromStore*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Item_SC_OutFromStore::MergeFrom(const Item_SC_OutFromStore& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Item_SC_OutFromStore::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item_SC_OutFromStore::CopyFrom(const Item_SC_OutFromStore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item_SC_OutFromStore::IsInitialized() const {

  return true;
}

void Item_SC_OutFromStore::Swap(Item_SC_OutFromStore* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Item_SC_OutFromStore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Item_SC_OutFromStore_descriptor_;
  metadata.reflection = Item_SC_OutFromStore_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Item_CS_PutOnEquip::kUuidFieldNumber;
#endif  // !_MSC_VER

Item_CS_PutOnEquip::Item_CS_PutOnEquip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Item_CS_PutOnEquip::InitAsDefaultInstance() {
}

Item_CS_PutOnEquip::Item_CS_PutOnEquip(const Item_CS_PutOnEquip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Item_CS_PutOnEquip::SharedCtor() {
  _cached_size_ = 0;
  uuid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Item_CS_PutOnEquip::~Item_CS_PutOnEquip() {
  SharedDtor();
}

void Item_CS_PutOnEquip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Item_CS_PutOnEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Item_CS_PutOnEquip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_CS_PutOnEquip_descriptor_;
}

const Item_CS_PutOnEquip& Item_CS_PutOnEquip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

Item_CS_PutOnEquip* Item_CS_PutOnEquip::default_instance_ = NULL;

Item_CS_PutOnEquip* Item_CS_PutOnEquip::New() const {
  return new Item_CS_PutOnEquip;
}

void Item_CS_PutOnEquip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uuid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Item_CS_PutOnEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Item_CS_PutOnEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Item_CS_PutOnEquip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 uuid = 1;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Item_CS_PutOnEquip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 uuid = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item_CS_PutOnEquip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Item_CS_PutOnEquip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Item_CS_PutOnEquip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Item_CS_PutOnEquip::MergeFrom(const Item_CS_PutOnEquip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Item_CS_PutOnEquip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item_CS_PutOnEquip::CopyFrom(const Item_CS_PutOnEquip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item_CS_PutOnEquip::IsInitialized() const {

  return true;
}

void Item_CS_PutOnEquip::Swap(Item_CS_PutOnEquip* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Item_CS_PutOnEquip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Item_CS_PutOnEquip_descriptor_;
  metadata.reflection = Item_CS_PutOnEquip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Item_SC_PutOnEquip::kResultFieldNumber;
const int Item_SC_PutOnEquip::kEquipListFieldNumber;
#endif  // !_MSC_VER

Item_SC_PutOnEquip::Item_SC_PutOnEquip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Item_SC_PutOnEquip::InitAsDefaultInstance() {
}

Item_SC_PutOnEquip::Item_SC_PutOnEquip(const Item_SC_PutOnEquip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Item_SC_PutOnEquip::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Item_SC_PutOnEquip::~Item_SC_PutOnEquip() {
  SharedDtor();
}

void Item_SC_PutOnEquip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Item_SC_PutOnEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Item_SC_PutOnEquip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_SC_PutOnEquip_descriptor_;
}

const Item_SC_PutOnEquip& Item_SC_PutOnEquip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

Item_SC_PutOnEquip* Item_SC_PutOnEquip::default_instance_ = NULL;

Item_SC_PutOnEquip* Item_SC_PutOnEquip::New() const {
  return new Item_SC_PutOnEquip;
}

void Item_SC_PutOnEquip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  equip_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Item_SC_PutOnEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_equip_list;
        break;
      }

      // repeated .proto.message.Equip equip_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equip_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_equip_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Item_SC_PutOnEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated .proto.message.Equip equip_list = 2;
  for (int i = 0; i < this->equip_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->equip_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Item_SC_PutOnEquip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated .proto.message.Equip equip_list = 2;
  for (int i = 0; i < this->equip_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->equip_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Item_SC_PutOnEquip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated .proto.message.Equip equip_list = 2;
  total_size += 1 * this->equip_list_size();
  for (int i = 0; i < this->equip_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equip_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item_SC_PutOnEquip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Item_SC_PutOnEquip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Item_SC_PutOnEquip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Item_SC_PutOnEquip::MergeFrom(const Item_SC_PutOnEquip& from) {
  GOOGLE_CHECK_NE(&from, this);
  equip_list_.MergeFrom(from.equip_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Item_SC_PutOnEquip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item_SC_PutOnEquip::CopyFrom(const Item_SC_PutOnEquip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item_SC_PutOnEquip::IsInitialized() const {

  return true;
}

void Item_SC_PutOnEquip::Swap(Item_SC_PutOnEquip* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    equip_list_.Swap(&other->equip_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Item_SC_PutOnEquip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Item_SC_PutOnEquip_descriptor_;
  metadata.reflection = Item_SC_PutOnEquip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Item_CS_GetOffEquip::kUuidFieldNumber;
#endif  // !_MSC_VER

Item_CS_GetOffEquip::Item_CS_GetOffEquip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Item_CS_GetOffEquip::InitAsDefaultInstance() {
}

Item_CS_GetOffEquip::Item_CS_GetOffEquip(const Item_CS_GetOffEquip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Item_CS_GetOffEquip::SharedCtor() {
  _cached_size_ = 0;
  uuid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Item_CS_GetOffEquip::~Item_CS_GetOffEquip() {
  SharedDtor();
}

void Item_CS_GetOffEquip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Item_CS_GetOffEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Item_CS_GetOffEquip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_CS_GetOffEquip_descriptor_;
}

const Item_CS_GetOffEquip& Item_CS_GetOffEquip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

Item_CS_GetOffEquip* Item_CS_GetOffEquip::default_instance_ = NULL;

Item_CS_GetOffEquip* Item_CS_GetOffEquip::New() const {
  return new Item_CS_GetOffEquip;
}

void Item_CS_GetOffEquip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uuid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Item_CS_GetOffEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Item_CS_GetOffEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Item_CS_GetOffEquip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 uuid = 1;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Item_CS_GetOffEquip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 uuid = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item_CS_GetOffEquip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Item_CS_GetOffEquip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Item_CS_GetOffEquip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Item_CS_GetOffEquip::MergeFrom(const Item_CS_GetOffEquip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Item_CS_GetOffEquip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item_CS_GetOffEquip::CopyFrom(const Item_CS_GetOffEquip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item_CS_GetOffEquip::IsInitialized() const {

  return true;
}

void Item_CS_GetOffEquip::Swap(Item_CS_GetOffEquip* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Item_CS_GetOffEquip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Item_CS_GetOffEquip_descriptor_;
  metadata.reflection = Item_CS_GetOffEquip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Item_SC_GetOffEquip::kResultFieldNumber;
const int Item_SC_GetOffEquip::kGetoffEquipFieldNumber;
#endif  // !_MSC_VER

Item_SC_GetOffEquip::Item_SC_GetOffEquip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Item_SC_GetOffEquip::InitAsDefaultInstance() {
  getoff_equip_ = const_cast< ::proto::message::Equip*>(&::proto::message::Equip::default_instance());
}

Item_SC_GetOffEquip::Item_SC_GetOffEquip(const Item_SC_GetOffEquip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Item_SC_GetOffEquip::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  getoff_equip_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Item_SC_GetOffEquip::~Item_SC_GetOffEquip() {
  SharedDtor();
}

void Item_SC_GetOffEquip::SharedDtor() {
  if (this != default_instance_) {
    delete getoff_equip_;
  }
}

void Item_SC_GetOffEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Item_SC_GetOffEquip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_SC_GetOffEquip_descriptor_;
}

const Item_SC_GetOffEquip& Item_SC_GetOffEquip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

Item_SC_GetOffEquip* Item_SC_GetOffEquip::default_instance_ = NULL;

Item_SC_GetOffEquip* Item_SC_GetOffEquip::New() const {
  return new Item_SC_GetOffEquip;
}

void Item_SC_GetOffEquip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_getoff_equip()) {
      if (getoff_equip_ != NULL) getoff_equip_->::proto::message::Equip::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Item_SC_GetOffEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_getoff_equip;
        break;
      }

      // optional .proto.message.Equip getoff_equip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_getoff_equip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getoff_equip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Item_SC_GetOffEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .proto.message.Equip getoff_equip = 2;
  if (has_getoff_equip()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->getoff_equip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Item_SC_GetOffEquip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .proto.message.Equip getoff_equip = 2;
  if (has_getoff_equip()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->getoff_equip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Item_SC_GetOffEquip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .proto.message.Equip getoff_equip = 2;
    if (has_getoff_equip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->getoff_equip());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item_SC_GetOffEquip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Item_SC_GetOffEquip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Item_SC_GetOffEquip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Item_SC_GetOffEquip::MergeFrom(const Item_SC_GetOffEquip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_getoff_equip()) {
      mutable_getoff_equip()->::proto::message::Equip::MergeFrom(from.getoff_equip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Item_SC_GetOffEquip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item_SC_GetOffEquip::CopyFrom(const Item_SC_GetOffEquip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item_SC_GetOffEquip::IsInitialized() const {

  return true;
}

void Item_SC_GetOffEquip::Swap(Item_SC_GetOffEquip* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(getoff_equip_, other->getoff_equip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Item_SC_GetOffEquip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Item_SC_GetOffEquip_descriptor_;
  metadata.reflection = Item_SC_GetOffEquip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Item_CS_EquipStrength::kUiEquipPosFieldNumber;
#endif  // !_MSC_VER

Item_CS_EquipStrength::Item_CS_EquipStrength()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Item_CS_EquipStrength::InitAsDefaultInstance() {
}

Item_CS_EquipStrength::Item_CS_EquipStrength(const Item_CS_EquipStrength& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Item_CS_EquipStrength::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Item_CS_EquipStrength::~Item_CS_EquipStrength() {
  SharedDtor();
}

void Item_CS_EquipStrength::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Item_CS_EquipStrength::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Item_CS_EquipStrength::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_CS_EquipStrength_descriptor_;
}

const Item_CS_EquipStrength& Item_CS_EquipStrength::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

Item_CS_EquipStrength* Item_CS_EquipStrength::default_instance_ = NULL;

Item_CS_EquipStrength* Item_CS_EquipStrength::New() const {
  return new Item_CS_EquipStrength;
}

void Item_CS_EquipStrength::Clear() {
  uiequippos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Item_CS_EquipStrength::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 uiEquipPos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiEquipPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_uiequippos())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_uiequippos())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_uiEquipPos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Item_CS_EquipStrength::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 uiEquipPos = 1;
  for (int i = 0; i < this->uiequippos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->uiequippos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Item_CS_EquipStrength::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 uiEquipPos = 1;
  for (int i = 0; i < this->uiequippos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->uiequippos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Item_CS_EquipStrength::ByteSize() const {
  int total_size = 0;

  // repeated uint32 uiEquipPos = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->uiequippos_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->uiequippos(i));
    }
    total_size += 1 * this->uiequippos_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item_CS_EquipStrength::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Item_CS_EquipStrength* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Item_CS_EquipStrength*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Item_CS_EquipStrength::MergeFrom(const Item_CS_EquipStrength& from) {
  GOOGLE_CHECK_NE(&from, this);
  uiequippos_.MergeFrom(from.uiequippos_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Item_CS_EquipStrength::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item_CS_EquipStrength::CopyFrom(const Item_CS_EquipStrength& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item_CS_EquipStrength::IsInitialized() const {

  return true;
}

void Item_CS_EquipStrength::Swap(Item_CS_EquipStrength* other) {
  if (other != this) {
    uiequippos_.Swap(&other->uiequippos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Item_CS_EquipStrength::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Item_CS_EquipStrength_descriptor_;
  metadata.reflection = Item_CS_EquipStrength_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Item_SC_EquipStrength::kResultFieldNumber;
const int Item_SC_EquipStrength::kUiEquipPosFieldNumber;
const int Item_SC_EquipStrength::kUiNewLevelFieldNumber;
#endif  // !_MSC_VER

Item_SC_EquipStrength::Item_SC_EquipStrength()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Item_SC_EquipStrength::InitAsDefaultInstance() {
}

Item_SC_EquipStrength::Item_SC_EquipStrength(const Item_SC_EquipStrength& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Item_SC_EquipStrength::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  uiequippos_ = 0u;
  uinewlevel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Item_SC_EquipStrength::~Item_SC_EquipStrength() {
  SharedDtor();
}

void Item_SC_EquipStrength::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Item_SC_EquipStrength::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Item_SC_EquipStrength::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_SC_EquipStrength_descriptor_;
}

const Item_SC_EquipStrength& Item_SC_EquipStrength::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

Item_SC_EquipStrength* Item_SC_EquipStrength::default_instance_ = NULL;

Item_SC_EquipStrength* Item_SC_EquipStrength::New() const {
  return new Item_SC_EquipStrength;
}

void Item_SC_EquipStrength::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    uiequippos_ = 0u;
    uinewlevel_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Item_SC_EquipStrength::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uiEquipPos;
        break;
      }

      // optional uint32 uiEquipPos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiEquipPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiequippos_)));
          set_has_uiequippos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uiNewLevel;
        break;
      }

      // optional uint32 uiNewLevel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiNewLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uinewlevel_)));
          set_has_uinewlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Item_SC_EquipStrength::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional uint32 uiEquipPos = 2;
  if (has_uiequippos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uiequippos(), output);
  }

  // optional uint32 uiNewLevel = 3;
  if (has_uinewlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->uinewlevel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Item_SC_EquipStrength::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional uint32 uiEquipPos = 2;
  if (has_uiequippos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uiequippos(), target);
  }

  // optional uint32 uiNewLevel = 3;
  if (has_uinewlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->uinewlevel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Item_SC_EquipStrength::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional uint32 uiEquipPos = 2;
    if (has_uiequippos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiequippos());
    }

    // optional uint32 uiNewLevel = 3;
    if (has_uinewlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uinewlevel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item_SC_EquipStrength::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Item_SC_EquipStrength* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Item_SC_EquipStrength*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Item_SC_EquipStrength::MergeFrom(const Item_SC_EquipStrength& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_uiequippos()) {
      set_uiequippos(from.uiequippos());
    }
    if (from.has_uinewlevel()) {
      set_uinewlevel(from.uinewlevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Item_SC_EquipStrength::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item_SC_EquipStrength::CopyFrom(const Item_SC_EquipStrength& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item_SC_EquipStrength::IsInitialized() const {

  return true;
}

void Item_SC_EquipStrength::Swap(Item_SC_EquipStrength* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(uiequippos_, other->uiequippos_);
    std::swap(uinewlevel_, other->uinewlevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Item_SC_EquipStrength::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Item_SC_EquipStrength_descriptor_;
  metadata.reflection = Item_SC_EquipStrength_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Item_CS_EquipStarUp::kUiEquipPosFieldNumber;
#endif  // !_MSC_VER

Item_CS_EquipStarUp::Item_CS_EquipStarUp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Item_CS_EquipStarUp::InitAsDefaultInstance() {
}

Item_CS_EquipStarUp::Item_CS_EquipStarUp(const Item_CS_EquipStarUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Item_CS_EquipStarUp::SharedCtor() {
  _cached_size_ = 0;
  uiequippos_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Item_CS_EquipStarUp::~Item_CS_EquipStarUp() {
  SharedDtor();
}

void Item_CS_EquipStarUp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Item_CS_EquipStarUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Item_CS_EquipStarUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_CS_EquipStarUp_descriptor_;
}

const Item_CS_EquipStarUp& Item_CS_EquipStarUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

Item_CS_EquipStarUp* Item_CS_EquipStarUp::default_instance_ = NULL;

Item_CS_EquipStarUp* Item_CS_EquipStarUp::New() const {
  return new Item_CS_EquipStarUp;
}

void Item_CS_EquipStarUp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uiequippos_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Item_CS_EquipStarUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uiEquipPos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiequippos_)));
          set_has_uiequippos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Item_CS_EquipStarUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uiEquipPos = 1;
  if (has_uiequippos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uiequippos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Item_CS_EquipStarUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uiEquipPos = 1;
  if (has_uiequippos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uiequippos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Item_CS_EquipStarUp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uiEquipPos = 1;
    if (has_uiequippos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiequippos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item_CS_EquipStarUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Item_CS_EquipStarUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Item_CS_EquipStarUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Item_CS_EquipStarUp::MergeFrom(const Item_CS_EquipStarUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uiequippos()) {
      set_uiequippos(from.uiequippos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Item_CS_EquipStarUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item_CS_EquipStarUp::CopyFrom(const Item_CS_EquipStarUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item_CS_EquipStarUp::IsInitialized() const {

  return true;
}

void Item_CS_EquipStarUp::Swap(Item_CS_EquipStarUp* other) {
  if (other != this) {
    std::swap(uiequippos_, other->uiequippos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Item_CS_EquipStarUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Item_CS_EquipStarUp_descriptor_;
  metadata.reflection = Item_CS_EquipStarUp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Item_SC_EquipStarUp::kResultFieldNumber;
const int Item_SC_EquipStarUp::kUiEquipPosFieldNumber;
const int Item_SC_EquipStarUp::kUiNewLevelFieldNumber;
#endif  // !_MSC_VER

Item_SC_EquipStarUp::Item_SC_EquipStarUp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Item_SC_EquipStarUp::InitAsDefaultInstance() {
}

Item_SC_EquipStarUp::Item_SC_EquipStarUp(const Item_SC_EquipStarUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Item_SC_EquipStarUp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  uiequippos_ = 0u;
  uinewlevel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Item_SC_EquipStarUp::~Item_SC_EquipStarUp() {
  SharedDtor();
}

void Item_SC_EquipStarUp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Item_SC_EquipStarUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Item_SC_EquipStarUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_SC_EquipStarUp_descriptor_;
}

const Item_SC_EquipStarUp& Item_SC_EquipStarUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

Item_SC_EquipStarUp* Item_SC_EquipStarUp::default_instance_ = NULL;

Item_SC_EquipStarUp* Item_SC_EquipStarUp::New() const {
  return new Item_SC_EquipStarUp;
}

void Item_SC_EquipStarUp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    uiequippos_ = 0u;
    uinewlevel_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Item_SC_EquipStarUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uiEquipPos;
        break;
      }

      // optional uint32 uiEquipPos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiEquipPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiequippos_)));
          set_has_uiequippos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uiNewLevel;
        break;
      }

      // optional uint32 uiNewLevel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiNewLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uinewlevel_)));
          set_has_uinewlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Item_SC_EquipStarUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional uint32 uiEquipPos = 2;
  if (has_uiequippos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uiequippos(), output);
  }

  // optional uint32 uiNewLevel = 3;
  if (has_uinewlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->uinewlevel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Item_SC_EquipStarUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional uint32 uiEquipPos = 2;
  if (has_uiequippos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uiequippos(), target);
  }

  // optional uint32 uiNewLevel = 3;
  if (has_uinewlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->uinewlevel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Item_SC_EquipStarUp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional uint32 uiEquipPos = 2;
    if (has_uiequippos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiequippos());
    }

    // optional uint32 uiNewLevel = 3;
    if (has_uinewlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uinewlevel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item_SC_EquipStarUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Item_SC_EquipStarUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Item_SC_EquipStarUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Item_SC_EquipStarUp::MergeFrom(const Item_SC_EquipStarUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_uiequippos()) {
      set_uiequippos(from.uiequippos());
    }
    if (from.has_uinewlevel()) {
      set_uinewlevel(from.uinewlevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Item_SC_EquipStarUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item_SC_EquipStarUp::CopyFrom(const Item_SC_EquipStarUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item_SC_EquipStarUp::IsInitialized() const {

  return true;
}

void Item_SC_EquipStarUp::Swap(Item_SC_EquipStarUp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(uiequippos_, other->uiequippos_);
    std::swap(uinewlevel_, other->uinewlevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Item_SC_EquipStarUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Item_SC_EquipStarUp_descriptor_;
  metadata.reflection = Item_SC_EquipStarUp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Item_CS_EquipInlay::kUiEquipPosFieldNumber;
const int Item_CS_EquipInlay::kUiInlayPosFieldNumber;
const int Item_CS_EquipInlay::kUiGemUUIDFieldNumber;
#endif  // !_MSC_VER

Item_CS_EquipInlay::Item_CS_EquipInlay()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Item_CS_EquipInlay::InitAsDefaultInstance() {
}

Item_CS_EquipInlay::Item_CS_EquipInlay(const Item_CS_EquipInlay& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Item_CS_EquipInlay::SharedCtor() {
  _cached_size_ = 0;
  uiequippos_ = 0u;
  uiinlaypos_ = 0u;
  uigemuuid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Item_CS_EquipInlay::~Item_CS_EquipInlay() {
  SharedDtor();
}

void Item_CS_EquipInlay::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Item_CS_EquipInlay::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Item_CS_EquipInlay::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_CS_EquipInlay_descriptor_;
}

const Item_CS_EquipInlay& Item_CS_EquipInlay::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

Item_CS_EquipInlay* Item_CS_EquipInlay::default_instance_ = NULL;

Item_CS_EquipInlay* Item_CS_EquipInlay::New() const {
  return new Item_CS_EquipInlay;
}

void Item_CS_EquipInlay::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uiequippos_ = 0u;
    uiinlaypos_ = 0u;
    uigemuuid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Item_CS_EquipInlay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uiEquipPos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiequippos_)));
          set_has_uiequippos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uiInlayPos;
        break;
      }

      // optional uint32 uiInlayPos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiInlayPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiinlaypos_)));
          set_has_uiinlaypos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uiGemUUID;
        break;
      }

      // optional uint64 uiGemUUID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiGemUUID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uigemuuid_)));
          set_has_uigemuuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Item_CS_EquipInlay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uiEquipPos = 1;
  if (has_uiequippos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uiequippos(), output);
  }

  // optional uint32 uiInlayPos = 2;
  if (has_uiinlaypos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uiinlaypos(), output);
  }

  // optional uint64 uiGemUUID = 3;
  if (has_uigemuuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->uigemuuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Item_CS_EquipInlay::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uiEquipPos = 1;
  if (has_uiequippos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uiequippos(), target);
  }

  // optional uint32 uiInlayPos = 2;
  if (has_uiinlaypos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uiinlaypos(), target);
  }

  // optional uint64 uiGemUUID = 3;
  if (has_uigemuuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->uigemuuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Item_CS_EquipInlay::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uiEquipPos = 1;
    if (has_uiequippos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiequippos());
    }

    // optional uint32 uiInlayPos = 2;
    if (has_uiinlaypos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiinlaypos());
    }

    // optional uint64 uiGemUUID = 3;
    if (has_uigemuuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uigemuuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item_CS_EquipInlay::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Item_CS_EquipInlay* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Item_CS_EquipInlay*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Item_CS_EquipInlay::MergeFrom(const Item_CS_EquipInlay& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uiequippos()) {
      set_uiequippos(from.uiequippos());
    }
    if (from.has_uiinlaypos()) {
      set_uiinlaypos(from.uiinlaypos());
    }
    if (from.has_uigemuuid()) {
      set_uigemuuid(from.uigemuuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Item_CS_EquipInlay::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item_CS_EquipInlay::CopyFrom(const Item_CS_EquipInlay& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item_CS_EquipInlay::IsInitialized() const {

  return true;
}

void Item_CS_EquipInlay::Swap(Item_CS_EquipInlay* other) {
  if (other != this) {
    std::swap(uiequippos_, other->uiequippos_);
    std::swap(uiinlaypos_, other->uiinlaypos_);
    std::swap(uigemuuid_, other->uigemuuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Item_CS_EquipInlay::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Item_CS_EquipInlay_descriptor_;
  metadata.reflection = Item_CS_EquipInlay_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Item_SC_EquipInlay::kResultFieldNumber;
const int Item_SC_EquipInlay::kUiEquipPosFieldNumber;
const int Item_SC_EquipInlay::kUiInlayPosFieldNumber;
const int Item_SC_EquipInlay::kUiGemIdFieldNumber;
#endif  // !_MSC_VER

Item_SC_EquipInlay::Item_SC_EquipInlay()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Item_SC_EquipInlay::InitAsDefaultInstance() {
}

Item_SC_EquipInlay::Item_SC_EquipInlay(const Item_SC_EquipInlay& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Item_SC_EquipInlay::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  uiequippos_ = 0u;
  uiinlaypos_ = 0u;
  uigemid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Item_SC_EquipInlay::~Item_SC_EquipInlay() {
  SharedDtor();
}

void Item_SC_EquipInlay::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Item_SC_EquipInlay::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Item_SC_EquipInlay::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_SC_EquipInlay_descriptor_;
}

const Item_SC_EquipInlay& Item_SC_EquipInlay::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

Item_SC_EquipInlay* Item_SC_EquipInlay::default_instance_ = NULL;

Item_SC_EquipInlay* Item_SC_EquipInlay::New() const {
  return new Item_SC_EquipInlay;
}

void Item_SC_EquipInlay::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    uiequippos_ = 0u;
    uiinlaypos_ = 0u;
    uigemid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Item_SC_EquipInlay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uiEquipPos;
        break;
      }

      // optional uint32 uiEquipPos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiEquipPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiequippos_)));
          set_has_uiequippos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uiInlayPos;
        break;
      }

      // optional uint32 uiInlayPos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiInlayPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiinlaypos_)));
          set_has_uiinlaypos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_uiGemId;
        break;
      }

      // optional uint32 uiGemId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiGemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uigemid_)));
          set_has_uigemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Item_SC_EquipInlay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional uint32 uiEquipPos = 2;
  if (has_uiequippos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uiequippos(), output);
  }

  // optional uint32 uiInlayPos = 3;
  if (has_uiinlaypos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->uiinlaypos(), output);
  }

  // optional uint32 uiGemId = 4;
  if (has_uigemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->uigemid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Item_SC_EquipInlay::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional uint32 uiEquipPos = 2;
  if (has_uiequippos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uiequippos(), target);
  }

  // optional uint32 uiInlayPos = 3;
  if (has_uiinlaypos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->uiinlaypos(), target);
  }

  // optional uint32 uiGemId = 4;
  if (has_uigemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->uigemid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Item_SC_EquipInlay::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional uint32 uiEquipPos = 2;
    if (has_uiequippos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiequippos());
    }

    // optional uint32 uiInlayPos = 3;
    if (has_uiinlaypos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiinlaypos());
    }

    // optional uint32 uiGemId = 4;
    if (has_uigemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uigemid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item_SC_EquipInlay::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Item_SC_EquipInlay* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Item_SC_EquipInlay*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Item_SC_EquipInlay::MergeFrom(const Item_SC_EquipInlay& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_uiequippos()) {
      set_uiequippos(from.uiequippos());
    }
    if (from.has_uiinlaypos()) {
      set_uiinlaypos(from.uiinlaypos());
    }
    if (from.has_uigemid()) {
      set_uigemid(from.uigemid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Item_SC_EquipInlay::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item_SC_EquipInlay::CopyFrom(const Item_SC_EquipInlay& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item_SC_EquipInlay::IsInitialized() const {

  return true;
}

void Item_SC_EquipInlay::Swap(Item_SC_EquipInlay* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(uiequippos_, other->uiequippos_);
    std::swap(uiinlaypos_, other->uiinlaypos_);
    std::swap(uigemid_, other->uigemid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Item_SC_EquipInlay::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Item_SC_EquipInlay_descriptor_;
  metadata.reflection = Item_SC_EquipInlay_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Item_CS_EquipLevelUp::kUiTargetUUIDFieldNumber;
const int Item_CS_EquipLevelUp::kUiMaterialUUIDFieldNumber;
#endif  // !_MSC_VER

Item_CS_EquipLevelUp::Item_CS_EquipLevelUp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Item_CS_EquipLevelUp::InitAsDefaultInstance() {
}

Item_CS_EquipLevelUp::Item_CS_EquipLevelUp(const Item_CS_EquipLevelUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Item_CS_EquipLevelUp::SharedCtor() {
  _cached_size_ = 0;
  uitargetuuid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Item_CS_EquipLevelUp::~Item_CS_EquipLevelUp() {
  SharedDtor();
}

void Item_CS_EquipLevelUp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Item_CS_EquipLevelUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Item_CS_EquipLevelUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_CS_EquipLevelUp_descriptor_;
}

const Item_CS_EquipLevelUp& Item_CS_EquipLevelUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

Item_CS_EquipLevelUp* Item_CS_EquipLevelUp::default_instance_ = NULL;

Item_CS_EquipLevelUp* Item_CS_EquipLevelUp::New() const {
  return new Item_CS_EquipLevelUp;
}

void Item_CS_EquipLevelUp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uitargetuuid_ = GOOGLE_ULONGLONG(0);
  }
  uimaterialuuid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Item_CS_EquipLevelUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uiTargetUUID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uitargetuuid_)));
          set_has_uitargetuuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uiMaterialUUID;
        break;
      }

      // repeated uint64 uiMaterialUUID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiMaterialUUID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_uimaterialuuid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_uimaterialuuid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uiMaterialUUID;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Item_CS_EquipLevelUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 uiTargetUUID = 1;
  if (has_uitargetuuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uitargetuuid(), output);
  }

  // repeated uint64 uiMaterialUUID = 2;
  for (int i = 0; i < this->uimaterialuuid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->uimaterialuuid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Item_CS_EquipLevelUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 uiTargetUUID = 1;
  if (has_uitargetuuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uitargetuuid(), target);
  }

  // repeated uint64 uiMaterialUUID = 2;
  for (int i = 0; i < this->uimaterialuuid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->uimaterialuuid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Item_CS_EquipLevelUp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 uiTargetUUID = 1;
    if (has_uitargetuuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uitargetuuid());
    }

  }
  // repeated uint64 uiMaterialUUID = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->uimaterialuuid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->uimaterialuuid(i));
    }
    total_size += 1 * this->uimaterialuuid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item_CS_EquipLevelUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Item_CS_EquipLevelUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Item_CS_EquipLevelUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Item_CS_EquipLevelUp::MergeFrom(const Item_CS_EquipLevelUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  uimaterialuuid_.MergeFrom(from.uimaterialuuid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uitargetuuid()) {
      set_uitargetuuid(from.uitargetuuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Item_CS_EquipLevelUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item_CS_EquipLevelUp::CopyFrom(const Item_CS_EquipLevelUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item_CS_EquipLevelUp::IsInitialized() const {

  return true;
}

void Item_CS_EquipLevelUp::Swap(Item_CS_EquipLevelUp* other) {
  if (other != this) {
    std::swap(uitargetuuid_, other->uitargetuuid_);
    uimaterialuuid_.Swap(&other->uimaterialuuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Item_CS_EquipLevelUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Item_CS_EquipLevelUp_descriptor_;
  metadata.reflection = Item_CS_EquipLevelUp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Item_SC_EquipLevelUp::kResultFieldNumber;
const int Item_SC_EquipLevelUp::kEquipFieldNumber;
#endif  // !_MSC_VER

Item_SC_EquipLevelUp::Item_SC_EquipLevelUp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Item_SC_EquipLevelUp::InitAsDefaultInstance() {
  equip_ = const_cast< ::proto::message::Equip*>(&::proto::message::Equip::default_instance());
}

Item_SC_EquipLevelUp::Item_SC_EquipLevelUp(const Item_SC_EquipLevelUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Item_SC_EquipLevelUp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  equip_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Item_SC_EquipLevelUp::~Item_SC_EquipLevelUp() {
  SharedDtor();
}

void Item_SC_EquipLevelUp::SharedDtor() {
  if (this != default_instance_) {
    delete equip_;
  }
}

void Item_SC_EquipLevelUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Item_SC_EquipLevelUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_SC_EquipLevelUp_descriptor_;
}

const Item_SC_EquipLevelUp& Item_SC_EquipLevelUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

Item_SC_EquipLevelUp* Item_SC_EquipLevelUp::default_instance_ = NULL;

Item_SC_EquipLevelUp* Item_SC_EquipLevelUp::New() const {
  return new Item_SC_EquipLevelUp;
}

void Item_SC_EquipLevelUp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_equip()) {
      if (equip_ != NULL) equip_->::proto::message::Equip::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Item_SC_EquipLevelUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_equip;
        break;
      }

      // optional .proto.message.Equip equip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Item_SC_EquipLevelUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .proto.message.Equip equip = 2;
  if (has_equip()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->equip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Item_SC_EquipLevelUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .proto.message.Equip equip = 2;
  if (has_equip()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->equip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Item_SC_EquipLevelUp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .proto.message.Equip equip = 2;
    if (has_equip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equip());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item_SC_EquipLevelUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Item_SC_EquipLevelUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Item_SC_EquipLevelUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Item_SC_EquipLevelUp::MergeFrom(const Item_SC_EquipLevelUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_equip()) {
      mutable_equip()->::proto::message::Equip::MergeFrom(from.equip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Item_SC_EquipLevelUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item_SC_EquipLevelUp::CopyFrom(const Item_SC_EquipLevelUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item_SC_EquipLevelUp::IsInitialized() const {

  return true;
}

void Item_SC_EquipLevelUp::Swap(Item_SC_EquipLevelUp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(equip_, other->equip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Item_SC_EquipLevelUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Item_SC_EquipLevelUp_descriptor_;
  metadata.reflection = Item_SC_EquipLevelUp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Item_CS_EquipQualityUp::kUuidFieldNumber;
#endif  // !_MSC_VER

Item_CS_EquipQualityUp::Item_CS_EquipQualityUp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Item_CS_EquipQualityUp::InitAsDefaultInstance() {
}

Item_CS_EquipQualityUp::Item_CS_EquipQualityUp(const Item_CS_EquipQualityUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Item_CS_EquipQualityUp::SharedCtor() {
  _cached_size_ = 0;
  uuid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Item_CS_EquipQualityUp::~Item_CS_EquipQualityUp() {
  SharedDtor();
}

void Item_CS_EquipQualityUp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Item_CS_EquipQualityUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Item_CS_EquipQualityUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_CS_EquipQualityUp_descriptor_;
}

const Item_CS_EquipQualityUp& Item_CS_EquipQualityUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

Item_CS_EquipQualityUp* Item_CS_EquipQualityUp::default_instance_ = NULL;

Item_CS_EquipQualityUp* Item_CS_EquipQualityUp::New() const {
  return new Item_CS_EquipQualityUp;
}

void Item_CS_EquipQualityUp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uuid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Item_CS_EquipQualityUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Item_CS_EquipQualityUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Item_CS_EquipQualityUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 uuid = 1;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Item_CS_EquipQualityUp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 uuid = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item_CS_EquipQualityUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Item_CS_EquipQualityUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Item_CS_EquipQualityUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Item_CS_EquipQualityUp::MergeFrom(const Item_CS_EquipQualityUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Item_CS_EquipQualityUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item_CS_EquipQualityUp::CopyFrom(const Item_CS_EquipQualityUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item_CS_EquipQualityUp::IsInitialized() const {

  return true;
}

void Item_CS_EquipQualityUp::Swap(Item_CS_EquipQualityUp* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Item_CS_EquipQualityUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Item_CS_EquipQualityUp_descriptor_;
  metadata.reflection = Item_CS_EquipQualityUp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Item_SC_EquipQualityUp::kResultFieldNumber;
const int Item_SC_EquipQualityUp::kEquipFieldNumber;
#endif  // !_MSC_VER

Item_SC_EquipQualityUp::Item_SC_EquipQualityUp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Item_SC_EquipQualityUp::InitAsDefaultInstance() {
  equip_ = const_cast< ::proto::message::Equip*>(&::proto::message::Equip::default_instance());
}

Item_SC_EquipQualityUp::Item_SC_EquipQualityUp(const Item_SC_EquipQualityUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Item_SC_EquipQualityUp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  equip_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Item_SC_EquipQualityUp::~Item_SC_EquipQualityUp() {
  SharedDtor();
}

void Item_SC_EquipQualityUp::SharedDtor() {
  if (this != default_instance_) {
    delete equip_;
  }
}

void Item_SC_EquipQualityUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Item_SC_EquipQualityUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_SC_EquipQualityUp_descriptor_;
}

const Item_SC_EquipQualityUp& Item_SC_EquipQualityUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

Item_SC_EquipQualityUp* Item_SC_EquipQualityUp::default_instance_ = NULL;

Item_SC_EquipQualityUp* Item_SC_EquipQualityUp::New() const {
  return new Item_SC_EquipQualityUp;
}

void Item_SC_EquipQualityUp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_equip()) {
      if (equip_ != NULL) equip_->::proto::message::Equip::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Item_SC_EquipQualityUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_equip;
        break;
      }

      // optional .proto.message.Equip equip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Item_SC_EquipQualityUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .proto.message.Equip equip = 2;
  if (has_equip()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->equip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Item_SC_EquipQualityUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .proto.message.Equip equip = 2;
  if (has_equip()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->equip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Item_SC_EquipQualityUp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .proto.message.Equip equip = 2;
    if (has_equip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equip());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item_SC_EquipQualityUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Item_SC_EquipQualityUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Item_SC_EquipQualityUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Item_SC_EquipQualityUp::MergeFrom(const Item_SC_EquipQualityUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_equip()) {
      mutable_equip()->::proto::message::Equip::MergeFrom(from.equip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Item_SC_EquipQualityUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item_SC_EquipQualityUp::CopyFrom(const Item_SC_EquipQualityUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item_SC_EquipQualityUp::IsInitialized() const {

  return true;
}

void Item_SC_EquipQualityUp::Swap(Item_SC_EquipQualityUp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(equip_, other->equip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Item_SC_EquipQualityUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Item_SC_EquipQualityUp_descriptor_;
  metadata.reflection = Item_SC_EquipQualityUp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Item_CS_IncreaseEquip::kUuidFieldNumber;
#endif  // !_MSC_VER

Item_CS_IncreaseEquip::Item_CS_IncreaseEquip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Item_CS_IncreaseEquip::InitAsDefaultInstance() {
}

Item_CS_IncreaseEquip::Item_CS_IncreaseEquip(const Item_CS_IncreaseEquip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Item_CS_IncreaseEquip::SharedCtor() {
  _cached_size_ = 0;
  uuid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Item_CS_IncreaseEquip::~Item_CS_IncreaseEquip() {
  SharedDtor();
}

void Item_CS_IncreaseEquip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Item_CS_IncreaseEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Item_CS_IncreaseEquip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_CS_IncreaseEquip_descriptor_;
}

const Item_CS_IncreaseEquip& Item_CS_IncreaseEquip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

Item_CS_IncreaseEquip* Item_CS_IncreaseEquip::default_instance_ = NULL;

Item_CS_IncreaseEquip* Item_CS_IncreaseEquip::New() const {
  return new Item_CS_IncreaseEquip;
}

void Item_CS_IncreaseEquip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uuid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Item_CS_IncreaseEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Item_CS_IncreaseEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Item_CS_IncreaseEquip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 uuid = 1;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Item_CS_IncreaseEquip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 uuid = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item_CS_IncreaseEquip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Item_CS_IncreaseEquip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Item_CS_IncreaseEquip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Item_CS_IncreaseEquip::MergeFrom(const Item_CS_IncreaseEquip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Item_CS_IncreaseEquip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item_CS_IncreaseEquip::CopyFrom(const Item_CS_IncreaseEquip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item_CS_IncreaseEquip::IsInitialized() const {

  return true;
}

void Item_CS_IncreaseEquip::Swap(Item_CS_IncreaseEquip* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Item_CS_IncreaseEquip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Item_CS_IncreaseEquip_descriptor_;
  metadata.reflection = Item_CS_IncreaseEquip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Item_SC_IncreaseEquip::kResultFieldNumber;
const int Item_SC_IncreaseEquip::kEquipFieldNumber;
#endif  // !_MSC_VER

Item_SC_IncreaseEquip::Item_SC_IncreaseEquip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Item_SC_IncreaseEquip::InitAsDefaultInstance() {
  equip_ = const_cast< ::proto::message::Equip*>(&::proto::message::Equip::default_instance());
}

Item_SC_IncreaseEquip::Item_SC_IncreaseEquip(const Item_SC_IncreaseEquip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Item_SC_IncreaseEquip::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  equip_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Item_SC_IncreaseEquip::~Item_SC_IncreaseEquip() {
  SharedDtor();
}

void Item_SC_IncreaseEquip::SharedDtor() {
  if (this != default_instance_) {
    delete equip_;
  }
}

void Item_SC_IncreaseEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Item_SC_IncreaseEquip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_SC_IncreaseEquip_descriptor_;
}

const Item_SC_IncreaseEquip& Item_SC_IncreaseEquip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

Item_SC_IncreaseEquip* Item_SC_IncreaseEquip::default_instance_ = NULL;

Item_SC_IncreaseEquip* Item_SC_IncreaseEquip::New() const {
  return new Item_SC_IncreaseEquip;
}

void Item_SC_IncreaseEquip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_equip()) {
      if (equip_ != NULL) equip_->::proto::message::Equip::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Item_SC_IncreaseEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_equip;
        break;
      }

      // optional .proto.message.Equip equip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Item_SC_IncreaseEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .proto.message.Equip equip = 2;
  if (has_equip()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->equip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Item_SC_IncreaseEquip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .proto.message.Equip equip = 2;
  if (has_equip()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->equip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Item_SC_IncreaseEquip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .proto.message.Equip equip = 2;
    if (has_equip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equip());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item_SC_IncreaseEquip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Item_SC_IncreaseEquip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Item_SC_IncreaseEquip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Item_SC_IncreaseEquip::MergeFrom(const Item_SC_IncreaseEquip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_equip()) {
      mutable_equip()->::proto::message::Equip::MergeFrom(from.equip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Item_SC_IncreaseEquip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item_SC_IncreaseEquip::CopyFrom(const Item_SC_IncreaseEquip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item_SC_IncreaseEquip::IsInitialized() const {

  return true;
}

void Item_SC_IncreaseEquip::Swap(Item_SC_IncreaseEquip* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(equip_, other->equip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Item_SC_IncreaseEquip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Item_SC_IncreaseEquip_descriptor_;
  metadata.reflection = Item_SC_IncreaseEquip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Item_CS_ResolveEquip::kUuidFieldNumber;
#endif  // !_MSC_VER

Item_CS_ResolveEquip::Item_CS_ResolveEquip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Item_CS_ResolveEquip::InitAsDefaultInstance() {
}

Item_CS_ResolveEquip::Item_CS_ResolveEquip(const Item_CS_ResolveEquip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Item_CS_ResolveEquip::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Item_CS_ResolveEquip::~Item_CS_ResolveEquip() {
  SharedDtor();
}

void Item_CS_ResolveEquip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Item_CS_ResolveEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Item_CS_ResolveEquip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_CS_ResolveEquip_descriptor_;
}

const Item_CS_ResolveEquip& Item_CS_ResolveEquip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

Item_CS_ResolveEquip* Item_CS_ResolveEquip::default_instance_ = NULL;

Item_CS_ResolveEquip* Item_CS_ResolveEquip::New() const {
  return new Item_CS_ResolveEquip;
}

void Item_CS_ResolveEquip::Clear() {
  uuid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Item_CS_ResolveEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_uuid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_uuid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_uuid;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Item_CS_ResolveEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint64 uuid = 1;
  for (int i = 0; i < this->uuid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->uuid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Item_CS_ResolveEquip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint64 uuid = 1;
  for (int i = 0; i < this->uuid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->uuid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Item_CS_ResolveEquip::ByteSize() const {
  int total_size = 0;

  // repeated uint64 uuid = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->uuid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->uuid(i));
    }
    total_size += 1 * this->uuid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item_CS_ResolveEquip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Item_CS_ResolveEquip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Item_CS_ResolveEquip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Item_CS_ResolveEquip::MergeFrom(const Item_CS_ResolveEquip& from) {
  GOOGLE_CHECK_NE(&from, this);
  uuid_.MergeFrom(from.uuid_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Item_CS_ResolveEquip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item_CS_ResolveEquip::CopyFrom(const Item_CS_ResolveEquip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item_CS_ResolveEquip::IsInitialized() const {

  return true;
}

void Item_CS_ResolveEquip::Swap(Item_CS_ResolveEquip* other) {
  if (other != this) {
    uuid_.Swap(&other->uuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Item_CS_ResolveEquip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Item_CS_ResolveEquip_descriptor_;
  metadata.reflection = Item_CS_ResolveEquip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Item_SC_ResolveEquip::kResultFieldNumber;
const int Item_SC_ResolveEquip::kItemIdFieldNumber;
#endif  // !_MSC_VER

Item_SC_ResolveEquip::Item_SC_ResolveEquip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Item_SC_ResolveEquip::InitAsDefaultInstance() {
}

Item_SC_ResolveEquip::Item_SC_ResolveEquip(const Item_SC_ResolveEquip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Item_SC_ResolveEquip::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  item_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Item_SC_ResolveEquip::~Item_SC_ResolveEquip() {
  SharedDtor();
}

void Item_SC_ResolveEquip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Item_SC_ResolveEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Item_SC_ResolveEquip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_SC_ResolveEquip_descriptor_;
}

const Item_SC_ResolveEquip& Item_SC_ResolveEquip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

Item_SC_ResolveEquip* Item_SC_ResolveEquip::default_instance_ = NULL;

Item_SC_ResolveEquip* Item_SC_ResolveEquip::New() const {
  return new Item_SC_ResolveEquip;
}

void Item_SC_ResolveEquip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    item_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Item_SC_ResolveEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_id;
        break;
      }

      // optional int32 item_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Item_SC_ResolveEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 item_id = 2;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->item_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Item_SC_ResolveEquip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 item_id = 2;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->item_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Item_SC_ResolveEquip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 item_id = 2;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item_SC_ResolveEquip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Item_SC_ResolveEquip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Item_SC_ResolveEquip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Item_SC_ResolveEquip::MergeFrom(const Item_SC_ResolveEquip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Item_SC_ResolveEquip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item_SC_ResolveEquip::CopyFrom(const Item_SC_ResolveEquip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item_SC_ResolveEquip::IsInitialized() const {

  return true;
}

void Item_SC_ResolveEquip::Swap(Item_SC_ResolveEquip* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(item_id_, other->item_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Item_SC_ResolveEquip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Item_SC_ResolveEquip_descriptor_;
  metadata.reflection = Item_SC_ResolveEquip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Item_CS_EquipRandAttr::kUiEquipPosFieldNumber;
const int Item_CS_EquipRandAttr::kVecLockPosFieldNumber;
#endif  // !_MSC_VER

Item_CS_EquipRandAttr::Item_CS_EquipRandAttr()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Item_CS_EquipRandAttr::InitAsDefaultInstance() {
}

Item_CS_EquipRandAttr::Item_CS_EquipRandAttr(const Item_CS_EquipRandAttr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Item_CS_EquipRandAttr::SharedCtor() {
  _cached_size_ = 0;
  uiequippos_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Item_CS_EquipRandAttr::~Item_CS_EquipRandAttr() {
  SharedDtor();
}

void Item_CS_EquipRandAttr::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Item_CS_EquipRandAttr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Item_CS_EquipRandAttr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_CS_EquipRandAttr_descriptor_;
}

const Item_CS_EquipRandAttr& Item_CS_EquipRandAttr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

Item_CS_EquipRandAttr* Item_CS_EquipRandAttr::default_instance_ = NULL;

Item_CS_EquipRandAttr* Item_CS_EquipRandAttr::New() const {
  return new Item_CS_EquipRandAttr;
}

void Item_CS_EquipRandAttr::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uiequippos_ = 0u;
  }
  veclockpos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Item_CS_EquipRandAttr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uiEquipPos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiequippos_)));
          set_has_uiequippos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_vecLockPos;
        break;
      }

      // repeated int32 vecLockPos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vecLockPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_veclockpos())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_veclockpos())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_vecLockPos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Item_CS_EquipRandAttr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uiEquipPos = 1;
  if (has_uiequippos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uiequippos(), output);
  }

  // repeated int32 vecLockPos = 2;
  for (int i = 0; i < this->veclockpos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->veclockpos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Item_CS_EquipRandAttr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uiEquipPos = 1;
  if (has_uiequippos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uiequippos(), target);
  }

  // repeated int32 vecLockPos = 2;
  for (int i = 0; i < this->veclockpos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->veclockpos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Item_CS_EquipRandAttr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uiEquipPos = 1;
    if (has_uiequippos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiequippos());
    }

  }
  // repeated int32 vecLockPos = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->veclockpos_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->veclockpos(i));
    }
    total_size += 1 * this->veclockpos_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item_CS_EquipRandAttr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Item_CS_EquipRandAttr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Item_CS_EquipRandAttr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Item_CS_EquipRandAttr::MergeFrom(const Item_CS_EquipRandAttr& from) {
  GOOGLE_CHECK_NE(&from, this);
  veclockpos_.MergeFrom(from.veclockpos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uiequippos()) {
      set_uiequippos(from.uiequippos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Item_CS_EquipRandAttr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item_CS_EquipRandAttr::CopyFrom(const Item_CS_EquipRandAttr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item_CS_EquipRandAttr::IsInitialized() const {

  return true;
}

void Item_CS_EquipRandAttr::Swap(Item_CS_EquipRandAttr* other) {
  if (other != this) {
    std::swap(uiequippos_, other->uiequippos_);
    veclockpos_.Swap(&other->veclockpos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Item_CS_EquipRandAttr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Item_CS_EquipRandAttr_descriptor_;
  metadata.reflection = Item_CS_EquipRandAttr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Item_SC_EquipRandAttr::kResultFieldNumber;
const int Item_SC_EquipRandAttr::kUiEquipPosFieldNumber;
const int Item_SC_EquipRandAttr::kVecRandAttrFieldNumber;
const int Item_SC_EquipRandAttr::kUiAttrPosFieldNumber;
#endif  // !_MSC_VER

Item_SC_EquipRandAttr::Item_SC_EquipRandAttr()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Item_SC_EquipRandAttr::InitAsDefaultInstance() {
}

Item_SC_EquipRandAttr::Item_SC_EquipRandAttr(const Item_SC_EquipRandAttr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Item_SC_EquipRandAttr::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  uiequippos_ = 0u;
  uiattrpos_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Item_SC_EquipRandAttr::~Item_SC_EquipRandAttr() {
  SharedDtor();
}

void Item_SC_EquipRandAttr::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Item_SC_EquipRandAttr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Item_SC_EquipRandAttr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_SC_EquipRandAttr_descriptor_;
}

const Item_SC_EquipRandAttr& Item_SC_EquipRandAttr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

Item_SC_EquipRandAttr* Item_SC_EquipRandAttr::default_instance_ = NULL;

Item_SC_EquipRandAttr* Item_SC_EquipRandAttr::New() const {
  return new Item_SC_EquipRandAttr;
}

void Item_SC_EquipRandAttr::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    uiequippos_ = 0u;
    uiattrpos_ = 0u;
  }
  vecrandattr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Item_SC_EquipRandAttr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uiEquipPos;
        break;
      }

      // optional uint32 uiEquipPos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiEquipPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiequippos_)));
          set_has_uiequippos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_vecRandAttr;
        break;
      }

      // repeated .proto.message.SRandAttr vecRandAttr = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vecRandAttr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vecrandattr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_vecRandAttr;
        if (input->ExpectTag(32)) goto parse_uiAttrPos;
        break;
      }

      // optional uint32 uiAttrPos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiAttrPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiattrpos_)));
          set_has_uiattrpos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Item_SC_EquipRandAttr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional uint32 uiEquipPos = 2;
  if (has_uiequippos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uiequippos(), output);
  }

  // repeated .proto.message.SRandAttr vecRandAttr = 3;
  for (int i = 0; i < this->vecrandattr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->vecrandattr(i), output);
  }

  // optional uint32 uiAttrPos = 4;
  if (has_uiattrpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->uiattrpos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Item_SC_EquipRandAttr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional uint32 uiEquipPos = 2;
  if (has_uiequippos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uiequippos(), target);
  }

  // repeated .proto.message.SRandAttr vecRandAttr = 3;
  for (int i = 0; i < this->vecrandattr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->vecrandattr(i), target);
  }

  // optional uint32 uiAttrPos = 4;
  if (has_uiattrpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->uiattrpos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Item_SC_EquipRandAttr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional uint32 uiEquipPos = 2;
    if (has_uiequippos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiequippos());
    }

    // optional uint32 uiAttrPos = 4;
    if (has_uiattrpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiattrpos());
    }

  }
  // repeated .proto.message.SRandAttr vecRandAttr = 3;
  total_size += 1 * this->vecrandattr_size();
  for (int i = 0; i < this->vecrandattr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vecrandattr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item_SC_EquipRandAttr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Item_SC_EquipRandAttr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Item_SC_EquipRandAttr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Item_SC_EquipRandAttr::MergeFrom(const Item_SC_EquipRandAttr& from) {
  GOOGLE_CHECK_NE(&from, this);
  vecrandattr_.MergeFrom(from.vecrandattr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_uiequippos()) {
      set_uiequippos(from.uiequippos());
    }
    if (from.has_uiattrpos()) {
      set_uiattrpos(from.uiattrpos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Item_SC_EquipRandAttr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item_SC_EquipRandAttr::CopyFrom(const Item_SC_EquipRandAttr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item_SC_EquipRandAttr::IsInitialized() const {

  return true;
}

void Item_SC_EquipRandAttr::Swap(Item_SC_EquipRandAttr* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(uiequippos_, other->uiequippos_);
    vecrandattr_.Swap(&other->vecrandattr_);
    std::swap(uiattrpos_, other->uiattrpos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Item_SC_EquipRandAttr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Item_SC_EquipRandAttr_descriptor_;
  metadata.reflection = Item_SC_EquipRandAttr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Item_CS_EquipRefine::kUiEquipPosFieldNumber;
const int Item_CS_EquipRefine::kVecRefinePosFieldNumber;
#endif  // !_MSC_VER

Item_CS_EquipRefine::Item_CS_EquipRefine()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Item_CS_EquipRefine::InitAsDefaultInstance() {
}

Item_CS_EquipRefine::Item_CS_EquipRefine(const Item_CS_EquipRefine& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Item_CS_EquipRefine::SharedCtor() {
  _cached_size_ = 0;
  uiequippos_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Item_CS_EquipRefine::~Item_CS_EquipRefine() {
  SharedDtor();
}

void Item_CS_EquipRefine::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Item_CS_EquipRefine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Item_CS_EquipRefine::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_CS_EquipRefine_descriptor_;
}

const Item_CS_EquipRefine& Item_CS_EquipRefine::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

Item_CS_EquipRefine* Item_CS_EquipRefine::default_instance_ = NULL;

Item_CS_EquipRefine* Item_CS_EquipRefine::New() const {
  return new Item_CS_EquipRefine;
}

void Item_CS_EquipRefine::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uiequippos_ = 0u;
  }
  vecrefinepos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Item_CS_EquipRefine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uiEquipPos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiequippos_)));
          set_has_uiequippos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_vecRefinePos;
        break;
      }

      // repeated int32 vecRefinePos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vecRefinePos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_vecrefinepos())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_vecrefinepos())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_vecRefinePos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Item_CS_EquipRefine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uiEquipPos = 1;
  if (has_uiequippos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uiequippos(), output);
  }

  // repeated int32 vecRefinePos = 2;
  for (int i = 0; i < this->vecrefinepos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->vecrefinepos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Item_CS_EquipRefine::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uiEquipPos = 1;
  if (has_uiequippos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uiequippos(), target);
  }

  // repeated int32 vecRefinePos = 2;
  for (int i = 0; i < this->vecrefinepos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->vecrefinepos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Item_CS_EquipRefine::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uiEquipPos = 1;
    if (has_uiequippos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiequippos());
    }

  }
  // repeated int32 vecRefinePos = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->vecrefinepos_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->vecrefinepos(i));
    }
    total_size += 1 * this->vecrefinepos_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item_CS_EquipRefine::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Item_CS_EquipRefine* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Item_CS_EquipRefine*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Item_CS_EquipRefine::MergeFrom(const Item_CS_EquipRefine& from) {
  GOOGLE_CHECK_NE(&from, this);
  vecrefinepos_.MergeFrom(from.vecrefinepos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uiequippos()) {
      set_uiequippos(from.uiequippos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Item_CS_EquipRefine::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item_CS_EquipRefine::CopyFrom(const Item_CS_EquipRefine& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item_CS_EquipRefine::IsInitialized() const {

  return true;
}

void Item_CS_EquipRefine::Swap(Item_CS_EquipRefine* other) {
  if (other != this) {
    std::swap(uiequippos_, other->uiequippos_);
    vecrefinepos_.Swap(&other->vecrefinepos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Item_CS_EquipRefine::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Item_CS_EquipRefine_descriptor_;
  metadata.reflection = Item_CS_EquipRefine_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Item_SC_EquipRefine::kResultFieldNumber;
const int Item_SC_EquipRefine::kUiEquipPosFieldNumber;
const int Item_SC_EquipRefine::kVecRandAttrFieldNumber;
#endif  // !_MSC_VER

Item_SC_EquipRefine::Item_SC_EquipRefine()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Item_SC_EquipRefine::InitAsDefaultInstance() {
}

Item_SC_EquipRefine::Item_SC_EquipRefine(const Item_SC_EquipRefine& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Item_SC_EquipRefine::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  uiequippos_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Item_SC_EquipRefine::~Item_SC_EquipRefine() {
  SharedDtor();
}

void Item_SC_EquipRefine::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Item_SC_EquipRefine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Item_SC_EquipRefine::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_SC_EquipRefine_descriptor_;
}

const Item_SC_EquipRefine& Item_SC_EquipRefine::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

Item_SC_EquipRefine* Item_SC_EquipRefine::default_instance_ = NULL;

Item_SC_EquipRefine* Item_SC_EquipRefine::New() const {
  return new Item_SC_EquipRefine;
}

void Item_SC_EquipRefine::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    uiequippos_ = 0u;
  }
  vecrandattr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Item_SC_EquipRefine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uiEquipPos;
        break;
      }

      // optional uint32 uiEquipPos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiEquipPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiequippos_)));
          set_has_uiequippos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_vecRandAttr;
        break;
      }

      // repeated .proto.message.SRandAttr vecRandAttr = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vecRandAttr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vecrandattr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_vecRandAttr;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Item_SC_EquipRefine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional uint32 uiEquipPos = 2;
  if (has_uiequippos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uiequippos(), output);
  }

  // repeated .proto.message.SRandAttr vecRandAttr = 3;
  for (int i = 0; i < this->vecrandattr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->vecrandattr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Item_SC_EquipRefine::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional uint32 uiEquipPos = 2;
  if (has_uiequippos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uiequippos(), target);
  }

  // repeated .proto.message.SRandAttr vecRandAttr = 3;
  for (int i = 0; i < this->vecrandattr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->vecrandattr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Item_SC_EquipRefine::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional uint32 uiEquipPos = 2;
    if (has_uiequippos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiequippos());
    }

  }
  // repeated .proto.message.SRandAttr vecRandAttr = 3;
  total_size += 1 * this->vecrandattr_size();
  for (int i = 0; i < this->vecrandattr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vecrandattr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item_SC_EquipRefine::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Item_SC_EquipRefine* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Item_SC_EquipRefine*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Item_SC_EquipRefine::MergeFrom(const Item_SC_EquipRefine& from) {
  GOOGLE_CHECK_NE(&from, this);
  vecrandattr_.MergeFrom(from.vecrandattr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_uiequippos()) {
      set_uiequippos(from.uiequippos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Item_SC_EquipRefine::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item_SC_EquipRefine::CopyFrom(const Item_SC_EquipRefine& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item_SC_EquipRefine::IsInitialized() const {

  return true;
}

void Item_SC_EquipRefine::Swap(Item_SC_EquipRefine* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(uiequippos_, other->uiequippos_);
    vecrandattr_.Swap(&other->vecrandattr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Item_SC_EquipRefine::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Item_SC_EquipRefine_descriptor_;
  metadata.reflection = Item_SC_EquipRefine_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Item_CS_EquipActiveSuit::kUiSuitIdFieldNumber;
const int Item_CS_EquipActiveSuit::kUiStepFieldNumber;
#endif  // !_MSC_VER

Item_CS_EquipActiveSuit::Item_CS_EquipActiveSuit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Item_CS_EquipActiveSuit::InitAsDefaultInstance() {
}

Item_CS_EquipActiveSuit::Item_CS_EquipActiveSuit(const Item_CS_EquipActiveSuit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Item_CS_EquipActiveSuit::SharedCtor() {
  _cached_size_ = 0;
  uisuitid_ = 0u;
  uistep_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Item_CS_EquipActiveSuit::~Item_CS_EquipActiveSuit() {
  SharedDtor();
}

void Item_CS_EquipActiveSuit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Item_CS_EquipActiveSuit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Item_CS_EquipActiveSuit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_CS_EquipActiveSuit_descriptor_;
}

const Item_CS_EquipActiveSuit& Item_CS_EquipActiveSuit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

Item_CS_EquipActiveSuit* Item_CS_EquipActiveSuit::default_instance_ = NULL;

Item_CS_EquipActiveSuit* Item_CS_EquipActiveSuit::New() const {
  return new Item_CS_EquipActiveSuit;
}

void Item_CS_EquipActiveSuit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uisuitid_ = 0u;
    uistep_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Item_CS_EquipActiveSuit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uiSuitId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uisuitid_)));
          set_has_uisuitid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uiStep;
        break;
      }

      // optional uint32 uiStep = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiStep:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uistep_)));
          set_has_uistep();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Item_CS_EquipActiveSuit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uiSuitId = 1;
  if (has_uisuitid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uisuitid(), output);
  }

  // optional uint32 uiStep = 2;
  if (has_uistep()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uistep(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Item_CS_EquipActiveSuit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uiSuitId = 1;
  if (has_uisuitid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uisuitid(), target);
  }

  // optional uint32 uiStep = 2;
  if (has_uistep()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uistep(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Item_CS_EquipActiveSuit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uiSuitId = 1;
    if (has_uisuitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uisuitid());
    }

    // optional uint32 uiStep = 2;
    if (has_uistep()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uistep());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item_CS_EquipActiveSuit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Item_CS_EquipActiveSuit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Item_CS_EquipActiveSuit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Item_CS_EquipActiveSuit::MergeFrom(const Item_CS_EquipActiveSuit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uisuitid()) {
      set_uisuitid(from.uisuitid());
    }
    if (from.has_uistep()) {
      set_uistep(from.uistep());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Item_CS_EquipActiveSuit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item_CS_EquipActiveSuit::CopyFrom(const Item_CS_EquipActiveSuit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item_CS_EquipActiveSuit::IsInitialized() const {

  return true;
}

void Item_CS_EquipActiveSuit::Swap(Item_CS_EquipActiveSuit* other) {
  if (other != this) {
    std::swap(uisuitid_, other->uisuitid_);
    std::swap(uistep_, other->uistep_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Item_CS_EquipActiveSuit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Item_CS_EquipActiveSuit_descriptor_;
  metadata.reflection = Item_CS_EquipActiveSuit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Item_SC_EquipActiveSuit::kResultFieldNumber;
const int Item_SC_EquipActiveSuit::kUiSuitIdFieldNumber;
const int Item_SC_EquipActiveSuit::kUiStepFieldNumber;
#endif  // !_MSC_VER

Item_SC_EquipActiveSuit::Item_SC_EquipActiveSuit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Item_SC_EquipActiveSuit::InitAsDefaultInstance() {
}

Item_SC_EquipActiveSuit::Item_SC_EquipActiveSuit(const Item_SC_EquipActiveSuit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Item_SC_EquipActiveSuit::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  uisuitid_ = 0u;
  uistep_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Item_SC_EquipActiveSuit::~Item_SC_EquipActiveSuit() {
  SharedDtor();
}

void Item_SC_EquipActiveSuit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Item_SC_EquipActiveSuit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Item_SC_EquipActiveSuit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_SC_EquipActiveSuit_descriptor_;
}

const Item_SC_EquipActiveSuit& Item_SC_EquipActiveSuit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

Item_SC_EquipActiveSuit* Item_SC_EquipActiveSuit::default_instance_ = NULL;

Item_SC_EquipActiveSuit* Item_SC_EquipActiveSuit::New() const {
  return new Item_SC_EquipActiveSuit;
}

void Item_SC_EquipActiveSuit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    uisuitid_ = 0u;
    uistep_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Item_SC_EquipActiveSuit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uiSuitId;
        break;
      }

      // optional uint32 uiSuitId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiSuitId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uisuitid_)));
          set_has_uisuitid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uiStep;
        break;
      }

      // optional uint32 uiStep = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiStep:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uistep_)));
          set_has_uistep();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Item_SC_EquipActiveSuit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional uint32 uiSuitId = 2;
  if (has_uisuitid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uisuitid(), output);
  }

  // optional uint32 uiStep = 3;
  if (has_uistep()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->uistep(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Item_SC_EquipActiveSuit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional uint32 uiSuitId = 2;
  if (has_uisuitid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uisuitid(), target);
  }

  // optional uint32 uiStep = 3;
  if (has_uistep()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->uistep(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Item_SC_EquipActiveSuit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional uint32 uiSuitId = 2;
    if (has_uisuitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uisuitid());
    }

    // optional uint32 uiStep = 3;
    if (has_uistep()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uistep());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item_SC_EquipActiveSuit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Item_SC_EquipActiveSuit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Item_SC_EquipActiveSuit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Item_SC_EquipActiveSuit::MergeFrom(const Item_SC_EquipActiveSuit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_uisuitid()) {
      set_uisuitid(from.uisuitid());
    }
    if (from.has_uistep()) {
      set_uistep(from.uistep());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Item_SC_EquipActiveSuit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item_SC_EquipActiveSuit::CopyFrom(const Item_SC_EquipActiveSuit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item_SC_EquipActiveSuit::IsInitialized() const {

  return true;
}

void Item_SC_EquipActiveSuit::Swap(Item_SC_EquipActiveSuit* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(uisuitid_, other->uisuitid_);
    std::swap(uistep_, other->uistep_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Item_SC_EquipActiveSuit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Item_SC_EquipActiveSuit_descriptor_;
  metadata.reflection = Item_SC_EquipActiveSuit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Item_CS_EquipExchange::kUiExchangeIdFieldNumber;
#endif  // !_MSC_VER

Item_CS_EquipExchange::Item_CS_EquipExchange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Item_CS_EquipExchange::InitAsDefaultInstance() {
}

Item_CS_EquipExchange::Item_CS_EquipExchange(const Item_CS_EquipExchange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Item_CS_EquipExchange::SharedCtor() {
  _cached_size_ = 0;
  uiexchangeid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Item_CS_EquipExchange::~Item_CS_EquipExchange() {
  SharedDtor();
}

void Item_CS_EquipExchange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Item_CS_EquipExchange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Item_CS_EquipExchange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_CS_EquipExchange_descriptor_;
}

const Item_CS_EquipExchange& Item_CS_EquipExchange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

Item_CS_EquipExchange* Item_CS_EquipExchange::default_instance_ = NULL;

Item_CS_EquipExchange* Item_CS_EquipExchange::New() const {
  return new Item_CS_EquipExchange;
}

void Item_CS_EquipExchange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uiexchangeid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Item_CS_EquipExchange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uiExchangeId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiexchangeid_)));
          set_has_uiexchangeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Item_CS_EquipExchange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uiExchangeId = 1;
  if (has_uiexchangeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uiexchangeid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Item_CS_EquipExchange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uiExchangeId = 1;
  if (has_uiexchangeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uiexchangeid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Item_CS_EquipExchange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uiExchangeId = 1;
    if (has_uiexchangeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiexchangeid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item_CS_EquipExchange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Item_CS_EquipExchange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Item_CS_EquipExchange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Item_CS_EquipExchange::MergeFrom(const Item_CS_EquipExchange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uiexchangeid()) {
      set_uiexchangeid(from.uiexchangeid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Item_CS_EquipExchange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item_CS_EquipExchange::CopyFrom(const Item_CS_EquipExchange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item_CS_EquipExchange::IsInitialized() const {

  return true;
}

void Item_CS_EquipExchange::Swap(Item_CS_EquipExchange* other) {
  if (other != this) {
    std::swap(uiexchangeid_, other->uiexchangeid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Item_CS_EquipExchange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Item_CS_EquipExchange_descriptor_;
  metadata.reflection = Item_CS_EquipExchange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Item_SC_EquipExchange::kResultFieldNumber;
#endif  // !_MSC_VER

Item_SC_EquipExchange::Item_SC_EquipExchange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Item_SC_EquipExchange::InitAsDefaultInstance() {
}

Item_SC_EquipExchange::Item_SC_EquipExchange(const Item_SC_EquipExchange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Item_SC_EquipExchange::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Item_SC_EquipExchange::~Item_SC_EquipExchange() {
  SharedDtor();
}

void Item_SC_EquipExchange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Item_SC_EquipExchange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Item_SC_EquipExchange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_SC_EquipExchange_descriptor_;
}

const Item_SC_EquipExchange& Item_SC_EquipExchange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

Item_SC_EquipExchange* Item_SC_EquipExchange::default_instance_ = NULL;

Item_SC_EquipExchange* Item_SC_EquipExchange::New() const {
  return new Item_SC_EquipExchange;
}

void Item_SC_EquipExchange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Item_SC_EquipExchange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Item_SC_EquipExchange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Item_SC_EquipExchange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Item_SC_EquipExchange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item_SC_EquipExchange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Item_SC_EquipExchange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Item_SC_EquipExchange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Item_SC_EquipExchange::MergeFrom(const Item_SC_EquipExchange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Item_SC_EquipExchange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item_SC_EquipExchange::CopyFrom(const Item_SC_EquipExchange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item_SC_EquipExchange::IsInitialized() const {

  return true;
}

void Item_SC_EquipExchange::Swap(Item_SC_EquipExchange* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Item_SC_EquipExchange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Item_SC_EquipExchange_descriptor_;
  metadata.reflection = Item_SC_EquipExchange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Item_CS_Compose::kUiTableIdFieldNumber;
const int Item_CS_Compose::kUiNumFieldNumber;
const int Item_CS_Compose::kUiMaterialUUIDFieldNumber;
#endif  // !_MSC_VER

Item_CS_Compose::Item_CS_Compose()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Item_CS_Compose::InitAsDefaultInstance() {
}

Item_CS_Compose::Item_CS_Compose(const Item_CS_Compose& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Item_CS_Compose::SharedCtor() {
  _cached_size_ = 0;
  uitableid_ = 0u;
  uinum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Item_CS_Compose::~Item_CS_Compose() {
  SharedDtor();
}

void Item_CS_Compose::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Item_CS_Compose::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Item_CS_Compose::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_CS_Compose_descriptor_;
}

const Item_CS_Compose& Item_CS_Compose::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

Item_CS_Compose* Item_CS_Compose::default_instance_ = NULL;

Item_CS_Compose* Item_CS_Compose::New() const {
  return new Item_CS_Compose;
}

void Item_CS_Compose::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uitableid_ = 0u;
    uinum_ = 0u;
  }
  uimaterialuuid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Item_CS_Compose::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uiTableId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uitableid_)));
          set_has_uitableid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uiNum;
        break;
      }

      // optional uint32 uiNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uinum_)));
          set_has_uinum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uiMaterialUUID;
        break;
      }

      // repeated uint64 uiMaterialUUID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiMaterialUUID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 24, input, this->mutable_uimaterialuuid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_uimaterialuuid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uiMaterialUUID;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Item_CS_Compose::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uiTableId = 1;
  if (has_uitableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uitableid(), output);
  }

  // optional uint32 uiNum = 2;
  if (has_uinum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uinum(), output);
  }

  // repeated uint64 uiMaterialUUID = 3;
  for (int i = 0; i < this->uimaterialuuid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      3, this->uimaterialuuid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Item_CS_Compose::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uiTableId = 1;
  if (has_uitableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uitableid(), target);
  }

  // optional uint32 uiNum = 2;
  if (has_uinum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uinum(), target);
  }

  // repeated uint64 uiMaterialUUID = 3;
  for (int i = 0; i < this->uimaterialuuid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(3, this->uimaterialuuid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Item_CS_Compose::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uiTableId = 1;
    if (has_uitableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uitableid());
    }

    // optional uint32 uiNum = 2;
    if (has_uinum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uinum());
    }

  }
  // repeated uint64 uiMaterialUUID = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->uimaterialuuid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->uimaterialuuid(i));
    }
    total_size += 1 * this->uimaterialuuid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item_CS_Compose::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Item_CS_Compose* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Item_CS_Compose*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Item_CS_Compose::MergeFrom(const Item_CS_Compose& from) {
  GOOGLE_CHECK_NE(&from, this);
  uimaterialuuid_.MergeFrom(from.uimaterialuuid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uitableid()) {
      set_uitableid(from.uitableid());
    }
    if (from.has_uinum()) {
      set_uinum(from.uinum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Item_CS_Compose::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item_CS_Compose::CopyFrom(const Item_CS_Compose& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item_CS_Compose::IsInitialized() const {

  return true;
}

void Item_CS_Compose::Swap(Item_CS_Compose* other) {
  if (other != this) {
    std::swap(uitableid_, other->uitableid_);
    std::swap(uinum_, other->uinum_);
    uimaterialuuid_.Swap(&other->uimaterialuuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Item_CS_Compose::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Item_CS_Compose_descriptor_;
  metadata.reflection = Item_CS_Compose_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Item_SC_Compose::kResultFieldNumber;
const int Item_SC_Compose::kNewitemFieldNumber;
#endif  // !_MSC_VER

Item_SC_Compose::Item_SC_Compose()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Item_SC_Compose::InitAsDefaultInstance() {
  newitem_ = const_cast< ::proto::message::IDNum*>(&::proto::message::IDNum::default_instance());
}

Item_SC_Compose::Item_SC_Compose(const Item_SC_Compose& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Item_SC_Compose::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  newitem_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Item_SC_Compose::~Item_SC_Compose() {
  SharedDtor();
}

void Item_SC_Compose::SharedDtor() {
  if (this != default_instance_) {
    delete newitem_;
  }
}

void Item_SC_Compose::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Item_SC_Compose::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_SC_Compose_descriptor_;
}

const Item_SC_Compose& Item_SC_Compose::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

Item_SC_Compose* Item_SC_Compose::default_instance_ = NULL;

Item_SC_Compose* Item_SC_Compose::New() const {
  return new Item_SC_Compose;
}

void Item_SC_Compose::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_newitem()) {
      if (newitem_ != NULL) newitem_->::proto::message::IDNum::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Item_SC_Compose::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_newitem;
        break;
      }

      // optional .proto.message.IDNum newitem = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_newitem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_newitem()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Item_SC_Compose::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .proto.message.IDNum newitem = 2;
  if (has_newitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->newitem(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Item_SC_Compose::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .proto.message.IDNum newitem = 2;
  if (has_newitem()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->newitem(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Item_SC_Compose::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .proto.message.IDNum newitem = 2;
    if (has_newitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->newitem());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item_SC_Compose::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Item_SC_Compose* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Item_SC_Compose*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Item_SC_Compose::MergeFrom(const Item_SC_Compose& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_newitem()) {
      mutable_newitem()->::proto::message::IDNum::MergeFrom(from.newitem());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Item_SC_Compose::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item_SC_Compose::CopyFrom(const Item_SC_Compose& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item_SC_Compose::IsInitialized() const {

  return true;
}

void Item_SC_Compose::Swap(Item_SC_Compose* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(newitem_, other->newitem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Item_SC_Compose::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Item_SC_Compose_descriptor_;
  metadata.reflection = Item_SC_Compose_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Item_CS_Compose_Gem::kUiEquipPosFieldNumber;
const int Item_CS_Compose_Gem::kUiInlayPosFieldNumber;
const int Item_CS_Compose_Gem::kVecMaterialUUIDFieldNumber;
const int Item_CS_Compose_Gem::kVecMaterialNumFieldNumber;
#endif  // !_MSC_VER

Item_CS_Compose_Gem::Item_CS_Compose_Gem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Item_CS_Compose_Gem::InitAsDefaultInstance() {
}

Item_CS_Compose_Gem::Item_CS_Compose_Gem(const Item_CS_Compose_Gem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Item_CS_Compose_Gem::SharedCtor() {
  _cached_size_ = 0;
  uiequippos_ = 0u;
  uiinlaypos_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Item_CS_Compose_Gem::~Item_CS_Compose_Gem() {
  SharedDtor();
}

void Item_CS_Compose_Gem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Item_CS_Compose_Gem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Item_CS_Compose_Gem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_CS_Compose_Gem_descriptor_;
}

const Item_CS_Compose_Gem& Item_CS_Compose_Gem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

Item_CS_Compose_Gem* Item_CS_Compose_Gem::default_instance_ = NULL;

Item_CS_Compose_Gem* Item_CS_Compose_Gem::New() const {
  return new Item_CS_Compose_Gem;
}

void Item_CS_Compose_Gem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uiequippos_ = 0u;
    uiinlaypos_ = 0u;
  }
  vecmaterialuuid_.Clear();
  vecmaterialnum_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Item_CS_Compose_Gem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uiEquipPos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiequippos_)));
          set_has_uiequippos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uiInlayPos;
        break;
      }

      // optional uint32 uiInlayPos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiInlayPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiinlaypos_)));
          set_has_uiinlaypos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_vecMaterialUUID;
        break;
      }

      // repeated uint64 vecMaterialUUID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vecMaterialUUID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 24, input, this->mutable_vecmaterialuuid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_vecmaterialuuid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_vecMaterialUUID;
        if (input->ExpectTag(32)) goto parse_vecMaterialNum;
        break;
      }

      // repeated uint32 vecMaterialNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vecMaterialNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_vecmaterialnum())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_vecmaterialnum())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_vecMaterialNum;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Item_CS_Compose_Gem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uiEquipPos = 1;
  if (has_uiequippos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uiequippos(), output);
  }

  // optional uint32 uiInlayPos = 2;
  if (has_uiinlaypos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uiinlaypos(), output);
  }

  // repeated uint64 vecMaterialUUID = 3;
  for (int i = 0; i < this->vecmaterialuuid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      3, this->vecmaterialuuid(i), output);
  }

  // repeated uint32 vecMaterialNum = 4;
  for (int i = 0; i < this->vecmaterialnum_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->vecmaterialnum(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Item_CS_Compose_Gem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uiEquipPos = 1;
  if (has_uiequippos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uiequippos(), target);
  }

  // optional uint32 uiInlayPos = 2;
  if (has_uiinlaypos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uiinlaypos(), target);
  }

  // repeated uint64 vecMaterialUUID = 3;
  for (int i = 0; i < this->vecmaterialuuid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(3, this->vecmaterialuuid(i), target);
  }

  // repeated uint32 vecMaterialNum = 4;
  for (int i = 0; i < this->vecmaterialnum_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->vecmaterialnum(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Item_CS_Compose_Gem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uiEquipPos = 1;
    if (has_uiequippos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiequippos());
    }

    // optional uint32 uiInlayPos = 2;
    if (has_uiinlaypos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiinlaypos());
    }

  }
  // repeated uint64 vecMaterialUUID = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->vecmaterialuuid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->vecmaterialuuid(i));
    }
    total_size += 1 * this->vecmaterialuuid_size() + data_size;
  }

  // repeated uint32 vecMaterialNum = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->vecmaterialnum_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->vecmaterialnum(i));
    }
    total_size += 1 * this->vecmaterialnum_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item_CS_Compose_Gem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Item_CS_Compose_Gem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Item_CS_Compose_Gem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Item_CS_Compose_Gem::MergeFrom(const Item_CS_Compose_Gem& from) {
  GOOGLE_CHECK_NE(&from, this);
  vecmaterialuuid_.MergeFrom(from.vecmaterialuuid_);
  vecmaterialnum_.MergeFrom(from.vecmaterialnum_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uiequippos()) {
      set_uiequippos(from.uiequippos());
    }
    if (from.has_uiinlaypos()) {
      set_uiinlaypos(from.uiinlaypos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Item_CS_Compose_Gem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item_CS_Compose_Gem::CopyFrom(const Item_CS_Compose_Gem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item_CS_Compose_Gem::IsInitialized() const {

  return true;
}

void Item_CS_Compose_Gem::Swap(Item_CS_Compose_Gem* other) {
  if (other != this) {
    std::swap(uiequippos_, other->uiequippos_);
    std::swap(uiinlaypos_, other->uiinlaypos_);
    vecmaterialuuid_.Swap(&other->vecmaterialuuid_);
    vecmaterialnum_.Swap(&other->vecmaterialnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Item_CS_Compose_Gem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Item_CS_Compose_Gem_descriptor_;
  metadata.reflection = Item_CS_Compose_Gem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Item_SC_Compose_Gem::kResultFieldNumber;
const int Item_SC_Compose_Gem::kUiEquipPosFieldNumber;
const int Item_SC_Compose_Gem::kUiInlayPosFieldNumber;
const int Item_SC_Compose_Gem::kUiNewGemIdFieldNumber;
#endif  // !_MSC_VER

Item_SC_Compose_Gem::Item_SC_Compose_Gem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Item_SC_Compose_Gem::InitAsDefaultInstance() {
}

Item_SC_Compose_Gem::Item_SC_Compose_Gem(const Item_SC_Compose_Gem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Item_SC_Compose_Gem::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  uiequippos_ = 0u;
  uiinlaypos_ = 0u;
  uinewgemid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Item_SC_Compose_Gem::~Item_SC_Compose_Gem() {
  SharedDtor();
}

void Item_SC_Compose_Gem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Item_SC_Compose_Gem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Item_SC_Compose_Gem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_SC_Compose_Gem_descriptor_;
}

const Item_SC_Compose_Gem& Item_SC_Compose_Gem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

Item_SC_Compose_Gem* Item_SC_Compose_Gem::default_instance_ = NULL;

Item_SC_Compose_Gem* Item_SC_Compose_Gem::New() const {
  return new Item_SC_Compose_Gem;
}

void Item_SC_Compose_Gem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    uiequippos_ = 0u;
    uiinlaypos_ = 0u;
    uinewgemid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Item_SC_Compose_Gem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uiEquipPos;
        break;
      }

      // optional uint32 uiEquipPos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiEquipPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiequippos_)));
          set_has_uiequippos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uiInlayPos;
        break;
      }

      // optional uint32 uiInlayPos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiInlayPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiinlaypos_)));
          set_has_uiinlaypos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_uiNewGemId;
        break;
      }

      // optional uint32 uiNewGemId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiNewGemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uinewgemid_)));
          set_has_uinewgemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Item_SC_Compose_Gem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional uint32 uiEquipPos = 2;
  if (has_uiequippos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uiequippos(), output);
  }

  // optional uint32 uiInlayPos = 3;
  if (has_uiinlaypos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->uiinlaypos(), output);
  }

  // optional uint32 uiNewGemId = 4;
  if (has_uinewgemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->uinewgemid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Item_SC_Compose_Gem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional uint32 uiEquipPos = 2;
  if (has_uiequippos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uiequippos(), target);
  }

  // optional uint32 uiInlayPos = 3;
  if (has_uiinlaypos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->uiinlaypos(), target);
  }

  // optional uint32 uiNewGemId = 4;
  if (has_uinewgemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->uinewgemid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Item_SC_Compose_Gem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional uint32 uiEquipPos = 2;
    if (has_uiequippos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiequippos());
    }

    // optional uint32 uiInlayPos = 3;
    if (has_uiinlaypos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiinlaypos());
    }

    // optional uint32 uiNewGemId = 4;
    if (has_uinewgemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uinewgemid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item_SC_Compose_Gem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Item_SC_Compose_Gem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Item_SC_Compose_Gem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Item_SC_Compose_Gem::MergeFrom(const Item_SC_Compose_Gem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_uiequippos()) {
      set_uiequippos(from.uiequippos());
    }
    if (from.has_uiinlaypos()) {
      set_uiinlaypos(from.uiinlaypos());
    }
    if (from.has_uinewgemid()) {
      set_uinewgemid(from.uinewgemid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Item_SC_Compose_Gem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item_SC_Compose_Gem::CopyFrom(const Item_SC_Compose_Gem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item_SC_Compose_Gem::IsInitialized() const {

  return true;
}

void Item_SC_Compose_Gem::Swap(Item_SC_Compose_Gem* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(uiequippos_, other->uiequippos_);
    std::swap(uiinlaypos_, other->uiinlaypos_);
    std::swap(uinewgemid_, other->uinewgemid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Item_SC_Compose_Gem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Item_SC_Compose_Gem_descriptor_;
  metadata.reflection = Item_SC_Compose_Gem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Item_CS_EquipOrdRepair::kUuidFieldNumber;
#endif  // !_MSC_VER

Item_CS_EquipOrdRepair::Item_CS_EquipOrdRepair()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Item_CS_EquipOrdRepair::InitAsDefaultInstance() {
}

Item_CS_EquipOrdRepair::Item_CS_EquipOrdRepair(const Item_CS_EquipOrdRepair& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Item_CS_EquipOrdRepair::SharedCtor() {
  _cached_size_ = 0;
  uuid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Item_CS_EquipOrdRepair::~Item_CS_EquipOrdRepair() {
  SharedDtor();
}

void Item_CS_EquipOrdRepair::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Item_CS_EquipOrdRepair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Item_CS_EquipOrdRepair::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_CS_EquipOrdRepair_descriptor_;
}

const Item_CS_EquipOrdRepair& Item_CS_EquipOrdRepair::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

Item_CS_EquipOrdRepair* Item_CS_EquipOrdRepair::default_instance_ = NULL;

Item_CS_EquipOrdRepair* Item_CS_EquipOrdRepair::New() const {
  return new Item_CS_EquipOrdRepair;
}

void Item_CS_EquipOrdRepair::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uuid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Item_CS_EquipOrdRepair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Item_CS_EquipOrdRepair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Item_CS_EquipOrdRepair::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 uuid = 1;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Item_CS_EquipOrdRepair::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 uuid = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item_CS_EquipOrdRepair::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Item_CS_EquipOrdRepair* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Item_CS_EquipOrdRepair*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Item_CS_EquipOrdRepair::MergeFrom(const Item_CS_EquipOrdRepair& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Item_CS_EquipOrdRepair::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item_CS_EquipOrdRepair::CopyFrom(const Item_CS_EquipOrdRepair& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item_CS_EquipOrdRepair::IsInitialized() const {

  return true;
}

void Item_CS_EquipOrdRepair::Swap(Item_CS_EquipOrdRepair* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Item_CS_EquipOrdRepair::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Item_CS_EquipOrdRepair_descriptor_;
  metadata.reflection = Item_CS_EquipOrdRepair_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Item_SC_EquipOrdRepair::kResultFieldNumber;
const int Item_SC_EquipOrdRepair::kEquipFieldNumber;
#endif  // !_MSC_VER

Item_SC_EquipOrdRepair::Item_SC_EquipOrdRepair()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Item_SC_EquipOrdRepair::InitAsDefaultInstance() {
  equip_ = const_cast< ::proto::message::Equip*>(&::proto::message::Equip::default_instance());
}

Item_SC_EquipOrdRepair::Item_SC_EquipOrdRepair(const Item_SC_EquipOrdRepair& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Item_SC_EquipOrdRepair::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  equip_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Item_SC_EquipOrdRepair::~Item_SC_EquipOrdRepair() {
  SharedDtor();
}

void Item_SC_EquipOrdRepair::SharedDtor() {
  if (this != default_instance_) {
    delete equip_;
  }
}

void Item_SC_EquipOrdRepair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Item_SC_EquipOrdRepair::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_SC_EquipOrdRepair_descriptor_;
}

const Item_SC_EquipOrdRepair& Item_SC_EquipOrdRepair::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

Item_SC_EquipOrdRepair* Item_SC_EquipOrdRepair::default_instance_ = NULL;

Item_SC_EquipOrdRepair* Item_SC_EquipOrdRepair::New() const {
  return new Item_SC_EquipOrdRepair;
}

void Item_SC_EquipOrdRepair::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_equip()) {
      if (equip_ != NULL) equip_->::proto::message::Equip::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Item_SC_EquipOrdRepair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_equip;
        break;
      }

      // optional .proto.message.Equip equip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Item_SC_EquipOrdRepair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .proto.message.Equip equip = 2;
  if (has_equip()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->equip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Item_SC_EquipOrdRepair::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .proto.message.Equip equip = 2;
  if (has_equip()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->equip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Item_SC_EquipOrdRepair::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .proto.message.Equip equip = 2;
    if (has_equip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equip());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item_SC_EquipOrdRepair::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Item_SC_EquipOrdRepair* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Item_SC_EquipOrdRepair*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Item_SC_EquipOrdRepair::MergeFrom(const Item_SC_EquipOrdRepair& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_equip()) {
      mutable_equip()->::proto::message::Equip::MergeFrom(from.equip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Item_SC_EquipOrdRepair::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item_SC_EquipOrdRepair::CopyFrom(const Item_SC_EquipOrdRepair& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item_SC_EquipOrdRepair::IsInitialized() const {

  return true;
}

void Item_SC_EquipOrdRepair::Swap(Item_SC_EquipOrdRepair* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(equip_, other->equip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Item_SC_EquipOrdRepair::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Item_SC_EquipOrdRepair_descriptor_;
  metadata.reflection = Item_SC_EquipOrdRepair_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Item_CS_EquipSpeRepair::kUuidFieldNumber;
#endif  // !_MSC_VER

Item_CS_EquipSpeRepair::Item_CS_EquipSpeRepair()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Item_CS_EquipSpeRepair::InitAsDefaultInstance() {
}

Item_CS_EquipSpeRepair::Item_CS_EquipSpeRepair(const Item_CS_EquipSpeRepair& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Item_CS_EquipSpeRepair::SharedCtor() {
  _cached_size_ = 0;
  uuid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Item_CS_EquipSpeRepair::~Item_CS_EquipSpeRepair() {
  SharedDtor();
}

void Item_CS_EquipSpeRepair::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Item_CS_EquipSpeRepair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Item_CS_EquipSpeRepair::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_CS_EquipSpeRepair_descriptor_;
}

const Item_CS_EquipSpeRepair& Item_CS_EquipSpeRepair::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

Item_CS_EquipSpeRepair* Item_CS_EquipSpeRepair::default_instance_ = NULL;

Item_CS_EquipSpeRepair* Item_CS_EquipSpeRepair::New() const {
  return new Item_CS_EquipSpeRepair;
}

void Item_CS_EquipSpeRepair::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uuid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Item_CS_EquipSpeRepair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Item_CS_EquipSpeRepair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Item_CS_EquipSpeRepair::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 uuid = 1;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Item_CS_EquipSpeRepair::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 uuid = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item_CS_EquipSpeRepair::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Item_CS_EquipSpeRepair* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Item_CS_EquipSpeRepair*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Item_CS_EquipSpeRepair::MergeFrom(const Item_CS_EquipSpeRepair& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Item_CS_EquipSpeRepair::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item_CS_EquipSpeRepair::CopyFrom(const Item_CS_EquipSpeRepair& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item_CS_EquipSpeRepair::IsInitialized() const {

  return true;
}

void Item_CS_EquipSpeRepair::Swap(Item_CS_EquipSpeRepair* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Item_CS_EquipSpeRepair::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Item_CS_EquipSpeRepair_descriptor_;
  metadata.reflection = Item_CS_EquipSpeRepair_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Item_SC_EquipSpeRepair::kResultFieldNumber;
const int Item_SC_EquipSpeRepair::kEquipFieldNumber;
#endif  // !_MSC_VER

Item_SC_EquipSpeRepair::Item_SC_EquipSpeRepair()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Item_SC_EquipSpeRepair::InitAsDefaultInstance() {
  equip_ = const_cast< ::proto::message::Equip*>(&::proto::message::Equip::default_instance());
}

Item_SC_EquipSpeRepair::Item_SC_EquipSpeRepair(const Item_SC_EquipSpeRepair& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Item_SC_EquipSpeRepair::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  equip_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Item_SC_EquipSpeRepair::~Item_SC_EquipSpeRepair() {
  SharedDtor();
}

void Item_SC_EquipSpeRepair::SharedDtor() {
  if (this != default_instance_) {
    delete equip_;
  }
}

void Item_SC_EquipSpeRepair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Item_SC_EquipSpeRepair::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_SC_EquipSpeRepair_descriptor_;
}

const Item_SC_EquipSpeRepair& Item_SC_EquipSpeRepair::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

Item_SC_EquipSpeRepair* Item_SC_EquipSpeRepair::default_instance_ = NULL;

Item_SC_EquipSpeRepair* Item_SC_EquipSpeRepair::New() const {
  return new Item_SC_EquipSpeRepair;
}

void Item_SC_EquipSpeRepair::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_equip()) {
      if (equip_ != NULL) equip_->::proto::message::Equip::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Item_SC_EquipSpeRepair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_equip;
        break;
      }

      // optional .proto.message.Equip equip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Item_SC_EquipSpeRepair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .proto.message.Equip equip = 2;
  if (has_equip()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->equip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Item_SC_EquipSpeRepair::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .proto.message.Equip equip = 2;
  if (has_equip()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->equip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Item_SC_EquipSpeRepair::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .proto.message.Equip equip = 2;
    if (has_equip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equip());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item_SC_EquipSpeRepair::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Item_SC_EquipSpeRepair* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Item_SC_EquipSpeRepair*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Item_SC_EquipSpeRepair::MergeFrom(const Item_SC_EquipSpeRepair& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_equip()) {
      mutable_equip()->::proto::message::Equip::MergeFrom(from.equip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Item_SC_EquipSpeRepair::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item_SC_EquipSpeRepair::CopyFrom(const Item_SC_EquipSpeRepair& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item_SC_EquipSpeRepair::IsInitialized() const {

  return true;
}

void Item_SC_EquipSpeRepair::Swap(Item_SC_EquipSpeRepair* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(equip_, other->equip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Item_SC_EquipSpeRepair::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Item_SC_EquipSpeRepair_descriptor_;
  metadata.reflection = Item_SC_EquipSpeRepair_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Item_CS_JewelryExchange::kProIdFieldNumber;
#endif  // !_MSC_VER

Item_CS_JewelryExchange::Item_CS_JewelryExchange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Item_CS_JewelryExchange::InitAsDefaultInstance() {
}

Item_CS_JewelryExchange::Item_CS_JewelryExchange(const Item_CS_JewelryExchange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Item_CS_JewelryExchange::SharedCtor() {
  _cached_size_ = 0;
  pro_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Item_CS_JewelryExchange::~Item_CS_JewelryExchange() {
  SharedDtor();
}

void Item_CS_JewelryExchange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Item_CS_JewelryExchange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Item_CS_JewelryExchange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_CS_JewelryExchange_descriptor_;
}

const Item_CS_JewelryExchange& Item_CS_JewelryExchange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

Item_CS_JewelryExchange* Item_CS_JewelryExchange::default_instance_ = NULL;

Item_CS_JewelryExchange* Item_CS_JewelryExchange::New() const {
  return new Item_CS_JewelryExchange;
}

void Item_CS_JewelryExchange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pro_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Item_CS_JewelryExchange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 pro_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pro_id_)));
          set_has_pro_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Item_CS_JewelryExchange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 pro_id = 1;
  if (has_pro_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pro_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Item_CS_JewelryExchange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 pro_id = 1;
  if (has_pro_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pro_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Item_CS_JewelryExchange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 pro_id = 1;
    if (has_pro_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pro_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item_CS_JewelryExchange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Item_CS_JewelryExchange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Item_CS_JewelryExchange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Item_CS_JewelryExchange::MergeFrom(const Item_CS_JewelryExchange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pro_id()) {
      set_pro_id(from.pro_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Item_CS_JewelryExchange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item_CS_JewelryExchange::CopyFrom(const Item_CS_JewelryExchange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item_CS_JewelryExchange::IsInitialized() const {

  return true;
}

void Item_CS_JewelryExchange::Swap(Item_CS_JewelryExchange* other) {
  if (other != this) {
    std::swap(pro_id_, other->pro_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Item_CS_JewelryExchange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Item_CS_JewelryExchange_descriptor_;
  metadata.reflection = Item_CS_JewelryExchange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Item_SC_JewelryExchange::kResultFieldNumber;
const int Item_SC_JewelryExchange::kProIdFieldNumber;
#endif  // !_MSC_VER

Item_SC_JewelryExchange::Item_SC_JewelryExchange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Item_SC_JewelryExchange::InitAsDefaultInstance() {
}

Item_SC_JewelryExchange::Item_SC_JewelryExchange(const Item_SC_JewelryExchange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Item_SC_JewelryExchange::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  pro_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Item_SC_JewelryExchange::~Item_SC_JewelryExchange() {
  SharedDtor();
}

void Item_SC_JewelryExchange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Item_SC_JewelryExchange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Item_SC_JewelryExchange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_SC_JewelryExchange_descriptor_;
}

const Item_SC_JewelryExchange& Item_SC_JewelryExchange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

Item_SC_JewelryExchange* Item_SC_JewelryExchange::default_instance_ = NULL;

Item_SC_JewelryExchange* Item_SC_JewelryExchange::New() const {
  return new Item_SC_JewelryExchange;
}

void Item_SC_JewelryExchange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    pro_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Item_SC_JewelryExchange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pro_id;
        break;
      }

      // optional int32 pro_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pro_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pro_id_)));
          set_has_pro_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Item_SC_JewelryExchange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 pro_id = 2;
  if (has_pro_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pro_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Item_SC_JewelryExchange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 pro_id = 2;
  if (has_pro_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pro_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Item_SC_JewelryExchange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 pro_id = 2;
    if (has_pro_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pro_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item_SC_JewelryExchange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Item_SC_JewelryExchange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Item_SC_JewelryExchange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Item_SC_JewelryExchange::MergeFrom(const Item_SC_JewelryExchange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_pro_id()) {
      set_pro_id(from.pro_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Item_SC_JewelryExchange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item_SC_JewelryExchange::CopyFrom(const Item_SC_JewelryExchange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item_SC_JewelryExchange::IsInitialized() const {

  return true;
}

void Item_SC_JewelryExchange::Swap(Item_SC_JewelryExchange* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(pro_id_, other->pro_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Item_SC_JewelryExchange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Item_SC_JewelryExchange_descriptor_;
  metadata.reflection = Item_SC_JewelryExchange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Item_CS_IntegralExchange::kProIdFieldNumber;
const int Item_CS_IntegralExchange::kNumFieldNumber;
#endif  // !_MSC_VER

Item_CS_IntegralExchange::Item_CS_IntegralExchange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Item_CS_IntegralExchange::InitAsDefaultInstance() {
}

Item_CS_IntegralExchange::Item_CS_IntegralExchange(const Item_CS_IntegralExchange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Item_CS_IntegralExchange::SharedCtor() {
  _cached_size_ = 0;
  pro_id_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Item_CS_IntegralExchange::~Item_CS_IntegralExchange() {
  SharedDtor();
}

void Item_CS_IntegralExchange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Item_CS_IntegralExchange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Item_CS_IntegralExchange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_CS_IntegralExchange_descriptor_;
}

const Item_CS_IntegralExchange& Item_CS_IntegralExchange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

Item_CS_IntegralExchange* Item_CS_IntegralExchange::default_instance_ = NULL;

Item_CS_IntegralExchange* Item_CS_IntegralExchange::New() const {
  return new Item_CS_IntegralExchange;
}

void Item_CS_IntegralExchange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pro_id_ = 0;
    num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Item_CS_IntegralExchange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 pro_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pro_id_)));
          set_has_pro_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional int32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Item_CS_IntegralExchange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 pro_id = 1;
  if (has_pro_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pro_id(), output);
  }

  // optional int32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Item_CS_IntegralExchange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 pro_id = 1;
  if (has_pro_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pro_id(), target);
  }

  // optional int32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Item_CS_IntegralExchange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 pro_id = 1;
    if (has_pro_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pro_id());
    }

    // optional int32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item_CS_IntegralExchange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Item_CS_IntegralExchange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Item_CS_IntegralExchange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Item_CS_IntegralExchange::MergeFrom(const Item_CS_IntegralExchange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pro_id()) {
      set_pro_id(from.pro_id());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Item_CS_IntegralExchange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item_CS_IntegralExchange::CopyFrom(const Item_CS_IntegralExchange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item_CS_IntegralExchange::IsInitialized() const {

  return true;
}

void Item_CS_IntegralExchange::Swap(Item_CS_IntegralExchange* other) {
  if (other != this) {
    std::swap(pro_id_, other->pro_id_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Item_CS_IntegralExchange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Item_CS_IntegralExchange_descriptor_;
  metadata.reflection = Item_CS_IntegralExchange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Item_SC_IntegralExchange::kResultFieldNumber;
const int Item_SC_IntegralExchange::kProIdFieldNumber;
const int Item_SC_IntegralExchange::kBuyTimesFieldNumber;
#endif  // !_MSC_VER

Item_SC_IntegralExchange::Item_SC_IntegralExchange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Item_SC_IntegralExchange::InitAsDefaultInstance() {
}

Item_SC_IntegralExchange::Item_SC_IntegralExchange(const Item_SC_IntegralExchange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Item_SC_IntegralExchange::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  pro_id_ = 0;
  buy_times_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Item_SC_IntegralExchange::~Item_SC_IntegralExchange() {
  SharedDtor();
}

void Item_SC_IntegralExchange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Item_SC_IntegralExchange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Item_SC_IntegralExchange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_SC_IntegralExchange_descriptor_;
}

const Item_SC_IntegralExchange& Item_SC_IntegralExchange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

Item_SC_IntegralExchange* Item_SC_IntegralExchange::default_instance_ = NULL;

Item_SC_IntegralExchange* Item_SC_IntegralExchange::New() const {
  return new Item_SC_IntegralExchange;
}

void Item_SC_IntegralExchange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    pro_id_ = 0;
    buy_times_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Item_SC_IntegralExchange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pro_id;
        break;
      }

      // optional int32 pro_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pro_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pro_id_)));
          set_has_pro_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_buy_times;
        break;
      }

      // optional int32 buy_times = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buy_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buy_times_)));
          set_has_buy_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Item_SC_IntegralExchange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 pro_id = 2;
  if (has_pro_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pro_id(), output);
  }

  // optional int32 buy_times = 3;
  if (has_buy_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->buy_times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Item_SC_IntegralExchange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 pro_id = 2;
  if (has_pro_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pro_id(), target);
  }

  // optional int32 buy_times = 3;
  if (has_buy_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->buy_times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Item_SC_IntegralExchange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 pro_id = 2;
    if (has_pro_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pro_id());
    }

    // optional int32 buy_times = 3;
    if (has_buy_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buy_times());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item_SC_IntegralExchange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Item_SC_IntegralExchange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Item_SC_IntegralExchange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Item_SC_IntegralExchange::MergeFrom(const Item_SC_IntegralExchange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_pro_id()) {
      set_pro_id(from.pro_id());
    }
    if (from.has_buy_times()) {
      set_buy_times(from.buy_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Item_SC_IntegralExchange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item_SC_IntegralExchange::CopyFrom(const Item_SC_IntegralExchange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item_SC_IntegralExchange::IsInitialized() const {

  return true;
}

void Item_SC_IntegralExchange::Swap(Item_SC_IntegralExchange* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(pro_id_, other->pro_id_);
    std::swap(buy_times_, other->buy_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Item_SC_IntegralExchange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Item_SC_IntegralExchange_descriptor_;
  metadata.reflection = Item_SC_IntegralExchange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Item_CS_MoneyExchange::kProIdFieldNumber;
const int Item_CS_MoneyExchange::kNumFieldNumber;
#endif  // !_MSC_VER

Item_CS_MoneyExchange::Item_CS_MoneyExchange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Item_CS_MoneyExchange::InitAsDefaultInstance() {
}

Item_CS_MoneyExchange::Item_CS_MoneyExchange(const Item_CS_MoneyExchange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Item_CS_MoneyExchange::SharedCtor() {
  _cached_size_ = 0;
  pro_id_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Item_CS_MoneyExchange::~Item_CS_MoneyExchange() {
  SharedDtor();
}

void Item_CS_MoneyExchange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Item_CS_MoneyExchange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Item_CS_MoneyExchange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_CS_MoneyExchange_descriptor_;
}

const Item_CS_MoneyExchange& Item_CS_MoneyExchange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

Item_CS_MoneyExchange* Item_CS_MoneyExchange::default_instance_ = NULL;

Item_CS_MoneyExchange* Item_CS_MoneyExchange::New() const {
  return new Item_CS_MoneyExchange;
}

void Item_CS_MoneyExchange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pro_id_ = 0;
    num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Item_CS_MoneyExchange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 pro_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pro_id_)));
          set_has_pro_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional int32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Item_CS_MoneyExchange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 pro_id = 1;
  if (has_pro_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pro_id(), output);
  }

  // optional int32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Item_CS_MoneyExchange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 pro_id = 1;
  if (has_pro_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pro_id(), target);
  }

  // optional int32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Item_CS_MoneyExchange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 pro_id = 1;
    if (has_pro_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pro_id());
    }

    // optional int32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item_CS_MoneyExchange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Item_CS_MoneyExchange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Item_CS_MoneyExchange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Item_CS_MoneyExchange::MergeFrom(const Item_CS_MoneyExchange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pro_id()) {
      set_pro_id(from.pro_id());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Item_CS_MoneyExchange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item_CS_MoneyExchange::CopyFrom(const Item_CS_MoneyExchange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item_CS_MoneyExchange::IsInitialized() const {

  return true;
}

void Item_CS_MoneyExchange::Swap(Item_CS_MoneyExchange* other) {
  if (other != this) {
    std::swap(pro_id_, other->pro_id_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Item_CS_MoneyExchange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Item_CS_MoneyExchange_descriptor_;
  metadata.reflection = Item_CS_MoneyExchange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Item_SC_MoneyExchange::kResultFieldNumber;
#endif  // !_MSC_VER

Item_SC_MoneyExchange::Item_SC_MoneyExchange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Item_SC_MoneyExchange::InitAsDefaultInstance() {
}

Item_SC_MoneyExchange::Item_SC_MoneyExchange(const Item_SC_MoneyExchange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Item_SC_MoneyExchange::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Item_SC_MoneyExchange::~Item_SC_MoneyExchange() {
  SharedDtor();
}

void Item_SC_MoneyExchange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Item_SC_MoneyExchange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Item_SC_MoneyExchange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_SC_MoneyExchange_descriptor_;
}

const Item_SC_MoneyExchange& Item_SC_MoneyExchange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

Item_SC_MoneyExchange* Item_SC_MoneyExchange::default_instance_ = NULL;

Item_SC_MoneyExchange* Item_SC_MoneyExchange::New() const {
  return new Item_SC_MoneyExchange;
}

void Item_SC_MoneyExchange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Item_SC_MoneyExchange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Item_SC_MoneyExchange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Item_SC_MoneyExchange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Item_SC_MoneyExchange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item_SC_MoneyExchange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Item_SC_MoneyExchange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Item_SC_MoneyExchange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Item_SC_MoneyExchange::MergeFrom(const Item_SC_MoneyExchange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Item_SC_MoneyExchange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item_SC_MoneyExchange::CopyFrom(const Item_SC_MoneyExchange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item_SC_MoneyExchange::IsInitialized() const {

  return true;
}

void Item_SC_MoneyExchange::Swap(Item_SC_MoneyExchange* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Item_SC_MoneyExchange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Item_SC_MoneyExchange_descriptor_;
  metadata.reflection = Item_SC_MoneyExchange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IntegralPrice::kProIdFieldNumber;
const int IntegralPrice::kItemIdFieldNumber;
const int IntegralPrice::kItemNumFieldNumber;
const int IntegralPrice::kBuyTimesFieldNumber;
#endif  // !_MSC_VER

IntegralPrice::IntegralPrice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IntegralPrice::InitAsDefaultInstance() {
}

IntegralPrice::IntegralPrice(const IntegralPrice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IntegralPrice::SharedCtor() {
  _cached_size_ = 0;
  pro_id_ = 0u;
  item_id_ = 0;
  item_num_ = 0;
  buy_times_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IntegralPrice::~IntegralPrice() {
  SharedDtor();
}

void IntegralPrice::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IntegralPrice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IntegralPrice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IntegralPrice_descriptor_;
}

const IntegralPrice& IntegralPrice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

IntegralPrice* IntegralPrice::default_instance_ = NULL;

IntegralPrice* IntegralPrice::New() const {
  return new IntegralPrice;
}

void IntegralPrice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pro_id_ = 0u;
    item_id_ = 0;
    item_num_ = 0;
    buy_times_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IntegralPrice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 pro_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pro_id_)));
          set_has_pro_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_id;
        break;
      }

      // optional int32 item_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item_num;
        break;
      }

      // optional int32 item_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_num_)));
          set_has_item_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_buy_times;
        break;
      }

      // optional int32 buy_times = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buy_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buy_times_)));
          set_has_buy_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IntegralPrice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 pro_id = 1;
  if (has_pro_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pro_id(), output);
  }

  // optional int32 item_id = 2;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->item_id(), output);
  }

  // optional int32 item_num = 3;
  if (has_item_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->item_num(), output);
  }

  // optional int32 buy_times = 4;
  if (has_buy_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->buy_times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IntegralPrice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 pro_id = 1;
  if (has_pro_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pro_id(), target);
  }

  // optional int32 item_id = 2;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->item_id(), target);
  }

  // optional int32 item_num = 3;
  if (has_item_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->item_num(), target);
  }

  // optional int32 buy_times = 4;
  if (has_buy_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->buy_times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IntegralPrice::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 pro_id = 1;
    if (has_pro_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pro_id());
    }

    // optional int32 item_id = 2;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_id());
    }

    // optional int32 item_num = 3;
    if (has_item_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_num());
    }

    // optional int32 buy_times = 4;
    if (has_buy_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buy_times());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IntegralPrice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IntegralPrice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IntegralPrice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IntegralPrice::MergeFrom(const IntegralPrice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pro_id()) {
      set_pro_id(from.pro_id());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_item_num()) {
      set_item_num(from.item_num());
    }
    if (from.has_buy_times()) {
      set_buy_times(from.buy_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IntegralPrice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntegralPrice::CopyFrom(const IntegralPrice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntegralPrice::IsInitialized() const {

  return true;
}

void IntegralPrice::Swap(IntegralPrice* other) {
  if (other != this) {
    std::swap(pro_id_, other->pro_id_);
    std::swap(item_id_, other->item_id_);
    std::swap(item_num_, other->item_num_);
    std::swap(buy_times_, other->buy_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IntegralPrice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IntegralPrice_descriptor_;
  metadata.reflection = IntegralPrice_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IntegralTimes::kProIdFieldNumber;
const int IntegralTimes::kBuyTimesFieldNumber;
#endif  // !_MSC_VER

IntegralTimes::IntegralTimes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IntegralTimes::InitAsDefaultInstance() {
}

IntegralTimes::IntegralTimes(const IntegralTimes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IntegralTimes::SharedCtor() {
  _cached_size_ = 0;
  pro_id_ = 0u;
  buy_times_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IntegralTimes::~IntegralTimes() {
  SharedDtor();
}

void IntegralTimes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IntegralTimes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IntegralTimes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IntegralTimes_descriptor_;
}

const IntegralTimes& IntegralTimes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

IntegralTimes* IntegralTimes::default_instance_ = NULL;

IntegralTimes* IntegralTimes::New() const {
  return new IntegralTimes;
}

void IntegralTimes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pro_id_ = 0u;
    buy_times_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IntegralTimes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 pro_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pro_id_)));
          set_has_pro_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_buy_times;
        break;
      }

      // optional int32 buy_times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buy_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buy_times_)));
          set_has_buy_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IntegralTimes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 pro_id = 1;
  if (has_pro_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pro_id(), output);
  }

  // optional int32 buy_times = 2;
  if (has_buy_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->buy_times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IntegralTimes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 pro_id = 1;
  if (has_pro_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pro_id(), target);
  }

  // optional int32 buy_times = 2;
  if (has_buy_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->buy_times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IntegralTimes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 pro_id = 1;
    if (has_pro_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pro_id());
    }

    // optional int32 buy_times = 2;
    if (has_buy_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buy_times());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IntegralTimes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IntegralTimes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IntegralTimes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IntegralTimes::MergeFrom(const IntegralTimes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pro_id()) {
      set_pro_id(from.pro_id());
    }
    if (from.has_buy_times()) {
      set_buy_times(from.buy_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IntegralTimes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntegralTimes::CopyFrom(const IntegralTimes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntegralTimes::IsInitialized() const {

  return true;
}

void IntegralTimes::Swap(IntegralTimes* other) {
  if (other != this) {
    std::swap(pro_id_, other->pro_id_);
    std::swap(buy_times_, other->buy_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IntegralTimes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IntegralTimes_descriptor_;
  metadata.reflection = IntegralTimes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Item_CS_GetIntegralPrice::Item_CS_GetIntegralPrice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Item_CS_GetIntegralPrice::InitAsDefaultInstance() {
}

Item_CS_GetIntegralPrice::Item_CS_GetIntegralPrice(const Item_CS_GetIntegralPrice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Item_CS_GetIntegralPrice::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Item_CS_GetIntegralPrice::~Item_CS_GetIntegralPrice() {
  SharedDtor();
}

void Item_CS_GetIntegralPrice::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Item_CS_GetIntegralPrice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Item_CS_GetIntegralPrice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_CS_GetIntegralPrice_descriptor_;
}

const Item_CS_GetIntegralPrice& Item_CS_GetIntegralPrice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

Item_CS_GetIntegralPrice* Item_CS_GetIntegralPrice::default_instance_ = NULL;

Item_CS_GetIntegralPrice* Item_CS_GetIntegralPrice::New() const {
  return new Item_CS_GetIntegralPrice;
}

void Item_CS_GetIntegralPrice::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Item_CS_GetIntegralPrice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Item_CS_GetIntegralPrice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Item_CS_GetIntegralPrice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Item_CS_GetIntegralPrice::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item_CS_GetIntegralPrice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Item_CS_GetIntegralPrice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Item_CS_GetIntegralPrice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Item_CS_GetIntegralPrice::MergeFrom(const Item_CS_GetIntegralPrice& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Item_CS_GetIntegralPrice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item_CS_GetIntegralPrice::CopyFrom(const Item_CS_GetIntegralPrice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item_CS_GetIntegralPrice::IsInitialized() const {

  return true;
}

void Item_CS_GetIntegralPrice::Swap(Item_CS_GetIntegralPrice* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Item_CS_GetIntegralPrice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Item_CS_GetIntegralPrice_descriptor_;
  metadata.reflection = Item_CS_GetIntegralPrice_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Item_SC_GetIntegralPrice::kIntegralPriceListFieldNumber;
#endif  // !_MSC_VER

Item_SC_GetIntegralPrice::Item_SC_GetIntegralPrice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Item_SC_GetIntegralPrice::InitAsDefaultInstance() {
}

Item_SC_GetIntegralPrice::Item_SC_GetIntegralPrice(const Item_SC_GetIntegralPrice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Item_SC_GetIntegralPrice::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Item_SC_GetIntegralPrice::~Item_SC_GetIntegralPrice() {
  SharedDtor();
}

void Item_SC_GetIntegralPrice::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Item_SC_GetIntegralPrice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Item_SC_GetIntegralPrice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_SC_GetIntegralPrice_descriptor_;
}

const Item_SC_GetIntegralPrice& Item_SC_GetIntegralPrice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

Item_SC_GetIntegralPrice* Item_SC_GetIntegralPrice::default_instance_ = NULL;

Item_SC_GetIntegralPrice* Item_SC_GetIntegralPrice::New() const {
  return new Item_SC_GetIntegralPrice;
}

void Item_SC_GetIntegralPrice::Clear() {
  integral_price_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Item_SC_GetIntegralPrice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.message.IntegralPrice integral_price_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_integral_price_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_integral_price_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_integral_price_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Item_SC_GetIntegralPrice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.message.IntegralPrice integral_price_list = 1;
  for (int i = 0; i < this->integral_price_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->integral_price_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Item_SC_GetIntegralPrice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.message.IntegralPrice integral_price_list = 1;
  for (int i = 0; i < this->integral_price_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->integral_price_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Item_SC_GetIntegralPrice::ByteSize() const {
  int total_size = 0;

  // repeated .proto.message.IntegralPrice integral_price_list = 1;
  total_size += 1 * this->integral_price_list_size();
  for (int i = 0; i < this->integral_price_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->integral_price_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item_SC_GetIntegralPrice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Item_SC_GetIntegralPrice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Item_SC_GetIntegralPrice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Item_SC_GetIntegralPrice::MergeFrom(const Item_SC_GetIntegralPrice& from) {
  GOOGLE_CHECK_NE(&from, this);
  integral_price_list_.MergeFrom(from.integral_price_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Item_SC_GetIntegralPrice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item_SC_GetIntegralPrice::CopyFrom(const Item_SC_GetIntegralPrice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item_SC_GetIntegralPrice::IsInitialized() const {

  return true;
}

void Item_SC_GetIntegralPrice::Swap(Item_SC_GetIntegralPrice* other) {
  if (other != this) {
    integral_price_list_.Swap(&other->integral_price_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Item_SC_GetIntegralPrice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Item_SC_GetIntegralPrice_descriptor_;
  metadata.reflection = Item_SC_GetIntegralPrice_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Item_CS_FastBuy::kUiTableIdFieldNumber;
const int Item_CS_FastBuy::kUiNumFieldNumber;
#endif  // !_MSC_VER

Item_CS_FastBuy::Item_CS_FastBuy()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Item_CS_FastBuy::InitAsDefaultInstance() {
}

Item_CS_FastBuy::Item_CS_FastBuy(const Item_CS_FastBuy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Item_CS_FastBuy::SharedCtor() {
  _cached_size_ = 0;
  uitableid_ = 0u;
  uinum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Item_CS_FastBuy::~Item_CS_FastBuy() {
  SharedDtor();
}

void Item_CS_FastBuy::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Item_CS_FastBuy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Item_CS_FastBuy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_CS_FastBuy_descriptor_;
}

const Item_CS_FastBuy& Item_CS_FastBuy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

Item_CS_FastBuy* Item_CS_FastBuy::default_instance_ = NULL;

Item_CS_FastBuy* Item_CS_FastBuy::New() const {
  return new Item_CS_FastBuy;
}

void Item_CS_FastBuy::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uitableid_ = 0u;
    uinum_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Item_CS_FastBuy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uiTableId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uitableid_)));
          set_has_uitableid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uiNum;
        break;
      }

      // required uint32 uiNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uinum_)));
          set_has_uinum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Item_CS_FastBuy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uiTableId = 1;
  if (has_uitableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uitableid(), output);
  }

  // required uint32 uiNum = 2;
  if (has_uinum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uinum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Item_CS_FastBuy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uiTableId = 1;
  if (has_uitableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uitableid(), target);
  }

  // required uint32 uiNum = 2;
  if (has_uinum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uinum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Item_CS_FastBuy::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uiTableId = 1;
    if (has_uitableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uitableid());
    }

    // required uint32 uiNum = 2;
    if (has_uinum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uinum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item_CS_FastBuy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Item_CS_FastBuy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Item_CS_FastBuy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Item_CS_FastBuy::MergeFrom(const Item_CS_FastBuy& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uitableid()) {
      set_uitableid(from.uitableid());
    }
    if (from.has_uinum()) {
      set_uinum(from.uinum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Item_CS_FastBuy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item_CS_FastBuy::CopyFrom(const Item_CS_FastBuy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item_CS_FastBuy::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Item_CS_FastBuy::Swap(Item_CS_FastBuy* other) {
  if (other != this) {
    std::swap(uitableid_, other->uitableid_);
    std::swap(uinum_, other->uinum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Item_CS_FastBuy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Item_CS_FastBuy_descriptor_;
  metadata.reflection = Item_CS_FastBuy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Item_SC_FastBuy::kUiTableIdFieldNumber;
const int Item_SC_FastBuy::kUiResultFieldNumber;
#endif  // !_MSC_VER

Item_SC_FastBuy::Item_SC_FastBuy()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Item_SC_FastBuy::InitAsDefaultInstance() {
}

Item_SC_FastBuy::Item_SC_FastBuy(const Item_SC_FastBuy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Item_SC_FastBuy::SharedCtor() {
  _cached_size_ = 0;
  uitableid_ = 0u;
  uiresult_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Item_SC_FastBuy::~Item_SC_FastBuy() {
  SharedDtor();
}

void Item_SC_FastBuy::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Item_SC_FastBuy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Item_SC_FastBuy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_SC_FastBuy_descriptor_;
}

const Item_SC_FastBuy& Item_SC_FastBuy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

Item_SC_FastBuy* Item_SC_FastBuy::default_instance_ = NULL;

Item_SC_FastBuy* Item_SC_FastBuy::New() const {
  return new Item_SC_FastBuy;
}

void Item_SC_FastBuy::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uitableid_ = 0u;
    uiresult_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Item_SC_FastBuy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uiTableId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uitableid_)));
          set_has_uitableid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uiResult;
        break;
      }

      // required uint32 uiResult = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiResult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiresult_)));
          set_has_uiresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Item_SC_FastBuy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uiTableId = 1;
  if (has_uitableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uitableid(), output);
  }

  // required uint32 uiResult = 2;
  if (has_uiresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uiresult(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Item_SC_FastBuy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uiTableId = 1;
  if (has_uitableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uitableid(), target);
  }

  // required uint32 uiResult = 2;
  if (has_uiresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uiresult(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Item_SC_FastBuy::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uiTableId = 1;
    if (has_uitableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uitableid());
    }

    // required uint32 uiResult = 2;
    if (has_uiresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiresult());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item_SC_FastBuy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Item_SC_FastBuy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Item_SC_FastBuy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Item_SC_FastBuy::MergeFrom(const Item_SC_FastBuy& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uitableid()) {
      set_uitableid(from.uitableid());
    }
    if (from.has_uiresult()) {
      set_uiresult(from.uiresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Item_SC_FastBuy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item_SC_FastBuy::CopyFrom(const Item_SC_FastBuy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item_SC_FastBuy::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Item_SC_FastBuy::Swap(Item_SC_FastBuy* other) {
  if (other != this) {
    std::swap(uitableid_, other->uitableid_);
    std::swap(uiresult_, other->uiresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Item_SC_FastBuy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Item_SC_FastBuy_descriptor_;
  metadata.reflection = Item_SC_FastBuy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DragonSoul::kUiDragonSoulIdFieldNumber;
const int DragonSoul::kUiDragonSoulLevelFieldNumber;
#endif  // !_MSC_VER

DragonSoul::DragonSoul()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DragonSoul::InitAsDefaultInstance() {
}

DragonSoul::DragonSoul(const DragonSoul& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DragonSoul::SharedCtor() {
  _cached_size_ = 0;
  uidragonsoulid_ = 0u;
  uidragonsoullevel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DragonSoul::~DragonSoul() {
  SharedDtor();
}

void DragonSoul::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DragonSoul::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DragonSoul::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DragonSoul_descriptor_;
}

const DragonSoul& DragonSoul::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

DragonSoul* DragonSoul::default_instance_ = NULL;

DragonSoul* DragonSoul::New() const {
  return new DragonSoul;
}

void DragonSoul::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uidragonsoulid_ = 0u;
    uidragonsoullevel_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DragonSoul::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uiDragonSoulId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uidragonsoulid_)));
          set_has_uidragonsoulid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uiDragonSoulLevel;
        break;
      }

      // required uint32 uiDragonSoulLevel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiDragonSoulLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uidragonsoullevel_)));
          set_has_uidragonsoullevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DragonSoul::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uiDragonSoulId = 1;
  if (has_uidragonsoulid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uidragonsoulid(), output);
  }

  // required uint32 uiDragonSoulLevel = 2;
  if (has_uidragonsoullevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uidragonsoullevel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DragonSoul::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uiDragonSoulId = 1;
  if (has_uidragonsoulid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uidragonsoulid(), target);
  }

  // required uint32 uiDragonSoulLevel = 2;
  if (has_uidragonsoullevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uidragonsoullevel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DragonSoul::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uiDragonSoulId = 1;
    if (has_uidragonsoulid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uidragonsoulid());
    }

    // required uint32 uiDragonSoulLevel = 2;
    if (has_uidragonsoullevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uidragonsoullevel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DragonSoul::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DragonSoul* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DragonSoul*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DragonSoul::MergeFrom(const DragonSoul& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uidragonsoulid()) {
      set_uidragonsoulid(from.uidragonsoulid());
    }
    if (from.has_uidragonsoullevel()) {
      set_uidragonsoullevel(from.uidragonsoullevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DragonSoul::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DragonSoul::CopyFrom(const DragonSoul& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DragonSoul::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void DragonSoul::Swap(DragonSoul* other) {
  if (other != this) {
    std::swap(uidragonsoulid_, other->uidragonsoulid_);
    std::swap(uidragonsoullevel_, other->uidragonsoullevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DragonSoul::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DragonSoul_descriptor_;
  metadata.reflection = DragonSoul_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Potential::kVecDragonSoulFieldNumber;
const int Potential::kUiTotalUseNumFieldNumber;
#endif  // !_MSC_VER

Potential::Potential()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Potential::InitAsDefaultInstance() {
}

Potential::Potential(const Potential& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Potential::SharedCtor() {
  _cached_size_ = 0;
  uitotalusenum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Potential::~Potential() {
  SharedDtor();
}

void Potential::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Potential::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Potential::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Potential_descriptor_;
}

const Potential& Potential::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

Potential* Potential::default_instance_ = NULL;

Potential* Potential::New() const {
  return new Potential;
}

void Potential::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    uitotalusenum_ = 0u;
  }
  vecdragonsoul_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Potential::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.message.DragonSoul vecDragonSoul = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vecDragonSoul:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vecdragonsoul()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_vecDragonSoul;
        if (input->ExpectTag(16)) goto parse_uiTotalUseNum;
        break;
      }

      // optional uint32 uiTotalUseNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiTotalUseNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uitotalusenum_)));
          set_has_uitotalusenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Potential::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.message.DragonSoul vecDragonSoul = 1;
  for (int i = 0; i < this->vecdragonsoul_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->vecdragonsoul(i), output);
  }

  // optional uint32 uiTotalUseNum = 2;
  if (has_uitotalusenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uitotalusenum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Potential::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.message.DragonSoul vecDragonSoul = 1;
  for (int i = 0; i < this->vecdragonsoul_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->vecdragonsoul(i), target);
  }

  // optional uint32 uiTotalUseNum = 2;
  if (has_uitotalusenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uitotalusenum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Potential::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 uiTotalUseNum = 2;
    if (has_uitotalusenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uitotalusenum());
    }

  }
  // repeated .proto.message.DragonSoul vecDragonSoul = 1;
  total_size += 1 * this->vecdragonsoul_size();
  for (int i = 0; i < this->vecdragonsoul_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vecdragonsoul(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Potential::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Potential* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Potential*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Potential::MergeFrom(const Potential& from) {
  GOOGLE_CHECK_NE(&from, this);
  vecdragonsoul_.MergeFrom(from.vecdragonsoul_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_uitotalusenum()) {
      set_uitotalusenum(from.uitotalusenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Potential::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Potential::CopyFrom(const Potential& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Potential::IsInitialized() const {

  for (int i = 0; i < vecdragonsoul_size(); i++) {
    if (!this->vecdragonsoul(i).IsInitialized()) return false;
  }
  return true;
}

void Potential::Swap(Potential* other) {
  if (other != this) {
    vecdragonsoul_.Swap(&other->vecdragonsoul_);
    std::swap(uitotalusenum_, other->uitotalusenum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Potential::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Potential_descriptor_;
  metadata.reflection = Potential_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Item_CS_Potential::Item_CS_Potential()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Item_CS_Potential::InitAsDefaultInstance() {
}

Item_CS_Potential::Item_CS_Potential(const Item_CS_Potential& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Item_CS_Potential::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Item_CS_Potential::~Item_CS_Potential() {
  SharedDtor();
}

void Item_CS_Potential::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Item_CS_Potential::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Item_CS_Potential::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_CS_Potential_descriptor_;
}

const Item_CS_Potential& Item_CS_Potential::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

Item_CS_Potential* Item_CS_Potential::default_instance_ = NULL;

Item_CS_Potential* Item_CS_Potential::New() const {
  return new Item_CS_Potential;
}

void Item_CS_Potential::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Item_CS_Potential::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Item_CS_Potential::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Item_CS_Potential::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Item_CS_Potential::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item_CS_Potential::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Item_CS_Potential* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Item_CS_Potential*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Item_CS_Potential::MergeFrom(const Item_CS_Potential& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Item_CS_Potential::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item_CS_Potential::CopyFrom(const Item_CS_Potential& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item_CS_Potential::IsInitialized() const {

  return true;
}

void Item_CS_Potential::Swap(Item_CS_Potential* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Item_CS_Potential::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Item_CS_Potential_descriptor_;
  metadata.reflection = Item_CS_Potential_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Item_SC_Potential::kSPotentialFieldNumber;
#endif  // !_MSC_VER

Item_SC_Potential::Item_SC_Potential()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Item_SC_Potential::InitAsDefaultInstance() {
  spotential_ = const_cast< ::proto::message::Potential*>(&::proto::message::Potential::default_instance());
}

Item_SC_Potential::Item_SC_Potential(const Item_SC_Potential& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Item_SC_Potential::SharedCtor() {
  _cached_size_ = 0;
  spotential_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Item_SC_Potential::~Item_SC_Potential() {
  SharedDtor();
}

void Item_SC_Potential::SharedDtor() {
  if (this != default_instance_) {
    delete spotential_;
  }
}

void Item_SC_Potential::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Item_SC_Potential::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_SC_Potential_descriptor_;
}

const Item_SC_Potential& Item_SC_Potential::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

Item_SC_Potential* Item_SC_Potential::default_instance_ = NULL;

Item_SC_Potential* Item_SC_Potential::New() const {
  return new Item_SC_Potential;
}

void Item_SC_Potential::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_spotential()) {
      if (spotential_ != NULL) spotential_->::proto::message::Potential::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Item_SC_Potential::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .proto.message.Potential sPotential = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_spotential()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Item_SC_Potential::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .proto.message.Potential sPotential = 1;
  if (has_spotential()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->spotential(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Item_SC_Potential::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .proto.message.Potential sPotential = 1;
  if (has_spotential()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->spotential(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Item_SC_Potential::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .proto.message.Potential sPotential = 1;
    if (has_spotential()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->spotential());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item_SC_Potential::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Item_SC_Potential* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Item_SC_Potential*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Item_SC_Potential::MergeFrom(const Item_SC_Potential& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_spotential()) {
      mutable_spotential()->::proto::message::Potential::MergeFrom(from.spotential());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Item_SC_Potential::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item_SC_Potential::CopyFrom(const Item_SC_Potential& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item_SC_Potential::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_spotential()) {
    if (!this->spotential().IsInitialized()) return false;
  }
  return true;
}

void Item_SC_Potential::Swap(Item_SC_Potential* other) {
  if (other != this) {
    std::swap(spotential_, other->spotential_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Item_SC_Potential::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Item_SC_Potential_descriptor_;
  metadata.reflection = Item_SC_Potential_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Item_CS_PutOnSuit::kUiSuitIdFieldNumber;
const int Item_CS_PutOnSuit::kUiOperateFieldNumber;
#endif  // !_MSC_VER

Item_CS_PutOnSuit::Item_CS_PutOnSuit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Item_CS_PutOnSuit::InitAsDefaultInstance() {
}

Item_CS_PutOnSuit::Item_CS_PutOnSuit(const Item_CS_PutOnSuit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Item_CS_PutOnSuit::SharedCtor() {
  _cached_size_ = 0;
  uisuitid_ = 0u;
  uioperate_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Item_CS_PutOnSuit::~Item_CS_PutOnSuit() {
  SharedDtor();
}

void Item_CS_PutOnSuit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Item_CS_PutOnSuit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Item_CS_PutOnSuit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_CS_PutOnSuit_descriptor_;
}

const Item_CS_PutOnSuit& Item_CS_PutOnSuit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

Item_CS_PutOnSuit* Item_CS_PutOnSuit::default_instance_ = NULL;

Item_CS_PutOnSuit* Item_CS_PutOnSuit::New() const {
  return new Item_CS_PutOnSuit;
}

void Item_CS_PutOnSuit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uisuitid_ = 0u;
    uioperate_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Item_CS_PutOnSuit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uiSuitId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uisuitid_)));
          set_has_uisuitid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uiOperate;
        break;
      }

      // optional uint32 uiOperate = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiOperate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uioperate_)));
          set_has_uioperate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Item_CS_PutOnSuit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uiSuitId = 1;
  if (has_uisuitid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uisuitid(), output);
  }

  // optional uint32 uiOperate = 2;
  if (has_uioperate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uioperate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Item_CS_PutOnSuit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uiSuitId = 1;
  if (has_uisuitid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uisuitid(), target);
  }

  // optional uint32 uiOperate = 2;
  if (has_uioperate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uioperate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Item_CS_PutOnSuit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uiSuitId = 1;
    if (has_uisuitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uisuitid());
    }

    // optional uint32 uiOperate = 2;
    if (has_uioperate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uioperate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item_CS_PutOnSuit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Item_CS_PutOnSuit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Item_CS_PutOnSuit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Item_CS_PutOnSuit::MergeFrom(const Item_CS_PutOnSuit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uisuitid()) {
      set_uisuitid(from.uisuitid());
    }
    if (from.has_uioperate()) {
      set_uioperate(from.uioperate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Item_CS_PutOnSuit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item_CS_PutOnSuit::CopyFrom(const Item_CS_PutOnSuit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item_CS_PutOnSuit::IsInitialized() const {

  return true;
}

void Item_CS_PutOnSuit::Swap(Item_CS_PutOnSuit* other) {
  if (other != this) {
    std::swap(uisuitid_, other->uisuitid_);
    std::swap(uioperate_, other->uioperate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Item_CS_PutOnSuit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Item_CS_PutOnSuit_descriptor_;
  metadata.reflection = Item_CS_PutOnSuit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Item_SC_PutOnSuit::kUiResultFieldNumber;
const int Item_SC_PutOnSuit::kUiSuitIdFieldNumber;
#endif  // !_MSC_VER

Item_SC_PutOnSuit::Item_SC_PutOnSuit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Item_SC_PutOnSuit::InitAsDefaultInstance() {
}

Item_SC_PutOnSuit::Item_SC_PutOnSuit(const Item_SC_PutOnSuit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Item_SC_PutOnSuit::SharedCtor() {
  _cached_size_ = 0;
  uiresult_ = 0u;
  uisuitid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Item_SC_PutOnSuit::~Item_SC_PutOnSuit() {
  SharedDtor();
}

void Item_SC_PutOnSuit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Item_SC_PutOnSuit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Item_SC_PutOnSuit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_SC_PutOnSuit_descriptor_;
}

const Item_SC_PutOnSuit& Item_SC_PutOnSuit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

Item_SC_PutOnSuit* Item_SC_PutOnSuit::default_instance_ = NULL;

Item_SC_PutOnSuit* Item_SC_PutOnSuit::New() const {
  return new Item_SC_PutOnSuit;
}

void Item_SC_PutOnSuit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uiresult_ = 0u;
    uisuitid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Item_SC_PutOnSuit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uiResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiresult_)));
          set_has_uiresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uiSuitId;
        break;
      }

      // optional uint32 uiSuitId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiSuitId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uisuitid_)));
          set_has_uisuitid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Item_SC_PutOnSuit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uiResult = 1;
  if (has_uiresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uiresult(), output);
  }

  // optional uint32 uiSuitId = 2;
  if (has_uisuitid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uisuitid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Item_SC_PutOnSuit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uiResult = 1;
  if (has_uiresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uiresult(), target);
  }

  // optional uint32 uiSuitId = 2;
  if (has_uisuitid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uisuitid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Item_SC_PutOnSuit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uiResult = 1;
    if (has_uiresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiresult());
    }

    // optional uint32 uiSuitId = 2;
    if (has_uisuitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uisuitid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item_SC_PutOnSuit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Item_SC_PutOnSuit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Item_SC_PutOnSuit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Item_SC_PutOnSuit::MergeFrom(const Item_SC_PutOnSuit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uiresult()) {
      set_uiresult(from.uiresult());
    }
    if (from.has_uisuitid()) {
      set_uisuitid(from.uisuitid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Item_SC_PutOnSuit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item_SC_PutOnSuit::CopyFrom(const Item_SC_PutOnSuit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item_SC_PutOnSuit::IsInitialized() const {

  return true;
}

void Item_SC_PutOnSuit::Swap(Item_SC_PutOnSuit* other) {
  if (other != this) {
    std::swap(uiresult_, other->uiresult_);
    std::swap(uisuitid_, other->uisuitid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Item_SC_PutOnSuit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Item_SC_PutOnSuit_descriptor_;
  metadata.reflection = Item_SC_PutOnSuit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Item_CS_TakeOpenReward::kUiOpenIdFieldNumber;
#endif  // !_MSC_VER

Item_CS_TakeOpenReward::Item_CS_TakeOpenReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Item_CS_TakeOpenReward::InitAsDefaultInstance() {
}

Item_CS_TakeOpenReward::Item_CS_TakeOpenReward(const Item_CS_TakeOpenReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Item_CS_TakeOpenReward::SharedCtor() {
  _cached_size_ = 0;
  uiopenid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Item_CS_TakeOpenReward::~Item_CS_TakeOpenReward() {
  SharedDtor();
}

void Item_CS_TakeOpenReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Item_CS_TakeOpenReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Item_CS_TakeOpenReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_CS_TakeOpenReward_descriptor_;
}

const Item_CS_TakeOpenReward& Item_CS_TakeOpenReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

Item_CS_TakeOpenReward* Item_CS_TakeOpenReward::default_instance_ = NULL;

Item_CS_TakeOpenReward* Item_CS_TakeOpenReward::New() const {
  return new Item_CS_TakeOpenReward;
}

void Item_CS_TakeOpenReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uiopenid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Item_CS_TakeOpenReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uiOpenId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiopenid_)));
          set_has_uiopenid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Item_CS_TakeOpenReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uiOpenId = 1;
  if (has_uiopenid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uiopenid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Item_CS_TakeOpenReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uiOpenId = 1;
  if (has_uiopenid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uiopenid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Item_CS_TakeOpenReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uiOpenId = 1;
    if (has_uiopenid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiopenid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item_CS_TakeOpenReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Item_CS_TakeOpenReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Item_CS_TakeOpenReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Item_CS_TakeOpenReward::MergeFrom(const Item_CS_TakeOpenReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uiopenid()) {
      set_uiopenid(from.uiopenid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Item_CS_TakeOpenReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item_CS_TakeOpenReward::CopyFrom(const Item_CS_TakeOpenReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item_CS_TakeOpenReward::IsInitialized() const {

  return true;
}

void Item_CS_TakeOpenReward::Swap(Item_CS_TakeOpenReward* other) {
  if (other != this) {
    std::swap(uiopenid_, other->uiopenid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Item_CS_TakeOpenReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Item_CS_TakeOpenReward_descriptor_;
  metadata.reflection = Item_CS_TakeOpenReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Item_SC_TakeOpenReward::kUiResultFieldNumber;
#endif  // !_MSC_VER

Item_SC_TakeOpenReward::Item_SC_TakeOpenReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Item_SC_TakeOpenReward::InitAsDefaultInstance() {
}

Item_SC_TakeOpenReward::Item_SC_TakeOpenReward(const Item_SC_TakeOpenReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Item_SC_TakeOpenReward::SharedCtor() {
  _cached_size_ = 0;
  uiresult_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Item_SC_TakeOpenReward::~Item_SC_TakeOpenReward() {
  SharedDtor();
}

void Item_SC_TakeOpenReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Item_SC_TakeOpenReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Item_SC_TakeOpenReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_SC_TakeOpenReward_descriptor_;
}

const Item_SC_TakeOpenReward& Item_SC_TakeOpenReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

Item_SC_TakeOpenReward* Item_SC_TakeOpenReward::default_instance_ = NULL;

Item_SC_TakeOpenReward* Item_SC_TakeOpenReward::New() const {
  return new Item_SC_TakeOpenReward;
}

void Item_SC_TakeOpenReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uiresult_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Item_SC_TakeOpenReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uiResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiresult_)));
          set_has_uiresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Item_SC_TakeOpenReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uiResult = 1;
  if (has_uiresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uiresult(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Item_SC_TakeOpenReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uiResult = 1;
  if (has_uiresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uiresult(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Item_SC_TakeOpenReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uiResult = 1;
    if (has_uiresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiresult());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item_SC_TakeOpenReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Item_SC_TakeOpenReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Item_SC_TakeOpenReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Item_SC_TakeOpenReward::MergeFrom(const Item_SC_TakeOpenReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uiresult()) {
      set_uiresult(from.uiresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Item_SC_TakeOpenReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item_SC_TakeOpenReward::CopyFrom(const Item_SC_TakeOpenReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item_SC_TakeOpenReward::IsInitialized() const {

  return true;
}

void Item_SC_TakeOpenReward::Swap(Item_SC_TakeOpenReward* other) {
  if (other != this) {
    std::swap(uiresult_, other->uiresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Item_SC_TakeOpenReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Item_SC_TakeOpenReward_descriptor_;
  metadata.reflection = Item_SC_TakeOpenReward_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace proto

// @@protoc_insertion_point(global_scope)
