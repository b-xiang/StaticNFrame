// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pvp.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "pvp.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace message {

namespace {

const ::google::protobuf::Descriptor* PVPSyncPlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PVPSyncPlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PVP_CP_NoticeConnectOK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PVP_CP_NoticeConnectOK_reflection_ = NULL;
const ::google::protobuf::Descriptor* PVP_PC_SyncOnePlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PVP_PC_SyncOnePlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* PVP_PC_SyncMultiPlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PVP_PC_SyncMultiPlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* PVP_PC_RemovePlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PVP_PC_RemovePlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* PVP_CP_LeaveAttack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PVP_CP_LeaveAttack_reflection_ = NULL;
const ::google::protobuf::Descriptor* PVP_PC_LoadBattle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PVP_PC_LoadBattle_reflection_ = NULL;
const ::google::protobuf::Descriptor* PVP_CP_LoadBattleOk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PVP_CP_LoadBattleOk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PVPBuffer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PVPBuffer_reflection_ = NULL;
const ::google::protobuf::Descriptor* PVP_PC_LoadPVPBuffer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PVP_PC_LoadPVPBuffer_reflection_ = NULL;
const ::google::protobuf::Descriptor* PVP_PC_AddPVPBuffer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PVP_PC_AddPVPBuffer_reflection_ = NULL;
const ::google::protobuf::Descriptor* PVP_PC_DelPVPBuffer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PVP_PC_DelPVPBuffer_reflection_ = NULL;
const ::google::protobuf::Descriptor* PVP_CP_DoPVPBuffer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PVP_CP_DoPVPBuffer_reflection_ = NULL;
const ::google::protobuf::Descriptor* PVPFlagEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PVPFlagEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* PVP_PC_LoadPVPFlagEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PVP_PC_LoadPVPFlagEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* PVP_CP_CaptureFlag_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PVP_CP_CaptureFlag_reflection_ = NULL;
const ::google::protobuf::Descriptor* PVP_PC_DelFlag_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PVP_PC_DelFlag_reflection_ = NULL;
const ::google::protobuf::Descriptor* PVP_CP_SubmitFlag_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PVP_CP_SubmitFlag_reflection_ = NULL;
const ::google::protobuf::Descriptor* PVP_PC_AddFlag_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PVP_PC_AddFlag_reflection_ = NULL;
const ::google::protobuf::Descriptor* PVP_PC_DesFlag_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PVP_PC_DesFlag_reflection_ = NULL;
const ::google::protobuf::Descriptor* PVP_PC_AttackEnd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PVP_PC_AttackEnd_reflection_ = NULL;
const ::google::protobuf::Descriptor* KillRanking_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KillRanking_reflection_ = NULL;
const ::google::protobuf::Descriptor* PVP_PC_KillRanking_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PVP_PC_KillRanking_reflection_ = NULL;
const ::google::protobuf::Descriptor* IntegralRanking_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IntegralRanking_reflection_ = NULL;
const ::google::protobuf::Descriptor* PVP_PC_IntegralRanking_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PVP_PC_IntegralRanking_reflection_ = NULL;
const ::google::protobuf::Descriptor* PVP_PC_Dismiss_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PVP_PC_Dismiss_reflection_ = NULL;
const ::google::protobuf::Descriptor* PVP_CP_PVPSurrender_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PVP_CP_PVPSurrender_reflection_ = NULL;
const ::google::protobuf::Descriptor* PVP_PC_BattleBegin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PVP_PC_BattleBegin_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_pvp_2eproto() {
  protobuf_AddDesc_pvp_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "pvp.proto");
  GOOGLE_CHECK(file != NULL);
  PVPSyncPlayerInfo_descriptor_ = file->message_type(0);
  static const int PVPSyncPlayerInfo_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVPSyncPlayerInfo, nplayerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVPSyncPlayerInfo, pt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVPSyncPlayerInfo, dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVPSyncPlayerInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVPSyncPlayerInfo, maxhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVPSyncPlayerInfo, curhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVPSyncPlayerInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVPSyncPlayerInfo, mod_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVPSyncPlayerInfo, career_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVPSyncPlayerInfo, velocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVPSyncPlayerInfo, camp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVPSyncPlayerInfo, bufferid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVPSyncPlayerInfo, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVPSyncPlayerInfo, skill_id_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVPSyncPlayerInfo, flagcamp_),
  };
  PVPSyncPlayerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PVPSyncPlayerInfo_descriptor_,
      PVPSyncPlayerInfo::default_instance_,
      PVPSyncPlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVPSyncPlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVPSyncPlayerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PVPSyncPlayerInfo));
  PVP_CP_NoticeConnectOK_descriptor_ = file->message_type(1);
  static const int PVP_CP_NoticeConnectOK_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVP_CP_NoticeConnectOK, charid_),
  };
  PVP_CP_NoticeConnectOK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PVP_CP_NoticeConnectOK_descriptor_,
      PVP_CP_NoticeConnectOK::default_instance_,
      PVP_CP_NoticeConnectOK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVP_CP_NoticeConnectOK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVP_CP_NoticeConnectOK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PVP_CP_NoticeConnectOK));
  PVP_PC_SyncOnePlayer_descriptor_ = file->message_type(2);
  static const int PVP_PC_SyncOnePlayer_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVP_PC_SyncOnePlayer, data_),
  };
  PVP_PC_SyncOnePlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PVP_PC_SyncOnePlayer_descriptor_,
      PVP_PC_SyncOnePlayer::default_instance_,
      PVP_PC_SyncOnePlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVP_PC_SyncOnePlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVP_PC_SyncOnePlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PVP_PC_SyncOnePlayer));
  PVP_PC_SyncMultiPlayer_descriptor_ = file->message_type(3);
  static const int PVP_PC_SyncMultiPlayer_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVP_PC_SyncMultiPlayer, data_list_),
  };
  PVP_PC_SyncMultiPlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PVP_PC_SyncMultiPlayer_descriptor_,
      PVP_PC_SyncMultiPlayer::default_instance_,
      PVP_PC_SyncMultiPlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVP_PC_SyncMultiPlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVP_PC_SyncMultiPlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PVP_PC_SyncMultiPlayer));
  PVP_PC_RemovePlayer_descriptor_ = file->message_type(4);
  static const int PVP_PC_RemovePlayer_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVP_PC_RemovePlayer, plyid_),
  };
  PVP_PC_RemovePlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PVP_PC_RemovePlayer_descriptor_,
      PVP_PC_RemovePlayer::default_instance_,
      PVP_PC_RemovePlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVP_PC_RemovePlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVP_PC_RemovePlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PVP_PC_RemovePlayer));
  PVP_CP_LeaveAttack_descriptor_ = file->message_type(5);
  static const int PVP_CP_LeaveAttack_offsets_[1] = {
  };
  PVP_CP_LeaveAttack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PVP_CP_LeaveAttack_descriptor_,
      PVP_CP_LeaveAttack::default_instance_,
      PVP_CP_LeaveAttack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVP_CP_LeaveAttack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVP_CP_LeaveAttack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PVP_CP_LeaveAttack));
  PVP_PC_LoadBattle_descriptor_ = file->message_type(6);
  static const int PVP_PC_LoadBattle_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVP_PC_LoadBattle, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVP_PC_LoadBattle, battleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVP_PC_LoadBattle, pt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVP_PC_LoadBattle, dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVP_PC_LoadBattle, camp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVP_PC_LoadBattle, layer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVP_PC_LoadBattle, surplustime_),
  };
  PVP_PC_LoadBattle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PVP_PC_LoadBattle_descriptor_,
      PVP_PC_LoadBattle::default_instance_,
      PVP_PC_LoadBattle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVP_PC_LoadBattle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVP_PC_LoadBattle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PVP_PC_LoadBattle));
  PVP_CP_LoadBattleOk_descriptor_ = file->message_type(7);
  static const int PVP_CP_LoadBattleOk_offsets_[1] = {
  };
  PVP_CP_LoadBattleOk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PVP_CP_LoadBattleOk_descriptor_,
      PVP_CP_LoadBattleOk::default_instance_,
      PVP_CP_LoadBattleOk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVP_CP_LoadBattleOk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVP_CP_LoadBattleOk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PVP_CP_LoadBattleOk));
  PVPBuffer_descriptor_ = file->message_type(8);
  static const int PVPBuffer_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVPBuffer, eventid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVPBuffer, pt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVPBuffer, dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVPBuffer, radius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVPBuffer, nbufferid_),
  };
  PVPBuffer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PVPBuffer_descriptor_,
      PVPBuffer::default_instance_,
      PVPBuffer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVPBuffer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVPBuffer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PVPBuffer));
  PVP_PC_LoadPVPBuffer_descriptor_ = file->message_type(9);
  static const int PVP_PC_LoadPVPBuffer_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVP_PC_LoadPVPBuffer, event_list_),
  };
  PVP_PC_LoadPVPBuffer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PVP_PC_LoadPVPBuffer_descriptor_,
      PVP_PC_LoadPVPBuffer::default_instance_,
      PVP_PC_LoadPVPBuffer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVP_PC_LoadPVPBuffer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVP_PC_LoadPVPBuffer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PVP_PC_LoadPVPBuffer));
  PVP_PC_AddPVPBuffer_descriptor_ = file->message_type(10);
  static const int PVP_PC_AddPVPBuffer_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVP_PC_AddPVPBuffer, event_),
  };
  PVP_PC_AddPVPBuffer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PVP_PC_AddPVPBuffer_descriptor_,
      PVP_PC_AddPVPBuffer::default_instance_,
      PVP_PC_AddPVPBuffer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVP_PC_AddPVPBuffer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVP_PC_AddPVPBuffer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PVP_PC_AddPVPBuffer));
  PVP_PC_DelPVPBuffer_descriptor_ = file->message_type(11);
  static const int PVP_PC_DelPVPBuffer_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVP_PC_DelPVPBuffer, eventid_),
  };
  PVP_PC_DelPVPBuffer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PVP_PC_DelPVPBuffer_descriptor_,
      PVP_PC_DelPVPBuffer::default_instance_,
      PVP_PC_DelPVPBuffer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVP_PC_DelPVPBuffer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVP_PC_DelPVPBuffer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PVP_PC_DelPVPBuffer));
  PVP_CP_DoPVPBuffer_descriptor_ = file->message_type(12);
  static const int PVP_CP_DoPVPBuffer_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVP_CP_DoPVPBuffer, eventid_),
  };
  PVP_CP_DoPVPBuffer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PVP_CP_DoPVPBuffer_descriptor_,
      PVP_CP_DoPVPBuffer::default_instance_,
      PVP_CP_DoPVPBuffer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVP_CP_DoPVPBuffer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVP_CP_DoPVPBuffer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PVP_CP_DoPVPBuffer));
  PVPFlagEvent_descriptor_ = file->message_type(13);
  static const int PVPFlagEvent_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVPFlagEvent, eventid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVPFlagEvent, pt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVPFlagEvent, dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVPFlagEvent, radius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVPFlagEvent, nbufferid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVPFlagEvent, camp_),
  };
  PVPFlagEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PVPFlagEvent_descriptor_,
      PVPFlagEvent::default_instance_,
      PVPFlagEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVPFlagEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVPFlagEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PVPFlagEvent));
  PVP_PC_LoadPVPFlagEvent_descriptor_ = file->message_type(14);
  static const int PVP_PC_LoadPVPFlagEvent_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVP_PC_LoadPVPFlagEvent, flag_list_),
  };
  PVP_PC_LoadPVPFlagEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PVP_PC_LoadPVPFlagEvent_descriptor_,
      PVP_PC_LoadPVPFlagEvent::default_instance_,
      PVP_PC_LoadPVPFlagEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVP_PC_LoadPVPFlagEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVP_PC_LoadPVPFlagEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PVP_PC_LoadPVPFlagEvent));
  PVP_CP_CaptureFlag_descriptor_ = file->message_type(15);
  static const int PVP_CP_CaptureFlag_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVP_CP_CaptureFlag, eventid_),
  };
  PVP_CP_CaptureFlag_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PVP_CP_CaptureFlag_descriptor_,
      PVP_CP_CaptureFlag::default_instance_,
      PVP_CP_CaptureFlag_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVP_CP_CaptureFlag, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVP_CP_CaptureFlag, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PVP_CP_CaptureFlag));
  PVP_PC_DelFlag_descriptor_ = file->message_type(16);
  static const int PVP_PC_DelFlag_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVP_PC_DelFlag, eventid_),
  };
  PVP_PC_DelFlag_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PVP_PC_DelFlag_descriptor_,
      PVP_PC_DelFlag::default_instance_,
      PVP_PC_DelFlag_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVP_PC_DelFlag, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVP_PC_DelFlag, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PVP_PC_DelFlag));
  PVP_CP_SubmitFlag_descriptor_ = file->message_type(17);
  static const int PVP_CP_SubmitFlag_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVP_CP_SubmitFlag, eventid_),
  };
  PVP_CP_SubmitFlag_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PVP_CP_SubmitFlag_descriptor_,
      PVP_CP_SubmitFlag::default_instance_,
      PVP_CP_SubmitFlag_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVP_CP_SubmitFlag, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVP_CP_SubmitFlag, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PVP_CP_SubmitFlag));
  PVP_PC_AddFlag_descriptor_ = file->message_type(18);
  static const int PVP_PC_AddFlag_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVP_PC_AddFlag, flag_),
  };
  PVP_PC_AddFlag_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PVP_PC_AddFlag_descriptor_,
      PVP_PC_AddFlag::default_instance_,
      PVP_PC_AddFlag_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVP_PC_AddFlag, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVP_PC_AddFlag, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PVP_PC_AddFlag));
  PVP_PC_DesFlag_descriptor_ = file->message_type(19);
  static const int PVP_PC_DesFlag_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVP_PC_DesFlag, pt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVP_PC_DesFlag, radius_),
  };
  PVP_PC_DesFlag_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PVP_PC_DesFlag_descriptor_,
      PVP_PC_DesFlag::default_instance_,
      PVP_PC_DesFlag_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVP_PC_DesFlag, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVP_PC_DesFlag, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PVP_PC_DesFlag));
  PVP_PC_AttackEnd_descriptor_ = file->message_type(20);
  static const int PVP_PC_AttackEnd_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVP_PC_AttackEnd, wincmap_),
  };
  PVP_PC_AttackEnd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PVP_PC_AttackEnd_descriptor_,
      PVP_PC_AttackEnd::default_instance_,
      PVP_PC_AttackEnd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVP_PC_AttackEnd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVP_PC_AttackEnd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PVP_PC_AttackEnd));
  KillRanking_descriptor_ = file->message_type(21);
  static const int KillRanking_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillRanking, plyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillRanking, killnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillRanking, dienum_),
  };
  KillRanking_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KillRanking_descriptor_,
      KillRanking::default_instance_,
      KillRanking_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillRanking, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillRanking, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KillRanking));
  PVP_PC_KillRanking_descriptor_ = file->message_type(22);
  static const int PVP_PC_KillRanking_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVP_PC_KillRanking, list_),
  };
  PVP_PC_KillRanking_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PVP_PC_KillRanking_descriptor_,
      PVP_PC_KillRanking::default_instance_,
      PVP_PC_KillRanking_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVP_PC_KillRanking, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVP_PC_KillRanking, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PVP_PC_KillRanking));
  IntegralRanking_descriptor_ = file->message_type(23);
  static const int IntegralRanking_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntegralRanking, plyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntegralRanking, integral_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntegralRanking, flagnum_),
  };
  IntegralRanking_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IntegralRanking_descriptor_,
      IntegralRanking::default_instance_,
      IntegralRanking_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntegralRanking, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntegralRanking, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IntegralRanking));
  PVP_PC_IntegralRanking_descriptor_ = file->message_type(24);
  static const int PVP_PC_IntegralRanking_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVP_PC_IntegralRanking, list_),
  };
  PVP_PC_IntegralRanking_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PVP_PC_IntegralRanking_descriptor_,
      PVP_PC_IntegralRanking::default_instance_,
      PVP_PC_IntegralRanking_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVP_PC_IntegralRanking, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVP_PC_IntegralRanking, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PVP_PC_IntegralRanking));
  PVP_PC_Dismiss_descriptor_ = file->message_type(25);
  static const int PVP_PC_Dismiss_offsets_[1] = {
  };
  PVP_PC_Dismiss_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PVP_PC_Dismiss_descriptor_,
      PVP_PC_Dismiss::default_instance_,
      PVP_PC_Dismiss_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVP_PC_Dismiss, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVP_PC_Dismiss, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PVP_PC_Dismiss));
  PVP_CP_PVPSurrender_descriptor_ = file->message_type(26);
  static const int PVP_CP_PVPSurrender_offsets_[1] = {
  };
  PVP_CP_PVPSurrender_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PVP_CP_PVPSurrender_descriptor_,
      PVP_CP_PVPSurrender::default_instance_,
      PVP_CP_PVPSurrender_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVP_CP_PVPSurrender, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVP_CP_PVPSurrender, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PVP_CP_PVPSurrender));
  PVP_PC_BattleBegin_descriptor_ = file->message_type(27);
  static const int PVP_PC_BattleBegin_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVP_PC_BattleBegin, battletype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVP_PC_BattleBegin, starttime_),
  };
  PVP_PC_BattleBegin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PVP_PC_BattleBegin_descriptor_,
      PVP_PC_BattleBegin::default_instance_,
      PVP_PC_BattleBegin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVP_PC_BattleBegin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVP_PC_BattleBegin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PVP_PC_BattleBegin));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_pvp_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PVPSyncPlayerInfo_descriptor_, &PVPSyncPlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PVP_CP_NoticeConnectOK_descriptor_, &PVP_CP_NoticeConnectOK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PVP_PC_SyncOnePlayer_descriptor_, &PVP_PC_SyncOnePlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PVP_PC_SyncMultiPlayer_descriptor_, &PVP_PC_SyncMultiPlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PVP_PC_RemovePlayer_descriptor_, &PVP_PC_RemovePlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PVP_CP_LeaveAttack_descriptor_, &PVP_CP_LeaveAttack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PVP_PC_LoadBattle_descriptor_, &PVP_PC_LoadBattle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PVP_CP_LoadBattleOk_descriptor_, &PVP_CP_LoadBattleOk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PVPBuffer_descriptor_, &PVPBuffer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PVP_PC_LoadPVPBuffer_descriptor_, &PVP_PC_LoadPVPBuffer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PVP_PC_AddPVPBuffer_descriptor_, &PVP_PC_AddPVPBuffer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PVP_PC_DelPVPBuffer_descriptor_, &PVP_PC_DelPVPBuffer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PVP_CP_DoPVPBuffer_descriptor_, &PVP_CP_DoPVPBuffer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PVPFlagEvent_descriptor_, &PVPFlagEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PVP_PC_LoadPVPFlagEvent_descriptor_, &PVP_PC_LoadPVPFlagEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PVP_CP_CaptureFlag_descriptor_, &PVP_CP_CaptureFlag::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PVP_PC_DelFlag_descriptor_, &PVP_PC_DelFlag::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PVP_CP_SubmitFlag_descriptor_, &PVP_CP_SubmitFlag::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PVP_PC_AddFlag_descriptor_, &PVP_PC_AddFlag::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PVP_PC_DesFlag_descriptor_, &PVP_PC_DesFlag::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PVP_PC_AttackEnd_descriptor_, &PVP_PC_AttackEnd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KillRanking_descriptor_, &KillRanking::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PVP_PC_KillRanking_descriptor_, &PVP_PC_KillRanking::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IntegralRanking_descriptor_, &IntegralRanking::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PVP_PC_IntegralRanking_descriptor_, &PVP_PC_IntegralRanking::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PVP_PC_Dismiss_descriptor_, &PVP_PC_Dismiss::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PVP_CP_PVPSurrender_descriptor_, &PVP_CP_PVPSurrender::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PVP_PC_BattleBegin_descriptor_, &PVP_PC_BattleBegin::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_pvp_2eproto() {
  delete PVPSyncPlayerInfo::default_instance_;
  delete PVPSyncPlayerInfo_reflection_;
  delete PVP_CP_NoticeConnectOK::default_instance_;
  delete PVP_CP_NoticeConnectOK_reflection_;
  delete PVP_PC_SyncOnePlayer::default_instance_;
  delete PVP_PC_SyncOnePlayer_reflection_;
  delete PVP_PC_SyncMultiPlayer::default_instance_;
  delete PVP_PC_SyncMultiPlayer_reflection_;
  delete PVP_PC_RemovePlayer::default_instance_;
  delete PVP_PC_RemovePlayer_reflection_;
  delete PVP_CP_LeaveAttack::default_instance_;
  delete PVP_CP_LeaveAttack_reflection_;
  delete PVP_PC_LoadBattle::default_instance_;
  delete PVP_PC_LoadBattle_reflection_;
  delete PVP_CP_LoadBattleOk::default_instance_;
  delete PVP_CP_LoadBattleOk_reflection_;
  delete PVPBuffer::default_instance_;
  delete PVPBuffer_reflection_;
  delete PVP_PC_LoadPVPBuffer::default_instance_;
  delete PVP_PC_LoadPVPBuffer_reflection_;
  delete PVP_PC_AddPVPBuffer::default_instance_;
  delete PVP_PC_AddPVPBuffer_reflection_;
  delete PVP_PC_DelPVPBuffer::default_instance_;
  delete PVP_PC_DelPVPBuffer_reflection_;
  delete PVP_CP_DoPVPBuffer::default_instance_;
  delete PVP_CP_DoPVPBuffer_reflection_;
  delete PVPFlagEvent::default_instance_;
  delete PVPFlagEvent_reflection_;
  delete PVP_PC_LoadPVPFlagEvent::default_instance_;
  delete PVP_PC_LoadPVPFlagEvent_reflection_;
  delete PVP_CP_CaptureFlag::default_instance_;
  delete PVP_CP_CaptureFlag_reflection_;
  delete PVP_PC_DelFlag::default_instance_;
  delete PVP_PC_DelFlag_reflection_;
  delete PVP_CP_SubmitFlag::default_instance_;
  delete PVP_CP_SubmitFlag_reflection_;
  delete PVP_PC_AddFlag::default_instance_;
  delete PVP_PC_AddFlag_reflection_;
  delete PVP_PC_DesFlag::default_instance_;
  delete PVP_PC_DesFlag_reflection_;
  delete PVP_PC_AttackEnd::default_instance_;
  delete PVP_PC_AttackEnd_reflection_;
  delete KillRanking::default_instance_;
  delete KillRanking_reflection_;
  delete PVP_PC_KillRanking::default_instance_;
  delete PVP_PC_KillRanking_reflection_;
  delete IntegralRanking::default_instance_;
  delete IntegralRanking_reflection_;
  delete PVP_PC_IntegralRanking::default_instance_;
  delete PVP_PC_IntegralRanking_reflection_;
  delete PVP_PC_Dismiss::default_instance_;
  delete PVP_PC_Dismiss_reflection_;
  delete PVP_CP_PVPSurrender::default_instance_;
  delete PVP_CP_PVPSurrender_reflection_;
  delete PVP_PC_BattleBegin::default_instance_;
  delete PVP_PC_BattleBegin_reflection_;
}

void protobuf_AddDesc_pvp_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::proto::message::protobuf_AddDesc_common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tpvp.proto\022\rproto.message\032\014common.proto"
    "\"\232\002\n\021PVPSyncPlayerInfo\022\021\n\tnPlayerId\030\001 \002("
    "\r\022\"\n\002pt\030\002 \002(\0132\026.proto.message.Point3D\022\013\n"
    "\003dir\030\003 \002(\002\022\014\n\004Name\030\004 \001(\t\022\r\n\005MaxHP\030\005 \001(\005\022"
    "\r\n\005CurHP\030\006 \001(\005\022\r\n\005Level\030\007 \001(\005\022\013\n\003Mod\030\010 \003"
    "(\005\022\016\n\006career\030\t \001(\005\022\020\n\010Velocity\030\n \001(\005\022\014\n\004"
    "camp\030\013 \001(\005\022\020\n\010bufferID\030\014 \003(\r\022\016\n\006Status\030\r"
    " \001(\004\022\025\n\rskill_id_list\030\016 \003(\005\022\020\n\010FlagCamp\030"
    "\017 \001(\005\"(\n\026PVP_CP_NoticeConnectOK\022\016\n\006CharI"
    "d\030\001 \002(\004\"F\n\024PVP_PC_SyncOnePlayer\022.\n\004data\030"
    "\001 \002(\0132 .proto.message.PVPSyncPlayerInfo\""
    "M\n\026PVP_PC_SyncMultiPlayer\0223\n\tdata_list\030\001"
    " \003(\0132 .proto.message.PVPSyncPlayerInfo\"$"
    "\n\023PVP_PC_RemovePlayer\022\r\n\005PlyId\030\001 \002(\r\"\024\n\022"
    "PVP_CP_LeaveAttack\"\233\001\n\021PVP_PC_LoadBattle"
    "\022\021\n\tplayer_id\030\001 \001(\r\022\020\n\010BattleId\030\002 \002(\r\022\"\n"
    "\002pt\030\003 \001(\0132\026.proto.message.Point3D\022\013\n\003Dir"
    "\030\004 \001(\002\022\014\n\004camp\030\005 \001(\005\022\r\n\005Layer\030\006 \001(\005\022\023\n\013S"
    "urplusTime\030\007 \001(\005\"\025\n\023PVP_CP_LoadBattleOk\""
    "p\n\tPVPBuffer\022\017\n\007EventId\030\001 \002(\r\022\"\n\002pt\030\002 \001("
    "\0132\026.proto.message.Point3D\022\013\n\003Dir\030\003 \001(\002\022\016"
    "\n\006Radius\030\004 \001(\002\022\021\n\tnBufferId\030\005 \001(\005\"D\n\024PVP"
    "_PC_LoadPVPBuffer\022,\n\nevent_list\030\001 \003(\0132\030."
    "proto.message.PVPBuffer\">\n\023PVP_PC_AddPVP"
    "Buffer\022\'\n\005event\030\001 \002(\0132\030.proto.message.PV"
    "PBuffer\"&\n\023PVP_PC_DelPVPBuffer\022\017\n\007EventI"
    "d\030\001 \002(\r\"%\n\022PVP_CP_DoPVPBuffer\022\017\n\007EventId"
    "\030\001 \002(\r\"\201\001\n\014PVPFlagEvent\022\017\n\007EventId\030\001 \002(\r"
    "\022\"\n\002pt\030\002 \001(\0132\026.proto.message.Point3D\022\013\n\003"
    "Dir\030\003 \001(\002\022\016\n\006Radius\030\004 \001(\002\022\021\n\tnBufferId\030\005"
    " \001(\005\022\014\n\004camp\030\006 \001(\005\"I\n\027PVP_PC_LoadPVPFlag"
    "Event\022.\n\tflag_list\030\001 \003(\0132\033.proto.message"
    ".PVPFlagEvent\"%\n\022PVP_CP_CaptureFlag\022\017\n\007E"
    "ventId\030\001 \002(\r\"!\n\016PVP_PC_DelFlag\022\017\n\007EventI"
    "d\030\001 \002(\r\"$\n\021PVP_CP_SubmitFlag\022\017\n\007EventId\030"
    "\001 \002(\r\";\n\016PVP_PC_AddFlag\022)\n\004flag\030\001 \002(\0132\033."
    "proto.message.PVPFlagEvent\"D\n\016PVP_PC_Des"
    "Flag\022\"\n\002pt\030\001 \001(\0132\026.proto.message.Point3D"
    "\022\016\n\006Radius\030\002 \001(\002\"#\n\020PVP_PC_AttackEnd\022\017\n\007"
    "winCmap\030\001 \002(\005\"=\n\013KillRanking\022\r\n\005PlyID\030\001 "
    "\002(\005\022\017\n\007KillNum\030\002 \001(\005\022\016\n\006DieNum\030\003 \001(\005\">\n\022"
    "PVP_PC_KillRanking\022(\n\004list\030\001 \003(\0132\032.proto"
    ".message.KillRanking\"C\n\017IntegralRanking\022"
    "\r\n\005PlyID\030\001 \002(\005\022\020\n\010Integral\030\002 \001(\005\022\017\n\007flag"
    "Num\030\003 \001(\005\"F\n\026PVP_PC_IntegralRanking\022,\n\004l"
    "ist\030\001 \003(\0132\036.proto.message.IntegralRankin"
    "g\"\020\n\016PVP_PC_Dismiss\"\025\n\023PVP_CP_PVPSurrend"
    "er\";\n\022PVP_PC_BattleBegin\022\022\n\nbattletype\030\001"
    " \001(\r\022\021\n\tstarttime\030\002 \001(\004", 1943);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "pvp.proto", &protobuf_RegisterTypes);
  PVPSyncPlayerInfo::default_instance_ = new PVPSyncPlayerInfo();
  PVP_CP_NoticeConnectOK::default_instance_ = new PVP_CP_NoticeConnectOK();
  PVP_PC_SyncOnePlayer::default_instance_ = new PVP_PC_SyncOnePlayer();
  PVP_PC_SyncMultiPlayer::default_instance_ = new PVP_PC_SyncMultiPlayer();
  PVP_PC_RemovePlayer::default_instance_ = new PVP_PC_RemovePlayer();
  PVP_CP_LeaveAttack::default_instance_ = new PVP_CP_LeaveAttack();
  PVP_PC_LoadBattle::default_instance_ = new PVP_PC_LoadBattle();
  PVP_CP_LoadBattleOk::default_instance_ = new PVP_CP_LoadBattleOk();
  PVPBuffer::default_instance_ = new PVPBuffer();
  PVP_PC_LoadPVPBuffer::default_instance_ = new PVP_PC_LoadPVPBuffer();
  PVP_PC_AddPVPBuffer::default_instance_ = new PVP_PC_AddPVPBuffer();
  PVP_PC_DelPVPBuffer::default_instance_ = new PVP_PC_DelPVPBuffer();
  PVP_CP_DoPVPBuffer::default_instance_ = new PVP_CP_DoPVPBuffer();
  PVPFlagEvent::default_instance_ = new PVPFlagEvent();
  PVP_PC_LoadPVPFlagEvent::default_instance_ = new PVP_PC_LoadPVPFlagEvent();
  PVP_CP_CaptureFlag::default_instance_ = new PVP_CP_CaptureFlag();
  PVP_PC_DelFlag::default_instance_ = new PVP_PC_DelFlag();
  PVP_CP_SubmitFlag::default_instance_ = new PVP_CP_SubmitFlag();
  PVP_PC_AddFlag::default_instance_ = new PVP_PC_AddFlag();
  PVP_PC_DesFlag::default_instance_ = new PVP_PC_DesFlag();
  PVP_PC_AttackEnd::default_instance_ = new PVP_PC_AttackEnd();
  KillRanking::default_instance_ = new KillRanking();
  PVP_PC_KillRanking::default_instance_ = new PVP_PC_KillRanking();
  IntegralRanking::default_instance_ = new IntegralRanking();
  PVP_PC_IntegralRanking::default_instance_ = new PVP_PC_IntegralRanking();
  PVP_PC_Dismiss::default_instance_ = new PVP_PC_Dismiss();
  PVP_CP_PVPSurrender::default_instance_ = new PVP_CP_PVPSurrender();
  PVP_PC_BattleBegin::default_instance_ = new PVP_PC_BattleBegin();
  PVPSyncPlayerInfo::default_instance_->InitAsDefaultInstance();
  PVP_CP_NoticeConnectOK::default_instance_->InitAsDefaultInstance();
  PVP_PC_SyncOnePlayer::default_instance_->InitAsDefaultInstance();
  PVP_PC_SyncMultiPlayer::default_instance_->InitAsDefaultInstance();
  PVP_PC_RemovePlayer::default_instance_->InitAsDefaultInstance();
  PVP_CP_LeaveAttack::default_instance_->InitAsDefaultInstance();
  PVP_PC_LoadBattle::default_instance_->InitAsDefaultInstance();
  PVP_CP_LoadBattleOk::default_instance_->InitAsDefaultInstance();
  PVPBuffer::default_instance_->InitAsDefaultInstance();
  PVP_PC_LoadPVPBuffer::default_instance_->InitAsDefaultInstance();
  PVP_PC_AddPVPBuffer::default_instance_->InitAsDefaultInstance();
  PVP_PC_DelPVPBuffer::default_instance_->InitAsDefaultInstance();
  PVP_CP_DoPVPBuffer::default_instance_->InitAsDefaultInstance();
  PVPFlagEvent::default_instance_->InitAsDefaultInstance();
  PVP_PC_LoadPVPFlagEvent::default_instance_->InitAsDefaultInstance();
  PVP_CP_CaptureFlag::default_instance_->InitAsDefaultInstance();
  PVP_PC_DelFlag::default_instance_->InitAsDefaultInstance();
  PVP_CP_SubmitFlag::default_instance_->InitAsDefaultInstance();
  PVP_PC_AddFlag::default_instance_->InitAsDefaultInstance();
  PVP_PC_DesFlag::default_instance_->InitAsDefaultInstance();
  PVP_PC_AttackEnd::default_instance_->InitAsDefaultInstance();
  KillRanking::default_instance_->InitAsDefaultInstance();
  PVP_PC_KillRanking::default_instance_->InitAsDefaultInstance();
  IntegralRanking::default_instance_->InitAsDefaultInstance();
  PVP_PC_IntegralRanking::default_instance_->InitAsDefaultInstance();
  PVP_PC_Dismiss::default_instance_->InitAsDefaultInstance();
  PVP_CP_PVPSurrender::default_instance_->InitAsDefaultInstance();
  PVP_PC_BattleBegin::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_pvp_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_pvp_2eproto {
  StaticDescriptorInitializer_pvp_2eproto() {
    protobuf_AddDesc_pvp_2eproto();
  }
} static_descriptor_initializer_pvp_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PVPSyncPlayerInfo::kNPlayerIdFieldNumber;
const int PVPSyncPlayerInfo::kPtFieldNumber;
const int PVPSyncPlayerInfo::kDirFieldNumber;
const int PVPSyncPlayerInfo::kNameFieldNumber;
const int PVPSyncPlayerInfo::kMaxHPFieldNumber;
const int PVPSyncPlayerInfo::kCurHPFieldNumber;
const int PVPSyncPlayerInfo::kLevelFieldNumber;
const int PVPSyncPlayerInfo::kModFieldNumber;
const int PVPSyncPlayerInfo::kCareerFieldNumber;
const int PVPSyncPlayerInfo::kVelocityFieldNumber;
const int PVPSyncPlayerInfo::kCampFieldNumber;
const int PVPSyncPlayerInfo::kBufferIDFieldNumber;
const int PVPSyncPlayerInfo::kStatusFieldNumber;
const int PVPSyncPlayerInfo::kSkillIdListFieldNumber;
const int PVPSyncPlayerInfo::kFlagCampFieldNumber;
#endif  // !_MSC_VER

PVPSyncPlayerInfo::PVPSyncPlayerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PVPSyncPlayerInfo::InitAsDefaultInstance() {
  pt_ = const_cast< ::proto::message::Point3D*>(&::proto::message::Point3D::default_instance());
}

PVPSyncPlayerInfo::PVPSyncPlayerInfo(const PVPSyncPlayerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PVPSyncPlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  nplayerid_ = 0u;
  pt_ = NULL;
  dir_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  maxhp_ = 0;
  curhp_ = 0;
  level_ = 0;
  career_ = 0;
  velocity_ = 0;
  camp_ = 0;
  status_ = GOOGLE_ULONGLONG(0);
  flagcamp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PVPSyncPlayerInfo::~PVPSyncPlayerInfo() {
  SharedDtor();
}

void PVPSyncPlayerInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete pt_;
  }
}

void PVPSyncPlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PVPSyncPlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PVPSyncPlayerInfo_descriptor_;
}

const PVPSyncPlayerInfo& PVPSyncPlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pvp_2eproto();
  return *default_instance_;
}

PVPSyncPlayerInfo* PVPSyncPlayerInfo::default_instance_ = NULL;

PVPSyncPlayerInfo* PVPSyncPlayerInfo::New() const {
  return new PVPSyncPlayerInfo;
}

void PVPSyncPlayerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nplayerid_ = 0u;
    if (has_pt()) {
      if (pt_ != NULL) pt_->::proto::message::Point3D::Clear();
    }
    dir_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    maxhp_ = 0;
    curhp_ = 0;
    level_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    career_ = 0;
    velocity_ = 0;
    camp_ = 0;
    status_ = GOOGLE_ULONGLONG(0);
    flagcamp_ = 0;
  }
  mod_.Clear();
  bufferid_.Clear();
  skill_id_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PVPSyncPlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 nPlayerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nplayerid_)));
          set_has_nplayerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pt;
        break;
      }

      // required .proto.message.Point3D pt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_dir;
        break;
      }

      // required float dir = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dir_)));
          set_has_dir();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_Name;
        break;
      }

      // optional string Name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_MaxHP;
        break;
      }

      // optional int32 MaxHP = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MaxHP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxhp_)));
          set_has_maxhp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_CurHP;
        break;
      }

      // optional int32 CurHP = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CurHP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curhp_)));
          set_has_curhp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_Level;
        break;
      }

      // optional int32 Level = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_Mod;
        break;
      }

      // repeated int32 Mod = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Mod:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64, input, this->mutable_mod())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_mod())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_Mod;
        if (input->ExpectTag(72)) goto parse_career;
        break;
      }

      // optional int32 career = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_career:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &career_)));
          set_has_career();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_Velocity;
        break;
      }

      // optional int32 Velocity = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Velocity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &velocity_)));
          set_has_velocity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_camp;
        break;
      }

      // optional int32 camp = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_camp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &camp_)));
          set_has_camp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_bufferID;
        break;
      }

      // repeated uint32 bufferID = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bufferID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 96, input, this->mutable_bufferid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_bufferid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_bufferID;
        if (input->ExpectTag(104)) goto parse_Status;
        break;
      }

      // optional uint64 Status = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_skill_id_list;
        break;
      }

      // repeated int32 skill_id_list = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_id_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 112, input, this->mutable_skill_id_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_skill_id_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_skill_id_list;
        if (input->ExpectTag(120)) goto parse_FlagCamp;
        break;
      }

      // optional int32 FlagCamp = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FlagCamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flagcamp_)));
          set_has_flagcamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PVPSyncPlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 nPlayerId = 1;
  if (has_nplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->nplayerid(), output);
  }

  // required .proto.message.Point3D pt = 2;
  if (has_pt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pt(), output);
  }

  // required float dir = 3;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->dir(), output);
  }

  // optional string Name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->name(), output);
  }

  // optional int32 MaxHP = 5;
  if (has_maxhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->maxhp(), output);
  }

  // optional int32 CurHP = 6;
  if (has_curhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->curhp(), output);
  }

  // optional int32 Level = 7;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->level(), output);
  }

  // repeated int32 Mod = 8;
  for (int i = 0; i < this->mod_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->mod(i), output);
  }

  // optional int32 career = 9;
  if (has_career()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->career(), output);
  }

  // optional int32 Velocity = 10;
  if (has_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->velocity(), output);
  }

  // optional int32 camp = 11;
  if (has_camp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->camp(), output);
  }

  // repeated uint32 bufferID = 12;
  for (int i = 0; i < this->bufferid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      12, this->bufferid(i), output);
  }

  // optional uint64 Status = 13;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->status(), output);
  }

  // repeated int32 skill_id_list = 14;
  for (int i = 0; i < this->skill_id_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      14, this->skill_id_list(i), output);
  }

  // optional int32 FlagCamp = 15;
  if (has_flagcamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->flagcamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PVPSyncPlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 nPlayerId = 1;
  if (has_nplayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->nplayerid(), target);
  }

  // required .proto.message.Point3D pt = 2;
  if (has_pt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pt(), target);
  }

  // required float dir = 3;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->dir(), target);
  }

  // optional string Name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // optional int32 MaxHP = 5;
  if (has_maxhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->maxhp(), target);
  }

  // optional int32 CurHP = 6;
  if (has_curhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->curhp(), target);
  }

  // optional int32 Level = 7;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->level(), target);
  }

  // repeated int32 Mod = 8;
  for (int i = 0; i < this->mod_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(8, this->mod(i), target);
  }

  // optional int32 career = 9;
  if (has_career()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->career(), target);
  }

  // optional int32 Velocity = 10;
  if (has_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->velocity(), target);
  }

  // optional int32 camp = 11;
  if (has_camp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->camp(), target);
  }

  // repeated uint32 bufferID = 12;
  for (int i = 0; i < this->bufferid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(12, this->bufferid(i), target);
  }

  // optional uint64 Status = 13;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->status(), target);
  }

  // repeated int32 skill_id_list = 14;
  for (int i = 0; i < this->skill_id_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(14, this->skill_id_list(i), target);
  }

  // optional int32 FlagCamp = 15;
  if (has_flagcamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->flagcamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PVPSyncPlayerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 nPlayerId = 1;
    if (has_nplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nplayerid());
    }

    // required .proto.message.Point3D pt = 2;
    if (has_pt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pt());
    }

    // required float dir = 3;
    if (has_dir()) {
      total_size += 1 + 4;
    }

    // optional string Name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 MaxHP = 5;
    if (has_maxhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxhp());
    }

    // optional int32 CurHP = 6;
    if (has_curhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curhp());
    }

    // optional int32 Level = 7;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 career = 9;
    if (has_career()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->career());
    }

    // optional int32 Velocity = 10;
    if (has_velocity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->velocity());
    }

    // optional int32 camp = 11;
    if (has_camp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->camp());
    }

    // optional uint64 Status = 13;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->status());
    }

    // optional int32 FlagCamp = 15;
    if (has_flagcamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flagcamp());
    }

  }
  // repeated int32 Mod = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->mod_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->mod(i));
    }
    total_size += 1 * this->mod_size() + data_size;
  }

  // repeated uint32 bufferID = 12;
  {
    int data_size = 0;
    for (int i = 0; i < this->bufferid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->bufferid(i));
    }
    total_size += 1 * this->bufferid_size() + data_size;
  }

  // repeated int32 skill_id_list = 14;
  {
    int data_size = 0;
    for (int i = 0; i < this->skill_id_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->skill_id_list(i));
    }
    total_size += 1 * this->skill_id_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PVPSyncPlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PVPSyncPlayerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PVPSyncPlayerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PVPSyncPlayerInfo::MergeFrom(const PVPSyncPlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  mod_.MergeFrom(from.mod_);
  bufferid_.MergeFrom(from.bufferid_);
  skill_id_list_.MergeFrom(from.skill_id_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nplayerid()) {
      set_nplayerid(from.nplayerid());
    }
    if (from.has_pt()) {
      mutable_pt()->::proto::message::Point3D::MergeFrom(from.pt());
    }
    if (from.has_dir()) {
      set_dir(from.dir());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_maxhp()) {
      set_maxhp(from.maxhp());
    }
    if (from.has_curhp()) {
      set_curhp(from.curhp());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_career()) {
      set_career(from.career());
    }
    if (from.has_velocity()) {
      set_velocity(from.velocity());
    }
    if (from.has_camp()) {
      set_camp(from.camp());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_flagcamp()) {
      set_flagcamp(from.flagcamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PVPSyncPlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PVPSyncPlayerInfo::CopyFrom(const PVPSyncPlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PVPSyncPlayerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void PVPSyncPlayerInfo::Swap(PVPSyncPlayerInfo* other) {
  if (other != this) {
    std::swap(nplayerid_, other->nplayerid_);
    std::swap(pt_, other->pt_);
    std::swap(dir_, other->dir_);
    std::swap(name_, other->name_);
    std::swap(maxhp_, other->maxhp_);
    std::swap(curhp_, other->curhp_);
    std::swap(level_, other->level_);
    mod_.Swap(&other->mod_);
    std::swap(career_, other->career_);
    std::swap(velocity_, other->velocity_);
    std::swap(camp_, other->camp_);
    bufferid_.Swap(&other->bufferid_);
    std::swap(status_, other->status_);
    skill_id_list_.Swap(&other->skill_id_list_);
    std::swap(flagcamp_, other->flagcamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PVPSyncPlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PVPSyncPlayerInfo_descriptor_;
  metadata.reflection = PVPSyncPlayerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PVP_CP_NoticeConnectOK::kCharIdFieldNumber;
#endif  // !_MSC_VER

PVP_CP_NoticeConnectOK::PVP_CP_NoticeConnectOK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PVP_CP_NoticeConnectOK::InitAsDefaultInstance() {
}

PVP_CP_NoticeConnectOK::PVP_CP_NoticeConnectOK(const PVP_CP_NoticeConnectOK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PVP_CP_NoticeConnectOK::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PVP_CP_NoticeConnectOK::~PVP_CP_NoticeConnectOK() {
  SharedDtor();
}

void PVP_CP_NoticeConnectOK::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PVP_CP_NoticeConnectOK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PVP_CP_NoticeConnectOK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PVP_CP_NoticeConnectOK_descriptor_;
}

const PVP_CP_NoticeConnectOK& PVP_CP_NoticeConnectOK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pvp_2eproto();
  return *default_instance_;
}

PVP_CP_NoticeConnectOK* PVP_CP_NoticeConnectOK::default_instance_ = NULL;

PVP_CP_NoticeConnectOK* PVP_CP_NoticeConnectOK::New() const {
  return new PVP_CP_NoticeConnectOK;
}

void PVP_CP_NoticeConnectOK::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PVP_CP_NoticeConnectOK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 CharId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PVP_CP_NoticeConnectOK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 CharId = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PVP_CP_NoticeConnectOK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 CharId = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PVP_CP_NoticeConnectOK::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 CharId = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PVP_CP_NoticeConnectOK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PVP_CP_NoticeConnectOK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PVP_CP_NoticeConnectOK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PVP_CP_NoticeConnectOK::MergeFrom(const PVP_CP_NoticeConnectOK& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PVP_CP_NoticeConnectOK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PVP_CP_NoticeConnectOK::CopyFrom(const PVP_CP_NoticeConnectOK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PVP_CP_NoticeConnectOK::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PVP_CP_NoticeConnectOK::Swap(PVP_CP_NoticeConnectOK* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PVP_CP_NoticeConnectOK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PVP_CP_NoticeConnectOK_descriptor_;
  metadata.reflection = PVP_CP_NoticeConnectOK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PVP_PC_SyncOnePlayer::kDataFieldNumber;
#endif  // !_MSC_VER

PVP_PC_SyncOnePlayer::PVP_PC_SyncOnePlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PVP_PC_SyncOnePlayer::InitAsDefaultInstance() {
  data_ = const_cast< ::proto::message::PVPSyncPlayerInfo*>(&::proto::message::PVPSyncPlayerInfo::default_instance());
}

PVP_PC_SyncOnePlayer::PVP_PC_SyncOnePlayer(const PVP_PC_SyncOnePlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PVP_PC_SyncOnePlayer::SharedCtor() {
  _cached_size_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PVP_PC_SyncOnePlayer::~PVP_PC_SyncOnePlayer() {
  SharedDtor();
}

void PVP_PC_SyncOnePlayer::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void PVP_PC_SyncOnePlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PVP_PC_SyncOnePlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PVP_PC_SyncOnePlayer_descriptor_;
}

const PVP_PC_SyncOnePlayer& PVP_PC_SyncOnePlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pvp_2eproto();
  return *default_instance_;
}

PVP_PC_SyncOnePlayer* PVP_PC_SyncOnePlayer::default_instance_ = NULL;

PVP_PC_SyncOnePlayer* PVP_PC_SyncOnePlayer::New() const {
  return new PVP_PC_SyncOnePlayer;
}

void PVP_PC_SyncOnePlayer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_data()) {
      if (data_ != NULL) data_->::proto::message::PVPSyncPlayerInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PVP_PC_SyncOnePlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .proto.message.PVPSyncPlayerInfo data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PVP_PC_SyncOnePlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .proto.message.PVPSyncPlayerInfo data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PVP_PC_SyncOnePlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .proto.message.PVPSyncPlayerInfo data = 1;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PVP_PC_SyncOnePlayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .proto.message.PVPSyncPlayerInfo data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PVP_PC_SyncOnePlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PVP_PC_SyncOnePlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PVP_PC_SyncOnePlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PVP_PC_SyncOnePlayer::MergeFrom(const PVP_PC_SyncOnePlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      mutable_data()->::proto::message::PVPSyncPlayerInfo::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PVP_PC_SyncOnePlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PVP_PC_SyncOnePlayer::CopyFrom(const PVP_PC_SyncOnePlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PVP_PC_SyncOnePlayer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  return true;
}

void PVP_PC_SyncOnePlayer::Swap(PVP_PC_SyncOnePlayer* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PVP_PC_SyncOnePlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PVP_PC_SyncOnePlayer_descriptor_;
  metadata.reflection = PVP_PC_SyncOnePlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PVP_PC_SyncMultiPlayer::kDataListFieldNumber;
#endif  // !_MSC_VER

PVP_PC_SyncMultiPlayer::PVP_PC_SyncMultiPlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PVP_PC_SyncMultiPlayer::InitAsDefaultInstance() {
}

PVP_PC_SyncMultiPlayer::PVP_PC_SyncMultiPlayer(const PVP_PC_SyncMultiPlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PVP_PC_SyncMultiPlayer::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PVP_PC_SyncMultiPlayer::~PVP_PC_SyncMultiPlayer() {
  SharedDtor();
}

void PVP_PC_SyncMultiPlayer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PVP_PC_SyncMultiPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PVP_PC_SyncMultiPlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PVP_PC_SyncMultiPlayer_descriptor_;
}

const PVP_PC_SyncMultiPlayer& PVP_PC_SyncMultiPlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pvp_2eproto();
  return *default_instance_;
}

PVP_PC_SyncMultiPlayer* PVP_PC_SyncMultiPlayer::default_instance_ = NULL;

PVP_PC_SyncMultiPlayer* PVP_PC_SyncMultiPlayer::New() const {
  return new PVP_PC_SyncMultiPlayer;
}

void PVP_PC_SyncMultiPlayer::Clear() {
  data_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PVP_PC_SyncMultiPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.message.PVPSyncPlayerInfo data_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_data_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PVP_PC_SyncMultiPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.message.PVPSyncPlayerInfo data_list = 1;
  for (int i = 0; i < this->data_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PVP_PC_SyncMultiPlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.message.PVPSyncPlayerInfo data_list = 1;
  for (int i = 0; i < this->data_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PVP_PC_SyncMultiPlayer::ByteSize() const {
  int total_size = 0;

  // repeated .proto.message.PVPSyncPlayerInfo data_list = 1;
  total_size += 1 * this->data_list_size();
  for (int i = 0; i < this->data_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PVP_PC_SyncMultiPlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PVP_PC_SyncMultiPlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PVP_PC_SyncMultiPlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PVP_PC_SyncMultiPlayer::MergeFrom(const PVP_PC_SyncMultiPlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_list_.MergeFrom(from.data_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PVP_PC_SyncMultiPlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PVP_PC_SyncMultiPlayer::CopyFrom(const PVP_PC_SyncMultiPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PVP_PC_SyncMultiPlayer::IsInitialized() const {

  for (int i = 0; i < data_list_size(); i++) {
    if (!this->data_list(i).IsInitialized()) return false;
  }
  return true;
}

void PVP_PC_SyncMultiPlayer::Swap(PVP_PC_SyncMultiPlayer* other) {
  if (other != this) {
    data_list_.Swap(&other->data_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PVP_PC_SyncMultiPlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PVP_PC_SyncMultiPlayer_descriptor_;
  metadata.reflection = PVP_PC_SyncMultiPlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PVP_PC_RemovePlayer::kPlyIdFieldNumber;
#endif  // !_MSC_VER

PVP_PC_RemovePlayer::PVP_PC_RemovePlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PVP_PC_RemovePlayer::InitAsDefaultInstance() {
}

PVP_PC_RemovePlayer::PVP_PC_RemovePlayer(const PVP_PC_RemovePlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PVP_PC_RemovePlayer::SharedCtor() {
  _cached_size_ = 0;
  plyid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PVP_PC_RemovePlayer::~PVP_PC_RemovePlayer() {
  SharedDtor();
}

void PVP_PC_RemovePlayer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PVP_PC_RemovePlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PVP_PC_RemovePlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PVP_PC_RemovePlayer_descriptor_;
}

const PVP_PC_RemovePlayer& PVP_PC_RemovePlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pvp_2eproto();
  return *default_instance_;
}

PVP_PC_RemovePlayer* PVP_PC_RemovePlayer::default_instance_ = NULL;

PVP_PC_RemovePlayer* PVP_PC_RemovePlayer::New() const {
  return new PVP_PC_RemovePlayer;
}

void PVP_PC_RemovePlayer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    plyid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PVP_PC_RemovePlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 PlyId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &plyid_)));
          set_has_plyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PVP_PC_RemovePlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 PlyId = 1;
  if (has_plyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->plyid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PVP_PC_RemovePlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 PlyId = 1;
  if (has_plyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->plyid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PVP_PC_RemovePlayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 PlyId = 1;
    if (has_plyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->plyid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PVP_PC_RemovePlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PVP_PC_RemovePlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PVP_PC_RemovePlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PVP_PC_RemovePlayer::MergeFrom(const PVP_PC_RemovePlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_plyid()) {
      set_plyid(from.plyid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PVP_PC_RemovePlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PVP_PC_RemovePlayer::CopyFrom(const PVP_PC_RemovePlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PVP_PC_RemovePlayer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PVP_PC_RemovePlayer::Swap(PVP_PC_RemovePlayer* other) {
  if (other != this) {
    std::swap(plyid_, other->plyid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PVP_PC_RemovePlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PVP_PC_RemovePlayer_descriptor_;
  metadata.reflection = PVP_PC_RemovePlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PVP_CP_LeaveAttack::PVP_CP_LeaveAttack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PVP_CP_LeaveAttack::InitAsDefaultInstance() {
}

PVP_CP_LeaveAttack::PVP_CP_LeaveAttack(const PVP_CP_LeaveAttack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PVP_CP_LeaveAttack::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PVP_CP_LeaveAttack::~PVP_CP_LeaveAttack() {
  SharedDtor();
}

void PVP_CP_LeaveAttack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PVP_CP_LeaveAttack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PVP_CP_LeaveAttack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PVP_CP_LeaveAttack_descriptor_;
}

const PVP_CP_LeaveAttack& PVP_CP_LeaveAttack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pvp_2eproto();
  return *default_instance_;
}

PVP_CP_LeaveAttack* PVP_CP_LeaveAttack::default_instance_ = NULL;

PVP_CP_LeaveAttack* PVP_CP_LeaveAttack::New() const {
  return new PVP_CP_LeaveAttack;
}

void PVP_CP_LeaveAttack::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PVP_CP_LeaveAttack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void PVP_CP_LeaveAttack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PVP_CP_LeaveAttack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PVP_CP_LeaveAttack::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PVP_CP_LeaveAttack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PVP_CP_LeaveAttack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PVP_CP_LeaveAttack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PVP_CP_LeaveAttack::MergeFrom(const PVP_CP_LeaveAttack& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PVP_CP_LeaveAttack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PVP_CP_LeaveAttack::CopyFrom(const PVP_CP_LeaveAttack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PVP_CP_LeaveAttack::IsInitialized() const {

  return true;
}

void PVP_CP_LeaveAttack::Swap(PVP_CP_LeaveAttack* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PVP_CP_LeaveAttack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PVP_CP_LeaveAttack_descriptor_;
  metadata.reflection = PVP_CP_LeaveAttack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PVP_PC_LoadBattle::kPlayerIdFieldNumber;
const int PVP_PC_LoadBattle::kBattleIdFieldNumber;
const int PVP_PC_LoadBattle::kPtFieldNumber;
const int PVP_PC_LoadBattle::kDirFieldNumber;
const int PVP_PC_LoadBattle::kCampFieldNumber;
const int PVP_PC_LoadBattle::kLayerFieldNumber;
const int PVP_PC_LoadBattle::kSurplusTimeFieldNumber;
#endif  // !_MSC_VER

PVP_PC_LoadBattle::PVP_PC_LoadBattle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PVP_PC_LoadBattle::InitAsDefaultInstance() {
  pt_ = const_cast< ::proto::message::Point3D*>(&::proto::message::Point3D::default_instance());
}

PVP_PC_LoadBattle::PVP_PC_LoadBattle(const PVP_PC_LoadBattle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PVP_PC_LoadBattle::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = 0u;
  battleid_ = 0u;
  pt_ = NULL;
  dir_ = 0;
  camp_ = 0;
  layer_ = 0;
  surplustime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PVP_PC_LoadBattle::~PVP_PC_LoadBattle() {
  SharedDtor();
}

void PVP_PC_LoadBattle::SharedDtor() {
  if (this != default_instance_) {
    delete pt_;
  }
}

void PVP_PC_LoadBattle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PVP_PC_LoadBattle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PVP_PC_LoadBattle_descriptor_;
}

const PVP_PC_LoadBattle& PVP_PC_LoadBattle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pvp_2eproto();
  return *default_instance_;
}

PVP_PC_LoadBattle* PVP_PC_LoadBattle::default_instance_ = NULL;

PVP_PC_LoadBattle* PVP_PC_LoadBattle::New() const {
  return new PVP_PC_LoadBattle;
}

void PVP_PC_LoadBattle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_id_ = 0u;
    battleid_ = 0u;
    if (has_pt()) {
      if (pt_ != NULL) pt_->::proto::message::Point3D::Clear();
    }
    dir_ = 0;
    camp_ = 0;
    layer_ = 0;
    surplustime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PVP_PC_LoadBattle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_BattleId;
        break;
      }

      // required uint32 BattleId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BattleId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battleid_)));
          set_has_battleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pt;
        break;
      }

      // optional .proto.message.Point3D pt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_Dir;
        break;
      }

      // optional float Dir = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Dir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dir_)));
          set_has_dir();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_camp;
        break;
      }

      // optional int32 camp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_camp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &camp_)));
          set_has_camp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_Layer;
        break;
      }

      // optional int32 Layer = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Layer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &layer_)));
          set_has_layer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_SurplusTime;
        break;
      }

      // optional int32 SurplusTime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SurplusTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &surplustime_)));
          set_has_surplustime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PVP_PC_LoadBattle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_id(), output);
  }

  // required uint32 BattleId = 2;
  if (has_battleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->battleid(), output);
  }

  // optional .proto.message.Point3D pt = 3;
  if (has_pt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pt(), output);
  }

  // optional float Dir = 4;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->dir(), output);
  }

  // optional int32 camp = 5;
  if (has_camp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->camp(), output);
  }

  // optional int32 Layer = 6;
  if (has_layer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->layer(), output);
  }

  // optional int32 SurplusTime = 7;
  if (has_surplustime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->surplustime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PVP_PC_LoadBattle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_id(), target);
  }

  // required uint32 BattleId = 2;
  if (has_battleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->battleid(), target);
  }

  // optional .proto.message.Point3D pt = 3;
  if (has_pt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pt(), target);
  }

  // optional float Dir = 4;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->dir(), target);
  }

  // optional int32 camp = 5;
  if (has_camp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->camp(), target);
  }

  // optional int32 Layer = 6;
  if (has_layer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->layer(), target);
  }

  // optional int32 SurplusTime = 7;
  if (has_surplustime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->surplustime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PVP_PC_LoadBattle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_id());
    }

    // required uint32 BattleId = 2;
    if (has_battleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battleid());
    }

    // optional .proto.message.Point3D pt = 3;
    if (has_pt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pt());
    }

    // optional float Dir = 4;
    if (has_dir()) {
      total_size += 1 + 4;
    }

    // optional int32 camp = 5;
    if (has_camp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->camp());
    }

    // optional int32 Layer = 6;
    if (has_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->layer());
    }

    // optional int32 SurplusTime = 7;
    if (has_surplustime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->surplustime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PVP_PC_LoadBattle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PVP_PC_LoadBattle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PVP_PC_LoadBattle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PVP_PC_LoadBattle::MergeFrom(const PVP_PC_LoadBattle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_battleid()) {
      set_battleid(from.battleid());
    }
    if (from.has_pt()) {
      mutable_pt()->::proto::message::Point3D::MergeFrom(from.pt());
    }
    if (from.has_dir()) {
      set_dir(from.dir());
    }
    if (from.has_camp()) {
      set_camp(from.camp());
    }
    if (from.has_layer()) {
      set_layer(from.layer());
    }
    if (from.has_surplustime()) {
      set_surplustime(from.surplustime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PVP_PC_LoadBattle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PVP_PC_LoadBattle::CopyFrom(const PVP_PC_LoadBattle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PVP_PC_LoadBattle::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void PVP_PC_LoadBattle::Swap(PVP_PC_LoadBattle* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(battleid_, other->battleid_);
    std::swap(pt_, other->pt_);
    std::swap(dir_, other->dir_);
    std::swap(camp_, other->camp_);
    std::swap(layer_, other->layer_);
    std::swap(surplustime_, other->surplustime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PVP_PC_LoadBattle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PVP_PC_LoadBattle_descriptor_;
  metadata.reflection = PVP_PC_LoadBattle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PVP_CP_LoadBattleOk::PVP_CP_LoadBattleOk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PVP_CP_LoadBattleOk::InitAsDefaultInstance() {
}

PVP_CP_LoadBattleOk::PVP_CP_LoadBattleOk(const PVP_CP_LoadBattleOk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PVP_CP_LoadBattleOk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PVP_CP_LoadBattleOk::~PVP_CP_LoadBattleOk() {
  SharedDtor();
}

void PVP_CP_LoadBattleOk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PVP_CP_LoadBattleOk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PVP_CP_LoadBattleOk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PVP_CP_LoadBattleOk_descriptor_;
}

const PVP_CP_LoadBattleOk& PVP_CP_LoadBattleOk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pvp_2eproto();
  return *default_instance_;
}

PVP_CP_LoadBattleOk* PVP_CP_LoadBattleOk::default_instance_ = NULL;

PVP_CP_LoadBattleOk* PVP_CP_LoadBattleOk::New() const {
  return new PVP_CP_LoadBattleOk;
}

void PVP_CP_LoadBattleOk::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PVP_CP_LoadBattleOk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void PVP_CP_LoadBattleOk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PVP_CP_LoadBattleOk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PVP_CP_LoadBattleOk::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PVP_CP_LoadBattleOk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PVP_CP_LoadBattleOk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PVP_CP_LoadBattleOk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PVP_CP_LoadBattleOk::MergeFrom(const PVP_CP_LoadBattleOk& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PVP_CP_LoadBattleOk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PVP_CP_LoadBattleOk::CopyFrom(const PVP_CP_LoadBattleOk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PVP_CP_LoadBattleOk::IsInitialized() const {

  return true;
}

void PVP_CP_LoadBattleOk::Swap(PVP_CP_LoadBattleOk* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PVP_CP_LoadBattleOk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PVP_CP_LoadBattleOk_descriptor_;
  metadata.reflection = PVP_CP_LoadBattleOk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PVPBuffer::kEventIdFieldNumber;
const int PVPBuffer::kPtFieldNumber;
const int PVPBuffer::kDirFieldNumber;
const int PVPBuffer::kRadiusFieldNumber;
const int PVPBuffer::kNBufferIdFieldNumber;
#endif  // !_MSC_VER

PVPBuffer::PVPBuffer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PVPBuffer::InitAsDefaultInstance() {
  pt_ = const_cast< ::proto::message::Point3D*>(&::proto::message::Point3D::default_instance());
}

PVPBuffer::PVPBuffer(const PVPBuffer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PVPBuffer::SharedCtor() {
  _cached_size_ = 0;
  eventid_ = 0u;
  pt_ = NULL;
  dir_ = 0;
  radius_ = 0;
  nbufferid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PVPBuffer::~PVPBuffer() {
  SharedDtor();
}

void PVPBuffer::SharedDtor() {
  if (this != default_instance_) {
    delete pt_;
  }
}

void PVPBuffer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PVPBuffer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PVPBuffer_descriptor_;
}

const PVPBuffer& PVPBuffer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pvp_2eproto();
  return *default_instance_;
}

PVPBuffer* PVPBuffer::default_instance_ = NULL;

PVPBuffer* PVPBuffer::New() const {
  return new PVPBuffer;
}

void PVPBuffer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eventid_ = 0u;
    if (has_pt()) {
      if (pt_ != NULL) pt_->::proto::message::Point3D::Clear();
    }
    dir_ = 0;
    radius_ = 0;
    nbufferid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PVPBuffer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 EventId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eventid_)));
          set_has_eventid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pt;
        break;
      }

      // optional .proto.message.Point3D pt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_Dir;
        break;
      }

      // optional float Dir = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Dir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dir_)));
          set_has_dir();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_Radius;
        break;
      }

      // optional float Radius = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Radius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &radius_)));
          set_has_radius();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_nBufferId;
        break;
      }

      // optional int32 nBufferId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nBufferId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nbufferid_)));
          set_has_nbufferid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PVPBuffer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 EventId = 1;
  if (has_eventid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->eventid(), output);
  }

  // optional .proto.message.Point3D pt = 2;
  if (has_pt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pt(), output);
  }

  // optional float Dir = 3;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->dir(), output);
  }

  // optional float Radius = 4;
  if (has_radius()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->radius(), output);
  }

  // optional int32 nBufferId = 5;
  if (has_nbufferid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->nbufferid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PVPBuffer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 EventId = 1;
  if (has_eventid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->eventid(), target);
  }

  // optional .proto.message.Point3D pt = 2;
  if (has_pt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pt(), target);
  }

  // optional float Dir = 3;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->dir(), target);
  }

  // optional float Radius = 4;
  if (has_radius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->radius(), target);
  }

  // optional int32 nBufferId = 5;
  if (has_nbufferid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->nbufferid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PVPBuffer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 EventId = 1;
    if (has_eventid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eventid());
    }

    // optional .proto.message.Point3D pt = 2;
    if (has_pt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pt());
    }

    // optional float Dir = 3;
    if (has_dir()) {
      total_size += 1 + 4;
    }

    // optional float Radius = 4;
    if (has_radius()) {
      total_size += 1 + 4;
    }

    // optional int32 nBufferId = 5;
    if (has_nbufferid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nbufferid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PVPBuffer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PVPBuffer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PVPBuffer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PVPBuffer::MergeFrom(const PVPBuffer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eventid()) {
      set_eventid(from.eventid());
    }
    if (from.has_pt()) {
      mutable_pt()->::proto::message::Point3D::MergeFrom(from.pt());
    }
    if (from.has_dir()) {
      set_dir(from.dir());
    }
    if (from.has_radius()) {
      set_radius(from.radius());
    }
    if (from.has_nbufferid()) {
      set_nbufferid(from.nbufferid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PVPBuffer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PVPBuffer::CopyFrom(const PVPBuffer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PVPBuffer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PVPBuffer::Swap(PVPBuffer* other) {
  if (other != this) {
    std::swap(eventid_, other->eventid_);
    std::swap(pt_, other->pt_);
    std::swap(dir_, other->dir_);
    std::swap(radius_, other->radius_);
    std::swap(nbufferid_, other->nbufferid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PVPBuffer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PVPBuffer_descriptor_;
  metadata.reflection = PVPBuffer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PVP_PC_LoadPVPBuffer::kEventListFieldNumber;
#endif  // !_MSC_VER

PVP_PC_LoadPVPBuffer::PVP_PC_LoadPVPBuffer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PVP_PC_LoadPVPBuffer::InitAsDefaultInstance() {
}

PVP_PC_LoadPVPBuffer::PVP_PC_LoadPVPBuffer(const PVP_PC_LoadPVPBuffer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PVP_PC_LoadPVPBuffer::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PVP_PC_LoadPVPBuffer::~PVP_PC_LoadPVPBuffer() {
  SharedDtor();
}

void PVP_PC_LoadPVPBuffer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PVP_PC_LoadPVPBuffer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PVP_PC_LoadPVPBuffer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PVP_PC_LoadPVPBuffer_descriptor_;
}

const PVP_PC_LoadPVPBuffer& PVP_PC_LoadPVPBuffer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pvp_2eproto();
  return *default_instance_;
}

PVP_PC_LoadPVPBuffer* PVP_PC_LoadPVPBuffer::default_instance_ = NULL;

PVP_PC_LoadPVPBuffer* PVP_PC_LoadPVPBuffer::New() const {
  return new PVP_PC_LoadPVPBuffer;
}

void PVP_PC_LoadPVPBuffer::Clear() {
  event_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PVP_PC_LoadPVPBuffer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.message.PVPBuffer event_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_event_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_event_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_event_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PVP_PC_LoadPVPBuffer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.message.PVPBuffer event_list = 1;
  for (int i = 0; i < this->event_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->event_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PVP_PC_LoadPVPBuffer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.message.PVPBuffer event_list = 1;
  for (int i = 0; i < this->event_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->event_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PVP_PC_LoadPVPBuffer::ByteSize() const {
  int total_size = 0;

  // repeated .proto.message.PVPBuffer event_list = 1;
  total_size += 1 * this->event_list_size();
  for (int i = 0; i < this->event_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->event_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PVP_PC_LoadPVPBuffer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PVP_PC_LoadPVPBuffer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PVP_PC_LoadPVPBuffer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PVP_PC_LoadPVPBuffer::MergeFrom(const PVP_PC_LoadPVPBuffer& from) {
  GOOGLE_CHECK_NE(&from, this);
  event_list_.MergeFrom(from.event_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PVP_PC_LoadPVPBuffer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PVP_PC_LoadPVPBuffer::CopyFrom(const PVP_PC_LoadPVPBuffer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PVP_PC_LoadPVPBuffer::IsInitialized() const {

  for (int i = 0; i < event_list_size(); i++) {
    if (!this->event_list(i).IsInitialized()) return false;
  }
  return true;
}

void PVP_PC_LoadPVPBuffer::Swap(PVP_PC_LoadPVPBuffer* other) {
  if (other != this) {
    event_list_.Swap(&other->event_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PVP_PC_LoadPVPBuffer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PVP_PC_LoadPVPBuffer_descriptor_;
  metadata.reflection = PVP_PC_LoadPVPBuffer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PVP_PC_AddPVPBuffer::kEventFieldNumber;
#endif  // !_MSC_VER

PVP_PC_AddPVPBuffer::PVP_PC_AddPVPBuffer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PVP_PC_AddPVPBuffer::InitAsDefaultInstance() {
  event_ = const_cast< ::proto::message::PVPBuffer*>(&::proto::message::PVPBuffer::default_instance());
}

PVP_PC_AddPVPBuffer::PVP_PC_AddPVPBuffer(const PVP_PC_AddPVPBuffer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PVP_PC_AddPVPBuffer::SharedCtor() {
  _cached_size_ = 0;
  event_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PVP_PC_AddPVPBuffer::~PVP_PC_AddPVPBuffer() {
  SharedDtor();
}

void PVP_PC_AddPVPBuffer::SharedDtor() {
  if (this != default_instance_) {
    delete event_;
  }
}

void PVP_PC_AddPVPBuffer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PVP_PC_AddPVPBuffer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PVP_PC_AddPVPBuffer_descriptor_;
}

const PVP_PC_AddPVPBuffer& PVP_PC_AddPVPBuffer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pvp_2eproto();
  return *default_instance_;
}

PVP_PC_AddPVPBuffer* PVP_PC_AddPVPBuffer::default_instance_ = NULL;

PVP_PC_AddPVPBuffer* PVP_PC_AddPVPBuffer::New() const {
  return new PVP_PC_AddPVPBuffer;
}

void PVP_PC_AddPVPBuffer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_event()) {
      if (event_ != NULL) event_->::proto::message::PVPBuffer::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PVP_PC_AddPVPBuffer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .proto.message.PVPBuffer event = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_event()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PVP_PC_AddPVPBuffer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .proto.message.PVPBuffer event = 1;
  if (has_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->event(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PVP_PC_AddPVPBuffer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .proto.message.PVPBuffer event = 1;
  if (has_event()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->event(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PVP_PC_AddPVPBuffer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .proto.message.PVPBuffer event = 1;
    if (has_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->event());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PVP_PC_AddPVPBuffer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PVP_PC_AddPVPBuffer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PVP_PC_AddPVPBuffer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PVP_PC_AddPVPBuffer::MergeFrom(const PVP_PC_AddPVPBuffer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event()) {
      mutable_event()->::proto::message::PVPBuffer::MergeFrom(from.event());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PVP_PC_AddPVPBuffer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PVP_PC_AddPVPBuffer::CopyFrom(const PVP_PC_AddPVPBuffer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PVP_PC_AddPVPBuffer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_event()) {
    if (!this->event().IsInitialized()) return false;
  }
  return true;
}

void PVP_PC_AddPVPBuffer::Swap(PVP_PC_AddPVPBuffer* other) {
  if (other != this) {
    std::swap(event_, other->event_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PVP_PC_AddPVPBuffer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PVP_PC_AddPVPBuffer_descriptor_;
  metadata.reflection = PVP_PC_AddPVPBuffer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PVP_PC_DelPVPBuffer::kEventIdFieldNumber;
#endif  // !_MSC_VER

PVP_PC_DelPVPBuffer::PVP_PC_DelPVPBuffer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PVP_PC_DelPVPBuffer::InitAsDefaultInstance() {
}

PVP_PC_DelPVPBuffer::PVP_PC_DelPVPBuffer(const PVP_PC_DelPVPBuffer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PVP_PC_DelPVPBuffer::SharedCtor() {
  _cached_size_ = 0;
  eventid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PVP_PC_DelPVPBuffer::~PVP_PC_DelPVPBuffer() {
  SharedDtor();
}

void PVP_PC_DelPVPBuffer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PVP_PC_DelPVPBuffer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PVP_PC_DelPVPBuffer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PVP_PC_DelPVPBuffer_descriptor_;
}

const PVP_PC_DelPVPBuffer& PVP_PC_DelPVPBuffer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pvp_2eproto();
  return *default_instance_;
}

PVP_PC_DelPVPBuffer* PVP_PC_DelPVPBuffer::default_instance_ = NULL;

PVP_PC_DelPVPBuffer* PVP_PC_DelPVPBuffer::New() const {
  return new PVP_PC_DelPVPBuffer;
}

void PVP_PC_DelPVPBuffer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eventid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PVP_PC_DelPVPBuffer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 EventId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eventid_)));
          set_has_eventid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PVP_PC_DelPVPBuffer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 EventId = 1;
  if (has_eventid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->eventid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PVP_PC_DelPVPBuffer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 EventId = 1;
  if (has_eventid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->eventid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PVP_PC_DelPVPBuffer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 EventId = 1;
    if (has_eventid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eventid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PVP_PC_DelPVPBuffer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PVP_PC_DelPVPBuffer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PVP_PC_DelPVPBuffer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PVP_PC_DelPVPBuffer::MergeFrom(const PVP_PC_DelPVPBuffer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eventid()) {
      set_eventid(from.eventid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PVP_PC_DelPVPBuffer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PVP_PC_DelPVPBuffer::CopyFrom(const PVP_PC_DelPVPBuffer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PVP_PC_DelPVPBuffer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PVP_PC_DelPVPBuffer::Swap(PVP_PC_DelPVPBuffer* other) {
  if (other != this) {
    std::swap(eventid_, other->eventid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PVP_PC_DelPVPBuffer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PVP_PC_DelPVPBuffer_descriptor_;
  metadata.reflection = PVP_PC_DelPVPBuffer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PVP_CP_DoPVPBuffer::kEventIdFieldNumber;
#endif  // !_MSC_VER

PVP_CP_DoPVPBuffer::PVP_CP_DoPVPBuffer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PVP_CP_DoPVPBuffer::InitAsDefaultInstance() {
}

PVP_CP_DoPVPBuffer::PVP_CP_DoPVPBuffer(const PVP_CP_DoPVPBuffer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PVP_CP_DoPVPBuffer::SharedCtor() {
  _cached_size_ = 0;
  eventid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PVP_CP_DoPVPBuffer::~PVP_CP_DoPVPBuffer() {
  SharedDtor();
}

void PVP_CP_DoPVPBuffer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PVP_CP_DoPVPBuffer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PVP_CP_DoPVPBuffer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PVP_CP_DoPVPBuffer_descriptor_;
}

const PVP_CP_DoPVPBuffer& PVP_CP_DoPVPBuffer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pvp_2eproto();
  return *default_instance_;
}

PVP_CP_DoPVPBuffer* PVP_CP_DoPVPBuffer::default_instance_ = NULL;

PVP_CP_DoPVPBuffer* PVP_CP_DoPVPBuffer::New() const {
  return new PVP_CP_DoPVPBuffer;
}

void PVP_CP_DoPVPBuffer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eventid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PVP_CP_DoPVPBuffer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 EventId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eventid_)));
          set_has_eventid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PVP_CP_DoPVPBuffer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 EventId = 1;
  if (has_eventid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->eventid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PVP_CP_DoPVPBuffer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 EventId = 1;
  if (has_eventid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->eventid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PVP_CP_DoPVPBuffer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 EventId = 1;
    if (has_eventid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eventid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PVP_CP_DoPVPBuffer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PVP_CP_DoPVPBuffer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PVP_CP_DoPVPBuffer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PVP_CP_DoPVPBuffer::MergeFrom(const PVP_CP_DoPVPBuffer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eventid()) {
      set_eventid(from.eventid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PVP_CP_DoPVPBuffer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PVP_CP_DoPVPBuffer::CopyFrom(const PVP_CP_DoPVPBuffer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PVP_CP_DoPVPBuffer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PVP_CP_DoPVPBuffer::Swap(PVP_CP_DoPVPBuffer* other) {
  if (other != this) {
    std::swap(eventid_, other->eventid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PVP_CP_DoPVPBuffer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PVP_CP_DoPVPBuffer_descriptor_;
  metadata.reflection = PVP_CP_DoPVPBuffer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PVPFlagEvent::kEventIdFieldNumber;
const int PVPFlagEvent::kPtFieldNumber;
const int PVPFlagEvent::kDirFieldNumber;
const int PVPFlagEvent::kRadiusFieldNumber;
const int PVPFlagEvent::kNBufferIdFieldNumber;
const int PVPFlagEvent::kCampFieldNumber;
#endif  // !_MSC_VER

PVPFlagEvent::PVPFlagEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PVPFlagEvent::InitAsDefaultInstance() {
  pt_ = const_cast< ::proto::message::Point3D*>(&::proto::message::Point3D::default_instance());
}

PVPFlagEvent::PVPFlagEvent(const PVPFlagEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PVPFlagEvent::SharedCtor() {
  _cached_size_ = 0;
  eventid_ = 0u;
  pt_ = NULL;
  dir_ = 0;
  radius_ = 0;
  nbufferid_ = 0;
  camp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PVPFlagEvent::~PVPFlagEvent() {
  SharedDtor();
}

void PVPFlagEvent::SharedDtor() {
  if (this != default_instance_) {
    delete pt_;
  }
}

void PVPFlagEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PVPFlagEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PVPFlagEvent_descriptor_;
}

const PVPFlagEvent& PVPFlagEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pvp_2eproto();
  return *default_instance_;
}

PVPFlagEvent* PVPFlagEvent::default_instance_ = NULL;

PVPFlagEvent* PVPFlagEvent::New() const {
  return new PVPFlagEvent;
}

void PVPFlagEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eventid_ = 0u;
    if (has_pt()) {
      if (pt_ != NULL) pt_->::proto::message::Point3D::Clear();
    }
    dir_ = 0;
    radius_ = 0;
    nbufferid_ = 0;
    camp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PVPFlagEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 EventId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eventid_)));
          set_has_eventid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pt;
        break;
      }

      // optional .proto.message.Point3D pt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_Dir;
        break;
      }

      // optional float Dir = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Dir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dir_)));
          set_has_dir();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_Radius;
        break;
      }

      // optional float Radius = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Radius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &radius_)));
          set_has_radius();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_nBufferId;
        break;
      }

      // optional int32 nBufferId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nBufferId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nbufferid_)));
          set_has_nbufferid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_camp;
        break;
      }

      // optional int32 camp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_camp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &camp_)));
          set_has_camp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PVPFlagEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 EventId = 1;
  if (has_eventid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->eventid(), output);
  }

  // optional .proto.message.Point3D pt = 2;
  if (has_pt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pt(), output);
  }

  // optional float Dir = 3;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->dir(), output);
  }

  // optional float Radius = 4;
  if (has_radius()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->radius(), output);
  }

  // optional int32 nBufferId = 5;
  if (has_nbufferid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->nbufferid(), output);
  }

  // optional int32 camp = 6;
  if (has_camp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->camp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PVPFlagEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 EventId = 1;
  if (has_eventid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->eventid(), target);
  }

  // optional .proto.message.Point3D pt = 2;
  if (has_pt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pt(), target);
  }

  // optional float Dir = 3;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->dir(), target);
  }

  // optional float Radius = 4;
  if (has_radius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->radius(), target);
  }

  // optional int32 nBufferId = 5;
  if (has_nbufferid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->nbufferid(), target);
  }

  // optional int32 camp = 6;
  if (has_camp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->camp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PVPFlagEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 EventId = 1;
    if (has_eventid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eventid());
    }

    // optional .proto.message.Point3D pt = 2;
    if (has_pt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pt());
    }

    // optional float Dir = 3;
    if (has_dir()) {
      total_size += 1 + 4;
    }

    // optional float Radius = 4;
    if (has_radius()) {
      total_size += 1 + 4;
    }

    // optional int32 nBufferId = 5;
    if (has_nbufferid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nbufferid());
    }

    // optional int32 camp = 6;
    if (has_camp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->camp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PVPFlagEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PVPFlagEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PVPFlagEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PVPFlagEvent::MergeFrom(const PVPFlagEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eventid()) {
      set_eventid(from.eventid());
    }
    if (from.has_pt()) {
      mutable_pt()->::proto::message::Point3D::MergeFrom(from.pt());
    }
    if (from.has_dir()) {
      set_dir(from.dir());
    }
    if (from.has_radius()) {
      set_radius(from.radius());
    }
    if (from.has_nbufferid()) {
      set_nbufferid(from.nbufferid());
    }
    if (from.has_camp()) {
      set_camp(from.camp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PVPFlagEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PVPFlagEvent::CopyFrom(const PVPFlagEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PVPFlagEvent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PVPFlagEvent::Swap(PVPFlagEvent* other) {
  if (other != this) {
    std::swap(eventid_, other->eventid_);
    std::swap(pt_, other->pt_);
    std::swap(dir_, other->dir_);
    std::swap(radius_, other->radius_);
    std::swap(nbufferid_, other->nbufferid_);
    std::swap(camp_, other->camp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PVPFlagEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PVPFlagEvent_descriptor_;
  metadata.reflection = PVPFlagEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PVP_PC_LoadPVPFlagEvent::kFlagListFieldNumber;
#endif  // !_MSC_VER

PVP_PC_LoadPVPFlagEvent::PVP_PC_LoadPVPFlagEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PVP_PC_LoadPVPFlagEvent::InitAsDefaultInstance() {
}

PVP_PC_LoadPVPFlagEvent::PVP_PC_LoadPVPFlagEvent(const PVP_PC_LoadPVPFlagEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PVP_PC_LoadPVPFlagEvent::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PVP_PC_LoadPVPFlagEvent::~PVP_PC_LoadPVPFlagEvent() {
  SharedDtor();
}

void PVP_PC_LoadPVPFlagEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PVP_PC_LoadPVPFlagEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PVP_PC_LoadPVPFlagEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PVP_PC_LoadPVPFlagEvent_descriptor_;
}

const PVP_PC_LoadPVPFlagEvent& PVP_PC_LoadPVPFlagEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pvp_2eproto();
  return *default_instance_;
}

PVP_PC_LoadPVPFlagEvent* PVP_PC_LoadPVPFlagEvent::default_instance_ = NULL;

PVP_PC_LoadPVPFlagEvent* PVP_PC_LoadPVPFlagEvent::New() const {
  return new PVP_PC_LoadPVPFlagEvent;
}

void PVP_PC_LoadPVPFlagEvent::Clear() {
  flag_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PVP_PC_LoadPVPFlagEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.message.PVPFlagEvent flag_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_flag_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_flag_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_flag_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PVP_PC_LoadPVPFlagEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.message.PVPFlagEvent flag_list = 1;
  for (int i = 0; i < this->flag_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->flag_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PVP_PC_LoadPVPFlagEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.message.PVPFlagEvent flag_list = 1;
  for (int i = 0; i < this->flag_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->flag_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PVP_PC_LoadPVPFlagEvent::ByteSize() const {
  int total_size = 0;

  // repeated .proto.message.PVPFlagEvent flag_list = 1;
  total_size += 1 * this->flag_list_size();
  for (int i = 0; i < this->flag_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->flag_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PVP_PC_LoadPVPFlagEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PVP_PC_LoadPVPFlagEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PVP_PC_LoadPVPFlagEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PVP_PC_LoadPVPFlagEvent::MergeFrom(const PVP_PC_LoadPVPFlagEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  flag_list_.MergeFrom(from.flag_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PVP_PC_LoadPVPFlagEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PVP_PC_LoadPVPFlagEvent::CopyFrom(const PVP_PC_LoadPVPFlagEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PVP_PC_LoadPVPFlagEvent::IsInitialized() const {

  for (int i = 0; i < flag_list_size(); i++) {
    if (!this->flag_list(i).IsInitialized()) return false;
  }
  return true;
}

void PVP_PC_LoadPVPFlagEvent::Swap(PVP_PC_LoadPVPFlagEvent* other) {
  if (other != this) {
    flag_list_.Swap(&other->flag_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PVP_PC_LoadPVPFlagEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PVP_PC_LoadPVPFlagEvent_descriptor_;
  metadata.reflection = PVP_PC_LoadPVPFlagEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PVP_CP_CaptureFlag::kEventIdFieldNumber;
#endif  // !_MSC_VER

PVP_CP_CaptureFlag::PVP_CP_CaptureFlag()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PVP_CP_CaptureFlag::InitAsDefaultInstance() {
}

PVP_CP_CaptureFlag::PVP_CP_CaptureFlag(const PVP_CP_CaptureFlag& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PVP_CP_CaptureFlag::SharedCtor() {
  _cached_size_ = 0;
  eventid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PVP_CP_CaptureFlag::~PVP_CP_CaptureFlag() {
  SharedDtor();
}

void PVP_CP_CaptureFlag::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PVP_CP_CaptureFlag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PVP_CP_CaptureFlag::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PVP_CP_CaptureFlag_descriptor_;
}

const PVP_CP_CaptureFlag& PVP_CP_CaptureFlag::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pvp_2eproto();
  return *default_instance_;
}

PVP_CP_CaptureFlag* PVP_CP_CaptureFlag::default_instance_ = NULL;

PVP_CP_CaptureFlag* PVP_CP_CaptureFlag::New() const {
  return new PVP_CP_CaptureFlag;
}

void PVP_CP_CaptureFlag::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eventid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PVP_CP_CaptureFlag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 EventId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eventid_)));
          set_has_eventid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PVP_CP_CaptureFlag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 EventId = 1;
  if (has_eventid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->eventid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PVP_CP_CaptureFlag::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 EventId = 1;
  if (has_eventid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->eventid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PVP_CP_CaptureFlag::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 EventId = 1;
    if (has_eventid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eventid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PVP_CP_CaptureFlag::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PVP_CP_CaptureFlag* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PVP_CP_CaptureFlag*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PVP_CP_CaptureFlag::MergeFrom(const PVP_CP_CaptureFlag& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eventid()) {
      set_eventid(from.eventid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PVP_CP_CaptureFlag::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PVP_CP_CaptureFlag::CopyFrom(const PVP_CP_CaptureFlag& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PVP_CP_CaptureFlag::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PVP_CP_CaptureFlag::Swap(PVP_CP_CaptureFlag* other) {
  if (other != this) {
    std::swap(eventid_, other->eventid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PVP_CP_CaptureFlag::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PVP_CP_CaptureFlag_descriptor_;
  metadata.reflection = PVP_CP_CaptureFlag_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PVP_PC_DelFlag::kEventIdFieldNumber;
#endif  // !_MSC_VER

PVP_PC_DelFlag::PVP_PC_DelFlag()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PVP_PC_DelFlag::InitAsDefaultInstance() {
}

PVP_PC_DelFlag::PVP_PC_DelFlag(const PVP_PC_DelFlag& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PVP_PC_DelFlag::SharedCtor() {
  _cached_size_ = 0;
  eventid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PVP_PC_DelFlag::~PVP_PC_DelFlag() {
  SharedDtor();
}

void PVP_PC_DelFlag::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PVP_PC_DelFlag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PVP_PC_DelFlag::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PVP_PC_DelFlag_descriptor_;
}

const PVP_PC_DelFlag& PVP_PC_DelFlag::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pvp_2eproto();
  return *default_instance_;
}

PVP_PC_DelFlag* PVP_PC_DelFlag::default_instance_ = NULL;

PVP_PC_DelFlag* PVP_PC_DelFlag::New() const {
  return new PVP_PC_DelFlag;
}

void PVP_PC_DelFlag::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eventid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PVP_PC_DelFlag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 EventId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eventid_)));
          set_has_eventid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PVP_PC_DelFlag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 EventId = 1;
  if (has_eventid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->eventid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PVP_PC_DelFlag::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 EventId = 1;
  if (has_eventid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->eventid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PVP_PC_DelFlag::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 EventId = 1;
    if (has_eventid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eventid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PVP_PC_DelFlag::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PVP_PC_DelFlag* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PVP_PC_DelFlag*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PVP_PC_DelFlag::MergeFrom(const PVP_PC_DelFlag& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eventid()) {
      set_eventid(from.eventid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PVP_PC_DelFlag::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PVP_PC_DelFlag::CopyFrom(const PVP_PC_DelFlag& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PVP_PC_DelFlag::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PVP_PC_DelFlag::Swap(PVP_PC_DelFlag* other) {
  if (other != this) {
    std::swap(eventid_, other->eventid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PVP_PC_DelFlag::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PVP_PC_DelFlag_descriptor_;
  metadata.reflection = PVP_PC_DelFlag_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PVP_CP_SubmitFlag::kEventIdFieldNumber;
#endif  // !_MSC_VER

PVP_CP_SubmitFlag::PVP_CP_SubmitFlag()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PVP_CP_SubmitFlag::InitAsDefaultInstance() {
}

PVP_CP_SubmitFlag::PVP_CP_SubmitFlag(const PVP_CP_SubmitFlag& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PVP_CP_SubmitFlag::SharedCtor() {
  _cached_size_ = 0;
  eventid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PVP_CP_SubmitFlag::~PVP_CP_SubmitFlag() {
  SharedDtor();
}

void PVP_CP_SubmitFlag::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PVP_CP_SubmitFlag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PVP_CP_SubmitFlag::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PVP_CP_SubmitFlag_descriptor_;
}

const PVP_CP_SubmitFlag& PVP_CP_SubmitFlag::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pvp_2eproto();
  return *default_instance_;
}

PVP_CP_SubmitFlag* PVP_CP_SubmitFlag::default_instance_ = NULL;

PVP_CP_SubmitFlag* PVP_CP_SubmitFlag::New() const {
  return new PVP_CP_SubmitFlag;
}

void PVP_CP_SubmitFlag::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eventid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PVP_CP_SubmitFlag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 EventId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eventid_)));
          set_has_eventid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PVP_CP_SubmitFlag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 EventId = 1;
  if (has_eventid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->eventid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PVP_CP_SubmitFlag::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 EventId = 1;
  if (has_eventid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->eventid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PVP_CP_SubmitFlag::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 EventId = 1;
    if (has_eventid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eventid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PVP_CP_SubmitFlag::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PVP_CP_SubmitFlag* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PVP_CP_SubmitFlag*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PVP_CP_SubmitFlag::MergeFrom(const PVP_CP_SubmitFlag& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eventid()) {
      set_eventid(from.eventid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PVP_CP_SubmitFlag::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PVP_CP_SubmitFlag::CopyFrom(const PVP_CP_SubmitFlag& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PVP_CP_SubmitFlag::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PVP_CP_SubmitFlag::Swap(PVP_CP_SubmitFlag* other) {
  if (other != this) {
    std::swap(eventid_, other->eventid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PVP_CP_SubmitFlag::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PVP_CP_SubmitFlag_descriptor_;
  metadata.reflection = PVP_CP_SubmitFlag_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PVP_PC_AddFlag::kFlagFieldNumber;
#endif  // !_MSC_VER

PVP_PC_AddFlag::PVP_PC_AddFlag()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PVP_PC_AddFlag::InitAsDefaultInstance() {
  flag_ = const_cast< ::proto::message::PVPFlagEvent*>(&::proto::message::PVPFlagEvent::default_instance());
}

PVP_PC_AddFlag::PVP_PC_AddFlag(const PVP_PC_AddFlag& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PVP_PC_AddFlag::SharedCtor() {
  _cached_size_ = 0;
  flag_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PVP_PC_AddFlag::~PVP_PC_AddFlag() {
  SharedDtor();
}

void PVP_PC_AddFlag::SharedDtor() {
  if (this != default_instance_) {
    delete flag_;
  }
}

void PVP_PC_AddFlag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PVP_PC_AddFlag::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PVP_PC_AddFlag_descriptor_;
}

const PVP_PC_AddFlag& PVP_PC_AddFlag::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pvp_2eproto();
  return *default_instance_;
}

PVP_PC_AddFlag* PVP_PC_AddFlag::default_instance_ = NULL;

PVP_PC_AddFlag* PVP_PC_AddFlag::New() const {
  return new PVP_PC_AddFlag;
}

void PVP_PC_AddFlag::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_flag()) {
      if (flag_ != NULL) flag_->::proto::message::PVPFlagEvent::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PVP_PC_AddFlag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .proto.message.PVPFlagEvent flag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_flag()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PVP_PC_AddFlag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .proto.message.PVPFlagEvent flag = 1;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PVP_PC_AddFlag::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .proto.message.PVPFlagEvent flag = 1;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PVP_PC_AddFlag::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .proto.message.PVPFlagEvent flag = 1;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->flag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PVP_PC_AddFlag::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PVP_PC_AddFlag* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PVP_PC_AddFlag*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PVP_PC_AddFlag::MergeFrom(const PVP_PC_AddFlag& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flag()) {
      mutable_flag()->::proto::message::PVPFlagEvent::MergeFrom(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PVP_PC_AddFlag::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PVP_PC_AddFlag::CopyFrom(const PVP_PC_AddFlag& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PVP_PC_AddFlag::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_flag()) {
    if (!this->flag().IsInitialized()) return false;
  }
  return true;
}

void PVP_PC_AddFlag::Swap(PVP_PC_AddFlag* other) {
  if (other != this) {
    std::swap(flag_, other->flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PVP_PC_AddFlag::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PVP_PC_AddFlag_descriptor_;
  metadata.reflection = PVP_PC_AddFlag_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PVP_PC_DesFlag::kPtFieldNumber;
const int PVP_PC_DesFlag::kRadiusFieldNumber;
#endif  // !_MSC_VER

PVP_PC_DesFlag::PVP_PC_DesFlag()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PVP_PC_DesFlag::InitAsDefaultInstance() {
  pt_ = const_cast< ::proto::message::Point3D*>(&::proto::message::Point3D::default_instance());
}

PVP_PC_DesFlag::PVP_PC_DesFlag(const PVP_PC_DesFlag& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PVP_PC_DesFlag::SharedCtor() {
  _cached_size_ = 0;
  pt_ = NULL;
  radius_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PVP_PC_DesFlag::~PVP_PC_DesFlag() {
  SharedDtor();
}

void PVP_PC_DesFlag::SharedDtor() {
  if (this != default_instance_) {
    delete pt_;
  }
}

void PVP_PC_DesFlag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PVP_PC_DesFlag::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PVP_PC_DesFlag_descriptor_;
}

const PVP_PC_DesFlag& PVP_PC_DesFlag::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pvp_2eproto();
  return *default_instance_;
}

PVP_PC_DesFlag* PVP_PC_DesFlag::default_instance_ = NULL;

PVP_PC_DesFlag* PVP_PC_DesFlag::New() const {
  return new PVP_PC_DesFlag;
}

void PVP_PC_DesFlag::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_pt()) {
      if (pt_ != NULL) pt_->::proto::message::Point3D::Clear();
    }
    radius_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PVP_PC_DesFlag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.message.Point3D pt = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_Radius;
        break;
      }

      // optional float Radius = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Radius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &radius_)));
          set_has_radius();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PVP_PC_DesFlag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto.message.Point3D pt = 1;
  if (has_pt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pt(), output);
  }

  // optional float Radius = 2;
  if (has_radius()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->radius(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PVP_PC_DesFlag::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto.message.Point3D pt = 1;
  if (has_pt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pt(), target);
  }

  // optional float Radius = 2;
  if (has_radius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->radius(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PVP_PC_DesFlag::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto.message.Point3D pt = 1;
    if (has_pt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pt());
    }

    // optional float Radius = 2;
    if (has_radius()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PVP_PC_DesFlag::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PVP_PC_DesFlag* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PVP_PC_DesFlag*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PVP_PC_DesFlag::MergeFrom(const PVP_PC_DesFlag& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pt()) {
      mutable_pt()->::proto::message::Point3D::MergeFrom(from.pt());
    }
    if (from.has_radius()) {
      set_radius(from.radius());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PVP_PC_DesFlag::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PVP_PC_DesFlag::CopyFrom(const PVP_PC_DesFlag& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PVP_PC_DesFlag::IsInitialized() const {

  return true;
}

void PVP_PC_DesFlag::Swap(PVP_PC_DesFlag* other) {
  if (other != this) {
    std::swap(pt_, other->pt_);
    std::swap(radius_, other->radius_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PVP_PC_DesFlag::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PVP_PC_DesFlag_descriptor_;
  metadata.reflection = PVP_PC_DesFlag_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PVP_PC_AttackEnd::kWinCmapFieldNumber;
#endif  // !_MSC_VER

PVP_PC_AttackEnd::PVP_PC_AttackEnd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PVP_PC_AttackEnd::InitAsDefaultInstance() {
}

PVP_PC_AttackEnd::PVP_PC_AttackEnd(const PVP_PC_AttackEnd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PVP_PC_AttackEnd::SharedCtor() {
  _cached_size_ = 0;
  wincmap_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PVP_PC_AttackEnd::~PVP_PC_AttackEnd() {
  SharedDtor();
}

void PVP_PC_AttackEnd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PVP_PC_AttackEnd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PVP_PC_AttackEnd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PVP_PC_AttackEnd_descriptor_;
}

const PVP_PC_AttackEnd& PVP_PC_AttackEnd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pvp_2eproto();
  return *default_instance_;
}

PVP_PC_AttackEnd* PVP_PC_AttackEnd::default_instance_ = NULL;

PVP_PC_AttackEnd* PVP_PC_AttackEnd::New() const {
  return new PVP_PC_AttackEnd;
}

void PVP_PC_AttackEnd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    wincmap_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PVP_PC_AttackEnd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 winCmap = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wincmap_)));
          set_has_wincmap();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PVP_PC_AttackEnd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 winCmap = 1;
  if (has_wincmap()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->wincmap(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PVP_PC_AttackEnd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 winCmap = 1;
  if (has_wincmap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->wincmap(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PVP_PC_AttackEnd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 winCmap = 1;
    if (has_wincmap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wincmap());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PVP_PC_AttackEnd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PVP_PC_AttackEnd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PVP_PC_AttackEnd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PVP_PC_AttackEnd::MergeFrom(const PVP_PC_AttackEnd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_wincmap()) {
      set_wincmap(from.wincmap());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PVP_PC_AttackEnd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PVP_PC_AttackEnd::CopyFrom(const PVP_PC_AttackEnd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PVP_PC_AttackEnd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PVP_PC_AttackEnd::Swap(PVP_PC_AttackEnd* other) {
  if (other != this) {
    std::swap(wincmap_, other->wincmap_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PVP_PC_AttackEnd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PVP_PC_AttackEnd_descriptor_;
  metadata.reflection = PVP_PC_AttackEnd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KillRanking::kPlyIDFieldNumber;
const int KillRanking::kKillNumFieldNumber;
const int KillRanking::kDieNumFieldNumber;
#endif  // !_MSC_VER

KillRanking::KillRanking()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KillRanking::InitAsDefaultInstance() {
}

KillRanking::KillRanking(const KillRanking& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KillRanking::SharedCtor() {
  _cached_size_ = 0;
  plyid_ = 0;
  killnum_ = 0;
  dienum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KillRanking::~KillRanking() {
  SharedDtor();
}

void KillRanking::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KillRanking::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KillRanking::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KillRanking_descriptor_;
}

const KillRanking& KillRanking::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pvp_2eproto();
  return *default_instance_;
}

KillRanking* KillRanking::default_instance_ = NULL;

KillRanking* KillRanking::New() const {
  return new KillRanking;
}

void KillRanking::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    plyid_ = 0;
    killnum_ = 0;
    dienum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KillRanking::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 PlyID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &plyid_)));
          set_has_plyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_KillNum;
        break;
      }

      // optional int32 KillNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_KillNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &killnum_)));
          set_has_killnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_DieNum;
        break;
      }

      // optional int32 DieNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DieNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dienum_)));
          set_has_dienum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KillRanking::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 PlyID = 1;
  if (has_plyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->plyid(), output);
  }

  // optional int32 KillNum = 2;
  if (has_killnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->killnum(), output);
  }

  // optional int32 DieNum = 3;
  if (has_dienum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->dienum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KillRanking::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 PlyID = 1;
  if (has_plyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->plyid(), target);
  }

  // optional int32 KillNum = 2;
  if (has_killnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->killnum(), target);
  }

  // optional int32 DieNum = 3;
  if (has_dienum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->dienum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KillRanking::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 PlyID = 1;
    if (has_plyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->plyid());
    }

    // optional int32 KillNum = 2;
    if (has_killnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->killnum());
    }

    // optional int32 DieNum = 3;
    if (has_dienum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dienum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KillRanking::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KillRanking* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KillRanking*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KillRanking::MergeFrom(const KillRanking& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_plyid()) {
      set_plyid(from.plyid());
    }
    if (from.has_killnum()) {
      set_killnum(from.killnum());
    }
    if (from.has_dienum()) {
      set_dienum(from.dienum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KillRanking::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KillRanking::CopyFrom(const KillRanking& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KillRanking::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void KillRanking::Swap(KillRanking* other) {
  if (other != this) {
    std::swap(plyid_, other->plyid_);
    std::swap(killnum_, other->killnum_);
    std::swap(dienum_, other->dienum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KillRanking::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KillRanking_descriptor_;
  metadata.reflection = KillRanking_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PVP_PC_KillRanking::kListFieldNumber;
#endif  // !_MSC_VER

PVP_PC_KillRanking::PVP_PC_KillRanking()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PVP_PC_KillRanking::InitAsDefaultInstance() {
}

PVP_PC_KillRanking::PVP_PC_KillRanking(const PVP_PC_KillRanking& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PVP_PC_KillRanking::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PVP_PC_KillRanking::~PVP_PC_KillRanking() {
  SharedDtor();
}

void PVP_PC_KillRanking::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PVP_PC_KillRanking::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PVP_PC_KillRanking::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PVP_PC_KillRanking_descriptor_;
}

const PVP_PC_KillRanking& PVP_PC_KillRanking::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pvp_2eproto();
  return *default_instance_;
}

PVP_PC_KillRanking* PVP_PC_KillRanking::default_instance_ = NULL;

PVP_PC_KillRanking* PVP_PC_KillRanking::New() const {
  return new PVP_PC_KillRanking;
}

void PVP_PC_KillRanking::Clear() {
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PVP_PC_KillRanking::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.message.KillRanking list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PVP_PC_KillRanking::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.message.KillRanking list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PVP_PC_KillRanking::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.message.KillRanking list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PVP_PC_KillRanking::ByteSize() const {
  int total_size = 0;

  // repeated .proto.message.KillRanking list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PVP_PC_KillRanking::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PVP_PC_KillRanking* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PVP_PC_KillRanking*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PVP_PC_KillRanking::MergeFrom(const PVP_PC_KillRanking& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PVP_PC_KillRanking::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PVP_PC_KillRanking::CopyFrom(const PVP_PC_KillRanking& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PVP_PC_KillRanking::IsInitialized() const {

  for (int i = 0; i < list_size(); i++) {
    if (!this->list(i).IsInitialized()) return false;
  }
  return true;
}

void PVP_PC_KillRanking::Swap(PVP_PC_KillRanking* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PVP_PC_KillRanking::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PVP_PC_KillRanking_descriptor_;
  metadata.reflection = PVP_PC_KillRanking_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IntegralRanking::kPlyIDFieldNumber;
const int IntegralRanking::kIntegralFieldNumber;
const int IntegralRanking::kFlagNumFieldNumber;
#endif  // !_MSC_VER

IntegralRanking::IntegralRanking()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IntegralRanking::InitAsDefaultInstance() {
}

IntegralRanking::IntegralRanking(const IntegralRanking& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IntegralRanking::SharedCtor() {
  _cached_size_ = 0;
  plyid_ = 0;
  integral_ = 0;
  flagnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IntegralRanking::~IntegralRanking() {
  SharedDtor();
}

void IntegralRanking::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IntegralRanking::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IntegralRanking::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IntegralRanking_descriptor_;
}

const IntegralRanking& IntegralRanking::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pvp_2eproto();
  return *default_instance_;
}

IntegralRanking* IntegralRanking::default_instance_ = NULL;

IntegralRanking* IntegralRanking::New() const {
  return new IntegralRanking;
}

void IntegralRanking::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    plyid_ = 0;
    integral_ = 0;
    flagnum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IntegralRanking::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 PlyID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &plyid_)));
          set_has_plyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Integral;
        break;
      }

      // optional int32 Integral = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Integral:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &integral_)));
          set_has_integral();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_flagNum;
        break;
      }

      // optional int32 flagNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flagNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flagnum_)));
          set_has_flagnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IntegralRanking::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 PlyID = 1;
  if (has_plyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->plyid(), output);
  }

  // optional int32 Integral = 2;
  if (has_integral()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->integral(), output);
  }

  // optional int32 flagNum = 3;
  if (has_flagnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->flagnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IntegralRanking::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 PlyID = 1;
  if (has_plyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->plyid(), target);
  }

  // optional int32 Integral = 2;
  if (has_integral()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->integral(), target);
  }

  // optional int32 flagNum = 3;
  if (has_flagnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->flagnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IntegralRanking::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 PlyID = 1;
    if (has_plyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->plyid());
    }

    // optional int32 Integral = 2;
    if (has_integral()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->integral());
    }

    // optional int32 flagNum = 3;
    if (has_flagnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flagnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IntegralRanking::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IntegralRanking* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IntegralRanking*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IntegralRanking::MergeFrom(const IntegralRanking& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_plyid()) {
      set_plyid(from.plyid());
    }
    if (from.has_integral()) {
      set_integral(from.integral());
    }
    if (from.has_flagnum()) {
      set_flagnum(from.flagnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IntegralRanking::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntegralRanking::CopyFrom(const IntegralRanking& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntegralRanking::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void IntegralRanking::Swap(IntegralRanking* other) {
  if (other != this) {
    std::swap(plyid_, other->plyid_);
    std::swap(integral_, other->integral_);
    std::swap(flagnum_, other->flagnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IntegralRanking::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IntegralRanking_descriptor_;
  metadata.reflection = IntegralRanking_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PVP_PC_IntegralRanking::kListFieldNumber;
#endif  // !_MSC_VER

PVP_PC_IntegralRanking::PVP_PC_IntegralRanking()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PVP_PC_IntegralRanking::InitAsDefaultInstance() {
}

PVP_PC_IntegralRanking::PVP_PC_IntegralRanking(const PVP_PC_IntegralRanking& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PVP_PC_IntegralRanking::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PVP_PC_IntegralRanking::~PVP_PC_IntegralRanking() {
  SharedDtor();
}

void PVP_PC_IntegralRanking::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PVP_PC_IntegralRanking::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PVP_PC_IntegralRanking::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PVP_PC_IntegralRanking_descriptor_;
}

const PVP_PC_IntegralRanking& PVP_PC_IntegralRanking::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pvp_2eproto();
  return *default_instance_;
}

PVP_PC_IntegralRanking* PVP_PC_IntegralRanking::default_instance_ = NULL;

PVP_PC_IntegralRanking* PVP_PC_IntegralRanking::New() const {
  return new PVP_PC_IntegralRanking;
}

void PVP_PC_IntegralRanking::Clear() {
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PVP_PC_IntegralRanking::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.message.IntegralRanking list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PVP_PC_IntegralRanking::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.message.IntegralRanking list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PVP_PC_IntegralRanking::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.message.IntegralRanking list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PVP_PC_IntegralRanking::ByteSize() const {
  int total_size = 0;

  // repeated .proto.message.IntegralRanking list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PVP_PC_IntegralRanking::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PVP_PC_IntegralRanking* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PVP_PC_IntegralRanking*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PVP_PC_IntegralRanking::MergeFrom(const PVP_PC_IntegralRanking& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PVP_PC_IntegralRanking::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PVP_PC_IntegralRanking::CopyFrom(const PVP_PC_IntegralRanking& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PVP_PC_IntegralRanking::IsInitialized() const {

  for (int i = 0; i < list_size(); i++) {
    if (!this->list(i).IsInitialized()) return false;
  }
  return true;
}

void PVP_PC_IntegralRanking::Swap(PVP_PC_IntegralRanking* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PVP_PC_IntegralRanking::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PVP_PC_IntegralRanking_descriptor_;
  metadata.reflection = PVP_PC_IntegralRanking_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PVP_PC_Dismiss::PVP_PC_Dismiss()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PVP_PC_Dismiss::InitAsDefaultInstance() {
}

PVP_PC_Dismiss::PVP_PC_Dismiss(const PVP_PC_Dismiss& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PVP_PC_Dismiss::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PVP_PC_Dismiss::~PVP_PC_Dismiss() {
  SharedDtor();
}

void PVP_PC_Dismiss::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PVP_PC_Dismiss::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PVP_PC_Dismiss::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PVP_PC_Dismiss_descriptor_;
}

const PVP_PC_Dismiss& PVP_PC_Dismiss::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pvp_2eproto();
  return *default_instance_;
}

PVP_PC_Dismiss* PVP_PC_Dismiss::default_instance_ = NULL;

PVP_PC_Dismiss* PVP_PC_Dismiss::New() const {
  return new PVP_PC_Dismiss;
}

void PVP_PC_Dismiss::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PVP_PC_Dismiss::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void PVP_PC_Dismiss::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PVP_PC_Dismiss::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PVP_PC_Dismiss::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PVP_PC_Dismiss::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PVP_PC_Dismiss* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PVP_PC_Dismiss*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PVP_PC_Dismiss::MergeFrom(const PVP_PC_Dismiss& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PVP_PC_Dismiss::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PVP_PC_Dismiss::CopyFrom(const PVP_PC_Dismiss& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PVP_PC_Dismiss::IsInitialized() const {

  return true;
}

void PVP_PC_Dismiss::Swap(PVP_PC_Dismiss* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PVP_PC_Dismiss::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PVP_PC_Dismiss_descriptor_;
  metadata.reflection = PVP_PC_Dismiss_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PVP_CP_PVPSurrender::PVP_CP_PVPSurrender()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PVP_CP_PVPSurrender::InitAsDefaultInstance() {
}

PVP_CP_PVPSurrender::PVP_CP_PVPSurrender(const PVP_CP_PVPSurrender& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PVP_CP_PVPSurrender::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PVP_CP_PVPSurrender::~PVP_CP_PVPSurrender() {
  SharedDtor();
}

void PVP_CP_PVPSurrender::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PVP_CP_PVPSurrender::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PVP_CP_PVPSurrender::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PVP_CP_PVPSurrender_descriptor_;
}

const PVP_CP_PVPSurrender& PVP_CP_PVPSurrender::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pvp_2eproto();
  return *default_instance_;
}

PVP_CP_PVPSurrender* PVP_CP_PVPSurrender::default_instance_ = NULL;

PVP_CP_PVPSurrender* PVP_CP_PVPSurrender::New() const {
  return new PVP_CP_PVPSurrender;
}

void PVP_CP_PVPSurrender::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PVP_CP_PVPSurrender::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void PVP_CP_PVPSurrender::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PVP_CP_PVPSurrender::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PVP_CP_PVPSurrender::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PVP_CP_PVPSurrender::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PVP_CP_PVPSurrender* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PVP_CP_PVPSurrender*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PVP_CP_PVPSurrender::MergeFrom(const PVP_CP_PVPSurrender& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PVP_CP_PVPSurrender::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PVP_CP_PVPSurrender::CopyFrom(const PVP_CP_PVPSurrender& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PVP_CP_PVPSurrender::IsInitialized() const {

  return true;
}

void PVP_CP_PVPSurrender::Swap(PVP_CP_PVPSurrender* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PVP_CP_PVPSurrender::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PVP_CP_PVPSurrender_descriptor_;
  metadata.reflection = PVP_CP_PVPSurrender_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PVP_PC_BattleBegin::kBattletypeFieldNumber;
const int PVP_PC_BattleBegin::kStarttimeFieldNumber;
#endif  // !_MSC_VER

PVP_PC_BattleBegin::PVP_PC_BattleBegin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PVP_PC_BattleBegin::InitAsDefaultInstance() {
}

PVP_PC_BattleBegin::PVP_PC_BattleBegin(const PVP_PC_BattleBegin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PVP_PC_BattleBegin::SharedCtor() {
  _cached_size_ = 0;
  battletype_ = 0u;
  starttime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PVP_PC_BattleBegin::~PVP_PC_BattleBegin() {
  SharedDtor();
}

void PVP_PC_BattleBegin::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PVP_PC_BattleBegin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PVP_PC_BattleBegin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PVP_PC_BattleBegin_descriptor_;
}

const PVP_PC_BattleBegin& PVP_PC_BattleBegin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pvp_2eproto();
  return *default_instance_;
}

PVP_PC_BattleBegin* PVP_PC_BattleBegin::default_instance_ = NULL;

PVP_PC_BattleBegin* PVP_PC_BattleBegin::New() const {
  return new PVP_PC_BattleBegin;
}

void PVP_PC_BattleBegin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    battletype_ = 0u;
    starttime_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PVP_PC_BattleBegin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 battletype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battletype_)));
          set_has_battletype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_starttime;
        break;
      }

      // optional uint64 starttime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_starttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PVP_PC_BattleBegin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 battletype = 1;
  if (has_battletype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->battletype(), output);
  }

  // optional uint64 starttime = 2;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->starttime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PVP_PC_BattleBegin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 battletype = 1;
  if (has_battletype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->battletype(), target);
  }

  // optional uint64 starttime = 2;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->starttime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PVP_PC_BattleBegin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 battletype = 1;
    if (has_battletype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battletype());
    }

    // optional uint64 starttime = 2;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->starttime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PVP_PC_BattleBegin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PVP_PC_BattleBegin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PVP_PC_BattleBegin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PVP_PC_BattleBegin::MergeFrom(const PVP_PC_BattleBegin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_battletype()) {
      set_battletype(from.battletype());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PVP_PC_BattleBegin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PVP_PC_BattleBegin::CopyFrom(const PVP_PC_BattleBegin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PVP_PC_BattleBegin::IsInitialized() const {

  return true;
}

void PVP_PC_BattleBegin::Swap(PVP_PC_BattleBegin* other) {
  if (other != this) {
    std::swap(battletype_, other->battletype_);
    std::swap(starttime_, other->starttime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PVP_PC_BattleBegin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PVP_PC_BattleBegin_descriptor_;
  metadata.reflection = PVP_PC_BattleBegin_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace proto

// @@protoc_insertion_point(global_scope)
