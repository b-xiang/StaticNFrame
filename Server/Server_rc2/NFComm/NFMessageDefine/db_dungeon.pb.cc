// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: db_dungeon.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "db_dungeon.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace message {

namespace {

const ::google::protobuf::Descriptor* DungeonInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DungeonInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_db_5fdungeon_2eproto() {
  protobuf_AddDesc_db_5fdungeon_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "db_dungeon.proto");
  GOOGLE_CHECK(file != NULL);
  DungeonInfo_descriptor_ = file->message_type(0);
  static const int DungeonInfo_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonInfo, single_ordinary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonInfo, single_elite_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonInfo, trial_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonInfo, other_pass_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonInfo, grade_s_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonInfo, single_material_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonInfo, single_trial_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonInfo, grade_s_rewardtimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonInfo, day_friendly_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonInfo, week_friendly_),
  };
  DungeonInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DungeonInfo_descriptor_,
      DungeonInfo::default_instance_,
      DungeonInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DungeonInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_db_5fdungeon_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DungeonInfo_descriptor_, &DungeonInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_db_5fdungeon_2eproto() {
  delete DungeonInfo::default_instance_;
  delete DungeonInfo_reflection_;
}

void protobuf_AddDesc_db_5fdungeon_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::proto::message::protobuf_AddDesc_common_2eproto();
  ::proto::message::protobuf_AddDesc_dungeon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020db_dungeon.proto\022\rproto.message\032\014commo"
    "n.proto\032\rdungeon.proto\"\305\003\n\013DungeonInfo\022:"
    "\n\017single_ordinary\030\001 \001(\0132!.proto.message."
    "SingleStoryDungeon\0227\n\014single_elite\030\002 \001(\013"
    "2!.proto.message.SingleStoryDungeon\0220\n\005T"
    "rial\030\003 \001(\0132!.proto.message.SingleStoryDu"
    "ngeon\0223\n\017other_pass_list\030\004 \003(\0132\032.proto.m"
    "essage.PassDungeon\022\025\n\rgrade_s_times\030\005 \001("
    "\005\0223\n\017single_material\030\006 \003(\0132\032.proto.messa"
    "ge.PassDungeon\022.\n\014single_trial\030\007 \003(\0132\030.p"
    "roto.message.TrialInfo\0221\n\023grade_S_reward"
    "times\030\010 \003(\0132\024.proto.message.IDNum\022\024\n\014day"
    "_friendly\030\t \001(\r\022\025\n\rweek_friendly\030\n \001(\rB\017"
    "\n\rproto.message", 535);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "db_dungeon.proto", &protobuf_RegisterTypes);
  DungeonInfo::default_instance_ = new DungeonInfo();
  DungeonInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_db_5fdungeon_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_db_5fdungeon_2eproto {
  StaticDescriptorInitializer_db_5fdungeon_2eproto() {
    protobuf_AddDesc_db_5fdungeon_2eproto();
  }
} static_descriptor_initializer_db_5fdungeon_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int DungeonInfo::kSingleOrdinaryFieldNumber;
const int DungeonInfo::kSingleEliteFieldNumber;
const int DungeonInfo::kTrialFieldNumber;
const int DungeonInfo::kOtherPassListFieldNumber;
const int DungeonInfo::kGradeSTimesFieldNumber;
const int DungeonInfo::kSingleMaterialFieldNumber;
const int DungeonInfo::kSingleTrialFieldNumber;
const int DungeonInfo::kGradeSRewardtimesFieldNumber;
const int DungeonInfo::kDayFriendlyFieldNumber;
const int DungeonInfo::kWeekFriendlyFieldNumber;
#endif  // !_MSC_VER

DungeonInfo::DungeonInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DungeonInfo::InitAsDefaultInstance() {
  single_ordinary_ = const_cast< ::proto::message::SingleStoryDungeon*>(&::proto::message::SingleStoryDungeon::default_instance());
  single_elite_ = const_cast< ::proto::message::SingleStoryDungeon*>(&::proto::message::SingleStoryDungeon::default_instance());
  trial_ = const_cast< ::proto::message::SingleStoryDungeon*>(&::proto::message::SingleStoryDungeon::default_instance());
}

DungeonInfo::DungeonInfo(const DungeonInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DungeonInfo::SharedCtor() {
  _cached_size_ = 0;
  single_ordinary_ = NULL;
  single_elite_ = NULL;
  trial_ = NULL;
  grade_s_times_ = 0;
  day_friendly_ = 0u;
  week_friendly_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DungeonInfo::~DungeonInfo() {
  SharedDtor();
}

void DungeonInfo::SharedDtor() {
  if (this != default_instance_) {
    delete single_ordinary_;
    delete single_elite_;
    delete trial_;
  }
}

void DungeonInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DungeonInfo_descriptor_;
}

const DungeonInfo& DungeonInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_5fdungeon_2eproto();
  return *default_instance_;
}

DungeonInfo* DungeonInfo::default_instance_ = NULL;

DungeonInfo* DungeonInfo::New() const {
  return new DungeonInfo;
}

void DungeonInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_single_ordinary()) {
      if (single_ordinary_ != NULL) single_ordinary_->::proto::message::SingleStoryDungeon::Clear();
    }
    if (has_single_elite()) {
      if (single_elite_ != NULL) single_elite_->::proto::message::SingleStoryDungeon::Clear();
    }
    if (has_trial()) {
      if (trial_ != NULL) trial_->::proto::message::SingleStoryDungeon::Clear();
    }
    grade_s_times_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    day_friendly_ = 0u;
    week_friendly_ = 0u;
  }
  other_pass_list_.Clear();
  single_material_.Clear();
  single_trial_.Clear();
  grade_s_rewardtimes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DungeonInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.message.SingleStoryDungeon single_ordinary = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_single_ordinary()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_single_elite;
        break;
      }

      // optional .proto.message.SingleStoryDungeon single_elite = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_single_elite:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_single_elite()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Trial;
        break;
      }

      // optional .proto.message.SingleStoryDungeon Trial = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Trial:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trial()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_other_pass_list;
        break;
      }

      // repeated .proto.message.PassDungeon other_pass_list = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_other_pass_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_other_pass_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_other_pass_list;
        if (input->ExpectTag(40)) goto parse_grade_s_times;
        break;
      }

      // optional int32 grade_s_times = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grade_s_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grade_s_times_)));
          set_has_grade_s_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_single_material;
        break;
      }

      // repeated .proto.message.PassDungeon single_material = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_single_material:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_single_material()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_single_material;
        if (input->ExpectTag(58)) goto parse_single_trial;
        break;
      }

      // repeated .proto.message.TrialInfo single_trial = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_single_trial:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_single_trial()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_single_trial;
        if (input->ExpectTag(66)) goto parse_grade_S_rewardtimes;
        break;
      }

      // repeated .proto.message.IDNum grade_S_rewardtimes = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_grade_S_rewardtimes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_grade_s_rewardtimes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_grade_S_rewardtimes;
        if (input->ExpectTag(72)) goto parse_day_friendly;
        break;
      }

      // optional uint32 day_friendly = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_day_friendly:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &day_friendly_)));
          set_has_day_friendly();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_week_friendly;
        break;
      }

      // optional uint32 week_friendly = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_week_friendly:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &week_friendly_)));
          set_has_week_friendly();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DungeonInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto.message.SingleStoryDungeon single_ordinary = 1;
  if (has_single_ordinary()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->single_ordinary(), output);
  }

  // optional .proto.message.SingleStoryDungeon single_elite = 2;
  if (has_single_elite()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->single_elite(), output);
  }

  // optional .proto.message.SingleStoryDungeon Trial = 3;
  if (has_trial()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->trial(), output);
  }

  // repeated .proto.message.PassDungeon other_pass_list = 4;
  for (int i = 0; i < this->other_pass_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->other_pass_list(i), output);
  }

  // optional int32 grade_s_times = 5;
  if (has_grade_s_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->grade_s_times(), output);
  }

  // repeated .proto.message.PassDungeon single_material = 6;
  for (int i = 0; i < this->single_material_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->single_material(i), output);
  }

  // repeated .proto.message.TrialInfo single_trial = 7;
  for (int i = 0; i < this->single_trial_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->single_trial(i), output);
  }

  // repeated .proto.message.IDNum grade_S_rewardtimes = 8;
  for (int i = 0; i < this->grade_s_rewardtimes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->grade_s_rewardtimes(i), output);
  }

  // optional uint32 day_friendly = 9;
  if (has_day_friendly()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->day_friendly(), output);
  }

  // optional uint32 week_friendly = 10;
  if (has_week_friendly()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->week_friendly(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DungeonInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto.message.SingleStoryDungeon single_ordinary = 1;
  if (has_single_ordinary()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->single_ordinary(), target);
  }

  // optional .proto.message.SingleStoryDungeon single_elite = 2;
  if (has_single_elite()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->single_elite(), target);
  }

  // optional .proto.message.SingleStoryDungeon Trial = 3;
  if (has_trial()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->trial(), target);
  }

  // repeated .proto.message.PassDungeon other_pass_list = 4;
  for (int i = 0; i < this->other_pass_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->other_pass_list(i), target);
  }

  // optional int32 grade_s_times = 5;
  if (has_grade_s_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->grade_s_times(), target);
  }

  // repeated .proto.message.PassDungeon single_material = 6;
  for (int i = 0; i < this->single_material_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->single_material(i), target);
  }

  // repeated .proto.message.TrialInfo single_trial = 7;
  for (int i = 0; i < this->single_trial_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->single_trial(i), target);
  }

  // repeated .proto.message.IDNum grade_S_rewardtimes = 8;
  for (int i = 0; i < this->grade_s_rewardtimes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->grade_s_rewardtimes(i), target);
  }

  // optional uint32 day_friendly = 9;
  if (has_day_friendly()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->day_friendly(), target);
  }

  // optional uint32 week_friendly = 10;
  if (has_week_friendly()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->week_friendly(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DungeonInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto.message.SingleStoryDungeon single_ordinary = 1;
    if (has_single_ordinary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->single_ordinary());
    }

    // optional .proto.message.SingleStoryDungeon single_elite = 2;
    if (has_single_elite()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->single_elite());
    }

    // optional .proto.message.SingleStoryDungeon Trial = 3;
    if (has_trial()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->trial());
    }

    // optional int32 grade_s_times = 5;
    if (has_grade_s_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grade_s_times());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 day_friendly = 9;
    if (has_day_friendly()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->day_friendly());
    }

    // optional uint32 week_friendly = 10;
    if (has_week_friendly()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->week_friendly());
    }

  }
  // repeated .proto.message.PassDungeon other_pass_list = 4;
  total_size += 1 * this->other_pass_list_size();
  for (int i = 0; i < this->other_pass_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->other_pass_list(i));
  }

  // repeated .proto.message.PassDungeon single_material = 6;
  total_size += 1 * this->single_material_size();
  for (int i = 0; i < this->single_material_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->single_material(i));
  }

  // repeated .proto.message.TrialInfo single_trial = 7;
  total_size += 1 * this->single_trial_size();
  for (int i = 0; i < this->single_trial_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->single_trial(i));
  }

  // repeated .proto.message.IDNum grade_S_rewardtimes = 8;
  total_size += 1 * this->grade_s_rewardtimes_size();
  for (int i = 0; i < this->grade_s_rewardtimes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->grade_s_rewardtimes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DungeonInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DungeonInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DungeonInfo::MergeFrom(const DungeonInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  other_pass_list_.MergeFrom(from.other_pass_list_);
  single_material_.MergeFrom(from.single_material_);
  single_trial_.MergeFrom(from.single_trial_);
  grade_s_rewardtimes_.MergeFrom(from.grade_s_rewardtimes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_single_ordinary()) {
      mutable_single_ordinary()->::proto::message::SingleStoryDungeon::MergeFrom(from.single_ordinary());
    }
    if (from.has_single_elite()) {
      mutable_single_elite()->::proto::message::SingleStoryDungeon::MergeFrom(from.single_elite());
    }
    if (from.has_trial()) {
      mutable_trial()->::proto::message::SingleStoryDungeon::MergeFrom(from.trial());
    }
    if (from.has_grade_s_times()) {
      set_grade_s_times(from.grade_s_times());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_day_friendly()) {
      set_day_friendly(from.day_friendly());
    }
    if (from.has_week_friendly()) {
      set_week_friendly(from.week_friendly());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DungeonInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonInfo::CopyFrom(const DungeonInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonInfo::IsInitialized() const {

  return true;
}

void DungeonInfo::Swap(DungeonInfo* other) {
  if (other != this) {
    std::swap(single_ordinary_, other->single_ordinary_);
    std::swap(single_elite_, other->single_elite_);
    std::swap(trial_, other->trial_);
    other_pass_list_.Swap(&other->other_pass_list_);
    std::swap(grade_s_times_, other->grade_s_times_);
    single_material_.Swap(&other->single_material_);
    single_trial_.Swap(&other->single_trial_);
    grade_s_rewardtimes_.Swap(&other->grade_s_rewardtimes_);
    std::swap(day_friendly_, other->day_friendly_);
    std::swap(week_friendly_, other->week_friendly_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DungeonInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DungeonInfo_descriptor_;
  metadata.reflection = DungeonInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace proto

// @@protoc_insertion_point(global_scope)
