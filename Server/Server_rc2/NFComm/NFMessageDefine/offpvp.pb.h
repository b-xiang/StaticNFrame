// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: offpvp.proto

#ifndef PROTOBUF_offpvp_2eproto__INCLUDED
#define PROTOBUF_offpvp_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)

namespace proto {
namespace message {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_offpvp_2eproto();
void protobuf_AssignDesc_offpvp_2eproto();
void protobuf_ShutdownFile_offpvp_2eproto();

class OffPVPRecord;
class FighterInfo;
class OffPVP_CS_GetSelfData;
class OffPVP_SC_GetSelfData;
class OffPVP_CS_GetOtherData;
class OffPVP_CS_ChangeFighter;
class OffPVP_SC_GetOtherData;
class OffPVP_CS_Fight;
class OffPVP_SC_FightResult;
class OffPVP_CS_BuyCounts;
class OffPVP_SC_BuyCountsResult;
class OffPVP_CS_GetReword;
class OffPVP_SC_GetRewordResult;
class OffPVP_SC_UpdateCounts;
class OffPVP_CS_GetPVPRecord;
class OffPVP_SC_GetPVPRecordResult;

// ===================================================================

class OffPVPRecord : public ::google::protobuf::Message {
 public:
  OffPVPRecord();
  virtual ~OffPVPRecord();

  OffPVPRecord(const OffPVPRecord& from);

  inline OffPVPRecord& operator=(const OffPVPRecord& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OffPVPRecord& default_instance();

  void Swap(OffPVPRecord* other);

  // implements Message ----------------------------------------------

  OffPVPRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OffPVPRecord& from);
  void MergeFrom(const OffPVPRecord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 fighter = 1;
  inline bool has_fighter() const;
  inline void clear_fighter();
  static const int kFighterFieldNumber = 1;
  inline ::google::protobuf::uint64 fighter() const;
  inline void set_fighter(::google::protobuf::uint64 value);

  // optional string fitname = 2;
  inline bool has_fitname() const;
  inline void clear_fitname();
  static const int kFitnameFieldNumber = 2;
  inline const ::std::string& fitname() const;
  inline void set_fitname(const ::std::string& value);
  inline void set_fitname(const char* value);
  inline void set_fitname(const char* value, size_t size);
  inline ::std::string* mutable_fitname();
  inline ::std::string* release_fitname();
  inline void set_allocated_fitname(::std::string* fitname);

  // optional uint32 foldranking = 3;
  inline bool has_foldranking() const;
  inline void clear_foldranking();
  static const int kFoldrankingFieldNumber = 3;
  inline ::google::protobuf::uint32 foldranking() const;
  inline void set_foldranking(::google::protobuf::uint32 value);

  // optional uint32 fnewranking = 4;
  inline bool has_fnewranking() const;
  inline void clear_fnewranking();
  static const int kFnewrankingFieldNumber = 4;
  inline ::google::protobuf::uint32 fnewranking() const;
  inline void set_fnewranking(::google::protobuf::uint32 value);

  // optional uint64 behiter = 5;
  inline bool has_behiter() const;
  inline void clear_behiter();
  static const int kBehiterFieldNumber = 5;
  inline ::google::protobuf::uint64 behiter() const;
  inline void set_behiter(::google::protobuf::uint64 value);

  // optional string bitname = 6;
  inline bool has_bitname() const;
  inline void clear_bitname();
  static const int kBitnameFieldNumber = 6;
  inline const ::std::string& bitname() const;
  inline void set_bitname(const ::std::string& value);
  inline void set_bitname(const char* value);
  inline void set_bitname(const char* value, size_t size);
  inline ::std::string* mutable_bitname();
  inline ::std::string* release_bitname();
  inline void set_allocated_bitname(::std::string* bitname);

  // optional uint32 boldranking = 7;
  inline bool has_boldranking() const;
  inline void clear_boldranking();
  static const int kBoldrankingFieldNumber = 7;
  inline ::google::protobuf::uint32 boldranking() const;
  inline void set_boldranking(::google::protobuf::uint32 value);

  // optional uint32 bnewranking = 8;
  inline bool has_bnewranking() const;
  inline void clear_bnewranking();
  static const int kBnewrankingFieldNumber = 8;
  inline ::google::protobuf::uint32 bnewranking() const;
  inline void set_bnewranking(::google::protobuf::uint32 value);

  // optional uint64 recordtime = 9;
  inline bool has_recordtime() const;
  inline void clear_recordtime();
  static const int kRecordtimeFieldNumber = 9;
  inline ::google::protobuf::uint64 recordtime() const;
  inline void set_recordtime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.message.OffPVPRecord)
 private:
  inline void set_has_fighter();
  inline void clear_has_fighter();
  inline void set_has_fitname();
  inline void clear_has_fitname();
  inline void set_has_foldranking();
  inline void clear_has_foldranking();
  inline void set_has_fnewranking();
  inline void clear_has_fnewranking();
  inline void set_has_behiter();
  inline void clear_has_behiter();
  inline void set_has_bitname();
  inline void clear_has_bitname();
  inline void set_has_boldranking();
  inline void clear_has_boldranking();
  inline void set_has_bnewranking();
  inline void clear_has_bnewranking();
  inline void set_has_recordtime();
  inline void clear_has_recordtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 fighter_;
  ::std::string* fitname_;
  ::google::protobuf::uint32 foldranking_;
  ::google::protobuf::uint32 fnewranking_;
  ::google::protobuf::uint64 behiter_;
  ::std::string* bitname_;
  ::google::protobuf::uint32 boldranking_;
  ::google::protobuf::uint32 bnewranking_;
  ::google::protobuf::uint64 recordtime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_offpvp_2eproto();
  friend void protobuf_AssignDesc_offpvp_2eproto();
  friend void protobuf_ShutdownFile_offpvp_2eproto();

  void InitAsDefaultInstance();
  static OffPVPRecord* default_instance_;
};
// -------------------------------------------------------------------

class FighterInfo : public ::google::protobuf::Message {
 public:
  FighterInfo();
  virtual ~FighterInfo();

  FighterInfo(const FighterInfo& from);

  inline FighterInfo& operator=(const FighterInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FighterInfo& default_instance();

  void Swap(FighterInfo* other);

  // implements Message ----------------------------------------------

  FighterInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FighterInfo& from);
  void MergeFrom(const FighterInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ranking = 1;
  inline bool has_ranking() const;
  inline void clear_ranking();
  static const int kRankingFieldNumber = 1;
  inline ::google::protobuf::int32 ranking() const;
  inline void set_ranking(::google::protobuf::int32 value);

  // optional int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 fightvalue = 3;
  inline bool has_fightvalue() const;
  inline void clear_fightvalue();
  static const int kFightvalueFieldNumber = 3;
  inline ::google::protobuf::int32 fightvalue() const;
  inline void set_fightvalue(::google::protobuf::int32 value);

  // repeated int32 equipid = 5;
  inline int equipid_size() const;
  inline void clear_equipid();
  static const int kEquipidFieldNumber = 5;
  inline ::google::protobuf::int32 equipid(int index) const;
  inline void set_equipid(int index, ::google::protobuf::int32 value);
  inline void add_equipid(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      equipid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_equipid();

  // optional string playername = 6;
  inline bool has_playername() const;
  inline void clear_playername();
  static const int kPlayernameFieldNumber = 6;
  inline const ::std::string& playername() const;
  inline void set_playername(const ::std::string& value);
  inline void set_playername(const char* value);
  inline void set_playername(const char* value, size_t size);
  inline ::std::string* mutable_playername();
  inline ::std::string* release_playername();
  inline void set_allocated_playername(::std::string* playername);

  // optional int32 skinid = 7;
  inline bool has_skinid() const;
  inline void clear_skinid();
  static const int kSkinidFieldNumber = 7;
  inline ::google::protobuf::int32 skinid() const;
  inline void set_skinid(::google::protobuf::int32 value);

  // optional int32 career = 8;
  inline bool has_career() const;
  inline void clear_career();
  static const int kCareerFieldNumber = 8;
  inline ::google::protobuf::int32 career() const;
  inline void set_career(::google::protobuf::int32 value);

  // optional uint32 level = 9;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 9;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 suit_id = 10;
  inline bool has_suit_id() const;
  inline void clear_suit_id();
  static const int kSuitIdFieldNumber = 10;
  inline ::google::protobuf::uint32 suit_id() const;
  inline void set_suit_id(::google::protobuf::uint32 value);

  // optional int32 weaponskinid = 11;
  inline bool has_weaponskinid() const;
  inline void clear_weaponskinid();
  static const int kWeaponskinidFieldNumber = 11;
  inline ::google::protobuf::int32 weaponskinid() const;
  inline void set_weaponskinid(::google::protobuf::int32 value);

  // optional uint32 dhlevel = 12;
  inline bool has_dhlevel() const;
  inline void clear_dhlevel();
  static const int kDhlevelFieldNumber = 12;
  inline ::google::protobuf::uint32 dhlevel() const;
  inline void set_dhlevel(::google::protobuf::uint32 value);

  // repeated uint32 playerskill = 13;
  inline int playerskill_size() const;
  inline void clear_playerskill();
  static const int kPlayerskillFieldNumber = 13;
  inline ::google::protobuf::uint32 playerskill(int index) const;
  inline void set_playerskill(int index, ::google::protobuf::uint32 value);
  inline void add_playerskill(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      playerskill() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_playerskill();

  // optional .proto.message.PlayerEffect playeratt = 14;
  inline bool has_playeratt() const;
  inline void clear_playeratt();
  static const int kPlayerattFieldNumber = 14;
  inline const ::proto::message::PlayerEffect& playeratt() const;
  inline ::proto::message::PlayerEffect* mutable_playeratt();
  inline ::proto::message::PlayerEffect* release_playeratt();
  inline void set_allocated_playeratt(::proto::message::PlayerEffect* playeratt);

  // optional int32 petid = 15;
  inline bool has_petid() const;
  inline void clear_petid();
  static const int kPetidFieldNumber = 15;
  inline ::google::protobuf::int32 petid() const;
  inline void set_petid(::google::protobuf::int32 value);

  // optional uint64 playerid = 16;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 16;
  inline ::google::protobuf::uint64 playerid() const;
  inline void set_playerid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.message.FighterInfo)
 private:
  inline void set_has_ranking();
  inline void clear_has_ranking();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_fightvalue();
  inline void clear_has_fightvalue();
  inline void set_has_playername();
  inline void clear_has_playername();
  inline void set_has_skinid();
  inline void clear_has_skinid();
  inline void set_has_career();
  inline void clear_has_career();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_suit_id();
  inline void clear_has_suit_id();
  inline void set_has_weaponskinid();
  inline void clear_has_weaponskinid();
  inline void set_has_dhlevel();
  inline void clear_has_dhlevel();
  inline void set_has_playeratt();
  inline void clear_has_playeratt();
  inline void set_has_petid();
  inline void clear_has_petid();
  inline void set_has_playerid();
  inline void clear_has_playerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ranking_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > equipid_;
  ::google::protobuf::int32 fightvalue_;
  ::google::protobuf::int32 skinid_;
  ::std::string* playername_;
  ::google::protobuf::int32 career_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 suit_id_;
  ::google::protobuf::int32 weaponskinid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > playerskill_;
  ::google::protobuf::uint32 dhlevel_;
  ::google::protobuf::int32 petid_;
  ::proto::message::PlayerEffect* playeratt_;
  ::google::protobuf::uint64 playerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(15 + 31) / 32];

  friend void  protobuf_AddDesc_offpvp_2eproto();
  friend void protobuf_AssignDesc_offpvp_2eproto();
  friend void protobuf_ShutdownFile_offpvp_2eproto();

  void InitAsDefaultInstance();
  static FighterInfo* default_instance_;
};
// -------------------------------------------------------------------

class OffPVP_CS_GetSelfData : public ::google::protobuf::Message {
 public:
  OffPVP_CS_GetSelfData();
  virtual ~OffPVP_CS_GetSelfData();

  OffPVP_CS_GetSelfData(const OffPVP_CS_GetSelfData& from);

  inline OffPVP_CS_GetSelfData& operator=(const OffPVP_CS_GetSelfData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OffPVP_CS_GetSelfData& default_instance();

  void Swap(OffPVP_CS_GetSelfData* other);

  // implements Message ----------------------------------------------

  OffPVP_CS_GetSelfData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OffPVP_CS_GetSelfData& from);
  void MergeFrom(const OffPVP_CS_GetSelfData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.message.OffPVP_CS_GetSelfData)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_offpvp_2eproto();
  friend void protobuf_AssignDesc_offpvp_2eproto();
  friend void protobuf_ShutdownFile_offpvp_2eproto();

  void InitAsDefaultInstance();
  static OffPVP_CS_GetSelfData* default_instance_;
};
// -------------------------------------------------------------------

class OffPVP_SC_GetSelfData : public ::google::protobuf::Message {
 public:
  OffPVP_SC_GetSelfData();
  virtual ~OffPVP_SC_GetSelfData();

  OffPVP_SC_GetSelfData(const OffPVP_SC_GetSelfData& from);

  inline OffPVP_SC_GetSelfData& operator=(const OffPVP_SC_GetSelfData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OffPVP_SC_GetSelfData& default_instance();

  void Swap(OffPVP_SC_GetSelfData* other);

  // implements Message ----------------------------------------------

  OffPVP_SC_GetSelfData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OffPVP_SC_GetSelfData& from);
  void MergeFrom(const OffPVP_SC_GetSelfData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 fightcounts = 1;
  inline bool has_fightcounts() const;
  inline void clear_fightcounts();
  static const int kFightcountsFieldNumber = 1;
  inline ::google::protobuf::int32 fightcounts() const;
  inline void set_fightcounts(::google::protobuf::int32 value);

  // optional uint64 rewordtime = 2;
  inline bool has_rewordtime() const;
  inline void clear_rewordtime();
  static const int kRewordtimeFieldNumber = 2;
  inline ::google::protobuf::uint64 rewordtime() const;
  inline void set_rewordtime(::google::protobuf::uint64 value);

  // optional int32 ranking = 3;
  inline bool has_ranking() const;
  inline void clear_ranking();
  static const int kRankingFieldNumber = 3;
  inline ::google::protobuf::int32 ranking() const;
  inline void set_ranking(::google::protobuf::int32 value);

  // optional int32 officeid = 4;
  inline bool has_officeid() const;
  inline void clear_officeid();
  static const int kOfficeidFieldNumber = 4;
  inline ::google::protobuf::int32 officeid() const;
  inline void set_officeid(::google::protobuf::int32 value);

  // optional uint32 showoffid = 5;
  inline bool has_showoffid() const;
  inline void clear_showoffid();
  static const int kShowoffidFieldNumber = 5;
  inline ::google::protobuf::uint32 showoffid() const;
  inline void set_showoffid(::google::protobuf::uint32 value);

  // repeated .proto.message.FighterInfo infolist = 6;
  inline int infolist_size() const;
  inline void clear_infolist();
  static const int kInfolistFieldNumber = 6;
  inline const ::proto::message::FighterInfo& infolist(int index) const;
  inline ::proto::message::FighterInfo* mutable_infolist(int index);
  inline ::proto::message::FighterInfo* add_infolist();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::message::FighterInfo >&
      infolist() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::message::FighterInfo >*
      mutable_infolist();

  // optional uint32 rewordid = 7;
  inline bool has_rewordid() const;
  inline void clear_rewordid();
  static const int kRewordidFieldNumber = 7;
  inline ::google::protobuf::uint32 rewordid() const;
  inline void set_rewordid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.message.OffPVP_SC_GetSelfData)
 private:
  inline void set_has_fightcounts();
  inline void clear_has_fightcounts();
  inline void set_has_rewordtime();
  inline void clear_has_rewordtime();
  inline void set_has_ranking();
  inline void clear_has_ranking();
  inline void set_has_officeid();
  inline void clear_has_officeid();
  inline void set_has_showoffid();
  inline void clear_has_showoffid();
  inline void set_has_rewordid();
  inline void clear_has_rewordid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 rewordtime_;
  ::google::protobuf::int32 fightcounts_;
  ::google::protobuf::int32 ranking_;
  ::google::protobuf::int32 officeid_;
  ::google::protobuf::uint32 showoffid_;
  ::google::protobuf::RepeatedPtrField< ::proto::message::FighterInfo > infolist_;
  ::google::protobuf::uint32 rewordid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_offpvp_2eproto();
  friend void protobuf_AssignDesc_offpvp_2eproto();
  friend void protobuf_ShutdownFile_offpvp_2eproto();

  void InitAsDefaultInstance();
  static OffPVP_SC_GetSelfData* default_instance_;
};
// -------------------------------------------------------------------

class OffPVP_CS_GetOtherData : public ::google::protobuf::Message {
 public:
  OffPVP_CS_GetOtherData();
  virtual ~OffPVP_CS_GetOtherData();

  OffPVP_CS_GetOtherData(const OffPVP_CS_GetOtherData& from);

  inline OffPVP_CS_GetOtherData& operator=(const OffPVP_CS_GetOtherData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OffPVP_CS_GetOtherData& default_instance();

  void Swap(OffPVP_CS_GetOtherData* other);

  // implements Message ----------------------------------------------

  OffPVP_CS_GetOtherData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OffPVP_CS_GetOtherData& from);
  void MergeFrom(const OffPVP_CS_GetOtherData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 officeid = 1;
  inline bool has_officeid() const;
  inline void clear_officeid();
  static const int kOfficeidFieldNumber = 1;
  inline ::google::protobuf::int32 officeid() const;
  inline void set_officeid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.message.OffPVP_CS_GetOtherData)
 private:
  inline void set_has_officeid();
  inline void clear_has_officeid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 officeid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_offpvp_2eproto();
  friend void protobuf_AssignDesc_offpvp_2eproto();
  friend void protobuf_ShutdownFile_offpvp_2eproto();

  void InitAsDefaultInstance();
  static OffPVP_CS_GetOtherData* default_instance_;
};
// -------------------------------------------------------------------

class OffPVP_CS_ChangeFighter : public ::google::protobuf::Message {
 public:
  OffPVP_CS_ChangeFighter();
  virtual ~OffPVP_CS_ChangeFighter();

  OffPVP_CS_ChangeFighter(const OffPVP_CS_ChangeFighter& from);

  inline OffPVP_CS_ChangeFighter& operator=(const OffPVP_CS_ChangeFighter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OffPVP_CS_ChangeFighter& default_instance();

  void Swap(OffPVP_CS_ChangeFighter* other);

  // implements Message ----------------------------------------------

  OffPVP_CS_ChangeFighter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OffPVP_CS_ChangeFighter& from);
  void MergeFrom(const OffPVP_CS_ChangeFighter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 officeid = 1;
  inline bool has_officeid() const;
  inline void clear_officeid();
  static const int kOfficeidFieldNumber = 1;
  inline ::google::protobuf::int32 officeid() const;
  inline void set_officeid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.message.OffPVP_CS_ChangeFighter)
 private:
  inline void set_has_officeid();
  inline void clear_has_officeid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 officeid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_offpvp_2eproto();
  friend void protobuf_AssignDesc_offpvp_2eproto();
  friend void protobuf_ShutdownFile_offpvp_2eproto();

  void InitAsDefaultInstance();
  static OffPVP_CS_ChangeFighter* default_instance_;
};
// -------------------------------------------------------------------

class OffPVP_SC_GetOtherData : public ::google::protobuf::Message {
 public:
  OffPVP_SC_GetOtherData();
  virtual ~OffPVP_SC_GetOtherData();

  OffPVP_SC_GetOtherData(const OffPVP_SC_GetOtherData& from);

  inline OffPVP_SC_GetOtherData& operator=(const OffPVP_SC_GetOtherData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OffPVP_SC_GetOtherData& default_instance();

  void Swap(OffPVP_SC_GetOtherData* other);

  // implements Message ----------------------------------------------

  OffPVP_SC_GetOtherData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OffPVP_SC_GetOtherData& from);
  void MergeFrom(const OffPVP_SC_GetOtherData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 officeid = 1;
  inline bool has_officeid() const;
  inline void clear_officeid();
  static const int kOfficeidFieldNumber = 1;
  inline ::google::protobuf::int32 officeid() const;
  inline void set_officeid(::google::protobuf::int32 value);

  // repeated .proto.message.FighterInfo infolist = 2;
  inline int infolist_size() const;
  inline void clear_infolist();
  static const int kInfolistFieldNumber = 2;
  inline const ::proto::message::FighterInfo& infolist(int index) const;
  inline ::proto::message::FighterInfo* mutable_infolist(int index);
  inline ::proto::message::FighterInfo* add_infolist();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::message::FighterInfo >&
      infolist() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::message::FighterInfo >*
      mutable_infolist();

  // @@protoc_insertion_point(class_scope:proto.message.OffPVP_SC_GetOtherData)
 private:
  inline void set_has_officeid();
  inline void clear_has_officeid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto::message::FighterInfo > infolist_;
  ::google::protobuf::int32 officeid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_offpvp_2eproto();
  friend void protobuf_AssignDesc_offpvp_2eproto();
  friend void protobuf_ShutdownFile_offpvp_2eproto();

  void InitAsDefaultInstance();
  static OffPVP_SC_GetOtherData* default_instance_;
};
// -------------------------------------------------------------------

class OffPVP_CS_Fight : public ::google::protobuf::Message {
 public:
  OffPVP_CS_Fight();
  virtual ~OffPVP_CS_Fight();

  OffPVP_CS_Fight(const OffPVP_CS_Fight& from);

  inline OffPVP_CS_Fight& operator=(const OffPVP_CS_Fight& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OffPVP_CS_Fight& default_instance();

  void Swap(OffPVP_CS_Fight* other);

  // implements Message ----------------------------------------------

  OffPVP_CS_Fight* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OffPVP_CS_Fight& from);
  void MergeFrom(const OffPVP_CS_Fight& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ranking = 1;
  inline bool has_ranking() const;
  inline void clear_ranking();
  static const int kRankingFieldNumber = 1;
  inline ::google::protobuf::int32 ranking() const;
  inline void set_ranking(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.message.OffPVP_CS_Fight)
 private:
  inline void set_has_ranking();
  inline void clear_has_ranking();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ranking_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_offpvp_2eproto();
  friend void protobuf_AssignDesc_offpvp_2eproto();
  friend void protobuf_ShutdownFile_offpvp_2eproto();

  void InitAsDefaultInstance();
  static OffPVP_CS_Fight* default_instance_;
};
// -------------------------------------------------------------------

class OffPVP_SC_FightResult : public ::google::protobuf::Message {
 public:
  OffPVP_SC_FightResult();
  virtual ~OffPVP_SC_FightResult();

  OffPVP_SC_FightResult(const OffPVP_SC_FightResult& from);

  inline OffPVP_SC_FightResult& operator=(const OffPVP_SC_FightResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OffPVP_SC_FightResult& default_instance();

  void Swap(OffPVP_SC_FightResult* other);

  // implements Message ----------------------------------------------

  OffPVP_SC_FightResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OffPVP_SC_FightResult& from);
  void MergeFrom(const OffPVP_SC_FightResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional int32 errorcode = 2;
  inline bool has_errorcode() const;
  inline void clear_errorcode();
  static const int kErrorcodeFieldNumber = 2;
  inline ::google::protobuf::int32 errorcode() const;
  inline void set_errorcode(::google::protobuf::int32 value);

  // optional .proto.message.OfflineDataDetail data = 3;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline const ::proto::message::OfflineDataDetail& data() const;
  inline ::proto::message::OfflineDataDetail* mutable_data();
  inline ::proto::message::OfflineDataDetail* release_data();
  inline void set_allocated_data(::proto::message::OfflineDataDetail* data);

  // @@protoc_insertion_point(class_scope:proto.message.OffPVP_SC_FightResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_errorcode();
  inline void clear_has_errorcode();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 errorcode_;
  ::proto::message::OfflineDataDetail* data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_offpvp_2eproto();
  friend void protobuf_AssignDesc_offpvp_2eproto();
  friend void protobuf_ShutdownFile_offpvp_2eproto();

  void InitAsDefaultInstance();
  static OffPVP_SC_FightResult* default_instance_;
};
// -------------------------------------------------------------------

class OffPVP_CS_BuyCounts : public ::google::protobuf::Message {
 public:
  OffPVP_CS_BuyCounts();
  virtual ~OffPVP_CS_BuyCounts();

  OffPVP_CS_BuyCounts(const OffPVP_CS_BuyCounts& from);

  inline OffPVP_CS_BuyCounts& operator=(const OffPVP_CS_BuyCounts& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OffPVP_CS_BuyCounts& default_instance();

  void Swap(OffPVP_CS_BuyCounts* other);

  // implements Message ----------------------------------------------

  OffPVP_CS_BuyCounts* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OffPVP_CS_BuyCounts& from);
  void MergeFrom(const OffPVP_CS_BuyCounts& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.message.OffPVP_CS_BuyCounts)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_offpvp_2eproto();
  friend void protobuf_AssignDesc_offpvp_2eproto();
  friend void protobuf_ShutdownFile_offpvp_2eproto();

  void InitAsDefaultInstance();
  static OffPVP_CS_BuyCounts* default_instance_;
};
// -------------------------------------------------------------------

class OffPVP_SC_BuyCountsResult : public ::google::protobuf::Message {
 public:
  OffPVP_SC_BuyCountsResult();
  virtual ~OffPVP_SC_BuyCountsResult();

  OffPVP_SC_BuyCountsResult(const OffPVP_SC_BuyCountsResult& from);

  inline OffPVP_SC_BuyCountsResult& operator=(const OffPVP_SC_BuyCountsResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OffPVP_SC_BuyCountsResult& default_instance();

  void Swap(OffPVP_SC_BuyCountsResult* other);

  // implements Message ----------------------------------------------

  OffPVP_SC_BuyCountsResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OffPVP_SC_BuyCountsResult& from);
  void MergeFrom(const OffPVP_SC_BuyCountsResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional int32 counts = 2;
  inline bool has_counts() const;
  inline void clear_counts();
  static const int kCountsFieldNumber = 2;
  inline ::google::protobuf::int32 counts() const;
  inline void set_counts(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.message.OffPVP_SC_BuyCountsResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_counts();
  inline void clear_has_counts();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 counts_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_offpvp_2eproto();
  friend void protobuf_AssignDesc_offpvp_2eproto();
  friend void protobuf_ShutdownFile_offpvp_2eproto();

  void InitAsDefaultInstance();
  static OffPVP_SC_BuyCountsResult* default_instance_;
};
// -------------------------------------------------------------------

class OffPVP_CS_GetReword : public ::google::protobuf::Message {
 public:
  OffPVP_CS_GetReword();
  virtual ~OffPVP_CS_GetReword();

  OffPVP_CS_GetReword(const OffPVP_CS_GetReword& from);

  inline OffPVP_CS_GetReword& operator=(const OffPVP_CS_GetReword& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OffPVP_CS_GetReword& default_instance();

  void Swap(OffPVP_CS_GetReword* other);

  // implements Message ----------------------------------------------

  OffPVP_CS_GetReword* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OffPVP_CS_GetReword& from);
  void MergeFrom(const OffPVP_CS_GetReword& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.message.OffPVP_CS_GetReword)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_offpvp_2eproto();
  friend void protobuf_AssignDesc_offpvp_2eproto();
  friend void protobuf_ShutdownFile_offpvp_2eproto();

  void InitAsDefaultInstance();
  static OffPVP_CS_GetReword* default_instance_;
};
// -------------------------------------------------------------------

class OffPVP_SC_GetRewordResult : public ::google::protobuf::Message {
 public:
  OffPVP_SC_GetRewordResult();
  virtual ~OffPVP_SC_GetRewordResult();

  OffPVP_SC_GetRewordResult(const OffPVP_SC_GetRewordResult& from);

  inline OffPVP_SC_GetRewordResult& operator=(const OffPVP_SC_GetRewordResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OffPVP_SC_GetRewordResult& default_instance();

  void Swap(OffPVP_SC_GetRewordResult* other);

  // implements Message ----------------------------------------------

  OffPVP_SC_GetRewordResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OffPVP_SC_GetRewordResult& from);
  void MergeFrom(const OffPVP_SC_GetRewordResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional int64 nexttime = 2;
  inline bool has_nexttime() const;
  inline void clear_nexttime();
  static const int kNexttimeFieldNumber = 2;
  inline ::google::protobuf::int64 nexttime() const;
  inline void set_nexttime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:proto.message.OffPVP_SC_GetRewordResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_nexttime();
  inline void clear_has_nexttime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 nexttime_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_offpvp_2eproto();
  friend void protobuf_AssignDesc_offpvp_2eproto();
  friend void protobuf_ShutdownFile_offpvp_2eproto();

  void InitAsDefaultInstance();
  static OffPVP_SC_GetRewordResult* default_instance_;
};
// -------------------------------------------------------------------

class OffPVP_SC_UpdateCounts : public ::google::protobuf::Message {
 public:
  OffPVP_SC_UpdateCounts();
  virtual ~OffPVP_SC_UpdateCounts();

  OffPVP_SC_UpdateCounts(const OffPVP_SC_UpdateCounts& from);

  inline OffPVP_SC_UpdateCounts& operator=(const OffPVP_SC_UpdateCounts& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OffPVP_SC_UpdateCounts& default_instance();

  void Swap(OffPVP_SC_UpdateCounts* other);

  // implements Message ----------------------------------------------

  OffPVP_SC_UpdateCounts* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OffPVP_SC_UpdateCounts& from);
  void MergeFrom(const OffPVP_SC_UpdateCounts& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 newcounts = 1;
  inline bool has_newcounts() const;
  inline void clear_newcounts();
  static const int kNewcountsFieldNumber = 1;
  inline ::google::protobuf::int32 newcounts() const;
  inline void set_newcounts(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.message.OffPVP_SC_UpdateCounts)
 private:
  inline void set_has_newcounts();
  inline void clear_has_newcounts();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 newcounts_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_offpvp_2eproto();
  friend void protobuf_AssignDesc_offpvp_2eproto();
  friend void protobuf_ShutdownFile_offpvp_2eproto();

  void InitAsDefaultInstance();
  static OffPVP_SC_UpdateCounts* default_instance_;
};
// -------------------------------------------------------------------

class OffPVP_CS_GetPVPRecord : public ::google::protobuf::Message {
 public:
  OffPVP_CS_GetPVPRecord();
  virtual ~OffPVP_CS_GetPVPRecord();

  OffPVP_CS_GetPVPRecord(const OffPVP_CS_GetPVPRecord& from);

  inline OffPVP_CS_GetPVPRecord& operator=(const OffPVP_CS_GetPVPRecord& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OffPVP_CS_GetPVPRecord& default_instance();

  void Swap(OffPVP_CS_GetPVPRecord* other);

  // implements Message ----------------------------------------------

  OffPVP_CS_GetPVPRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OffPVP_CS_GetPVPRecord& from);
  void MergeFrom(const OffPVP_CS_GetPVPRecord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.message.OffPVP_CS_GetPVPRecord)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_offpvp_2eproto();
  friend void protobuf_AssignDesc_offpvp_2eproto();
  friend void protobuf_ShutdownFile_offpvp_2eproto();

  void InitAsDefaultInstance();
  static OffPVP_CS_GetPVPRecord* default_instance_;
};
// -------------------------------------------------------------------

class OffPVP_SC_GetPVPRecordResult : public ::google::protobuf::Message {
 public:
  OffPVP_SC_GetPVPRecordResult();
  virtual ~OffPVP_SC_GetPVPRecordResult();

  OffPVP_SC_GetPVPRecordResult(const OffPVP_SC_GetPVPRecordResult& from);

  inline OffPVP_SC_GetPVPRecordResult& operator=(const OffPVP_SC_GetPVPRecordResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OffPVP_SC_GetPVPRecordResult& default_instance();

  void Swap(OffPVP_SC_GetPVPRecordResult* other);

  // implements Message ----------------------------------------------

  OffPVP_SC_GetPVPRecordResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OffPVP_SC_GetPVPRecordResult& from);
  void MergeFrom(const OffPVP_SC_GetPVPRecordResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // repeated .proto.message.OffPVPRecord datalist = 2;
  inline int datalist_size() const;
  inline void clear_datalist();
  static const int kDatalistFieldNumber = 2;
  inline const ::proto::message::OffPVPRecord& datalist(int index) const;
  inline ::proto::message::OffPVPRecord* mutable_datalist(int index);
  inline ::proto::message::OffPVPRecord* add_datalist();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::message::OffPVPRecord >&
      datalist() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::message::OffPVPRecord >*
      mutable_datalist();

  // @@protoc_insertion_point(class_scope:proto.message.OffPVP_SC_GetPVPRecordResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto::message::OffPVPRecord > datalist_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_offpvp_2eproto();
  friend void protobuf_AssignDesc_offpvp_2eproto();
  friend void protobuf_ShutdownFile_offpvp_2eproto();

  void InitAsDefaultInstance();
  static OffPVP_SC_GetPVPRecordResult* default_instance_;
};
// ===================================================================


// ===================================================================

// OffPVPRecord

// optional uint64 fighter = 1;
inline bool OffPVPRecord::has_fighter() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OffPVPRecord::set_has_fighter() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OffPVPRecord::clear_has_fighter() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OffPVPRecord::clear_fighter() {
  fighter_ = GOOGLE_ULONGLONG(0);
  clear_has_fighter();
}
inline ::google::protobuf::uint64 OffPVPRecord::fighter() const {
  return fighter_;
}
inline void OffPVPRecord::set_fighter(::google::protobuf::uint64 value) {
  set_has_fighter();
  fighter_ = value;
}

// optional string fitname = 2;
inline bool OffPVPRecord::has_fitname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OffPVPRecord::set_has_fitname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OffPVPRecord::clear_has_fitname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OffPVPRecord::clear_fitname() {
  if (fitname_ != &::google::protobuf::internal::kEmptyString) {
    fitname_->clear();
  }
  clear_has_fitname();
}
inline const ::std::string& OffPVPRecord::fitname() const {
  return *fitname_;
}
inline void OffPVPRecord::set_fitname(const ::std::string& value) {
  set_has_fitname();
  if (fitname_ == &::google::protobuf::internal::kEmptyString) {
    fitname_ = new ::std::string;
  }
  fitname_->assign(value);
}
inline void OffPVPRecord::set_fitname(const char* value) {
  set_has_fitname();
  if (fitname_ == &::google::protobuf::internal::kEmptyString) {
    fitname_ = new ::std::string;
  }
  fitname_->assign(value);
}
inline void OffPVPRecord::set_fitname(const char* value, size_t size) {
  set_has_fitname();
  if (fitname_ == &::google::protobuf::internal::kEmptyString) {
    fitname_ = new ::std::string;
  }
  fitname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OffPVPRecord::mutable_fitname() {
  set_has_fitname();
  if (fitname_ == &::google::protobuf::internal::kEmptyString) {
    fitname_ = new ::std::string;
  }
  return fitname_;
}
inline ::std::string* OffPVPRecord::release_fitname() {
  clear_has_fitname();
  if (fitname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = fitname_;
    fitname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void OffPVPRecord::set_allocated_fitname(::std::string* fitname) {
  if (fitname_ != &::google::protobuf::internal::kEmptyString) {
    delete fitname_;
  }
  if (fitname) {
    set_has_fitname();
    fitname_ = fitname;
  } else {
    clear_has_fitname();
    fitname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 foldranking = 3;
inline bool OffPVPRecord::has_foldranking() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OffPVPRecord::set_has_foldranking() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OffPVPRecord::clear_has_foldranking() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OffPVPRecord::clear_foldranking() {
  foldranking_ = 0u;
  clear_has_foldranking();
}
inline ::google::protobuf::uint32 OffPVPRecord::foldranking() const {
  return foldranking_;
}
inline void OffPVPRecord::set_foldranking(::google::protobuf::uint32 value) {
  set_has_foldranking();
  foldranking_ = value;
}

// optional uint32 fnewranking = 4;
inline bool OffPVPRecord::has_fnewranking() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OffPVPRecord::set_has_fnewranking() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OffPVPRecord::clear_has_fnewranking() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OffPVPRecord::clear_fnewranking() {
  fnewranking_ = 0u;
  clear_has_fnewranking();
}
inline ::google::protobuf::uint32 OffPVPRecord::fnewranking() const {
  return fnewranking_;
}
inline void OffPVPRecord::set_fnewranking(::google::protobuf::uint32 value) {
  set_has_fnewranking();
  fnewranking_ = value;
}

// optional uint64 behiter = 5;
inline bool OffPVPRecord::has_behiter() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OffPVPRecord::set_has_behiter() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OffPVPRecord::clear_has_behiter() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OffPVPRecord::clear_behiter() {
  behiter_ = GOOGLE_ULONGLONG(0);
  clear_has_behiter();
}
inline ::google::protobuf::uint64 OffPVPRecord::behiter() const {
  return behiter_;
}
inline void OffPVPRecord::set_behiter(::google::protobuf::uint64 value) {
  set_has_behiter();
  behiter_ = value;
}

// optional string bitname = 6;
inline bool OffPVPRecord::has_bitname() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OffPVPRecord::set_has_bitname() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OffPVPRecord::clear_has_bitname() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OffPVPRecord::clear_bitname() {
  if (bitname_ != &::google::protobuf::internal::kEmptyString) {
    bitname_->clear();
  }
  clear_has_bitname();
}
inline const ::std::string& OffPVPRecord::bitname() const {
  return *bitname_;
}
inline void OffPVPRecord::set_bitname(const ::std::string& value) {
  set_has_bitname();
  if (bitname_ == &::google::protobuf::internal::kEmptyString) {
    bitname_ = new ::std::string;
  }
  bitname_->assign(value);
}
inline void OffPVPRecord::set_bitname(const char* value) {
  set_has_bitname();
  if (bitname_ == &::google::protobuf::internal::kEmptyString) {
    bitname_ = new ::std::string;
  }
  bitname_->assign(value);
}
inline void OffPVPRecord::set_bitname(const char* value, size_t size) {
  set_has_bitname();
  if (bitname_ == &::google::protobuf::internal::kEmptyString) {
    bitname_ = new ::std::string;
  }
  bitname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OffPVPRecord::mutable_bitname() {
  set_has_bitname();
  if (bitname_ == &::google::protobuf::internal::kEmptyString) {
    bitname_ = new ::std::string;
  }
  return bitname_;
}
inline ::std::string* OffPVPRecord::release_bitname() {
  clear_has_bitname();
  if (bitname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bitname_;
    bitname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void OffPVPRecord::set_allocated_bitname(::std::string* bitname) {
  if (bitname_ != &::google::protobuf::internal::kEmptyString) {
    delete bitname_;
  }
  if (bitname) {
    set_has_bitname();
    bitname_ = bitname;
  } else {
    clear_has_bitname();
    bitname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 boldranking = 7;
inline bool OffPVPRecord::has_boldranking() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void OffPVPRecord::set_has_boldranking() {
  _has_bits_[0] |= 0x00000040u;
}
inline void OffPVPRecord::clear_has_boldranking() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void OffPVPRecord::clear_boldranking() {
  boldranking_ = 0u;
  clear_has_boldranking();
}
inline ::google::protobuf::uint32 OffPVPRecord::boldranking() const {
  return boldranking_;
}
inline void OffPVPRecord::set_boldranking(::google::protobuf::uint32 value) {
  set_has_boldranking();
  boldranking_ = value;
}

// optional uint32 bnewranking = 8;
inline bool OffPVPRecord::has_bnewranking() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void OffPVPRecord::set_has_bnewranking() {
  _has_bits_[0] |= 0x00000080u;
}
inline void OffPVPRecord::clear_has_bnewranking() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void OffPVPRecord::clear_bnewranking() {
  bnewranking_ = 0u;
  clear_has_bnewranking();
}
inline ::google::protobuf::uint32 OffPVPRecord::bnewranking() const {
  return bnewranking_;
}
inline void OffPVPRecord::set_bnewranking(::google::protobuf::uint32 value) {
  set_has_bnewranking();
  bnewranking_ = value;
}

// optional uint64 recordtime = 9;
inline bool OffPVPRecord::has_recordtime() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void OffPVPRecord::set_has_recordtime() {
  _has_bits_[0] |= 0x00000100u;
}
inline void OffPVPRecord::clear_has_recordtime() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void OffPVPRecord::clear_recordtime() {
  recordtime_ = GOOGLE_ULONGLONG(0);
  clear_has_recordtime();
}
inline ::google::protobuf::uint64 OffPVPRecord::recordtime() const {
  return recordtime_;
}
inline void OffPVPRecord::set_recordtime(::google::protobuf::uint64 value) {
  set_has_recordtime();
  recordtime_ = value;
}

// -------------------------------------------------------------------

// FighterInfo

// optional int32 ranking = 1;
inline bool FighterInfo::has_ranking() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FighterInfo::set_has_ranking() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FighterInfo::clear_has_ranking() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FighterInfo::clear_ranking() {
  ranking_ = 0;
  clear_has_ranking();
}
inline ::google::protobuf::int32 FighterInfo::ranking() const {
  return ranking_;
}
inline void FighterInfo::set_ranking(::google::protobuf::int32 value) {
  set_has_ranking();
  ranking_ = value;
}

// optional int32 type = 2;
inline bool FighterInfo::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FighterInfo::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FighterInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FighterInfo::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 FighterInfo::type() const {
  return type_;
}
inline void FighterInfo::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 fightvalue = 3;
inline bool FighterInfo::has_fightvalue() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FighterInfo::set_has_fightvalue() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FighterInfo::clear_has_fightvalue() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FighterInfo::clear_fightvalue() {
  fightvalue_ = 0;
  clear_has_fightvalue();
}
inline ::google::protobuf::int32 FighterInfo::fightvalue() const {
  return fightvalue_;
}
inline void FighterInfo::set_fightvalue(::google::protobuf::int32 value) {
  set_has_fightvalue();
  fightvalue_ = value;
}

// repeated int32 equipid = 5;
inline int FighterInfo::equipid_size() const {
  return equipid_.size();
}
inline void FighterInfo::clear_equipid() {
  equipid_.Clear();
}
inline ::google::protobuf::int32 FighterInfo::equipid(int index) const {
  return equipid_.Get(index);
}
inline void FighterInfo::set_equipid(int index, ::google::protobuf::int32 value) {
  equipid_.Set(index, value);
}
inline void FighterInfo::add_equipid(::google::protobuf::int32 value) {
  equipid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
FighterInfo::equipid() const {
  return equipid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
FighterInfo::mutable_equipid() {
  return &equipid_;
}

// optional string playername = 6;
inline bool FighterInfo::has_playername() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FighterInfo::set_has_playername() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FighterInfo::clear_has_playername() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FighterInfo::clear_playername() {
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    playername_->clear();
  }
  clear_has_playername();
}
inline const ::std::string& FighterInfo::playername() const {
  return *playername_;
}
inline void FighterInfo::set_playername(const ::std::string& value) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
}
inline void FighterInfo::set_playername(const char* value) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
}
inline void FighterInfo::set_playername(const char* value, size_t size) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FighterInfo::mutable_playername() {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  return playername_;
}
inline ::std::string* FighterInfo::release_playername() {
  clear_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = playername_;
    playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FighterInfo::set_allocated_playername(::std::string* playername) {
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    delete playername_;
  }
  if (playername) {
    set_has_playername();
    playername_ = playername;
  } else {
    clear_has_playername();
    playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 skinid = 7;
inline bool FighterInfo::has_skinid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FighterInfo::set_has_skinid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FighterInfo::clear_has_skinid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FighterInfo::clear_skinid() {
  skinid_ = 0;
  clear_has_skinid();
}
inline ::google::protobuf::int32 FighterInfo::skinid() const {
  return skinid_;
}
inline void FighterInfo::set_skinid(::google::protobuf::int32 value) {
  set_has_skinid();
  skinid_ = value;
}

// optional int32 career = 8;
inline bool FighterInfo::has_career() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FighterInfo::set_has_career() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FighterInfo::clear_has_career() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FighterInfo::clear_career() {
  career_ = 0;
  clear_has_career();
}
inline ::google::protobuf::int32 FighterInfo::career() const {
  return career_;
}
inline void FighterInfo::set_career(::google::protobuf::int32 value) {
  set_has_career();
  career_ = value;
}

// optional uint32 level = 9;
inline bool FighterInfo::has_level() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FighterInfo::set_has_level() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FighterInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FighterInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 FighterInfo::level() const {
  return level_;
}
inline void FighterInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 suit_id = 10;
inline bool FighterInfo::has_suit_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void FighterInfo::set_has_suit_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void FighterInfo::clear_has_suit_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void FighterInfo::clear_suit_id() {
  suit_id_ = 0u;
  clear_has_suit_id();
}
inline ::google::protobuf::uint32 FighterInfo::suit_id() const {
  return suit_id_;
}
inline void FighterInfo::set_suit_id(::google::protobuf::uint32 value) {
  set_has_suit_id();
  suit_id_ = value;
}

// optional int32 weaponskinid = 11;
inline bool FighterInfo::has_weaponskinid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void FighterInfo::set_has_weaponskinid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void FighterInfo::clear_has_weaponskinid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void FighterInfo::clear_weaponskinid() {
  weaponskinid_ = 0;
  clear_has_weaponskinid();
}
inline ::google::protobuf::int32 FighterInfo::weaponskinid() const {
  return weaponskinid_;
}
inline void FighterInfo::set_weaponskinid(::google::protobuf::int32 value) {
  set_has_weaponskinid();
  weaponskinid_ = value;
}

// optional uint32 dhlevel = 12;
inline bool FighterInfo::has_dhlevel() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void FighterInfo::set_has_dhlevel() {
  _has_bits_[0] |= 0x00000400u;
}
inline void FighterInfo::clear_has_dhlevel() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void FighterInfo::clear_dhlevel() {
  dhlevel_ = 0u;
  clear_has_dhlevel();
}
inline ::google::protobuf::uint32 FighterInfo::dhlevel() const {
  return dhlevel_;
}
inline void FighterInfo::set_dhlevel(::google::protobuf::uint32 value) {
  set_has_dhlevel();
  dhlevel_ = value;
}

// repeated uint32 playerskill = 13;
inline int FighterInfo::playerskill_size() const {
  return playerskill_.size();
}
inline void FighterInfo::clear_playerskill() {
  playerskill_.Clear();
}
inline ::google::protobuf::uint32 FighterInfo::playerskill(int index) const {
  return playerskill_.Get(index);
}
inline void FighterInfo::set_playerskill(int index, ::google::protobuf::uint32 value) {
  playerskill_.Set(index, value);
}
inline void FighterInfo::add_playerskill(::google::protobuf::uint32 value) {
  playerskill_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
FighterInfo::playerskill() const {
  return playerskill_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
FighterInfo::mutable_playerskill() {
  return &playerskill_;
}

// optional .proto.message.PlayerEffect playeratt = 14;
inline bool FighterInfo::has_playeratt() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void FighterInfo::set_has_playeratt() {
  _has_bits_[0] |= 0x00001000u;
}
inline void FighterInfo::clear_has_playeratt() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void FighterInfo::clear_playeratt() {
  if (playeratt_ != NULL) playeratt_->::proto::message::PlayerEffect::Clear();
  clear_has_playeratt();
}
inline const ::proto::message::PlayerEffect& FighterInfo::playeratt() const {
  return playeratt_ != NULL ? *playeratt_ : *default_instance_->playeratt_;
}
inline ::proto::message::PlayerEffect* FighterInfo::mutable_playeratt() {
  set_has_playeratt();
  if (playeratt_ == NULL) playeratt_ = new ::proto::message::PlayerEffect;
  return playeratt_;
}
inline ::proto::message::PlayerEffect* FighterInfo::release_playeratt() {
  clear_has_playeratt();
  ::proto::message::PlayerEffect* temp = playeratt_;
  playeratt_ = NULL;
  return temp;
}
inline void FighterInfo::set_allocated_playeratt(::proto::message::PlayerEffect* playeratt) {
  delete playeratt_;
  playeratt_ = playeratt;
  if (playeratt) {
    set_has_playeratt();
  } else {
    clear_has_playeratt();
  }
}

// optional int32 petid = 15;
inline bool FighterInfo::has_petid() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void FighterInfo::set_has_petid() {
  _has_bits_[0] |= 0x00002000u;
}
inline void FighterInfo::clear_has_petid() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void FighterInfo::clear_petid() {
  petid_ = 0;
  clear_has_petid();
}
inline ::google::protobuf::int32 FighterInfo::petid() const {
  return petid_;
}
inline void FighterInfo::set_petid(::google::protobuf::int32 value) {
  set_has_petid();
  petid_ = value;
}

// optional uint64 playerid = 16;
inline bool FighterInfo::has_playerid() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void FighterInfo::set_has_playerid() {
  _has_bits_[0] |= 0x00004000u;
}
inline void FighterInfo::clear_has_playerid() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void FighterInfo::clear_playerid() {
  playerid_ = GOOGLE_ULONGLONG(0);
  clear_has_playerid();
}
inline ::google::protobuf::uint64 FighterInfo::playerid() const {
  return playerid_;
}
inline void FighterInfo::set_playerid(::google::protobuf::uint64 value) {
  set_has_playerid();
  playerid_ = value;
}

// -------------------------------------------------------------------

// OffPVP_CS_GetSelfData

// -------------------------------------------------------------------

// OffPVP_SC_GetSelfData

// optional int32 fightcounts = 1;
inline bool OffPVP_SC_GetSelfData::has_fightcounts() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OffPVP_SC_GetSelfData::set_has_fightcounts() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OffPVP_SC_GetSelfData::clear_has_fightcounts() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OffPVP_SC_GetSelfData::clear_fightcounts() {
  fightcounts_ = 0;
  clear_has_fightcounts();
}
inline ::google::protobuf::int32 OffPVP_SC_GetSelfData::fightcounts() const {
  return fightcounts_;
}
inline void OffPVP_SC_GetSelfData::set_fightcounts(::google::protobuf::int32 value) {
  set_has_fightcounts();
  fightcounts_ = value;
}

// optional uint64 rewordtime = 2;
inline bool OffPVP_SC_GetSelfData::has_rewordtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OffPVP_SC_GetSelfData::set_has_rewordtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OffPVP_SC_GetSelfData::clear_has_rewordtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OffPVP_SC_GetSelfData::clear_rewordtime() {
  rewordtime_ = GOOGLE_ULONGLONG(0);
  clear_has_rewordtime();
}
inline ::google::protobuf::uint64 OffPVP_SC_GetSelfData::rewordtime() const {
  return rewordtime_;
}
inline void OffPVP_SC_GetSelfData::set_rewordtime(::google::protobuf::uint64 value) {
  set_has_rewordtime();
  rewordtime_ = value;
}

// optional int32 ranking = 3;
inline bool OffPVP_SC_GetSelfData::has_ranking() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OffPVP_SC_GetSelfData::set_has_ranking() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OffPVP_SC_GetSelfData::clear_has_ranking() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OffPVP_SC_GetSelfData::clear_ranking() {
  ranking_ = 0;
  clear_has_ranking();
}
inline ::google::protobuf::int32 OffPVP_SC_GetSelfData::ranking() const {
  return ranking_;
}
inline void OffPVP_SC_GetSelfData::set_ranking(::google::protobuf::int32 value) {
  set_has_ranking();
  ranking_ = value;
}

// optional int32 officeid = 4;
inline bool OffPVP_SC_GetSelfData::has_officeid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OffPVP_SC_GetSelfData::set_has_officeid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OffPVP_SC_GetSelfData::clear_has_officeid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OffPVP_SC_GetSelfData::clear_officeid() {
  officeid_ = 0;
  clear_has_officeid();
}
inline ::google::protobuf::int32 OffPVP_SC_GetSelfData::officeid() const {
  return officeid_;
}
inline void OffPVP_SC_GetSelfData::set_officeid(::google::protobuf::int32 value) {
  set_has_officeid();
  officeid_ = value;
}

// optional uint32 showoffid = 5;
inline bool OffPVP_SC_GetSelfData::has_showoffid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OffPVP_SC_GetSelfData::set_has_showoffid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OffPVP_SC_GetSelfData::clear_has_showoffid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OffPVP_SC_GetSelfData::clear_showoffid() {
  showoffid_ = 0u;
  clear_has_showoffid();
}
inline ::google::protobuf::uint32 OffPVP_SC_GetSelfData::showoffid() const {
  return showoffid_;
}
inline void OffPVP_SC_GetSelfData::set_showoffid(::google::protobuf::uint32 value) {
  set_has_showoffid();
  showoffid_ = value;
}

// repeated .proto.message.FighterInfo infolist = 6;
inline int OffPVP_SC_GetSelfData::infolist_size() const {
  return infolist_.size();
}
inline void OffPVP_SC_GetSelfData::clear_infolist() {
  infolist_.Clear();
}
inline const ::proto::message::FighterInfo& OffPVP_SC_GetSelfData::infolist(int index) const {
  return infolist_.Get(index);
}
inline ::proto::message::FighterInfo* OffPVP_SC_GetSelfData::mutable_infolist(int index) {
  return infolist_.Mutable(index);
}
inline ::proto::message::FighterInfo* OffPVP_SC_GetSelfData::add_infolist() {
  return infolist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::message::FighterInfo >&
OffPVP_SC_GetSelfData::infolist() const {
  return infolist_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::message::FighterInfo >*
OffPVP_SC_GetSelfData::mutable_infolist() {
  return &infolist_;
}

// optional uint32 rewordid = 7;
inline bool OffPVP_SC_GetSelfData::has_rewordid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void OffPVP_SC_GetSelfData::set_has_rewordid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void OffPVP_SC_GetSelfData::clear_has_rewordid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void OffPVP_SC_GetSelfData::clear_rewordid() {
  rewordid_ = 0u;
  clear_has_rewordid();
}
inline ::google::protobuf::uint32 OffPVP_SC_GetSelfData::rewordid() const {
  return rewordid_;
}
inline void OffPVP_SC_GetSelfData::set_rewordid(::google::protobuf::uint32 value) {
  set_has_rewordid();
  rewordid_ = value;
}

// -------------------------------------------------------------------

// OffPVP_CS_GetOtherData

// optional int32 officeid = 1;
inline bool OffPVP_CS_GetOtherData::has_officeid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OffPVP_CS_GetOtherData::set_has_officeid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OffPVP_CS_GetOtherData::clear_has_officeid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OffPVP_CS_GetOtherData::clear_officeid() {
  officeid_ = 0;
  clear_has_officeid();
}
inline ::google::protobuf::int32 OffPVP_CS_GetOtherData::officeid() const {
  return officeid_;
}
inline void OffPVP_CS_GetOtherData::set_officeid(::google::protobuf::int32 value) {
  set_has_officeid();
  officeid_ = value;
}

// -------------------------------------------------------------------

// OffPVP_CS_ChangeFighter

// optional int32 officeid = 1;
inline bool OffPVP_CS_ChangeFighter::has_officeid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OffPVP_CS_ChangeFighter::set_has_officeid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OffPVP_CS_ChangeFighter::clear_has_officeid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OffPVP_CS_ChangeFighter::clear_officeid() {
  officeid_ = 0;
  clear_has_officeid();
}
inline ::google::protobuf::int32 OffPVP_CS_ChangeFighter::officeid() const {
  return officeid_;
}
inline void OffPVP_CS_ChangeFighter::set_officeid(::google::protobuf::int32 value) {
  set_has_officeid();
  officeid_ = value;
}

// -------------------------------------------------------------------

// OffPVP_SC_GetOtherData

// optional int32 officeid = 1;
inline bool OffPVP_SC_GetOtherData::has_officeid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OffPVP_SC_GetOtherData::set_has_officeid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OffPVP_SC_GetOtherData::clear_has_officeid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OffPVP_SC_GetOtherData::clear_officeid() {
  officeid_ = 0;
  clear_has_officeid();
}
inline ::google::protobuf::int32 OffPVP_SC_GetOtherData::officeid() const {
  return officeid_;
}
inline void OffPVP_SC_GetOtherData::set_officeid(::google::protobuf::int32 value) {
  set_has_officeid();
  officeid_ = value;
}

// repeated .proto.message.FighterInfo infolist = 2;
inline int OffPVP_SC_GetOtherData::infolist_size() const {
  return infolist_.size();
}
inline void OffPVP_SC_GetOtherData::clear_infolist() {
  infolist_.Clear();
}
inline const ::proto::message::FighterInfo& OffPVP_SC_GetOtherData::infolist(int index) const {
  return infolist_.Get(index);
}
inline ::proto::message::FighterInfo* OffPVP_SC_GetOtherData::mutable_infolist(int index) {
  return infolist_.Mutable(index);
}
inline ::proto::message::FighterInfo* OffPVP_SC_GetOtherData::add_infolist() {
  return infolist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::message::FighterInfo >&
OffPVP_SC_GetOtherData::infolist() const {
  return infolist_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::message::FighterInfo >*
OffPVP_SC_GetOtherData::mutable_infolist() {
  return &infolist_;
}

// -------------------------------------------------------------------

// OffPVP_CS_Fight

// optional int32 ranking = 1;
inline bool OffPVP_CS_Fight::has_ranking() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OffPVP_CS_Fight::set_has_ranking() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OffPVP_CS_Fight::clear_has_ranking() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OffPVP_CS_Fight::clear_ranking() {
  ranking_ = 0;
  clear_has_ranking();
}
inline ::google::protobuf::int32 OffPVP_CS_Fight::ranking() const {
  return ranking_;
}
inline void OffPVP_CS_Fight::set_ranking(::google::protobuf::int32 value) {
  set_has_ranking();
  ranking_ = value;
}

// -------------------------------------------------------------------

// OffPVP_SC_FightResult

// optional int32 result = 1;
inline bool OffPVP_SC_FightResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OffPVP_SC_FightResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OffPVP_SC_FightResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OffPVP_SC_FightResult::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 OffPVP_SC_FightResult::result() const {
  return result_;
}
inline void OffPVP_SC_FightResult::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional int32 errorcode = 2;
inline bool OffPVP_SC_FightResult::has_errorcode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OffPVP_SC_FightResult::set_has_errorcode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OffPVP_SC_FightResult::clear_has_errorcode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OffPVP_SC_FightResult::clear_errorcode() {
  errorcode_ = 0;
  clear_has_errorcode();
}
inline ::google::protobuf::int32 OffPVP_SC_FightResult::errorcode() const {
  return errorcode_;
}
inline void OffPVP_SC_FightResult::set_errorcode(::google::protobuf::int32 value) {
  set_has_errorcode();
  errorcode_ = value;
}

// optional .proto.message.OfflineDataDetail data = 3;
inline bool OffPVP_SC_FightResult::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OffPVP_SC_FightResult::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OffPVP_SC_FightResult::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OffPVP_SC_FightResult::clear_data() {
  if (data_ != NULL) data_->::proto::message::OfflineDataDetail::Clear();
  clear_has_data();
}
inline const ::proto::message::OfflineDataDetail& OffPVP_SC_FightResult::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::proto::message::OfflineDataDetail* OffPVP_SC_FightResult::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::proto::message::OfflineDataDetail;
  return data_;
}
inline ::proto::message::OfflineDataDetail* OffPVP_SC_FightResult::release_data() {
  clear_has_data();
  ::proto::message::OfflineDataDetail* temp = data_;
  data_ = NULL;
  return temp;
}
inline void OffPVP_SC_FightResult::set_allocated_data(::proto::message::OfflineDataDetail* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
}

// -------------------------------------------------------------------

// OffPVP_CS_BuyCounts

// -------------------------------------------------------------------

// OffPVP_SC_BuyCountsResult

// optional int32 result = 1;
inline bool OffPVP_SC_BuyCountsResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OffPVP_SC_BuyCountsResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OffPVP_SC_BuyCountsResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OffPVP_SC_BuyCountsResult::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 OffPVP_SC_BuyCountsResult::result() const {
  return result_;
}
inline void OffPVP_SC_BuyCountsResult::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional int32 counts = 2;
inline bool OffPVP_SC_BuyCountsResult::has_counts() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OffPVP_SC_BuyCountsResult::set_has_counts() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OffPVP_SC_BuyCountsResult::clear_has_counts() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OffPVP_SC_BuyCountsResult::clear_counts() {
  counts_ = 0;
  clear_has_counts();
}
inline ::google::protobuf::int32 OffPVP_SC_BuyCountsResult::counts() const {
  return counts_;
}
inline void OffPVP_SC_BuyCountsResult::set_counts(::google::protobuf::int32 value) {
  set_has_counts();
  counts_ = value;
}

// -------------------------------------------------------------------

// OffPVP_CS_GetReword

// -------------------------------------------------------------------

// OffPVP_SC_GetRewordResult

// optional int32 result = 1;
inline bool OffPVP_SC_GetRewordResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OffPVP_SC_GetRewordResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OffPVP_SC_GetRewordResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OffPVP_SC_GetRewordResult::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 OffPVP_SC_GetRewordResult::result() const {
  return result_;
}
inline void OffPVP_SC_GetRewordResult::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional int64 nexttime = 2;
inline bool OffPVP_SC_GetRewordResult::has_nexttime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OffPVP_SC_GetRewordResult::set_has_nexttime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OffPVP_SC_GetRewordResult::clear_has_nexttime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OffPVP_SC_GetRewordResult::clear_nexttime() {
  nexttime_ = GOOGLE_LONGLONG(0);
  clear_has_nexttime();
}
inline ::google::protobuf::int64 OffPVP_SC_GetRewordResult::nexttime() const {
  return nexttime_;
}
inline void OffPVP_SC_GetRewordResult::set_nexttime(::google::protobuf::int64 value) {
  set_has_nexttime();
  nexttime_ = value;
}

// -------------------------------------------------------------------

// OffPVP_SC_UpdateCounts

// optional int32 newcounts = 1;
inline bool OffPVP_SC_UpdateCounts::has_newcounts() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OffPVP_SC_UpdateCounts::set_has_newcounts() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OffPVP_SC_UpdateCounts::clear_has_newcounts() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OffPVP_SC_UpdateCounts::clear_newcounts() {
  newcounts_ = 0;
  clear_has_newcounts();
}
inline ::google::protobuf::int32 OffPVP_SC_UpdateCounts::newcounts() const {
  return newcounts_;
}
inline void OffPVP_SC_UpdateCounts::set_newcounts(::google::protobuf::int32 value) {
  set_has_newcounts();
  newcounts_ = value;
}

// -------------------------------------------------------------------

// OffPVP_CS_GetPVPRecord

// -------------------------------------------------------------------

// OffPVP_SC_GetPVPRecordResult

// optional int32 result = 1;
inline bool OffPVP_SC_GetPVPRecordResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OffPVP_SC_GetPVPRecordResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OffPVP_SC_GetPVPRecordResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OffPVP_SC_GetPVPRecordResult::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 OffPVP_SC_GetPVPRecordResult::result() const {
  return result_;
}
inline void OffPVP_SC_GetPVPRecordResult::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// repeated .proto.message.OffPVPRecord datalist = 2;
inline int OffPVP_SC_GetPVPRecordResult::datalist_size() const {
  return datalist_.size();
}
inline void OffPVP_SC_GetPVPRecordResult::clear_datalist() {
  datalist_.Clear();
}
inline const ::proto::message::OffPVPRecord& OffPVP_SC_GetPVPRecordResult::datalist(int index) const {
  return datalist_.Get(index);
}
inline ::proto::message::OffPVPRecord* OffPVP_SC_GetPVPRecordResult::mutable_datalist(int index) {
  return datalist_.Mutable(index);
}
inline ::proto::message::OffPVPRecord* OffPVP_SC_GetPVPRecordResult::add_datalist() {
  return datalist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::message::OffPVPRecord >&
OffPVP_SC_GetPVPRecordResult::datalist() const {
  return datalist_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::message::OffPVPRecord >*
OffPVP_SC_GetPVPRecordResult::mutable_datalist() {
  return &datalist_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace proto

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_offpvp_2eproto__INCLUDED
