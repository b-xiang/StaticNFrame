// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: title.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "title.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace message {

namespace {

const ::google::protobuf::Descriptor* Title_CS_GetTitleList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Title_CS_GetTitleList_reflection_ = NULL;
const ::google::protobuf::Descriptor* Title_CS_GetTitleDetail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Title_CS_GetTitleDetail_reflection_ = NULL;
const ::google::protobuf::Descriptor* Title_CS_ChangeTitle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Title_CS_ChangeTitle_reflection_ = NULL;
const ::google::protobuf::Descriptor* TitleClientProgress_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TitleClientProgress_reflection_ = NULL;
const ::google::protobuf::Descriptor* TitleClientData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TitleClientData_reflection_ = NULL;
const ::google::protobuf::Descriptor* Title_SC_GetTitleDetail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Title_SC_GetTitleDetail_reflection_ = NULL;
const ::google::protobuf::Descriptor* Title_SC_GetTitleList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Title_SC_GetTitleList_reflection_ = NULL;
const ::google::protobuf::Descriptor* Title_SC_ChangeTitle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Title_SC_ChangeTitle_reflection_ = NULL;
const ::google::protobuf::Descriptor* Title_SC_UpdataCurTitle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Title_SC_UpdataCurTitle_reflection_ = NULL;
const ::google::protobuf::Descriptor* Title_SC_NewTitle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Title_SC_NewTitle_reflection_ = NULL;
const ::google::protobuf::Descriptor* Title_CS_HideTitle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Title_CS_HideTitle_reflection_ = NULL;
const ::google::protobuf::Descriptor* Title_SC_HideTitle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Title_SC_HideTitle_reflection_ = NULL;
const ::google::protobuf::Descriptor* TitleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TitleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TitleDataDetail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TitleDataDetail_reflection_ = NULL;
const ::google::protobuf::Descriptor* TitleDataRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TitleDataRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* TitleData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TitleData_reflection_ = NULL;
const ::google::protobuf::Descriptor* TitleOffLineData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TitleOffLineData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* eTitleConType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* eTitleDeadLine_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_title_2eproto() {
  protobuf_AddDesc_title_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "title.proto");
  GOOGLE_CHECK(file != NULL);
  Title_CS_GetTitleList_descriptor_ = file->message_type(0);
  static const int Title_CS_GetTitleList_offsets_[1] = {
  };
  Title_CS_GetTitleList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Title_CS_GetTitleList_descriptor_,
      Title_CS_GetTitleList::default_instance_,
      Title_CS_GetTitleList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Title_CS_GetTitleList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Title_CS_GetTitleList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Title_CS_GetTitleList));
  Title_CS_GetTitleDetail_descriptor_ = file->message_type(1);
  static const int Title_CS_GetTitleDetail_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Title_CS_GetTitleDetail, titleid_),
  };
  Title_CS_GetTitleDetail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Title_CS_GetTitleDetail_descriptor_,
      Title_CS_GetTitleDetail::default_instance_,
      Title_CS_GetTitleDetail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Title_CS_GetTitleDetail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Title_CS_GetTitleDetail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Title_CS_GetTitleDetail));
  Title_CS_ChangeTitle_descriptor_ = file->message_type(2);
  static const int Title_CS_ChangeTitle_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Title_CS_ChangeTitle, titleid_),
  };
  Title_CS_ChangeTitle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Title_CS_ChangeTitle_descriptor_,
      Title_CS_ChangeTitle::default_instance_,
      Title_CS_ChangeTitle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Title_CS_ChangeTitle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Title_CS_ChangeTitle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Title_CS_ChangeTitle));
  TitleClientProgress_descriptor_ = file->message_type(3);
  static const int TitleClientProgress_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleClientProgress, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleClientProgress, val_),
  };
  TitleClientProgress_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TitleClientProgress_descriptor_,
      TitleClientProgress::default_instance_,
      TitleClientProgress_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleClientProgress, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleClientProgress, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TitleClientProgress));
  TitleClientData_descriptor_ = file->message_type(4);
  static const int TitleClientData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleClientData, titleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleClientData, expiretime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleClientData, new__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleClientData, progress_),
  };
  TitleClientData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TitleClientData_descriptor_,
      TitleClientData::default_instance_,
      TitleClientData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleClientData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleClientData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TitleClientData));
  Title_SC_GetTitleDetail_descriptor_ = file->message_type(5);
  static const int Title_SC_GetTitleDetail_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Title_SC_GetTitleDetail, titleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Title_SC_GetTitleDetail, process_list_),
  };
  Title_SC_GetTitleDetail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Title_SC_GetTitleDetail_descriptor_,
      Title_SC_GetTitleDetail::default_instance_,
      Title_SC_GetTitleDetail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Title_SC_GetTitleDetail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Title_SC_GetTitleDetail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Title_SC_GetTitleDetail));
  Title_SC_GetTitleList_descriptor_ = file->message_type(6);
  static const int Title_SC_GetTitleList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Title_SC_GetTitleList, title_list_),
  };
  Title_SC_GetTitleList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Title_SC_GetTitleList_descriptor_,
      Title_SC_GetTitleList::default_instance_,
      Title_SC_GetTitleList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Title_SC_GetTitleList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Title_SC_GetTitleList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Title_SC_GetTitleList));
  Title_SC_ChangeTitle_descriptor_ = file->message_type(7);
  static const int Title_SC_ChangeTitle_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Title_SC_ChangeTitle, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Title_SC_ChangeTitle, titleid_),
  };
  Title_SC_ChangeTitle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Title_SC_ChangeTitle_descriptor_,
      Title_SC_ChangeTitle::default_instance_,
      Title_SC_ChangeTitle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Title_SC_ChangeTitle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Title_SC_ChangeTitle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Title_SC_ChangeTitle));
  Title_SC_UpdataCurTitle_descriptor_ = file->message_type(8);
  static const int Title_SC_UpdataCurTitle_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Title_SC_UpdataCurTitle, titleid_),
  };
  Title_SC_UpdataCurTitle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Title_SC_UpdataCurTitle_descriptor_,
      Title_SC_UpdataCurTitle::default_instance_,
      Title_SC_UpdataCurTitle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Title_SC_UpdataCurTitle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Title_SC_UpdataCurTitle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Title_SC_UpdataCurTitle));
  Title_SC_NewTitle_descriptor_ = file->message_type(9);
  static const int Title_SC_NewTitle_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Title_SC_NewTitle, titleid_),
  };
  Title_SC_NewTitle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Title_SC_NewTitle_descriptor_,
      Title_SC_NewTitle::default_instance_,
      Title_SC_NewTitle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Title_SC_NewTitle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Title_SC_NewTitle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Title_SC_NewTitle));
  Title_CS_HideTitle_descriptor_ = file->message_type(10);
  static const int Title_CS_HideTitle_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Title_CS_HideTitle, ishide_),
  };
  Title_CS_HideTitle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Title_CS_HideTitle_descriptor_,
      Title_CS_HideTitle::default_instance_,
      Title_CS_HideTitle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Title_CS_HideTitle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Title_CS_HideTitle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Title_CS_HideTitle));
  Title_SC_HideTitle_descriptor_ = file->message_type(11);
  static const int Title_SC_HideTitle_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Title_SC_HideTitle, result_),
  };
  Title_SC_HideTitle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Title_SC_HideTitle_descriptor_,
      Title_SC_HideTitle::default_instance_,
      Title_SC_HideTitle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Title_SC_HideTitle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Title_SC_HideTitle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Title_SC_HideTitle));
  TitleInfo_descriptor_ = file->message_type(12);
  static const int TitleInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleInfo, titleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleInfo, attributeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleInfo, expiretime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleInfo, new__),
  };
  TitleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TitleInfo_descriptor_,
      TitleInfo::default_instance_,
      TitleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TitleInfo));
  TitleDataDetail_descriptor_ = file->message_type(13);
  static const int TitleDataDetail_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleDataDetail, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleDataDetail, value_),
  };
  TitleDataDetail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TitleDataDetail_descriptor_,
      TitleDataDetail::default_instance_,
      TitleDataDetail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleDataDetail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleDataDetail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TitleDataDetail));
  TitleDataRecord_descriptor_ = file->message_type(14);
  static const int TitleDataRecord_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleDataRecord, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleDataRecord, detail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleDataRecord, condition_),
  };
  TitleDataRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TitleDataRecord_descriptor_,
      TitleDataRecord::default_instance_,
      TitleDataRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleDataRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleDataRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TitleDataRecord));
  TitleData_descriptor_ = file->message_type(15);
  static const int TitleData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleData, title_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleData, curtitleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleData, record_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleData, is_hide_),
  };
  TitleData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TitleData_descriptor_,
      TitleData::default_instance_,
      TitleData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TitleData));
  TitleOffLineData_descriptor_ = file->message_type(16);
  static const int TitleOffLineData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleOffLineData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleOffLineData, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleOffLineData, titleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleOffLineData, expiretime_),
  };
  TitleOffLineData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TitleOffLineData_descriptor_,
      TitleOffLineData::default_instance_,
      TitleOffLineData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleOffLineData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleOffLineData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TitleOffLineData));
  eTitleConType_descriptor_ = file->enum_type(0);
  eTitleDeadLine_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_title_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Title_CS_GetTitleList_descriptor_, &Title_CS_GetTitleList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Title_CS_GetTitleDetail_descriptor_, &Title_CS_GetTitleDetail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Title_CS_ChangeTitle_descriptor_, &Title_CS_ChangeTitle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TitleClientProgress_descriptor_, &TitleClientProgress::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TitleClientData_descriptor_, &TitleClientData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Title_SC_GetTitleDetail_descriptor_, &Title_SC_GetTitleDetail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Title_SC_GetTitleList_descriptor_, &Title_SC_GetTitleList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Title_SC_ChangeTitle_descriptor_, &Title_SC_ChangeTitle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Title_SC_UpdataCurTitle_descriptor_, &Title_SC_UpdataCurTitle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Title_SC_NewTitle_descriptor_, &Title_SC_NewTitle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Title_CS_HideTitle_descriptor_, &Title_CS_HideTitle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Title_SC_HideTitle_descriptor_, &Title_SC_HideTitle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TitleInfo_descriptor_, &TitleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TitleDataDetail_descriptor_, &TitleDataDetail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TitleDataRecord_descriptor_, &TitleDataRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TitleData_descriptor_, &TitleData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TitleOffLineData_descriptor_, &TitleOffLineData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_title_2eproto() {
  delete Title_CS_GetTitleList::default_instance_;
  delete Title_CS_GetTitleList_reflection_;
  delete Title_CS_GetTitleDetail::default_instance_;
  delete Title_CS_GetTitleDetail_reflection_;
  delete Title_CS_ChangeTitle::default_instance_;
  delete Title_CS_ChangeTitle_reflection_;
  delete TitleClientProgress::default_instance_;
  delete TitleClientProgress_reflection_;
  delete TitleClientData::default_instance_;
  delete TitleClientData_reflection_;
  delete Title_SC_GetTitleDetail::default_instance_;
  delete Title_SC_GetTitleDetail_reflection_;
  delete Title_SC_GetTitleList::default_instance_;
  delete Title_SC_GetTitleList_reflection_;
  delete Title_SC_ChangeTitle::default_instance_;
  delete Title_SC_ChangeTitle_reflection_;
  delete Title_SC_UpdataCurTitle::default_instance_;
  delete Title_SC_UpdataCurTitle_reflection_;
  delete Title_SC_NewTitle::default_instance_;
  delete Title_SC_NewTitle_reflection_;
  delete Title_CS_HideTitle::default_instance_;
  delete Title_CS_HideTitle_reflection_;
  delete Title_SC_HideTitle::default_instance_;
  delete Title_SC_HideTitle_reflection_;
  delete TitleInfo::default_instance_;
  delete TitleInfo_reflection_;
  delete TitleDataDetail::default_instance_;
  delete TitleDataDetail_reflection_;
  delete TitleDataRecord::default_instance_;
  delete TitleDataRecord_reflection_;
  delete TitleData::default_instance_;
  delete TitleData_reflection_;
  delete TitleOffLineData::default_instance_;
  delete TitleOffLineData_reflection_;
}

void protobuf_AddDesc_title_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013title.proto\022\rproto.message\"\027\n\025Title_CS"
    "_GetTitleList\"*\n\027Title_CS_GetTitleDetail"
    "\022\017\n\007titleID\030\001 \002(\005\"\'\n\024Title_CS_ChangeTitl"
    "e\022\017\n\007titleID\030\001 \002(\005\"1\n\023TitleClientProgres"
    "s\022\r\n\005param\030\001 \001(\005\022\013\n\003val\030\002 \001(\003\"y\n\017TitleCl"
    "ientData\022\017\n\007titleID\030\001 \002(\005\022\022\n\nexpireTime\030"
    "\002 \002(\003\022\013\n\003new\030\003 \002(\010\0224\n\010progress\030\004 \003(\0132\".p"
    "roto.message.TitleClientProgress\"@\n\027Titl"
    "e_SC_GetTitleDetail\022\017\n\007titleID\030\001 \002(\005\022\024\n\014"
    "process_list\030\003 \003(\005\"K\n\025Title_SC_GetTitleL"
    "ist\0222\n\ntitle_list\030\001 \003(\0132\036.proto.message."
    "TitleClientData\"7\n\024Title_SC_ChangeTitle\022"
    "\016\n\006result\030\001 \002(\005\022\017\n\007titleID\030\002 \001(\005\"*\n\027Titl"
    "e_SC_UpdataCurTitle\022\017\n\007titleID\030\001 \002(\005\"$\n\021"
    "Title_SC_NewTitle\022\017\n\007titleID\030\001 \002(\005\"$\n\022Ti"
    "tle_CS_HideTitle\022\016\n\006ishide\030\001 \002(\005\"$\n\022Titl"
    "e_SC_HideTitle\022\016\n\006result\030\001 \002(\005\"R\n\tTitleI"
    "nfo\022\017\n\007titleID\030\001 \002(\005\022\023\n\013attributeID\030\002 \002("
    "\005\022\022\n\nexpireTime\030\003 \001(\003\022\013\n\003new\030\004 \001(\010\"-\n\017Ti"
    "tleDataDetail\022\013\n\003key\030\001 \002(\005\022\r\n\005value\030\002 \002("
    "\005\"a\n\017TitleDataRecord\022\013\n\003num\030\001 \002(\005\022.\n\006det"
    "ail\030\002 \003(\0132\036.proto.message.TitleDataDetai"
    "l\022\021\n\tcondition\030\003 \001(\005\"\223\001\n\tTitleData\022,\n\nti"
    "tle_list\030\001 \003(\0132\030.proto.message.TitleInfo"
    "\022\022\n\ncurTitleID\030\002 \001(\005\0223\n\013record_list\030\003 \003("
    "\0132\036.proto.message.TitleDataRecord\022\017\n\007is_"
    "hide\030\004 \001(\005\"U\n\020TitleOffLineData\022\n\n\002ID\030\001 \002"
    "(\004\022\020\n\010playerID\030\002 \002(\004\022\017\n\007titleID\030\003 \002(\005\022\022\n"
    "\nexpireTime\030\004 \001(\004*\374\013\n\reTitleConType\022\027\n\023e"
    "TitleCon_NotDefine\020\000\022\026\n\022eTitleCon_Capaci"
    "ty\020\001\022\035\n\031eTitleCon_QualityEquipNum\020\002\022\033\n\027e"
    "TitleCon_LevelEquipNum\020\003\022\034\n\030eTitleCon_Re"
    "fineEquipNum\020\004\022\036\n\032eTitleCon_TypeEquipQua"
    "lity\020\005\022\037\n\033eTitleCon_AttributeEquipNum\020\006\022"
    "\033\n\027eTitleCon_LevelSkillNum\020\007\022\033\n\027eTitleCo"
    "n_LevelStampNum\020\010\022\027\n\023eTitleCon_TalentNum"
    "\020\t\022\033\n\027eTitleCon_TalentPageNum\020\n\022\036\n\032eTitl"
    "eCon_LevelShipPartNum\020\013\022\037\n\033eTitleCon_Lev"
    "elShipSkillNum\020\014\022\026\n\022eTitleCon_ShipStep\020\r"
    "\022 \n\034eTitleCon_ShipEvolutionTimes\020\016\022\033\n\027eT"
    "itleCon_IdentitySkill\020\017\022\037\n\033eTitleCon_Tea"
    "cherReputation\020\020\022\034\n\030eTitleCon_BecomeAStu"
    "tent\020\021\022\033\n\027eTitleCon_GuildPosition\020\022\022\025\n\021e"
    "TitleCon_ItemNum\020\023\022\"\n\036eTitleCon_LevelPas"
    "siveSkillNum\020\024\022\030\n\024eTitleCon_ItemByMail\020\025"
    "\022\031\n\025eTitleCon_AwakenStage\020\026\022\037\n\033eTitleCon"
    "_AwakenTalentLevel\020\027\022\032\n\026eTitleCon_Achiev"
    "ePoint\020\030\022\027\n\023eTitleCon_EquipStar\020\031\022\026\n\022eTi"
    "tleCon_LoginDay\020\032\022\031\n\025eTitleCon_TotalChar"
    "ge\020\033\022\032\n\026eTitleCon_SingleCharge\020\034\022\035\n\031eTit"
    "leCon_TotalUseItemNum\020\035\022\027\n\023eTitleCon_Rid"
    "eStage\020\036\022\027\n\023eTitleCon_PetActive\020\037\022\035\n\031eTi"
    "tleCon_MercenaryActive\020 \022\035\n\031eTitleCon_Go"
    "dWeaponActive\020!\022\030\n\024eTitleCon_ZodicLight\020"
    "\"\022\033\n\027eTitleCon_SoulCaseStage\020#\022\037\n\033eTitle"
    "Con_HereSoulActiveNum\020$\022\033\n\027eTitleCon_Equ"
    "ipLayGemLv\020%\022\030\n\024eTitleCon_ActiveSuit\020&\022\031"
    "\n\025eTitleCon_GetRandAttr\020\'\022\027\n\023eTitleCon_G"
    "etRefine\020(\022\023\n\017eTitleCon_Arena\020)\022\031\n\025eTitl"
    "eCon_SIngleArena\020*\022\033\n\027eTitleCon_WorldBos"
    "sGold\020+\022\036\n\032eTitleCon_ItemDungeonTimes\020,\022"
    "\030\n\024eTitleCon_SkinActive\020-\022\034\n\030eTitleCon_B"
    "oatSkinActive\020.\022\024\n\020eTitleCon_Renown\020/\022\034\n"
    "\030eTitleCon_DailyLoopQuest\0200\022\022\n\016eTitleCon"
    "_Sign\0201\022\034\n\030eTitleCon_AuctionUseGold\0202\022\034\n"
    "\030eTitleCon_AuctionGetGold\0203\022\025\n\021eTitleCon"
    "_UseItem\0204\022\024\n\020eTitleCon_MaxNum\0205*\201\001\n\016eTi"
    "tleDeadLine\022\032\n\026eTitleDeadLine_Forever\020\001\022"
    "\034\n\030eTitleDeadLine_Temporory\020\002\022\027\n\023eTitleD"
    "eadLine_Time\020\003\022\034\n\030eTitleDeadLine_UntilTi"
    "me\020\004B\017\n\rproto.message", 2821);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "title.proto", &protobuf_RegisterTypes);
  Title_CS_GetTitleList::default_instance_ = new Title_CS_GetTitleList();
  Title_CS_GetTitleDetail::default_instance_ = new Title_CS_GetTitleDetail();
  Title_CS_ChangeTitle::default_instance_ = new Title_CS_ChangeTitle();
  TitleClientProgress::default_instance_ = new TitleClientProgress();
  TitleClientData::default_instance_ = new TitleClientData();
  Title_SC_GetTitleDetail::default_instance_ = new Title_SC_GetTitleDetail();
  Title_SC_GetTitleList::default_instance_ = new Title_SC_GetTitleList();
  Title_SC_ChangeTitle::default_instance_ = new Title_SC_ChangeTitle();
  Title_SC_UpdataCurTitle::default_instance_ = new Title_SC_UpdataCurTitle();
  Title_SC_NewTitle::default_instance_ = new Title_SC_NewTitle();
  Title_CS_HideTitle::default_instance_ = new Title_CS_HideTitle();
  Title_SC_HideTitle::default_instance_ = new Title_SC_HideTitle();
  TitleInfo::default_instance_ = new TitleInfo();
  TitleDataDetail::default_instance_ = new TitleDataDetail();
  TitleDataRecord::default_instance_ = new TitleDataRecord();
  TitleData::default_instance_ = new TitleData();
  TitleOffLineData::default_instance_ = new TitleOffLineData();
  Title_CS_GetTitleList::default_instance_->InitAsDefaultInstance();
  Title_CS_GetTitleDetail::default_instance_->InitAsDefaultInstance();
  Title_CS_ChangeTitle::default_instance_->InitAsDefaultInstance();
  TitleClientProgress::default_instance_->InitAsDefaultInstance();
  TitleClientData::default_instance_->InitAsDefaultInstance();
  Title_SC_GetTitleDetail::default_instance_->InitAsDefaultInstance();
  Title_SC_GetTitleList::default_instance_->InitAsDefaultInstance();
  Title_SC_ChangeTitle::default_instance_->InitAsDefaultInstance();
  Title_SC_UpdataCurTitle::default_instance_->InitAsDefaultInstance();
  Title_SC_NewTitle::default_instance_->InitAsDefaultInstance();
  Title_CS_HideTitle::default_instance_->InitAsDefaultInstance();
  Title_SC_HideTitle::default_instance_->InitAsDefaultInstance();
  TitleInfo::default_instance_->InitAsDefaultInstance();
  TitleDataDetail::default_instance_->InitAsDefaultInstance();
  TitleDataRecord::default_instance_->InitAsDefaultInstance();
  TitleData::default_instance_->InitAsDefaultInstance();
  TitleOffLineData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_title_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_title_2eproto {
  StaticDescriptorInitializer_title_2eproto() {
    protobuf_AddDesc_title_2eproto();
  }
} static_descriptor_initializer_title_2eproto_;
const ::google::protobuf::EnumDescriptor* eTitleConType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eTitleConType_descriptor_;
}
bool eTitleConType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* eTitleDeadLine_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eTitleDeadLine_descriptor_;
}
bool eTitleDeadLine_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Title_CS_GetTitleList::Title_CS_GetTitleList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Title_CS_GetTitleList::InitAsDefaultInstance() {
}

Title_CS_GetTitleList::Title_CS_GetTitleList(const Title_CS_GetTitleList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Title_CS_GetTitleList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Title_CS_GetTitleList::~Title_CS_GetTitleList() {
  SharedDtor();
}

void Title_CS_GetTitleList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Title_CS_GetTitleList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Title_CS_GetTitleList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Title_CS_GetTitleList_descriptor_;
}

const Title_CS_GetTitleList& Title_CS_GetTitleList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_title_2eproto();
  return *default_instance_;
}

Title_CS_GetTitleList* Title_CS_GetTitleList::default_instance_ = NULL;

Title_CS_GetTitleList* Title_CS_GetTitleList::New() const {
  return new Title_CS_GetTitleList;
}

void Title_CS_GetTitleList::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Title_CS_GetTitleList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Title_CS_GetTitleList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Title_CS_GetTitleList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Title_CS_GetTitleList::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Title_CS_GetTitleList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Title_CS_GetTitleList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Title_CS_GetTitleList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Title_CS_GetTitleList::MergeFrom(const Title_CS_GetTitleList& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Title_CS_GetTitleList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Title_CS_GetTitleList::CopyFrom(const Title_CS_GetTitleList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Title_CS_GetTitleList::IsInitialized() const {

  return true;
}

void Title_CS_GetTitleList::Swap(Title_CS_GetTitleList* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Title_CS_GetTitleList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Title_CS_GetTitleList_descriptor_;
  metadata.reflection = Title_CS_GetTitleList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Title_CS_GetTitleDetail::kTitleIDFieldNumber;
#endif  // !_MSC_VER

Title_CS_GetTitleDetail::Title_CS_GetTitleDetail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Title_CS_GetTitleDetail::InitAsDefaultInstance() {
}

Title_CS_GetTitleDetail::Title_CS_GetTitleDetail(const Title_CS_GetTitleDetail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Title_CS_GetTitleDetail::SharedCtor() {
  _cached_size_ = 0;
  titleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Title_CS_GetTitleDetail::~Title_CS_GetTitleDetail() {
  SharedDtor();
}

void Title_CS_GetTitleDetail::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Title_CS_GetTitleDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Title_CS_GetTitleDetail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Title_CS_GetTitleDetail_descriptor_;
}

const Title_CS_GetTitleDetail& Title_CS_GetTitleDetail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_title_2eproto();
  return *default_instance_;
}

Title_CS_GetTitleDetail* Title_CS_GetTitleDetail::default_instance_ = NULL;

Title_CS_GetTitleDetail* Title_CS_GetTitleDetail::New() const {
  return new Title_CS_GetTitleDetail;
}

void Title_CS_GetTitleDetail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    titleid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Title_CS_GetTitleDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 titleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &titleid_)));
          set_has_titleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Title_CS_GetTitleDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 titleID = 1;
  if (has_titleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->titleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Title_CS_GetTitleDetail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 titleID = 1;
  if (has_titleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->titleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Title_CS_GetTitleDetail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 titleID = 1;
    if (has_titleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->titleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Title_CS_GetTitleDetail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Title_CS_GetTitleDetail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Title_CS_GetTitleDetail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Title_CS_GetTitleDetail::MergeFrom(const Title_CS_GetTitleDetail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_titleid()) {
      set_titleid(from.titleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Title_CS_GetTitleDetail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Title_CS_GetTitleDetail::CopyFrom(const Title_CS_GetTitleDetail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Title_CS_GetTitleDetail::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Title_CS_GetTitleDetail::Swap(Title_CS_GetTitleDetail* other) {
  if (other != this) {
    std::swap(titleid_, other->titleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Title_CS_GetTitleDetail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Title_CS_GetTitleDetail_descriptor_;
  metadata.reflection = Title_CS_GetTitleDetail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Title_CS_ChangeTitle::kTitleIDFieldNumber;
#endif  // !_MSC_VER

Title_CS_ChangeTitle::Title_CS_ChangeTitle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Title_CS_ChangeTitle::InitAsDefaultInstance() {
}

Title_CS_ChangeTitle::Title_CS_ChangeTitle(const Title_CS_ChangeTitle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Title_CS_ChangeTitle::SharedCtor() {
  _cached_size_ = 0;
  titleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Title_CS_ChangeTitle::~Title_CS_ChangeTitle() {
  SharedDtor();
}

void Title_CS_ChangeTitle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Title_CS_ChangeTitle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Title_CS_ChangeTitle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Title_CS_ChangeTitle_descriptor_;
}

const Title_CS_ChangeTitle& Title_CS_ChangeTitle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_title_2eproto();
  return *default_instance_;
}

Title_CS_ChangeTitle* Title_CS_ChangeTitle::default_instance_ = NULL;

Title_CS_ChangeTitle* Title_CS_ChangeTitle::New() const {
  return new Title_CS_ChangeTitle;
}

void Title_CS_ChangeTitle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    titleid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Title_CS_ChangeTitle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 titleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &titleid_)));
          set_has_titleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Title_CS_ChangeTitle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 titleID = 1;
  if (has_titleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->titleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Title_CS_ChangeTitle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 titleID = 1;
  if (has_titleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->titleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Title_CS_ChangeTitle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 titleID = 1;
    if (has_titleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->titleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Title_CS_ChangeTitle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Title_CS_ChangeTitle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Title_CS_ChangeTitle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Title_CS_ChangeTitle::MergeFrom(const Title_CS_ChangeTitle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_titleid()) {
      set_titleid(from.titleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Title_CS_ChangeTitle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Title_CS_ChangeTitle::CopyFrom(const Title_CS_ChangeTitle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Title_CS_ChangeTitle::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Title_CS_ChangeTitle::Swap(Title_CS_ChangeTitle* other) {
  if (other != this) {
    std::swap(titleid_, other->titleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Title_CS_ChangeTitle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Title_CS_ChangeTitle_descriptor_;
  metadata.reflection = Title_CS_ChangeTitle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TitleClientProgress::kParamFieldNumber;
const int TitleClientProgress::kValFieldNumber;
#endif  // !_MSC_VER

TitleClientProgress::TitleClientProgress()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TitleClientProgress::InitAsDefaultInstance() {
}

TitleClientProgress::TitleClientProgress(const TitleClientProgress& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TitleClientProgress::SharedCtor() {
  _cached_size_ = 0;
  param_ = 0;
  val_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TitleClientProgress::~TitleClientProgress() {
  SharedDtor();
}

void TitleClientProgress::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TitleClientProgress::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TitleClientProgress::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TitleClientProgress_descriptor_;
}

const TitleClientProgress& TitleClientProgress::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_title_2eproto();
  return *default_instance_;
}

TitleClientProgress* TitleClientProgress::default_instance_ = NULL;

TitleClientProgress* TitleClientProgress::New() const {
  return new TitleClientProgress;
}

void TitleClientProgress::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    param_ = 0;
    val_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TitleClientProgress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 param = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &param_)));
          set_has_param();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_val;
        break;
      }

      // optional int64 val = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &val_)));
          set_has_val();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TitleClientProgress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 param = 1;
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->param(), output);
  }

  // optional int64 val = 2;
  if (has_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->val(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TitleClientProgress::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 param = 1;
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->param(), target);
  }

  // optional int64 val = 2;
  if (has_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->val(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TitleClientProgress::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 param = 1;
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->param());
    }

    // optional int64 val = 2;
    if (has_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->val());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TitleClientProgress::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TitleClientProgress* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TitleClientProgress*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TitleClientProgress::MergeFrom(const TitleClientProgress& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_val()) {
      set_val(from.val());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TitleClientProgress::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TitleClientProgress::CopyFrom(const TitleClientProgress& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TitleClientProgress::IsInitialized() const {

  return true;
}

void TitleClientProgress::Swap(TitleClientProgress* other) {
  if (other != this) {
    std::swap(param_, other->param_);
    std::swap(val_, other->val_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TitleClientProgress::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TitleClientProgress_descriptor_;
  metadata.reflection = TitleClientProgress_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TitleClientData::kTitleIDFieldNumber;
const int TitleClientData::kExpireTimeFieldNumber;
const int TitleClientData::kNewFieldNumber;
const int TitleClientData::kProgressFieldNumber;
#endif  // !_MSC_VER

TitleClientData::TitleClientData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TitleClientData::InitAsDefaultInstance() {
}

TitleClientData::TitleClientData(const TitleClientData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TitleClientData::SharedCtor() {
  _cached_size_ = 0;
  titleid_ = 0;
  expiretime_ = GOOGLE_LONGLONG(0);
  new__ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TitleClientData::~TitleClientData() {
  SharedDtor();
}

void TitleClientData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TitleClientData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TitleClientData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TitleClientData_descriptor_;
}

const TitleClientData& TitleClientData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_title_2eproto();
  return *default_instance_;
}

TitleClientData* TitleClientData::default_instance_ = NULL;

TitleClientData* TitleClientData::New() const {
  return new TitleClientData;
}

void TitleClientData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    titleid_ = 0;
    expiretime_ = GOOGLE_LONGLONG(0);
    new__ = false;
  }
  progress_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TitleClientData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 titleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &titleid_)));
          set_has_titleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_expireTime;
        break;
      }

      // required int64 expireTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expireTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &expiretime_)));
          set_has_expiretime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_new;
        break;
      }

      // required bool new = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &new__)));
          set_has_new_();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_progress;
        break;
      }

      // repeated .proto.message.TitleClientProgress progress = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_progress:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_progress()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_progress;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TitleClientData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 titleID = 1;
  if (has_titleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->titleid(), output);
  }

  // required int64 expireTime = 2;
  if (has_expiretime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->expiretime(), output);
  }

  // required bool new = 3;
  if (has_new_()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->new_(), output);
  }

  // repeated .proto.message.TitleClientProgress progress = 4;
  for (int i = 0; i < this->progress_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->progress(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TitleClientData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 titleID = 1;
  if (has_titleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->titleid(), target);
  }

  // required int64 expireTime = 2;
  if (has_expiretime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->expiretime(), target);
  }

  // required bool new = 3;
  if (has_new_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->new_(), target);
  }

  // repeated .proto.message.TitleClientProgress progress = 4;
  for (int i = 0; i < this->progress_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->progress(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TitleClientData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 titleID = 1;
    if (has_titleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->titleid());
    }

    // required int64 expireTime = 2;
    if (has_expiretime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->expiretime());
    }

    // required bool new = 3;
    if (has_new_()) {
      total_size += 1 + 1;
    }

  }
  // repeated .proto.message.TitleClientProgress progress = 4;
  total_size += 1 * this->progress_size();
  for (int i = 0; i < this->progress_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->progress(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TitleClientData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TitleClientData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TitleClientData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TitleClientData::MergeFrom(const TitleClientData& from) {
  GOOGLE_CHECK_NE(&from, this);
  progress_.MergeFrom(from.progress_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_titleid()) {
      set_titleid(from.titleid());
    }
    if (from.has_expiretime()) {
      set_expiretime(from.expiretime());
    }
    if (from.has_new_()) {
      set_new_(from.new_());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TitleClientData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TitleClientData::CopyFrom(const TitleClientData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TitleClientData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void TitleClientData::Swap(TitleClientData* other) {
  if (other != this) {
    std::swap(titleid_, other->titleid_);
    std::swap(expiretime_, other->expiretime_);
    std::swap(new__, other->new__);
    progress_.Swap(&other->progress_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TitleClientData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TitleClientData_descriptor_;
  metadata.reflection = TitleClientData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Title_SC_GetTitleDetail::kTitleIDFieldNumber;
const int Title_SC_GetTitleDetail::kProcessListFieldNumber;
#endif  // !_MSC_VER

Title_SC_GetTitleDetail::Title_SC_GetTitleDetail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Title_SC_GetTitleDetail::InitAsDefaultInstance() {
}

Title_SC_GetTitleDetail::Title_SC_GetTitleDetail(const Title_SC_GetTitleDetail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Title_SC_GetTitleDetail::SharedCtor() {
  _cached_size_ = 0;
  titleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Title_SC_GetTitleDetail::~Title_SC_GetTitleDetail() {
  SharedDtor();
}

void Title_SC_GetTitleDetail::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Title_SC_GetTitleDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Title_SC_GetTitleDetail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Title_SC_GetTitleDetail_descriptor_;
}

const Title_SC_GetTitleDetail& Title_SC_GetTitleDetail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_title_2eproto();
  return *default_instance_;
}

Title_SC_GetTitleDetail* Title_SC_GetTitleDetail::default_instance_ = NULL;

Title_SC_GetTitleDetail* Title_SC_GetTitleDetail::New() const {
  return new Title_SC_GetTitleDetail;
}

void Title_SC_GetTitleDetail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    titleid_ = 0;
  }
  process_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Title_SC_GetTitleDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 titleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &titleid_)));
          set_has_titleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_process_list;
        break;
      }

      // repeated int32 process_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_process_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_process_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_process_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_process_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Title_SC_GetTitleDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 titleID = 1;
  if (has_titleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->titleid(), output);
  }

  // repeated int32 process_list = 3;
  for (int i = 0; i < this->process_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->process_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Title_SC_GetTitleDetail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 titleID = 1;
  if (has_titleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->titleid(), target);
  }

  // repeated int32 process_list = 3;
  for (int i = 0; i < this->process_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->process_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Title_SC_GetTitleDetail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 titleID = 1;
    if (has_titleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->titleid());
    }

  }
  // repeated int32 process_list = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->process_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->process_list(i));
    }
    total_size += 1 * this->process_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Title_SC_GetTitleDetail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Title_SC_GetTitleDetail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Title_SC_GetTitleDetail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Title_SC_GetTitleDetail::MergeFrom(const Title_SC_GetTitleDetail& from) {
  GOOGLE_CHECK_NE(&from, this);
  process_list_.MergeFrom(from.process_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_titleid()) {
      set_titleid(from.titleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Title_SC_GetTitleDetail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Title_SC_GetTitleDetail::CopyFrom(const Title_SC_GetTitleDetail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Title_SC_GetTitleDetail::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Title_SC_GetTitleDetail::Swap(Title_SC_GetTitleDetail* other) {
  if (other != this) {
    std::swap(titleid_, other->titleid_);
    process_list_.Swap(&other->process_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Title_SC_GetTitleDetail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Title_SC_GetTitleDetail_descriptor_;
  metadata.reflection = Title_SC_GetTitleDetail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Title_SC_GetTitleList::kTitleListFieldNumber;
#endif  // !_MSC_VER

Title_SC_GetTitleList::Title_SC_GetTitleList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Title_SC_GetTitleList::InitAsDefaultInstance() {
}

Title_SC_GetTitleList::Title_SC_GetTitleList(const Title_SC_GetTitleList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Title_SC_GetTitleList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Title_SC_GetTitleList::~Title_SC_GetTitleList() {
  SharedDtor();
}

void Title_SC_GetTitleList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Title_SC_GetTitleList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Title_SC_GetTitleList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Title_SC_GetTitleList_descriptor_;
}

const Title_SC_GetTitleList& Title_SC_GetTitleList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_title_2eproto();
  return *default_instance_;
}

Title_SC_GetTitleList* Title_SC_GetTitleList::default_instance_ = NULL;

Title_SC_GetTitleList* Title_SC_GetTitleList::New() const {
  return new Title_SC_GetTitleList;
}

void Title_SC_GetTitleList::Clear() {
  title_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Title_SC_GetTitleList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.message.TitleClientData title_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_title_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_title_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Title_SC_GetTitleList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.message.TitleClientData title_list = 1;
  for (int i = 0; i < this->title_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->title_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Title_SC_GetTitleList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.message.TitleClientData title_list = 1;
  for (int i = 0; i < this->title_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->title_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Title_SC_GetTitleList::ByteSize() const {
  int total_size = 0;

  // repeated .proto.message.TitleClientData title_list = 1;
  total_size += 1 * this->title_list_size();
  for (int i = 0; i < this->title_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->title_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Title_SC_GetTitleList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Title_SC_GetTitleList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Title_SC_GetTitleList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Title_SC_GetTitleList::MergeFrom(const Title_SC_GetTitleList& from) {
  GOOGLE_CHECK_NE(&from, this);
  title_list_.MergeFrom(from.title_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Title_SC_GetTitleList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Title_SC_GetTitleList::CopyFrom(const Title_SC_GetTitleList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Title_SC_GetTitleList::IsInitialized() const {

  for (int i = 0; i < title_list_size(); i++) {
    if (!this->title_list(i).IsInitialized()) return false;
  }
  return true;
}

void Title_SC_GetTitleList::Swap(Title_SC_GetTitleList* other) {
  if (other != this) {
    title_list_.Swap(&other->title_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Title_SC_GetTitleList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Title_SC_GetTitleList_descriptor_;
  metadata.reflection = Title_SC_GetTitleList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Title_SC_ChangeTitle::kResultFieldNumber;
const int Title_SC_ChangeTitle::kTitleIDFieldNumber;
#endif  // !_MSC_VER

Title_SC_ChangeTitle::Title_SC_ChangeTitle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Title_SC_ChangeTitle::InitAsDefaultInstance() {
}

Title_SC_ChangeTitle::Title_SC_ChangeTitle(const Title_SC_ChangeTitle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Title_SC_ChangeTitle::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  titleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Title_SC_ChangeTitle::~Title_SC_ChangeTitle() {
  SharedDtor();
}

void Title_SC_ChangeTitle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Title_SC_ChangeTitle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Title_SC_ChangeTitle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Title_SC_ChangeTitle_descriptor_;
}

const Title_SC_ChangeTitle& Title_SC_ChangeTitle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_title_2eproto();
  return *default_instance_;
}

Title_SC_ChangeTitle* Title_SC_ChangeTitle::default_instance_ = NULL;

Title_SC_ChangeTitle* Title_SC_ChangeTitle::New() const {
  return new Title_SC_ChangeTitle;
}

void Title_SC_ChangeTitle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    titleid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Title_SC_ChangeTitle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_titleID;
        break;
      }

      // optional int32 titleID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_titleID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &titleid_)));
          set_has_titleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Title_SC_ChangeTitle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 titleID = 2;
  if (has_titleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->titleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Title_SC_ChangeTitle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 titleID = 2;
  if (has_titleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->titleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Title_SC_ChangeTitle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 titleID = 2;
    if (has_titleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->titleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Title_SC_ChangeTitle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Title_SC_ChangeTitle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Title_SC_ChangeTitle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Title_SC_ChangeTitle::MergeFrom(const Title_SC_ChangeTitle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_titleid()) {
      set_titleid(from.titleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Title_SC_ChangeTitle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Title_SC_ChangeTitle::CopyFrom(const Title_SC_ChangeTitle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Title_SC_ChangeTitle::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Title_SC_ChangeTitle::Swap(Title_SC_ChangeTitle* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(titleid_, other->titleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Title_SC_ChangeTitle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Title_SC_ChangeTitle_descriptor_;
  metadata.reflection = Title_SC_ChangeTitle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Title_SC_UpdataCurTitle::kTitleIDFieldNumber;
#endif  // !_MSC_VER

Title_SC_UpdataCurTitle::Title_SC_UpdataCurTitle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Title_SC_UpdataCurTitle::InitAsDefaultInstance() {
}

Title_SC_UpdataCurTitle::Title_SC_UpdataCurTitle(const Title_SC_UpdataCurTitle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Title_SC_UpdataCurTitle::SharedCtor() {
  _cached_size_ = 0;
  titleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Title_SC_UpdataCurTitle::~Title_SC_UpdataCurTitle() {
  SharedDtor();
}

void Title_SC_UpdataCurTitle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Title_SC_UpdataCurTitle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Title_SC_UpdataCurTitle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Title_SC_UpdataCurTitle_descriptor_;
}

const Title_SC_UpdataCurTitle& Title_SC_UpdataCurTitle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_title_2eproto();
  return *default_instance_;
}

Title_SC_UpdataCurTitle* Title_SC_UpdataCurTitle::default_instance_ = NULL;

Title_SC_UpdataCurTitle* Title_SC_UpdataCurTitle::New() const {
  return new Title_SC_UpdataCurTitle;
}

void Title_SC_UpdataCurTitle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    titleid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Title_SC_UpdataCurTitle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 titleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &titleid_)));
          set_has_titleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Title_SC_UpdataCurTitle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 titleID = 1;
  if (has_titleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->titleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Title_SC_UpdataCurTitle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 titleID = 1;
  if (has_titleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->titleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Title_SC_UpdataCurTitle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 titleID = 1;
    if (has_titleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->titleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Title_SC_UpdataCurTitle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Title_SC_UpdataCurTitle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Title_SC_UpdataCurTitle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Title_SC_UpdataCurTitle::MergeFrom(const Title_SC_UpdataCurTitle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_titleid()) {
      set_titleid(from.titleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Title_SC_UpdataCurTitle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Title_SC_UpdataCurTitle::CopyFrom(const Title_SC_UpdataCurTitle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Title_SC_UpdataCurTitle::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Title_SC_UpdataCurTitle::Swap(Title_SC_UpdataCurTitle* other) {
  if (other != this) {
    std::swap(titleid_, other->titleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Title_SC_UpdataCurTitle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Title_SC_UpdataCurTitle_descriptor_;
  metadata.reflection = Title_SC_UpdataCurTitle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Title_SC_NewTitle::kTitleIDFieldNumber;
#endif  // !_MSC_VER

Title_SC_NewTitle::Title_SC_NewTitle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Title_SC_NewTitle::InitAsDefaultInstance() {
}

Title_SC_NewTitle::Title_SC_NewTitle(const Title_SC_NewTitle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Title_SC_NewTitle::SharedCtor() {
  _cached_size_ = 0;
  titleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Title_SC_NewTitle::~Title_SC_NewTitle() {
  SharedDtor();
}

void Title_SC_NewTitle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Title_SC_NewTitle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Title_SC_NewTitle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Title_SC_NewTitle_descriptor_;
}

const Title_SC_NewTitle& Title_SC_NewTitle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_title_2eproto();
  return *default_instance_;
}

Title_SC_NewTitle* Title_SC_NewTitle::default_instance_ = NULL;

Title_SC_NewTitle* Title_SC_NewTitle::New() const {
  return new Title_SC_NewTitle;
}

void Title_SC_NewTitle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    titleid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Title_SC_NewTitle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 titleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &titleid_)));
          set_has_titleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Title_SC_NewTitle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 titleID = 1;
  if (has_titleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->titleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Title_SC_NewTitle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 titleID = 1;
  if (has_titleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->titleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Title_SC_NewTitle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 titleID = 1;
    if (has_titleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->titleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Title_SC_NewTitle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Title_SC_NewTitle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Title_SC_NewTitle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Title_SC_NewTitle::MergeFrom(const Title_SC_NewTitle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_titleid()) {
      set_titleid(from.titleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Title_SC_NewTitle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Title_SC_NewTitle::CopyFrom(const Title_SC_NewTitle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Title_SC_NewTitle::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Title_SC_NewTitle::Swap(Title_SC_NewTitle* other) {
  if (other != this) {
    std::swap(titleid_, other->titleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Title_SC_NewTitle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Title_SC_NewTitle_descriptor_;
  metadata.reflection = Title_SC_NewTitle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Title_CS_HideTitle::kIshideFieldNumber;
#endif  // !_MSC_VER

Title_CS_HideTitle::Title_CS_HideTitle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Title_CS_HideTitle::InitAsDefaultInstance() {
}

Title_CS_HideTitle::Title_CS_HideTitle(const Title_CS_HideTitle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Title_CS_HideTitle::SharedCtor() {
  _cached_size_ = 0;
  ishide_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Title_CS_HideTitle::~Title_CS_HideTitle() {
  SharedDtor();
}

void Title_CS_HideTitle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Title_CS_HideTitle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Title_CS_HideTitle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Title_CS_HideTitle_descriptor_;
}

const Title_CS_HideTitle& Title_CS_HideTitle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_title_2eproto();
  return *default_instance_;
}

Title_CS_HideTitle* Title_CS_HideTitle::default_instance_ = NULL;

Title_CS_HideTitle* Title_CS_HideTitle::New() const {
  return new Title_CS_HideTitle;
}

void Title_CS_HideTitle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ishide_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Title_CS_HideTitle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ishide = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ishide_)));
          set_has_ishide();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Title_CS_HideTitle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ishide = 1;
  if (has_ishide()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ishide(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Title_CS_HideTitle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ishide = 1;
  if (has_ishide()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ishide(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Title_CS_HideTitle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ishide = 1;
    if (has_ishide()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ishide());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Title_CS_HideTitle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Title_CS_HideTitle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Title_CS_HideTitle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Title_CS_HideTitle::MergeFrom(const Title_CS_HideTitle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ishide()) {
      set_ishide(from.ishide());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Title_CS_HideTitle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Title_CS_HideTitle::CopyFrom(const Title_CS_HideTitle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Title_CS_HideTitle::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Title_CS_HideTitle::Swap(Title_CS_HideTitle* other) {
  if (other != this) {
    std::swap(ishide_, other->ishide_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Title_CS_HideTitle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Title_CS_HideTitle_descriptor_;
  metadata.reflection = Title_CS_HideTitle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Title_SC_HideTitle::kResultFieldNumber;
#endif  // !_MSC_VER

Title_SC_HideTitle::Title_SC_HideTitle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Title_SC_HideTitle::InitAsDefaultInstance() {
}

Title_SC_HideTitle::Title_SC_HideTitle(const Title_SC_HideTitle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Title_SC_HideTitle::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Title_SC_HideTitle::~Title_SC_HideTitle() {
  SharedDtor();
}

void Title_SC_HideTitle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Title_SC_HideTitle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Title_SC_HideTitle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Title_SC_HideTitle_descriptor_;
}

const Title_SC_HideTitle& Title_SC_HideTitle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_title_2eproto();
  return *default_instance_;
}

Title_SC_HideTitle* Title_SC_HideTitle::default_instance_ = NULL;

Title_SC_HideTitle* Title_SC_HideTitle::New() const {
  return new Title_SC_HideTitle;
}

void Title_SC_HideTitle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Title_SC_HideTitle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Title_SC_HideTitle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Title_SC_HideTitle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Title_SC_HideTitle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Title_SC_HideTitle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Title_SC_HideTitle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Title_SC_HideTitle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Title_SC_HideTitle::MergeFrom(const Title_SC_HideTitle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Title_SC_HideTitle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Title_SC_HideTitle::CopyFrom(const Title_SC_HideTitle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Title_SC_HideTitle::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Title_SC_HideTitle::Swap(Title_SC_HideTitle* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Title_SC_HideTitle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Title_SC_HideTitle_descriptor_;
  metadata.reflection = Title_SC_HideTitle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TitleInfo::kTitleIDFieldNumber;
const int TitleInfo::kAttributeIDFieldNumber;
const int TitleInfo::kExpireTimeFieldNumber;
const int TitleInfo::kNewFieldNumber;
#endif  // !_MSC_VER

TitleInfo::TitleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TitleInfo::InitAsDefaultInstance() {
}

TitleInfo::TitleInfo(const TitleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TitleInfo::SharedCtor() {
  _cached_size_ = 0;
  titleid_ = 0;
  attributeid_ = 0;
  expiretime_ = GOOGLE_LONGLONG(0);
  new__ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TitleInfo::~TitleInfo() {
  SharedDtor();
}

void TitleInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TitleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TitleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TitleInfo_descriptor_;
}

const TitleInfo& TitleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_title_2eproto();
  return *default_instance_;
}

TitleInfo* TitleInfo::default_instance_ = NULL;

TitleInfo* TitleInfo::New() const {
  return new TitleInfo;
}

void TitleInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    titleid_ = 0;
    attributeid_ = 0;
    expiretime_ = GOOGLE_LONGLONG(0);
    new__ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TitleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 titleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &titleid_)));
          set_has_titleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_attributeID;
        break;
      }

      // required int32 attributeID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attributeID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attributeid_)));
          set_has_attributeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_expireTime;
        break;
      }

      // optional int64 expireTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expireTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &expiretime_)));
          set_has_expiretime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_new;
        break;
      }

      // optional bool new = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &new__)));
          set_has_new_();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TitleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 titleID = 1;
  if (has_titleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->titleid(), output);
  }

  // required int32 attributeID = 2;
  if (has_attributeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->attributeid(), output);
  }

  // optional int64 expireTime = 3;
  if (has_expiretime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->expiretime(), output);
  }

  // optional bool new = 4;
  if (has_new_()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->new_(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TitleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 titleID = 1;
  if (has_titleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->titleid(), target);
  }

  // required int32 attributeID = 2;
  if (has_attributeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->attributeid(), target);
  }

  // optional int64 expireTime = 3;
  if (has_expiretime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->expiretime(), target);
  }

  // optional bool new = 4;
  if (has_new_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->new_(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TitleInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 titleID = 1;
    if (has_titleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->titleid());
    }

    // required int32 attributeID = 2;
    if (has_attributeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attributeid());
    }

    // optional int64 expireTime = 3;
    if (has_expiretime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->expiretime());
    }

    // optional bool new = 4;
    if (has_new_()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TitleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TitleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TitleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TitleInfo::MergeFrom(const TitleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_titleid()) {
      set_titleid(from.titleid());
    }
    if (from.has_attributeid()) {
      set_attributeid(from.attributeid());
    }
    if (from.has_expiretime()) {
      set_expiretime(from.expiretime());
    }
    if (from.has_new_()) {
      set_new_(from.new_());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TitleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TitleInfo::CopyFrom(const TitleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TitleInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TitleInfo::Swap(TitleInfo* other) {
  if (other != this) {
    std::swap(titleid_, other->titleid_);
    std::swap(attributeid_, other->attributeid_);
    std::swap(expiretime_, other->expiretime_);
    std::swap(new__, other->new__);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TitleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TitleInfo_descriptor_;
  metadata.reflection = TitleInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TitleDataDetail::kKeyFieldNumber;
const int TitleDataDetail::kValueFieldNumber;
#endif  // !_MSC_VER

TitleDataDetail::TitleDataDetail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TitleDataDetail::InitAsDefaultInstance() {
}

TitleDataDetail::TitleDataDetail(const TitleDataDetail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TitleDataDetail::SharedCtor() {
  _cached_size_ = 0;
  key_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TitleDataDetail::~TitleDataDetail() {
  SharedDtor();
}

void TitleDataDetail::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TitleDataDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TitleDataDetail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TitleDataDetail_descriptor_;
}

const TitleDataDetail& TitleDataDetail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_title_2eproto();
  return *default_instance_;
}

TitleDataDetail* TitleDataDetail::default_instance_ = NULL;

TitleDataDetail* TitleDataDetail::New() const {
  return new TitleDataDetail;
}

void TitleDataDetail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    key_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TitleDataDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // required int32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TitleDataDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->key(), output);
  }

  // required int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TitleDataDetail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->key(), target);
  }

  // required int32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TitleDataDetail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->key());
    }

    // required int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TitleDataDetail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TitleDataDetail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TitleDataDetail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TitleDataDetail::MergeFrom(const TitleDataDetail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TitleDataDetail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TitleDataDetail::CopyFrom(const TitleDataDetail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TitleDataDetail::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TitleDataDetail::Swap(TitleDataDetail* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TitleDataDetail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TitleDataDetail_descriptor_;
  metadata.reflection = TitleDataDetail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TitleDataRecord::kNumFieldNumber;
const int TitleDataRecord::kDetailFieldNumber;
const int TitleDataRecord::kConditionFieldNumber;
#endif  // !_MSC_VER

TitleDataRecord::TitleDataRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TitleDataRecord::InitAsDefaultInstance() {
}

TitleDataRecord::TitleDataRecord(const TitleDataRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TitleDataRecord::SharedCtor() {
  _cached_size_ = 0;
  num_ = 0;
  condition_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TitleDataRecord::~TitleDataRecord() {
  SharedDtor();
}

void TitleDataRecord::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TitleDataRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TitleDataRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TitleDataRecord_descriptor_;
}

const TitleDataRecord& TitleDataRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_title_2eproto();
  return *default_instance_;
}

TitleDataRecord* TitleDataRecord::default_instance_ = NULL;

TitleDataRecord* TitleDataRecord::New() const {
  return new TitleDataRecord;
}

void TitleDataRecord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_ = 0;
    condition_ = 0;
  }
  detail_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TitleDataRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_detail;
        break;
      }

      // repeated .proto.message.TitleDataDetail detail = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_detail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_detail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_detail;
        if (input->ExpectTag(24)) goto parse_condition;
        break;
      }

      // optional int32 condition = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_condition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &condition_)));
          set_has_condition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TitleDataRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num(), output);
  }

  // repeated .proto.message.TitleDataDetail detail = 2;
  for (int i = 0; i < this->detail_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->detail(i), output);
  }

  // optional int32 condition = 3;
  if (has_condition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->condition(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TitleDataRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num(), target);
  }

  // repeated .proto.message.TitleDataDetail detail = 2;
  for (int i = 0; i < this->detail_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->detail(i), target);
  }

  // optional int32 condition = 3;
  if (has_condition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->condition(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TitleDataRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int32 condition = 3;
    if (has_condition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->condition());
    }

  }
  // repeated .proto.message.TitleDataDetail detail = 2;
  total_size += 1 * this->detail_size();
  for (int i = 0; i < this->detail_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->detail(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TitleDataRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TitleDataRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TitleDataRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TitleDataRecord::MergeFrom(const TitleDataRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  detail_.MergeFrom(from.detail_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_condition()) {
      set_condition(from.condition());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TitleDataRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TitleDataRecord::CopyFrom(const TitleDataRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TitleDataRecord::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < detail_size(); i++) {
    if (!this->detail(i).IsInitialized()) return false;
  }
  return true;
}

void TitleDataRecord::Swap(TitleDataRecord* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    detail_.Swap(&other->detail_);
    std::swap(condition_, other->condition_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TitleDataRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TitleDataRecord_descriptor_;
  metadata.reflection = TitleDataRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TitleData::kTitleListFieldNumber;
const int TitleData::kCurTitleIDFieldNumber;
const int TitleData::kRecordListFieldNumber;
const int TitleData::kIsHideFieldNumber;
#endif  // !_MSC_VER

TitleData::TitleData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TitleData::InitAsDefaultInstance() {
}

TitleData::TitleData(const TitleData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TitleData::SharedCtor() {
  _cached_size_ = 0;
  curtitleid_ = 0;
  is_hide_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TitleData::~TitleData() {
  SharedDtor();
}

void TitleData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TitleData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TitleData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TitleData_descriptor_;
}

const TitleData& TitleData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_title_2eproto();
  return *default_instance_;
}

TitleData* TitleData::default_instance_ = NULL;

TitleData* TitleData::New() const {
  return new TitleData;
}

void TitleData::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    curtitleid_ = 0;
    is_hide_ = 0;
  }
  title_list_.Clear();
  record_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TitleData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.message.TitleInfo title_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_title_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_title_list;
        if (input->ExpectTag(16)) goto parse_curTitleID;
        break;
      }

      // optional int32 curTitleID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curTitleID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curtitleid_)));
          set_has_curtitleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_record_list;
        break;
      }

      // repeated .proto.message.TitleDataRecord record_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_record_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_record_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_record_list;
        if (input->ExpectTag(32)) goto parse_is_hide;
        break;
      }

      // optional int32 is_hide = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_hide:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_hide_)));
          set_has_is_hide();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TitleData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.message.TitleInfo title_list = 1;
  for (int i = 0; i < this->title_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->title_list(i), output);
  }

  // optional int32 curTitleID = 2;
  if (has_curtitleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->curtitleid(), output);
  }

  // repeated .proto.message.TitleDataRecord record_list = 3;
  for (int i = 0; i < this->record_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->record_list(i), output);
  }

  // optional int32 is_hide = 4;
  if (has_is_hide()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->is_hide(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TitleData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.message.TitleInfo title_list = 1;
  for (int i = 0; i < this->title_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->title_list(i), target);
  }

  // optional int32 curTitleID = 2;
  if (has_curtitleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->curtitleid(), target);
  }

  // repeated .proto.message.TitleDataRecord record_list = 3;
  for (int i = 0; i < this->record_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->record_list(i), target);
  }

  // optional int32 is_hide = 4;
  if (has_is_hide()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->is_hide(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TitleData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 curTitleID = 2;
    if (has_curtitleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curtitleid());
    }

    // optional int32 is_hide = 4;
    if (has_is_hide()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_hide());
    }

  }
  // repeated .proto.message.TitleInfo title_list = 1;
  total_size += 1 * this->title_list_size();
  for (int i = 0; i < this->title_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->title_list(i));
  }

  // repeated .proto.message.TitleDataRecord record_list = 3;
  total_size += 1 * this->record_list_size();
  for (int i = 0; i < this->record_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->record_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TitleData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TitleData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TitleData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TitleData::MergeFrom(const TitleData& from) {
  GOOGLE_CHECK_NE(&from, this);
  title_list_.MergeFrom(from.title_list_);
  record_list_.MergeFrom(from.record_list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_curtitleid()) {
      set_curtitleid(from.curtitleid());
    }
    if (from.has_is_hide()) {
      set_is_hide(from.is_hide());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TitleData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TitleData::CopyFrom(const TitleData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TitleData::IsInitialized() const {

  for (int i = 0; i < title_list_size(); i++) {
    if (!this->title_list(i).IsInitialized()) return false;
  }
  for (int i = 0; i < record_list_size(); i++) {
    if (!this->record_list(i).IsInitialized()) return false;
  }
  return true;
}

void TitleData::Swap(TitleData* other) {
  if (other != this) {
    title_list_.Swap(&other->title_list_);
    std::swap(curtitleid_, other->curtitleid_);
    record_list_.Swap(&other->record_list_);
    std::swap(is_hide_, other->is_hide_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TitleData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TitleData_descriptor_;
  metadata.reflection = TitleData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TitleOffLineData::kIDFieldNumber;
const int TitleOffLineData::kPlayerIDFieldNumber;
const int TitleOffLineData::kTitleIDFieldNumber;
const int TitleOffLineData::kExpireTimeFieldNumber;
#endif  // !_MSC_VER

TitleOffLineData::TitleOffLineData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TitleOffLineData::InitAsDefaultInstance() {
}

TitleOffLineData::TitleOffLineData(const TitleOffLineData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TitleOffLineData::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  playerid_ = GOOGLE_ULONGLONG(0);
  titleid_ = 0;
  expiretime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TitleOffLineData::~TitleOffLineData() {
  SharedDtor();
}

void TitleOffLineData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TitleOffLineData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TitleOffLineData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TitleOffLineData_descriptor_;
}

const TitleOffLineData& TitleOffLineData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_title_2eproto();
  return *default_instance_;
}

TitleOffLineData* TitleOffLineData::default_instance_ = NULL;

TitleOffLineData* TitleOffLineData::New() const {
  return new TitleOffLineData;
}

void TitleOffLineData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    playerid_ = GOOGLE_ULONGLONG(0);
    titleid_ = 0;
    expiretime_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TitleOffLineData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerID;
        break;
      }

      // required uint64 playerID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_titleID;
        break;
      }

      // required int32 titleID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_titleID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &titleid_)));
          set_has_titleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_expireTime;
        break;
      }

      // optional uint64 expireTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expireTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &expiretime_)));
          set_has_expiretime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TitleOffLineData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // required uint64 playerID = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->playerid(), output);
  }

  // required int32 titleID = 3;
  if (has_titleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->titleid(), output);
  }

  // optional uint64 expireTime = 4;
  if (has_expiretime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->expiretime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TitleOffLineData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // required uint64 playerID = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->playerid(), target);
  }

  // required int32 titleID = 3;
  if (has_titleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->titleid(), target);
  }

  // optional uint64 expireTime = 4;
  if (has_expiretime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->expiretime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TitleOffLineData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // required uint64 playerID = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerid());
    }

    // required int32 titleID = 3;
    if (has_titleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->titleid());
    }

    // optional uint64 expireTime = 4;
    if (has_expiretime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->expiretime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TitleOffLineData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TitleOffLineData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TitleOffLineData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TitleOffLineData::MergeFrom(const TitleOffLineData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_titleid()) {
      set_titleid(from.titleid());
    }
    if (from.has_expiretime()) {
      set_expiretime(from.expiretime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TitleOffLineData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TitleOffLineData::CopyFrom(const TitleOffLineData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TitleOffLineData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void TitleOffLineData::Swap(TitleOffLineData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(playerid_, other->playerid_);
    std::swap(titleid_, other->titleid_);
    std::swap(expiretime_, other->expiretime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TitleOffLineData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TitleOffLineData_descriptor_;
  metadata.reflection = TitleOffLineData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace proto

// @@protoc_insertion_point(global_scope)
